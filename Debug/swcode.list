
swcode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001f6e4  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003c9c  0801f9b4  0801f9b4  000209b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08023650  08023650  00024650  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08023658  08023658  00024658  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0802365c  0802365c  0002465c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000138  24000000  08023660  00025000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00009a80  24000138  08023798  00025138  2**2
                  ALLOC
  8 ._user_heap_stack 00003000  24009bb8  08023798  00025bb8  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00025138  2**0
                  CONTENTS, READONLY
 10 .debug_info   0003ed06  00000000  00000000  00025166  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00008985  00000000  00000000  00063e6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002db0  00000000  00000000  0006c7f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 0000236c  00000000  00000000  0006f5a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00040232  00000000  00000000  00071914  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0004bdb0  00000000  00000000  000b1b46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00171153  00000000  00000000  000fd8f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0026ea49  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000c574  00000000  00000000  0026ea8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000046  00000000  00000000  0027b000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000138 	.word	0x24000138
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0801f99c 	.word	0x0801f99c

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	2400013c 	.word	0x2400013c
 800030c:	0801f99c 	.word	0x0801f99c

08000310 <strcmp>:
 8000310:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000314:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000318:	2a01      	cmp	r2, #1
 800031a:	bf28      	it	cs
 800031c:	429a      	cmpcs	r2, r3
 800031e:	d0f7      	beq.n	8000310 <strcmp>
 8000320:	1ad0      	subs	r0, r2, r3
 8000322:	4770      	bx	lr

08000324 <strlen>:
 8000324:	4603      	mov	r3, r0
 8000326:	f813 2b01 	ldrb.w	r2, [r3], #1
 800032a:	2a00      	cmp	r2, #0
 800032c:	d1fb      	bne.n	8000326 <strlen+0x2>
 800032e:	1a18      	subs	r0, r3, r0
 8000330:	3801      	subs	r0, #1
 8000332:	4770      	bx	lr
	...

08000340 <memchr>:
 8000340:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000344:	2a10      	cmp	r2, #16
 8000346:	db2b      	blt.n	80003a0 <memchr+0x60>
 8000348:	f010 0f07 	tst.w	r0, #7
 800034c:	d008      	beq.n	8000360 <memchr+0x20>
 800034e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000352:	3a01      	subs	r2, #1
 8000354:	428b      	cmp	r3, r1
 8000356:	d02d      	beq.n	80003b4 <memchr+0x74>
 8000358:	f010 0f07 	tst.w	r0, #7
 800035c:	b342      	cbz	r2, 80003b0 <memchr+0x70>
 800035e:	d1f6      	bne.n	800034e <memchr+0xe>
 8000360:	b4f0      	push	{r4, r5, r6, r7}
 8000362:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000366:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800036a:	f022 0407 	bic.w	r4, r2, #7
 800036e:	f07f 0700 	mvns.w	r7, #0
 8000372:	2300      	movs	r3, #0
 8000374:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000378:	3c08      	subs	r4, #8
 800037a:	ea85 0501 	eor.w	r5, r5, r1
 800037e:	ea86 0601 	eor.w	r6, r6, r1
 8000382:	fa85 f547 	uadd8	r5, r5, r7
 8000386:	faa3 f587 	sel	r5, r3, r7
 800038a:	fa86 f647 	uadd8	r6, r6, r7
 800038e:	faa5 f687 	sel	r6, r5, r7
 8000392:	b98e      	cbnz	r6, 80003b8 <memchr+0x78>
 8000394:	d1ee      	bne.n	8000374 <memchr+0x34>
 8000396:	bcf0      	pop	{r4, r5, r6, r7}
 8000398:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800039c:	f002 0207 	and.w	r2, r2, #7
 80003a0:	b132      	cbz	r2, 80003b0 <memchr+0x70>
 80003a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80003a6:	3a01      	subs	r2, #1
 80003a8:	ea83 0301 	eor.w	r3, r3, r1
 80003ac:	b113      	cbz	r3, 80003b4 <memchr+0x74>
 80003ae:	d1f8      	bne.n	80003a2 <memchr+0x62>
 80003b0:	2000      	movs	r0, #0
 80003b2:	4770      	bx	lr
 80003b4:	3801      	subs	r0, #1
 80003b6:	4770      	bx	lr
 80003b8:	2d00      	cmp	r5, #0
 80003ba:	bf06      	itte	eq
 80003bc:	4635      	moveq	r5, r6
 80003be:	3803      	subeq	r0, #3
 80003c0:	3807      	subne	r0, #7
 80003c2:	f015 0f01 	tst.w	r5, #1
 80003c6:	d107      	bne.n	80003d8 <memchr+0x98>
 80003c8:	3001      	adds	r0, #1
 80003ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80003ce:	bf02      	ittt	eq
 80003d0:	3001      	addeq	r0, #1
 80003d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003d6:	3001      	addeq	r0, #1
 80003d8:	bcf0      	pop	{r4, r5, r6, r7}
 80003da:	3801      	subs	r0, #1
 80003dc:	4770      	bx	lr
 80003de:	bf00      	nop

080003e0 <__aeabi_uldivmod>:
 80003e0:	b953      	cbnz	r3, 80003f8 <__aeabi_uldivmod+0x18>
 80003e2:	b94a      	cbnz	r2, 80003f8 <__aeabi_uldivmod+0x18>
 80003e4:	2900      	cmp	r1, #0
 80003e6:	bf08      	it	eq
 80003e8:	2800      	cmpeq	r0, #0
 80003ea:	bf1c      	itt	ne
 80003ec:	f04f 31ff 	movne.w	r1, #4294967295
 80003f0:	f04f 30ff 	movne.w	r0, #4294967295
 80003f4:	f000 b988 	b.w	8000708 <__aeabi_idiv0>
 80003f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000400:	f000 f806 	bl	8000410 <__udivmoddi4>
 8000404:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000408:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800040c:	b004      	add	sp, #16
 800040e:	4770      	bx	lr

08000410 <__udivmoddi4>:
 8000410:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000414:	9d08      	ldr	r5, [sp, #32]
 8000416:	468e      	mov	lr, r1
 8000418:	4604      	mov	r4, r0
 800041a:	4688      	mov	r8, r1
 800041c:	2b00      	cmp	r3, #0
 800041e:	d14a      	bne.n	80004b6 <__udivmoddi4+0xa6>
 8000420:	428a      	cmp	r2, r1
 8000422:	4617      	mov	r7, r2
 8000424:	d962      	bls.n	80004ec <__udivmoddi4+0xdc>
 8000426:	fab2 f682 	clz	r6, r2
 800042a:	b14e      	cbz	r6, 8000440 <__udivmoddi4+0x30>
 800042c:	f1c6 0320 	rsb	r3, r6, #32
 8000430:	fa01 f806 	lsl.w	r8, r1, r6
 8000434:	fa20 f303 	lsr.w	r3, r0, r3
 8000438:	40b7      	lsls	r7, r6
 800043a:	ea43 0808 	orr.w	r8, r3, r8
 800043e:	40b4      	lsls	r4, r6
 8000440:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000444:	fa1f fc87 	uxth.w	ip, r7
 8000448:	fbb8 f1fe 	udiv	r1, r8, lr
 800044c:	0c23      	lsrs	r3, r4, #16
 800044e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000452:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000456:	fb01 f20c 	mul.w	r2, r1, ip
 800045a:	429a      	cmp	r2, r3
 800045c:	d909      	bls.n	8000472 <__udivmoddi4+0x62>
 800045e:	18fb      	adds	r3, r7, r3
 8000460:	f101 30ff 	add.w	r0, r1, #4294967295
 8000464:	f080 80ea 	bcs.w	800063c <__udivmoddi4+0x22c>
 8000468:	429a      	cmp	r2, r3
 800046a:	f240 80e7 	bls.w	800063c <__udivmoddi4+0x22c>
 800046e:	3902      	subs	r1, #2
 8000470:	443b      	add	r3, r7
 8000472:	1a9a      	subs	r2, r3, r2
 8000474:	b2a3      	uxth	r3, r4
 8000476:	fbb2 f0fe 	udiv	r0, r2, lr
 800047a:	fb0e 2210 	mls	r2, lr, r0, r2
 800047e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000482:	fb00 fc0c 	mul.w	ip, r0, ip
 8000486:	459c      	cmp	ip, r3
 8000488:	d909      	bls.n	800049e <__udivmoddi4+0x8e>
 800048a:	18fb      	adds	r3, r7, r3
 800048c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000490:	f080 80d6 	bcs.w	8000640 <__udivmoddi4+0x230>
 8000494:	459c      	cmp	ip, r3
 8000496:	f240 80d3 	bls.w	8000640 <__udivmoddi4+0x230>
 800049a:	443b      	add	r3, r7
 800049c:	3802      	subs	r0, #2
 800049e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80004a2:	eba3 030c 	sub.w	r3, r3, ip
 80004a6:	2100      	movs	r1, #0
 80004a8:	b11d      	cbz	r5, 80004b2 <__udivmoddi4+0xa2>
 80004aa:	40f3      	lsrs	r3, r6
 80004ac:	2200      	movs	r2, #0
 80004ae:	e9c5 3200 	strd	r3, r2, [r5]
 80004b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d905      	bls.n	80004c6 <__udivmoddi4+0xb6>
 80004ba:	b10d      	cbz	r5, 80004c0 <__udivmoddi4+0xb0>
 80004bc:	e9c5 0100 	strd	r0, r1, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	4608      	mov	r0, r1
 80004c4:	e7f5      	b.n	80004b2 <__udivmoddi4+0xa2>
 80004c6:	fab3 f183 	clz	r1, r3
 80004ca:	2900      	cmp	r1, #0
 80004cc:	d146      	bne.n	800055c <__udivmoddi4+0x14c>
 80004ce:	4573      	cmp	r3, lr
 80004d0:	d302      	bcc.n	80004d8 <__udivmoddi4+0xc8>
 80004d2:	4282      	cmp	r2, r0
 80004d4:	f200 8105 	bhi.w	80006e2 <__udivmoddi4+0x2d2>
 80004d8:	1a84      	subs	r4, r0, r2
 80004da:	eb6e 0203 	sbc.w	r2, lr, r3
 80004de:	2001      	movs	r0, #1
 80004e0:	4690      	mov	r8, r2
 80004e2:	2d00      	cmp	r5, #0
 80004e4:	d0e5      	beq.n	80004b2 <__udivmoddi4+0xa2>
 80004e6:	e9c5 4800 	strd	r4, r8, [r5]
 80004ea:	e7e2      	b.n	80004b2 <__udivmoddi4+0xa2>
 80004ec:	2a00      	cmp	r2, #0
 80004ee:	f000 8090 	beq.w	8000612 <__udivmoddi4+0x202>
 80004f2:	fab2 f682 	clz	r6, r2
 80004f6:	2e00      	cmp	r6, #0
 80004f8:	f040 80a4 	bne.w	8000644 <__udivmoddi4+0x234>
 80004fc:	1a8a      	subs	r2, r1, r2
 80004fe:	0c03      	lsrs	r3, r0, #16
 8000500:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000504:	b280      	uxth	r0, r0
 8000506:	b2bc      	uxth	r4, r7
 8000508:	2101      	movs	r1, #1
 800050a:	fbb2 fcfe 	udiv	ip, r2, lr
 800050e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000512:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000516:	fb04 f20c 	mul.w	r2, r4, ip
 800051a:	429a      	cmp	r2, r3
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x11e>
 800051e:	18fb      	adds	r3, r7, r3
 8000520:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000524:	d202      	bcs.n	800052c <__udivmoddi4+0x11c>
 8000526:	429a      	cmp	r2, r3
 8000528:	f200 80e0 	bhi.w	80006ec <__udivmoddi4+0x2dc>
 800052c:	46c4      	mov	ip, r8
 800052e:	1a9b      	subs	r3, r3, r2
 8000530:	fbb3 f2fe 	udiv	r2, r3, lr
 8000534:	fb0e 3312 	mls	r3, lr, r2, r3
 8000538:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800053c:	fb02 f404 	mul.w	r4, r2, r4
 8000540:	429c      	cmp	r4, r3
 8000542:	d907      	bls.n	8000554 <__udivmoddi4+0x144>
 8000544:	18fb      	adds	r3, r7, r3
 8000546:	f102 30ff 	add.w	r0, r2, #4294967295
 800054a:	d202      	bcs.n	8000552 <__udivmoddi4+0x142>
 800054c:	429c      	cmp	r4, r3
 800054e:	f200 80ca 	bhi.w	80006e6 <__udivmoddi4+0x2d6>
 8000552:	4602      	mov	r2, r0
 8000554:	1b1b      	subs	r3, r3, r4
 8000556:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800055a:	e7a5      	b.n	80004a8 <__udivmoddi4+0x98>
 800055c:	f1c1 0620 	rsb	r6, r1, #32
 8000560:	408b      	lsls	r3, r1
 8000562:	fa22 f706 	lsr.w	r7, r2, r6
 8000566:	431f      	orrs	r7, r3
 8000568:	fa0e f401 	lsl.w	r4, lr, r1
 800056c:	fa20 f306 	lsr.w	r3, r0, r6
 8000570:	fa2e fe06 	lsr.w	lr, lr, r6
 8000574:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000578:	4323      	orrs	r3, r4
 800057a:	fa00 f801 	lsl.w	r8, r0, r1
 800057e:	fa1f fc87 	uxth.w	ip, r7
 8000582:	fbbe f0f9 	udiv	r0, lr, r9
 8000586:	0c1c      	lsrs	r4, r3, #16
 8000588:	fb09 ee10 	mls	lr, r9, r0, lr
 800058c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000590:	fb00 fe0c 	mul.w	lr, r0, ip
 8000594:	45a6      	cmp	lr, r4
 8000596:	fa02 f201 	lsl.w	r2, r2, r1
 800059a:	d909      	bls.n	80005b0 <__udivmoddi4+0x1a0>
 800059c:	193c      	adds	r4, r7, r4
 800059e:	f100 3aff 	add.w	sl, r0, #4294967295
 80005a2:	f080 809c 	bcs.w	80006de <__udivmoddi4+0x2ce>
 80005a6:	45a6      	cmp	lr, r4
 80005a8:	f240 8099 	bls.w	80006de <__udivmoddi4+0x2ce>
 80005ac:	3802      	subs	r0, #2
 80005ae:	443c      	add	r4, r7
 80005b0:	eba4 040e 	sub.w	r4, r4, lr
 80005b4:	fa1f fe83 	uxth.w	lr, r3
 80005b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80005bc:	fb09 4413 	mls	r4, r9, r3, r4
 80005c0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80005c4:	fb03 fc0c 	mul.w	ip, r3, ip
 80005c8:	45a4      	cmp	ip, r4
 80005ca:	d908      	bls.n	80005de <__udivmoddi4+0x1ce>
 80005cc:	193c      	adds	r4, r7, r4
 80005ce:	f103 3eff 	add.w	lr, r3, #4294967295
 80005d2:	f080 8082 	bcs.w	80006da <__udivmoddi4+0x2ca>
 80005d6:	45a4      	cmp	ip, r4
 80005d8:	d97f      	bls.n	80006da <__udivmoddi4+0x2ca>
 80005da:	3b02      	subs	r3, #2
 80005dc:	443c      	add	r4, r7
 80005de:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80005e2:	eba4 040c 	sub.w	r4, r4, ip
 80005e6:	fba0 ec02 	umull	lr, ip, r0, r2
 80005ea:	4564      	cmp	r4, ip
 80005ec:	4673      	mov	r3, lr
 80005ee:	46e1      	mov	r9, ip
 80005f0:	d362      	bcc.n	80006b8 <__udivmoddi4+0x2a8>
 80005f2:	d05f      	beq.n	80006b4 <__udivmoddi4+0x2a4>
 80005f4:	b15d      	cbz	r5, 800060e <__udivmoddi4+0x1fe>
 80005f6:	ebb8 0203 	subs.w	r2, r8, r3
 80005fa:	eb64 0409 	sbc.w	r4, r4, r9
 80005fe:	fa04 f606 	lsl.w	r6, r4, r6
 8000602:	fa22 f301 	lsr.w	r3, r2, r1
 8000606:	431e      	orrs	r6, r3
 8000608:	40cc      	lsrs	r4, r1
 800060a:	e9c5 6400 	strd	r6, r4, [r5]
 800060e:	2100      	movs	r1, #0
 8000610:	e74f      	b.n	80004b2 <__udivmoddi4+0xa2>
 8000612:	fbb1 fcf2 	udiv	ip, r1, r2
 8000616:	0c01      	lsrs	r1, r0, #16
 8000618:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800061c:	b280      	uxth	r0, r0
 800061e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000622:	463b      	mov	r3, r7
 8000624:	4638      	mov	r0, r7
 8000626:	463c      	mov	r4, r7
 8000628:	46b8      	mov	r8, r7
 800062a:	46be      	mov	lr, r7
 800062c:	2620      	movs	r6, #32
 800062e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000632:	eba2 0208 	sub.w	r2, r2, r8
 8000636:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800063a:	e766      	b.n	800050a <__udivmoddi4+0xfa>
 800063c:	4601      	mov	r1, r0
 800063e:	e718      	b.n	8000472 <__udivmoddi4+0x62>
 8000640:	4610      	mov	r0, r2
 8000642:	e72c      	b.n	800049e <__udivmoddi4+0x8e>
 8000644:	f1c6 0220 	rsb	r2, r6, #32
 8000648:	fa2e f302 	lsr.w	r3, lr, r2
 800064c:	40b7      	lsls	r7, r6
 800064e:	40b1      	lsls	r1, r6
 8000650:	fa20 f202 	lsr.w	r2, r0, r2
 8000654:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000658:	430a      	orrs	r2, r1
 800065a:	fbb3 f8fe 	udiv	r8, r3, lr
 800065e:	b2bc      	uxth	r4, r7
 8000660:	fb0e 3318 	mls	r3, lr, r8, r3
 8000664:	0c11      	lsrs	r1, r2, #16
 8000666:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800066a:	fb08 f904 	mul.w	r9, r8, r4
 800066e:	40b0      	lsls	r0, r6
 8000670:	4589      	cmp	r9, r1
 8000672:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000676:	b280      	uxth	r0, r0
 8000678:	d93e      	bls.n	80006f8 <__udivmoddi4+0x2e8>
 800067a:	1879      	adds	r1, r7, r1
 800067c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000680:	d201      	bcs.n	8000686 <__udivmoddi4+0x276>
 8000682:	4589      	cmp	r9, r1
 8000684:	d81f      	bhi.n	80006c6 <__udivmoddi4+0x2b6>
 8000686:	eba1 0109 	sub.w	r1, r1, r9
 800068a:	fbb1 f9fe 	udiv	r9, r1, lr
 800068e:	fb09 f804 	mul.w	r8, r9, r4
 8000692:	fb0e 1119 	mls	r1, lr, r9, r1
 8000696:	b292      	uxth	r2, r2
 8000698:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800069c:	4542      	cmp	r2, r8
 800069e:	d229      	bcs.n	80006f4 <__udivmoddi4+0x2e4>
 80006a0:	18ba      	adds	r2, r7, r2
 80006a2:	f109 31ff 	add.w	r1, r9, #4294967295
 80006a6:	d2c4      	bcs.n	8000632 <__udivmoddi4+0x222>
 80006a8:	4542      	cmp	r2, r8
 80006aa:	d2c2      	bcs.n	8000632 <__udivmoddi4+0x222>
 80006ac:	f1a9 0102 	sub.w	r1, r9, #2
 80006b0:	443a      	add	r2, r7
 80006b2:	e7be      	b.n	8000632 <__udivmoddi4+0x222>
 80006b4:	45f0      	cmp	r8, lr
 80006b6:	d29d      	bcs.n	80005f4 <__udivmoddi4+0x1e4>
 80006b8:	ebbe 0302 	subs.w	r3, lr, r2
 80006bc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80006c0:	3801      	subs	r0, #1
 80006c2:	46e1      	mov	r9, ip
 80006c4:	e796      	b.n	80005f4 <__udivmoddi4+0x1e4>
 80006c6:	eba7 0909 	sub.w	r9, r7, r9
 80006ca:	4449      	add	r1, r9
 80006cc:	f1a8 0c02 	sub.w	ip, r8, #2
 80006d0:	fbb1 f9fe 	udiv	r9, r1, lr
 80006d4:	fb09 f804 	mul.w	r8, r9, r4
 80006d8:	e7db      	b.n	8000692 <__udivmoddi4+0x282>
 80006da:	4673      	mov	r3, lr
 80006dc:	e77f      	b.n	80005de <__udivmoddi4+0x1ce>
 80006de:	4650      	mov	r0, sl
 80006e0:	e766      	b.n	80005b0 <__udivmoddi4+0x1a0>
 80006e2:	4608      	mov	r0, r1
 80006e4:	e6fd      	b.n	80004e2 <__udivmoddi4+0xd2>
 80006e6:	443b      	add	r3, r7
 80006e8:	3a02      	subs	r2, #2
 80006ea:	e733      	b.n	8000554 <__udivmoddi4+0x144>
 80006ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80006f0:	443b      	add	r3, r7
 80006f2:	e71c      	b.n	800052e <__udivmoddi4+0x11e>
 80006f4:	4649      	mov	r1, r9
 80006f6:	e79c      	b.n	8000632 <__udivmoddi4+0x222>
 80006f8:	eba1 0109 	sub.w	r1, r1, r9
 80006fc:	46c4      	mov	ip, r8
 80006fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000702:	fb09 f804 	mul.w	r8, r9, r4
 8000706:	e7c4      	b.n	8000692 <__udivmoddi4+0x282>

08000708 <__aeabi_idiv0>:
 8000708:	4770      	bx	lr
 800070a:	bf00      	nop

0800070c <MX_BDMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_BDMA_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_BDMA_CLK_ENABLE();
 8000712:	4b0d      	ldr	r3, [pc, #52]	@ (8000748 <MX_BDMA_Init+0x3c>)
 8000714:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000718:	4a0b      	ldr	r2, [pc, #44]	@ (8000748 <MX_BDMA_Init+0x3c>)
 800071a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800071e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000722:	4b09      	ldr	r3, [pc, #36]	@ (8000748 <MX_BDMA_Init+0x3c>)
 8000724:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000728:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800072c:	607b      	str	r3, [r7, #4]
 800072e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* BDMA_Channel0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BDMA_Channel0_IRQn, 5, 0);
 8000730:	2200      	movs	r2, #0
 8000732:	2105      	movs	r1, #5
 8000734:	2081      	movs	r0, #129	@ 0x81
 8000736:	f003 f927 	bl	8003988 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(BDMA_Channel0_IRQn);
 800073a:	2081      	movs	r0, #129	@ 0x81
 800073c:	f003 f94e 	bl	80039dc <HAL_NVIC_EnableIRQ>

}
 8000740:	bf00      	nop
 8000742:	3708      	adds	r7, #8
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	58024400 	.word	0x58024400

0800074c <DelayNoCycles>:
  * @brief  Simple delay function that doesn't rely on interrupts
  * @param  cycles Number of CPU cycles to wait
  * @retval None
  */
static void DelayNoCycles(uint32_t cycles)
{
 800074c:	b480      	push	{r7}
 800074e:	b085      	sub	sp, #20
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
    volatile uint32_t i;
    for(i = 0; i < cycles; i++)
 8000754:	2300      	movs	r3, #0
 8000756:	60fb      	str	r3, [r7, #12]
 8000758:	e003      	b.n	8000762 <DelayNoCycles+0x16>
    {
        __NOP();
 800075a:	bf00      	nop
    for(i = 0; i < cycles; i++)
 800075c:	68fb      	ldr	r3, [r7, #12]
 800075e:	3301      	adds	r3, #1
 8000760:	60fb      	str	r3, [r7, #12]
 8000762:	68fb      	ldr	r3, [r7, #12]
 8000764:	687a      	ldr	r2, [r7, #4]
 8000766:	429a      	cmp	r2, r3
 8000768:	d8f7      	bhi.n	800075a <DelayNoCycles+0xe>
    }
}
 800076a:	bf00      	nop
 800076c:	bf00      	nop
 800076e:	3714      	adds	r7, #20
 8000770:	46bd      	mov	sp, r7
 8000772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000776:	4770      	bx	lr

08000778 <CheckPeripheralCompatibility>:
  * @brief  Check if peripheral clocks are compatible with target frequency
  * @param  target_freq Target system clock frequency in Hz
  * @retval 0 if compatible, error code if not compatible
  */
static uint32_t CheckPeripheralCompatibility(uint32_t target_freq)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b086      	sub	sp, #24
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
    uint32_t hclk = target_freq / 2;  // AHB clock = SYSCLK / 2
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	085b      	lsrs	r3, r3, #1
 8000784:	613b      	str	r3, [r7, #16]
    uint32_t pclk1 = hclk / 2;        // APB1 clock = HCLK / 2
 8000786:	693b      	ldr	r3, [r7, #16]
 8000788:	085b      	lsrs	r3, r3, #1
 800078a:	60fb      	str	r3, [r7, #12]
    // uint32_t pclk2 = hclk / 2;        // APB2 clock = HCLK / 2 (未使用)
    uint32_t error_code = 0;
 800078c:	2300      	movs	r3, #0
 800078e:	617b      	str	r3, [r7, #20]
    
    // Check UART3 compatibility (APB1 peripheral)
    // UART3 needs minimum 1MHz for 115200 baud rate
    if (pclk1 < 1000000)
 8000790:	68fb      	ldr	r3, [r7, #12]
 8000792:	4a20      	ldr	r2, [pc, #128]	@ (8000814 <CheckPeripheralCompatibility+0x9c>)
 8000794:	4293      	cmp	r3, r2
 8000796:	d809      	bhi.n	80007ac <CheckPeripheralCompatibility+0x34>
    {
        SHELL_LOG_CLK_ERROR("UART3 incompatible: APB1 clock %lu Hz too low for 115200 baud", pclk1);
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	4a1f      	ldr	r2, [pc, #124]	@ (8000818 <CheckPeripheralCompatibility+0xa0>)
 800079c:	2103      	movs	r1, #3
 800079e:	2001      	movs	r0, #1
 80007a0:	f01d fd4e 	bl	801e240 <shellLogPrint>
        error_code |= 0x01;
 80007a4:	697b      	ldr	r3, [r7, #20]
 80007a6:	f043 0301 	orr.w	r3, r3, #1
 80007aa:	617b      	str	r3, [r7, #20]
    }
    
    // Check SD card compatibility (AHB peripheral)
    // SD card needs minimum 400kHz for initialization, 25MHz for high speed
    if (hclk < 400000)
 80007ac:	693b      	ldr	r3, [r7, #16]
 80007ae:	4a1b      	ldr	r2, [pc, #108]	@ (800081c <CheckPeripheralCompatibility+0xa4>)
 80007b0:	4293      	cmp	r3, r2
 80007b2:	d809      	bhi.n	80007c8 <CheckPeripheralCompatibility+0x50>
    {
        SHELL_LOG_CLK_ERROR("SD Card incompatible: AHB clock %lu Hz too low", hclk);
 80007b4:	693b      	ldr	r3, [r7, #16]
 80007b6:	4a1a      	ldr	r2, [pc, #104]	@ (8000820 <CheckPeripheralCompatibility+0xa8>)
 80007b8:	2103      	movs	r1, #3
 80007ba:	2001      	movs	r0, #1
 80007bc:	f01d fd40 	bl	801e240 <shellLogPrint>
        error_code |= 0x02;
 80007c0:	697b      	ldr	r3, [r7, #20]
 80007c2:	f043 0302 	orr.w	r3, r3, #2
 80007c6:	617b      	str	r3, [r7, #20]
    }
    
    // Check FreeRTOS tick compatibility
    // FreeRTOS needs minimum 1kHz tick rate
    if (target_freq < 1000)
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80007ce:	d209      	bcs.n	80007e4 <CheckPeripheralCompatibility+0x6c>
    {
        SHELL_LOG_CLK_ERROR("FreeRTOS incompatible: System clock %lu Hz too low for 1kHz tick", target_freq);
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	4a14      	ldr	r2, [pc, #80]	@ (8000824 <CheckPeripheralCompatibility+0xac>)
 80007d4:	2103      	movs	r1, #3
 80007d6:	2001      	movs	r0, #1
 80007d8:	f01d fd32 	bl	801e240 <shellLogPrint>
        error_code |= 0x04;
 80007dc:	697b      	ldr	r3, [r7, #20]
 80007de:	f043 0304 	orr.w	r3, r3, #4
 80007e2:	617b      	str	r3, [r7, #20]
    }
    
    // Check Flash access compatibility
    // Very low frequencies might have Flash access issues
    if (target_freq < 32000 && target_freq != 32768) // Allow 32kHz LSI
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 80007ea:	d20d      	bcs.n	8000808 <CheckPeripheralCompatibility+0x90>
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80007f2:	d009      	beq.n	8000808 <CheckPeripheralCompatibility+0x90>
    {
        SHELL_LOG_CLK_ERROR("Flash access incompatible: System clock %lu Hz too low", target_freq);
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	4a0c      	ldr	r2, [pc, #48]	@ (8000828 <CheckPeripheralCompatibility+0xb0>)
 80007f8:	2103      	movs	r1, #3
 80007fa:	2001      	movs	r0, #1
 80007fc:	f01d fd20 	bl	801e240 <shellLogPrint>
        error_code |= 0x08;
 8000800:	697b      	ldr	r3, [r7, #20]
 8000802:	f043 0308 	orr.w	r3, r3, #8
 8000806:	617b      	str	r3, [r7, #20]
    }
    
    return error_code;
 8000808:	697b      	ldr	r3, [r7, #20]
}
 800080a:	4618      	mov	r0, r3
 800080c:	3718      	adds	r7, #24
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	000f423f 	.word	0x000f423f
 8000818:	0801f9b4 	.word	0x0801f9b4
 800081c:	00061a7f 	.word	0x00061a7f
 8000820:	0801f9f4 	.word	0x0801f9f4
 8000824:	0801fa24 	.word	0x0801fa24
 8000828:	0801fa68 	.word	0x0801fa68

0800082c <TestAllClockProfiles>:
/**
  * @brief  Test all clock profiles for compatibility with random switching
  * @retval None
  */
void TestAllClockProfiles(void)
{
 800082c:	b5b0      	push	{r4, r5, r7, lr}
 800082e:	b094      	sub	sp, #80	@ 0x50
 8000830:	af02      	add	r7, sp, #8
    SHELL_LOG_CLK_INFO("=== Random Clock Profile Test ===");
 8000832:	4a4a      	ldr	r2, [pc, #296]	@ (800095c <TestAllClockProfiles+0x130>)
 8000834:	2101      	movs	r1, #1
 8000836:	2001      	movs	r0, #1
 8000838:	f01d fd02 	bl	801e240 <shellLogPrint>
    
    ClockProfile_t profiles[] = {
 800083c:	4a48      	ldr	r2, [pc, #288]	@ (8000960 <TestAllClockProfiles+0x134>)
 800083e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000842:	ca07      	ldmia	r2, {r0, r1, r2}
 8000844:	c303      	stmia	r3!, {r0, r1}
 8000846:	701a      	strb	r2, [r3, #0]
        CLOCK_PROFILE_32K, CLOCK_PROFILE_24M, CLOCK_PROFILE_48M,
        CLOCK_PROFILE_96M, CLOCK_PROFILE_128M, CLOCK_PROFILE_200M,
        CLOCK_PROFILE_300M, CLOCK_PROFILE_400M, CLOCK_PROFILE_550M
    };
    
    const char* profile_names[] = {
 8000848:	4b46      	ldr	r3, [pc, #280]	@ (8000964 <TestAllClockProfiles+0x138>)
 800084a:	1d3c      	adds	r4, r7, #4
 800084c:	461d      	mov	r5, r3
 800084e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000850:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000852:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000854:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000856:	682b      	ldr	r3, [r5, #0]
 8000858:	6023      	str	r3, [r4, #0]
        "32K", "24M", "48M", "96M", "128M", "200M", "300M", "400M", "550M"
    };
    
    // 使用系统tick作为随机种子
    uint32_t seed = HAL_GetTick();
 800085a:	f002 ff4f 	bl	80036fc <HAL_GetTick>
 800085e:	6478      	str	r0, [r7, #68]	@ 0x44
    
    // 测试20次随机切换
    for (int test_count = 0; test_count < 20; test_count++)
 8000860:	2300      	movs	r3, #0
 8000862:	643b      	str	r3, [r7, #64]	@ 0x40
 8000864:	e06e      	b.n	8000944 <TestAllClockProfiles+0x118>
    {
        // 简单的线性同余随机数生成器
        seed = (seed * 1103515245 + 12345) & 0x7fffffff;
 8000866:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000868:	4a3f      	ldr	r2, [pc, #252]	@ (8000968 <TestAllClockProfiles+0x13c>)
 800086a:	fb03 f202 	mul.w	r2, r3, r2
 800086e:	f243 0339 	movw	r3, #12345	@ 0x3039
 8000872:	4413      	add	r3, r2
 8000874:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8000878:	647b      	str	r3, [r7, #68]	@ 0x44
        int random_index = seed % 9;
 800087a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800087c:	4b3b      	ldr	r3, [pc, #236]	@ (800096c <TestAllClockProfiles+0x140>)
 800087e:	fba3 2301 	umull	r2, r3, r3, r1
 8000882:	085a      	lsrs	r2, r3, #1
 8000884:	4613      	mov	r3, r2
 8000886:	00db      	lsls	r3, r3, #3
 8000888:	4413      	add	r3, r2
 800088a:	1aca      	subs	r2, r1, r3
 800088c:	63fa      	str	r2, [r7, #60]	@ 0x3c
        
        SHELL_LOG_CLK_INFO("--- Random Test %d: Testing %s Profile ---", 
 800088e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000890:	1c5a      	adds	r2, r3, #1
 8000892:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000894:	009b      	lsls	r3, r3, #2
 8000896:	3348      	adds	r3, #72	@ 0x48
 8000898:	443b      	add	r3, r7
 800089a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800089e:	9300      	str	r3, [sp, #0]
 80008a0:	4613      	mov	r3, r2
 80008a2:	4a33      	ldr	r2, [pc, #204]	@ (8000970 <TestAllClockProfiles+0x144>)
 80008a4:	2101      	movs	r1, #1
 80008a6:	2001      	movs	r0, #1
 80008a8:	f01d fcca 	bl	801e240 <shellLogPrint>
               test_count + 1, profile_names[random_index]);
        
        HAL_StatusTypeDef result = SwitchSystemClock(profiles[random_index]);
 80008ac:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80008b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80008b2:	4413      	add	r3, r2
 80008b4:	781b      	ldrb	r3, [r3, #0]
 80008b6:	4618      	mov	r0, r3
 80008b8:	f000 f8b0 	bl	8000a1c <SwitchSystemClock>
 80008bc:	4603      	mov	r3, r0
 80008be:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
        if (result == HAL_OK)
 80008c2:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d12a      	bne.n	8000920 <TestAllClockProfiles+0xf4>
        {
            // 读取当前实际主频
            uint32_t actual_freq = HAL_RCC_GetSysClockFreq();
 80008ca:	f009 fb67 	bl	8009f9c <HAL_RCC_GetSysClockFreq>
 80008ce:	6378      	str	r0, [r7, #52]	@ 0x34
            SHELL_LOG_CLK_INFO("SUCCESS: %s profile works correctly", profile_names[random_index]);
 80008d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80008d2:	009b      	lsls	r3, r3, #2
 80008d4:	3348      	adds	r3, #72	@ 0x48
 80008d6:	443b      	add	r3, r7
 80008d8:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80008dc:	4a25      	ldr	r2, [pc, #148]	@ (8000974 <TestAllClockProfiles+0x148>)
 80008de:	2101      	movs	r1, #1
 80008e0:	2001      	movs	r0, #1
 80008e2:	f01d fcad 	bl	801e240 <shellLogPrint>
            SHELL_LOG_CLK_INFO("Actual system clock: %lu Hz (%.2f MHz)", 
 80008e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80008e8:	ee07 3a90 	vmov	s15, r3
 80008ec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80008f0:	eddf 6a21 	vldr	s13, [pc, #132]	@ 8000978 <TestAllClockProfiles+0x14c>
 80008f4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80008f8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80008fc:	ed8d 7b00 	vstr	d7, [sp]
 8000900:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000902:	4a1e      	ldr	r2, [pc, #120]	@ (800097c <TestAllClockProfiles+0x150>)
 8000904:	2101      	movs	r1, #1
 8000906:	2001      	movs	r0, #1
 8000908:	f01d fc9a 	bl	801e240 <shellLogPrint>
                   actual_freq, (float)actual_freq / 1000000.0f);
            
            // 等待5秒 - 现在SysTick已经重新配置，osDelay准确
            SHELL_LOG_CLK_INFO("Waiting 5 seconds before next test...");
 800090c:	4a1c      	ldr	r2, [pc, #112]	@ (8000980 <TestAllClockProfiles+0x154>)
 800090e:	2101      	movs	r1, #1
 8000910:	2001      	movs	r0, #1
 8000912:	f01d fc95 	bl	801e240 <shellLogPrint>
            osDelay(5000);
 8000916:	f241 3088 	movw	r0, #5000	@ 0x1388
 800091a:	f015 fefd 	bl	8016718 <osDelay>
 800091e:	e00e      	b.n	800093e <TestAllClockProfiles+0x112>
        }
        else
        {
            SHELL_LOG_CLK_ERROR("%s profile failed", profile_names[random_index]);
 8000920:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000922:	009b      	lsls	r3, r3, #2
 8000924:	3348      	adds	r3, #72	@ 0x48
 8000926:	443b      	add	r3, r7
 8000928:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800092c:	4a15      	ldr	r2, [pc, #84]	@ (8000984 <TestAllClockProfiles+0x158>)
 800092e:	2103      	movs	r1, #3
 8000930:	2001      	movs	r0, #1
 8000932:	f01d fc85 	bl	801e240 <shellLogPrint>
            osDelay(1000); // 失败时等待1秒
 8000936:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800093a:	f015 feed 	bl	8016718 <osDelay>
    for (int test_count = 0; test_count < 20; test_count++)
 800093e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000940:	3301      	adds	r3, #1
 8000942:	643b      	str	r3, [r7, #64]	@ 0x40
 8000944:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000946:	2b13      	cmp	r3, #19
 8000948:	dd8d      	ble.n	8000866 <TestAllClockProfiles+0x3a>
        }
    }
    
    SHELL_LOG_CLK_INFO("=== Random Test Complete ===");
 800094a:	4a0f      	ldr	r2, [pc, #60]	@ (8000988 <TestAllClockProfiles+0x15c>)
 800094c:	2101      	movs	r1, #1
 800094e:	2001      	movs	r0, #1
 8000950:	f01d fc76 	bl	801e240 <shellLogPrint>
}
 8000954:	bf00      	nop
 8000956:	3748      	adds	r7, #72	@ 0x48
 8000958:	46bd      	mov	sp, r7
 800095a:	bdb0      	pop	{r4, r5, r7, pc}
 800095c:	0801faa0 	.word	0x0801faa0
 8000960:	0801fb98 	.word	0x0801fb98
 8000964:	0801fbdc 	.word	0x0801fbdc
 8000968:	41c64e6d 	.word	0x41c64e6d
 800096c:	38e38e39 	.word	0x38e38e39
 8000970:	0801fac4 	.word	0x0801fac4
 8000974:	0801faf0 	.word	0x0801faf0
 8000978:	49742400 	.word	0x49742400
 800097c:	0801fb14 	.word	0x0801fb14
 8000980:	0801fb3c 	.word	0x0801fb3c
 8000984:	0801fb64 	.word	0x0801fb64
 8000988:	0801fb78 	.word	0x0801fb78

0800098c <GetProfileFrequency>:
  * @brief  Get frequency for a given profile
  * @param  profile Clock profile
  * @retval Frequency in Hz
  */
static uint32_t GetProfileFrequency(ClockProfile_t profile)
{
 800098c:	b480      	push	{r7}
 800098e:	b083      	sub	sp, #12
 8000990:	af00      	add	r7, sp, #0
 8000992:	4603      	mov	r3, r0
 8000994:	71fb      	strb	r3, [r7, #7]
    switch(profile)
 8000996:	79fb      	ldrb	r3, [r7, #7]
 8000998:	2b08      	cmp	r3, #8
 800099a:	d828      	bhi.n	80009ee <GetProfileFrequency+0x62>
 800099c:	a201      	add	r2, pc, #4	@ (adr r2, 80009a4 <GetProfileFrequency+0x18>)
 800099e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009a2:	bf00      	nop
 80009a4:	080009c9 	.word	0x080009c9
 80009a8:	080009cf 	.word	0x080009cf
 80009ac:	080009d3 	.word	0x080009d3
 80009b0:	080009d7 	.word	0x080009d7
 80009b4:	080009db 	.word	0x080009db
 80009b8:	080009df 	.word	0x080009df
 80009bc:	080009e3 	.word	0x080009e3
 80009c0:	080009e7 	.word	0x080009e7
 80009c4:	080009eb 	.word	0x080009eb
    {
        case CLOCK_PROFILE_32K:  return 32768;
 80009c8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80009cc:	e010      	b.n	80009f0 <GetProfileFrequency+0x64>
        case CLOCK_PROFILE_24M:  return 24000000;
 80009ce:	4b0b      	ldr	r3, [pc, #44]	@ (80009fc <GetProfileFrequency+0x70>)
 80009d0:	e00e      	b.n	80009f0 <GetProfileFrequency+0x64>
        case CLOCK_PROFILE_48M:  return 48000000;
 80009d2:	4b0b      	ldr	r3, [pc, #44]	@ (8000a00 <GetProfileFrequency+0x74>)
 80009d4:	e00c      	b.n	80009f0 <GetProfileFrequency+0x64>
        case CLOCK_PROFILE_96M:  return 96000000;
 80009d6:	4b0b      	ldr	r3, [pc, #44]	@ (8000a04 <GetProfileFrequency+0x78>)
 80009d8:	e00a      	b.n	80009f0 <GetProfileFrequency+0x64>
        case CLOCK_PROFILE_128M: return 128000000;
 80009da:	4b0b      	ldr	r3, [pc, #44]	@ (8000a08 <GetProfileFrequency+0x7c>)
 80009dc:	e008      	b.n	80009f0 <GetProfileFrequency+0x64>
        case CLOCK_PROFILE_200M: return 200000000;
 80009de:	4b0b      	ldr	r3, [pc, #44]	@ (8000a0c <GetProfileFrequency+0x80>)
 80009e0:	e006      	b.n	80009f0 <GetProfileFrequency+0x64>
        case CLOCK_PROFILE_300M: return 300000000;
 80009e2:	4b0b      	ldr	r3, [pc, #44]	@ (8000a10 <GetProfileFrequency+0x84>)
 80009e4:	e004      	b.n	80009f0 <GetProfileFrequency+0x64>
        case CLOCK_PROFILE_400M: return 400000000;
 80009e6:	4b0b      	ldr	r3, [pc, #44]	@ (8000a14 <GetProfileFrequency+0x88>)
 80009e8:	e002      	b.n	80009f0 <GetProfileFrequency+0x64>
        case CLOCK_PROFILE_550M: return 550000000;
 80009ea:	4b0b      	ldr	r3, [pc, #44]	@ (8000a18 <GetProfileFrequency+0x8c>)
 80009ec:	e000      	b.n	80009f0 <GetProfileFrequency+0x64>
        default: return 24000000;
 80009ee:	4b03      	ldr	r3, [pc, #12]	@ (80009fc <GetProfileFrequency+0x70>)
    }
}
 80009f0:	4618      	mov	r0, r3
 80009f2:	370c      	adds	r7, #12
 80009f4:	46bd      	mov	sp, r7
 80009f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fa:	4770      	bx	lr
 80009fc:	016e3600 	.word	0x016e3600
 8000a00:	02dc6c00 	.word	0x02dc6c00
 8000a04:	05b8d800 	.word	0x05b8d800
 8000a08:	07a12000 	.word	0x07a12000
 8000a0c:	0bebc200 	.word	0x0bebc200
 8000a10:	11e1a300 	.word	0x11e1a300
 8000a14:	17d78400 	.word	0x17d78400
 8000a18:	20c85580 	.word	0x20c85580

08000a1c <SwitchSystemClock>:
  * @note   Supports 9 different clock frequencies with automatic compatibility checking.
  * @param  profile The target clock profile.
  * @retval HAL_OK if successful, HAL_ERROR if failed
  */
HAL_StatusTypeDef SwitchSystemClock(ClockProfile_t profile)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b0b0      	sub	sp, #192	@ 0xc0
 8000a20:	af02      	add	r7, sp, #8
 8000a22:	4603      	mov	r3, r0
 8000a24:	71fb      	strb	r3, [r7, #7]
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a26:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000a2a:	2220      	movs	r2, #32
 8000a2c:	2100      	movs	r1, #0
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f01e fb6e 	bl	801f110 <memset>
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a34:	f107 0318 	add.w	r3, r7, #24
 8000a38:	224c      	movs	r2, #76	@ 0x4c
 8000a3a:	2100      	movs	r1, #0
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f01e fb67 	bl	801f110 <memset>
    uint32_t flash_latency;
    uint32_t pwr_vos_level;
    uint32_t pll_m, pll_n, pll_p;
    uint8_t use_pll = 1;
 8000a42:	2301      	movs	r3, #1
 8000a44:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
    uint32_t target_freq;
    
    // Get target frequency
    target_freq = GetProfileFrequency(profile);
 8000a48:	79fb      	ldrb	r3, [r7, #7]
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f7ff ff9e 	bl	800098c <GetProfileFrequency>
 8000a50:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
    
    SHELL_LOG_CLK_INFO("Requesting clock switch to %lu Hz (Profile %d)", target_freq, profile);
 8000a54:	79fb      	ldrb	r3, [r7, #7]
 8000a56:	9300      	str	r3, [sp, #0]
 8000a58:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000a5c:	4ac1      	ldr	r2, [pc, #772]	@ (8000d64 <SwitchSystemClock+0x348>)
 8000a5e:	2101      	movs	r1, #1
 8000a60:	2001      	movs	r0, #1
 8000a62:	f01d fbed 	bl	801e240 <shellLogPrint>
    
    // Check peripheral compatibility
    uint32_t compat_error = CheckPeripheralCompatibility(target_freq);
 8000a66:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 8000a6a:	f7ff fe85 	bl	8000778 <CheckPeripheralCompatibility>
 8000a6e:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
    if (compat_error != 0)
 8000a72:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d02c      	beq.n	8000ad4 <SwitchSystemClock+0xb8>
    {
        SHELL_LOG_CLK_ERROR("Peripheral compatibility check failed (0x%02lX)", compat_error);
 8000a7a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000a7e:	4aba      	ldr	r2, [pc, #744]	@ (8000d68 <SwitchSystemClock+0x34c>)
 8000a80:	2103      	movs	r1, #3
 8000a82:	2001      	movs	r0, #1
 8000a84:	f01d fbdc 	bl	801e240 <shellLogPrint>
        
        // Find compatible alternative
        ClockProfile_t compatible_profile = FindCompatibleProfile(profile);
 8000a88:	79fb      	ldrb	r3, [r7, #7]
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f000 fa78 	bl	8000f80 <FindCompatibleProfile>
 8000a90:	4603      	mov	r3, r0
 8000a92:	f887 3093 	strb.w	r3, [r7, #147]	@ 0x93
        if (compatible_profile == profile)
 8000a96:	f897 2093 	ldrb.w	r2, [r7, #147]	@ 0x93
 8000a9a:	79fb      	ldrb	r3, [r7, #7]
 8000a9c:	429a      	cmp	r2, r3
 8000a9e:	d106      	bne.n	8000aae <SwitchSystemClock+0x92>
        {
            SHELL_LOG_CLK_ERROR("No compatible clock profile found");
 8000aa0:	4ab2      	ldr	r2, [pc, #712]	@ (8000d6c <SwitchSystemClock+0x350>)
 8000aa2:	2103      	movs	r1, #3
 8000aa4:	2001      	movs	r0, #1
 8000aa6:	f01d fbcb 	bl	801e240 <shellLogPrint>
            return HAL_ERROR;
 8000aaa:	2301      	movs	r3, #1
 8000aac:	e24a      	b.n	8000f44 <SwitchSystemClock+0x528>
        }
        
        // Use compatible profile instead
        profile = compatible_profile;
 8000aae:	f897 3093 	ldrb.w	r3, [r7, #147]	@ 0x93
 8000ab2:	71fb      	strb	r3, [r7, #7]
        target_freq = GetProfileFrequency(profile);
 8000ab4:	79fb      	ldrb	r3, [r7, #7]
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f7ff ff68 	bl	800098c <GetProfileFrequency>
 8000abc:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
        SHELL_LOG_CLK_INFO("Using compatible profile %d (%lu Hz)", profile, target_freq);
 8000ac0:	79fa      	ldrb	r2, [r7, #7]
 8000ac2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000ac6:	9300      	str	r3, [sp, #0]
 8000ac8:	4613      	mov	r3, r2
 8000aca:	4aa9      	ldr	r2, [pc, #676]	@ (8000d70 <SwitchSystemClock+0x354>)
 8000acc:	2101      	movs	r1, #1
 8000ace:	2001      	movs	r0, #1
 8000ad0:	f01d fbb6 	bl	801e240 <shellLogPrint>
    }

    // --- Determine target settings based on profile ---
    switch(profile)
 8000ad4:	79fb      	ldrb	r3, [r7, #7]
 8000ad6:	2b07      	cmp	r3, #7
 8000ad8:	f200 8095 	bhi.w	8000c06 <SwitchSystemClock+0x1ea>
 8000adc:	a201      	add	r2, pc, #4	@ (adr r2, 8000ae4 <SwitchSystemClock+0xc8>)
 8000ade:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ae2:	bf00      	nop
 8000ae4:	08000b05 	.word	0x08000b05
 8000ae8:	08000b1b 	.word	0x08000b1b
 8000aec:	08000b3d 	.word	0x08000b3d
 8000af0:	08000b5f 	.word	0x08000b5f
 8000af4:	08000b81 	.word	0x08000b81
 8000af8:	08000ba3 	.word	0x08000ba3
 8000afc:	08000bc5 	.word	0x08000bc5
 8000b00:	08000be7 	.word	0x08000be7
    {
        case CLOCK_PROFILE_32K:
            // 32kHz using LSI
            flash_latency = FLASH_LATENCY_0;
 8000b04:	2300      	movs	r3, #0
 8000b06:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
            pwr_vos_level = PWR_REGULATOR_VOLTAGE_SCALE3;
 8000b0a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000b0e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
            use_pll = 0;
 8000b12:	2300      	movs	r3, #0
 8000b14:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
            break;
 8000b18:	e085      	b.n	8000c26 <SwitchSystemClock+0x20a>
            
        case CLOCK_PROFILE_24M:
            // 24MHz using PLL: 25MHz HSE / 25 * 192 / 8 = 24MHz
            // VCO = 25MHz / 25 * 192 = 192MHz (符合150-836MHz要求)
            // PLLP = 8 (符合STM32H7的1,2,4,6,8,16,128限制)
            pwr_vos_level = PWR_REGULATOR_VOLTAGE_SCALE3;
 8000b1a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000b1e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
            pll_m = 25;
 8000b22:	2319      	movs	r3, #25
 8000b24:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
            pll_n = 192;
 8000b28:	23c0      	movs	r3, #192	@ 0xc0
 8000b2a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
            pll_p = 8;
 8000b2e:	2308      	movs	r3, #8
 8000b30:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
            flash_latency = FLASH_LATENCY_0;
 8000b34:	2300      	movs	r3, #0
 8000b36:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
            break;
 8000b3a:	e074      	b.n	8000c26 <SwitchSystemClock+0x20a>
            
        case CLOCK_PROFILE_48M:
            // 48MHz using PLL (25MHz HSE / 5 * 48 / 5 = 48MHz)
            pwr_vos_level = PWR_REGULATOR_VOLTAGE_SCALE3;
 8000b3c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000b40:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
            pll_m = 5;
 8000b44:	2305      	movs	r3, #5
 8000b46:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
            pll_n = 48;
 8000b4a:	2330      	movs	r3, #48	@ 0x30
 8000b4c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
            pll_p = 5;
 8000b50:	2305      	movs	r3, #5
 8000b52:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
            flash_latency = FLASH_LATENCY_0;
 8000b56:	2300      	movs	r3, #0
 8000b58:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
            break;
 8000b5c:	e063      	b.n	8000c26 <SwitchSystemClock+0x20a>
            
        case CLOCK_PROFILE_96M:
            // 96MHz using PLL (25MHz HSE / 5 * 96 / 5 = 96MHz)
            pwr_vos_level = PWR_REGULATOR_VOLTAGE_SCALE2;
 8000b5e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000b62:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
            pll_m = 5;
 8000b66:	2305      	movs	r3, #5
 8000b68:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
            pll_n = 96;
 8000b6c:	2360      	movs	r3, #96	@ 0x60
 8000b6e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
            pll_p = 5;
 8000b72:	2305      	movs	r3, #5
 8000b74:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
            flash_latency = FLASH_LATENCY_1;
 8000b78:	2301      	movs	r3, #1
 8000b7a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
            break;
 8000b7e:	e052      	b.n	8000c26 <SwitchSystemClock+0x20a>
            
        case CLOCK_PROFILE_128M:
            // 128MHz using PLL (25MHz HSE / 5 * 128 / 5 = 128MHz)
            pwr_vos_level = PWR_REGULATOR_VOLTAGE_SCALE2;
 8000b80:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000b84:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
            pll_m = 5;
 8000b88:	2305      	movs	r3, #5
 8000b8a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
            pll_n = 128;
 8000b8e:	2380      	movs	r3, #128	@ 0x80
 8000b90:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
            pll_p = 5;
 8000b94:	2305      	movs	r3, #5
 8000b96:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
            flash_latency = FLASH_LATENCY_1;
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
            break;
 8000ba0:	e041      	b.n	8000c26 <SwitchSystemClock+0x20a>
            
        case CLOCK_PROFILE_200M:
            // 200MHz using PLL (25MHz HSE / 5 * 80 / 2 = 200MHz)
            pwr_vos_level = PWR_REGULATOR_VOLTAGE_SCALE1;
 8000ba2:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000ba6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
            pll_m = 5;
 8000baa:	2305      	movs	r3, #5
 8000bac:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
            pll_n = 80;
 8000bb0:	2350      	movs	r3, #80	@ 0x50
 8000bb2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
            pll_p = 2;
 8000bb6:	2302      	movs	r3, #2
 8000bb8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
            flash_latency = FLASH_LATENCY_2;
 8000bbc:	2302      	movs	r3, #2
 8000bbe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
            break;
 8000bc2:	e030      	b.n	8000c26 <SwitchSystemClock+0x20a>
            
        case CLOCK_PROFILE_300M:
            // 300MHz using PLL (25MHz HSE / 5 * 120 / 2 = 300MHz)
            pwr_vos_level = PWR_REGULATOR_VOLTAGE_SCALE1;
 8000bc4:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000bc8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
            pll_m = 5;
 8000bcc:	2305      	movs	r3, #5
 8000bce:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
            pll_n = 120;
 8000bd2:	2378      	movs	r3, #120	@ 0x78
 8000bd4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
            pll_p = 2;
 8000bd8:	2302      	movs	r3, #2
 8000bda:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
            flash_latency = FLASH_LATENCY_3;
 8000bde:	2303      	movs	r3, #3
 8000be0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
            break;
 8000be4:	e01f      	b.n	8000c26 <SwitchSystemClock+0x20a>
            
        case CLOCK_PROFILE_400M:
            // 400MHz using PLL (25MHz HSE / 5 * 80 / 1 = 400MHz)
            pwr_vos_level = PWR_REGULATOR_VOLTAGE_SCALE0;
 8000be6:	2300      	movs	r3, #0
 8000be8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
            pll_m = 5;
 8000bec:	2305      	movs	r3, #5
 8000bee:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
            pll_n = 80;
 8000bf2:	2350      	movs	r3, #80	@ 0x50
 8000bf4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
            pll_p = 1;
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
            flash_latency = FLASH_LATENCY_4;
 8000bfe:	2304      	movs	r3, #4
 8000c00:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
            break;
 8000c04:	e00f      	b.n	8000c26 <SwitchSystemClock+0x20a>
            
        case CLOCK_PROFILE_550M:
        default:
            // 550MHz using PLL (25MHz HSE / 5 * 110 / 1 = 550MHz)
            pwr_vos_level = PWR_REGULATOR_VOLTAGE_SCALE0;
 8000c06:	2300      	movs	r3, #0
 8000c08:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
            pll_m = 5;
 8000c0c:	2305      	movs	r3, #5
 8000c0e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
            pll_n = 110;
 8000c12:	236e      	movs	r3, #110	@ 0x6e
 8000c14:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
            pll_p = 1;
 8000c18:	2301      	movs	r3, #1
 8000c1a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
            flash_latency = FLASH_LATENCY_4;
 8000c1e:	2304      	movs	r3, #4
 8000c20:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
            break;
 8000c24:	bf00      	nop
    }

    SHELL_LOG_CLK_INFO("Starting clock switch to %lu Hz...", target_freq);
 8000c26:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000c2a:	4a52      	ldr	r2, [pc, #328]	@ (8000d74 <SwitchSystemClock+0x358>)
 8000c2c:	2101      	movs	r1, #1
 8000c2e:	2001      	movs	r0, #1
 8000c30:	f01d fb06 	bl	801e240 <shellLogPrint>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c34:	b672      	cpsid	i
}
 8000c36:	bf00      	nop

    /* Use global interrupt disable for maximum safety during clock switching. */
    __disable_irq();

    // --- Step 1: 升频时先配置电压调节器和Flash等待周期 ---
    if (profile >= CLOCK_PROFILE_400M)
 8000c38:	79fb      	ldrb	r3, [r7, #7]
 8000c3a:	2b06      	cmp	r3, #6
 8000c3c:	d925      	bls.n	8000c8a <SwitchSystemClock+0x26e>
    {
        // 高频模式需要最高电压等级
        __HAL_PWR_VOLTAGESCALING_CONFIG(pwr_vos_level);
 8000c3e:	2300      	movs	r3, #0
 8000c40:	617b      	str	r3, [r7, #20]
 8000c42:	4b4d      	ldr	r3, [pc, #308]	@ (8000d78 <SwitchSystemClock+0x35c>)
 8000c44:	699b      	ldr	r3, [r3, #24]
 8000c46:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8000c4a:	494b      	ldr	r1, [pc, #300]	@ (8000d78 <SwitchSystemClock+0x35c>)
 8000c4c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8000c50:	4313      	orrs	r3, r2
 8000c52:	618b      	str	r3, [r1, #24]
 8000c54:	4b48      	ldr	r3, [pc, #288]	@ (8000d78 <SwitchSystemClock+0x35c>)
 8000c56:	699b      	ldr	r3, [r3, #24]
 8000c58:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000c5c:	617b      	str	r3, [r7, #20]
 8000c5e:	697b      	ldr	r3, [r7, #20]
        while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000c60:	bf00      	nop
 8000c62:	4b45      	ldr	r3, [pc, #276]	@ (8000d78 <SwitchSystemClock+0x35c>)
 8000c64:	699b      	ldr	r3, [r3, #24]
 8000c66:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000c6a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000c6e:	d1f8      	bne.n	8000c62 <SwitchSystemClock+0x246>
        DelayNoCycles(1000000); // 约10ms延时
 8000c70:	4842      	ldr	r0, [pc, #264]	@ (8000d7c <SwitchSystemClock+0x360>)
 8000c72:	f7ff fd6b 	bl	800074c <DelayNoCycles>
        __HAL_FLASH_SET_LATENCY(flash_latency);
 8000c76:	4b42      	ldr	r3, [pc, #264]	@ (8000d80 <SwitchSystemClock+0x364>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	f023 020f 	bic.w	r2, r3, #15
 8000c7e:	4940      	ldr	r1, [pc, #256]	@ (8000d80 <SwitchSystemClock+0x364>)
 8000c80:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000c84:	4313      	orrs	r3, r2
 8000c86:	600b      	str	r3, [r1, #0]
 8000c88:	e01e      	b.n	8000cc8 <SwitchSystemClock+0x2ac>
    }
    else if (profile >= CLOCK_PROFILE_200M)
 8000c8a:	79fb      	ldrb	r3, [r7, #7]
 8000c8c:	2b04      	cmp	r3, #4
 8000c8e:	d91b      	bls.n	8000cc8 <SwitchSystemClock+0x2ac>
    {
        // 中高频模式
        __HAL_PWR_VOLTAGESCALING_CONFIG(pwr_vos_level);
 8000c90:	2300      	movs	r3, #0
 8000c92:	613b      	str	r3, [r7, #16]
 8000c94:	4b38      	ldr	r3, [pc, #224]	@ (8000d78 <SwitchSystemClock+0x35c>)
 8000c96:	699b      	ldr	r3, [r3, #24]
 8000c98:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8000c9c:	4936      	ldr	r1, [pc, #216]	@ (8000d78 <SwitchSystemClock+0x35c>)
 8000c9e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8000ca2:	4313      	orrs	r3, r2
 8000ca4:	618b      	str	r3, [r1, #24]
 8000ca6:	4b34      	ldr	r3, [pc, #208]	@ (8000d78 <SwitchSystemClock+0x35c>)
 8000ca8:	699b      	ldr	r3, [r3, #24]
 8000caa:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000cae:	613b      	str	r3, [r7, #16]
 8000cb0:	693b      	ldr	r3, [r7, #16]
        while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000cb2:	bf00      	nop
 8000cb4:	4b30      	ldr	r3, [pc, #192]	@ (8000d78 <SwitchSystemClock+0x35c>)
 8000cb6:	699b      	ldr	r3, [r3, #24]
 8000cb8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000cbc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000cc0:	d1f8      	bne.n	8000cb4 <SwitchSystemClock+0x298>
        DelayNoCycles(500000); // 约5ms延时
 8000cc2:	4830      	ldr	r0, [pc, #192]	@ (8000d84 <SwitchSystemClock+0x368>)
 8000cc4:	f7ff fd42 	bl	800074c <DelayNoCycles>
    }

    // --- Step 2: 根据目标时钟源进行配置 ---
    if (use_pll == 0)
 8000cc8:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d132      	bne.n	8000d36 <SwitchSystemClock+0x31a>
    {
        // 不使用PLL的低频模式
        if (profile == CLOCK_PROFILE_32K)
 8000cd0:	79fb      	ldrb	r3, [r7, #7]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	f040 80d3 	bne.w	8000e7e <SwitchSystemClock+0x462>
        {
            // 启用LSI
            RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI;
 8000cd8:	2308      	movs	r3, #8
 8000cda:	61bb      	str	r3, [r7, #24]
            RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000cdc:	2301      	movs	r3, #1
 8000cde:	62fb      	str	r3, [r7, #44]	@ 0x2c
            RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	63fb      	str	r3, [r7, #60]	@ 0x3c
            if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ce4:	f107 0318 	add.w	r3, r7, #24
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f008 f8b7 	bl	8008e5c <HAL_RCC_OscConfig>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d008      	beq.n	8000d06 <SwitchSystemClock+0x2ea>
  __ASM volatile ("cpsie i" : : : "memory");
 8000cf4:	b662      	cpsie	i
}
 8000cf6:	bf00      	nop
            {
                __enable_irq();
                SHELL_LOG_CLK_ERROR("LSI configuration failed");
 8000cf8:	4a23      	ldr	r2, [pc, #140]	@ (8000d88 <SwitchSystemClock+0x36c>)
 8000cfa:	2103      	movs	r1, #3
 8000cfc:	2001      	movs	r0, #1
 8000cfe:	f01d fa9f 	bl	801e240 <shellLogPrint>
                return HAL_ERROR;
 8000d02:	2301      	movs	r3, #1
 8000d04:	e11e      	b.n	8000f44 <SwitchSystemClock+0x528>
            }
            
            // 切换到LSI
            RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_SYSCLK;
 8000d06:	2301      	movs	r3, #1
 8000d08:	667b      	str	r3, [r7, #100]	@ 0x64
            RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	66bb      	str	r3, [r7, #104]	@ 0x68
            if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, flash_latency) != HAL_OK)
 8000d0e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000d12:	f8d7 10b4 	ldr.w	r1, [r7, #180]	@ 0xb4
 8000d16:	4618      	mov	r0, r3
 8000d18:	f008 fdd0 	bl	80098bc <HAL_RCC_ClockConfig>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	f000 80ad 	beq.w	8000e7e <SwitchSystemClock+0x462>
  __ASM volatile ("cpsie i" : : : "memory");
 8000d24:	b662      	cpsie	i
}
 8000d26:	bf00      	nop
            {
                __enable_irq();
                SHELL_LOG_CLK_ERROR("LSI clock switch failed");
 8000d28:	4a18      	ldr	r2, [pc, #96]	@ (8000d8c <SwitchSystemClock+0x370>)
 8000d2a:	2103      	movs	r1, #3
 8000d2c:	2001      	movs	r0, #1
 8000d2e:	f01d fa87 	bl	801e240 <shellLogPrint>
                return HAL_ERROR;
 8000d32:	2301      	movs	r3, #1
 8000d34:	e106      	b.n	8000f44 <SwitchSystemClock+0x528>
    }
    else
    {
        // 使用PLL的模式
        // 先切换到HSI作为临时时钟源
        RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_SYSCLK;
 8000d36:	2301      	movs	r3, #1
 8000d38:	667b      	str	r3, [r7, #100]	@ 0x64
        RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	66bb      	str	r3, [r7, #104]	@ 0x68
        if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000d3e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000d42:	2101      	movs	r1, #1
 8000d44:	4618      	mov	r0, r3
 8000d46:	f008 fdb9 	bl	80098bc <HAL_RCC_ClockConfig>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d021      	beq.n	8000d94 <SwitchSystemClock+0x378>
  __ASM volatile ("cpsie i" : : : "memory");
 8000d50:	b662      	cpsie	i
}
 8000d52:	bf00      	nop
        {
            __enable_irq();
            SHELL_LOG_CLK_ERROR("HSI temporary switch failed");
 8000d54:	4a0e      	ldr	r2, [pc, #56]	@ (8000d90 <SwitchSystemClock+0x374>)
 8000d56:	2103      	movs	r1, #3
 8000d58:	2001      	movs	r0, #1
 8000d5a:	f01d fa71 	bl	801e240 <shellLogPrint>
            return HAL_ERROR;
 8000d5e:	2301      	movs	r3, #1
 8000d60:	e0f0      	b.n	8000f44 <SwitchSystemClock+0x528>
 8000d62:	bf00      	nop
 8000d64:	0801fc00 	.word	0x0801fc00
 8000d68:	0801fc30 	.word	0x0801fc30
 8000d6c:	0801fc60 	.word	0x0801fc60
 8000d70:	0801fc84 	.word	0x0801fc84
 8000d74:	0801fcac 	.word	0x0801fcac
 8000d78:	58024800 	.word	0x58024800
 8000d7c:	000f4240 	.word	0x000f4240
 8000d80:	52002000 	.word	0x52002000
 8000d84:	0007a120 	.word	0x0007a120
 8000d88:	0801fcd0 	.word	0x0801fcd0
 8000d8c:	0801fcec 	.word	0x0801fcec
 8000d90:	0801fd04 	.word	0x0801fd04
        }

        // 配置HSE和PLL
        RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d94:	2301      	movs	r3, #1
 8000d96:	61bb      	str	r3, [r7, #24]
        RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d98:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000d9c:	61fb      	str	r3, [r7, #28]
        RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d9e:	2302      	movs	r3, #2
 8000da0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000da2:	2302      	movs	r3, #2
 8000da4:	643b      	str	r3, [r7, #64]	@ 0x40
        RCC_OscInitStruct.PLL.PLLM = pll_m;
 8000da6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8000daa:	647b      	str	r3, [r7, #68]	@ 0x44
        RCC_OscInitStruct.PLL.PLLN = pll_n;
 8000dac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000db0:	64bb      	str	r3, [r7, #72]	@ 0x48
        RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000db2:	2300      	movs	r3, #0
 8000db4:	663b      	str	r3, [r7, #96]	@ 0x60
        RCC_OscInitStruct.PLL.PLLP = pll_p;
 8000db6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000dba:	64fb      	str	r3, [r7, #76]	@ 0x4c
        RCC_OscInitStruct.PLL.PLLR = 2;
 8000dbc:	2302      	movs	r3, #2
 8000dbe:	657b      	str	r3, [r7, #84]	@ 0x54
        RCC_OscInitStruct.PLL.PLLQ = 4;
 8000dc0:	2304      	movs	r3, #4
 8000dc2:	653b      	str	r3, [r7, #80]	@ 0x50
        RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	65fb      	str	r3, [r7, #92]	@ 0x5c
        RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000dc8:	2308      	movs	r3, #8
 8000dca:	65bb      	str	r3, [r7, #88]	@ 0x58

        if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dcc:	f107 0318 	add.w	r3, r7, #24
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f008 f843 	bl	8008e5c <HAL_RCC_OscConfig>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d008      	beq.n	8000dee <SwitchSystemClock+0x3d2>
  __ASM volatile ("cpsie i" : : : "memory");
 8000ddc:	b662      	cpsie	i
}
 8000dde:	bf00      	nop
        {
            __enable_irq();
            SHELL_LOG_CLK_ERROR("PLL configuration failed");
 8000de0:	4a5a      	ldr	r2, [pc, #360]	@ (8000f4c <SwitchSystemClock+0x530>)
 8000de2:	2103      	movs	r1, #3
 8000de4:	2001      	movs	r0, #1
 8000de6:	f01d fa2b 	bl	801e240 <shellLogPrint>
            return HAL_ERROR;
 8000dea:	2301      	movs	r3, #1
 8000dec:	e0aa      	b.n	8000f44 <SwitchSystemClock+0x528>
        }
        
        // 等待PLL锁定
        uint32_t timeout = 100000;
 8000dee:	4b58      	ldr	r3, [pc, #352]	@ (8000f50 <SwitchSystemClock+0x534>)
 8000df0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
        while(!__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) && timeout > 0)
 8000df4:	e004      	b.n	8000e00 <SwitchSystemClock+0x3e4>
        {
            timeout--;
 8000df6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000dfa:	3b01      	subs	r3, #1
 8000dfc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
        while(!__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) && timeout > 0)
 8000e00:	4b54      	ldr	r3, [pc, #336]	@ (8000f54 <SwitchSystemClock+0x538>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d103      	bne.n	8000e14 <SwitchSystemClock+0x3f8>
 8000e0c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d1f0      	bne.n	8000df6 <SwitchSystemClock+0x3da>
        }
        if (timeout == 0)
 8000e14:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d108      	bne.n	8000e2e <SwitchSystemClock+0x412>
  __ASM volatile ("cpsie i" : : : "memory");
 8000e1c:	b662      	cpsie	i
}
 8000e1e:	bf00      	nop
        {
            __enable_irq();
            SHELL_LOG_CLK_ERROR("PLL lock timeout");
 8000e20:	4a4d      	ldr	r2, [pc, #308]	@ (8000f58 <SwitchSystemClock+0x53c>)
 8000e22:	2103      	movs	r1, #3
 8000e24:	2001      	movs	r0, #1
 8000e26:	f01d fa0b 	bl	801e240 <shellLogPrint>
            return HAL_ERROR;
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	e08a      	b.n	8000f44 <SwitchSystemClock+0x528>
        }
        
        DelayNoCycles(500000); // PLL锁定后延时
 8000e2e:	484b      	ldr	r0, [pc, #300]	@ (8000f5c <SwitchSystemClock+0x540>)
 8000e30:	f7ff fc8c 	bl	800074c <DelayNoCycles>

        // 切换到PLL时钟源并配置总线时钟分频器
        RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 | \
 8000e34:	233f      	movs	r3, #63	@ 0x3f
 8000e36:	667b      	str	r3, [r7, #100]	@ 0x64
                                       RCC_CLOCKTYPE_PCLK2  | RCC_CLOCKTYPE_D3PCLK1);
        RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e38:	2303      	movs	r3, #3
 8000e3a:	66bb      	str	r3, [r7, #104]	@ 0x68
        RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	66fb      	str	r3, [r7, #108]	@ 0x6c
        RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000e40:	2308      	movs	r3, #8
 8000e42:	673b      	str	r3, [r7, #112]	@ 0x70
        RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000e44:	2340      	movs	r3, #64	@ 0x40
 8000e46:	677b      	str	r3, [r7, #116]	@ 0x74
        RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000e48:	2340      	movs	r3, #64	@ 0x40
 8000e4a:	67bb      	str	r3, [r7, #120]	@ 0x78
        RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000e4c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e50:	67fb      	str	r3, [r7, #124]	@ 0x7c
        RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000e52:	2340      	movs	r3, #64	@ 0x40
 8000e54:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

        if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, flash_latency) != HAL_OK)
 8000e58:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000e5c:	f8d7 10b4 	ldr.w	r1, [r7, #180]	@ 0xb4
 8000e60:	4618      	mov	r0, r3
 8000e62:	f008 fd2b 	bl	80098bc <HAL_RCC_ClockConfig>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d008      	beq.n	8000e7e <SwitchSystemClock+0x462>
  __ASM volatile ("cpsie i" : : : "memory");
 8000e6c:	b662      	cpsie	i
}
 8000e6e:	bf00      	nop
        {
            __enable_irq();
            SHELL_LOG_CLK_ERROR("PLL clock switch failed");
 8000e70:	4a3b      	ldr	r2, [pc, #236]	@ (8000f60 <SwitchSystemClock+0x544>)
 8000e72:	2103      	movs	r1, #3
 8000e74:	2001      	movs	r0, #1
 8000e76:	f01d f9e3 	bl	801e240 <shellLogPrint>
            return HAL_ERROR;
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	e062      	b.n	8000f44 <SwitchSystemClock+0x528>
        }
    }

    // --- Step 3: 降频时配置电压调节器 ---
    if (profile < CLOCK_PROFILE_200M)
 8000e7e:	79fb      	ldrb	r3, [r7, #7]
 8000e80:	2b04      	cmp	r3, #4
 8000e82:	d81b      	bhi.n	8000ebc <SwitchSystemClock+0x4a0>
    {
        __HAL_PWR_VOLTAGESCALING_CONFIG(pwr_vos_level);
 8000e84:	2300      	movs	r3, #0
 8000e86:	60fb      	str	r3, [r7, #12]
 8000e88:	4b36      	ldr	r3, [pc, #216]	@ (8000f64 <SwitchSystemClock+0x548>)
 8000e8a:	699b      	ldr	r3, [r3, #24]
 8000e8c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8000e90:	4934      	ldr	r1, [pc, #208]	@ (8000f64 <SwitchSystemClock+0x548>)
 8000e92:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8000e96:	4313      	orrs	r3, r2
 8000e98:	618b      	str	r3, [r1, #24]
 8000e9a:	4b32      	ldr	r3, [pc, #200]	@ (8000f64 <SwitchSystemClock+0x548>)
 8000e9c:	699b      	ldr	r3, [r3, #24]
 8000e9e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000ea2:	60fb      	str	r3, [r7, #12]
 8000ea4:	68fb      	ldr	r3, [r7, #12]
        while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000ea6:	bf00      	nop
 8000ea8:	4b2e      	ldr	r3, [pc, #184]	@ (8000f64 <SwitchSystemClock+0x548>)
 8000eaa:	699b      	ldr	r3, [r3, #24]
 8000eac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000eb0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000eb4:	d1f8      	bne.n	8000ea8 <SwitchSystemClock+0x48c>
        DelayNoCycles(500000);
 8000eb6:	4829      	ldr	r0, [pc, #164]	@ (8000f5c <SwitchSystemClock+0x540>)
 8000eb8:	f7ff fc48 	bl	800074c <DelayNoCycles>
  __ASM volatile ("cpsie i" : : : "memory");
 8000ebc:	b662      	cpsie	i
}
 8000ebe:	bf00      	nop

    /* Re-enable interrupts */
    __enable_irq();

    // --- Step 4: 更新系统时钟变量和重新初始化关键外设 ---
    SystemCoreClockUpdate();
 8000ec0:	f002 f8c8 	bl	8003054 <SystemCoreClockUpdate>
    
    // 重新配置SysTick，确保始终保持1ms时基
    // 无论系统时钟如何变化，都要保证SysTick产生准确的1ms中断
    uint32_t new_sysclk = HAL_RCC_GetSysClockFreq();
 8000ec4:	f009 f86a 	bl	8009f9c <HAL_RCC_GetSysClockFreq>
 8000ec8:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
    
    // 停止当前SysTick
    SysTick->CTRL = 0;
 8000ecc:	4b26      	ldr	r3, [pc, #152]	@ (8000f68 <SwitchSystemClock+0x54c>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	601a      	str	r2, [r3, #0]
    
    // 重新计算SysTick重载值，确保1ms时基
    // SysTick使用系统时钟作为时钟源
    uint32_t reload_value = (new_sysclk / 1000) - 1; // 1ms = sysclk/1000
 8000ed2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000ed6:	4a25      	ldr	r2, [pc, #148]	@ (8000f6c <SwitchSystemClock+0x550>)
 8000ed8:	fba2 2303 	umull	r2, r3, r2, r3
 8000edc:	099b      	lsrs	r3, r3, #6
 8000ede:	3b01      	subs	r3, #1
 8000ee0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    
    // 配置SysTick
    SysTick->LOAD = reload_value;
 8000ee4:	4a20      	ldr	r2, [pc, #128]	@ (8000f68 <SwitchSystemClock+0x54c>)
 8000ee6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000eea:	6053      	str	r3, [r2, #4]
    SysTick->VAL = 0; // 清除当前值
 8000eec:	4b1e      	ldr	r3, [pc, #120]	@ (8000f68 <SwitchSystemClock+0x54c>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	609a      	str	r2, [r3, #8]
    SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |  // 使用处理器时钟
 8000ef2:	4b1d      	ldr	r3, [pc, #116]	@ (8000f68 <SwitchSystemClock+0x54c>)
 8000ef4:	2207      	movs	r2, #7
 8000ef6:	601a      	str	r2, [r3, #0]
                    SysTick_CTRL_TICKINT_Msk |    // 使能中断
                    SysTick_CTRL_ENABLE_Msk;      // 使能SysTick
    
    // 确保HAL时基也正确更新
    HAL_InitTick(TICK_INT_PRIORITY);
 8000ef8:	200f      	movs	r0, #15
 8000efa:	f001 fee5 	bl	8002cc8 <HAL_InitTick>
    
    SHELL_LOG_CLK_INFO("SysTick reconfigured for %lu Hz system clock (1ms tick)", new_sysclk);
 8000efe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000f02:	4a1b      	ldr	r2, [pc, #108]	@ (8000f70 <SwitchSystemClock+0x554>)
 8000f04:	2101      	movs	r1, #1
 8000f06:	2001      	movs	r0, #1
 8000f08:	f01d f99a 	bl	801e240 <shellLogPrint>
    
    // 添加延时确保SysTick稳定后再重新初始化UART
    DelayNoCycles(100000); // 约1ms延时
 8000f0c:	4810      	ldr	r0, [pc, #64]	@ (8000f50 <SwitchSystemClock+0x534>)
 8000f0e:	f7ff fc1d 	bl	800074c <DelayNoCycles>
    
    // 重新初始化UART（因为时钟变化会影响波特率）
    if (HAL_UART_Init(&huart3) != HAL_OK) 
 8000f12:	4818      	ldr	r0, [pc, #96]	@ (8000f74 <SwitchSystemClock+0x558>)
 8000f14:	f00f f87c 	bl	8010010 <HAL_UART_Init>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d006      	beq.n	8000f2c <SwitchSystemClock+0x510>
    { 
        SHELL_LOG_CLK_ERROR("UART reinit failed");
 8000f1e:	4a16      	ldr	r2, [pc, #88]	@ (8000f78 <SwitchSystemClock+0x55c>)
 8000f20:	2103      	movs	r1, #3
 8000f22:	2001      	movs	r0, #1
 8000f24:	f01d f98c 	bl	801e240 <shellLogPrint>
        return HAL_ERROR;
 8000f28:	2301      	movs	r3, #1
 8000f2a:	e00b      	b.n	8000f44 <SwitchSystemClock+0x528>
    }

    uint32_t actual_freq = HAL_RCC_GetSysClockFreq();
 8000f2c:	f009 f836 	bl	8009f9c <HAL_RCC_GetSysClockFreq>
 8000f30:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
    SHELL_LOG_CLK_INFO("Clock switched successfully to %lu Hz", actual_freq);
 8000f34:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000f38:	4a10      	ldr	r2, [pc, #64]	@ (8000f7c <SwitchSystemClock+0x560>)
 8000f3a:	2101      	movs	r1, #1
 8000f3c:	2001      	movs	r0, #1
 8000f3e:	f01d f97f 	bl	801e240 <shellLogPrint>
    
    return HAL_OK;
 8000f42:	2300      	movs	r3, #0
}
 8000f44:	4618      	mov	r0, r3
 8000f46:	37b8      	adds	r7, #184	@ 0xb8
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	0801fd20 	.word	0x0801fd20
 8000f50:	000186a0 	.word	0x000186a0
 8000f54:	58024400 	.word	0x58024400
 8000f58:	0801fd3c 	.word	0x0801fd3c
 8000f5c:	0007a120 	.word	0x0007a120
 8000f60:	0801fd50 	.word	0x0801fd50
 8000f64:	58024800 	.word	0x58024800
 8000f68:	e000e010 	.word	0xe000e010
 8000f6c:	10624dd3 	.word	0x10624dd3
 8000f70:	0801fd68 	.word	0x0801fd68
 8000f74:	24000410 	.word	0x24000410
 8000f78:	0801fda0 	.word	0x0801fda0
 8000f7c:	0801fdb4 	.word	0x0801fdb4

08000f80 <FindCompatibleProfile>:
  * @brief  Find a compatible clock profile when the requested one is not compatible
  * @param  requested_profile The originally requested profile
  * @retval Compatible profile (may be the same if already compatible)
  */
static ClockProfile_t FindCompatibleProfile(ClockProfile_t requested_profile)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b086      	sub	sp, #24
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	4603      	mov	r3, r0
 8000f88:	71fb      	strb	r3, [r7, #7]
    // Try profiles from highest to lowest frequency
    ClockProfile_t profiles[] = {
 8000f8a:	4a15      	ldr	r2, [pc, #84]	@ (8000fe0 <FindCompatibleProfile+0x60>)
 8000f8c:	f107 0308 	add.w	r3, r7, #8
 8000f90:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f94:	e883 0003 	stmia.w	r3, {r0, r1}
        CLOCK_PROFILE_550M, CLOCK_PROFILE_400M, CLOCK_PROFILE_300M,
        CLOCK_PROFILE_200M, CLOCK_PROFILE_128M, CLOCK_PROFILE_96M,
        CLOCK_PROFILE_48M, CLOCK_PROFILE_24M
    };
    
    for (int i = 0; i < 8; i++)
 8000f98:	2300      	movs	r3, #0
 8000f9a:	617b      	str	r3, [r7, #20]
 8000f9c:	e017      	b.n	8000fce <FindCompatibleProfile+0x4e>
    {
        uint32_t test_freq = GetProfileFrequency(profiles[i]);
 8000f9e:	f107 0208 	add.w	r2, r7, #8
 8000fa2:	697b      	ldr	r3, [r7, #20]
 8000fa4:	4413      	add	r3, r2
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f7ff fcef 	bl	800098c <GetProfileFrequency>
 8000fae:	6138      	str	r0, [r7, #16]
        if (CheckPeripheralCompatibility(test_freq) == 0)
 8000fb0:	6938      	ldr	r0, [r7, #16]
 8000fb2:	f7ff fbe1 	bl	8000778 <CheckPeripheralCompatibility>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d105      	bne.n	8000fc8 <FindCompatibleProfile+0x48>
        {
            return profiles[i];
 8000fbc:	f107 0208 	add.w	r2, r7, #8
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	4413      	add	r3, r2
 8000fc4:	781b      	ldrb	r3, [r3, #0]
 8000fc6:	e006      	b.n	8000fd6 <FindCompatibleProfile+0x56>
    for (int i = 0; i < 8; i++)
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	3301      	adds	r3, #1
 8000fcc:	617b      	str	r3, [r7, #20]
 8000fce:	697b      	ldr	r3, [r7, #20]
 8000fd0:	2b07      	cmp	r3, #7
 8000fd2:	dde4      	ble.n	8000f9e <FindCompatibleProfile+0x1e>
        }
    }
    
    // If no compatible profile found, return the requested one
    return requested_profile;
 8000fd4:	79fb      	ldrb	r3, [r7, #7]
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	3718      	adds	r7, #24
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	0801fddc 	.word	0x0801fddc

08000fe4 <print_fault_type>:
#define UFSR_NOCP        (1 << 19)   // 无协处理器
#define UFSR_UNALIGNED   (1 << 24)   // 未对齐访问
#define UFSR_DIVBYZERO   (1 << 25)   // 除零错误

static void print_fault_type(unsigned int cfsr)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
    SHELL_LOG_SYS_ERROR("故障类型分析:");
 8000fec:	4a71      	ldr	r2, [pc, #452]	@ (80011b4 <print_fault_type+0x1d0>)
 8000fee:	2103      	movs	r1, #3
 8000ff0:	2000      	movs	r0, #0
 8000ff2:	f01d f925 	bl	801e240 <shellLogPrint>
    
    // Memory Management Fault 分析
    if (cfsr & CFSR_MMFSR_MASK) {
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	b2db      	uxtb	r3, r3
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d040      	beq.n	8001080 <print_fault_type+0x9c>
        SHELL_LOG_SYS_ERROR("Memory Management Fault detected:");
 8000ffe:	4a6e      	ldr	r2, [pc, #440]	@ (80011b8 <print_fault_type+0x1d4>)
 8001000:	2103      	movs	r1, #3
 8001002:	2000      	movs	r0, #0
 8001004:	f01d f91c 	bl	801e240 <shellLogPrint>
        if (cfsr & MMFSR_IACCVIOL) SHELL_LOG_SYS_ERROR("  - 指令访问违规");
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	f003 0301 	and.w	r3, r3, #1
 800100e:	2b00      	cmp	r3, #0
 8001010:	d004      	beq.n	800101c <print_fault_type+0x38>
 8001012:	4a6a      	ldr	r2, [pc, #424]	@ (80011bc <print_fault_type+0x1d8>)
 8001014:	2103      	movs	r1, #3
 8001016:	2000      	movs	r0, #0
 8001018:	f01d f912 	bl	801e240 <shellLogPrint>
        if (cfsr & MMFSR_DACCVIOL) SHELL_LOG_SYS_ERROR("  - 数据访问违规");
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	f003 0302 	and.w	r3, r3, #2
 8001022:	2b00      	cmp	r3, #0
 8001024:	d004      	beq.n	8001030 <print_fault_type+0x4c>
 8001026:	4a66      	ldr	r2, [pc, #408]	@ (80011c0 <print_fault_type+0x1dc>)
 8001028:	2103      	movs	r1, #3
 800102a:	2000      	movs	r0, #0
 800102c:	f01d f908 	bl	801e240 <shellLogPrint>
        if (cfsr & MMFSR_MUNSTKERR) SHELL_LOG_SYS_ERROR("  - 异常返回时栈操作错误");
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	f003 0308 	and.w	r3, r3, #8
 8001036:	2b00      	cmp	r3, #0
 8001038:	d004      	beq.n	8001044 <print_fault_type+0x60>
 800103a:	4a62      	ldr	r2, [pc, #392]	@ (80011c4 <print_fault_type+0x1e0>)
 800103c:	2103      	movs	r1, #3
 800103e:	2000      	movs	r0, #0
 8001040:	f01d f8fe 	bl	801e240 <shellLogPrint>
        if (cfsr & MMFSR_MSTKERR) SHELL_LOG_SYS_ERROR("  - 异常入口时栈操作错误");
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	f003 0310 	and.w	r3, r3, #16
 800104a:	2b00      	cmp	r3, #0
 800104c:	d004      	beq.n	8001058 <print_fault_type+0x74>
 800104e:	4a5e      	ldr	r2, [pc, #376]	@ (80011c8 <print_fault_type+0x1e4>)
 8001050:	2103      	movs	r1, #3
 8001052:	2000      	movs	r0, #0
 8001054:	f01d f8f4 	bl	801e240 <shellLogPrint>
        if (cfsr & MMFSR_MLSPERR) SHELL_LOG_SYS_ERROR("  - 浮点单元延迟状态保存错误");
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	f003 0320 	and.w	r3, r3, #32
 800105e:	2b00      	cmp	r3, #0
 8001060:	d004      	beq.n	800106c <print_fault_type+0x88>
 8001062:	4a5a      	ldr	r2, [pc, #360]	@ (80011cc <print_fault_type+0x1e8>)
 8001064:	2103      	movs	r1, #3
 8001066:	2000      	movs	r0, #0
 8001068:	f01d f8ea 	bl	801e240 <shellLogPrint>
        if (cfsr & MMFSR_MMARVALID) SHELL_LOG_SYS_ERROR("  - MMAR 寄存器包含有效的故障地址");
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001072:	2b00      	cmp	r3, #0
 8001074:	d004      	beq.n	8001080 <print_fault_type+0x9c>
 8001076:	4a56      	ldr	r2, [pc, #344]	@ (80011d0 <print_fault_type+0x1ec>)
 8001078:	2103      	movs	r1, #3
 800107a:	2000      	movs	r0, #0
 800107c:	f01d f8e0 	bl	801e240 <shellLogPrint>
    }
    
    // Bus Fault 分析
    if (cfsr & CFSR_BFSR_MASK) {
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8001086:	2b00      	cmp	r3, #0
 8001088:	d04a      	beq.n	8001120 <print_fault_type+0x13c>
        SHELL_LOG_SYS_ERROR("Bus Fault detected:");
 800108a:	4a52      	ldr	r2, [pc, #328]	@ (80011d4 <print_fault_type+0x1f0>)
 800108c:	2103      	movs	r1, #3
 800108e:	2000      	movs	r0, #0
 8001090:	f01d f8d6 	bl	801e240 <shellLogPrint>
        if (cfsr & BFSR_IBUSERR) SHELL_LOG_SYS_ERROR("  - 指令总线错误");
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800109a:	2b00      	cmp	r3, #0
 800109c:	d004      	beq.n	80010a8 <print_fault_type+0xc4>
 800109e:	4a4e      	ldr	r2, [pc, #312]	@ (80011d8 <print_fault_type+0x1f4>)
 80010a0:	2103      	movs	r1, #3
 80010a2:	2000      	movs	r0, #0
 80010a4:	f01d f8cc 	bl	801e240 <shellLogPrint>
        if (cfsr & BFSR_PRECISERR) SHELL_LOG_SYS_ERROR("  - 精确数据总线错误");
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d004      	beq.n	80010bc <print_fault_type+0xd8>
 80010b2:	4a4a      	ldr	r2, [pc, #296]	@ (80011dc <print_fault_type+0x1f8>)
 80010b4:	2103      	movs	r1, #3
 80010b6:	2000      	movs	r0, #0
 80010b8:	f01d f8c2 	bl	801e240 <shellLogPrint>
        if (cfsr & BFSR_IMPRECISERR) SHELL_LOG_SYS_ERROR("  - 非精确数据总线错误");
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d004      	beq.n	80010d0 <print_fault_type+0xec>
 80010c6:	4a46      	ldr	r2, [pc, #280]	@ (80011e0 <print_fault_type+0x1fc>)
 80010c8:	2103      	movs	r1, #3
 80010ca:	2000      	movs	r0, #0
 80010cc:	f01d f8b8 	bl	801e240 <shellLogPrint>
        if (cfsr & BFSR_UNSTKERR) SHELL_LOG_SYS_ERROR("  - 异常返回时栈操作错误");
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d004      	beq.n	80010e4 <print_fault_type+0x100>
 80010da:	4a3a      	ldr	r2, [pc, #232]	@ (80011c4 <print_fault_type+0x1e0>)
 80010dc:	2103      	movs	r1, #3
 80010de:	2000      	movs	r0, #0
 80010e0:	f01d f8ae 	bl	801e240 <shellLogPrint>
        if (cfsr & BFSR_STKERR) SHELL_LOG_SYS_ERROR("  - 异常入口时栈操作错误");
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d004      	beq.n	80010f8 <print_fault_type+0x114>
 80010ee:	4a36      	ldr	r2, [pc, #216]	@ (80011c8 <print_fault_type+0x1e4>)
 80010f0:	2103      	movs	r1, #3
 80010f2:	2000      	movs	r0, #0
 80010f4:	f01d f8a4 	bl	801e240 <shellLogPrint>
        if (cfsr & BFSR_LSPERR) SHELL_LOG_SYS_ERROR("  - 浮点单元延迟状态保存错误");
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d004      	beq.n	800110c <print_fault_type+0x128>
 8001102:	4a32      	ldr	r2, [pc, #200]	@ (80011cc <print_fault_type+0x1e8>)
 8001104:	2103      	movs	r1, #3
 8001106:	2000      	movs	r0, #0
 8001108:	f01d f89a 	bl	801e240 <shellLogPrint>
        if (cfsr & BFSR_BFARVALID) SHELL_LOG_SYS_ERROR("  - BFAR 寄存器包含有效的故障地址");
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001112:	2b00      	cmp	r3, #0
 8001114:	d004      	beq.n	8001120 <print_fault_type+0x13c>
 8001116:	4a33      	ldr	r2, [pc, #204]	@ (80011e4 <print_fault_type+0x200>)
 8001118:	2103      	movs	r1, #3
 800111a:	2000      	movs	r0, #0
 800111c:	f01d f890 	bl	801e240 <shellLogPrint>
    }
    
    // Usage Fault 分析
    if (cfsr & CFSR_UFSR_MASK) {
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001126:	d340      	bcc.n	80011aa <print_fault_type+0x1c6>
        SHELL_LOG_SYS_ERROR("Usage Fault detected:");
 8001128:	4a2f      	ldr	r2, [pc, #188]	@ (80011e8 <print_fault_type+0x204>)
 800112a:	2103      	movs	r1, #3
 800112c:	2000      	movs	r0, #0
 800112e:	f01d f887 	bl	801e240 <shellLogPrint>
        if (cfsr & UFSR_UNDEFINSTR) SHELL_LOG_SYS_ERROR("  - 未定义指令");
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001138:	2b00      	cmp	r3, #0
 800113a:	d004      	beq.n	8001146 <print_fault_type+0x162>
 800113c:	4a2b      	ldr	r2, [pc, #172]	@ (80011ec <print_fault_type+0x208>)
 800113e:	2103      	movs	r1, #3
 8001140:	2000      	movs	r0, #0
 8001142:	f01d f87d 	bl	801e240 <shellLogPrint>
        if (cfsr & UFSR_INVSTATE) SHELL_LOG_SYS_ERROR("  - 非法状态 (ARM/Thumb混合)");
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800114c:	2b00      	cmp	r3, #0
 800114e:	d004      	beq.n	800115a <print_fault_type+0x176>
 8001150:	4a27      	ldr	r2, [pc, #156]	@ (80011f0 <print_fault_type+0x20c>)
 8001152:	2103      	movs	r1, #3
 8001154:	2000      	movs	r0, #0
 8001156:	f01d f873 	bl	801e240 <shellLogPrint>
        if (cfsr & UFSR_INVPC) SHELL_LOG_SYS_ERROR("  - 非法PC值");
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001160:	2b00      	cmp	r3, #0
 8001162:	d004      	beq.n	800116e <print_fault_type+0x18a>
 8001164:	4a23      	ldr	r2, [pc, #140]	@ (80011f4 <print_fault_type+0x210>)
 8001166:	2103      	movs	r1, #3
 8001168:	2000      	movs	r0, #0
 800116a:	f01d f869 	bl	801e240 <shellLogPrint>
        if (cfsr & UFSR_NOCP) SHELL_LOG_SYS_ERROR("  - 无协处理器");
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001174:	2b00      	cmp	r3, #0
 8001176:	d004      	beq.n	8001182 <print_fault_type+0x19e>
 8001178:	4a1f      	ldr	r2, [pc, #124]	@ (80011f8 <print_fault_type+0x214>)
 800117a:	2103      	movs	r1, #3
 800117c:	2000      	movs	r0, #0
 800117e:	f01d f85f 	bl	801e240 <shellLogPrint>
        if (cfsr & UFSR_UNALIGNED) SHELL_LOG_SYS_ERROR("  - 未对齐访问");
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001188:	2b00      	cmp	r3, #0
 800118a:	d004      	beq.n	8001196 <print_fault_type+0x1b2>
 800118c:	4a1b      	ldr	r2, [pc, #108]	@ (80011fc <print_fault_type+0x218>)
 800118e:	2103      	movs	r1, #3
 8001190:	2000      	movs	r0, #0
 8001192:	f01d f855 	bl	801e240 <shellLogPrint>
        if (cfsr & UFSR_DIVBYZERO) SHELL_LOG_SYS_ERROR("  - 除零错误");
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800119c:	2b00      	cmp	r3, #0
 800119e:	d004      	beq.n	80011aa <print_fault_type+0x1c6>
 80011a0:	4a17      	ldr	r2, [pc, #92]	@ (8001200 <print_fault_type+0x21c>)
 80011a2:	2103      	movs	r1, #3
 80011a4:	2000      	movs	r0, #0
 80011a6:	f01d f84b 	bl	801e240 <shellLogPrint>
    }
}
 80011aa:	bf00      	nop
 80011ac:	3708      	adds	r7, #8
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	0801fde4 	.word	0x0801fde4
 80011b8:	0801fdf8 	.word	0x0801fdf8
 80011bc:	0801fe1c 	.word	0x0801fe1c
 80011c0:	0801fe34 	.word	0x0801fe34
 80011c4:	0801fe4c 	.word	0x0801fe4c
 80011c8:	0801fe70 	.word	0x0801fe70
 80011cc:	0801fe94 	.word	0x0801fe94
 80011d0:	0801fec0 	.word	0x0801fec0
 80011d4:	0801fef0 	.word	0x0801fef0
 80011d8:	0801ff04 	.word	0x0801ff04
 80011dc:	0801ff1c 	.word	0x0801ff1c
 80011e0:	0801ff3c 	.word	0x0801ff3c
 80011e4:	0801ff5c 	.word	0x0801ff5c
 80011e8:	0801ff8c 	.word	0x0801ff8c
 80011ec:	0801ffa4 	.word	0x0801ffa4
 80011f0:	0801ffb8 	.word	0x0801ffb8
 80011f4:	0801ffdc 	.word	0x0801ffdc
 80011f8:	0801ffec 	.word	0x0801ffec
 80011fc:	08020000 	.word	0x08020000
 8001200:	08020014 	.word	0x08020014

08001204 <fault_handler_c>:

void fault_handler_c(unsigned int *hardfault_args)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b092      	sub	sp, #72	@ 0x48
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
    unsigned int stacked_r0 = ((unsigned long)hardfault_args[0]);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	647b      	str	r3, [r7, #68]	@ 0x44
    unsigned int stacked_r1 = ((unsigned long)hardfault_args[1]);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	643b      	str	r3, [r7, #64]	@ 0x40
    unsigned int stacked_r2 = ((unsigned long)hardfault_args[2]);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	689b      	ldr	r3, [r3, #8]
 800121c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    unsigned int stacked_r3 = ((unsigned long)hardfault_args[3]);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	68db      	ldr	r3, [r3, #12]
 8001222:	63bb      	str	r3, [r7, #56]	@ 0x38
    unsigned int stacked_r12 = ((unsigned long)hardfault_args[4]);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	691b      	ldr	r3, [r3, #16]
 8001228:	637b      	str	r3, [r7, #52]	@ 0x34
    unsigned int stacked_lr = ((unsigned long)hardfault_args[5]);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	695b      	ldr	r3, [r3, #20]
 800122e:	633b      	str	r3, [r7, #48]	@ 0x30
    unsigned int stacked_pc = ((unsigned long)hardfault_args[6]);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	699b      	ldr	r3, [r3, #24]
 8001234:	62fb      	str	r3, [r7, #44]	@ 0x2c
    unsigned int stacked_psr = ((unsigned long)hardfault_args[7]);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	69db      	ldr	r3, [r3, #28]
 800123a:	62bb      	str	r3, [r7, #40]	@ 0x28

    unsigned int cfsr = CFSR;
 800123c:	4b69      	ldr	r3, [pc, #420]	@ (80013e4 <fault_handler_c+0x1e0>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	627b      	str	r3, [r7, #36]	@ 0x24
    unsigned int hfsr = HFSR;
 8001242:	4b69      	ldr	r3, [pc, #420]	@ (80013e8 <fault_handler_c+0x1e4>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	623b      	str	r3, [r7, #32]
    unsigned int dfsr = DFSR;
 8001248:	4b68      	ldr	r3, [pc, #416]	@ (80013ec <fault_handler_c+0x1e8>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	61fb      	str	r3, [r7, #28]
    unsigned int afsr = AFSR;
 800124e:	4b68      	ldr	r3, [pc, #416]	@ (80013f0 <fault_handler_c+0x1ec>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	61bb      	str	r3, [r7, #24]
    unsigned int mmar = MMAR;
 8001254:	4b67      	ldr	r3, [pc, #412]	@ (80013f4 <fault_handler_c+0x1f0>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	617b      	str	r3, [r7, #20]
    unsigned int bfar = BFAR;
 800125a:	4b67      	ldr	r3, [pc, #412]	@ (80013f8 <fault_handler_c+0x1f4>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	613b      	str	r3, [r7, #16]

    shell_printf("\r\n");
 8001260:	4866      	ldr	r0, [pc, #408]	@ (80013fc <fault_handler_c+0x1f8>)
 8001262:	f01d facf 	bl	801e804 <shell_printf>
    shell_printf("========================================\r\n");
 8001266:	4866      	ldr	r0, [pc, #408]	@ (8001400 <fault_handler_c+0x1fc>)
 8001268:	f01d facc 	bl	801e804 <shell_printf>
    shell_printf("        MCU 异常故障信息转储           \r\n");
 800126c:	4865      	ldr	r0, [pc, #404]	@ (8001404 <fault_handler_c+0x200>)
 800126e:	f01d fac9 	bl	801e804 <shell_printf>
    shell_printf("========================================\r\n");
 8001272:	4863      	ldr	r0, [pc, #396]	@ (8001400 <fault_handler_c+0x1fc>)
 8001274:	f01d fac6 	bl	801e804 <shell_printf>
    
    // 打印 CPU 寄存器
    SHELL_LOG_SYS_ERROR("CPU 寄存器状态:");
 8001278:	4a63      	ldr	r2, [pc, #396]	@ (8001408 <fault_handler_c+0x204>)
 800127a:	2103      	movs	r1, #3
 800127c:	2000      	movs	r0, #0
 800127e:	f01c ffdf 	bl	801e240 <shellLogPrint>
    SHELL_LOG_SYS_ERROR("R0  = 0x%08X", stacked_r0);
 8001282:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001284:	4a61      	ldr	r2, [pc, #388]	@ (800140c <fault_handler_c+0x208>)
 8001286:	2103      	movs	r1, #3
 8001288:	2000      	movs	r0, #0
 800128a:	f01c ffd9 	bl	801e240 <shellLogPrint>
    SHELL_LOG_SYS_ERROR("R1  = 0x%08X", stacked_r1);
 800128e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001290:	4a5f      	ldr	r2, [pc, #380]	@ (8001410 <fault_handler_c+0x20c>)
 8001292:	2103      	movs	r1, #3
 8001294:	2000      	movs	r0, #0
 8001296:	f01c ffd3 	bl	801e240 <shellLogPrint>
    SHELL_LOG_SYS_ERROR("R2  = 0x%08X", stacked_r2);
 800129a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800129c:	4a5d      	ldr	r2, [pc, #372]	@ (8001414 <fault_handler_c+0x210>)
 800129e:	2103      	movs	r1, #3
 80012a0:	2000      	movs	r0, #0
 80012a2:	f01c ffcd 	bl	801e240 <shellLogPrint>
    SHELL_LOG_SYS_ERROR("R3  = 0x%08X", stacked_r3);
 80012a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80012a8:	4a5b      	ldr	r2, [pc, #364]	@ (8001418 <fault_handler_c+0x214>)
 80012aa:	2103      	movs	r1, #3
 80012ac:	2000      	movs	r0, #0
 80012ae:	f01c ffc7 	bl	801e240 <shellLogPrint>
    SHELL_LOG_SYS_ERROR("R12 = 0x%08X", stacked_r12);
 80012b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80012b4:	4a59      	ldr	r2, [pc, #356]	@ (800141c <fault_handler_c+0x218>)
 80012b6:	2103      	movs	r1, #3
 80012b8:	2000      	movs	r0, #0
 80012ba:	f01c ffc1 	bl	801e240 <shellLogPrint>
    SHELL_LOG_SYS_ERROR("LR  = 0x%08X (异常前的链接寄存器)", stacked_lr);
 80012be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80012c0:	4a57      	ldr	r2, [pc, #348]	@ (8001420 <fault_handler_c+0x21c>)
 80012c2:	2103      	movs	r1, #3
 80012c4:	2000      	movs	r0, #0
 80012c6:	f01c ffbb 	bl	801e240 <shellLogPrint>
    SHELL_LOG_SYS_ERROR("PC  = 0x%08X (故障发生地址)", stacked_pc);
 80012ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80012cc:	4a55      	ldr	r2, [pc, #340]	@ (8001424 <fault_handler_c+0x220>)
 80012ce:	2103      	movs	r1, #3
 80012d0:	2000      	movs	r0, #0
 80012d2:	f01c ffb5 	bl	801e240 <shellLogPrint>
    SHELL_LOG_SYS_ERROR("PSR = 0x%08X (程序状态寄存器)", stacked_psr);
 80012d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012d8:	4a53      	ldr	r2, [pc, #332]	@ (8001428 <fault_handler_c+0x224>)
 80012da:	2103      	movs	r1, #3
 80012dc:	2000      	movs	r0, #0
 80012de:	f01c ffaf 	bl	801e240 <shellLogPrint>
    
    SHELL_LOG_SYS_ERROR("系统故障状态寄存器:");
 80012e2:	4a52      	ldr	r2, [pc, #328]	@ (800142c <fault_handler_c+0x228>)
 80012e4:	2103      	movs	r1, #3
 80012e6:	2000      	movs	r0, #0
 80012e8:	f01c ffaa 	bl	801e240 <shellLogPrint>
    SHELL_LOG_SYS_ERROR("CFSR = 0x%08X (可配置故障状态寄存器)", cfsr);
 80012ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012ee:	4a50      	ldr	r2, [pc, #320]	@ (8001430 <fault_handler_c+0x22c>)
 80012f0:	2103      	movs	r1, #3
 80012f2:	2000      	movs	r0, #0
 80012f4:	f01c ffa4 	bl	801e240 <shellLogPrint>
    SHELL_LOG_SYS_ERROR("HFSR = 0x%08X (硬故障状态寄存器)", hfsr);
 80012f8:	6a3b      	ldr	r3, [r7, #32]
 80012fa:	4a4e      	ldr	r2, [pc, #312]	@ (8001434 <fault_handler_c+0x230>)
 80012fc:	2103      	movs	r1, #3
 80012fe:	2000      	movs	r0, #0
 8001300:	f01c ff9e 	bl	801e240 <shellLogPrint>
    SHELL_LOG_SYS_ERROR("DFSR = 0x%08X (调试故障状态寄存器)", dfsr);
 8001304:	69fb      	ldr	r3, [r7, #28]
 8001306:	4a4c      	ldr	r2, [pc, #304]	@ (8001438 <fault_handler_c+0x234>)
 8001308:	2103      	movs	r1, #3
 800130a:	2000      	movs	r0, #0
 800130c:	f01c ff98 	bl	801e240 <shellLogPrint>
    SHELL_LOG_SYS_ERROR("AFSR = 0x%08X (辅助故障状态寄存器)", afsr);
 8001310:	69bb      	ldr	r3, [r7, #24]
 8001312:	4a4a      	ldr	r2, [pc, #296]	@ (800143c <fault_handler_c+0x238>)
 8001314:	2103      	movs	r1, #3
 8001316:	2000      	movs	r0, #0
 8001318:	f01c ff92 	bl	801e240 <shellLogPrint>
    
    if (cfsr & MMFSR_MMARVALID) {
 800131c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800131e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001322:	2b00      	cmp	r3, #0
 8001324:	d005      	beq.n	8001332 <fault_handler_c+0x12e>
        SHELL_LOG_SYS_ERROR("MMAR = 0x%08X (内存管理故障地址)", mmar);
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	4a45      	ldr	r2, [pc, #276]	@ (8001440 <fault_handler_c+0x23c>)
 800132a:	2103      	movs	r1, #3
 800132c:	2000      	movs	r0, #0
 800132e:	f01c ff87 	bl	801e240 <shellLogPrint>
    }
    if (cfsr & BFSR_BFARVALID) {
 8001332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001334:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001338:	2b00      	cmp	r3, #0
 800133a:	d005      	beq.n	8001348 <fault_handler_c+0x144>
        SHELL_LOG_SYS_ERROR("BFAR = 0x%08X (总线故障地址)", bfar);
 800133c:	693b      	ldr	r3, [r7, #16]
 800133e:	4a41      	ldr	r2, [pc, #260]	@ (8001444 <fault_handler_c+0x240>)
 8001340:	2103      	movs	r1, #3
 8001342:	2000      	movs	r0, #0
 8001344:	f01c ff7c 	bl	801e240 <shellLogPrint>
    }
    
    shell_printf("\r\n");
 8001348:	482c      	ldr	r0, [pc, #176]	@ (80013fc <fault_handler_c+0x1f8>)
 800134a:	f01d fa5b 	bl	801e804 <shell_printf>
    print_fault_type(cfsr);
 800134e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001350:	f7ff fe48 	bl	8000fe4 <print_fault_type>

    // 简化的任务信息 - 避免在异常上下文中分配内存
    SHELL_LOG_SYS_ERROR("FreeRTOS 系统状态:");
 8001354:	4a3c      	ldr	r2, [pc, #240]	@ (8001448 <fault_handler_c+0x244>)
 8001356:	2103      	movs	r1, #3
 8001358:	2000      	movs	r0, #0
 800135a:	f01c ff71 	bl	801e240 <shellLogPrint>
    SHELL_LOG_SYS_ERROR("========================================");
 800135e:	4a3b      	ldr	r2, [pc, #236]	@ (800144c <fault_handler_c+0x248>)
 8001360:	2103      	movs	r1, #3
 8001362:	2000      	movs	r0, #0
 8001364:	f01c ff6c 	bl	801e240 <shellLogPrint>
    
    TaskHandle_t current_task = xTaskGetCurrentTaskHandle();
 8001368:	f017 fb56 	bl	8018a18 <xTaskGetCurrentTaskHandle>
 800136c:	60f8      	str	r0, [r7, #12]
    if (current_task != NULL) {
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d008      	beq.n	8001386 <fault_handler_c+0x182>
        SHELL_LOG_SYS_ERROR("当前任务: %s", pcTaskGetName(current_task));
 8001374:	68f8      	ldr	r0, [r7, #12]
 8001376:	f016 fda3 	bl	8017ec0 <pcTaskGetName>
 800137a:	4603      	mov	r3, r0
 800137c:	4a34      	ldr	r2, [pc, #208]	@ (8001450 <fault_handler_c+0x24c>)
 800137e:	2103      	movs	r1, #3
 8001380:	2000      	movs	r0, #0
 8001382:	f01c ff5d 	bl	801e240 <shellLogPrint>
    }
    
    SHELL_LOG_SYS_ERROR("任务数量: %u", (unsigned int)uxTaskGetNumberOfTasks());
 8001386:	f016 fd8f 	bl	8017ea8 <uxTaskGetNumberOfTasks>
 800138a:	4603      	mov	r3, r0
 800138c:	4a31      	ldr	r2, [pc, #196]	@ (8001454 <fault_handler_c+0x250>)
 800138e:	2103      	movs	r1, #3
 8001390:	2000      	movs	r0, #0
 8001392:	f01c ff55 	bl	801e240 <shellLogPrint>
    SHELL_LOG_SYS_ERROR("剩余堆空间: %u bytes", (unsigned int)xPortGetFreeHeapSize());
 8001396:	f018 fdbd 	bl	8019f14 <xPortGetFreeHeapSize>
 800139a:	4603      	mov	r3, r0
 800139c:	4a2e      	ldr	r2, [pc, #184]	@ (8001458 <fault_handler_c+0x254>)
 800139e:	2103      	movs	r1, #3
 80013a0:	2000      	movs	r0, #0
 80013a2:	f01c ff4d 	bl	801e240 <shellLogPrint>
    
    SHELL_LOG_SYS_ERROR("========================================");
 80013a6:	4a29      	ldr	r2, [pc, #164]	@ (800144c <fault_handler_c+0x248>)
 80013a8:	2103      	movs	r1, #3
 80013aa:	2000      	movs	r0, #0
 80013ac:	f01c ff48 	bl	801e240 <shellLogPrint>
    SHELL_LOG_SYS_ERROR("系统已停止，请检查故障原因并重启");
 80013b0:	4a2a      	ldr	r2, [pc, #168]	@ (800145c <fault_handler_c+0x258>)
 80013b2:	2103      	movs	r1, #3
 80013b4:	2000      	movs	r0, #0
 80013b6:	f01c ff43 	bl	801e240 <shellLogPrint>
    SHELL_LOG_SYS_ERROR("========================================");
 80013ba:	4a24      	ldr	r2, [pc, #144]	@ (800144c <fault_handler_c+0x248>)
 80013bc:	2103      	movs	r1, #3
 80013be:	2000      	movs	r0, #0
 80013c0:	f01c ff3e 	bl	801e240 <shellLogPrint>
    
    // 确保所有输出都被发送
    for(volatile int i = 0; i < 1000000; i++);
 80013c4:	2300      	movs	r3, #0
 80013c6:	60bb      	str	r3, [r7, #8]
 80013c8:	e002      	b.n	80013d0 <fault_handler_c+0x1cc>
 80013ca:	68bb      	ldr	r3, [r7, #8]
 80013cc:	3301      	adds	r3, #1
 80013ce:	60bb      	str	r3, [r7, #8]
 80013d0:	68bb      	ldr	r3, [r7, #8]
 80013d2:	4a23      	ldr	r2, [pc, #140]	@ (8001460 <fault_handler_c+0x25c>)
 80013d4:	4293      	cmp	r3, r2
 80013d6:	ddf8      	ble.n	80013ca <fault_handler_c+0x1c6>
  __ASM volatile ("cpsid i" : : : "memory");
 80013d8:	b672      	cpsid	i
}
 80013da:	bf00      	nop
    
    while (1) {
        // 系统停止 - 避免重启循环
        __disable_irq();  // 禁用中断
        __WFE();          // 等待事件，降低功耗
 80013dc:	bf20      	wfe
        __disable_irq();  // 禁用中断
 80013de:	bf00      	nop
 80013e0:	e7fa      	b.n	80013d8 <fault_handler_c+0x1d4>
 80013e2:	bf00      	nop
 80013e4:	e000ed28 	.word	0xe000ed28
 80013e8:	e000ed2c 	.word	0xe000ed2c
 80013ec:	e000ed30 	.word	0xe000ed30
 80013f0:	e000ed3c 	.word	0xe000ed3c
 80013f4:	e000ed34 	.word	0xe000ed34
 80013f8:	e000ed38 	.word	0xe000ed38
 80013fc:	08020028 	.word	0x08020028
 8001400:	0802002c 	.word	0x0802002c
 8001404:	08020058 	.word	0x08020058
 8001408:	0802008c 	.word	0x0802008c
 800140c:	080200a4 	.word	0x080200a4
 8001410:	080200b4 	.word	0x080200b4
 8001414:	080200c4 	.word	0x080200c4
 8001418:	080200d4 	.word	0x080200d4
 800141c:	080200e4 	.word	0x080200e4
 8001420:	080200f4 	.word	0x080200f4
 8001424:	08020120 	.word	0x08020120
 8001428:	08020144 	.word	0x08020144
 800142c:	0802016c 	.word	0x0802016c
 8001430:	0802018c 	.word	0x0802018c
 8001434:	080201bc 	.word	0x080201bc
 8001438:	080201e8 	.word	0x080201e8
 800143c:	08020214 	.word	0x08020214
 8001440:	08020240 	.word	0x08020240
 8001444:	0802026c 	.word	0x0802026c
 8001448:	08020290 	.word	0x08020290
 800144c:	080202a8 	.word	0x080202a8
 8001450:	080202d4 	.word	0x080202d4
 8001454:	080202e8 	.word	0x080202e8
 8001458:	080202fc 	.word	0x080202fc
 800145c:	08020318 	.word	0x08020318
 8001460:	000f423f 	.word	0x000f423f

08001464 <test_hardfault_divide_by_zero>:
#include "shell.h"
#include "stm32h7xx.h"

// Test divide by zero error
void test_hardfault_divide_by_zero(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b084      	sub	sp, #16
 8001468:	af00      	add	r7, sp, #0
    SHELL_LOG_SYS_INFO("Testing divide by zero...");
 800146a:	4a24      	ldr	r2, [pc, #144]	@ (80014fc <test_hardfault_divide_by_zero+0x98>)
 800146c:	2101      	movs	r1, #1
 800146e:	2000      	movs	r0, #0
 8001470:	f01c fee6 	bl	801e240 <shellLogPrint>
    
    // Enable Usage Fault
    SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk;
 8001474:	4b22      	ldr	r3, [pc, #136]	@ (8001500 <test_hardfault_divide_by_zero+0x9c>)
 8001476:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001478:	4a21      	ldr	r2, [pc, #132]	@ (8001500 <test_hardfault_divide_by_zero+0x9c>)
 800147a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800147e:	6253      	str	r3, [r2, #36]	@ 0x24
    // Enable divide by zero trap
    SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
 8001480:	4b1f      	ldr	r3, [pc, #124]	@ (8001500 <test_hardfault_divide_by_zero+0x9c>)
 8001482:	695b      	ldr	r3, [r3, #20]
 8001484:	4a1e      	ldr	r2, [pc, #120]	@ (8001500 <test_hardfault_divide_by_zero+0x9c>)
 8001486:	f043 0310 	orr.w	r3, r3, #16
 800148a:	6153      	str	r3, [r2, #20]
    
    SHELL_LOG_SYS_INFO("Enabled divide by zero exception detection");
 800148c:	4a1d      	ldr	r2, [pc, #116]	@ (8001504 <test_hardfault_divide_by_zero+0xa0>)
 800148e:	2101      	movs	r1, #1
 8001490:	2000      	movs	r0, #0
 8001492:	f01c fed5 	bl	801e240 <shellLogPrint>
    
    // Wait for configuration to take effect
    for(volatile int i = 0; i < 100000; i++);
 8001496:	2300      	movs	r3, #0
 8001498:	603b      	str	r3, [r7, #0]
 800149a:	e002      	b.n	80014a2 <test_hardfault_divide_by_zero+0x3e>
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	3301      	adds	r3, #1
 80014a0:	603b      	str	r3, [r7, #0]
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	4a18      	ldr	r2, [pc, #96]	@ (8001508 <test_hardfault_divide_by_zero+0xa4>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	ddf8      	ble.n	800149c <test_hardfault_divide_by_zero+0x38>
    
    SHELL_LOG_SYS_WARNING("About to perform divide by zero operation, system will trigger UsageFault exception!");
 80014aa:	4a18      	ldr	r2, [pc, #96]	@ (800150c <test_hardfault_divide_by_zero+0xa8>)
 80014ac:	2102      	movs	r1, #2
 80014ae:	2000      	movs	r0, #0
 80014b0:	f01c fec6 	bl	801e240 <shellLogPrint>
    
    // Method 1: Normal divide by zero
    SHELL_LOG_SYS_INFO("Trying method 1: normal integer divide by zero...");
 80014b4:	4a16      	ldr	r2, [pc, #88]	@ (8001510 <test_hardfault_divide_by_zero+0xac>)
 80014b6:	2101      	movs	r1, #1
 80014b8:	2000      	movs	r0, #0
 80014ba:	f01c fec1 	bl	801e240 <shellLogPrint>
    volatile int a = 10;
 80014be:	230a      	movs	r3, #10
 80014c0:	60fb      	str	r3, [r7, #12]
    volatile int b = 0;
 80014c2:	2300      	movs	r3, #0
 80014c4:	60bb      	str	r3, [r7, #8]
    volatile int c = a / b;  // Trigger divide by zero exception
 80014c6:	68fa      	ldr	r2, [r7, #12]
 80014c8:	68bb      	ldr	r3, [r7, #8]
 80014ca:	fb92 f3f3 	sdiv	r3, r2, r3
 80014ce:	607b      	str	r3, [r7, #4]
    (void)c;  // Avoid compiler warning
 80014d0:	687b      	ldr	r3, [r7, #4]
    
    SHELL_LOG_SYS_INFO("Method 1 did not trigger exception, trying inline assembly divide by zero...");
 80014d2:	4a10      	ldr	r2, [pc, #64]	@ (8001514 <test_hardfault_divide_by_zero+0xb0>)
 80014d4:	2101      	movs	r1, #1
 80014d6:	2000      	movs	r0, #0
 80014d8:	f01c feb2 	bl	801e240 <shellLogPrint>
    
    // Method 2: Use inline assembly to ensure divide by zero is not optimized away
    __asm volatile(
 80014dc:	f04f 000a 	mov.w	r0, #10
 80014e0:	f04f 0100 	mov.w	r1, #0
 80014e4:	fb90 f2f1 	sdiv	r2, r0, r1
        "mov r1, #0     \n\t"   // Divisor is 0
        "sdiv r2, r0, r1 \n\t"  // Execute division, should trigger divide by zero exception
        ::: "r0", "r1", "r2", "memory"
    );
    
    SHELL_LOG_SYS_ERROR("Divide by zero test did not trigger exception! This processor may not support hardware divide by zero detection.");
 80014e8:	4a0b      	ldr	r2, [pc, #44]	@ (8001518 <test_hardfault_divide_by_zero+0xb4>)
 80014ea:	2103      	movs	r1, #3
 80014ec:	2000      	movs	r0, #0
 80014ee:	f01c fea7 	bl	801e240 <shellLogPrint>
}
 80014f2:	bf00      	nop
 80014f4:	3710      	adds	r7, #16
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	0802034c 	.word	0x0802034c
 8001500:	e000ed00 	.word	0xe000ed00
 8001504:	08020368 	.word	0x08020368
 8001508:	0001869f 	.word	0x0001869f
 800150c:	08020394 	.word	0x08020394
 8001510:	080203ec 	.word	0x080203ec
 8001514:	08020420 	.word	0x08020420
 8001518:	08020470 	.word	0x08020470

0800151c <test_hardfault_null_pointer>:

// Test null pointer access
void test_hardfault_null_pointer(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b086      	sub	sp, #24
 8001520:	af00      	add	r7, sp, #0
    SHELL_LOG_SYS_INFO("Testing null pointer access...");
 8001522:	4a2a      	ldr	r2, [pc, #168]	@ (80015cc <test_hardfault_null_pointer+0xb0>)
 8001524:	2101      	movs	r1, #1
 8001526:	2000      	movs	r0, #0
 8001528:	f01c fe8a 	bl	801e240 <shellLogPrint>
    
    // Enable Memory Management Fault
    SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800152c:	4b28      	ldr	r3, [pc, #160]	@ (80015d0 <test_hardfault_null_pointer+0xb4>)
 800152e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001530:	4a27      	ldr	r2, [pc, #156]	@ (80015d0 <test_hardfault_null_pointer+0xb4>)
 8001532:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001536:	6253      	str	r3, [r2, #36]	@ 0x24
    SHELL_LOG_SYS_INFO("Enabled Memory Management Fault");
 8001538:	4a26      	ldr	r2, [pc, #152]	@ (80015d4 <test_hardfault_null_pointer+0xb8>)
 800153a:	2101      	movs	r1, #1
 800153c:	2000      	movs	r0, #0
 800153e:	f01c fe7f 	bl	801e240 <shellLogPrint>
    
    // Wait for configuration to take effect
    for(volatile int i = 0; i < 100000; i++);
 8001542:	2300      	movs	r3, #0
 8001544:	603b      	str	r3, [r7, #0]
 8001546:	e002      	b.n	800154e <test_hardfault_null_pointer+0x32>
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	3301      	adds	r3, #1
 800154c:	603b      	str	r3, [r7, #0]
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	4a21      	ldr	r2, [pc, #132]	@ (80015d8 <test_hardfault_null_pointer+0xbc>)
 8001552:	4293      	cmp	r3, r2
 8001554:	ddf8      	ble.n	8001548 <test_hardfault_null_pointer+0x2c>
    
    SHELL_LOG_SYS_WARNING("About to access invalid memory addresses...");
 8001556:	4a21      	ldr	r2, [pc, #132]	@ (80015dc <test_hardfault_null_pointer+0xc0>)
 8001558:	2102      	movs	r1, #2
 800155a:	2000      	movs	r0, #0
 800155c:	f01c fe70 	bl	801e240 <shellLogPrint>
    
    // Method 1: Try to access address 0x00000000 (might be mapped to Flash)
    SHELL_LOG_SYS_INFO("Method 1: Trying to write to address 0x00000000...");
 8001560:	4a1f      	ldr	r2, [pc, #124]	@ (80015e0 <test_hardfault_null_pointer+0xc4>)
 8001562:	2101      	movs	r1, #1
 8001564:	2000      	movs	r0, #0
 8001566:	f01c fe6b 	bl	801e240 <shellLogPrint>
    volatile uint32_t *p1 = (volatile uint32_t *)0x00000000;
 800156a:	2300      	movs	r3, #0
 800156c:	617b      	str	r3, [r7, #20]
    *p1 = 0x12345678;  // Try to write to address 0 (may be read-only Flash)
 800156e:	697b      	ldr	r3, [r7, #20]
 8001570:	4a1c      	ldr	r2, [pc, #112]	@ (80015e4 <test_hardfault_null_pointer+0xc8>)
 8001572:	601a      	str	r2, [r3, #0]
    
    // Method 2: Try to access a clearly invalid address in the reserved region
    SHELL_LOG_SYS_INFO("Method 2: Trying to access reserved memory region 0x40000000...");
 8001574:	4a1c      	ldr	r2, [pc, #112]	@ (80015e8 <test_hardfault_null_pointer+0xcc>)
 8001576:	2101      	movs	r1, #1
 8001578:	2000      	movs	r0, #0
 800157a:	f01c fe61 	bl	801e240 <shellLogPrint>
    volatile uint32_t *p2 = (volatile uint32_t *)0x40000000;  // Reserved region
 800157e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001582:	613b      	str	r3, [r7, #16]
    volatile uint32_t value = *p2;
 8001584:	693b      	ldr	r3, [r7, #16]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	607b      	str	r3, [r7, #4]
    (void)value;
 800158a:	687b      	ldr	r3, [r7, #4]
    
    // Method 3: Try to access a region beyond the defined memory map
    SHELL_LOG_SYS_INFO("Method 3: Trying to access invalid high address 0xF0000000...");
 800158c:	4a17      	ldr	r2, [pc, #92]	@ (80015ec <test_hardfault_null_pointer+0xd0>)
 800158e:	2101      	movs	r1, #1
 8001590:	2000      	movs	r0, #0
 8001592:	f01c fe55 	bl	801e240 <shellLogPrint>
    volatile uint32_t *p3 = (volatile uint32_t *)0xF0000000;  // Invalid high address
 8001596:	f04f 4370 	mov.w	r3, #4026531840	@ 0xf0000000
 800159a:	60fb      	str	r3, [r7, #12]
    *p3 = 0xDEADBEEF;
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	4a14      	ldr	r2, [pc, #80]	@ (80015f0 <test_hardfault_null_pointer+0xd4>)
 80015a0:	601a      	str	r2, [r3, #0]
    
    // Method 4: Try to access an address that should definitely trigger MemManage
    SHELL_LOG_SYS_INFO("Method 4: Trying to access address in reserved system region...");
 80015a2:	4a14      	ldr	r2, [pc, #80]	@ (80015f4 <test_hardfault_null_pointer+0xd8>)
 80015a4:	2101      	movs	r1, #1
 80015a6:	2000      	movs	r0, #0
 80015a8:	f01c fe4a 	bl	801e240 <shellLogPrint>
    volatile uint32_t *p4 = (volatile uint32_t *)0x00001000;  // Try to write to likely read-only area
 80015ac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80015b0:	60bb      	str	r3, [r7, #8]
    *p4 = 0xBADC0DE;
 80015b2:	68bb      	ldr	r3, [r7, #8]
 80015b4:	4a10      	ldr	r2, [pc, #64]	@ (80015f8 <test_hardfault_null_pointer+0xdc>)
 80015b6:	601a      	str	r2, [r3, #0]
    
    SHELL_LOG_SYS_ERROR("All null pointer/invalid access tests did not trigger exception!");
 80015b8:	4a10      	ldr	r2, [pc, #64]	@ (80015fc <test_hardfault_null_pointer+0xe0>)
 80015ba:	2103      	movs	r1, #3
 80015bc:	2000      	movs	r0, #0
 80015be:	f01c fe3f 	bl	801e240 <shellLogPrint>
}
 80015c2:	bf00      	nop
 80015c4:	3718      	adds	r7, #24
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	080204e4 	.word	0x080204e4
 80015d0:	e000ed00 	.word	0xe000ed00
 80015d4:	08020504 	.word	0x08020504
 80015d8:	0001869f 	.word	0x0001869f
 80015dc:	08020524 	.word	0x08020524
 80015e0:	08020550 	.word	0x08020550
 80015e4:	12345678 	.word	0x12345678
 80015e8:	08020584 	.word	0x08020584
 80015ec:	080205c4 	.word	0x080205c4
 80015f0:	deadbeef 	.word	0xdeadbeef
 80015f4:	08020604 	.word	0x08020604
 80015f8:	0badc0de 	.word	0x0badc0de
 80015fc:	08020644 	.word	0x08020644

08001600 <test_hardfault_invalid_memory_access>:

// Test invalid memory access
void test_hardfault_invalid_memory_access(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b082      	sub	sp, #8
 8001604:	af00      	add	r7, sp, #0
    SHELL_LOG_SYS_INFO("Testing invalid memory access...");
 8001606:	4a15      	ldr	r2, [pc, #84]	@ (800165c <test_hardfault_invalid_memory_access+0x5c>)
 8001608:	2101      	movs	r1, #1
 800160a:	2000      	movs	r0, #0
 800160c:	f01c fe18 	bl	801e240 <shellLogPrint>
    
    // Enable Memory Management Fault
    SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001610:	4b13      	ldr	r3, [pc, #76]	@ (8001660 <test_hardfault_invalid_memory_access+0x60>)
 8001612:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001614:	4a12      	ldr	r2, [pc, #72]	@ (8001660 <test_hardfault_invalid_memory_access+0x60>)
 8001616:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800161a:	6253      	str	r3, [r2, #36]	@ 0x24
    SHELL_LOG_SYS_INFO("Enabled Memory Management Fault");
 800161c:	4a11      	ldr	r2, [pc, #68]	@ (8001664 <test_hardfault_invalid_memory_access+0x64>)
 800161e:	2101      	movs	r1, #1
 8001620:	2000      	movs	r0, #0
 8001622:	f01c fe0d 	bl	801e240 <shellLogPrint>
    
    SHELL_LOG_SYS_WARNING("About to access invalid memory address, system will trigger MemManage Fault!");
 8001626:	4a10      	ldr	r2, [pc, #64]	@ (8001668 <test_hardfault_invalid_memory_access+0x68>)
 8001628:	2102      	movs	r1, #2
 800162a:	2000      	movs	r0, #0
 800162c:	f01c fe08 	bl	801e240 <shellLogPrint>
    
    // Access an invalid memory address
    volatile int *invalid_addr = (volatile int *)0xFFFFFFFF;  // Invalid address
 8001630:	f04f 33ff 	mov.w	r3, #4294967295
 8001634:	607b      	str	r3, [r7, #4]
    SHELL_LOG_SYS_INFO("Trying to access address 0xFFFFFFFF...");
 8001636:	4a0d      	ldr	r2, [pc, #52]	@ (800166c <test_hardfault_invalid_memory_access+0x6c>)
 8001638:	2101      	movs	r1, #1
 800163a:	2000      	movs	r0, #0
 800163c:	f01c fe00 	bl	801e240 <shellLogPrint>
    volatile int value = *invalid_addr;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	603b      	str	r3, [r7, #0]
    (void)value;
 8001646:	683b      	ldr	r3, [r7, #0]
    
    SHELL_LOG_SYS_ERROR("Invalid memory access test did not trigger exception!");
 8001648:	4a09      	ldr	r2, [pc, #36]	@ (8001670 <test_hardfault_invalid_memory_access+0x70>)
 800164a:	2103      	movs	r1, #3
 800164c:	2000      	movs	r0, #0
 800164e:	f01c fdf7 	bl	801e240 <shellLogPrint>
}
 8001652:	bf00      	nop
 8001654:	3708      	adds	r7, #8
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	08020688 	.word	0x08020688
 8001660:	e000ed00 	.word	0xe000ed00
 8001664:	08020504 	.word	0x08020504
 8001668:	080206ac 	.word	0x080206ac
 800166c:	080206fc 	.word	0x080206fc
 8001670:	08020724 	.word	0x08020724

08001674 <test_hardfault_privileged_instruction>:

// Test privileged instruction
void test_hardfault_privileged_instruction(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	af00      	add	r7, sp, #0
    SHELL_LOG_SYS_INFO("Testing privileged instruction...");
 800167a:	4a1b      	ldr	r2, [pc, #108]	@ (80016e8 <test_hardfault_privileged_instruction+0x74>)
 800167c:	2101      	movs	r1, #1
 800167e:	2000      	movs	r0, #0
 8001680:	f01c fdde 	bl	801e240 <shellLogPrint>
    
    // Enable Usage Fault
    SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk;
 8001684:	4b19      	ldr	r3, [pc, #100]	@ (80016ec <test_hardfault_privileged_instruction+0x78>)
 8001686:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001688:	4a18      	ldr	r2, [pc, #96]	@ (80016ec <test_hardfault_privileged_instruction+0x78>)
 800168a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800168e:	6253      	str	r3, [r2, #36]	@ 0x24
    SHELL_LOG_SYS_INFO("Enabled Usage Fault exception");
 8001690:	4a17      	ldr	r2, [pc, #92]	@ (80016f0 <test_hardfault_privileged_instruction+0x7c>)
 8001692:	2101      	movs	r1, #1
 8001694:	2000      	movs	r0, #0
 8001696:	f01c fdd3 	bl	801e240 <shellLogPrint>
    
    // Wait for configuration to take effect
    for(volatile int i = 0; i < 100000; i++);
 800169a:	2300      	movs	r3, #0
 800169c:	607b      	str	r3, [r7, #4]
 800169e:	e002      	b.n	80016a6 <test_hardfault_privileged_instruction+0x32>
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	3301      	adds	r3, #1
 80016a4:	607b      	str	r3, [r7, #4]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	4a12      	ldr	r2, [pc, #72]	@ (80016f4 <test_hardfault_privileged_instruction+0x80>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	ddf8      	ble.n	80016a0 <test_hardfault_privileged_instruction+0x2c>
    
    SHELL_LOG_SYS_WARNING("About to execute privileged instruction, system will trigger UsageFault exception!");
 80016ae:	4a12      	ldr	r2, [pc, #72]	@ (80016f8 <test_hardfault_privileged_instruction+0x84>)
 80016b0:	2102      	movs	r1, #2
 80016b2:	2000      	movs	r0, #0
 80016b4:	f01c fdc4 	bl	801e240 <shellLogPrint>
    
    // Try to execute privileged instruction in non-privileged mode
    SHELL_LOG_SYS_INFO("Trying to execute MSR instruction to modify PRIMASK...");
 80016b8:	4a10      	ldr	r2, [pc, #64]	@ (80016fc <test_hardfault_privileged_instruction+0x88>)
 80016ba:	2101      	movs	r1, #1
 80016bc:	2000      	movs	r0, #0
 80016be:	f01c fdbf 	bl	801e240 <shellLogPrint>
    __asm volatile("msr primask, %0" : : "r" (1));  // Fixed MSR instruction syntax
 80016c2:	2301      	movs	r3, #1
 80016c4:	f383 8810 	msr	PRIMASK, r3
    
    SHELL_LOG_SYS_INFO("Trying to execute CPS instruction...");
 80016c8:	4a0d      	ldr	r2, [pc, #52]	@ (8001700 <test_hardfault_privileged_instruction+0x8c>)
 80016ca:	2101      	movs	r1, #1
 80016cc:	2000      	movs	r0, #0
 80016ce:	f01c fdb7 	bl	801e240 <shellLogPrint>
    __asm volatile("cpsid i");  // Privileged instruction to disable interrupts
 80016d2:	b672      	cpsid	i
    
    SHELL_LOG_SYS_ERROR("Privileged instruction test did not trigger exception!");
 80016d4:	4a0b      	ldr	r2, [pc, #44]	@ (8001704 <test_hardfault_privileged_instruction+0x90>)
 80016d6:	2103      	movs	r1, #3
 80016d8:	2000      	movs	r0, #0
 80016da:	f01c fdb1 	bl	801e240 <shellLogPrint>
}
 80016de:	bf00      	nop
 80016e0:	3708      	adds	r7, #8
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	0802075c 	.word	0x0802075c
 80016ec:	e000ed00 	.word	0xe000ed00
 80016f0:	08020780 	.word	0x08020780
 80016f4:	0001869f 	.word	0x0001869f
 80016f8:	080207a0 	.word	0x080207a0
 80016fc:	080207f4 	.word	0x080207f4
 8001700:	0802082c 	.word	0x0802082c
 8001704:	08020854 	.word	0x08020854

08001708 <test_hardfault_bus_error>:

// Test forced HardFault (by accessing non-existent peripheral)
void test_hardfault_bus_error(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0
    SHELL_LOG_SYS_INFO("Testing bus error...");
 800170e:	4a15      	ldr	r2, [pc, #84]	@ (8001764 <test_hardfault_bus_error+0x5c>)
 8001710:	2101      	movs	r1, #1
 8001712:	2000      	movs	r0, #0
 8001714:	f01c fd94 	bl	801e240 <shellLogPrint>
    
    // Enable Bus Fault
    SCB->SHCSR |= SCB_SHCSR_BUSFAULTENA_Msk;
 8001718:	4b13      	ldr	r3, [pc, #76]	@ (8001768 <test_hardfault_bus_error+0x60>)
 800171a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800171c:	4a12      	ldr	r2, [pc, #72]	@ (8001768 <test_hardfault_bus_error+0x60>)
 800171e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001722:	6253      	str	r3, [r2, #36]	@ 0x24
    SHELL_LOG_SYS_INFO("Enabled Bus Fault exception");
 8001724:	4a11      	ldr	r2, [pc, #68]	@ (800176c <test_hardfault_bus_error+0x64>)
 8001726:	2101      	movs	r1, #1
 8001728:	2000      	movs	r0, #0
 800172a:	f01c fd89 	bl	801e240 <shellLogPrint>
    
    SHELL_LOG_SYS_WARNING("About to access non-existent peripheral address, system will trigger BusFault exception!");
 800172e:	4a10      	ldr	r2, [pc, #64]	@ (8001770 <test_hardfault_bus_error+0x68>)
 8001730:	2102      	movs	r1, #2
 8001732:	2000      	movs	r0, #0
 8001734:	f01c fd84 	bl	801e240 <shellLogPrint>
    
    // Access a non-existent peripheral address
    volatile uint32_t *invalid_peripheral = (volatile uint32_t *)0x60000000;  // Non-existent peripheral address
 8001738:	f04f 43c0 	mov.w	r3, #1610612736	@ 0x60000000
 800173c:	607b      	str	r3, [r7, #4]
    SHELL_LOG_SYS_INFO("Trying to access address 0x60000000...");
 800173e:	4a0d      	ldr	r2, [pc, #52]	@ (8001774 <test_hardfault_bus_error+0x6c>)
 8001740:	2101      	movs	r1, #1
 8001742:	2000      	movs	r0, #0
 8001744:	f01c fd7c 	bl	801e240 <shellLogPrint>
    volatile uint32_t value = *invalid_peripheral;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	603b      	str	r3, [r7, #0]
    (void)value;
 800174e:	683b      	ldr	r3, [r7, #0]
    
    SHELL_LOG_SYS_ERROR("Bus error test did not trigger exception!");
 8001750:	4a09      	ldr	r2, [pc, #36]	@ (8001778 <test_hardfault_bus_error+0x70>)
 8001752:	2103      	movs	r1, #3
 8001754:	2000      	movs	r0, #0
 8001756:	f01c fd73 	bl	801e240 <shellLogPrint>
}
 800175a:	bf00      	nop
 800175c:	3708      	adds	r7, #8
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	0802088c 	.word	0x0802088c
 8001768:	e000ed00 	.word	0xe000ed00
 800176c:	080208a4 	.word	0x080208a4
 8001770:	080208c0 	.word	0x080208c0
 8001774:	0802091c 	.word	0x0802091c
 8001778:	08020944 	.word	0x08020944

0800177c <test_hardfault_unaligned_access>:

// Test unaligned access exception
void test_hardfault_unaligned_access(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b084      	sub	sp, #16
 8001780:	af00      	add	r7, sp, #0
    SHELL_LOG_SYS_INFO("Testing unaligned access exception...");
 8001782:	4a1d      	ldr	r2, [pc, #116]	@ (80017f8 <test_hardfault_unaligned_access+0x7c>)
 8001784:	2101      	movs	r1, #1
 8001786:	2000      	movs	r0, #0
 8001788:	f01c fd5a 	bl	801e240 <shellLogPrint>
    
    // Enable Usage Fault and unaligned access exception
    SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk;
 800178c:	4b1b      	ldr	r3, [pc, #108]	@ (80017fc <test_hardfault_unaligned_access+0x80>)
 800178e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001790:	4a1a      	ldr	r2, [pc, #104]	@ (80017fc <test_hardfault_unaligned_access+0x80>)
 8001792:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001796:	6253      	str	r3, [r2, #36]	@ 0x24
    SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;  // Enable unaligned access trap
 8001798:	4b18      	ldr	r3, [pc, #96]	@ (80017fc <test_hardfault_unaligned_access+0x80>)
 800179a:	695b      	ldr	r3, [r3, #20]
 800179c:	4a17      	ldr	r2, [pc, #92]	@ (80017fc <test_hardfault_unaligned_access+0x80>)
 800179e:	f043 0308 	orr.w	r3, r3, #8
 80017a2:	6153      	str	r3, [r2, #20]
    
    SHELL_LOG_SYS_INFO("Enabled unaligned access exception detection");
 80017a4:	4a16      	ldr	r2, [pc, #88]	@ (8001800 <test_hardfault_unaligned_access+0x84>)
 80017a6:	2101      	movs	r1, #1
 80017a8:	2000      	movs	r0, #0
 80017aa:	f01c fd49 	bl	801e240 <shellLogPrint>
    
    // Wait for configuration to take effect
    for(volatile int i = 0; i < 100000; i++);
 80017ae:	2300      	movs	r3, #0
 80017b0:	603b      	str	r3, [r7, #0]
 80017b2:	e002      	b.n	80017ba <test_hardfault_unaligned_access+0x3e>
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	3301      	adds	r3, #1
 80017b8:	603b      	str	r3, [r7, #0]
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	4a11      	ldr	r2, [pc, #68]	@ (8001804 <test_hardfault_unaligned_access+0x88>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	ddf8      	ble.n	80017b4 <test_hardfault_unaligned_access+0x38>
    
    SHELL_LOG_SYS_WARNING("About to perform unaligned access, system will trigger UsageFault exception!");
 80017c2:	4a11      	ldr	r2, [pc, #68]	@ (8001808 <test_hardfault_unaligned_access+0x8c>)
 80017c4:	2102      	movs	r1, #2
 80017c6:	2000      	movs	r0, #0
 80017c8:	f01c fd3a 	bl	801e240 <shellLogPrint>
    
    // Create unaligned address (not word-aligned)
    char buffer[8];
    volatile uint32_t *unaligned_ptr = (volatile uint32_t *)(buffer + 1);  // Unaligned by 1 byte
 80017cc:	1d3b      	adds	r3, r7, #4
 80017ce:	3301      	adds	r3, #1
 80017d0:	60fb      	str	r3, [r7, #12]
    
    SHELL_LOG_SYS_INFO("Trying to access unaligned address: 0x%08X", (uint32_t)unaligned_ptr);
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	4a0d      	ldr	r2, [pc, #52]	@ (800180c <test_hardfault_unaligned_access+0x90>)
 80017d6:	2101      	movs	r1, #1
 80017d8:	2000      	movs	r0, #0
 80017da:	f01c fd31 	bl	801e240 <shellLogPrint>
    *unaligned_ptr = 0x12345678;  // Unaligned access
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	4a0b      	ldr	r2, [pc, #44]	@ (8001810 <test_hardfault_unaligned_access+0x94>)
 80017e2:	601a      	str	r2, [r3, #0]
    
    SHELL_LOG_SYS_ERROR("Unaligned access test did not trigger exception!");
 80017e4:	4a0b      	ldr	r2, [pc, #44]	@ (8001814 <test_hardfault_unaligned_access+0x98>)
 80017e6:	2103      	movs	r1, #3
 80017e8:	2000      	movs	r0, #0
 80017ea:	f01c fd29 	bl	801e240 <shellLogPrint>
}
 80017ee:	bf00      	nop
 80017f0:	3710      	adds	r7, #16
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	08020970 	.word	0x08020970
 80017fc:	e000ed00 	.word	0xe000ed00
 8001800:	08020998 	.word	0x08020998
 8001804:	0001869f 	.word	0x0001869f
 8001808:	080209c8 	.word	0x080209c8
 800180c:	08020a18 	.word	0x08020a18
 8001810:	12345678 	.word	0x12345678
 8001814:	08020a44 	.word	0x08020a44

08001818 <test_hardfault_undefined_instruction>:

// Test undefined instruction
void test_hardfault_undefined_instruction(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b082      	sub	sp, #8
 800181c:	af00      	add	r7, sp, #0
    SHELL_LOG_SYS_INFO("Testing undefined instruction...");
 800181e:	4a23      	ldr	r2, [pc, #140]	@ (80018ac <test_hardfault_undefined_instruction+0x94>)
 8001820:	2101      	movs	r1, #1
 8001822:	2000      	movs	r0, #0
 8001824:	f01c fd0c 	bl	801e240 <shellLogPrint>
    
    // Enable Usage Fault
    SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk;
 8001828:	4b21      	ldr	r3, [pc, #132]	@ (80018b0 <test_hardfault_undefined_instruction+0x98>)
 800182a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800182c:	4a20      	ldr	r2, [pc, #128]	@ (80018b0 <test_hardfault_undefined_instruction+0x98>)
 800182e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001832:	6253      	str	r3, [r2, #36]	@ 0x24
    SHELL_LOG_SYS_INFO("Enabled Usage Fault exception");
 8001834:	4a1f      	ldr	r2, [pc, #124]	@ (80018b4 <test_hardfault_undefined_instruction+0x9c>)
 8001836:	2101      	movs	r1, #1
 8001838:	2000      	movs	r0, #0
 800183a:	f01c fd01 	bl	801e240 <shellLogPrint>
    
    // Wait for configuration to take effect
    for(volatile int i = 0; i < 100000; i++);
 800183e:	2300      	movs	r3, #0
 8001840:	603b      	str	r3, [r7, #0]
 8001842:	e002      	b.n	800184a <test_hardfault_undefined_instruction+0x32>
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	3301      	adds	r3, #1
 8001848:	603b      	str	r3, [r7, #0]
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	4a1a      	ldr	r2, [pc, #104]	@ (80018b8 <test_hardfault_undefined_instruction+0xa0>)
 800184e:	4293      	cmp	r3, r2
 8001850:	ddf8      	ble.n	8001844 <test_hardfault_undefined_instruction+0x2c>
    
    SHELL_LOG_SYS_WARNING("About to execute undefined instruction, system will trigger UsageFault exception!");
 8001852:	4a1a      	ldr	r2, [pc, #104]	@ (80018bc <test_hardfault_undefined_instruction+0xa4>)
 8001854:	2102      	movs	r1, #2
 8001856:	2000      	movs	r0, #0
 8001858:	f01c fcf2 	bl	801e240 <shellLogPrint>
    
    // Method 1: Try to execute undefined instruction using inline assembly
    SHELL_LOG_SYS_INFO("Trying method 1: undefined opcode...");
 800185c:	4a18      	ldr	r2, [pc, #96]	@ (80018c0 <test_hardfault_undefined_instruction+0xa8>)
 800185e:	2101      	movs	r1, #1
 8001860:	2000      	movs	r0, #0
 8001862:	f01c fced 	bl	801e240 <shellLogPrint>
 8001866:	de00      	.short	0xde00
    __asm volatile(".hword 0xDE00");  // Undefined instruction in Thumb mode
    
    // Method 2: Try to execute ARM instruction in Thumb mode
    SHELL_LOG_SYS_INFO("Trying method 2: ARM instruction in Thumb mode...");
 8001868:	4a16      	ldr	r2, [pc, #88]	@ (80018c4 <test_hardfault_undefined_instruction+0xac>)
 800186a:	2101      	movs	r1, #1
 800186c:	2000      	movs	r0, #0
 800186e:	f01c fce7 	bl	801e240 <shellLogPrint>
 8001872:	e1a0      	.short	0xe1a0
 8001874:	0000      	.short	0x0000
    __asm volatile(".hword 0xE1A0, 0x0000");  // ARM NOP instruction in Thumb mode
    
    // Method 3: Try to execute illegal system instruction
    SHELL_LOG_SYS_INFO("Trying method 3: illegal system instruction...");
 8001876:	4a14      	ldr	r2, [pc, #80]	@ (80018c8 <test_hardfault_undefined_instruction+0xb0>)
 8001878:	2101      	movs	r1, #1
 800187a:	2000      	movs	r0, #0
 800187c:	f01c fce0 	bl	801e240 <shellLogPrint>
    __asm volatile("msr control, %0" : : "r" (0xFF));  // Fixed MSR instruction syntax
 8001880:	23ff      	movs	r3, #255	@ 0xff
 8001882:	f383 8814 	msr	CONTROL, r3
    
    // Method 4: Jump to odd address (should be even address in Thumb mode)
    SHELL_LOG_SYS_INFO("Trying method 4: jump to odd address...");
 8001886:	4a11      	ldr	r2, [pc, #68]	@ (80018cc <test_hardfault_undefined_instruction+0xb4>)
 8001888:	2101      	movs	r1, #1
 800188a:	2000      	movs	r0, #0
 800188c:	f01c fcd8 	bl	801e240 <shellLogPrint>
    void (*bad_func)(void) = (void(*)(void))0x08000001;  // Odd address
 8001890:	4b0f      	ldr	r3, [pc, #60]	@ (80018d0 <test_hardfault_undefined_instruction+0xb8>)
 8001892:	607b      	str	r3, [r7, #4]
    bad_func();
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	4798      	blx	r3
    
    SHELL_LOG_SYS_ERROR("All methods failed to trigger exception! May need to check processor configuration.");
 8001898:	4a0e      	ldr	r2, [pc, #56]	@ (80018d4 <test_hardfault_undefined_instruction+0xbc>)
 800189a:	2103      	movs	r1, #3
 800189c:	2000      	movs	r0, #0
 800189e:	f01c fccf 	bl	801e240 <shellLogPrint>
}
 80018a2:	bf00      	nop
 80018a4:	3708      	adds	r7, #8
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	08020a78 	.word	0x08020a78
 80018b0:	e000ed00 	.word	0xe000ed00
 80018b4:	08020780 	.word	0x08020780
 80018b8:	0001869f 	.word	0x0001869f
 80018bc:	08020a9c 	.word	0x08020a9c
 80018c0:	08020af0 	.word	0x08020af0
 80018c4:	08020b18 	.word	0x08020b18
 80018c8:	08020b4c 	.word	0x08020b4c
 80018cc:	08020b7c 	.word	0x08020b7c
 80018d0:	08000001 	.word	0x08000001
 80018d4:	08020ba4 	.word	0x08020ba4

080018d8 <test_hardfault_stack_direct>:

// Test fast stack overflow (direct stack pointer manipulation)
void test_hardfault_stack_direct(void)
{
 80018d8:	b590      	push	{r4, r7, lr}
 80018da:	b083      	sub	sp, #12
 80018dc:	af00      	add	r7, sp, #0
    SHELL_LOG_SYS_INFO("Testing direct stack access overflow...");
 80018de:	4a16      	ldr	r2, [pc, #88]	@ (8001938 <test_hardfault_stack_direct+0x60>)
 80018e0:	2101      	movs	r1, #1
 80018e2:	2000      	movs	r0, #0
 80018e4:	f01c fcac 	bl	801e240 <shellLogPrint>
    
    // Enable Memory Management Fault
    SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80018e8:	4b14      	ldr	r3, [pc, #80]	@ (800193c <test_hardfault_stack_direct+0x64>)
 80018ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018ec:	4a13      	ldr	r2, [pc, #76]	@ (800193c <test_hardfault_stack_direct+0x64>)
 80018ee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018f2:	6253      	str	r3, [r2, #36]	@ 0x24
    SHELL_LOG_SYS_INFO("Enabled Memory Management Fault");
 80018f4:	4a12      	ldr	r2, [pc, #72]	@ (8001940 <test_hardfault_stack_direct+0x68>)
 80018f6:	2101      	movs	r1, #1
 80018f8:	2000      	movs	r0, #0
 80018fa:	f01c fca1 	bl	801e240 <shellLogPrint>
    
    // Get current stack pointer
    register uint32_t current_sp;
    __asm volatile("mov %0, sp" : "=r" (current_sp));
 80018fe:	466b      	mov	r3, sp
 8001900:	461c      	mov	r4, r3
    SHELL_LOG_SYS_INFO("Current stack pointer: 0x%08X", current_sp);
 8001902:	4623      	mov	r3, r4
 8001904:	4a0f      	ldr	r2, [pc, #60]	@ (8001944 <test_hardfault_stack_direct+0x6c>)
 8001906:	2101      	movs	r1, #1
 8001908:	2000      	movs	r0, #0
 800190a:	f01c fc99 	bl	801e240 <shellLogPrint>
    
    // Calculate an address that is clearly outside the stack range
    volatile uint32_t *stack_underflow = (volatile uint32_t *)(current_sp - 0x10000);  // Move stack pointer down 64KB
 800190e:	f5a4 3380 	sub.w	r3, r4, #65536	@ 0x10000
 8001912:	607b      	str	r3, [r7, #4]
    SHELL_LOG_SYS_WARNING("Trying to access stack underflow address: 0x%08X", (uint32_t)stack_underflow);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	4a0c      	ldr	r2, [pc, #48]	@ (8001948 <test_hardfault_stack_direct+0x70>)
 8001918:	2102      	movs	r1, #2
 800191a:	2000      	movs	r0, #0
 800191c:	f01c fc90 	bl	801e240 <shellLogPrint>
    
    // Accessing this address should trigger Memory Management Fault
    *stack_underflow = 0xDEADBEEF;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	4a0a      	ldr	r2, [pc, #40]	@ (800194c <test_hardfault_stack_direct+0x74>)
 8001924:	601a      	str	r2, [r3, #0]
    
    SHELL_LOG_SYS_ERROR("Stack overflow test did not trigger exception!");
 8001926:	4a0a      	ldr	r2, [pc, #40]	@ (8001950 <test_hardfault_stack_direct+0x78>)
 8001928:	2103      	movs	r1, #3
 800192a:	2000      	movs	r0, #0
 800192c:	f01c fc88 	bl	801e240 <shellLogPrint>
}
 8001930:	bf00      	nop
 8001932:	370c      	adds	r7, #12
 8001934:	46bd      	mov	sp, r7
 8001936:	bd90      	pop	{r4, r7, pc}
 8001938:	08020bf8 	.word	0x08020bf8
 800193c:	e000ed00 	.word	0xe000ed00
 8001940:	08020504 	.word	0x08020504
 8001944:	08020c20 	.word	0x08020c20
 8001948:	08020c40 	.word	0x08020c40
 800194c:	deadbeef 	.word	0xdeadbeef
 8001950:	08020c74 	.word	0x08020c74

08001954 <test_stack_overflow_recursive>:
// Test stack overflow (through fast deep recursion)
static volatile int recursion_depth = 0;
static volatile int max_recursion = 500;  // Limit recursion depth to avoid watchdog reset

void test_stack_overflow_recursive(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	f6ad 0d08 	subw	sp, sp, #2056	@ 0x808
 800195a:	af00      	add	r7, sp, #0
    recursion_depth++;
 800195c:	4b2b      	ldr	r3, [pc, #172]	@ (8001a0c <test_stack_overflow_recursive+0xb8>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	3301      	adds	r3, #1
 8001962:	4a2a      	ldr	r2, [pc, #168]	@ (8001a0c <test_stack_overflow_recursive+0xb8>)
 8001964:	6013      	str	r3, [r2, #0]
    char large_array[2048];  // Use larger stack space, quickly consume stack
    
    // Quickly fill array to consume stack space
    for(int i = 0; i < 2048; i++) {
 8001966:	2300      	movs	r3, #0
 8001968:	f8c7 3804 	str.w	r3, [r7, #2052]	@ 0x804
 800196c:	e010      	b.n	8001990 <test_stack_overflow_recursive+0x3c>
        large_array[i] = (char)(i & 0xFF);
 800196e:	f8d7 3804 	ldr.w	r3, [r7, #2052]	@ 0x804
 8001972:	b2d9      	uxtb	r1, r3
 8001974:	f607 0308 	addw	r3, r7, #2056	@ 0x808
 8001978:	f6a3 0208 	subw	r2, r3, #2056	@ 0x808
 800197c:	f8d7 3804 	ldr.w	r3, [r7, #2052]	@ 0x804
 8001980:	4413      	add	r3, r2
 8001982:	460a      	mov	r2, r1
 8001984:	701a      	strb	r2, [r3, #0]
    for(int i = 0; i < 2048; i++) {
 8001986:	f8d7 3804 	ldr.w	r3, [r7, #2052]	@ 0x804
 800198a:	3301      	adds	r3, #1
 800198c:	f8c7 3804 	str.w	r3, [r7, #2052]	@ 0x804
 8001990:	f8d7 3804 	ldr.w	r3, [r7, #2052]	@ 0x804
 8001994:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001998:	dbe9      	blt.n	800196e <test_stack_overflow_recursive+0x1a>
    }
    
    if(recursion_depth % 50 == 0) {
 800199a:	4b1c      	ldr	r3, [pc, #112]	@ (8001a0c <test_stack_overflow_recursive+0xb8>)
 800199c:	681a      	ldr	r2, [r3, #0]
 800199e:	4b1c      	ldr	r3, [pc, #112]	@ (8001a10 <test_stack_overflow_recursive+0xbc>)
 80019a0:	fb83 1302 	smull	r1, r3, r3, r2
 80019a4:	1119      	asrs	r1, r3, #4
 80019a6:	17d3      	asrs	r3, r2, #31
 80019a8:	1acb      	subs	r3, r1, r3
 80019aa:	2132      	movs	r1, #50	@ 0x32
 80019ac:	fb01 f303 	mul.w	r3, r1, r3
 80019b0:	1ad3      	subs	r3, r2, r3
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d106      	bne.n	80019c4 <test_stack_overflow_recursive+0x70>
        SHELL_LOG_SYS_INFO("Recursion depth: %d", recursion_depth);
 80019b6:	4b15      	ldr	r3, [pc, #84]	@ (8001a0c <test_stack_overflow_recursive+0xb8>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a16      	ldr	r2, [pc, #88]	@ (8001a14 <test_stack_overflow_recursive+0xc0>)
 80019bc:	2101      	movs	r1, #1
 80019be:	2000      	movs	r0, #0
 80019c0:	f01c fc3e 	bl	801e240 <shellLogPrint>
    }
    
    // Limit recursion depth, if no exception triggered then manually trigger
    if(recursion_depth < max_recursion) {
 80019c4:	4b11      	ldr	r3, [pc, #68]	@ (8001a0c <test_stack_overflow_recursive+0xb8>)
 80019c6:	681a      	ldr	r2, [r3, #0]
 80019c8:	4b13      	ldr	r3, [pc, #76]	@ (8001a18 <test_stack_overflow_recursive+0xc4>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	429a      	cmp	r2, r3
 80019ce:	da02      	bge.n	80019d6 <test_stack_overflow_recursive+0x82>
        test_stack_overflow_recursive();  // Continue recursion
 80019d0:	f7ff ffc0 	bl	8001954 <test_stack_overflow_recursive>
        extern uint32_t _estack;  // Stack top address
        volatile uint32_t *stack_overflow_addr = (volatile uint32_t *)((uint32_t)&_estack - 0x20000);  // Below stack bottom
        SHELL_LOG_SYS_INFO("Trying to access stack bottom address: 0x%08X", (uint32_t)stack_overflow_addr);
        *stack_overflow_addr = 0xDEADBEEF;  // Access memory below stack bottom
    }
}
 80019d4:	e014      	b.n	8001a00 <test_stack_overflow_recursive+0xac>
        SHELL_LOG_SYS_WARNING("Reached maximum recursion depth but no exception triggered, trying to directly access stack bottom...");
 80019d6:	4a11      	ldr	r2, [pc, #68]	@ (8001a1c <test_stack_overflow_recursive+0xc8>)
 80019d8:	2102      	movs	r1, #2
 80019da:	2000      	movs	r0, #0
 80019dc:	f01c fc30 	bl	801e240 <shellLogPrint>
        volatile uint32_t *stack_overflow_addr = (volatile uint32_t *)((uint32_t)&_estack - 0x20000);  // Below stack bottom
 80019e0:	4b0f      	ldr	r3, [pc, #60]	@ (8001a20 <test_stack_overflow_recursive+0xcc>)
 80019e2:	f5a3 3300 	sub.w	r3, r3, #131072	@ 0x20000
 80019e6:	f8c7 3800 	str.w	r3, [r7, #2048]	@ 0x800
        SHELL_LOG_SYS_INFO("Trying to access stack bottom address: 0x%08X", (uint32_t)stack_overflow_addr);
 80019ea:	f8d7 3800 	ldr.w	r3, [r7, #2048]	@ 0x800
 80019ee:	4a0d      	ldr	r2, [pc, #52]	@ (8001a24 <test_stack_overflow_recursive+0xd0>)
 80019f0:	2101      	movs	r1, #1
 80019f2:	2000      	movs	r0, #0
 80019f4:	f01c fc24 	bl	801e240 <shellLogPrint>
        *stack_overflow_addr = 0xDEADBEEF;  // Access memory below stack bottom
 80019f8:	f8d7 3800 	ldr.w	r3, [r7, #2048]	@ 0x800
 80019fc:	4a0a      	ldr	r2, [pc, #40]	@ (8001a28 <test_stack_overflow_recursive+0xd4>)
 80019fe:	601a      	str	r2, [r3, #0]
}
 8001a00:	bf00      	nop
 8001a02:	f607 0708 	addw	r7, r7, #2056	@ 0x808
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	24000154 	.word	0x24000154
 8001a10:	51eb851f 	.word	0x51eb851f
 8001a14:	08020ca4 	.word	0x08020ca4
 8001a18:	24000000 	.word	0x24000000
 8001a1c:	08020cb8 	.word	0x08020cb8
 8001a20:	24050000 	.word	0x24050000
 8001a24:	08020d20 	.word	0x08020d20
 8001a28:	deadbeef 	.word	0xdeadbeef

08001a2c <test_hardfault_stack_overflow>:

// Entry function for stack overflow test
void test_hardfault_stack_overflow(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	af00      	add	r7, sp, #0
    SHELL_LOG_SYS_INFO("Testing stack overflow...");
 8001a30:	4a0d      	ldr	r2, [pc, #52]	@ (8001a68 <test_hardfault_stack_overflow+0x3c>)
 8001a32:	2101      	movs	r1, #1
 8001a34:	2000      	movs	r0, #0
 8001a36:	f01c fc03 	bl	801e240 <shellLogPrint>
    
    // Enable Memory Management Fault
    SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001a3a:	4b0c      	ldr	r3, [pc, #48]	@ (8001a6c <test_hardfault_stack_overflow+0x40>)
 8001a3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a3e:	4a0b      	ldr	r2, [pc, #44]	@ (8001a6c <test_hardfault_stack_overflow+0x40>)
 8001a40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a44:	6253      	str	r3, [r2, #36]	@ 0x24
    SHELL_LOG_SYS_INFO("Enabled Memory Management Fault");
 8001a46:	4a0a      	ldr	r2, [pc, #40]	@ (8001a70 <test_hardfault_stack_overflow+0x44>)
 8001a48:	2101      	movs	r1, #1
 8001a4a:	2000      	movs	r0, #0
 8001a4c:	f01c fbf8 	bl	801e240 <shellLogPrint>
    
    recursion_depth = 0;
 8001a50:	4b08      	ldr	r3, [pc, #32]	@ (8001a74 <test_hardfault_stack_overflow+0x48>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	601a      	str	r2, [r3, #0]
    SHELL_LOG_SYS_WARNING("Starting deep recursion test, will quickly consume stack space...");
 8001a56:	4a08      	ldr	r2, [pc, #32]	@ (8001a78 <test_hardfault_stack_overflow+0x4c>)
 8001a58:	2102      	movs	r1, #2
 8001a5a:	2000      	movs	r0, #0
 8001a5c:	f01c fbf0 	bl	801e240 <shellLogPrint>
    test_stack_overflow_recursive();
 8001a60:	f7ff ff78 	bl	8001954 <test_stack_overflow_recursive>
}
 8001a64:	bf00      	nop
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	08020d50 	.word	0x08020d50
 8001a6c:	e000ed00 	.word	0xe000ed00
 8001a70:	08020504 	.word	0x08020504
 8001a74:	24000154 	.word	0x24000154
 8001a78:	08020d6c 	.word	0x08020d6c

08001a7c <cmd_fault_test>:

// Shell command function - exception test menu
int cmd_fault_test(int argc, char *argv[])
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
 8001a84:	6039      	str	r1, [r7, #0]
    if (argc < 2) {
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2b01      	cmp	r3, #1
 8001a8a:	dc33      	bgt.n	8001af4 <cmd_fault_test+0x78>
        SHELL_LOG_SYS_INFO("Exception test commands:");
 8001a8c:	4a72      	ldr	r2, [pc, #456]	@ (8001c58 <cmd_fault_test+0x1dc>)
 8001a8e:	2101      	movs	r1, #1
 8001a90:	2000      	movs	r0, #0
 8001a92:	f01c fbd5 	bl	801e240 <shellLogPrint>
        SHELL_LOG_SYS_INFO("fault_test null      - test null pointer access");
 8001a96:	4a71      	ldr	r2, [pc, #452]	@ (8001c5c <cmd_fault_test+0x1e0>)
 8001a98:	2101      	movs	r1, #1
 8001a9a:	2000      	movs	r0, #0
 8001a9c:	f01c fbd0 	bl	801e240 <shellLogPrint>
        SHELL_LOG_SYS_INFO("fault_test memory    - test invalid memory access");
 8001aa0:	4a6f      	ldr	r2, [pc, #444]	@ (8001c60 <cmd_fault_test+0x1e4>)
 8001aa2:	2101      	movs	r1, #1
 8001aa4:	2000      	movs	r0, #0
 8001aa6:	f01c fbcb 	bl	801e240 <shellLogPrint>
        SHELL_LOG_SYS_INFO("fault_test instr     - test undefined instruction");
 8001aaa:	4a6e      	ldr	r2, [pc, #440]	@ (8001c64 <cmd_fault_test+0x1e8>)
 8001aac:	2101      	movs	r1, #1
 8001aae:	2000      	movs	r0, #0
 8001ab0:	f01c fbc6 	bl	801e240 <shellLogPrint>
        SHELL_LOG_SYS_INFO("fault_test stack     - test stack overflow (recursive)");
 8001ab4:	4a6c      	ldr	r2, [pc, #432]	@ (8001c68 <cmd_fault_test+0x1ec>)
 8001ab6:	2101      	movs	r1, #1
 8001ab8:	2000      	movs	r0, #0
 8001aba:	f01c fbc1 	bl	801e240 <shellLogPrint>
        SHELL_LOG_SYS_INFO("fault_test stackfast - test stack overflow (direct)");
 8001abe:	4a6b      	ldr	r2, [pc, #428]	@ (8001c6c <cmd_fault_test+0x1f0>)
 8001ac0:	2101      	movs	r1, #1
 8001ac2:	2000      	movs	r0, #0
 8001ac4:	f01c fbbc 	bl	801e240 <shellLogPrint>
        SHELL_LOG_SYS_INFO("fault_test divide    - test divide by zero");
 8001ac8:	4a69      	ldr	r2, [pc, #420]	@ (8001c70 <cmd_fault_test+0x1f4>)
 8001aca:	2101      	movs	r1, #1
 8001acc:	2000      	movs	r0, #0
 8001ace:	f01c fbb7 	bl	801e240 <shellLogPrint>
        SHELL_LOG_SYS_INFO("fault_test unalign   - test unaligned access");
 8001ad2:	4a68      	ldr	r2, [pc, #416]	@ (8001c74 <cmd_fault_test+0x1f8>)
 8001ad4:	2101      	movs	r1, #1
 8001ad6:	2000      	movs	r0, #0
 8001ad8:	f01c fbb2 	bl	801e240 <shellLogPrint>
        SHELL_LOG_SYS_INFO("fault_test priv      - test privileged instruction");
 8001adc:	4a66      	ldr	r2, [pc, #408]	@ (8001c78 <cmd_fault_test+0x1fc>)
 8001ade:	2101      	movs	r1, #1
 8001ae0:	2000      	movs	r0, #0
 8001ae2:	f01c fbad 	bl	801e240 <shellLogPrint>
        SHELL_LOG_SYS_INFO("fault_test bus       - test bus error");
 8001ae6:	4a65      	ldr	r2, [pc, #404]	@ (8001c7c <cmd_fault_test+0x200>)
 8001ae8:	2101      	movs	r1, #1
 8001aea:	2000      	movs	r0, #0
 8001aec:	f01c fba8 	bl	801e240 <shellLogPrint>
        return 0;
 8001af0:	2300      	movs	r3, #0
 8001af2:	e0ad      	b.n	8001c50 <cmd_fault_test+0x1d4>
    }
    
    if (strcmp(argv[1], "null") == 0) {
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	3304      	adds	r3, #4
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4961      	ldr	r1, [pc, #388]	@ (8001c80 <cmd_fault_test+0x204>)
 8001afc:	4618      	mov	r0, r3
 8001afe:	f7fe fc07 	bl	8000310 <strcmp>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d107      	bne.n	8001b18 <cmd_fault_test+0x9c>
        SHELL_LOG_SYS_WARNING("About to execute null pointer access test, system will enter exception handler!");
 8001b08:	4a5e      	ldr	r2, [pc, #376]	@ (8001c84 <cmd_fault_test+0x208>)
 8001b0a:	2102      	movs	r1, #2
 8001b0c:	2000      	movs	r0, #0
 8001b0e:	f01c fb97 	bl	801e240 <shellLogPrint>
        test_hardfault_null_pointer();
 8001b12:	f7ff fd03 	bl	800151c <test_hardfault_null_pointer>
 8001b16:	e09a      	b.n	8001c4e <cmd_fault_test+0x1d2>
    }
    else if (strcmp(argv[1], "memory") == 0) {
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	3304      	adds	r3, #4
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	495a      	ldr	r1, [pc, #360]	@ (8001c88 <cmd_fault_test+0x20c>)
 8001b20:	4618      	mov	r0, r3
 8001b22:	f7fe fbf5 	bl	8000310 <strcmp>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d107      	bne.n	8001b3c <cmd_fault_test+0xc0>
        SHELL_LOG_SYS_WARNING("About to execute invalid memory access test, system will enter exception handler!");
 8001b2c:	4a57      	ldr	r2, [pc, #348]	@ (8001c8c <cmd_fault_test+0x210>)
 8001b2e:	2102      	movs	r1, #2
 8001b30:	2000      	movs	r0, #0
 8001b32:	f01c fb85 	bl	801e240 <shellLogPrint>
        test_hardfault_invalid_memory_access();
 8001b36:	f7ff fd63 	bl	8001600 <test_hardfault_invalid_memory_access>
 8001b3a:	e088      	b.n	8001c4e <cmd_fault_test+0x1d2>
    }
    else if (strcmp(argv[1], "instr") == 0) {
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	3304      	adds	r3, #4
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4953      	ldr	r1, [pc, #332]	@ (8001c90 <cmd_fault_test+0x214>)
 8001b44:	4618      	mov	r0, r3
 8001b46:	f7fe fbe3 	bl	8000310 <strcmp>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d107      	bne.n	8001b60 <cmd_fault_test+0xe4>
        SHELL_LOG_SYS_WARNING("About to execute undefined instruction test, system will enter exception handler!");
 8001b50:	4a50      	ldr	r2, [pc, #320]	@ (8001c94 <cmd_fault_test+0x218>)
 8001b52:	2102      	movs	r1, #2
 8001b54:	2000      	movs	r0, #0
 8001b56:	f01c fb73 	bl	801e240 <shellLogPrint>
        test_hardfault_undefined_instruction();
 8001b5a:	f7ff fe5d 	bl	8001818 <test_hardfault_undefined_instruction>
 8001b5e:	e076      	b.n	8001c4e <cmd_fault_test+0x1d2>
    }
    else if (strcmp(argv[1], "stack") == 0) {
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	3304      	adds	r3, #4
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	494c      	ldr	r1, [pc, #304]	@ (8001c98 <cmd_fault_test+0x21c>)
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f7fe fbd1 	bl	8000310 <strcmp>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d107      	bne.n	8001b84 <cmd_fault_test+0x108>
        SHELL_LOG_SYS_WARNING("About to execute stack overflow test, system will enter exception handler!");
 8001b74:	4a49      	ldr	r2, [pc, #292]	@ (8001c9c <cmd_fault_test+0x220>)
 8001b76:	2102      	movs	r1, #2
 8001b78:	2000      	movs	r0, #0
 8001b7a:	f01c fb61 	bl	801e240 <shellLogPrint>
        test_hardfault_stack_overflow();
 8001b7e:	f7ff ff55 	bl	8001a2c <test_hardfault_stack_overflow>
 8001b82:	e064      	b.n	8001c4e <cmd_fault_test+0x1d2>
    }
    else if (strcmp(argv[1], "stackfast") == 0) {
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	3304      	adds	r3, #4
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4945      	ldr	r1, [pc, #276]	@ (8001ca0 <cmd_fault_test+0x224>)
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f7fe fbbf 	bl	8000310 <strcmp>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d107      	bne.n	8001ba8 <cmd_fault_test+0x12c>
        SHELL_LOG_SYS_WARNING("About to execute fast stack overflow test, system will enter exception handler!");
 8001b98:	4a42      	ldr	r2, [pc, #264]	@ (8001ca4 <cmd_fault_test+0x228>)
 8001b9a:	2102      	movs	r1, #2
 8001b9c:	2000      	movs	r0, #0
 8001b9e:	f01c fb4f 	bl	801e240 <shellLogPrint>
        test_hardfault_stack_direct();
 8001ba2:	f7ff fe99 	bl	80018d8 <test_hardfault_stack_direct>
 8001ba6:	e052      	b.n	8001c4e <cmd_fault_test+0x1d2>
    }
    else if (strcmp(argv[1], "divide") == 0) {
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	3304      	adds	r3, #4
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	493e      	ldr	r1, [pc, #248]	@ (8001ca8 <cmd_fault_test+0x22c>)
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f7fe fbad 	bl	8000310 <strcmp>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d107      	bne.n	8001bcc <cmd_fault_test+0x150>
        SHELL_LOG_SYS_WARNING("About to execute divide by zero test, system may enter exception handler!");
 8001bbc:	4a3b      	ldr	r2, [pc, #236]	@ (8001cac <cmd_fault_test+0x230>)
 8001bbe:	2102      	movs	r1, #2
 8001bc0:	2000      	movs	r0, #0
 8001bc2:	f01c fb3d 	bl	801e240 <shellLogPrint>
        test_hardfault_divide_by_zero();
 8001bc6:	f7ff fc4d 	bl	8001464 <test_hardfault_divide_by_zero>
 8001bca:	e040      	b.n	8001c4e <cmd_fault_test+0x1d2>
    }
    else if (strcmp(argv[1], "unalign") == 0) {
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	3304      	adds	r3, #4
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4937      	ldr	r1, [pc, #220]	@ (8001cb0 <cmd_fault_test+0x234>)
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f7fe fb9b 	bl	8000310 <strcmp>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d107      	bne.n	8001bf0 <cmd_fault_test+0x174>
        SHELL_LOG_SYS_WARNING("About to execute unaligned access test, system will enter exception handler!");
 8001be0:	4a34      	ldr	r2, [pc, #208]	@ (8001cb4 <cmd_fault_test+0x238>)
 8001be2:	2102      	movs	r1, #2
 8001be4:	2000      	movs	r0, #0
 8001be6:	f01c fb2b 	bl	801e240 <shellLogPrint>
        test_hardfault_unaligned_access();
 8001bea:	f7ff fdc7 	bl	800177c <test_hardfault_unaligned_access>
 8001bee:	e02e      	b.n	8001c4e <cmd_fault_test+0x1d2>
    }
    else if (strcmp(argv[1], "priv") == 0) {
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	3304      	adds	r3, #4
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4930      	ldr	r1, [pc, #192]	@ (8001cb8 <cmd_fault_test+0x23c>)
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f7fe fb89 	bl	8000310 <strcmp>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d107      	bne.n	8001c14 <cmd_fault_test+0x198>
        SHELL_LOG_SYS_WARNING("About to execute privileged instruction test, system will enter exception handler!");
 8001c04:	4a2d      	ldr	r2, [pc, #180]	@ (8001cbc <cmd_fault_test+0x240>)
 8001c06:	2102      	movs	r1, #2
 8001c08:	2000      	movs	r0, #0
 8001c0a:	f01c fb19 	bl	801e240 <shellLogPrint>
        test_hardfault_privileged_instruction();
 8001c0e:	f7ff fd31 	bl	8001674 <test_hardfault_privileged_instruction>
 8001c12:	e01c      	b.n	8001c4e <cmd_fault_test+0x1d2>
    }
    else if (strcmp(argv[1], "bus") == 0) {
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	3304      	adds	r3, #4
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4929      	ldr	r1, [pc, #164]	@ (8001cc0 <cmd_fault_test+0x244>)
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f7fe fb77 	bl	8000310 <strcmp>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d107      	bne.n	8001c38 <cmd_fault_test+0x1bc>
        SHELL_LOG_SYS_WARNING("About to execute bus error test, system will enter exception handler!");
 8001c28:	4a26      	ldr	r2, [pc, #152]	@ (8001cc4 <cmd_fault_test+0x248>)
 8001c2a:	2102      	movs	r1, #2
 8001c2c:	2000      	movs	r0, #0
 8001c2e:	f01c fb07 	bl	801e240 <shellLogPrint>
        test_hardfault_bus_error();
 8001c32:	f7ff fd69 	bl	8001708 <test_hardfault_bus_error>
 8001c36:	e00a      	b.n	8001c4e <cmd_fault_test+0x1d2>
    }
    else {
        SHELL_LOG_SYS_ERROR("Unknown test type: %s", argv[1]);
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	3304      	adds	r3, #4
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a22      	ldr	r2, [pc, #136]	@ (8001cc8 <cmd_fault_test+0x24c>)
 8001c40:	2103      	movs	r1, #3
 8001c42:	2000      	movs	r0, #0
 8001c44:	f01c fafc 	bl	801e240 <shellLogPrint>
        return -1;
 8001c48:	f04f 33ff 	mov.w	r3, #4294967295
 8001c4c:	e000      	b.n	8001c50 <cmd_fault_test+0x1d4>
    }
    
    return 0;
 8001c4e:	2300      	movs	r3, #0
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	3708      	adds	r7, #8
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	08020db0 	.word	0x08020db0
 8001c5c:	08020dcc 	.word	0x08020dcc
 8001c60:	08020dfc 	.word	0x08020dfc
 8001c64:	08020e30 	.word	0x08020e30
 8001c68:	08020e64 	.word	0x08020e64
 8001c6c:	08020e9c 	.word	0x08020e9c
 8001c70:	08020ed0 	.word	0x08020ed0
 8001c74:	08020efc 	.word	0x08020efc
 8001c78:	08020f2c 	.word	0x08020f2c
 8001c7c:	08020f60 	.word	0x08020f60
 8001c80:	08020f88 	.word	0x08020f88
 8001c84:	08020f90 	.word	0x08020f90
 8001c88:	08020fe0 	.word	0x08020fe0
 8001c8c:	08020fe8 	.word	0x08020fe8
 8001c90:	0802103c 	.word	0x0802103c
 8001c94:	08021044 	.word	0x08021044
 8001c98:	08021098 	.word	0x08021098
 8001c9c:	080210a0 	.word	0x080210a0
 8001ca0:	080210ec 	.word	0x080210ec
 8001ca4:	080210f8 	.word	0x080210f8
 8001ca8:	08021148 	.word	0x08021148
 8001cac:	08021150 	.word	0x08021150
 8001cb0:	0802119c 	.word	0x0802119c
 8001cb4:	080211a4 	.word	0x080211a4
 8001cb8:	080211f4 	.word	0x080211f4
 8001cbc:	080211fc 	.word	0x080211fc
 8001cc0:	08021250 	.word	0x08021250
 8001cc4:	08021254 	.word	0x08021254
 8001cc8:	0802129c 	.word	0x0802129c

08001ccc <cmd_test_null>:
SHELL_EXPORT_CMD(SHELL_CMD_PERMISSION(0)|SHELL_CMD_TYPE(SHELL_TYPE_CMD_MAIN), 
                 fault_test, cmd_fault_test, fault exception test\r\nfault_test [null|memory|instr|stack|stackfast|divide|unalign|priv|bus]);

// Individual exception test commands
int cmd_test_null(int argc, char *argv[])
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b082      	sub	sp, #8
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
 8001cd4:	6039      	str	r1, [r7, #0]
    SHELL_LOG_SYS_WARNING("Executing null pointer access test - system will trigger MemManage Fault!");
 8001cd6:	4a06      	ldr	r2, [pc, #24]	@ (8001cf0 <cmd_test_null+0x24>)
 8001cd8:	2102      	movs	r1, #2
 8001cda:	2000      	movs	r0, #0
 8001cdc:	f01c fab0 	bl	801e240 <shellLogPrint>
    test_hardfault_null_pointer();
 8001ce0:	f7ff fc1c 	bl	800151c <test_hardfault_null_pointer>
    return 0;
 8001ce4:	2300      	movs	r3, #0
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	3708      	adds	r7, #8
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	080212b4 	.word	0x080212b4

08001cf4 <cmd_test_memory>:
SHELL_EXPORT_CMD(SHELL_CMD_PERMISSION(0)|SHELL_CMD_TYPE(SHELL_TYPE_CMD_MAIN), 
                 test_null, cmd_test_null, test null pointer access fault);

int cmd_test_memory(int argc, char *argv[])
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b082      	sub	sp, #8
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
 8001cfc:	6039      	str	r1, [r7, #0]
    SHELL_LOG_SYS_WARNING("Executing invalid memory access test - system will trigger HardFault!");
 8001cfe:	4a06      	ldr	r2, [pc, #24]	@ (8001d18 <cmd_test_memory+0x24>)
 8001d00:	2102      	movs	r1, #2
 8001d02:	2000      	movs	r0, #0
 8001d04:	f01c fa9c 	bl	801e240 <shellLogPrint>
    test_hardfault_invalid_memory_access();
 8001d08:	f7ff fc7a 	bl	8001600 <test_hardfault_invalid_memory_access>
    return 0;
 8001d0c:	2300      	movs	r3, #0
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	3708      	adds	r7, #8
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	08021300 	.word	0x08021300

08001d1c <cmd_test_instr>:
SHELL_EXPORT_CMD(SHELL_CMD_PERMISSION(0)|SHELL_CMD_TYPE(SHELL_TYPE_CMD_MAIN), 
                 test_memory, cmd_test_memory, test invalid memory access fault);

int cmd_test_instr(int argc, char *argv[])
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b082      	sub	sp, #8
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
 8001d24:	6039      	str	r1, [r7, #0]
    SHELL_LOG_SYS_WARNING("Executing undefined instruction test - system will trigger UsageFault!");
 8001d26:	4a06      	ldr	r2, [pc, #24]	@ (8001d40 <cmd_test_instr+0x24>)
 8001d28:	2102      	movs	r1, #2
 8001d2a:	2000      	movs	r0, #0
 8001d2c:	f01c fa88 	bl	801e240 <shellLogPrint>
    test_hardfault_undefined_instruction();
 8001d30:	f7ff fd72 	bl	8001818 <test_hardfault_undefined_instruction>
    return 0;
 8001d34:	2300      	movs	r3, #0
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	3708      	adds	r7, #8
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	08021348 	.word	0x08021348

08001d44 <cmd_test_stack>:
SHELL_EXPORT_CMD(SHELL_CMD_PERMISSION(0)|SHELL_CMD_TYPE(SHELL_TYPE_CMD_MAIN), 
                 test_instr, cmd_test_instr, test undefined instruction fault);

int cmd_test_stack(int argc, char *argv[])
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b082      	sub	sp, #8
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
 8001d4c:	6039      	str	r1, [r7, #0]
    SHELL_LOG_SYS_WARNING("Executing stack overflow test - system will trigger MemManage Fault!");
 8001d4e:	4a06      	ldr	r2, [pc, #24]	@ (8001d68 <cmd_test_stack+0x24>)
 8001d50:	2102      	movs	r1, #2
 8001d52:	2000      	movs	r0, #0
 8001d54:	f01c fa74 	bl	801e240 <shellLogPrint>
    test_hardfault_stack_overflow();
 8001d58:	f7ff fe68 	bl	8001a2c <test_hardfault_stack_overflow>
    return 0;
 8001d5c:	2300      	movs	r3, #0
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3708      	adds	r7, #8
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	08021390 	.word	0x08021390

08001d6c <configureTimerForRunTimeStats>:
void vApplicationDaemonTaskStartupHook(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	af00      	add	r7, sp, #0

}
 8001d70:	bf00      	nop
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr

08001d7a <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 8001d7a:	b480      	push	{r7}
 8001d7c:	af00      	add	r7, sp, #0
return 0;
 8001d7e:	2300      	movs	r3, #0
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr

08001d8a <vApplicationIdleHook>:
/* USER CODE END 1 */

/* USER CODE BEGIN 2 */
void vApplicationIdleHook( void )
{
 8001d8a:	b480      	push	{r7}
 8001d8c:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8001d8e:	bf00      	nop
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr

08001d98 <vApplicationTickHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 3 */
void vApplicationTickHook( void )
{
 8001d98:	b480      	push	{r7}
 8001d9a:	af00      	add	r7, sp, #0
   /* This function will be called by each tick interrupt if
   configUSE_TICK_HOOK is set to 1 in FreeRTOSConfig.h. User code can be
   added here, but the tick hook is called from an interrupt context, so
   code must not attempt to block, and only the interrupt safe FreeRTOS API
   functions can be used (those that end in FromISR()). */
}
 8001d9c:	bf00      	nop
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr

08001da6 <vApplicationStackOverflowHook>:
/* USER CODE END 3 */

/* USER CODE BEGIN 4 */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8001da6:	b480      	push	{r7}
 8001da8:	b083      	sub	sp, #12
 8001daa:	af00      	add	r7, sp, #0
 8001dac:	6078      	str	r0, [r7, #4]
 8001dae:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8001db0:	bf00      	nop
 8001db2:	370c      	adds	r7, #12
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr

08001dbc <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
void vApplicationMallocFailedHook(void)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8001dc0:	bf00      	nop
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr

08001dca <vApplicationDaemonTaskStartupHook>:
/* USER CODE END 5 */

/* USER CODE BEGIN DAEMON_TASK_STARTUP_HOOK */
void vApplicationDaemonTaskStartupHook(void)
{
 8001dca:	b480      	push	{r7}
 8001dcc:	af00      	add	r7, sp, #0
}
 8001dce:	bf00      	nop
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr

08001dd8 <PreSleepProcessing>:
/* USER CODE END DAEMON_TASK_STARTUP_HOOK */

/* USER CODE BEGIN PREPOSTSLEEP */
__weak void PreSleepProcessing(uint32_t ulExpectedIdleTime)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b083      	sub	sp, #12
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
/* place for user code */
}
 8001de0:	bf00      	nop
 8001de2:	370c      	adds	r7, #12
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr

08001dec <PostSleepProcessing>:

__weak void PostSleepProcessing(uint32_t ulExpectedIdleTime)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b083      	sub	sp, #12
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
/* place for user code */
}
 8001df4:	bf00      	nop
 8001df6:	370c      	adds	r7, #12
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr

08001e00 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001e00:	b580      	push	{r7, lr}
 8001e02:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001e04:	4a0c      	ldr	r2, [pc, #48]	@ (8001e38 <MX_FREERTOS_Init+0x38>)
 8001e06:	2100      	movs	r1, #0
 8001e08:	480c      	ldr	r0, [pc, #48]	@ (8001e3c <MX_FREERTOS_Init+0x3c>)
 8001e0a:	f014 fbf3 	bl	80165f4 <osThreadNew>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	4a0b      	ldr	r2, [pc, #44]	@ (8001e40 <MX_FREERTOS_Init+0x40>)
 8001e12:	6013      	str	r3, [r2, #0]

  /* creation of mic2isp */
  mic2ispHandle = osThreadNew(mic2isp_task, NULL, &mic2isp_attributes);
 8001e14:	4a0b      	ldr	r2, [pc, #44]	@ (8001e44 <MX_FREERTOS_Init+0x44>)
 8001e16:	2100      	movs	r1, #0
 8001e18:	480b      	ldr	r0, [pc, #44]	@ (8001e48 <MX_FREERTOS_Init+0x48>)
 8001e1a:	f014 fbeb 	bl	80165f4 <osThreadNew>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	4a0a      	ldr	r2, [pc, #40]	@ (8001e4c <MX_FREERTOS_Init+0x4c>)
 8001e22:	6013      	str	r3, [r2, #0]

  /* creation of watchdogTask */
  watchdogTaskHandle = osThreadNew(watchdog_task, NULL, &watchdogTask_attributes);
 8001e24:	4a0a      	ldr	r2, [pc, #40]	@ (8001e50 <MX_FREERTOS_Init+0x50>)
 8001e26:	2100      	movs	r1, #0
 8001e28:	480a      	ldr	r0, [pc, #40]	@ (8001e54 <MX_FREERTOS_Init+0x54>)
 8001e2a:	f014 fbe3 	bl	80165f4 <osThreadNew>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	4a09      	ldr	r2, [pc, #36]	@ (8001e58 <MX_FREERTOS_Init+0x58>)
 8001e32:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001e34:	bf00      	nop
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	08022ea8 	.word	0x08022ea8
 8001e3c:	08001e5d 	.word	0x08001e5d
 8001e40:	24000158 	.word	0x24000158
 8001e44:	08022ecc 	.word	0x08022ecc
 8001e48:	08001e85 	.word	0x08001e85
 8001e4c:	2400015c 	.word	0x2400015c
 8001e50:	08022ef0 	.word	0x08022ef0
 8001e54:	08001ea5 	.word	0x08001ea5
 8001e58:	24000160 	.word	0x24000160

08001e5c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b082      	sub	sp, #8
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  
  // 添加调试输出
  SHELL_LOG_SYS_INFO("DefaultTask started");
 8001e64:	4a06      	ldr	r2, [pc, #24]	@ (8001e80 <StartDefaultTask+0x24>)
 8001e66:	2101      	movs	r1, #1
 8001e68:	2000      	movs	r0, #0
 8001e6a:	f01c f9e9 	bl	801e240 <shellLogPrint>
  
  // 延迟一段时间确保系统完全稳定
  osDelay(2000);
 8001e6e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001e72:	f014 fc51 	bl	8016718 <osDelay>
  
  /* Infinite loop */
  for(;;)
  {
    //SHELL_LOG_SYS_DEBUG("DefaultTask heartbeat");
    osDelay(5000);  // 5秒打印一次心跳
 8001e76:	f241 3088 	movw	r0, #5000	@ 0x1388
 8001e7a:	f014 fc4d 	bl	8016718 <osDelay>
 8001e7e:	e7fa      	b.n	8001e76 <StartDefaultTask+0x1a>
 8001e80:	080213fc 	.word	0x080213fc

08001e84 <mic2isp_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_mic2isp_task */
void mic2isp_task(void *argument)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b082      	sub	sp, #8
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN mic2isp_task */
  
  SHELL_LOG_SYS_INFO("Mic2ISP task started");
 8001e8c:	4a04      	ldr	r2, [pc, #16]	@ (8001ea0 <mic2isp_task+0x1c>)
 8001e8e:	2101      	movs	r1, #1
 8001e90:	2000      	movs	r0, #0
 8001e92:	f01c f9d5 	bl	801e240 <shellLogPrint>
  
  /* Infinite loop */
  for(;;)
  {
    //SHELL_LOG_SYS_DEBUG("Mic2ISP task heartbeat");
    osDelay(6000);  // 6秒打印一次心跳
 8001e96:	f241 7070 	movw	r0, #6000	@ 0x1770
 8001e9a:	f014 fc3d 	bl	8016718 <osDelay>
 8001e9e:	e7fa      	b.n	8001e96 <mic2isp_task+0x12>
 8001ea0:	08021410 	.word	0x08021410

08001ea4 <watchdog_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_watchdog_task */
void watchdog_task(void *argument)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b082      	sub	sp, #8
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN watchdog_task */
  SHELL_LOG_SYS_INFO("Watchdog task started");
 8001eac:	4a08      	ldr	r2, [pc, #32]	@ (8001ed0 <watchdog_task+0x2c>)
 8001eae:	2101      	movs	r1, #1
 8001eb0:	2000      	movs	r0, #0
 8001eb2:	f01c f9c5 	bl	801e240 <shellLogPrint>
  
  // 给系统一些时间完成初始化
  osDelay(5000);
 8001eb6:	f241 3088 	movw	r0, #5000	@ 0x1388
 8001eba:	f014 fc2d 	bl	8016718 <osDelay>
  /* Infinite loop */
  for(;;)
  {
    // 使用安全的喂看门狗函数 - 防止系统重启
    // 看门狗超时时间约32.8秒，我们每15秒喂一次狗，留有充足的安全裕量
    IWDG_SafeRefresh();
 8001ebe:	f000 f8ab 	bl	8002018 <IWDG_SafeRefresh>
    
    //SHELL_LOG_SYS_DEBUG("Watchdog fed - system alive");
    
    // 每15秒喂一次看门狗（超时时间约32.8秒，安全系数约2.2）
    osDelay(15000);
 8001ec2:	f643 2098 	movw	r0, #15000	@ 0x3a98
 8001ec6:	f014 fc27 	bl	8016718 <osDelay>
    IWDG_SafeRefresh();
 8001eca:	bf00      	nop
 8001ecc:	e7f7      	b.n	8001ebe <watchdog_task+0x1a>
 8001ece:	bf00      	nop
 8001ed0:	08021428 	.word	0x08021428

08001ed4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b089      	sub	sp, #36	@ 0x24
 8001ed8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001eda:	4b3f      	ldr	r3, [pc, #252]	@ (8001fd8 <MX_GPIO_Init+0x104>)
 8001edc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ee0:	4a3d      	ldr	r2, [pc, #244]	@ (8001fd8 <MX_GPIO_Init+0x104>)
 8001ee2:	f043 0310 	orr.w	r3, r3, #16
 8001ee6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001eea:	4b3b      	ldr	r3, [pc, #236]	@ (8001fd8 <MX_GPIO_Init+0x104>)
 8001eec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ef0:	f003 0310 	and.w	r3, r3, #16
 8001ef4:	61fb      	str	r3, [r7, #28]
 8001ef6:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001ef8:	4b37      	ldr	r3, [pc, #220]	@ (8001fd8 <MX_GPIO_Init+0x104>)
 8001efa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001efe:	4a36      	ldr	r2, [pc, #216]	@ (8001fd8 <MX_GPIO_Init+0x104>)
 8001f00:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001f04:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001f08:	4b33      	ldr	r3, [pc, #204]	@ (8001fd8 <MX_GPIO_Init+0x104>)
 8001f0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f12:	61bb      	str	r3, [r7, #24]
 8001f14:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f16:	4b30      	ldr	r3, [pc, #192]	@ (8001fd8 <MX_GPIO_Init+0x104>)
 8001f18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f1c:	4a2e      	ldr	r2, [pc, #184]	@ (8001fd8 <MX_GPIO_Init+0x104>)
 8001f1e:	f043 0308 	orr.w	r3, r3, #8
 8001f22:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001f26:	4b2c      	ldr	r3, [pc, #176]	@ (8001fd8 <MX_GPIO_Init+0x104>)
 8001f28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f2c:	f003 0308 	and.w	r3, r3, #8
 8001f30:	617b      	str	r3, [r7, #20]
 8001f32:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f34:	4b28      	ldr	r3, [pc, #160]	@ (8001fd8 <MX_GPIO_Init+0x104>)
 8001f36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f3a:	4a27      	ldr	r2, [pc, #156]	@ (8001fd8 <MX_GPIO_Init+0x104>)
 8001f3c:	f043 0304 	orr.w	r3, r3, #4
 8001f40:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001f44:	4b24      	ldr	r3, [pc, #144]	@ (8001fd8 <MX_GPIO_Init+0x104>)
 8001f46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f4a:	f003 0304 	and.w	r3, r3, #4
 8001f4e:	613b      	str	r3, [r7, #16]
 8001f50:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f52:	4b21      	ldr	r3, [pc, #132]	@ (8001fd8 <MX_GPIO_Init+0x104>)
 8001f54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f58:	4a1f      	ldr	r2, [pc, #124]	@ (8001fd8 <MX_GPIO_Init+0x104>)
 8001f5a:	f043 0301 	orr.w	r3, r3, #1
 8001f5e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001f62:	4b1d      	ldr	r3, [pc, #116]	@ (8001fd8 <MX_GPIO_Init+0x104>)
 8001f64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f68:	f003 0301 	and.w	r3, r3, #1
 8001f6c:	60fb      	str	r3, [r7, #12]
 8001f6e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001f70:	4b19      	ldr	r3, [pc, #100]	@ (8001fd8 <MX_GPIO_Init+0x104>)
 8001f72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f76:	4a18      	ldr	r2, [pc, #96]	@ (8001fd8 <MX_GPIO_Init+0x104>)
 8001f78:	f043 0320 	orr.w	r3, r3, #32
 8001f7c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001f80:	4b15      	ldr	r3, [pc, #84]	@ (8001fd8 <MX_GPIO_Init+0x104>)
 8001f82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f86:	f003 0320 	and.w	r3, r3, #32
 8001f8a:	60bb      	str	r3, [r7, #8]
 8001f8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f8e:	4b12      	ldr	r3, [pc, #72]	@ (8001fd8 <MX_GPIO_Init+0x104>)
 8001f90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f94:	4a10      	ldr	r2, [pc, #64]	@ (8001fd8 <MX_GPIO_Init+0x104>)
 8001f96:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001f9a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001f9e:	4b0e      	ldr	r3, [pc, #56]	@ (8001fd8 <MX_GPIO_Init+0x104>)
 8001fa0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001fa4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fa8:	607b      	str	r3, [r7, #4]
 8001faa:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fac:	4b0a      	ldr	r3, [pc, #40]	@ (8001fd8 <MX_GPIO_Init+0x104>)
 8001fae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001fb2:	4a09      	ldr	r2, [pc, #36]	@ (8001fd8 <MX_GPIO_Init+0x104>)
 8001fb4:	f043 0302 	orr.w	r3, r3, #2
 8001fb8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001fbc:	4b06      	ldr	r3, [pc, #24]	@ (8001fd8 <MX_GPIO_Init+0x104>)
 8001fbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001fc2:	f003 0302 	and.w	r3, r3, #2
 8001fc6:	603b      	str	r3, [r7, #0]
 8001fc8:	683b      	ldr	r3, [r7, #0]

}
 8001fca:	bf00      	nop
 8001fcc:	3724      	adds	r7, #36	@ 0x24
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr
 8001fd6:	bf00      	nop
 8001fd8:	58024400 	.word	0x58024400

08001fdc <MX_IWDG1_Init>:

IWDG_HandleTypeDef hiwdg1;

/* IWDG1 init function */
void MX_IWDG1_Init(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG1_Init 0 */

  /* USER CODE BEGIN IWDG1_Init 1 */

  /* USER CODE END IWDG1_Init 1 */
  hiwdg1.Instance = IWDG1;
 8001fe0:	4b0b      	ldr	r3, [pc, #44]	@ (8002010 <MX_IWDG1_Init+0x34>)
 8001fe2:	4a0c      	ldr	r2, [pc, #48]	@ (8002014 <MX_IWDG1_Init+0x38>)
 8001fe4:	601a      	str	r2, [r3, #0]
  hiwdg1.Init.Prescaler = IWDG_PRESCALER_256;  // 更大的分频器，延长超时时间
 8001fe6:	4b0a      	ldr	r3, [pc, #40]	@ (8002010 <MX_IWDG1_Init+0x34>)
 8001fe8:	2206      	movs	r2, #6
 8001fea:	605a      	str	r2, [r3, #4]
  hiwdg1.Init.Window = 4095;
 8001fec:	4b08      	ldr	r3, [pc, #32]	@ (8002010 <MX_IWDG1_Init+0x34>)
 8001fee:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8001ff2:	60da      	str	r2, [r3, #12]
  hiwdg1.Init.Reload = 4095;  // 超时时间 = (256 * 4095) / 32000 ≈ 32.8秒
 8001ff4:	4b06      	ldr	r3, [pc, #24]	@ (8002010 <MX_IWDG1_Init+0x34>)
 8001ff6:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8001ffa:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg1) != HAL_OK)
 8001ffc:	4804      	ldr	r0, [pc, #16]	@ (8002010 <MX_IWDG1_Init+0x34>)
 8001ffe:	f004 fd0b 	bl	8006a18 <HAL_IWDG_Init>
 8002002:	4603      	mov	r3, r0
 8002004:	2b00      	cmp	r3, #0
 8002006:	d001      	beq.n	800200c <MX_IWDG1_Init+0x30>
  {
    Error_Handler();
 8002008:	f000 f9c8 	bl	800239c <Error_Handler>
  }
  /* USER CODE BEGIN IWDG1_Init 2 */

  /* USER CODE END IWDG1_Init 2 */

}
 800200c:	bf00      	nop
 800200e:	bd80      	pop	{r7, pc}
 8002010:	24000164 	.word	0x24000164
 8002014:	58004800 	.word	0x58004800

08002018 <IWDG_SafeRefresh>:
/**
 * @brief 安全的看门狗喂狗函数
 * @note 添加错误检查和状态验证
 */
void IWDG_SafeRefresh(void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	af00      	add	r7, sp, #0
  // 确保看门狗已经初始化
  if (hiwdg1.Instance == IWDG1) 
 800201c:	4b04      	ldr	r3, [pc, #16]	@ (8002030 <IWDG_SafeRefresh+0x18>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a04      	ldr	r2, [pc, #16]	@ (8002034 <IWDG_SafeRefresh+0x1c>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d102      	bne.n	800202c <IWDG_SafeRefresh+0x14>
  {
    HAL_IWDG_Refresh(&hiwdg1);
 8002026:	4802      	ldr	r0, [pc, #8]	@ (8002030 <IWDG_SafeRefresh+0x18>)
 8002028:	f004 fd86 	bl	8006b38 <HAL_IWDG_Refresh>
  }
}
 800202c:	bf00      	nop
 800202e:	bd80      	pop	{r7, pc}
 8002030:	24000164 	.word	0x24000164
 8002034:	58004800 	.word	0x58004800

08002038 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b084      	sub	sp, #16
 800203c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 800203e:	f000 f901 	bl	8002244 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8002042:	4b46      	ldr	r3, [pc, #280]	@ (800215c <main+0x124>)
 8002044:	695b      	ldr	r3, [r3, #20]
 8002046:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800204a:	2b00      	cmp	r3, #0
 800204c:	d11b      	bne.n	8002086 <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800204e:	f3bf 8f4f 	dsb	sy
}
 8002052:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002054:	f3bf 8f6f 	isb	sy
}
 8002058:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800205a:	4b40      	ldr	r3, [pc, #256]	@ (800215c <main+0x124>)
 800205c:	2200      	movs	r2, #0
 800205e:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8002062:	f3bf 8f4f 	dsb	sy
}
 8002066:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002068:	f3bf 8f6f 	isb	sy
}
 800206c:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800206e:	4b3b      	ldr	r3, [pc, #236]	@ (800215c <main+0x124>)
 8002070:	695b      	ldr	r3, [r3, #20]
 8002072:	4a3a      	ldr	r2, [pc, #232]	@ (800215c <main+0x124>)
 8002074:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002078:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800207a:	f3bf 8f4f 	dsb	sy
}
 800207e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002080:	f3bf 8f6f 	isb	sy
}
 8002084:	e000      	b.n	8002088 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8002086:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8002088:	4b34      	ldr	r3, [pc, #208]	@ (800215c <main+0x124>)
 800208a:	695b      	ldr	r3, [r3, #20]
 800208c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002090:	2b00      	cmp	r3, #0
 8002092:	d138      	bne.n	8002106 <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8002094:	4b31      	ldr	r3, [pc, #196]	@ (800215c <main+0x124>)
 8002096:	2200      	movs	r2, #0
 8002098:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800209c:	f3bf 8f4f 	dsb	sy
}
 80020a0:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80020a2:	4b2e      	ldr	r3, [pc, #184]	@ (800215c <main+0x124>)
 80020a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80020a8:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	0b5b      	lsrs	r3, r3, #13
 80020ae:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80020b2:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	08db      	lsrs	r3, r3, #3
 80020b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80020bc:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80020be:	68bb      	ldr	r3, [r7, #8]
 80020c0:	015a      	lsls	r2, r3, #5
 80020c2:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 80020c6:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80020c8:	687a      	ldr	r2, [r7, #4]
 80020ca:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80020cc:	4923      	ldr	r1, [pc, #140]	@ (800215c <main+0x124>)
 80020ce:	4313      	orrs	r3, r2
 80020d0:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	1e5a      	subs	r2, r3, #1
 80020d8:	607a      	str	r2, [r7, #4]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d1ef      	bne.n	80020be <main+0x86>
    } while(sets-- != 0U);
 80020de:	68bb      	ldr	r3, [r7, #8]
 80020e0:	1e5a      	subs	r2, r3, #1
 80020e2:	60ba      	str	r2, [r7, #8]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d1e5      	bne.n	80020b4 <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 80020e8:	f3bf 8f4f 	dsb	sy
}
 80020ec:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80020ee:	4b1b      	ldr	r3, [pc, #108]	@ (800215c <main+0x124>)
 80020f0:	695b      	ldr	r3, [r3, #20]
 80020f2:	4a1a      	ldr	r2, [pc, #104]	@ (800215c <main+0x124>)
 80020f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020f8:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80020fa:	f3bf 8f4f 	dsb	sy
}
 80020fe:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002100:	f3bf 8f6f 	isb	sy
}
 8002104:	e000      	b.n	8002108 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8002106:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002108:	f001 faa8 	bl	800365c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800210c:	f000 f82a 	bl	8002164 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002110:	f7ff fee0 	bl	8001ed4 <MX_GPIO_Init>
  MX_BDMA_Init();
 8002114:	f7fe fafa 	bl	800070c <MX_BDMA_Init>
  MX_SAI4_Init();
 8002118:	f000 fc10 	bl	800293c <MX_SAI4_Init>
  MX_SDMMC1_SD_Init();
 800211c:	f000 fcee 	bl	8002afc <MX_SDMMC1_SD_Init>
  MX_USART3_UART_Init();
 8002120:	f001 f92a 	bl	8003378 <MX_USART3_UART_Init>
  MX_FATFS_Init();
 8002124:	f012 fea2 	bl	8014e6c <MX_FATFS_Init>
  MX_OCTOSPI1_Init();
 8002128:	f000 f958 	bl	80023dc <MX_OCTOSPI1_Init>
  MX_OCTOSPI2_Init();
 800212c:	f000 f9bc 	bl	80024a8 <MX_OCTOSPI2_Init>
  MX_IWDG1_Init();
 8002130:	f7ff ff54 	bl	8001fdc <MX_IWDG1_Init>
  
  // 打印系统信息 - 已禁用
  // debug_print_system_info();
  
  // 初始化日志系统
  shellLogInit();
 8002134:	f01b ffaa 	bl	801e08c <shellLogInit>
  
  // 初始化Shell
  shell_init();
 8002138:	f01c fae8 	bl	801e70c <shell_init>
  
  // 输出Shell初始化日志
  shell_init_log_output();
 800213c:	f01c fb3e 	bl	801e7bc <shell_init_log_output>
  
  // 测试日志系统
  SHELL_LOG_SYS_INFO("System initialization completed, starting FreeRTOS scheduler");
 8002140:	4a07      	ldr	r2, [pc, #28]	@ (8002160 <main+0x128>)
 8002142:	2101      	movs	r1, #1
 8002144:	2000      	movs	r0, #0
 8002146:	f01c f87b 	bl	801e240 <shellLogPrint>
  
  
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in cmsis_os2.c) */
 800214a:	f014 fa09 	bl	8016560 <osKernelInitialize>
  MX_FREERTOS_Init();
 800214e:	f7ff fe57 	bl	8001e00 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8002152:	f014 fa29 	bl	80165a8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002156:	bf00      	nop
 8002158:	e7fd      	b.n	8002156 <main+0x11e>
 800215a:	bf00      	nop
 800215c:	e000ed00 	.word	0xe000ed00
 8002160:	08021440 	.word	0x08021440

08002164 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b09c      	sub	sp, #112	@ 0x70
 8002168:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800216a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800216e:	224c      	movs	r2, #76	@ 0x4c
 8002170:	2100      	movs	r1, #0
 8002172:	4618      	mov	r0, r3
 8002174:	f01c ffcc 	bl	801f110 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002178:	1d3b      	adds	r3, r7, #4
 800217a:	2220      	movs	r2, #32
 800217c:	2100      	movs	r1, #0
 800217e:	4618      	mov	r0, r3
 8002180:	f01c ffc6 	bl	801f110 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8002184:	2004      	movs	r0, #4
 8002186:	f006 fded 	bl	8008d64 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800218a:	2300      	movs	r3, #0
 800218c:	603b      	str	r3, [r7, #0]
 800218e:	4b2c      	ldr	r3, [pc, #176]	@ (8002240 <SystemClock_Config+0xdc>)
 8002190:	699b      	ldr	r3, [r3, #24]
 8002192:	4a2b      	ldr	r2, [pc, #172]	@ (8002240 <SystemClock_Config+0xdc>)
 8002194:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8002198:	6193      	str	r3, [r2, #24]
 800219a:	4b29      	ldr	r3, [pc, #164]	@ (8002240 <SystemClock_Config+0xdc>)
 800219c:	699b      	ldr	r3, [r3, #24]
 800219e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80021a2:	603b      	str	r3, [r7, #0]
 80021a4:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80021a6:	bf00      	nop
 80021a8:	4b25      	ldr	r3, [pc, #148]	@ (8002240 <SystemClock_Config+0xdc>)
 80021aa:	699b      	ldr	r3, [r3, #24]
 80021ac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80021b0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80021b4:	d1f8      	bne.n	80021a8 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80021b6:	2309      	movs	r3, #9
 80021b8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80021ba:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80021be:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80021c0:	2301      	movs	r3, #1
 80021c2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80021c4:	2302      	movs	r3, #2
 80021c6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80021c8:	2302      	movs	r3, #2
 80021ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 80021cc:	2302      	movs	r3, #2
 80021ce:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 40;
 80021d0:	2328      	movs	r3, #40	@ 0x28
 80021d2:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 80021d4:	2301      	movs	r3, #1
 80021d6:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80021d8:	2304      	movs	r3, #4
 80021da:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80021dc:	2302      	movs	r3, #2
 80021de:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80021e0:	230c      	movs	r3, #12
 80021e2:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80021e4:	2300      	movs	r3, #0
 80021e6:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80021e8:	2300      	movs	r3, #0
 80021ea:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80021ec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80021f0:	4618      	mov	r0, r3
 80021f2:	f006 fe33 	bl	8008e5c <HAL_RCC_OscConfig>
 80021f6:	4603      	mov	r3, r0
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d001      	beq.n	8002200 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80021fc:	f000 f8ce 	bl	800239c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002200:	233f      	movs	r3, #63	@ 0x3f
 8002202:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002204:	2303      	movs	r3, #3
 8002206:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8002208:	2300      	movs	r3, #0
 800220a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800220c:	2308      	movs	r3, #8
 800220e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8002210:	2340      	movs	r3, #64	@ 0x40
 8002212:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8002214:	2340      	movs	r3, #64	@ 0x40
 8002216:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8002218:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800221c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800221e:	2340      	movs	r3, #64	@ 0x40
 8002220:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002222:	1d3b      	adds	r3, r7, #4
 8002224:	2103      	movs	r1, #3
 8002226:	4618      	mov	r0, r3
 8002228:	f007 fb48 	bl	80098bc <HAL_RCC_ClockConfig>
 800222c:	4603      	mov	r3, r0
 800222e:	2b00      	cmp	r3, #0
 8002230:	d001      	beq.n	8002236 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8002232:	f000 f8b3 	bl	800239c <Error_Handler>
  }
}
 8002236:	bf00      	nop
 8002238:	3770      	adds	r7, #112	@ 0x70
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	58024800 	.word	0x58024800

08002244 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b084      	sub	sp, #16
 8002248:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800224a:	463b      	mov	r3, r7
 800224c:	2200      	movs	r2, #0
 800224e:	601a      	str	r2, [r3, #0]
 8002250:	605a      	str	r2, [r3, #4]
 8002252:	609a      	str	r2, [r3, #8]
 8002254:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8002256:	f001 fbd9 	bl	8003a0c <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800225a:	2301      	movs	r3, #1
 800225c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800225e:	2300      	movs	r3, #0
 8002260:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8002262:	2300      	movs	r3, #0
 8002264:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8002266:	231f      	movs	r3, #31
 8002268:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 800226a:	2387      	movs	r3, #135	@ 0x87
 800226c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800226e:	2300      	movs	r3, #0
 8002270:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8002272:	2300      	movs	r3, #0
 8002274:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8002276:	2301      	movs	r3, #1
 8002278:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800227a:	2301      	movs	r3, #1
 800227c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800227e:	2300      	movs	r3, #0
 8002280:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8002282:	2300      	movs	r3, #0
 8002284:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8002286:	463b      	mov	r3, r7
 8002288:	4618      	mov	r0, r3
 800228a:	f001 fbf7 	bl	8003a7c <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 800228e:	2301      	movs	r3, #1
 8002290:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x08000000;
 8002292:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8002296:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 8002298:	2312      	movs	r3, #18
 800229a:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 800229c:	2300      	movs	r3, #0
 800229e:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 80022a0:	2303      	movs	r3, #3
 80022a2:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 80022a4:	2300      	movs	r3, #0
 80022a6:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 80022a8:	2300      	movs	r3, #0
 80022aa:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 80022ac:	2301      	movs	r3, #1
 80022ae:	73bb      	strb	r3, [r7, #14]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80022b0:	463b      	mov	r3, r7
 80022b2:	4618      	mov	r0, r3
 80022b4:	f001 fbe2 	bl	8003a7c <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 80022b8:	2302      	movs	r3, #2
 80022ba:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x20000000;
 80022bc:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80022c0:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_128KB;
 80022c2:	2310      	movs	r3, #16
 80022c4:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 80022c6:	2301      	movs	r3, #1
 80022c8:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80022ca:	2301      	movs	r3, #1
 80022cc:	733b      	strb	r3, [r7, #12]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80022ce:	463b      	mov	r3, r7
 80022d0:	4618      	mov	r0, r3
 80022d2:	f001 fbd3 	bl	8003a7c <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 80022d6:	2303      	movs	r3, #3
 80022d8:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x24000000;
 80022da:	f04f 5310 	mov.w	r3, #603979776	@ 0x24000000
 80022de:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 80022e0:	2312      	movs	r3, #18
 80022e2:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 80022e4:	2301      	movs	r3, #1
 80022e6:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80022e8:	463b      	mov	r3, r7
 80022ea:	4618      	mov	r0, r3
 80022ec:	f001 fbc6 	bl	8003a7c <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
 80022f0:	2304      	movs	r3, #4
 80022f2:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30000000;
 80022f4:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 80022f8:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
 80022fa:	230f      	movs	r3, #15
 80022fc:	723b      	strb	r3, [r7, #8]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80022fe:	463b      	mov	r3, r7
 8002300:	4618      	mov	r0, r3
 8002302:	f001 fbbb 	bl	8003a7c <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER5;
 8002306:	2305      	movs	r3, #5
 8002308:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x40000000;
 800230a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800230e:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
 8002310:	231b      	movs	r3, #27
 8002312:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8002314:	2300      	movs	r3, #0
 8002316:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8002318:	2301      	movs	r3, #1
 800231a:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800231c:	2300      	movs	r3, #0
 800231e:	73bb      	strb	r3, [r7, #14]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8002320:	463b      	mov	r3, r7
 8002322:	4618      	mov	r0, r3
 8002324:	f001 fbaa 	bl	8003a7c <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER6;
 8002328:	2306      	movs	r3, #6
 800232a:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x90000000;
 800232c:	f04f 4310 	mov.w	r3, #2415919104	@ 0x90000000
 8002330:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
 8002332:	2318      	movs	r3, #24
 8002334:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8002336:	2301      	movs	r3, #1
 8002338:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 800233a:	2300      	movs	r3, #0
 800233c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 800233e:	2301      	movs	r3, #1
 8002340:	73bb      	strb	r3, [r7, #14]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8002342:	463b      	mov	r3, r7
 8002344:	4618      	mov	r0, r3
 8002346:	f001 fb99 	bl	8003a7c <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER7;
 800234a:	2307      	movs	r3, #7
 800234c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x70000000;
 800234e:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
 8002352:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8002354:	2300      	movs	r3, #0
 8002356:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8002358:	2300      	movs	r3, #0
 800235a:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800235c:	2300      	movs	r3, #0
 800235e:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8002360:	463b      	mov	r3, r7
 8002362:	4618      	mov	r0, r3
 8002364:	f001 fb8a 	bl	8003a7c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_HFNMI_PRIVDEF);
 8002368:	2006      	movs	r0, #6
 800236a:	f001 fb67 	bl	8003a3c <HAL_MPU_Enable>

}
 800236e:	bf00      	nop
 8002370:	3710      	adds	r7, #16
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
	...

08002378 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b082      	sub	sp, #8
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a04      	ldr	r2, [pc, #16]	@ (8002398 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d101      	bne.n	800238e <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 800238a:	f001 f9a3 	bl	80036d4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800238e:	bf00      	nop
 8002390:	3708      	adds	r7, #8
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}
 8002396:	bf00      	nop
 8002398:	40010000 	.word	0x40010000

0800239c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  SHELL_LOG_SYS_ERROR("Critical Error Occurred!");
 80023a0:	4a06      	ldr	r2, [pc, #24]	@ (80023bc <Error_Handler+0x20>)
 80023a2:	2103      	movs	r1, #3
 80023a4:	2000      	movs	r0, #0
 80023a6:	f01b ff4b 	bl	801e240 <shellLogPrint>
  SHELL_LOG_SYS_ERROR("System halted - check hardware connections");
 80023aa:	4a05      	ldr	r2, [pc, #20]	@ (80023c0 <Error_Handler+0x24>)
 80023ac:	2103      	movs	r1, #3
 80023ae:	2000      	movs	r0, #0
 80023b0:	f01b ff46 	bl	801e240 <shellLogPrint>
  __ASM volatile ("cpsid i" : : : "memory");
 80023b4:	b672      	cpsid	i
}
 80023b6:	bf00      	nop
  
  __disable_irq();
  while (1)
 80023b8:	bf00      	nop
 80023ba:	e7fd      	b.n	80023b8 <Error_Handler+0x1c>
 80023bc:	08021480 	.word	0x08021480
 80023c0:	0802149c 	.word	0x0802149c

080023c4 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b083      	sub	sp, #12
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
 80023cc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 80023ce:	bf00      	nop
 80023d0:	370c      	adds	r7, #12
 80023d2:	46bd      	mov	sp, r7
 80023d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d8:	4770      	bx	lr
	...

080023dc <MX_OCTOSPI1_Init>:
OSPI_HandleTypeDef hospi1;
OSPI_HandleTypeDef hospi2;

/* OCTOSPI1 init function */
void MX_OCTOSPI1_Init(void)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b086      	sub	sp, #24
 80023e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef sOspiManagerCfg = {0};
 80023e2:	463b      	mov	r3, r7
 80023e4:	2200      	movs	r2, #0
 80023e6:	601a      	str	r2, [r3, #0]
 80023e8:	605a      	str	r2, [r3, #4]
 80023ea:	609a      	str	r2, [r3, #8]
 80023ec:	60da      	str	r2, [r3, #12]
 80023ee:	611a      	str	r2, [r3, #16]
 80023f0:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  hospi1.Instance = OCTOSPI1;
 80023f2:	4b2a      	ldr	r3, [pc, #168]	@ (800249c <MX_OCTOSPI1_Init+0xc0>)
 80023f4:	4a2a      	ldr	r2, [pc, #168]	@ (80024a0 <MX_OCTOSPI1_Init+0xc4>)
 80023f6:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 80023f8:	4b28      	ldr	r3, [pc, #160]	@ (800249c <MX_OCTOSPI1_Init+0xc0>)
 80023fa:	2201      	movs	r2, #1
 80023fc:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 80023fe:	4b27      	ldr	r3, [pc, #156]	@ (800249c <MX_OCTOSPI1_Init+0xc0>)
 8002400:	2200      	movs	r2, #0
 8002402:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_APMEMORY;
 8002404:	4b25      	ldr	r3, [pc, #148]	@ (800249c <MX_OCTOSPI1_Init+0xc0>)
 8002406:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800240a:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 23;
 800240c:	4b23      	ldr	r3, [pc, #140]	@ (800249c <MX_OCTOSPI1_Init+0xc0>)
 800240e:	2217      	movs	r2, #23
 8002410:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 1;
 8002412:	4b22      	ldr	r3, [pc, #136]	@ (800249c <MX_OCTOSPI1_Init+0xc0>)
 8002414:	2201      	movs	r2, #1
 8002416:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8002418:	4b20      	ldr	r3, [pc, #128]	@ (800249c <MX_OCTOSPI1_Init+0xc0>)
 800241a:	2200      	movs	r2, #0
 800241c:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 800241e:	4b1f      	ldr	r3, [pc, #124]	@ (800249c <MX_OCTOSPI1_Init+0xc0>)
 8002420:	2200      	movs	r2, #0
 8002422:	61da      	str	r2, [r3, #28]
  hospi1.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 8002424:	4b1d      	ldr	r3, [pc, #116]	@ (800249c <MX_OCTOSPI1_Init+0xc0>)
 8002426:	2200      	movs	r2, #0
 8002428:	621a      	str	r2, [r3, #32]
  hospi1.Init.ClockPrescaler = 4;
 800242a:	4b1c      	ldr	r3, [pc, #112]	@ (800249c <MX_OCTOSPI1_Init+0xc0>)
 800242c:	2204      	movs	r2, #4
 800242e:	625a      	str	r2, [r3, #36]	@ 0x24
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8002430:	4b1a      	ldr	r3, [pc, #104]	@ (800249c <MX_OCTOSPI1_Init+0xc0>)
 8002432:	2200      	movs	r2, #0
 8002434:	629a      	str	r2, [r3, #40]	@ 0x28
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8002436:	4b19      	ldr	r3, [pc, #100]	@ (800249c <MX_OCTOSPI1_Init+0xc0>)
 8002438:	2200      	movs	r2, #0
 800243a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hospi1.Init.ChipSelectBoundary = 0;
 800243c:	4b17      	ldr	r3, [pc, #92]	@ (800249c <MX_OCTOSPI1_Init+0xc0>)
 800243e:	2200      	movs	r2, #0
 8002440:	631a      	str	r2, [r3, #48]	@ 0x30
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 8002442:	4b16      	ldr	r3, [pc, #88]	@ (800249c <MX_OCTOSPI1_Init+0xc0>)
 8002444:	2208      	movs	r2, #8
 8002446:	635a      	str	r2, [r3, #52]	@ 0x34
  hospi1.Init.MaxTran = 0;
 8002448:	4b14      	ldr	r3, [pc, #80]	@ (800249c <MX_OCTOSPI1_Init+0xc0>)
 800244a:	2200      	movs	r2, #0
 800244c:	639a      	str	r2, [r3, #56]	@ 0x38
  hospi1.Init.Refresh = 0;
 800244e:	4b13      	ldr	r3, [pc, #76]	@ (800249c <MX_OCTOSPI1_Init+0xc0>)
 8002450:	2200      	movs	r2, #0
 8002452:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 8002454:	4811      	ldr	r0, [pc, #68]	@ (800249c <MX_OCTOSPI1_Init+0xc0>)
 8002456:	f004 fb7f 	bl	8006b58 <HAL_OSPI_Init>
 800245a:	4603      	mov	r3, r0
 800245c:	2b00      	cmp	r3, #0
 800245e:	d001      	beq.n	8002464 <MX_OCTOSPI1_Init+0x88>
  {
    Error_Handler();
 8002460:	f7ff ff9c 	bl	800239c <Error_Handler>
  }
  sOspiManagerCfg.ClkPort = 1;
 8002464:	2301      	movs	r3, #1
 8002466:	603b      	str	r3, [r7, #0]
  sOspiManagerCfg.DQSPort = 1;
 8002468:	2301      	movs	r3, #1
 800246a:	607b      	str	r3, [r7, #4]
  sOspiManagerCfg.NCSPort = 1;
 800246c:	2301      	movs	r3, #1
 800246e:	60bb      	str	r3, [r7, #8]
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 8002470:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 8002474:	60fb      	str	r3, [r7, #12]
  sOspiManagerCfg.IOHighPort = HAL_OSPIM_IOPORT_1_HIGH;
 8002476:	4b0b      	ldr	r3, [pc, #44]	@ (80024a4 <MX_OCTOSPI1_Init+0xc8>)
 8002478:	613b      	str	r3, [r7, #16]
  if (HAL_OSPIM_Config(&hospi1, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800247a:	463b      	mov	r3, r7
 800247c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002480:	4619      	mov	r1, r3
 8002482:	4806      	ldr	r0, [pc, #24]	@ (800249c <MX_OCTOSPI1_Init+0xc0>)
 8002484:	f004 fd08 	bl	8006e98 <HAL_OSPIM_Config>
 8002488:	4603      	mov	r3, r0
 800248a:	2b00      	cmp	r3, #0
 800248c:	d001      	beq.n	8002492 <MX_OCTOSPI1_Init+0xb6>
  {
    Error_Handler();
 800248e:	f7ff ff85 	bl	800239c <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 8002492:	bf00      	nop
 8002494:	3718      	adds	r7, #24
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}
 800249a:	bf00      	nop
 800249c:	24000174 	.word	0x24000174
 80024a0:	52005000 	.word	0x52005000
 80024a4:	01000001 	.word	0x01000001

080024a8 <MX_OCTOSPI2_Init>:
/* OCTOSPI2 init function */
void MX_OCTOSPI2_Init(void)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b086      	sub	sp, #24
 80024ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI2_Init 0 */

  /* USER CODE END OCTOSPI2_Init 0 */

  OSPIM_CfgTypeDef sOspiManagerCfg = {0};
 80024ae:	463b      	mov	r3, r7
 80024b0:	2200      	movs	r2, #0
 80024b2:	601a      	str	r2, [r3, #0]
 80024b4:	605a      	str	r2, [r3, #4]
 80024b6:	609a      	str	r2, [r3, #8]
 80024b8:	60da      	str	r2, [r3, #12]
 80024ba:	611a      	str	r2, [r3, #16]
 80024bc:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN OCTOSPI2_Init 1 */

  /* USER CODE END OCTOSPI2_Init 1 */
  hospi2.Instance = OCTOSPI2;
 80024be:	4b27      	ldr	r3, [pc, #156]	@ (800255c <MX_OCTOSPI2_Init+0xb4>)
 80024c0:	4a27      	ldr	r2, [pc, #156]	@ (8002560 <MX_OCTOSPI2_Init+0xb8>)
 80024c2:	601a      	str	r2, [r3, #0]
  hospi2.Init.FifoThreshold = 1;
 80024c4:	4b25      	ldr	r3, [pc, #148]	@ (800255c <MX_OCTOSPI2_Init+0xb4>)
 80024c6:	2201      	movs	r2, #1
 80024c8:	605a      	str	r2, [r3, #4]
  hospi2.Init.DualQuad = HAL_OSPI_DUALQUAD_ENABLE;
 80024ca:	4b24      	ldr	r3, [pc, #144]	@ (800255c <MX_OCTOSPI2_Init+0xb4>)
 80024cc:	2240      	movs	r2, #64	@ 0x40
 80024ce:	609a      	str	r2, [r3, #8]
  hospi2.Init.MemoryType = HAL_OSPI_MEMTYPE_MICRON;
 80024d0:	4b22      	ldr	r3, [pc, #136]	@ (800255c <MX_OCTOSPI2_Init+0xb4>)
 80024d2:	2200      	movs	r2, #0
 80024d4:	60da      	str	r2, [r3, #12]
  hospi2.Init.DeviceSize = 27;
 80024d6:	4b21      	ldr	r3, [pc, #132]	@ (800255c <MX_OCTOSPI2_Init+0xb4>)
 80024d8:	221b      	movs	r2, #27
 80024da:	611a      	str	r2, [r3, #16]
  hospi2.Init.ChipSelectHighTime = 1;
 80024dc:	4b1f      	ldr	r3, [pc, #124]	@ (800255c <MX_OCTOSPI2_Init+0xb4>)
 80024de:	2201      	movs	r2, #1
 80024e0:	615a      	str	r2, [r3, #20]
  hospi2.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 80024e2:	4b1e      	ldr	r3, [pc, #120]	@ (800255c <MX_OCTOSPI2_Init+0xb4>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	619a      	str	r2, [r3, #24]
  hospi2.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 80024e8:	4b1c      	ldr	r3, [pc, #112]	@ (800255c <MX_OCTOSPI2_Init+0xb4>)
 80024ea:	2200      	movs	r2, #0
 80024ec:	61da      	str	r2, [r3, #28]
  hospi2.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 80024ee:	4b1b      	ldr	r3, [pc, #108]	@ (800255c <MX_OCTOSPI2_Init+0xb4>)
 80024f0:	2200      	movs	r2, #0
 80024f2:	621a      	str	r2, [r3, #32]
  hospi2.Init.ClockPrescaler = 2;
 80024f4:	4b19      	ldr	r3, [pc, #100]	@ (800255c <MX_OCTOSPI2_Init+0xb4>)
 80024f6:	2202      	movs	r2, #2
 80024f8:	625a      	str	r2, [r3, #36]	@ 0x24
  hospi2.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 80024fa:	4b18      	ldr	r3, [pc, #96]	@ (800255c <MX_OCTOSPI2_Init+0xb4>)
 80024fc:	2200      	movs	r2, #0
 80024fe:	629a      	str	r2, [r3, #40]	@ 0x28
  hospi2.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8002500:	4b16      	ldr	r3, [pc, #88]	@ (800255c <MX_OCTOSPI2_Init+0xb4>)
 8002502:	2200      	movs	r2, #0
 8002504:	62da      	str	r2, [r3, #44]	@ 0x2c
  hospi2.Init.ChipSelectBoundary = 0;
 8002506:	4b15      	ldr	r3, [pc, #84]	@ (800255c <MX_OCTOSPI2_Init+0xb4>)
 8002508:	2200      	movs	r2, #0
 800250a:	631a      	str	r2, [r3, #48]	@ 0x30
  hospi2.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 800250c:	4b13      	ldr	r3, [pc, #76]	@ (800255c <MX_OCTOSPI2_Init+0xb4>)
 800250e:	2208      	movs	r2, #8
 8002510:	635a      	str	r2, [r3, #52]	@ 0x34
  hospi2.Init.MaxTran = 0;
 8002512:	4b12      	ldr	r3, [pc, #72]	@ (800255c <MX_OCTOSPI2_Init+0xb4>)
 8002514:	2200      	movs	r2, #0
 8002516:	639a      	str	r2, [r3, #56]	@ 0x38
  hospi2.Init.Refresh = 0;
 8002518:	4b10      	ldr	r3, [pc, #64]	@ (800255c <MX_OCTOSPI2_Init+0xb4>)
 800251a:	2200      	movs	r2, #0
 800251c:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_OSPI_Init(&hospi2) != HAL_OK)
 800251e:	480f      	ldr	r0, [pc, #60]	@ (800255c <MX_OCTOSPI2_Init+0xb4>)
 8002520:	f004 fb1a 	bl	8006b58 <HAL_OSPI_Init>
 8002524:	4603      	mov	r3, r0
 8002526:	2b00      	cmp	r3, #0
 8002528:	d001      	beq.n	800252e <MX_OCTOSPI2_Init+0x86>
  {
    Error_Handler();
 800252a:	f7ff ff37 	bl	800239c <Error_Handler>
  }
  sOspiManagerCfg.ClkPort = 2;
 800252e:	2302      	movs	r3, #2
 8002530:	603b      	str	r3, [r7, #0]
  sOspiManagerCfg.NCSPort = 2;
 8002532:	2302      	movs	r3, #2
 8002534:	60bb      	str	r3, [r7, #8]
  sOspiManagerCfg.IOHighPort = HAL_OSPIM_IOPORT_2_HIGH;
 8002536:	4b0b      	ldr	r3, [pc, #44]	@ (8002564 <MX_OCTOSPI2_Init+0xbc>)
 8002538:	613b      	str	r3, [r7, #16]
  if (HAL_OSPIM_Config(&hospi2, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800253a:	463b      	mov	r3, r7
 800253c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002540:	4619      	mov	r1, r3
 8002542:	4806      	ldr	r0, [pc, #24]	@ (800255c <MX_OCTOSPI2_Init+0xb4>)
 8002544:	f004 fca8 	bl	8006e98 <HAL_OSPIM_Config>
 8002548:	4603      	mov	r3, r0
 800254a:	2b00      	cmp	r3, #0
 800254c:	d001      	beq.n	8002552 <MX_OCTOSPI2_Init+0xaa>
  {
    Error_Handler();
 800254e:	f7ff ff25 	bl	800239c <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI2_Init 2 */

  /* USER CODE END OCTOSPI2_Init 2 */

}
 8002552:	bf00      	nop
 8002554:	3718      	adds	r7, #24
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}
 800255a:	bf00      	nop
 800255c:	240001d0 	.word	0x240001d0
 8002560:	5200a000 	.word	0x5200a000
 8002564:	01000002 	.word	0x01000002

08002568 <HAL_OSPI_MspInit>:

static uint32_t HAL_RCC_OCTOSPIM_CLK_ENABLED=0;

void HAL_OSPI_MspInit(OSPI_HandleTypeDef* ospiHandle)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b0c2      	sub	sp, #264	@ 0x108
 800256c:	af00      	add	r7, sp, #0
 800256e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8002572:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002576:	6018      	str	r0, [r3, #0]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002578:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 800257c:	2200      	movs	r2, #0
 800257e:	601a      	str	r2, [r3, #0]
 8002580:	605a      	str	r2, [r3, #4]
 8002582:	609a      	str	r2, [r3, #8]
 8002584:	60da      	str	r2, [r3, #12]
 8002586:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002588:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800258c:	22b8      	movs	r2, #184	@ 0xb8
 800258e:	2100      	movs	r1, #0
 8002590:	4618      	mov	r0, r3
 8002592:	f01c fdbd 	bl	801f110 <memset>
  if(ospiHandle->Instance==OCTOSPI1)
 8002596:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800259a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a85      	ldr	r2, [pc, #532]	@ (80027b8 <HAL_OSPI_MspInit+0x250>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	f040 8117 	bne.w	80027d8 <HAL_OSPI_MspInit+0x270>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 80025aa:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80025ae:	f04f 0300 	mov.w	r3, #0
 80025b2:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.OspiClockSelection = RCC_OSPICLKSOURCE_D1HCLK;
 80025b6:	2300      	movs	r3, #0
 80025b8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80025bc:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80025c0:	4618      	mov	r0, r3
 80025c2:	f007 ff03 	bl	800a3cc <HAL_RCCEx_PeriphCLKConfig>
 80025c6:	4603      	mov	r3, r0
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d001      	beq.n	80025d0 <HAL_OSPI_MspInit+0x68>
    {
      Error_Handler();
 80025cc:	f7ff fee6 	bl	800239c <Error_Handler>
    }

    /* OCTOSPI1 clock enable */
    HAL_RCC_OCTOSPIM_CLK_ENABLED++;
 80025d0:	4b7a      	ldr	r3, [pc, #488]	@ (80027bc <HAL_OSPI_MspInit+0x254>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	3301      	adds	r3, #1
 80025d6:	4a79      	ldr	r2, [pc, #484]	@ (80027bc <HAL_OSPI_MspInit+0x254>)
 80025d8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_OCTOSPIM_CLK_ENABLED==1){
 80025da:	4b78      	ldr	r3, [pc, #480]	@ (80027bc <HAL_OSPI_MspInit+0x254>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d10e      	bne.n	8002600 <HAL_OSPI_MspInit+0x98>
      __HAL_RCC_OCTOSPIM_CLK_ENABLE();
 80025e2:	4b77      	ldr	r3, [pc, #476]	@ (80027c0 <HAL_OSPI_MspInit+0x258>)
 80025e4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80025e8:	4a75      	ldr	r2, [pc, #468]	@ (80027c0 <HAL_OSPI_MspInit+0x258>)
 80025ea:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80025ee:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 80025f2:	4b73      	ldr	r3, [pc, #460]	@ (80027c0 <HAL_OSPI_MspInit+0x258>)
 80025f4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80025f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80025fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80025fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    }
    __HAL_RCC_OSPI1_CLK_ENABLE();
 8002600:	4b6f      	ldr	r3, [pc, #444]	@ (80027c0 <HAL_OSPI_MspInit+0x258>)
 8002602:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8002606:	4a6e      	ldr	r2, [pc, #440]	@ (80027c0 <HAL_OSPI_MspInit+0x258>)
 8002608:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800260c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8002610:	4b6b      	ldr	r3, [pc, #428]	@ (80027c0 <HAL_OSPI_MspInit+0x258>)
 8002612:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8002616:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800261a:	633b      	str	r3, [r7, #48]	@ 0x30
 800261c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800261e:	4b68      	ldr	r3, [pc, #416]	@ (80027c0 <HAL_OSPI_MspInit+0x258>)
 8002620:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002624:	4a66      	ldr	r2, [pc, #408]	@ (80027c0 <HAL_OSPI_MspInit+0x258>)
 8002626:	f043 0308 	orr.w	r3, r3, #8
 800262a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800262e:	4b64      	ldr	r3, [pc, #400]	@ (80027c0 <HAL_OSPI_MspInit+0x258>)
 8002630:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002634:	f003 0308 	and.w	r3, r3, #8
 8002638:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800263a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800263c:	4b60      	ldr	r3, [pc, #384]	@ (80027c0 <HAL_OSPI_MspInit+0x258>)
 800263e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002642:	4a5f      	ldr	r2, [pc, #380]	@ (80027c0 <HAL_OSPI_MspInit+0x258>)
 8002644:	f043 0320 	orr.w	r3, r3, #32
 8002648:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800264c:	4b5c      	ldr	r3, [pc, #368]	@ (80027c0 <HAL_OSPI_MspInit+0x258>)
 800264e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002652:	f003 0320 	and.w	r3, r3, #32
 8002656:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002658:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800265a:	4b59      	ldr	r3, [pc, #356]	@ (80027c0 <HAL_OSPI_MspInit+0x258>)
 800265c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002660:	4a57      	ldr	r2, [pc, #348]	@ (80027c0 <HAL_OSPI_MspInit+0x258>)
 8002662:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002666:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800266a:	4b55      	ldr	r3, [pc, #340]	@ (80027c0 <HAL_OSPI_MspInit+0x258>)
 800266c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002670:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002674:	627b      	str	r3, [r7, #36]	@ 0x24
 8002676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002678:	4b51      	ldr	r3, [pc, #324]	@ (80027c0 <HAL_OSPI_MspInit+0x258>)
 800267a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800267e:	4a50      	ldr	r2, [pc, #320]	@ (80027c0 <HAL_OSPI_MspInit+0x258>)
 8002680:	f043 0310 	orr.w	r3, r3, #16
 8002684:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002688:	4b4d      	ldr	r3, [pc, #308]	@ (80027c0 <HAL_OSPI_MspInit+0x258>)
 800268a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800268e:	f003 0310 	and.w	r3, r3, #16
 8002692:	623b      	str	r3, [r7, #32]
 8002694:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002696:	4b4a      	ldr	r3, [pc, #296]	@ (80027c0 <HAL_OSPI_MspInit+0x258>)
 8002698:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800269c:	4a48      	ldr	r2, [pc, #288]	@ (80027c0 <HAL_OSPI_MspInit+0x258>)
 800269e:	f043 0302 	orr.w	r3, r3, #2
 80026a2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80026a6:	4b46      	ldr	r3, [pc, #280]	@ (80027c0 <HAL_OSPI_MspInit+0x258>)
 80026a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80026ac:	f003 0302 	and.w	r3, r3, #2
 80026b0:	61fb      	str	r3, [r7, #28]
 80026b2:	69fb      	ldr	r3, [r7, #28]
    PF10     ------> OCTOSPIM_P1_CLK
    PF8     ------> OCTOSPIM_P1_IO0
    PE9     ------> OCTOSPIM_P1_IO6
    PB2     ------> OCTOSPIM_P1_DQS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_7;
 80026b4:	23b0      	movs	r3, #176	@ 0xb0
 80026b6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026ba:	2302      	movs	r3, #2
 80026bc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026c0:	2300      	movs	r3, #0
 80026c2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026c6:	2303      	movs	r3, #3
 80026c8:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 80026cc:	230a      	movs	r3, #10
 80026ce:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80026d2:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 80026d6:	4619      	mov	r1, r3
 80026d8:	483a      	ldr	r0, [pc, #232]	@ (80027c4 <HAL_OSPI_MspInit+0x25c>)
 80026da:	f003 ff05 	bl	80064e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_9|GPIO_PIN_8;
 80026de:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 80026e2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026e6:	2302      	movs	r3, #2
 80026e8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ec:	2300      	movs	r3, #0
 80026ee:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026f2:	2303      	movs	r3, #3
 80026f4:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 80026f8:	230a      	movs	r3, #10
 80026fa:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80026fe:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8002702:	4619      	mov	r1, r3
 8002704:	4830      	ldr	r0, [pc, #192]	@ (80027c8 <HAL_OSPI_MspInit+0x260>)
 8002706:	f003 feef 	bl	80064e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800270a:	2340      	movs	r3, #64	@ 0x40
 800270c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002710:	2302      	movs	r3, #2
 8002712:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002716:	2300      	movs	r3, #0
 8002718:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800271c:	2303      	movs	r3, #3
 800271e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8002722:	230a      	movs	r3, #10
 8002724:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002728:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 800272c:	4619      	mov	r1, r3
 800272e:	4827      	ldr	r0, [pc, #156]	@ (80027cc <HAL_OSPI_MspInit+0x264>)
 8002730:	f003 feda 	bl	80064e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002734:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002738:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800273c:	2302      	movs	r3, #2
 800273e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002742:	2300      	movs	r3, #0
 8002744:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002748:	2303      	movs	r3, #3
 800274a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 800274e:	2309      	movs	r3, #9
 8002750:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002754:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8002758:	4619      	mov	r1, r3
 800275a:	481b      	ldr	r0, [pc, #108]	@ (80027c8 <HAL_OSPI_MspInit+0x260>)
 800275c:	f003 fec4 	bl	80064e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002760:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002764:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002768:	2302      	movs	r3, #2
 800276a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800276e:	2300      	movs	r3, #0
 8002770:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002774:	2303      	movs	r3, #3
 8002776:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 800277a:	230a      	movs	r3, #10
 800277c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002780:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8002784:	4619      	mov	r1, r3
 8002786:	4812      	ldr	r0, [pc, #72]	@ (80027d0 <HAL_OSPI_MspInit+0x268>)
 8002788:	f003 feae 	bl	80064e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800278c:	2304      	movs	r3, #4
 800278e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002792:	2302      	movs	r3, #2
 8002794:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002798:	2300      	movs	r3, #0
 800279a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800279e:	2303      	movs	r3, #3
 80027a0:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 80027a4:	230a      	movs	r3, #10
 80027a6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027aa:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 80027ae:	4619      	mov	r1, r3
 80027b0:	4808      	ldr	r0, [pc, #32]	@ (80027d4 <HAL_OSPI_MspInit+0x26c>)
 80027b2:	f003 fe99 	bl	80064e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN OCTOSPI2_MspInit 1 */

  /* USER CODE END OCTOSPI2_MspInit 1 */
  }
}
 80027b6:	e0b2      	b.n	800291e <HAL_OSPI_MspInit+0x3b6>
 80027b8:	52005000 	.word	0x52005000
 80027bc:	2400022c 	.word	0x2400022c
 80027c0:	58024400 	.word	0x58024400
 80027c4:	58020c00 	.word	0x58020c00
 80027c8:	58021400 	.word	0x58021400
 80027cc:	58021800 	.word	0x58021800
 80027d0:	58021000 	.word	0x58021000
 80027d4:	58020400 	.word	0x58020400
  else if(ospiHandle->Instance==OCTOSPI2)
 80027d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80027dc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a50      	ldr	r2, [pc, #320]	@ (8002928 <HAL_OSPI_MspInit+0x3c0>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	f040 8099 	bne.w	800291e <HAL_OSPI_MspInit+0x3b6>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 80027ec:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80027f0:	f04f 0300 	mov.w	r3, #0
 80027f4:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.OspiClockSelection = RCC_OSPICLKSOURCE_D1HCLK;
 80027f8:	2300      	movs	r3, #0
 80027fa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80027fe:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002802:	4618      	mov	r0, r3
 8002804:	f007 fde2 	bl	800a3cc <HAL_RCCEx_PeriphCLKConfig>
 8002808:	4603      	mov	r3, r0
 800280a:	2b00      	cmp	r3, #0
 800280c:	d001      	beq.n	8002812 <HAL_OSPI_MspInit+0x2aa>
      Error_Handler();
 800280e:	f7ff fdc5 	bl	800239c <Error_Handler>
    HAL_RCC_OCTOSPIM_CLK_ENABLED++;
 8002812:	4b46      	ldr	r3, [pc, #280]	@ (800292c <HAL_OSPI_MspInit+0x3c4>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	3301      	adds	r3, #1
 8002818:	4a44      	ldr	r2, [pc, #272]	@ (800292c <HAL_OSPI_MspInit+0x3c4>)
 800281a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_OCTOSPIM_CLK_ENABLED==1){
 800281c:	4b43      	ldr	r3, [pc, #268]	@ (800292c <HAL_OSPI_MspInit+0x3c4>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	2b01      	cmp	r3, #1
 8002822:	d10e      	bne.n	8002842 <HAL_OSPI_MspInit+0x2da>
      __HAL_RCC_OCTOSPIM_CLK_ENABLE();
 8002824:	4b42      	ldr	r3, [pc, #264]	@ (8002930 <HAL_OSPI_MspInit+0x3c8>)
 8002826:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800282a:	4a41      	ldr	r2, [pc, #260]	@ (8002930 <HAL_OSPI_MspInit+0x3c8>)
 800282c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002830:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8002834:	4b3e      	ldr	r3, [pc, #248]	@ (8002930 <HAL_OSPI_MspInit+0x3c8>)
 8002836:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800283a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800283e:	61bb      	str	r3, [r7, #24]
 8002840:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_OSPI2_CLK_ENABLE();
 8002842:	4b3b      	ldr	r3, [pc, #236]	@ (8002930 <HAL_OSPI_MspInit+0x3c8>)
 8002844:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8002848:	4a39      	ldr	r2, [pc, #228]	@ (8002930 <HAL_OSPI_MspInit+0x3c8>)
 800284a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800284e:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8002852:	4b37      	ldr	r3, [pc, #220]	@ (8002930 <HAL_OSPI_MspInit+0x3c8>)
 8002854:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8002858:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800285c:	617b      	str	r3, [r7, #20]
 800285e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002860:	4b33      	ldr	r3, [pc, #204]	@ (8002930 <HAL_OSPI_MspInit+0x3c8>)
 8002862:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002866:	4a32      	ldr	r2, [pc, #200]	@ (8002930 <HAL_OSPI_MspInit+0x3c8>)
 8002868:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800286c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002870:	4b2f      	ldr	r3, [pc, #188]	@ (8002930 <HAL_OSPI_MspInit+0x3c8>)
 8002872:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002876:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800287a:	613b      	str	r3, [r7, #16]
 800287c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800287e:	4b2c      	ldr	r3, [pc, #176]	@ (8002930 <HAL_OSPI_MspInit+0x3c8>)
 8002880:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002884:	4a2a      	ldr	r2, [pc, #168]	@ (8002930 <HAL_OSPI_MspInit+0x3c8>)
 8002886:	f043 0320 	orr.w	r3, r3, #32
 800288a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800288e:	4b28      	ldr	r3, [pc, #160]	@ (8002930 <HAL_OSPI_MspInit+0x3c8>)
 8002890:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002894:	f003 0320 	and.w	r3, r3, #32
 8002898:	60fb      	str	r3, [r7, #12]
 800289a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 800289c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80028a0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028a4:	2302      	movs	r3, #2
 80028a6:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028aa:	2300      	movs	r3, #0
 80028ac:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028b0:	2303      	movs	r3, #3
 80028b2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF3_OCTOSPIM_P2;
 80028b6:	2303      	movs	r3, #3
 80028b8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80028bc:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 80028c0:	4619      	mov	r1, r3
 80028c2:	481c      	ldr	r0, [pc, #112]	@ (8002934 <HAL_OSPI_MspInit+0x3cc>)
 80028c4:	f003 fe10 	bl	80064e8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_0|GPIO_PIN_1;
 80028c8:	f640 0303 	movw	r3, #2051	@ 0x803
 80028cc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028d0:	2302      	movs	r3, #2
 80028d2:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028d6:	2300      	movs	r3, #0
 80028d8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028dc:	2303      	movs	r3, #3
 80028de:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P2;
 80028e2:	2309      	movs	r3, #9
 80028e4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80028e8:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 80028ec:	4619      	mov	r1, r3
 80028ee:	4811      	ldr	r0, [pc, #68]	@ (8002934 <HAL_OSPI_MspInit+0x3cc>)
 80028f0:	f003 fdfa 	bl	80064e8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80028f4:	2310      	movs	r3, #16
 80028f6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028fa:	2302      	movs	r3, #2
 80028fc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002900:	2300      	movs	r3, #0
 8002902:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002906:	2303      	movs	r3, #3
 8002908:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P2;
 800290c:	2309      	movs	r3, #9
 800290e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002912:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8002916:	4619      	mov	r1, r3
 8002918:	4807      	ldr	r0, [pc, #28]	@ (8002938 <HAL_OSPI_MspInit+0x3d0>)
 800291a:	f003 fde5 	bl	80064e8 <HAL_GPIO_Init>
}
 800291e:	bf00      	nop
 8002920:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}
 8002928:	5200a000 	.word	0x5200a000
 800292c:	2400022c 	.word	0x2400022c
 8002930:	58024400 	.word	0x58024400
 8002934:	58021800 	.word	0x58021800
 8002938:	58021400 	.word	0x58021400

0800293c <MX_SAI4_Init>:
SAI_HandleTypeDef hsai_BlockA4;
DMA_HandleTypeDef hdma_sai4_a;

/* SAI4 init function */
void MX_SAI4_Init(void)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI4_Init 1 */

  /* USER CODE END SAI4_Init 1 */

  hsai_BlockA4.Instance = SAI4_Block_A;
 8002940:	4b15      	ldr	r3, [pc, #84]	@ (8002998 <MX_SAI4_Init+0x5c>)
 8002942:	4a16      	ldr	r2, [pc, #88]	@ (800299c <MX_SAI4_Init+0x60>)
 8002944:	601a      	str	r2, [r3, #0]
  hsai_BlockA4.Init.AudioMode = SAI_MODEMASTER_RX;
 8002946:	4b14      	ldr	r3, [pc, #80]	@ (8002998 <MX_SAI4_Init+0x5c>)
 8002948:	2201      	movs	r2, #1
 800294a:	605a      	str	r2, [r3, #4]
  hsai_BlockA4.Init.Synchro = SAI_ASYNCHRONOUS;
 800294c:	4b12      	ldr	r3, [pc, #72]	@ (8002998 <MX_SAI4_Init+0x5c>)
 800294e:	2200      	movs	r2, #0
 8002950:	609a      	str	r2, [r3, #8]
  hsai_BlockA4.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8002952:	4b11      	ldr	r3, [pc, #68]	@ (8002998 <MX_SAI4_Init+0x5c>)
 8002954:	2200      	movs	r2, #0
 8002956:	615a      	str	r2, [r3, #20]
  hsai_BlockA4.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8002958:	4b0f      	ldr	r3, [pc, #60]	@ (8002998 <MX_SAI4_Init+0x5c>)
 800295a:	2200      	movs	r2, #0
 800295c:	619a      	str	r2, [r3, #24]
  hsai_BlockA4.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_FULL;
 800295e:	4b0e      	ldr	r3, [pc, #56]	@ (8002998 <MX_SAI4_Init+0x5c>)
 8002960:	2204      	movs	r2, #4
 8002962:	61da      	str	r2, [r3, #28]
  hsai_BlockA4.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8002964:	4b0c      	ldr	r3, [pc, #48]	@ (8002998 <MX_SAI4_Init+0x5c>)
 8002966:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 800296a:	621a      	str	r2, [r3, #32]
  hsai_BlockA4.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800296c:	4b0a      	ldr	r3, [pc, #40]	@ (8002998 <MX_SAI4_Init+0x5c>)
 800296e:	2200      	movs	r2, #0
 8002970:	60da      	str	r2, [r3, #12]
  hsai_BlockA4.Init.MonoStereoMode = SAI_STEREOMODE;
 8002972:	4b09      	ldr	r3, [pc, #36]	@ (8002998 <MX_SAI4_Init+0x5c>)
 8002974:	2200      	movs	r2, #0
 8002976:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA4.Init.CompandingMode = SAI_NOCOMPANDING;
 8002978:	4b07      	ldr	r3, [pc, #28]	@ (8002998 <MX_SAI4_Init+0x5c>)
 800297a:	2200      	movs	r2, #0
 800297c:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_SAI_InitProtocol(&hsai_BlockA4, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 8) != HAL_OK)
 800297e:	2308      	movs	r3, #8
 8002980:	2200      	movs	r2, #0
 8002982:	2100      	movs	r1, #0
 8002984:	4804      	ldr	r0, [pc, #16]	@ (8002998 <MX_SAI4_Init+0x5c>)
 8002986:	f00a fcfd 	bl	800d384 <HAL_SAI_InitProtocol>
 800298a:	4603      	mov	r3, r0
 800298c:	2b00      	cmp	r3, #0
 800298e:	d001      	beq.n	8002994 <MX_SAI4_Init+0x58>
  {
    Error_Handler();
 8002990:	f7ff fd04 	bl	800239c <Error_Handler>
  }
  /* USER CODE BEGIN SAI4_Init 2 */

  /* USER CODE END SAI4_Init 2 */

}
 8002994:	bf00      	nop
 8002996:	bd80      	pop	{r7, pc}
 8002998:	24000230 	.word	0x24000230
 800299c:	58005404 	.word	0x58005404

080029a0 <HAL_SAI_MspInit>:
static uint32_t SAI4_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b0b8      	sub	sp, #224	@ 0xe0
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80029a8:	f107 0310 	add.w	r3, r7, #16
 80029ac:	22b8      	movs	r2, #184	@ 0xb8
 80029ae:	2100      	movs	r1, #0
 80029b0:	4618      	mov	r0, r3
 80029b2:	f01c fbad 	bl	801f110 <memset>
/* SAI4 */
    if(saiHandle->Instance==SAI4_Block_A)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a49      	ldr	r2, [pc, #292]	@ (8002ae0 <HAL_SAI_MspInit+0x140>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	f040 808a 	bne.w	8002ad6 <HAL_SAI_MspInit+0x136>
    {
    /* SAI4 clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI4A;
 80029c2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80029c6:	f04f 0300 	mov.w	r3, #0
 80029ca:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Sai4AClockSelection = RCC_SAI4ACLKSOURCE_PLL;
 80029ce:	2300      	movs	r3, #0
 80029d0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80029d4:	f107 0310 	add.w	r3, r7, #16
 80029d8:	4618      	mov	r0, r3
 80029da:	f007 fcf7 	bl	800a3cc <HAL_RCCEx_PeriphCLKConfig>
 80029de:	4603      	mov	r3, r0
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d001      	beq.n	80029e8 <HAL_SAI_MspInit+0x48>
    {
      Error_Handler();
 80029e4:	f7ff fcda 	bl	800239c <Error_Handler>
    }

    if (SAI4_client == 0)
 80029e8:	4b3e      	ldr	r3, [pc, #248]	@ (8002ae4 <HAL_SAI_MspInit+0x144>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d10e      	bne.n	8002a0e <HAL_SAI_MspInit+0x6e>
    {
       __HAL_RCC_SAI4_CLK_ENABLE();
 80029f0:	4b3d      	ldr	r3, [pc, #244]	@ (8002ae8 <HAL_SAI_MspInit+0x148>)
 80029f2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80029f6:	4a3c      	ldr	r2, [pc, #240]	@ (8002ae8 <HAL_SAI_MspInit+0x148>)
 80029f8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80029fc:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002a00:	4b39      	ldr	r3, [pc, #228]	@ (8002ae8 <HAL_SAI_MspInit+0x148>)
 8002a02:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002a06:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a0a:	60fb      	str	r3, [r7, #12]
 8002a0c:	68fb      	ldr	r3, [r7, #12]
    }
    SAI4_client ++;
 8002a0e:	4b35      	ldr	r3, [pc, #212]	@ (8002ae4 <HAL_SAI_MspInit+0x144>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	3301      	adds	r3, #1
 8002a14:	4a33      	ldr	r2, [pc, #204]	@ (8002ae4 <HAL_SAI_MspInit+0x144>)
 8002a16:	6013      	str	r3, [r2, #0]
    PE2     ------> SAI4_MCLK_A
    PD11     ------> SAI4_SD_A
    PD13     ------> SAI4_SCK_A
    PD12     ------> SAI4_FS_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002a18:	2304      	movs	r3, #4
 8002a1a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a1e:	2302      	movs	r3, #2
 8002a20:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a24:	2300      	movs	r3, #0
 8002a26:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF8_SAI4;
 8002a30:	2308      	movs	r3, #8
 8002a32:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002a36:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8002a3a:	4619      	mov	r1, r3
 8002a3c:	482b      	ldr	r0, [pc, #172]	@ (8002aec <HAL_SAI_MspInit+0x14c>)
 8002a3e:	f003 fd53 	bl	80064e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_12;
 8002a42:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8002a46:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a4a:	2302      	movs	r3, #2
 8002a4c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a50:	2300      	movs	r3, #0
 8002a52:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a56:	2300      	movs	r3, #0
 8002a58:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI4;
 8002a5c:	230a      	movs	r3, #10
 8002a5e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a62:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8002a66:	4619      	mov	r1, r3
 8002a68:	4821      	ldr	r0, [pc, #132]	@ (8002af0 <HAL_SAI_MspInit+0x150>)
 8002a6a:	f003 fd3d 	bl	80064e8 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai4_a.Instance = BDMA_Channel0;
 8002a6e:	4b21      	ldr	r3, [pc, #132]	@ (8002af4 <HAL_SAI_MspInit+0x154>)
 8002a70:	4a21      	ldr	r2, [pc, #132]	@ (8002af8 <HAL_SAI_MspInit+0x158>)
 8002a72:	601a      	str	r2, [r3, #0]
    hdma_sai4_a.Init.Request = BDMA_REQUEST_SAI4_A;
 8002a74:	4b1f      	ldr	r3, [pc, #124]	@ (8002af4 <HAL_SAI_MspInit+0x154>)
 8002a76:	220f      	movs	r2, #15
 8002a78:	605a      	str	r2, [r3, #4]
    hdma_sai4_a.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002a7a:	4b1e      	ldr	r3, [pc, #120]	@ (8002af4 <HAL_SAI_MspInit+0x154>)
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	609a      	str	r2, [r3, #8]
    hdma_sai4_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a80:	4b1c      	ldr	r3, [pc, #112]	@ (8002af4 <HAL_SAI_MspInit+0x154>)
 8002a82:	2200      	movs	r2, #0
 8002a84:	60da      	str	r2, [r3, #12]
    hdma_sai4_a.Init.MemInc = DMA_MINC_ENABLE;
 8002a86:	4b1b      	ldr	r3, [pc, #108]	@ (8002af4 <HAL_SAI_MspInit+0x154>)
 8002a88:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002a8c:	611a      	str	r2, [r3, #16]
    hdma_sai4_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002a8e:	4b19      	ldr	r3, [pc, #100]	@ (8002af4 <HAL_SAI_MspInit+0x154>)
 8002a90:	2200      	movs	r2, #0
 8002a92:	615a      	str	r2, [r3, #20]
    hdma_sai4_a.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002a94:	4b17      	ldr	r3, [pc, #92]	@ (8002af4 <HAL_SAI_MspInit+0x154>)
 8002a96:	2200      	movs	r2, #0
 8002a98:	619a      	str	r2, [r3, #24]
    hdma_sai4_a.Init.Mode = DMA_CIRCULAR;
 8002a9a:	4b16      	ldr	r3, [pc, #88]	@ (8002af4 <HAL_SAI_MspInit+0x154>)
 8002a9c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002aa0:	61da      	str	r2, [r3, #28]
    hdma_sai4_a.Init.Priority = DMA_PRIORITY_HIGH;
 8002aa2:	4b14      	ldr	r3, [pc, #80]	@ (8002af4 <HAL_SAI_MspInit+0x154>)
 8002aa4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002aa8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sai4_a) != HAL_OK)
 8002aaa:	4812      	ldr	r0, [pc, #72]	@ (8002af4 <HAL_SAI_MspInit+0x154>)
 8002aac:	f001 f95c 	bl	8003d68 <HAL_DMA_Init>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d001      	beq.n	8002aba <HAL_SAI_MspInit+0x11a>
    {
      Error_Handler();
 8002ab6:	f7ff fc71 	bl	800239c <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai4_a);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	4a0d      	ldr	r2, [pc, #52]	@ (8002af4 <HAL_SAI_MspInit+0x154>)
 8002abe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8002ac2:	4a0c      	ldr	r2, [pc, #48]	@ (8002af4 <HAL_SAI_MspInit+0x154>)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6393      	str	r3, [r2, #56]	@ 0x38
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai4_a);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	4a0a      	ldr	r2, [pc, #40]	@ (8002af4 <HAL_SAI_MspInit+0x154>)
 8002acc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8002ad0:	4a08      	ldr	r2, [pc, #32]	@ (8002af4 <HAL_SAI_MspInit+0x154>)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6393      	str	r3, [r2, #56]	@ 0x38
    }
}
 8002ad6:	bf00      	nop
 8002ad8:	37e0      	adds	r7, #224	@ 0xe0
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	bf00      	nop
 8002ae0:	58005404 	.word	0x58005404
 8002ae4:	24000340 	.word	0x24000340
 8002ae8:	58024400 	.word	0x58024400
 8002aec:	58021000 	.word	0x58021000
 8002af0:	58020c00 	.word	0x58020c00
 8002af4:	240002c8 	.word	0x240002c8
 8002af8:	58025408 	.word	0x58025408

08002afc <MX_SDMMC1_SD_Init>:
SD_HandleTypeDef hsd1;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8002b00:	4b0e      	ldr	r3, [pc, #56]	@ (8002b3c <MX_SDMMC1_SD_Init+0x40>)
 8002b02:	4a0f      	ldr	r2, [pc, #60]	@ (8002b40 <MX_SDMMC1_SD_Init+0x44>)
 8002b04:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8002b06:	4b0d      	ldr	r3, [pc, #52]	@ (8002b3c <MX_SDMMC1_SD_Init+0x40>)
 8002b08:	2200      	movs	r2, #0
 8002b0a:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8002b0c:	4b0b      	ldr	r3, [pc, #44]	@ (8002b3c <MX_SDMMC1_SD_Init+0x40>)
 8002b0e:	2200      	movs	r2, #0
 8002b10:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8002b12:	4b0a      	ldr	r3, [pc, #40]	@ (8002b3c <MX_SDMMC1_SD_Init+0x40>)
 8002b14:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002b18:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8002b1a:	4b08      	ldr	r3, [pc, #32]	@ (8002b3c <MX_SDMMC1_SD_Init+0x40>)
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 10;
 8002b20:	4b06      	ldr	r3, [pc, #24]	@ (8002b3c <MX_SDMMC1_SD_Init+0x40>)
 8002b22:	220a      	movs	r2, #10
 8002b24:	615a      	str	r2, [r3, #20]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 8002b26:	4805      	ldr	r0, [pc, #20]	@ (8002b3c <MX_SDMMC1_SD_Init+0x40>)
 8002b28:	f00b fa30 	bl	800df8c <HAL_SD_Init>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d001      	beq.n	8002b36 <MX_SDMMC1_SD_Init+0x3a>
  {
    Error_Handler();
 8002b32:	f7ff fc33 	bl	800239c <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8002b36:	bf00      	nop
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	bf00      	nop
 8002b3c:	24000344 	.word	0x24000344
 8002b40:	52007000 	.word	0x52007000

08002b44 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b0ba      	sub	sp, #232	@ 0xe8
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b4c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002b50:	2200      	movs	r2, #0
 8002b52:	601a      	str	r2, [r3, #0]
 8002b54:	605a      	str	r2, [r3, #4]
 8002b56:	609a      	str	r2, [r3, #8]
 8002b58:	60da      	str	r2, [r3, #12]
 8002b5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002b5c:	f107 0318 	add.w	r3, r7, #24
 8002b60:	22b8      	movs	r2, #184	@ 0xb8
 8002b62:	2100      	movs	r1, #0
 8002b64:	4618      	mov	r0, r3
 8002b66:	f01c fad3 	bl	801f110 <memset>
  if(sdHandle->Instance==SDMMC1)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a43      	ldr	r2, [pc, #268]	@ (8002c7c <HAL_SD_MspInit+0x138>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d17f      	bne.n	8002c74 <HAL_SD_MspInit+0x130>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8002b74:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002b78:	f04f 0300 	mov.w	r3, #0
 8002b7c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8002b80:	2300      	movs	r3, #0
 8002b82:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002b84:	f107 0318 	add.w	r3, r7, #24
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f007 fc1f 	bl	800a3cc <HAL_RCCEx_PeriphCLKConfig>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d001      	beq.n	8002b98 <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 8002b94:	f7ff fc02 	bl	800239c <Error_Handler>
    }

    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8002b98:	4b39      	ldr	r3, [pc, #228]	@ (8002c80 <HAL_SD_MspInit+0x13c>)
 8002b9a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8002b9e:	4a38      	ldr	r2, [pc, #224]	@ (8002c80 <HAL_SD_MspInit+0x13c>)
 8002ba0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ba4:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8002ba8:	4b35      	ldr	r3, [pc, #212]	@ (8002c80 <HAL_SD_MspInit+0x13c>)
 8002baa:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8002bae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002bb2:	617b      	str	r3, [r7, #20]
 8002bb4:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002bb6:	4b32      	ldr	r3, [pc, #200]	@ (8002c80 <HAL_SD_MspInit+0x13c>)
 8002bb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002bbc:	4a30      	ldr	r2, [pc, #192]	@ (8002c80 <HAL_SD_MspInit+0x13c>)
 8002bbe:	f043 0304 	orr.w	r3, r3, #4
 8002bc2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002bc6:	4b2e      	ldr	r3, [pc, #184]	@ (8002c80 <HAL_SD_MspInit+0x13c>)
 8002bc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002bcc:	f003 0304 	and.w	r3, r3, #4
 8002bd0:	613b      	str	r3, [r7, #16]
 8002bd2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002bd4:	4b2a      	ldr	r3, [pc, #168]	@ (8002c80 <HAL_SD_MspInit+0x13c>)
 8002bd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002bda:	4a29      	ldr	r2, [pc, #164]	@ (8002c80 <HAL_SD_MspInit+0x13c>)
 8002bdc:	f043 0308 	orr.w	r3, r3, #8
 8002be0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002be4:	4b26      	ldr	r3, [pc, #152]	@ (8002c80 <HAL_SD_MspInit+0x13c>)
 8002be6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002bea:	f003 0308 	and.w	r3, r3, #8
 8002bee:	60fb      	str	r3, [r7, #12]
 8002bf0:	68fb      	ldr	r3, [r7, #12]
    PC11     ------> SDMMC1_D3
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002bf2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002bf6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bfa:	2302      	movs	r3, #2
 8002bfc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c00:	2300      	movs	r3, #0
 8002c02:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c06:	2303      	movs	r3, #3
 8002c08:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002c0c:	230c      	movs	r3, #12
 8002c0e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c12:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002c16:	4619      	mov	r1, r3
 8002c18:	481a      	ldr	r0, [pc, #104]	@ (8002c84 <HAL_SD_MspInit+0x140>)
 8002c1a:	f003 fc65 	bl	80064e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_9|GPIO_PIN_8;
 8002c1e:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8002c22:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c26:	2302      	movs	r3, #2
 8002c28:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c32:	2303      	movs	r3, #3
 8002c34:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002c38:	230c      	movs	r3, #12
 8002c3a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c3e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002c42:	4619      	mov	r1, r3
 8002c44:	480f      	ldr	r0, [pc, #60]	@ (8002c84 <HAL_SD_MspInit+0x140>)
 8002c46:	f003 fc4f 	bl	80064e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002c4a:	2304      	movs	r3, #4
 8002c4c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c50:	2302      	movs	r3, #2
 8002c52:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c56:	2301      	movs	r3, #1
 8002c58:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c5c:	2303      	movs	r3, #3
 8002c5e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002c62:	230c      	movs	r3, #12
 8002c64:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c68:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002c6c:	4619      	mov	r1, r3
 8002c6e:	4806      	ldr	r0, [pc, #24]	@ (8002c88 <HAL_SD_MspInit+0x144>)
 8002c70:	f003 fc3a 	bl	80064e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 8002c74:	bf00      	nop
 8002c76:	37e8      	adds	r7, #232	@ 0xe8
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}
 8002c7c:	52007000 	.word	0x52007000
 8002c80:	58024400 	.word	0x58024400
 8002c84:	58020800 	.word	0x58020800
 8002c88:	58020c00 	.word	0x58020c00

08002c8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b082      	sub	sp, #8
 8002c90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c92:	4b0c      	ldr	r3, [pc, #48]	@ (8002cc4 <HAL_MspInit+0x38>)
 8002c94:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002c98:	4a0a      	ldr	r2, [pc, #40]	@ (8002cc4 <HAL_MspInit+0x38>)
 8002c9a:	f043 0302 	orr.w	r3, r3, #2
 8002c9e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002ca2:	4b08      	ldr	r3, [pc, #32]	@ (8002cc4 <HAL_MspInit+0x38>)
 8002ca4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002ca8:	f003 0302 	and.w	r3, r3, #2
 8002cac:	607b      	str	r3, [r7, #4]
 8002cae:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	210f      	movs	r1, #15
 8002cb4:	f06f 0001 	mvn.w	r0, #1
 8002cb8:	f000 fe66 	bl	8003988 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002cbc:	bf00      	nop
 8002cbe:	3708      	adds	r7, #8
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}
 8002cc4:	58024400 	.word	0x58024400

08002cc8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b08e      	sub	sp, #56	@ 0x38
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  /*Configure the TIM1 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2b0f      	cmp	r3, #15
 8002cd4:	d844      	bhi.n	8002d60 <HAL_InitTick+0x98>
   {
     HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	6879      	ldr	r1, [r7, #4]
 8002cda:	2019      	movs	r0, #25
 8002cdc:	f000 fe54 	bl	8003988 <HAL_NVIC_SetPriority>

     /* Enable the TIM1 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8002ce0:	2019      	movs	r0, #25
 8002ce2:	f000 fe7b 	bl	80039dc <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 8002ce6:	4a24      	ldr	r2, [pc, #144]	@ (8002d78 <HAL_InitTick+0xb0>)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002cec:	4b23      	ldr	r3, [pc, #140]	@ (8002d7c <HAL_InitTick+0xb4>)
 8002cee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002cf2:	4a22      	ldr	r2, [pc, #136]	@ (8002d7c <HAL_InitTick+0xb4>)
 8002cf4:	f043 0301 	orr.w	r3, r3, #1
 8002cf8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002cfc:	4b1f      	ldr	r3, [pc, #124]	@ (8002d7c <HAL_InitTick+0xb4>)
 8002cfe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002d02:	f003 0301 	and.w	r3, r3, #1
 8002d06:	60bb      	str	r3, [r7, #8]
 8002d08:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002d0a:	f107 020c 	add.w	r2, r7, #12
 8002d0e:	f107 0310 	add.w	r3, r7, #16
 8002d12:	4611      	mov	r1, r2
 8002d14:	4618      	mov	r0, r3
 8002d16:	f007 fb17 	bl	800a348 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8002d1a:	f007 faff 	bl	800a31c <HAL_RCC_GetPCLK2Freq>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	005b      	lsls	r3, r3, #1
 8002d22:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002d24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d26:	4a16      	ldr	r2, [pc, #88]	@ (8002d80 <HAL_InitTick+0xb8>)
 8002d28:	fba2 2303 	umull	r2, r3, r2, r3
 8002d2c:	0c9b      	lsrs	r3, r3, #18
 8002d2e:	3b01      	subs	r3, #1
 8002d30:	633b      	str	r3, [r7, #48]	@ 0x30

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002d32:	4b14      	ldr	r3, [pc, #80]	@ (8002d84 <HAL_InitTick+0xbc>)
 8002d34:	4a14      	ldr	r2, [pc, #80]	@ (8002d88 <HAL_InitTick+0xc0>)
 8002d36:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8002d38:	4b12      	ldr	r3, [pc, #72]	@ (8002d84 <HAL_InitTick+0xbc>)
 8002d3a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002d3e:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002d40:	4a10      	ldr	r2, [pc, #64]	@ (8002d84 <HAL_InitTick+0xbc>)
 8002d42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d44:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002d46:	4b0f      	ldr	r3, [pc, #60]	@ (8002d84 <HAL_InitTick+0xbc>)
 8002d48:	2200      	movs	r2, #0
 8002d4a:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d4c:	4b0d      	ldr	r3, [pc, #52]	@ (8002d84 <HAL_InitTick+0xbc>)
 8002d4e:	2200      	movs	r2, #0
 8002d50:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8002d52:	480c      	ldr	r0, [pc, #48]	@ (8002d84 <HAL_InitTick+0xbc>)
 8002d54:	f00c fd3a 	bl	800f7cc <HAL_TIM_Base_Init>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d107      	bne.n	8002d6e <HAL_InitTick+0xa6>
 8002d5e:	e001      	b.n	8002d64 <HAL_InitTick+0x9c>
    return HAL_ERROR;
 8002d60:	2301      	movs	r3, #1
 8002d62:	e005      	b.n	8002d70 <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8002d64:	4807      	ldr	r0, [pc, #28]	@ (8002d84 <HAL_InitTick+0xbc>)
 8002d66:	f00c fe73 	bl	800fa50 <HAL_TIM_Base_Start_IT>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	e000      	b.n	8002d70 <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	3738      	adds	r7, #56	@ 0x38
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}
 8002d78:	2400000c 	.word	0x2400000c
 8002d7c:	58024400 	.word	0x58024400
 8002d80:	431bde83 	.word	0x431bde83
 8002d84:	240003c0 	.word	0x240003c0
 8002d88:	40010000 	.word	0x40010000

08002d8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002d90:	bf00      	nop
 8002d92:	e7fd      	b.n	8002d90 <NMI_Handler+0x4>

08002d94 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d94:	b480      	push	{r7}
 8002d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
  __asm volatile
 8002d98:	f01e 0f04 	tst.w	lr, #4
 8002d9c:	bf0c      	ite	eq
 8002d9e:	f3ef 8008 	mrseq	r0, MSP
 8002da2:	f3ef 8009 	mrsne	r0, PSP
 8002da6:	6981      	ldr	r1, [r0, #24]
 8002da8:	4a00      	ldr	r2, [pc, #0]	@ (8002dac <handler_address_const>)
 8002daa:	4710      	bx	r2

08002dac <handler_address_const>:
 8002dac:	08001205 	.word	0x08001205
      " ldr r2, handler_address_const                             \n"
      " bx r2                                                     \n"
      " handler_address_const: .word fault_handler_c              \n"
  );
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002db0:	bf00      	nop
 8002db2:	e7fd      	b.n	8002db0 <handler_address_const+0x4>

08002db4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002db4:	b480      	push	{r7}
 8002db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */
  __asm volatile
 8002db8:	f01e 0f04 	tst.w	lr, #4
 8002dbc:	bf0c      	ite	eq
 8002dbe:	f3ef 8008 	mrseq	r0, MSP
 8002dc2:	f3ef 8009 	mrsne	r0, PSP
 8002dc6:	6981      	ldr	r1, [r0, #24]
 8002dc8:	4a00      	ldr	r2, [pc, #0]	@ (8002dcc <memmanage_handler_address_const>)
 8002dca:	4710      	bx	r2

08002dcc <memmanage_handler_address_const>:
 8002dcc:	08001205 	.word	0x08001205
      " ldr r2, memmanage_handler_address_const                   \n"
      " bx r2                                                     \n"
      " memmanage_handler_address_const: .word fault_handler_c    \n"
  );
  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002dd0:	bf00      	nop
 8002dd2:	e7fd      	b.n	8002dd0 <memmanage_handler_address_const+0x4>

08002dd4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */
  __asm volatile
 8002dd8:	f01e 0f04 	tst.w	lr, #4
 8002ddc:	bf0c      	ite	eq
 8002dde:	f3ef 8008 	mrseq	r0, MSP
 8002de2:	f3ef 8009 	mrsne	r0, PSP
 8002de6:	6981      	ldr	r1, [r0, #24]
 8002de8:	4a00      	ldr	r2, [pc, #0]	@ (8002dec <busfault_handler_address_const>)
 8002dea:	4710      	bx	r2

08002dec <busfault_handler_address_const>:
 8002dec:	08001205 	.word	0x08001205
      " ldr r2, busfault_handler_address_const                    \n"
      " bx r2                                                     \n"
      " busfault_handler_address_const: .word fault_handler_c     \n"
  );
  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002df0:	bf00      	nop
 8002df2:	e7fd      	b.n	8002df0 <busfault_handler_address_const+0x4>

08002df4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002df4:	b480      	push	{r7}
 8002df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */
  __asm volatile
 8002df8:	f01e 0f04 	tst.w	lr, #4
 8002dfc:	bf0c      	ite	eq
 8002dfe:	f3ef 8008 	mrseq	r0, MSP
 8002e02:	f3ef 8009 	mrsne	r0, PSP
 8002e06:	6981      	ldr	r1, [r0, #24]
 8002e08:	4a00      	ldr	r2, [pc, #0]	@ (8002e0c <usagefault_handler_address_const>)
 8002e0a:	4710      	bx	r2

08002e0c <usagefault_handler_address_const>:
 8002e0c:	08001205 	.word	0x08001205
      " ldr r2, usagefault_handler_address_const                  \n"
      " bx r2                                                     \n"
      " usagefault_handler_address_const: .word fault_handler_c   \n"
  );
  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e10:	bf00      	nop
 8002e12:	e7fd      	b.n	8002e10 <usagefault_handler_address_const+0x4>

08002e14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002e14:	b480      	push	{r7}
 8002e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DebugMonitor_IRQn 0 */
  __asm volatile
 8002e18:	f01e 0f04 	tst.w	lr, #4
 8002e1c:	bf0c      	ite	eq
 8002e1e:	f3ef 8008 	mrseq	r0, MSP
 8002e22:	f3ef 8009 	mrsne	r0, PSP
 8002e26:	6981      	ldr	r1, [r0, #24]
 8002e28:	4a00      	ldr	r2, [pc, #0]	@ (8002e2c <debugmon_handler_address_const>)
 8002e2a:	4710      	bx	r2

08002e2c <debugmon_handler_address_const>:
 8002e2c:	08001205 	.word	0x08001205
  );
  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002e30:	bf00      	nop
 8002e32:	46bd      	mov	sp, r7
 8002e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e38:	4770      	bx	lr
	...

08002e3c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002e40:	4802      	ldr	r0, [pc, #8]	@ (8002e4c <TIM1_UP_IRQHandler+0x10>)
 8002e42:	f00c feeb 	bl	800fc1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8002e46:	bf00      	nop
 8002e48:	bd80      	pop	{r7, pc}
 8002e4a:	bf00      	nop
 8002e4c:	240003c0 	.word	0x240003c0

08002e50 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002e54:	4802      	ldr	r0, [pc, #8]	@ (8002e60 <USART3_IRQHandler+0x10>)
 8002e56:	f00d fa9b 	bl	8010390 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002e5a:	bf00      	nop
 8002e5c:	bd80      	pop	{r7, pc}
 8002e5e:	bf00      	nop
 8002e60:	24000410 	.word	0x24000410

08002e64 <OTG_HS_EP1_OUT_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS End Point 1 Out global interrupt.
  */
void OTG_HS_EP1_OUT_IRQHandler(void)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_EP1_OUT_IRQn 0 */

  /* USER CODE END OTG_HS_EP1_OUT_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8002e68:	4802      	ldr	r0, [pc, #8]	@ (8002e74 <OTG_HS_EP1_OUT_IRQHandler+0x10>)
 8002e6a:	f004 fef9 	bl	8007c60 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_EP1_OUT_IRQn 1 */

  /* USER CODE END OTG_HS_EP1_OUT_IRQn 1 */
}
 8002e6e:	bf00      	nop
 8002e70:	bd80      	pop	{r7, pc}
 8002e72:	bf00      	nop
 8002e74:	24009590 	.word	0x24009590

08002e78 <OTG_HS_EP1_IN_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS End Point 1 In global interrupt.
  */
void OTG_HS_EP1_IN_IRQHandler(void)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_EP1_IN_IRQn 0 */

  /* USER CODE END OTG_HS_EP1_IN_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8002e7c:	4802      	ldr	r0, [pc, #8]	@ (8002e88 <OTG_HS_EP1_IN_IRQHandler+0x10>)
 8002e7e:	f004 feef 	bl	8007c60 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_EP1_IN_IRQn 1 */

  /* USER CODE END OTG_HS_EP1_IN_IRQn 1 */
}
 8002e82:	bf00      	nop
 8002e84:	bd80      	pop	{r7, pc}
 8002e86:	bf00      	nop
 8002e88:	24009590 	.word	0x24009590

08002e8c <OTG_HS_WKUP_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS wake-up interrupt through EXTI line.
  */
void OTG_HS_WKUP_IRQHandler(void)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_WKUP_IRQn 0 */

  /* USER CODE END OTG_HS_WKUP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8002e90:	4802      	ldr	r0, [pc, #8]	@ (8002e9c <OTG_HS_WKUP_IRQHandler+0x10>)
 8002e92:	f004 fee5 	bl	8007c60 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_WKUP_IRQn 1 */

  /* USER CODE END OTG_HS_WKUP_IRQn 1 */
}
 8002e96:	bf00      	nop
 8002e98:	bd80      	pop	{r7, pc}
 8002e9a:	bf00      	nop
 8002e9c:	24009590 	.word	0x24009590

08002ea0 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8002ea4:	4802      	ldr	r0, [pc, #8]	@ (8002eb0 <OTG_HS_IRQHandler+0x10>)
 8002ea6:	f004 fedb 	bl	8007c60 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8002eaa:	bf00      	nop
 8002eac:	bd80      	pop	{r7, pc}
 8002eae:	bf00      	nop
 8002eb0:	24009590 	.word	0x24009590

08002eb4 <BDMA_Channel0_IRQHandler>:

/**
  * @brief This function handles BDMA channel0 global interrupt.
  */
void BDMA_Channel0_IRQHandler(void)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BDMA_Channel0_IRQn 0 */

  /* USER CODE END BDMA_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai4_a);
 8002eb8:	4802      	ldr	r0, [pc, #8]	@ (8002ec4 <BDMA_Channel0_IRQHandler+0x10>)
 8002eba:	f002 f9af 	bl	800521c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN BDMA_Channel0_IRQn 1 */

  /* USER CODE END BDMA_Channel0_IRQn 1 */
}
 8002ebe:	bf00      	nop
 8002ec0:	bd80      	pop	{r7, pc}
 8002ec2:	bf00      	nop
 8002ec4:	240002c8 	.word	0x240002c8

08002ec8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b086      	sub	sp, #24
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002ed0:	4a14      	ldr	r2, [pc, #80]	@ (8002f24 <_sbrk+0x5c>)
 8002ed2:	4b15      	ldr	r3, [pc, #84]	@ (8002f28 <_sbrk+0x60>)
 8002ed4:	1ad3      	subs	r3, r2, r3
 8002ed6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002edc:	4b13      	ldr	r3, [pc, #76]	@ (8002f2c <_sbrk+0x64>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d102      	bne.n	8002eea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002ee4:	4b11      	ldr	r3, [pc, #68]	@ (8002f2c <_sbrk+0x64>)
 8002ee6:	4a12      	ldr	r2, [pc, #72]	@ (8002f30 <_sbrk+0x68>)
 8002ee8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002eea:	4b10      	ldr	r3, [pc, #64]	@ (8002f2c <_sbrk+0x64>)
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	4413      	add	r3, r2
 8002ef2:	693a      	ldr	r2, [r7, #16]
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	d207      	bcs.n	8002f08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002ef8:	f01c f992 	bl	801f220 <__errno>
 8002efc:	4603      	mov	r3, r0
 8002efe:	220c      	movs	r2, #12
 8002f00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002f02:	f04f 33ff 	mov.w	r3, #4294967295
 8002f06:	e009      	b.n	8002f1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002f08:	4b08      	ldr	r3, [pc, #32]	@ (8002f2c <_sbrk+0x64>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002f0e:	4b07      	ldr	r3, [pc, #28]	@ (8002f2c <_sbrk+0x64>)
 8002f10:	681a      	ldr	r2, [r3, #0]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	4413      	add	r3, r2
 8002f16:	4a05      	ldr	r2, [pc, #20]	@ (8002f2c <_sbrk+0x64>)
 8002f18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	3718      	adds	r7, #24
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bd80      	pop	{r7, pc}
 8002f24:	24050000 	.word	0x24050000
 8002f28:	00001000 	.word	0x00001000
 8002f2c:	2400040c 	.word	0x2400040c
 8002f30:	24009bb8 	.word	0x24009bb8

08002f34 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002f34:	b480      	push	{r7}
 8002f36:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002f38:	4b3e      	ldr	r3, [pc, #248]	@ (8003034 <SystemInit+0x100>)
 8002f3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f3e:	4a3d      	ldr	r2, [pc, #244]	@ (8003034 <SystemInit+0x100>)
 8002f40:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002f44:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002f48:	4b3b      	ldr	r3, [pc, #236]	@ (8003038 <SystemInit+0x104>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f003 030f 	and.w	r3, r3, #15
 8002f50:	2b06      	cmp	r3, #6
 8002f52:	d807      	bhi.n	8002f64 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002f54:	4b38      	ldr	r3, [pc, #224]	@ (8003038 <SystemInit+0x104>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f023 030f 	bic.w	r3, r3, #15
 8002f5c:	4a36      	ldr	r2, [pc, #216]	@ (8003038 <SystemInit+0x104>)
 8002f5e:	f043 0307 	orr.w	r3, r3, #7
 8002f62:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002f64:	4b35      	ldr	r3, [pc, #212]	@ (800303c <SystemInit+0x108>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a34      	ldr	r2, [pc, #208]	@ (800303c <SystemInit+0x108>)
 8002f6a:	f043 0301 	orr.w	r3, r3, #1
 8002f6e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002f70:	4b32      	ldr	r3, [pc, #200]	@ (800303c <SystemInit+0x108>)
 8002f72:	2200      	movs	r2, #0
 8002f74:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002f76:	4b31      	ldr	r3, [pc, #196]	@ (800303c <SystemInit+0x108>)
 8002f78:	681a      	ldr	r2, [r3, #0]
 8002f7a:	4930      	ldr	r1, [pc, #192]	@ (800303c <SystemInit+0x108>)
 8002f7c:	4b30      	ldr	r3, [pc, #192]	@ (8003040 <SystemInit+0x10c>)
 8002f7e:	4013      	ands	r3, r2
 8002f80:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002f82:	4b2d      	ldr	r3, [pc, #180]	@ (8003038 <SystemInit+0x104>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f003 0308 	and.w	r3, r3, #8
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d007      	beq.n	8002f9e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002f8e:	4b2a      	ldr	r3, [pc, #168]	@ (8003038 <SystemInit+0x104>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f023 030f 	bic.w	r3, r3, #15
 8002f96:	4a28      	ldr	r2, [pc, #160]	@ (8003038 <SystemInit+0x104>)
 8002f98:	f043 0307 	orr.w	r3, r3, #7
 8002f9c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002f9e:	4b27      	ldr	r3, [pc, #156]	@ (800303c <SystemInit+0x108>)
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002fa4:	4b25      	ldr	r3, [pc, #148]	@ (800303c <SystemInit+0x108>)
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002faa:	4b24      	ldr	r3, [pc, #144]	@ (800303c <SystemInit+0x108>)
 8002fac:	2200      	movs	r2, #0
 8002fae:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002fb0:	4b22      	ldr	r3, [pc, #136]	@ (800303c <SystemInit+0x108>)
 8002fb2:	4a24      	ldr	r2, [pc, #144]	@ (8003044 <SystemInit+0x110>)
 8002fb4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002fb6:	4b21      	ldr	r3, [pc, #132]	@ (800303c <SystemInit+0x108>)
 8002fb8:	4a23      	ldr	r2, [pc, #140]	@ (8003048 <SystemInit+0x114>)
 8002fba:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002fbc:	4b1f      	ldr	r3, [pc, #124]	@ (800303c <SystemInit+0x108>)
 8002fbe:	4a23      	ldr	r2, [pc, #140]	@ (800304c <SystemInit+0x118>)
 8002fc0:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002fc2:	4b1e      	ldr	r3, [pc, #120]	@ (800303c <SystemInit+0x108>)
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002fc8:	4b1c      	ldr	r3, [pc, #112]	@ (800303c <SystemInit+0x108>)
 8002fca:	4a20      	ldr	r2, [pc, #128]	@ (800304c <SystemInit+0x118>)
 8002fcc:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002fce:	4b1b      	ldr	r3, [pc, #108]	@ (800303c <SystemInit+0x108>)
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002fd4:	4b19      	ldr	r3, [pc, #100]	@ (800303c <SystemInit+0x108>)
 8002fd6:	4a1d      	ldr	r2, [pc, #116]	@ (800304c <SystemInit+0x118>)
 8002fd8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002fda:	4b18      	ldr	r3, [pc, #96]	@ (800303c <SystemInit+0x108>)
 8002fdc:	2200      	movs	r2, #0
 8002fde:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002fe0:	4b16      	ldr	r3, [pc, #88]	@ (800303c <SystemInit+0x108>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a15      	ldr	r2, [pc, #84]	@ (800303c <SystemInit+0x108>)
 8002fe6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002fea:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002fec:	4b13      	ldr	r3, [pc, #76]	@ (800303c <SystemInit+0x108>)
 8002fee:	2200      	movs	r2, #0
 8002ff0:	661a      	str	r2, [r3, #96]	@ 0x60
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8002ff2:	4b12      	ldr	r3, [pc, #72]	@ (800303c <SystemInit+0x108>)
 8002ff4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8002ff8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d113      	bne.n	8003028 <SystemInit+0xf4>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8003000:	4b0e      	ldr	r3, [pc, #56]	@ (800303c <SystemInit+0x108>)
 8003002:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8003006:	4a0d      	ldr	r2, [pc, #52]	@ (800303c <SystemInit+0x108>)
 8003008:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800300c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003010:	4b0f      	ldr	r3, [pc, #60]	@ (8003050 <SystemInit+0x11c>)
 8003012:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8003016:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8003018:	4b08      	ldr	r3, [pc, #32]	@ (800303c <SystemInit+0x108>)
 800301a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800301e:	4a07      	ldr	r2, [pc, #28]	@ (800303c <SystemInit+0x108>)
 8003020:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003024:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8003028:	bf00      	nop
 800302a:	46bd      	mov	sp, r7
 800302c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003030:	4770      	bx	lr
 8003032:	bf00      	nop
 8003034:	e000ed00 	.word	0xe000ed00
 8003038:	52002000 	.word	0x52002000
 800303c:	58024400 	.word	0x58024400
 8003040:	eaf6ed7f 	.word	0xeaf6ed7f
 8003044:	02020200 	.word	0x02020200
 8003048:	01ff0000 	.word	0x01ff0000
 800304c:	01010280 	.word	0x01010280
 8003050:	52004000 	.word	0x52004000

08003054 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 8003054:	b480      	push	{r7}
 8003056:	b08b      	sub	sp, #44	@ 0x2c
 8003058:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;


  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800305a:	4bb1      	ldr	r3, [pc, #708]	@ (8003320 <SystemCoreClockUpdate+0x2cc>)
 800305c:	691b      	ldr	r3, [r3, #16]
 800305e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003062:	2b18      	cmp	r3, #24
 8003064:	f200 812e 	bhi.w	80032c4 <SystemCoreClockUpdate+0x270>
 8003068:	a201      	add	r2, pc, #4	@ (adr r2, 8003070 <SystemCoreClockUpdate+0x1c>)
 800306a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800306e:	bf00      	nop
 8003070:	080030d5 	.word	0x080030d5
 8003074:	080032c5 	.word	0x080032c5
 8003078:	080032c5 	.word	0x080032c5
 800307c:	080032c5 	.word	0x080032c5
 8003080:	080032c5 	.word	0x080032c5
 8003084:	080032c5 	.word	0x080032c5
 8003088:	080032c5 	.word	0x080032c5
 800308c:	080032c5 	.word	0x080032c5
 8003090:	080030e9 	.word	0x080030e9
 8003094:	080032c5 	.word	0x080032c5
 8003098:	080032c5 	.word	0x080032c5
 800309c:	080032c5 	.word	0x080032c5
 80030a0:	080032c5 	.word	0x080032c5
 80030a4:	080032c5 	.word	0x080032c5
 80030a8:	080032c5 	.word	0x080032c5
 80030ac:	080032c5 	.word	0x080032c5
 80030b0:	080030ef 	.word	0x080030ef
 80030b4:	080032c5 	.word	0x080032c5
 80030b8:	080032c5 	.word	0x080032c5
 80030bc:	080032c5 	.word	0x080032c5
 80030c0:	080032c5 	.word	0x080032c5
 80030c4:	080032c5 	.word	0x080032c5
 80030c8:	080032c5 	.word	0x080032c5
 80030cc:	080032c5 	.word	0x080032c5
 80030d0:	080030f5 	.word	0x080030f5
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    common_system_clock = (uint32_t) (HSI_VALUE >> ((RCC->CR & RCC_CR_HSIDIV)>> 3));
 80030d4:	4b92      	ldr	r3, [pc, #584]	@ (8003320 <SystemCoreClockUpdate+0x2cc>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	08db      	lsrs	r3, r3, #3
 80030da:	f003 0303 	and.w	r3, r3, #3
 80030de:	4a91      	ldr	r2, [pc, #580]	@ (8003324 <SystemCoreClockUpdate+0x2d0>)
 80030e0:	fa22 f303 	lsr.w	r3, r2, r3
 80030e4:	627b      	str	r3, [r7, #36]	@ 0x24
    break;
 80030e6:	e0f7      	b.n	80032d8 <SystemCoreClockUpdate+0x284>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    common_system_clock = CSI_VALUE;
 80030e8:	4b8f      	ldr	r3, [pc, #572]	@ (8003328 <SystemCoreClockUpdate+0x2d4>)
 80030ea:	627b      	str	r3, [r7, #36]	@ 0x24
    break;
 80030ec:	e0f4      	b.n	80032d8 <SystemCoreClockUpdate+0x284>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    common_system_clock = HSE_VALUE;
 80030ee:	4b8f      	ldr	r3, [pc, #572]	@ (800332c <SystemCoreClockUpdate+0x2d8>)
 80030f0:	627b      	str	r3, [r7, #36]	@ 0x24
    break;
 80030f2:	e0f1      	b.n	80032d8 <SystemCoreClockUpdate+0x284>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80030f4:	4b8a      	ldr	r3, [pc, #552]	@ (8003320 <SystemCoreClockUpdate+0x2cc>)
 80030f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030f8:	f003 0303 	and.w	r3, r3, #3
 80030fc:	61fb      	str	r3, [r7, #28]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80030fe:	4b88      	ldr	r3, [pc, #544]	@ (8003320 <SystemCoreClockUpdate+0x2cc>)
 8003100:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003102:	091b      	lsrs	r3, r3, #4
 8003104:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003108:	61bb      	str	r3, [r7, #24]
    pllfracen = ((RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800310a:	4b85      	ldr	r3, [pc, #532]	@ (8003320 <SystemCoreClockUpdate+0x2cc>)
 800310c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800310e:	f003 0301 	and.w	r3, r3, #1
 8003112:	617b      	str	r3, [r7, #20]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003114:	4b82      	ldr	r3, [pc, #520]	@ (8003320 <SystemCoreClockUpdate+0x2cc>)
 8003116:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003118:	08db      	lsrs	r3, r3, #3
 800311a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800311e:	697a      	ldr	r2, [r7, #20]
 8003120:	fb02 f303 	mul.w	r3, r2, r3
 8003124:	ee07 3a90 	vmov	s15, r3
 8003128:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800312c:	edc7 7a04 	vstr	s15, [r7, #16]

    if (pllm != 0U)
 8003130:	69bb      	ldr	r3, [r7, #24]
 8003132:	2b00      	cmp	r3, #0
 8003134:	f000 80c3 	beq.w	80032be <SystemCoreClockUpdate+0x26a>
    {
      switch (pllsource)
 8003138:	69fb      	ldr	r3, [r7, #28]
 800313a:	2b02      	cmp	r3, #2
 800313c:	d059      	beq.n	80031f2 <SystemCoreClockUpdate+0x19e>
 800313e:	69fb      	ldr	r3, [r7, #28]
 8003140:	2b02      	cmp	r3, #2
 8003142:	d878      	bhi.n	8003236 <SystemCoreClockUpdate+0x1e2>
 8003144:	69fb      	ldr	r3, [r7, #28]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d003      	beq.n	8003152 <SystemCoreClockUpdate+0xfe>
 800314a:	69fb      	ldr	r3, [r7, #28]
 800314c:	2b01      	cmp	r3, #1
 800314e:	d02e      	beq.n	80031ae <SystemCoreClockUpdate+0x15a>
 8003150:	e071      	b.n	8003236 <SystemCoreClockUpdate+0x1e2>
      {
        case RCC_PLLCKSELR_PLLSRC_HSI:  /* HSI used as PLL clock source */

        hsivalue = (HSI_VALUE >> ((RCC->CR & RCC_CR_HSIDIV)>> 3)) ;
 8003152:	4b73      	ldr	r3, [pc, #460]	@ (8003320 <SystemCoreClockUpdate+0x2cc>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	08db      	lsrs	r3, r3, #3
 8003158:	f003 0303 	and.w	r3, r3, #3
 800315c:	4a71      	ldr	r2, [pc, #452]	@ (8003324 <SystemCoreClockUpdate+0x2d0>)
 800315e:	fa22 f303 	lsr.w	r3, r2, r3
 8003162:	60fb      	str	r3, [r7, #12]
        pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	ee07 3a90 	vmov	s15, r3
 800316a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800316e:	69bb      	ldr	r3, [r7, #24]
 8003170:	ee07 3a90 	vmov	s15, r3
 8003174:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003178:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800317c:	4b68      	ldr	r3, [pc, #416]	@ (8003320 <SystemCoreClockUpdate+0x2cc>)
 800317e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003180:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003184:	ee07 3a90 	vmov	s15, r3
 8003188:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800318c:	ed97 6a04 	vldr	s12, [r7, #16]
 8003190:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8003330 <SystemCoreClockUpdate+0x2dc>
 8003194:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003198:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800319c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80031a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80031a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031a8:	edc7 7a08 	vstr	s15, [r7, #32]

        break;
 80031ac:	e071      	b.n	8003292 <SystemCoreClockUpdate+0x23e>

        case RCC_PLLCKSELR_PLLSRC_CSI:  /* CSI used as PLL clock source */
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80031ae:	69bb      	ldr	r3, [r7, #24]
 80031b0:	ee07 3a90 	vmov	s15, r3
 80031b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031b8:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8003334 <SystemCoreClockUpdate+0x2e0>
 80031bc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80031c0:	4b57      	ldr	r3, [pc, #348]	@ (8003320 <SystemCoreClockUpdate+0x2cc>)
 80031c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031c8:	ee07 3a90 	vmov	s15, r3
 80031cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80031d0:	ed97 6a04 	vldr	s12, [r7, #16]
 80031d4:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8003330 <SystemCoreClockUpdate+0x2dc>
 80031d8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80031dc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80031e0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80031e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80031e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031ec:	edc7 7a08 	vstr	s15, [r7, #32]
        break;
 80031f0:	e04f      	b.n	8003292 <SystemCoreClockUpdate+0x23e>

        case RCC_PLLCKSELR_PLLSRC_HSE:  /* HSE used as PLL clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80031f2:	69bb      	ldr	r3, [r7, #24]
 80031f4:	ee07 3a90 	vmov	s15, r3
 80031f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031fc:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8003338 <SystemCoreClockUpdate+0x2e4>
 8003200:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003204:	4b46      	ldr	r3, [pc, #280]	@ (8003320 <SystemCoreClockUpdate+0x2cc>)
 8003206:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003208:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800320c:	ee07 3a90 	vmov	s15, r3
 8003210:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003214:	ed97 6a04 	vldr	s12, [r7, #16]
 8003218:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8003330 <SystemCoreClockUpdate+0x2dc>
 800321c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003220:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003224:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003228:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800322c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003230:	edc7 7a08 	vstr	s15, [r7, #32]
        break;
 8003234:	e02d      	b.n	8003292 <SystemCoreClockUpdate+0x23e>

      default:
          hsivalue = (HSI_VALUE >> ((RCC->CR & RCC_CR_HSIDIV)>> 3)) ;
 8003236:	4b3a      	ldr	r3, [pc, #232]	@ (8003320 <SystemCoreClockUpdate+0x2cc>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	08db      	lsrs	r3, r3, #3
 800323c:	f003 0303 	and.w	r3, r3, #3
 8003240:	4a38      	ldr	r2, [pc, #224]	@ (8003324 <SystemCoreClockUpdate+0x2d0>)
 8003242:	fa22 f303 	lsr.w	r3, r2, r3
 8003246:	60fb      	str	r3, [r7, #12]
          pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	ee07 3a90 	vmov	s15, r3
 800324e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003252:	69bb      	ldr	r3, [r7, #24]
 8003254:	ee07 3a90 	vmov	s15, r3
 8003258:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800325c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003260:	4b2f      	ldr	r3, [pc, #188]	@ (8003320 <SystemCoreClockUpdate+0x2cc>)
 8003262:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003264:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003268:	ee07 3a90 	vmov	s15, r3
 800326c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003270:	ed97 6a04 	vldr	s12, [r7, #16]
 8003274:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8003330 <SystemCoreClockUpdate+0x2dc>
 8003278:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800327c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003280:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003284:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003288:	ee67 7a27 	vmul.f32	s15, s14, s15
 800328c:	edc7 7a08 	vstr	s15, [r7, #32]
        break;
 8003290:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003292:	4b23      	ldr	r3, [pc, #140]	@ (8003320 <SystemCoreClockUpdate+0x2cc>)
 8003294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003296:	0a5b      	lsrs	r3, r3, #9
 8003298:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800329c:	3301      	adds	r3, #1
 800329e:	60bb      	str	r3, [r7, #8]
      common_system_clock =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	ee07 3a90 	vmov	s15, r3
 80032a6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80032aa:	edd7 6a08 	vldr	s13, [r7, #32]
 80032ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80032b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80032b6:	ee17 3a90 	vmov	r3, s15
 80032ba:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    else
    {
      common_system_clock = 0U;
    }
    break;
 80032bc:	e00c      	b.n	80032d8 <SystemCoreClockUpdate+0x284>
      common_system_clock = 0U;
 80032be:	2300      	movs	r3, #0
 80032c0:	627b      	str	r3, [r7, #36]	@ 0x24
    break;
 80032c2:	e009      	b.n	80032d8 <SystemCoreClockUpdate+0x284>

  default:
    common_system_clock = (uint32_t) (HSI_VALUE >> ((RCC->CR & RCC_CR_HSIDIV)>> 3));
 80032c4:	4b16      	ldr	r3, [pc, #88]	@ (8003320 <SystemCoreClockUpdate+0x2cc>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	08db      	lsrs	r3, r3, #3
 80032ca:	f003 0303 	and.w	r3, r3, #3
 80032ce:	4a15      	ldr	r2, [pc, #84]	@ (8003324 <SystemCoreClockUpdate+0x2d0>)
 80032d0:	fa22 f303 	lsr.w	r3, r2, r3
 80032d4:	627b      	str	r3, [r7, #36]	@ 0x24
    break;
 80032d6:	bf00      	nop
  }

  /* Compute SystemClock frequency --------------------------------------------------*/
#if defined (RCC_D1CFGR_D1CPRE)
  tmp = D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos];
 80032d8:	4b11      	ldr	r3, [pc, #68]	@ (8003320 <SystemCoreClockUpdate+0x2cc>)
 80032da:	699b      	ldr	r3, [r3, #24]
 80032dc:	0a1b      	lsrs	r3, r3, #8
 80032de:	f003 030f 	and.w	r3, r3, #15
 80032e2:	4a16      	ldr	r2, [pc, #88]	@ (800333c <SystemCoreClockUpdate+0x2e8>)
 80032e4:	5cd3      	ldrb	r3, [r2, r3]
 80032e6:	607b      	str	r3, [r7, #4]

  /* common_system_clock frequency : CM7 CPU frequency  */
  common_system_clock >>= tmp;
 80032e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	fa22 f303 	lsr.w	r3, r2, r3
 80032f0:	627b      	str	r3, [r7, #36]	@ 0x24

  /* SystemD2Clock frequency : CM4 CPU, AXI and AHBs Clock frequency  */
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80032f2:	4b0b      	ldr	r3, [pc, #44]	@ (8003320 <SystemCoreClockUpdate+0x2cc>)
 80032f4:	699b      	ldr	r3, [r3, #24]
 80032f6:	f003 030f 	and.w	r3, r3, #15
 80032fa:	4a10      	ldr	r2, [pc, #64]	@ (800333c <SystemCoreClockUpdate+0x2e8>)
 80032fc:	5cd3      	ldrb	r3, [r2, r3]
 80032fe:	f003 031f 	and.w	r3, r3, #31
 8003302:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003304:	fa22 f303 	lsr.w	r3, r2, r3
 8003308:	4a0d      	ldr	r2, [pc, #52]	@ (8003340 <SystemCoreClockUpdate+0x2ec>)
 800330a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800330c:	4a0d      	ldr	r2, [pc, #52]	@ (8003344 <SystemCoreClockUpdate+0x2f0>)
 800330e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003310:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */
}
 8003312:	bf00      	nop
 8003314:	372c      	adds	r7, #44	@ 0x2c
 8003316:	46bd      	mov	sp, r7
 8003318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331c:	4770      	bx	lr
 800331e:	bf00      	nop
 8003320:	58024400 	.word	0x58024400
 8003324:	03d09000 	.word	0x03d09000
 8003328:	003d0900 	.word	0x003d0900
 800332c:	017d7840 	.word	0x017d7840
 8003330:	46000000 	.word	0x46000000
 8003334:	4a742400 	.word	0x4a742400
 8003338:	4bbebc20 	.word	0x4bbebc20
 800333c:	08022f14 	.word	0x08022f14
 8003340:	24000008 	.word	0x24000008
 8003344:	24000004 	.word	0x24000004

08003348 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8003348:	b480      	push	{r7}
 800334a:	af00      	add	r7, sp, #0
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#elif defined(USE_PWR_DIRECT_SMPS_SUPPLY) && defined(SMPS)
  /* Exit Run* mode */
  PWR->CR3 &= ~(PWR_CR3_LDOEN);
 800334c:	4b09      	ldr	r3, [pc, #36]	@ (8003374 <ExitRun0Mode+0x2c>)
 800334e:	68db      	ldr	r3, [r3, #12]
 8003350:	4a08      	ldr	r2, [pc, #32]	@ (8003374 <ExitRun0Mode+0x2c>)
 8003352:	f023 0302 	bic.w	r3, r3, #2
 8003356:	60d3      	str	r3, [r2, #12]
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8003358:	bf00      	nop
 800335a:	4b06      	ldr	r3, [pc, #24]	@ (8003374 <ExitRun0Mode+0x2c>)
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003362:	2b00      	cmp	r3, #0
 8003364:	d0f9      	beq.n	800335a <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8003366:	bf00      	nop
 8003368:	bf00      	nop
 800336a:	46bd      	mov	sp, r7
 800336c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003370:	4770      	bx	lr
 8003372:	bf00      	nop
 8003374:	58024800 	.word	0x58024800

08003378 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800337c:	4b22      	ldr	r3, [pc, #136]	@ (8003408 <MX_USART3_UART_Init+0x90>)
 800337e:	4a23      	ldr	r2, [pc, #140]	@ (800340c <MX_USART3_UART_Init+0x94>)
 8003380:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8003382:	4b21      	ldr	r3, [pc, #132]	@ (8003408 <MX_USART3_UART_Init+0x90>)
 8003384:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003388:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800338a:	4b1f      	ldr	r3, [pc, #124]	@ (8003408 <MX_USART3_UART_Init+0x90>)
 800338c:	2200      	movs	r2, #0
 800338e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003390:	4b1d      	ldr	r3, [pc, #116]	@ (8003408 <MX_USART3_UART_Init+0x90>)
 8003392:	2200      	movs	r2, #0
 8003394:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003396:	4b1c      	ldr	r3, [pc, #112]	@ (8003408 <MX_USART3_UART_Init+0x90>)
 8003398:	2200      	movs	r2, #0
 800339a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800339c:	4b1a      	ldr	r3, [pc, #104]	@ (8003408 <MX_USART3_UART_Init+0x90>)
 800339e:	220c      	movs	r2, #12
 80033a0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80033a2:	4b19      	ldr	r3, [pc, #100]	@ (8003408 <MX_USART3_UART_Init+0x90>)
 80033a4:	2200      	movs	r2, #0
 80033a6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80033a8:	4b17      	ldr	r3, [pc, #92]	@ (8003408 <MX_USART3_UART_Init+0x90>)
 80033aa:	2200      	movs	r2, #0
 80033ac:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80033ae:	4b16      	ldr	r3, [pc, #88]	@ (8003408 <MX_USART3_UART_Init+0x90>)
 80033b0:	2200      	movs	r2, #0
 80033b2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80033b4:	4b14      	ldr	r3, [pc, #80]	@ (8003408 <MX_USART3_UART_Init+0x90>)
 80033b6:	2200      	movs	r2, #0
 80033b8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80033ba:	4b13      	ldr	r3, [pc, #76]	@ (8003408 <MX_USART3_UART_Init+0x90>)
 80033bc:	2200      	movs	r2, #0
 80033be:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80033c0:	4811      	ldr	r0, [pc, #68]	@ (8003408 <MX_USART3_UART_Init+0x90>)
 80033c2:	f00c fe25 	bl	8010010 <HAL_UART_Init>
 80033c6:	4603      	mov	r3, r0
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d001      	beq.n	80033d0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80033cc:	f7fe ffe6 	bl	800239c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80033d0:	2100      	movs	r1, #0
 80033d2:	480d      	ldr	r0, [pc, #52]	@ (8003408 <MX_USART3_UART_Init+0x90>)
 80033d4:	f00f fd42 	bl	8012e5c <HAL_UARTEx_SetTxFifoThreshold>
 80033d8:	4603      	mov	r3, r0
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d001      	beq.n	80033e2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80033de:	f7fe ffdd 	bl	800239c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80033e2:	2100      	movs	r1, #0
 80033e4:	4808      	ldr	r0, [pc, #32]	@ (8003408 <MX_USART3_UART_Init+0x90>)
 80033e6:	f00f fde7 	bl	8012fb8 <HAL_UARTEx_SetRxFifoThreshold>
 80033ea:	4603      	mov	r3, r0
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d001      	beq.n	80033f4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80033f0:	f7fe ffd4 	bl	800239c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80033f4:	4804      	ldr	r0, [pc, #16]	@ (8003408 <MX_USART3_UART_Init+0x90>)
 80033f6:	f00f fca5 	bl	8012d44 <HAL_UARTEx_DisableFifoMode>
 80033fa:	4603      	mov	r3, r0
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d001      	beq.n	8003404 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8003400:	f7fe ffcc 	bl	800239c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003404:	bf00      	nop
 8003406:	bd80      	pop	{r7, pc}
 8003408:	24000410 	.word	0x24000410
 800340c:	40004800 	.word	0x40004800

08003410 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b0b8      	sub	sp, #224	@ 0xe0
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003418:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 800341c:	2200      	movs	r2, #0
 800341e:	601a      	str	r2, [r3, #0]
 8003420:	605a      	str	r2, [r3, #4]
 8003422:	609a      	str	r2, [r3, #8]
 8003424:	60da      	str	r2, [r3, #12]
 8003426:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003428:	f107 0310 	add.w	r3, r7, #16
 800342c:	22b8      	movs	r2, #184	@ 0xb8
 800342e:	2100      	movs	r1, #0
 8003430:	4618      	mov	r0, r3
 8003432:	f01b fe6d 	bl	801f110 <memset>
  if(uartHandle->Instance==USART3)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a2b      	ldr	r2, [pc, #172]	@ (80034e8 <HAL_UART_MspInit+0xd8>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d14e      	bne.n	80034de <HAL_UART_MspInit+0xce>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003440:	f04f 0202 	mov.w	r2, #2
 8003444:	f04f 0300 	mov.w	r3, #0
 8003448:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800344c:	2300      	movs	r3, #0
 800344e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003452:	f107 0310 	add.w	r3, r7, #16
 8003456:	4618      	mov	r0, r3
 8003458:	f006 ffb8 	bl	800a3cc <HAL_RCCEx_PeriphCLKConfig>
 800345c:	4603      	mov	r3, r0
 800345e:	2b00      	cmp	r3, #0
 8003460:	d001      	beq.n	8003466 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8003462:	f7fe ff9b 	bl	800239c <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8003466:	4b21      	ldr	r3, [pc, #132]	@ (80034ec <HAL_UART_MspInit+0xdc>)
 8003468:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800346c:	4a1f      	ldr	r2, [pc, #124]	@ (80034ec <HAL_UART_MspInit+0xdc>)
 800346e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003472:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003476:	4b1d      	ldr	r3, [pc, #116]	@ (80034ec <HAL_UART_MspInit+0xdc>)
 8003478:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800347c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003480:	60fb      	str	r3, [r7, #12]
 8003482:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003484:	4b19      	ldr	r3, [pc, #100]	@ (80034ec <HAL_UART_MspInit+0xdc>)
 8003486:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800348a:	4a18      	ldr	r2, [pc, #96]	@ (80034ec <HAL_UART_MspInit+0xdc>)
 800348c:	f043 0308 	orr.w	r3, r3, #8
 8003490:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003494:	4b15      	ldr	r3, [pc, #84]	@ (80034ec <HAL_UART_MspInit+0xdc>)
 8003496:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800349a:	f003 0308 	and.w	r3, r3, #8
 800349e:	60bb      	str	r3, [r7, #8]
 80034a0:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD9     ------> USART3_RX
    PD8     ------> USART3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 80034a2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80034a6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034aa:	2302      	movs	r3, #2
 80034ac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034b0:	2300      	movs	r3, #0
 80034b2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034b6:	2300      	movs	r3, #0
 80034b8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80034bc:	2307      	movs	r3, #7
 80034be:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80034c2:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80034c6:	4619      	mov	r1, r3
 80034c8:	4809      	ldr	r0, [pc, #36]	@ (80034f0 <HAL_UART_MspInit+0xe0>)
 80034ca:	f003 f80d 	bl	80064e8 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80034ce:	2200      	movs	r2, #0
 80034d0:	2105      	movs	r1, #5
 80034d2:	2027      	movs	r0, #39	@ 0x27
 80034d4:	f000 fa58 	bl	8003988 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80034d8:	2027      	movs	r0, #39	@ 0x27
 80034da:	f000 fa7f 	bl	80039dc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80034de:	bf00      	nop
 80034e0:	37e0      	adds	r7, #224	@ 0xe0
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}
 80034e6:	bf00      	nop
 80034e8:	40004800 	.word	0x40004800
 80034ec:	58024400 	.word	0x58024400
 80034f0:	58020c00 	.word	0x58020c00

080034f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80034f4:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8003530 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 80034f8:	f7ff ff26 	bl	8003348 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 80034fc:	f7ff fd1a 	bl	8002f34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003500:	480c      	ldr	r0, [pc, #48]	@ (8003534 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003502:	490d      	ldr	r1, [pc, #52]	@ (8003538 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003504:	4a0d      	ldr	r2, [pc, #52]	@ (800353c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003506:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003508:	e002      	b.n	8003510 <LoopCopyDataInit>

0800350a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800350a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800350c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800350e:	3304      	adds	r3, #4

08003510 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003510:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003512:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003514:	d3f9      	bcc.n	800350a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003516:	4a0a      	ldr	r2, [pc, #40]	@ (8003540 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003518:	4c0a      	ldr	r4, [pc, #40]	@ (8003544 <LoopFillZerobss+0x22>)
  movs r3, #0
 800351a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800351c:	e001      	b.n	8003522 <LoopFillZerobss>

0800351e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800351e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003520:	3204      	adds	r2, #4

08003522 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003522:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003524:	d3fb      	bcc.n	800351e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003526:	f01b fe81 	bl	801f22c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800352a:	f7fe fd85 	bl	8002038 <main>
  bx  lr
 800352e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003530:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8003534:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8003538:	24000138 	.word	0x24000138
  ldr r2, =_sidata
 800353c:	08023660 	.word	0x08023660
  ldr r2, =_sbss
 8003540:	24000138 	.word	0x24000138
  ldr r4, =_ebss
 8003544:	24009bb8 	.word	0x24009bb8

08003548 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003548:	e7fe      	b.n	8003548 <ADC3_IRQHandler>

0800354a <stm32_lock_acquire>:
/**
  * @brief Acquire STM32 lock
  * @param lock The lock to acquire
  */
static inline void stm32_lock_acquire(LockingData_t *lock)
{
 800354a:	b580      	push	{r7, lr}
 800354c:	b084      	sub	sp, #16
 800354e:	af00      	add	r7, sp, #0
 8003550:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d105      	bne.n	8003564 <stm32_lock_acquire+0x1a>
  __ASM volatile ("cpsid i" : : : "memory");
 8003558:	b672      	cpsid	i
}
 800355a:	bf00      	nop
 800355c:	f7fe ff1e 	bl	800239c <Error_Handler>
 8003560:	bf00      	nop
 8003562:	e7fd      	b.n	8003560 <stm32_lock_acquire+0x16>
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	7a1b      	ldrb	r3, [r3, #8]
 8003568:	2b01      	cmp	r3, #1
 800356a:	d905      	bls.n	8003578 <stm32_lock_acquire+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
 800356c:	b672      	cpsid	i
}
 800356e:	bf00      	nop
 8003570:	f7fe ff14 	bl	800239c <Error_Handler>
 8003574:	bf00      	nop
 8003576:	e7fd      	b.n	8003574 <stm32_lock_acquire+0x2a>
  lock->basepri[lock->nesting_level++] = taskENTER_CRITICAL_FROM_ISR();
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	7a1b      	ldrb	r3, [r3, #8]
 800357c:	1c5a      	adds	r2, r3, #1
 800357e:	b2d1      	uxtb	r1, r2
 8003580:	687a      	ldr	r2, [r7, #4]
 8003582:	7211      	strb	r1, [r2, #8]
 8003584:	4619      	mov	r1, r3

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003586:	f3ef 8211 	mrs	r2, BASEPRI
 800358a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800358e:	f383 8811 	msr	BASEPRI, r3
 8003592:	f3bf 8f6f 	isb	sy
 8003596:	f3bf 8f4f 	dsb	sy
 800359a:	60fa      	str	r2, [r7, #12]
 800359c:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800359e:	68fa      	ldr	r2, [r7, #12]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 80035a6:	bf00      	nop
 80035a8:	3710      	adds	r7, #16
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}

080035ae <stm32_lock_release>:
/**
  * @brief Release STM32 lock
  * @param lock The lock to release
  */
static inline void stm32_lock_release(LockingData_t *lock)
{
 80035ae:	b580      	push	{r7, lr}
 80035b0:	b084      	sub	sp, #16
 80035b2:	af00      	add	r7, sp, #0
 80035b4:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d105      	bne.n	80035c8 <stm32_lock_release+0x1a>
  __ASM volatile ("cpsid i" : : : "memory");
 80035bc:	b672      	cpsid	i
}
 80035be:	bf00      	nop
 80035c0:	f7fe feec 	bl	800239c <Error_Handler>
 80035c4:	bf00      	nop
 80035c6:	e7fd      	b.n	80035c4 <stm32_lock_release+0x16>
  lock->nesting_level--;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	7a1b      	ldrb	r3, [r3, #8]
 80035cc:	3b01      	subs	r3, #1
 80035ce:	b2da      	uxtb	r2, r3
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	721a      	strb	r2, [r3, #8]
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	7a1b      	ldrb	r3, [r3, #8]
 80035d8:	2b01      	cmp	r3, #1
 80035da:	d905      	bls.n	80035e8 <stm32_lock_release+0x3a>
  __ASM volatile ("cpsid i" : : : "memory");
 80035dc:	b672      	cpsid	i
}
 80035de:	bf00      	nop
 80035e0:	f7fe fedc 	bl	800239c <Error_Handler>
 80035e4:	bf00      	nop
 80035e6:	e7fd      	b.n	80035e4 <stm32_lock_release+0x36>
  taskEXIT_CRITICAL_FROM_ISR(lock->basepri[lock->nesting_level]);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	7a1b      	ldrb	r3, [r3, #8]
 80035ec:	461a      	mov	r2, r3
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035f4:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80035fc:	bf00      	nop
}
 80035fe:	bf00      	nop
 8003600:	3710      	adds	r7, #16
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}

08003606 <__retarget_lock_acquire_recursive>:
/**
  * @brief Acquire recursive lock
  * @param lock The lock
  */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
 8003606:	b580      	push	{r7, lr}
 8003608:	b082      	sub	sp, #8
 800360a:	af00      	add	r7, sp, #0
 800360c:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d105      	bne.n	8003620 <__retarget_lock_acquire_recursive+0x1a>
  __ASM volatile ("cpsid i" : : : "memory");
 8003614:	b672      	cpsid	i
}
 8003616:	bf00      	nop
 8003618:	f7fe fec0 	bl	800239c <Error_Handler>
 800361c:	bf00      	nop
 800361e:	e7fd      	b.n	800361c <__retarget_lock_acquire_recursive+0x16>
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	4618      	mov	r0, r3
 8003624:	f7ff ff91 	bl	800354a <stm32_lock_acquire>
}
 8003628:	bf00      	nop
 800362a:	3708      	adds	r7, #8
 800362c:	46bd      	mov	sp, r7
 800362e:	bd80      	pop	{r7, pc}

08003630 <__retarget_lock_release_recursive>:
/**
  * @brief Release recursive lock
  * @param lock The lock
  */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b082      	sub	sp, #8
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d105      	bne.n	800364a <__retarget_lock_release_recursive+0x1a>
  __ASM volatile ("cpsid i" : : : "memory");
 800363e:	b672      	cpsid	i
}
 8003640:	bf00      	nop
 8003642:	f7fe feab 	bl	800239c <Error_Handler>
 8003646:	bf00      	nop
 8003648:	e7fd      	b.n	8003646 <__retarget_lock_release_recursive+0x16>
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	4618      	mov	r0, r3
 800364e:	f7ff ffae 	bl	80035ae <stm32_lock_release>
}
 8003652:	bf00      	nop
 8003654:	3708      	adds	r7, #8
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}
	...

0800365c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b082      	sub	sp, #8
 8003660:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003662:	2003      	movs	r0, #3
 8003664:	f000 f970 	bl	8003948 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003668:	f006 fc98 	bl	8009f9c <HAL_RCC_GetSysClockFreq>
 800366c:	4602      	mov	r2, r0
 800366e:	4b15      	ldr	r3, [pc, #84]	@ (80036c4 <HAL_Init+0x68>)
 8003670:	699b      	ldr	r3, [r3, #24]
 8003672:	0a1b      	lsrs	r3, r3, #8
 8003674:	f003 030f 	and.w	r3, r3, #15
 8003678:	4913      	ldr	r1, [pc, #76]	@ (80036c8 <HAL_Init+0x6c>)
 800367a:	5ccb      	ldrb	r3, [r1, r3]
 800367c:	f003 031f 	and.w	r3, r3, #31
 8003680:	fa22 f303 	lsr.w	r3, r2, r3
 8003684:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003686:	4b0f      	ldr	r3, [pc, #60]	@ (80036c4 <HAL_Init+0x68>)
 8003688:	699b      	ldr	r3, [r3, #24]
 800368a:	f003 030f 	and.w	r3, r3, #15
 800368e:	4a0e      	ldr	r2, [pc, #56]	@ (80036c8 <HAL_Init+0x6c>)
 8003690:	5cd3      	ldrb	r3, [r2, r3]
 8003692:	f003 031f 	and.w	r3, r3, #31
 8003696:	687a      	ldr	r2, [r7, #4]
 8003698:	fa22 f303 	lsr.w	r3, r2, r3
 800369c:	4a0b      	ldr	r2, [pc, #44]	@ (80036cc <HAL_Init+0x70>)
 800369e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80036a0:	4a0b      	ldr	r2, [pc, #44]	@ (80036d0 <HAL_Init+0x74>)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80036a6:	200f      	movs	r0, #15
 80036a8:	f7ff fb0e 	bl	8002cc8 <HAL_InitTick>
 80036ac:	4603      	mov	r3, r0
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d001      	beq.n	80036b6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	e002      	b.n	80036bc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80036b6:	f7ff fae9 	bl	8002c8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80036ba:	2300      	movs	r3, #0
}
 80036bc:	4618      	mov	r0, r3
 80036be:	3708      	adds	r7, #8
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}
 80036c4:	58024400 	.word	0x58024400
 80036c8:	08022f14 	.word	0x08022f14
 80036cc:	24000008 	.word	0x24000008
 80036d0:	24000004 	.word	0x24000004

080036d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80036d4:	b480      	push	{r7}
 80036d6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80036d8:	4b06      	ldr	r3, [pc, #24]	@ (80036f4 <HAL_IncTick+0x20>)
 80036da:	781b      	ldrb	r3, [r3, #0]
 80036dc:	461a      	mov	r2, r3
 80036de:	4b06      	ldr	r3, [pc, #24]	@ (80036f8 <HAL_IncTick+0x24>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4413      	add	r3, r2
 80036e4:	4a04      	ldr	r2, [pc, #16]	@ (80036f8 <HAL_IncTick+0x24>)
 80036e6:	6013      	str	r3, [r2, #0]
}
 80036e8:	bf00      	nop
 80036ea:	46bd      	mov	sp, r7
 80036ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f0:	4770      	bx	lr
 80036f2:	bf00      	nop
 80036f4:	24000010 	.word	0x24000010
 80036f8:	240004b0 	.word	0x240004b0

080036fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80036fc:	b480      	push	{r7}
 80036fe:	af00      	add	r7, sp, #0
  return uwTick;
 8003700:	4b03      	ldr	r3, [pc, #12]	@ (8003710 <HAL_GetTick+0x14>)
 8003702:	681b      	ldr	r3, [r3, #0]
}
 8003704:	4618      	mov	r0, r3
 8003706:	46bd      	mov	sp, r7
 8003708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370c:	4770      	bx	lr
 800370e:	bf00      	nop
 8003710:	240004b0 	.word	0x240004b0

08003714 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b084      	sub	sp, #16
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800371c:	f7ff ffee 	bl	80036fc <HAL_GetTick>
 8003720:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	f1b3 3fff 	cmp.w	r3, #4294967295
 800372c:	d005      	beq.n	800373a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800372e:	4b0a      	ldr	r3, [pc, #40]	@ (8003758 <HAL_Delay+0x44>)
 8003730:	781b      	ldrb	r3, [r3, #0]
 8003732:	461a      	mov	r2, r3
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	4413      	add	r3, r2
 8003738:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800373a:	bf00      	nop
 800373c:	f7ff ffde 	bl	80036fc <HAL_GetTick>
 8003740:	4602      	mov	r2, r0
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	1ad3      	subs	r3, r2, r3
 8003746:	68fa      	ldr	r2, [r7, #12]
 8003748:	429a      	cmp	r2, r3
 800374a:	d8f7      	bhi.n	800373c <HAL_Delay+0x28>
  {
  }
}
 800374c:	bf00      	nop
 800374e:	bf00      	nop
 8003750:	3710      	adds	r7, #16
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}
 8003756:	bf00      	nop
 8003758:	24000010 	.word	0x24000010

0800375c <HAL_GetHalVersion>:
/**
  * @brief  Returns the HAL revision
  * @retval version : 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
 800375c:	b480      	push	{r7}
 800375e:	af00      	add	r7, sp, #0
 return __STM32H7xx_HAL_VERSION;
 8003760:	4b02      	ldr	r3, [pc, #8]	@ (800376c <HAL_GetHalVersion+0x10>)
}
 8003762:	4618      	mov	r0, r3
 8003764:	46bd      	mov	sp, r7
 8003766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376a:	4770      	bx	lr
 800376c:	010b0500 	.word	0x010b0500

08003770 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8003770:	b480      	push	{r7}
 8003772:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8003774:	4b03      	ldr	r3, [pc, #12]	@ (8003784 <HAL_GetREVID+0x14>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	0c1b      	lsrs	r3, r3, #16
}
 800377a:	4618      	mov	r0, r3
 800377c:	46bd      	mov	sp, r7
 800377e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003782:	4770      	bx	lr
 8003784:	5c001000 	.word	0x5c001000

08003788 <HAL_GetDEVID>:
/**
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
 8003788:	b480      	push	{r7}
 800378a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 800378c:	4b04      	ldr	r3, [pc, #16]	@ (80037a0 <HAL_GetDEVID+0x18>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8003794:	4618      	mov	r0, r3
 8003796:	46bd      	mov	sp, r7
 8003798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379c:	4770      	bx	lr
 800379e:	bf00      	nop
 80037a0:	5c001000 	.word	0x5c001000

080037a4 <HAL_GetUIDw0>:
/**
  * @brief  Return the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 80037a4:	b480      	push	{r7}
 80037a6:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)UID_BASE)));
 80037a8:	4b03      	ldr	r3, [pc, #12]	@ (80037b8 <HAL_GetUIDw0+0x14>)
 80037aa:	681b      	ldr	r3, [r3, #0]
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	46bd      	mov	sp, r7
 80037b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b4:	4770      	bx	lr
 80037b6:	bf00      	nop
 80037b8:	1ff1e800 	.word	0x1ff1e800

080037bc <HAL_GetUIDw1>:
/**
  * @brief  Return the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 80037bc:	b480      	push	{r7}
 80037be:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 80037c0:	4b03      	ldr	r3, [pc, #12]	@ (80037d0 <HAL_GetUIDw1+0x14>)
 80037c2:	681b      	ldr	r3, [r3, #0]
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	46bd      	mov	sp, r7
 80037c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037cc:	4770      	bx	lr
 80037ce:	bf00      	nop
 80037d0:	1ff1e804 	.word	0x1ff1e804

080037d4 <HAL_GetUIDw2>:
/**
  * @brief  Return the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 80037d4:	b480      	push	{r7}
 80037d6:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 80037d8:	4b03      	ldr	r3, [pc, #12]	@ (80037e8 <HAL_GetUIDw2+0x14>)
 80037da:	681b      	ldr	r3, [r3, #0]
}
 80037dc:	4618      	mov	r0, r3
 80037de:	46bd      	mov	sp, r7
 80037e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e4:	4770      	bx	lr
 80037e6:	bf00      	nop
 80037e8:	1ff1e808 	.word	0x1ff1e808

080037ec <__NVIC_SetPriorityGrouping>:
{
 80037ec:	b480      	push	{r7}
 80037ee:	b085      	sub	sp, #20
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	f003 0307 	and.w	r3, r3, #7
 80037fa:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80037fc:	4b0b      	ldr	r3, [pc, #44]	@ (800382c <__NVIC_SetPriorityGrouping+0x40>)
 80037fe:	68db      	ldr	r3, [r3, #12]
 8003800:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003802:	68ba      	ldr	r2, [r7, #8]
 8003804:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003808:	4013      	ands	r3, r2
 800380a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003814:	4b06      	ldr	r3, [pc, #24]	@ (8003830 <__NVIC_SetPriorityGrouping+0x44>)
 8003816:	4313      	orrs	r3, r2
 8003818:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800381a:	4a04      	ldr	r2, [pc, #16]	@ (800382c <__NVIC_SetPriorityGrouping+0x40>)
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	60d3      	str	r3, [r2, #12]
}
 8003820:	bf00      	nop
 8003822:	3714      	adds	r7, #20
 8003824:	46bd      	mov	sp, r7
 8003826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382a:	4770      	bx	lr
 800382c:	e000ed00 	.word	0xe000ed00
 8003830:	05fa0000 	.word	0x05fa0000

08003834 <__NVIC_GetPriorityGrouping>:
{
 8003834:	b480      	push	{r7}
 8003836:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003838:	4b04      	ldr	r3, [pc, #16]	@ (800384c <__NVIC_GetPriorityGrouping+0x18>)
 800383a:	68db      	ldr	r3, [r3, #12]
 800383c:	0a1b      	lsrs	r3, r3, #8
 800383e:	f003 0307 	and.w	r3, r3, #7
}
 8003842:	4618      	mov	r0, r3
 8003844:	46bd      	mov	sp, r7
 8003846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384a:	4770      	bx	lr
 800384c:	e000ed00 	.word	0xe000ed00

08003850 <__NVIC_EnableIRQ>:
{
 8003850:	b480      	push	{r7}
 8003852:	b083      	sub	sp, #12
 8003854:	af00      	add	r7, sp, #0
 8003856:	4603      	mov	r3, r0
 8003858:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800385a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800385e:	2b00      	cmp	r3, #0
 8003860:	db0b      	blt.n	800387a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003862:	88fb      	ldrh	r3, [r7, #6]
 8003864:	f003 021f 	and.w	r2, r3, #31
 8003868:	4907      	ldr	r1, [pc, #28]	@ (8003888 <__NVIC_EnableIRQ+0x38>)
 800386a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800386e:	095b      	lsrs	r3, r3, #5
 8003870:	2001      	movs	r0, #1
 8003872:	fa00 f202 	lsl.w	r2, r0, r2
 8003876:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800387a:	bf00      	nop
 800387c:	370c      	adds	r7, #12
 800387e:	46bd      	mov	sp, r7
 8003880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003884:	4770      	bx	lr
 8003886:	bf00      	nop
 8003888:	e000e100 	.word	0xe000e100

0800388c <__NVIC_SetPriority>:
{
 800388c:	b480      	push	{r7}
 800388e:	b083      	sub	sp, #12
 8003890:	af00      	add	r7, sp, #0
 8003892:	4603      	mov	r3, r0
 8003894:	6039      	str	r1, [r7, #0]
 8003896:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003898:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800389c:	2b00      	cmp	r3, #0
 800389e:	db0a      	blt.n	80038b6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	b2da      	uxtb	r2, r3
 80038a4:	490c      	ldr	r1, [pc, #48]	@ (80038d8 <__NVIC_SetPriority+0x4c>)
 80038a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80038aa:	0112      	lsls	r2, r2, #4
 80038ac:	b2d2      	uxtb	r2, r2
 80038ae:	440b      	add	r3, r1
 80038b0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80038b4:	e00a      	b.n	80038cc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	b2da      	uxtb	r2, r3
 80038ba:	4908      	ldr	r1, [pc, #32]	@ (80038dc <__NVIC_SetPriority+0x50>)
 80038bc:	88fb      	ldrh	r3, [r7, #6]
 80038be:	f003 030f 	and.w	r3, r3, #15
 80038c2:	3b04      	subs	r3, #4
 80038c4:	0112      	lsls	r2, r2, #4
 80038c6:	b2d2      	uxtb	r2, r2
 80038c8:	440b      	add	r3, r1
 80038ca:	761a      	strb	r2, [r3, #24]
}
 80038cc:	bf00      	nop
 80038ce:	370c      	adds	r7, #12
 80038d0:	46bd      	mov	sp, r7
 80038d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d6:	4770      	bx	lr
 80038d8:	e000e100 	.word	0xe000e100
 80038dc:	e000ed00 	.word	0xe000ed00

080038e0 <NVIC_EncodePriority>:
{
 80038e0:	b480      	push	{r7}
 80038e2:	b089      	sub	sp, #36	@ 0x24
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	60f8      	str	r0, [r7, #12]
 80038e8:	60b9      	str	r1, [r7, #8]
 80038ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	f003 0307 	and.w	r3, r3, #7
 80038f2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80038f4:	69fb      	ldr	r3, [r7, #28]
 80038f6:	f1c3 0307 	rsb	r3, r3, #7
 80038fa:	2b04      	cmp	r3, #4
 80038fc:	bf28      	it	cs
 80038fe:	2304      	movcs	r3, #4
 8003900:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003902:	69fb      	ldr	r3, [r7, #28]
 8003904:	3304      	adds	r3, #4
 8003906:	2b06      	cmp	r3, #6
 8003908:	d902      	bls.n	8003910 <NVIC_EncodePriority+0x30>
 800390a:	69fb      	ldr	r3, [r7, #28]
 800390c:	3b03      	subs	r3, #3
 800390e:	e000      	b.n	8003912 <NVIC_EncodePriority+0x32>
 8003910:	2300      	movs	r3, #0
 8003912:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003914:	f04f 32ff 	mov.w	r2, #4294967295
 8003918:	69bb      	ldr	r3, [r7, #24]
 800391a:	fa02 f303 	lsl.w	r3, r2, r3
 800391e:	43da      	mvns	r2, r3
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	401a      	ands	r2, r3
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003928:	f04f 31ff 	mov.w	r1, #4294967295
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	fa01 f303 	lsl.w	r3, r1, r3
 8003932:	43d9      	mvns	r1, r3
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003938:	4313      	orrs	r3, r2
}
 800393a:	4618      	mov	r0, r3
 800393c:	3724      	adds	r7, #36	@ 0x24
 800393e:	46bd      	mov	sp, r7
 8003940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003944:	4770      	bx	lr
	...

08003948 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b082      	sub	sp, #8
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2b07      	cmp	r3, #7
 8003954:	d00f      	beq.n	8003976 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2b06      	cmp	r3, #6
 800395a:	d00c      	beq.n	8003976 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2b05      	cmp	r3, #5
 8003960:	d009      	beq.n	8003976 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2b04      	cmp	r3, #4
 8003966:	d006      	beq.n	8003976 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2b03      	cmp	r3, #3
 800396c:	d003      	beq.n	8003976 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800396e:	2191      	movs	r1, #145	@ 0x91
 8003970:	4804      	ldr	r0, [pc, #16]	@ (8003984 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8003972:	f7fe fd27 	bl	80023c4 <assert_failed>

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003976:	6878      	ldr	r0, [r7, #4]
 8003978:	f7ff ff38 	bl	80037ec <__NVIC_SetPriorityGrouping>
}
 800397c:	bf00      	nop
 800397e:	3708      	adds	r7, #8
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}
 8003984:	080214c8 	.word	0x080214c8

08003988 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b086      	sub	sp, #24
 800398c:	af00      	add	r7, sp, #0
 800398e:	4603      	mov	r3, r0
 8003990:	60b9      	str	r1, [r7, #8]
 8003992:	607a      	str	r2, [r7, #4]
 8003994:	81fb      	strh	r3, [r7, #14]
  uint32_t prioritygroup;

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2b0f      	cmp	r3, #15
 800399a:	d903      	bls.n	80039a4 <HAL_NVIC_SetPriority+0x1c>
 800399c:	21a9      	movs	r1, #169	@ 0xa9
 800399e:	480e      	ldr	r0, [pc, #56]	@ (80039d8 <HAL_NVIC_SetPriority+0x50>)
 80039a0:	f7fe fd10 	bl	80023c4 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	2b0f      	cmp	r3, #15
 80039a8:	d903      	bls.n	80039b2 <HAL_NVIC_SetPriority+0x2a>
 80039aa:	21aa      	movs	r1, #170	@ 0xaa
 80039ac:	480a      	ldr	r0, [pc, #40]	@ (80039d8 <HAL_NVIC_SetPriority+0x50>)
 80039ae:	f7fe fd09 	bl	80023c4 <assert_failed>

  prioritygroup = NVIC_GetPriorityGrouping();
 80039b2:	f7ff ff3f 	bl	8003834 <__NVIC_GetPriorityGrouping>
 80039b6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80039b8:	687a      	ldr	r2, [r7, #4]
 80039ba:	68b9      	ldr	r1, [r7, #8]
 80039bc:	6978      	ldr	r0, [r7, #20]
 80039be:	f7ff ff8f 	bl	80038e0 <NVIC_EncodePriority>
 80039c2:	4602      	mov	r2, r0
 80039c4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80039c8:	4611      	mov	r1, r2
 80039ca:	4618      	mov	r0, r3
 80039cc:	f7ff ff5e 	bl	800388c <__NVIC_SetPriority>
}
 80039d0:	bf00      	nop
 80039d2:	3718      	adds	r7, #24
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bd80      	pop	{r7, pc}
 80039d8:	080214c8 	.word	0x080214c8

080039dc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b082      	sub	sp, #8
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	4603      	mov	r3, r0
 80039e4:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 80039e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	da03      	bge.n	80039f6 <HAL_NVIC_EnableIRQ+0x1a>
 80039ee:	21bd      	movs	r1, #189	@ 0xbd
 80039f0:	4805      	ldr	r0, [pc, #20]	@ (8003a08 <HAL_NVIC_EnableIRQ+0x2c>)
 80039f2:	f7fe fce7 	bl	80023c4 <assert_failed>

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80039f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80039fa:	4618      	mov	r0, r3
 80039fc:	f7ff ff28 	bl	8003850 <__NVIC_EnableIRQ>
}
 8003a00:	bf00      	nop
 8003a02:	3708      	adds	r7, #8
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bd80      	pop	{r7, pc}
 8003a08:	080214c8 	.word	0x080214c8

08003a0c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8003a10:	f3bf 8f5f 	dmb	sy
}
 8003a14:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8003a16:	4b07      	ldr	r3, [pc, #28]	@ (8003a34 <HAL_MPU_Disable+0x28>)
 8003a18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a1a:	4a06      	ldr	r2, [pc, #24]	@ (8003a34 <HAL_MPU_Disable+0x28>)
 8003a1c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a20:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8003a22:	4b05      	ldr	r3, [pc, #20]	@ (8003a38 <HAL_MPU_Disable+0x2c>)
 8003a24:	2200      	movs	r2, #0
 8003a26:	605a      	str	r2, [r3, #4]
}
 8003a28:	bf00      	nop
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a30:	4770      	bx	lr
 8003a32:	bf00      	nop
 8003a34:	e000ed00 	.word	0xe000ed00
 8003a38:	e000ed90 	.word	0xe000ed90

08003a3c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b083      	sub	sp, #12
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8003a44:	4a0b      	ldr	r2, [pc, #44]	@ (8003a74 <HAL_MPU_Enable+0x38>)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	f043 0301 	orr.w	r3, r3, #1
 8003a4c:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8003a4e:	4b0a      	ldr	r3, [pc, #40]	@ (8003a78 <HAL_MPU_Enable+0x3c>)
 8003a50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a52:	4a09      	ldr	r2, [pc, #36]	@ (8003a78 <HAL_MPU_Enable+0x3c>)
 8003a54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a58:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8003a5a:	f3bf 8f4f 	dsb	sy
}
 8003a5e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003a60:	f3bf 8f6f 	isb	sy
}
 8003a64:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8003a66:	bf00      	nop
 8003a68:	370c      	adds	r7, #12
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a70:	4770      	bx	lr
 8003a72:	bf00      	nop
 8003a74:	e000ed90 	.word	0xe000ed90
 8003a78:	e000ed00 	.word	0xe000ed00

08003a7c <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b082      	sub	sp, #8
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	785b      	ldrb	r3, [r3, #1]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d040      	beq.n	8003b0e <HAL_MPU_ConfigRegion+0x92>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	785b      	ldrb	r3, [r3, #1]
 8003a90:	2b01      	cmp	r3, #1
 8003a92:	d03c      	beq.n	8003b0e <HAL_MPU_ConfigRegion+0x92>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	785b      	ldrb	r3, [r3, #1]
 8003a98:	2b02      	cmp	r3, #2
 8003a9a:	d038      	beq.n	8003b0e <HAL_MPU_ConfigRegion+0x92>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	785b      	ldrb	r3, [r3, #1]
 8003aa0:	2b03      	cmp	r3, #3
 8003aa2:	d034      	beq.n	8003b0e <HAL_MPU_ConfigRegion+0x92>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	785b      	ldrb	r3, [r3, #1]
 8003aa8:	2b04      	cmp	r3, #4
 8003aaa:	d030      	beq.n	8003b0e <HAL_MPU_ConfigRegion+0x92>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	785b      	ldrb	r3, [r3, #1]
 8003ab0:	2b05      	cmp	r3, #5
 8003ab2:	d02c      	beq.n	8003b0e <HAL_MPU_ConfigRegion+0x92>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	785b      	ldrb	r3, [r3, #1]
 8003ab8:	2b06      	cmp	r3, #6
 8003aba:	d028      	beq.n	8003b0e <HAL_MPU_ConfigRegion+0x92>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	785b      	ldrb	r3, [r3, #1]
 8003ac0:	2b07      	cmp	r3, #7
 8003ac2:	d024      	beq.n	8003b0e <HAL_MPU_ConfigRegion+0x92>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	785b      	ldrb	r3, [r3, #1]
 8003ac8:	2b08      	cmp	r3, #8
 8003aca:	d020      	beq.n	8003b0e <HAL_MPU_ConfigRegion+0x92>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	785b      	ldrb	r3, [r3, #1]
 8003ad0:	2b09      	cmp	r3, #9
 8003ad2:	d01c      	beq.n	8003b0e <HAL_MPU_ConfigRegion+0x92>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	785b      	ldrb	r3, [r3, #1]
 8003ad8:	2b0a      	cmp	r3, #10
 8003ada:	d018      	beq.n	8003b0e <HAL_MPU_ConfigRegion+0x92>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	785b      	ldrb	r3, [r3, #1]
 8003ae0:	2b0b      	cmp	r3, #11
 8003ae2:	d014      	beq.n	8003b0e <HAL_MPU_ConfigRegion+0x92>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	785b      	ldrb	r3, [r3, #1]
 8003ae8:	2b0c      	cmp	r3, #12
 8003aea:	d010      	beq.n	8003b0e <HAL_MPU_ConfigRegion+0x92>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	785b      	ldrb	r3, [r3, #1]
 8003af0:	2b0d      	cmp	r3, #13
 8003af2:	d00c      	beq.n	8003b0e <HAL_MPU_ConfigRegion+0x92>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	785b      	ldrb	r3, [r3, #1]
 8003af8:	2b0e      	cmp	r3, #14
 8003afa:	d008      	beq.n	8003b0e <HAL_MPU_ConfigRegion+0x92>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	785b      	ldrb	r3, [r3, #1]
 8003b00:	2b0f      	cmp	r3, #15
 8003b02:	d004      	beq.n	8003b0e <HAL_MPU_ConfigRegion+0x92>
 8003b04:	f240 114d 	movw	r1, #333	@ 0x14d
 8003b08:	488c      	ldr	r0, [pc, #560]	@ (8003d3c <HAL_MPU_ConfigRegion+0x2c0>)
 8003b0a:	f7fe fc5b 	bl	80023c4 <assert_failed>
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	781b      	ldrb	r3, [r3, #0]
 8003b12:	2b01      	cmp	r3, #1
 8003b14:	d008      	beq.n	8003b28 <HAL_MPU_ConfigRegion+0xac>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	781b      	ldrb	r3, [r3, #0]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d004      	beq.n	8003b28 <HAL_MPU_ConfigRegion+0xac>
 8003b1e:	f44f 71a7 	mov.w	r1, #334	@ 0x14e
 8003b22:	4886      	ldr	r0, [pc, #536]	@ (8003d3c <HAL_MPU_ConfigRegion+0x2c0>)
 8003b24:	f7fe fc4e 	bl	80023c4 <assert_failed>
  assert_param(IS_MPU_INSTRUCTION_ACCESS(MPU_Init->DisableExec));
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	7b1b      	ldrb	r3, [r3, #12]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d008      	beq.n	8003b42 <HAL_MPU_ConfigRegion+0xc6>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	7b1b      	ldrb	r3, [r3, #12]
 8003b34:	2b01      	cmp	r3, #1
 8003b36:	d004      	beq.n	8003b42 <HAL_MPU_ConfigRegion+0xc6>
 8003b38:	f240 114f 	movw	r1, #335	@ 0x14f
 8003b3c:	487f      	ldr	r0, [pc, #508]	@ (8003d3c <HAL_MPU_ConfigRegion+0x2c0>)
 8003b3e:	f7fe fc41 	bl	80023c4 <assert_failed>
  assert_param(IS_MPU_REGION_PERMISSION_ATTRIBUTE(MPU_Init->AccessPermission));
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	7adb      	ldrb	r3, [r3, #11]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d018      	beq.n	8003b7c <HAL_MPU_ConfigRegion+0x100>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	7adb      	ldrb	r3, [r3, #11]
 8003b4e:	2b01      	cmp	r3, #1
 8003b50:	d014      	beq.n	8003b7c <HAL_MPU_ConfigRegion+0x100>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	7adb      	ldrb	r3, [r3, #11]
 8003b56:	2b02      	cmp	r3, #2
 8003b58:	d010      	beq.n	8003b7c <HAL_MPU_ConfigRegion+0x100>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	7adb      	ldrb	r3, [r3, #11]
 8003b5e:	2b03      	cmp	r3, #3
 8003b60:	d00c      	beq.n	8003b7c <HAL_MPU_ConfigRegion+0x100>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	7adb      	ldrb	r3, [r3, #11]
 8003b66:	2b05      	cmp	r3, #5
 8003b68:	d008      	beq.n	8003b7c <HAL_MPU_ConfigRegion+0x100>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	7adb      	ldrb	r3, [r3, #11]
 8003b6e:	2b06      	cmp	r3, #6
 8003b70:	d004      	beq.n	8003b7c <HAL_MPU_ConfigRegion+0x100>
 8003b72:	f44f 71a8 	mov.w	r1, #336	@ 0x150
 8003b76:	4871      	ldr	r0, [pc, #452]	@ (8003d3c <HAL_MPU_ConfigRegion+0x2c0>)
 8003b78:	f7fe fc24 	bl	80023c4 <assert_failed>
  assert_param(IS_MPU_TEX_LEVEL(MPU_Init->TypeExtField));
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	7a9b      	ldrb	r3, [r3, #10]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d00c      	beq.n	8003b9e <HAL_MPU_ConfigRegion+0x122>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	7a9b      	ldrb	r3, [r3, #10]
 8003b88:	2b01      	cmp	r3, #1
 8003b8a:	d008      	beq.n	8003b9e <HAL_MPU_ConfigRegion+0x122>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	7a9b      	ldrb	r3, [r3, #10]
 8003b90:	2b02      	cmp	r3, #2
 8003b92:	d004      	beq.n	8003b9e <HAL_MPU_ConfigRegion+0x122>
 8003b94:	f240 1151 	movw	r1, #337	@ 0x151
 8003b98:	4868      	ldr	r0, [pc, #416]	@ (8003d3c <HAL_MPU_ConfigRegion+0x2c0>)
 8003b9a:	f7fe fc13 	bl	80023c4 <assert_failed>
  assert_param(IS_MPU_ACCESS_SHAREABLE(MPU_Init->IsShareable));
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	7b5b      	ldrb	r3, [r3, #13]
 8003ba2:	2b01      	cmp	r3, #1
 8003ba4:	d008      	beq.n	8003bb8 <HAL_MPU_ConfigRegion+0x13c>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	7b5b      	ldrb	r3, [r3, #13]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d004      	beq.n	8003bb8 <HAL_MPU_ConfigRegion+0x13c>
 8003bae:	f44f 71a9 	mov.w	r1, #338	@ 0x152
 8003bb2:	4862      	ldr	r0, [pc, #392]	@ (8003d3c <HAL_MPU_ConfigRegion+0x2c0>)
 8003bb4:	f7fe fc06 	bl	80023c4 <assert_failed>
  assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	7b9b      	ldrb	r3, [r3, #14]
 8003bbc:	2b01      	cmp	r3, #1
 8003bbe:	d008      	beq.n	8003bd2 <HAL_MPU_ConfigRegion+0x156>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	7b9b      	ldrb	r3, [r3, #14]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d004      	beq.n	8003bd2 <HAL_MPU_ConfigRegion+0x156>
 8003bc8:	f240 1153 	movw	r1, #339	@ 0x153
 8003bcc:	485b      	ldr	r0, [pc, #364]	@ (8003d3c <HAL_MPU_ConfigRegion+0x2c0>)
 8003bce:	f7fe fbf9 	bl	80023c4 <assert_failed>
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	7bdb      	ldrb	r3, [r3, #15]
 8003bd6:	2b01      	cmp	r3, #1
 8003bd8:	d008      	beq.n	8003bec <HAL_MPU_ConfigRegion+0x170>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	7bdb      	ldrb	r3, [r3, #15]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d004      	beq.n	8003bec <HAL_MPU_ConfigRegion+0x170>
 8003be2:	f44f 71aa 	mov.w	r1, #340	@ 0x154
 8003be6:	4855      	ldr	r0, [pc, #340]	@ (8003d3c <HAL_MPU_ConfigRegion+0x2c0>)
 8003be8:	f7fe fbec 	bl	80023c4 <assert_failed>
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	7a5b      	ldrb	r3, [r3, #9]
 8003bf0:	2bff      	cmp	r3, #255	@ 0xff
 8003bf2:	d104      	bne.n	8003bfe <HAL_MPU_ConfigRegion+0x182>
 8003bf4:	f240 1155 	movw	r1, #341	@ 0x155
 8003bf8:	4850      	ldr	r0, [pc, #320]	@ (8003d3c <HAL_MPU_ConfigRegion+0x2c0>)
 8003bfa:	f7fe fbe3 	bl	80023c4 <assert_failed>
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	7a1b      	ldrb	r3, [r3, #8]
 8003c02:	2b04      	cmp	r3, #4
 8003c04:	d070      	beq.n	8003ce8 <HAL_MPU_ConfigRegion+0x26c>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	7a1b      	ldrb	r3, [r3, #8]
 8003c0a:	2b05      	cmp	r3, #5
 8003c0c:	d06c      	beq.n	8003ce8 <HAL_MPU_ConfigRegion+0x26c>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	7a1b      	ldrb	r3, [r3, #8]
 8003c12:	2b06      	cmp	r3, #6
 8003c14:	d068      	beq.n	8003ce8 <HAL_MPU_ConfigRegion+0x26c>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	7a1b      	ldrb	r3, [r3, #8]
 8003c1a:	2b07      	cmp	r3, #7
 8003c1c:	d064      	beq.n	8003ce8 <HAL_MPU_ConfigRegion+0x26c>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	7a1b      	ldrb	r3, [r3, #8]
 8003c22:	2b08      	cmp	r3, #8
 8003c24:	d060      	beq.n	8003ce8 <HAL_MPU_ConfigRegion+0x26c>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	7a1b      	ldrb	r3, [r3, #8]
 8003c2a:	2b09      	cmp	r3, #9
 8003c2c:	d05c      	beq.n	8003ce8 <HAL_MPU_ConfigRegion+0x26c>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	7a1b      	ldrb	r3, [r3, #8]
 8003c32:	2b0a      	cmp	r3, #10
 8003c34:	d058      	beq.n	8003ce8 <HAL_MPU_ConfigRegion+0x26c>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	7a1b      	ldrb	r3, [r3, #8]
 8003c3a:	2b0b      	cmp	r3, #11
 8003c3c:	d054      	beq.n	8003ce8 <HAL_MPU_ConfigRegion+0x26c>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	7a1b      	ldrb	r3, [r3, #8]
 8003c42:	2b0c      	cmp	r3, #12
 8003c44:	d050      	beq.n	8003ce8 <HAL_MPU_ConfigRegion+0x26c>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	7a1b      	ldrb	r3, [r3, #8]
 8003c4a:	2b0d      	cmp	r3, #13
 8003c4c:	d04c      	beq.n	8003ce8 <HAL_MPU_ConfigRegion+0x26c>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	7a1b      	ldrb	r3, [r3, #8]
 8003c52:	2b0e      	cmp	r3, #14
 8003c54:	d048      	beq.n	8003ce8 <HAL_MPU_ConfigRegion+0x26c>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	7a1b      	ldrb	r3, [r3, #8]
 8003c5a:	2b0f      	cmp	r3, #15
 8003c5c:	d044      	beq.n	8003ce8 <HAL_MPU_ConfigRegion+0x26c>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	7a1b      	ldrb	r3, [r3, #8]
 8003c62:	2b10      	cmp	r3, #16
 8003c64:	d040      	beq.n	8003ce8 <HAL_MPU_ConfigRegion+0x26c>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	7a1b      	ldrb	r3, [r3, #8]
 8003c6a:	2b11      	cmp	r3, #17
 8003c6c:	d03c      	beq.n	8003ce8 <HAL_MPU_ConfigRegion+0x26c>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	7a1b      	ldrb	r3, [r3, #8]
 8003c72:	2b12      	cmp	r3, #18
 8003c74:	d038      	beq.n	8003ce8 <HAL_MPU_ConfigRegion+0x26c>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	7a1b      	ldrb	r3, [r3, #8]
 8003c7a:	2b13      	cmp	r3, #19
 8003c7c:	d034      	beq.n	8003ce8 <HAL_MPU_ConfigRegion+0x26c>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	7a1b      	ldrb	r3, [r3, #8]
 8003c82:	2b14      	cmp	r3, #20
 8003c84:	d030      	beq.n	8003ce8 <HAL_MPU_ConfigRegion+0x26c>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	7a1b      	ldrb	r3, [r3, #8]
 8003c8a:	2b15      	cmp	r3, #21
 8003c8c:	d02c      	beq.n	8003ce8 <HAL_MPU_ConfigRegion+0x26c>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	7a1b      	ldrb	r3, [r3, #8]
 8003c92:	2b16      	cmp	r3, #22
 8003c94:	d028      	beq.n	8003ce8 <HAL_MPU_ConfigRegion+0x26c>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	7a1b      	ldrb	r3, [r3, #8]
 8003c9a:	2b17      	cmp	r3, #23
 8003c9c:	d024      	beq.n	8003ce8 <HAL_MPU_ConfigRegion+0x26c>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	7a1b      	ldrb	r3, [r3, #8]
 8003ca2:	2b18      	cmp	r3, #24
 8003ca4:	d020      	beq.n	8003ce8 <HAL_MPU_ConfigRegion+0x26c>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	7a1b      	ldrb	r3, [r3, #8]
 8003caa:	2b19      	cmp	r3, #25
 8003cac:	d01c      	beq.n	8003ce8 <HAL_MPU_ConfigRegion+0x26c>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	7a1b      	ldrb	r3, [r3, #8]
 8003cb2:	2b1a      	cmp	r3, #26
 8003cb4:	d018      	beq.n	8003ce8 <HAL_MPU_ConfigRegion+0x26c>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	7a1b      	ldrb	r3, [r3, #8]
 8003cba:	2b1b      	cmp	r3, #27
 8003cbc:	d014      	beq.n	8003ce8 <HAL_MPU_ConfigRegion+0x26c>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	7a1b      	ldrb	r3, [r3, #8]
 8003cc2:	2b1c      	cmp	r3, #28
 8003cc4:	d010      	beq.n	8003ce8 <HAL_MPU_ConfigRegion+0x26c>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	7a1b      	ldrb	r3, [r3, #8]
 8003cca:	2b1d      	cmp	r3, #29
 8003ccc:	d00c      	beq.n	8003ce8 <HAL_MPU_ConfigRegion+0x26c>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	7a1b      	ldrb	r3, [r3, #8]
 8003cd2:	2b1e      	cmp	r3, #30
 8003cd4:	d008      	beq.n	8003ce8 <HAL_MPU_ConfigRegion+0x26c>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	7a1b      	ldrb	r3, [r3, #8]
 8003cda:	2b1f      	cmp	r3, #31
 8003cdc:	d004      	beq.n	8003ce8 <HAL_MPU_ConfigRegion+0x26c>
 8003cde:	f44f 71ab 	mov.w	r1, #342	@ 0x156
 8003ce2:	4816      	ldr	r0, [pc, #88]	@ (8003d3c <HAL_MPU_ConfigRegion+0x2c0>)
 8003ce4:	f7fe fb6e 	bl	80023c4 <assert_failed>

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	785a      	ldrb	r2, [r3, #1]
 8003cec:	4b14      	ldr	r3, [pc, #80]	@ (8003d40 <HAL_MPU_ConfigRegion+0x2c4>)
 8003cee:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8003cf0:	4b13      	ldr	r3, [pc, #76]	@ (8003d40 <HAL_MPU_ConfigRegion+0x2c4>)
 8003cf2:	691b      	ldr	r3, [r3, #16]
 8003cf4:	4a12      	ldr	r2, [pc, #72]	@ (8003d40 <HAL_MPU_ConfigRegion+0x2c4>)
 8003cf6:	f023 0301 	bic.w	r3, r3, #1
 8003cfa:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8003cfc:	4a10      	ldr	r2, [pc, #64]	@ (8003d40 <HAL_MPU_ConfigRegion+0x2c4>)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	7b1b      	ldrb	r3, [r3, #12]
 8003d08:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	7adb      	ldrb	r3, [r3, #11]
 8003d0e:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003d10:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	7a9b      	ldrb	r3, [r3, #10]
 8003d16:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003d18:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	7b5b      	ldrb	r3, [r3, #13]
 8003d1e:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003d20:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	7b9b      	ldrb	r3, [r3, #14]
 8003d26:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003d28:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	7bdb      	ldrb	r3, [r3, #15]
 8003d2e:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003d30:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	7a5b      	ldrb	r3, [r3, #9]
 8003d36:	021b      	lsls	r3, r3, #8
 8003d38:	e004      	b.n	8003d44 <HAL_MPU_ConfigRegion+0x2c8>
 8003d3a:	bf00      	nop
 8003d3c:	080214c8 	.word	0x080214c8
 8003d40:	e000ed90 	.word	0xe000ed90
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003d44:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	7a1b      	ldrb	r3, [r3, #8]
 8003d4a:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003d4c:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8003d4e:	687a      	ldr	r2, [r7, #4]
 8003d50:	7812      	ldrb	r2, [r2, #0]
 8003d52:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003d54:	4a03      	ldr	r2, [pc, #12]	@ (8003d64 <HAL_MPU_ConfigRegion+0x2e8>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003d56:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003d58:	6113      	str	r3, [r2, #16]
}
 8003d5a:	bf00      	nop
 8003d5c:	3708      	adds	r7, #8
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}
 8003d62:	bf00      	nop
 8003d64:	e000ed90 	.word	0xe000ed90

08003d68 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b086      	sub	sp, #24
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003d70:	f7ff fcc4 	bl	80036fc <HAL_GetTick>
 8003d74:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d102      	bne.n	8003d82 <HAL_DMA_Init+0x1a>
  {
    return HAL_ERROR;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	f000 bcb0 	b.w	80046e2 <HAL_DMA_Init+0x97a>
  }

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a87      	ldr	r2, [pc, #540]	@ (8003fa4 <HAL_DMA_Init+0x23c>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d076      	beq.n	8003e7a <HAL_DMA_Init+0x112>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a85      	ldr	r2, [pc, #532]	@ (8003fa8 <HAL_DMA_Init+0x240>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d071      	beq.n	8003e7a <HAL_DMA_Init+0x112>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a84      	ldr	r2, [pc, #528]	@ (8003fac <HAL_DMA_Init+0x244>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d06c      	beq.n	8003e7a <HAL_DMA_Init+0x112>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a82      	ldr	r2, [pc, #520]	@ (8003fb0 <HAL_DMA_Init+0x248>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d067      	beq.n	8003e7a <HAL_DMA_Init+0x112>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a81      	ldr	r2, [pc, #516]	@ (8003fb4 <HAL_DMA_Init+0x24c>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d062      	beq.n	8003e7a <HAL_DMA_Init+0x112>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a7f      	ldr	r2, [pc, #508]	@ (8003fb8 <HAL_DMA_Init+0x250>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d05d      	beq.n	8003e7a <HAL_DMA_Init+0x112>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a7e      	ldr	r2, [pc, #504]	@ (8003fbc <HAL_DMA_Init+0x254>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d058      	beq.n	8003e7a <HAL_DMA_Init+0x112>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a7c      	ldr	r2, [pc, #496]	@ (8003fc0 <HAL_DMA_Init+0x258>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d053      	beq.n	8003e7a <HAL_DMA_Init+0x112>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a7b      	ldr	r2, [pc, #492]	@ (8003fc4 <HAL_DMA_Init+0x25c>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d04e      	beq.n	8003e7a <HAL_DMA_Init+0x112>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a79      	ldr	r2, [pc, #484]	@ (8003fc8 <HAL_DMA_Init+0x260>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d049      	beq.n	8003e7a <HAL_DMA_Init+0x112>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a78      	ldr	r2, [pc, #480]	@ (8003fcc <HAL_DMA_Init+0x264>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d044      	beq.n	8003e7a <HAL_DMA_Init+0x112>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a76      	ldr	r2, [pc, #472]	@ (8003fd0 <HAL_DMA_Init+0x268>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d03f      	beq.n	8003e7a <HAL_DMA_Init+0x112>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a75      	ldr	r2, [pc, #468]	@ (8003fd4 <HAL_DMA_Init+0x26c>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d03a      	beq.n	8003e7a <HAL_DMA_Init+0x112>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a73      	ldr	r2, [pc, #460]	@ (8003fd8 <HAL_DMA_Init+0x270>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d035      	beq.n	8003e7a <HAL_DMA_Init+0x112>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4a72      	ldr	r2, [pc, #456]	@ (8003fdc <HAL_DMA_Init+0x274>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d030      	beq.n	8003e7a <HAL_DMA_Init+0x112>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a70      	ldr	r2, [pc, #448]	@ (8003fe0 <HAL_DMA_Init+0x278>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d02b      	beq.n	8003e7a <HAL_DMA_Init+0x112>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a6f      	ldr	r2, [pc, #444]	@ (8003fe4 <HAL_DMA_Init+0x27c>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d026      	beq.n	8003e7a <HAL_DMA_Init+0x112>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a6d      	ldr	r2, [pc, #436]	@ (8003fe8 <HAL_DMA_Init+0x280>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d021      	beq.n	8003e7a <HAL_DMA_Init+0x112>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a6c      	ldr	r2, [pc, #432]	@ (8003fec <HAL_DMA_Init+0x284>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d01c      	beq.n	8003e7a <HAL_DMA_Init+0x112>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a6a      	ldr	r2, [pc, #424]	@ (8003ff0 <HAL_DMA_Init+0x288>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d017      	beq.n	8003e7a <HAL_DMA_Init+0x112>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4a69      	ldr	r2, [pc, #420]	@ (8003ff4 <HAL_DMA_Init+0x28c>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d012      	beq.n	8003e7a <HAL_DMA_Init+0x112>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4a67      	ldr	r2, [pc, #412]	@ (8003ff8 <HAL_DMA_Init+0x290>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d00d      	beq.n	8003e7a <HAL_DMA_Init+0x112>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4a66      	ldr	r2, [pc, #408]	@ (8003ffc <HAL_DMA_Init+0x294>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d008      	beq.n	8003e7a <HAL_DMA_Init+0x112>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a64      	ldr	r2, [pc, #400]	@ (8004000 <HAL_DMA_Init+0x298>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d003      	beq.n	8003e7a <HAL_DMA_Init+0x112>
 8003e72:	21e6      	movs	r1, #230	@ 0xe6
 8003e74:	4863      	ldr	r0, [pc, #396]	@ (8004004 <HAL_DMA_Init+0x29c>)
 8003e76:	f7fe faa5 	bl	80023c4 <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	689b      	ldr	r3, [r3, #8]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d00b      	beq.n	8003e9a <HAL_DMA_Init+0x132>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	689b      	ldr	r3, [r3, #8]
 8003e86:	2b40      	cmp	r3, #64	@ 0x40
 8003e88:	d007      	beq.n	8003e9a <HAL_DMA_Init+0x132>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	689b      	ldr	r3, [r3, #8]
 8003e8e:	2b80      	cmp	r3, #128	@ 0x80
 8003e90:	d003      	beq.n	8003e9a <HAL_DMA_Init+0x132>
 8003e92:	21e7      	movs	r1, #231	@ 0xe7
 8003e94:	485b      	ldr	r0, [pc, #364]	@ (8004004 <HAL_DMA_Init+0x29c>)
 8003e96:	f7fe fa95 	bl	80023c4 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	68db      	ldr	r3, [r3, #12]
 8003e9e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ea2:	d007      	beq.n	8003eb4 <HAL_DMA_Init+0x14c>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	68db      	ldr	r3, [r3, #12]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d003      	beq.n	8003eb4 <HAL_DMA_Init+0x14c>
 8003eac:	21e8      	movs	r1, #232	@ 0xe8
 8003eae:	4855      	ldr	r0, [pc, #340]	@ (8004004 <HAL_DMA_Init+0x29c>)
 8003eb0:	f7fe fa88 	bl	80023c4 <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	691b      	ldr	r3, [r3, #16]
 8003eb8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ebc:	d007      	beq.n	8003ece <HAL_DMA_Init+0x166>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	691b      	ldr	r3, [r3, #16]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d003      	beq.n	8003ece <HAL_DMA_Init+0x166>
 8003ec6:	21e9      	movs	r1, #233	@ 0xe9
 8003ec8:	484e      	ldr	r0, [pc, #312]	@ (8004004 <HAL_DMA_Init+0x29c>)
 8003eca:	f7fe fa7b 	bl	80023c4 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	695b      	ldr	r3, [r3, #20]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d00d      	beq.n	8003ef2 <HAL_DMA_Init+0x18a>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	695b      	ldr	r3, [r3, #20]
 8003eda:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003ede:	d008      	beq.n	8003ef2 <HAL_DMA_Init+0x18a>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	695b      	ldr	r3, [r3, #20]
 8003ee4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ee8:	d003      	beq.n	8003ef2 <HAL_DMA_Init+0x18a>
 8003eea:	21ea      	movs	r1, #234	@ 0xea
 8003eec:	4845      	ldr	r0, [pc, #276]	@ (8004004 <HAL_DMA_Init+0x29c>)
 8003eee:	f7fe fa69 	bl	80023c4 <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	699b      	ldr	r3, [r3, #24]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d00d      	beq.n	8003f16 <HAL_DMA_Init+0x1ae>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	699b      	ldr	r3, [r3, #24]
 8003efe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f02:	d008      	beq.n	8003f16 <HAL_DMA_Init+0x1ae>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	699b      	ldr	r3, [r3, #24]
 8003f08:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003f0c:	d003      	beq.n	8003f16 <HAL_DMA_Init+0x1ae>
 8003f0e:	21eb      	movs	r1, #235	@ 0xeb
 8003f10:	483c      	ldr	r0, [pc, #240]	@ (8004004 <HAL_DMA_Init+0x29c>)
 8003f12:	f7fe fa57 	bl	80023c4 <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	69db      	ldr	r3, [r3, #28]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d016      	beq.n	8003f4c <HAL_DMA_Init+0x1e4>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	69db      	ldr	r3, [r3, #28]
 8003f22:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003f26:	d011      	beq.n	8003f4c <HAL_DMA_Init+0x1e4>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	69db      	ldr	r3, [r3, #28]
 8003f2c:	2b20      	cmp	r3, #32
 8003f2e:	d00d      	beq.n	8003f4c <HAL_DMA_Init+0x1e4>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	69db      	ldr	r3, [r3, #28]
 8003f34:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003f38:	d008      	beq.n	8003f4c <HAL_DMA_Init+0x1e4>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	69db      	ldr	r3, [r3, #28]
 8003f3e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003f42:	d003      	beq.n	8003f4c <HAL_DMA_Init+0x1e4>
 8003f44:	21ec      	movs	r1, #236	@ 0xec
 8003f46:	482f      	ldr	r0, [pc, #188]	@ (8004004 <HAL_DMA_Init+0x29c>)
 8003f48:	f7fe fa3c 	bl	80023c4 <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6a1b      	ldr	r3, [r3, #32]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d012      	beq.n	8003f7a <HAL_DMA_Init+0x212>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6a1b      	ldr	r3, [r3, #32]
 8003f58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f5c:	d00d      	beq.n	8003f7a <HAL_DMA_Init+0x212>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6a1b      	ldr	r3, [r3, #32]
 8003f62:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003f66:	d008      	beq.n	8003f7a <HAL_DMA_Init+0x212>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6a1b      	ldr	r3, [r3, #32]
 8003f6c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003f70:	d003      	beq.n	8003f7a <HAL_DMA_Init+0x212>
 8003f72:	21ed      	movs	r1, #237	@ 0xed
 8003f74:	4823      	ldr	r0, [pc, #140]	@ (8004004 <HAL_DMA_Init+0x29c>)
 8003f76:	f7fe fa25 	bl	80023c4 <assert_failed>

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a09      	ldr	r2, [pc, #36]	@ (8003fa4 <HAL_DMA_Init+0x23c>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d07d      	beq.n	8004080 <HAL_DMA_Init+0x318>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a07      	ldr	r2, [pc, #28]	@ (8003fa8 <HAL_DMA_Init+0x240>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d078      	beq.n	8004080 <HAL_DMA_Init+0x318>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a06      	ldr	r2, [pc, #24]	@ (8003fac <HAL_DMA_Init+0x244>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d073      	beq.n	8004080 <HAL_DMA_Init+0x318>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a04      	ldr	r2, [pc, #16]	@ (8003fb0 <HAL_DMA_Init+0x248>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d06e      	beq.n	8004080 <HAL_DMA_Init+0x318>
 8003fa2:	e031      	b.n	8004008 <HAL_DMA_Init+0x2a0>
 8003fa4:	40020010 	.word	0x40020010
 8003fa8:	40020028 	.word	0x40020028
 8003fac:	40020040 	.word	0x40020040
 8003fb0:	40020058 	.word	0x40020058
 8003fb4:	40020070 	.word	0x40020070
 8003fb8:	40020088 	.word	0x40020088
 8003fbc:	400200a0 	.word	0x400200a0
 8003fc0:	400200b8 	.word	0x400200b8
 8003fc4:	40020410 	.word	0x40020410
 8003fc8:	40020428 	.word	0x40020428
 8003fcc:	40020440 	.word	0x40020440
 8003fd0:	40020458 	.word	0x40020458
 8003fd4:	40020470 	.word	0x40020470
 8003fd8:	40020488 	.word	0x40020488
 8003fdc:	400204a0 	.word	0x400204a0
 8003fe0:	400204b8 	.word	0x400204b8
 8003fe4:	58025408 	.word	0x58025408
 8003fe8:	5802541c 	.word	0x5802541c
 8003fec:	58025430 	.word	0x58025430
 8003ff0:	58025444 	.word	0x58025444
 8003ff4:	58025458 	.word	0x58025458
 8003ff8:	5802546c 	.word	0x5802546c
 8003ffc:	58025480 	.word	0x58025480
 8004000:	58025494 	.word	0x58025494
 8004004:	08021504 	.word	0x08021504
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a89      	ldr	r2, [pc, #548]	@ (8004234 <HAL_DMA_Init+0x4cc>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d036      	beq.n	8004080 <HAL_DMA_Init+0x318>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a88      	ldr	r2, [pc, #544]	@ (8004238 <HAL_DMA_Init+0x4d0>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d031      	beq.n	8004080 <HAL_DMA_Init+0x318>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a86      	ldr	r2, [pc, #536]	@ (800423c <HAL_DMA_Init+0x4d4>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d02c      	beq.n	8004080 <HAL_DMA_Init+0x318>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a85      	ldr	r2, [pc, #532]	@ (8004240 <HAL_DMA_Init+0x4d8>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d027      	beq.n	8004080 <HAL_DMA_Init+0x318>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a83      	ldr	r2, [pc, #524]	@ (8004244 <HAL_DMA_Init+0x4dc>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d022      	beq.n	8004080 <HAL_DMA_Init+0x318>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a82      	ldr	r2, [pc, #520]	@ (8004248 <HAL_DMA_Init+0x4e0>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d01d      	beq.n	8004080 <HAL_DMA_Init+0x318>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a80      	ldr	r2, [pc, #512]	@ (800424c <HAL_DMA_Init+0x4e4>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d018      	beq.n	8004080 <HAL_DMA_Init+0x318>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a7f      	ldr	r2, [pc, #508]	@ (8004250 <HAL_DMA_Init+0x4e8>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d013      	beq.n	8004080 <HAL_DMA_Init+0x318>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a7d      	ldr	r2, [pc, #500]	@ (8004254 <HAL_DMA_Init+0x4ec>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d00e      	beq.n	8004080 <HAL_DMA_Init+0x318>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a7c      	ldr	r2, [pc, #496]	@ (8004258 <HAL_DMA_Init+0x4f0>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d009      	beq.n	8004080 <HAL_DMA_Init+0x318>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a7a      	ldr	r2, [pc, #488]	@ (800425c <HAL_DMA_Init+0x4f4>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d004      	beq.n	8004080 <HAL_DMA_Init+0x318>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a79      	ldr	r2, [pc, #484]	@ (8004260 <HAL_DMA_Init+0x4f8>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d101      	bne.n	8004084 <HAL_DMA_Init+0x31c>
 8004080:	2301      	movs	r3, #1
 8004082:	e000      	b.n	8004086 <HAL_DMA_Init+0x31e>
 8004084:	2300      	movs	r3, #0
 8004086:	2b00      	cmp	r3, #0
 8004088:	f000 8198 	beq.w	80043bc <HAL_DMA_Init+0x654>
  {
    assert_param(IS_DMA_REQUEST(hdma->Init.Request));
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	2b89      	cmp	r3, #137	@ 0x89
 8004092:	d903      	bls.n	800409c <HAL_DMA_Init+0x334>
 8004094:	21f1      	movs	r1, #241	@ 0xf1
 8004096:	4873      	ldr	r0, [pc, #460]	@ (8004264 <HAL_DMA_Init+0x4fc>)
 8004098:	f7fe f994 	bl	80023c4 <assert_failed>
    assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d007      	beq.n	80040b4 <HAL_DMA_Init+0x34c>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040a8:	2b04      	cmp	r3, #4
 80040aa:	d003      	beq.n	80040b4 <HAL_DMA_Init+0x34c>
 80040ac:	21f2      	movs	r1, #242	@ 0xf2
 80040ae:	486d      	ldr	r0, [pc, #436]	@ (8004264 <HAL_DMA_Init+0x4fc>)
 80040b0:	f7fe f988 	bl	80023c4 <assert_failed>
    /* Check the memory burst, peripheral burst and FIFO threshold parameters only
       when FIFO mode is enabled */
    if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d041      	beq.n	8004140 <HAL_DMA_Init+0x3d8>
    {
      assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d00f      	beq.n	80040e4 <HAL_DMA_Init+0x37c>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040c8:	2b01      	cmp	r3, #1
 80040ca:	d00b      	beq.n	80040e4 <HAL_DMA_Init+0x37c>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040d0:	2b02      	cmp	r3, #2
 80040d2:	d007      	beq.n	80040e4 <HAL_DMA_Init+0x37c>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040d8:	2b03      	cmp	r3, #3
 80040da:	d003      	beq.n	80040e4 <HAL_DMA_Init+0x37c>
 80040dc:	21f7      	movs	r1, #247	@ 0xf7
 80040de:	4861      	ldr	r0, [pc, #388]	@ (8004264 <HAL_DMA_Init+0x4fc>)
 80040e0:	f7fe f970 	bl	80023c4 <assert_failed>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d012      	beq.n	8004112 <HAL_DMA_Init+0x3aa>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040f0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80040f4:	d00d      	beq.n	8004112 <HAL_DMA_Init+0x3aa>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040fa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80040fe:	d008      	beq.n	8004112 <HAL_DMA_Init+0x3aa>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004104:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004108:	d003      	beq.n	8004112 <HAL_DMA_Init+0x3aa>
 800410a:	21f8      	movs	r1, #248	@ 0xf8
 800410c:	4855      	ldr	r0, [pc, #340]	@ (8004264 <HAL_DMA_Init+0x4fc>)
 800410e:	f7fe f959 	bl	80023c4 <assert_failed>
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004116:	2b00      	cmp	r3, #0
 8004118:	d012      	beq.n	8004140 <HAL_DMA_Init+0x3d8>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800411e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004122:	d00d      	beq.n	8004140 <HAL_DMA_Init+0x3d8>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004128:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800412c:	d008      	beq.n	8004140 <HAL_DMA_Init+0x3d8>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004132:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004136:	d003      	beq.n	8004140 <HAL_DMA_Init+0x3d8>
 8004138:	21f9      	movs	r1, #249	@ 0xf9
 800413a:	484a      	ldr	r0, [pc, #296]	@ (8004264 <HAL_DMA_Init+0x4fc>)
 800413c:	f7fe f942 	bl	80023c4 <assert_failed>
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2202      	movs	r2, #2
 8004144:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2200      	movs	r2, #0
 800414c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a44      	ldr	r2, [pc, #272]	@ (8004268 <HAL_DMA_Init+0x500>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d04a      	beq.n	80041f0 <HAL_DMA_Init+0x488>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a43      	ldr	r2, [pc, #268]	@ (800426c <HAL_DMA_Init+0x504>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d045      	beq.n	80041f0 <HAL_DMA_Init+0x488>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a41      	ldr	r2, [pc, #260]	@ (8004270 <HAL_DMA_Init+0x508>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d040      	beq.n	80041f0 <HAL_DMA_Init+0x488>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a40      	ldr	r2, [pc, #256]	@ (8004274 <HAL_DMA_Init+0x50c>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d03b      	beq.n	80041f0 <HAL_DMA_Init+0x488>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a2d      	ldr	r2, [pc, #180]	@ (8004234 <HAL_DMA_Init+0x4cc>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d036      	beq.n	80041f0 <HAL_DMA_Init+0x488>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a2c      	ldr	r2, [pc, #176]	@ (8004238 <HAL_DMA_Init+0x4d0>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d031      	beq.n	80041f0 <HAL_DMA_Init+0x488>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a2a      	ldr	r2, [pc, #168]	@ (800423c <HAL_DMA_Init+0x4d4>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d02c      	beq.n	80041f0 <HAL_DMA_Init+0x488>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a29      	ldr	r2, [pc, #164]	@ (8004240 <HAL_DMA_Init+0x4d8>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d027      	beq.n	80041f0 <HAL_DMA_Init+0x488>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a27      	ldr	r2, [pc, #156]	@ (8004244 <HAL_DMA_Init+0x4dc>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d022      	beq.n	80041f0 <HAL_DMA_Init+0x488>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a26      	ldr	r2, [pc, #152]	@ (8004248 <HAL_DMA_Init+0x4e0>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d01d      	beq.n	80041f0 <HAL_DMA_Init+0x488>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a24      	ldr	r2, [pc, #144]	@ (800424c <HAL_DMA_Init+0x4e4>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d018      	beq.n	80041f0 <HAL_DMA_Init+0x488>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a23      	ldr	r2, [pc, #140]	@ (8004250 <HAL_DMA_Init+0x4e8>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d013      	beq.n	80041f0 <HAL_DMA_Init+0x488>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a21      	ldr	r2, [pc, #132]	@ (8004254 <HAL_DMA_Init+0x4ec>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d00e      	beq.n	80041f0 <HAL_DMA_Init+0x488>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a20      	ldr	r2, [pc, #128]	@ (8004258 <HAL_DMA_Init+0x4f0>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d009      	beq.n	80041f0 <HAL_DMA_Init+0x488>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a1e      	ldr	r2, [pc, #120]	@ (800425c <HAL_DMA_Init+0x4f4>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d004      	beq.n	80041f0 <HAL_DMA_Init+0x488>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a1d      	ldr	r2, [pc, #116]	@ (8004260 <HAL_DMA_Init+0x4f8>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d108      	bne.n	8004202 <HAL_DMA_Init+0x49a>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	681a      	ldr	r2, [r3, #0]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f022 0201 	bic.w	r2, r2, #1
 80041fe:	601a      	str	r2, [r3, #0]
 8004200:	e007      	b.n	8004212 <HAL_DMA_Init+0x4aa>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	681a      	ldr	r2, [r3, #0]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f022 0201 	bic.w	r2, r2, #1
 8004210:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004212:	e031      	b.n	8004278 <HAL_DMA_Init+0x510>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004214:	f7ff fa72 	bl	80036fc <HAL_GetTick>
 8004218:	4602      	mov	r2, r0
 800421a:	693b      	ldr	r3, [r7, #16]
 800421c:	1ad3      	subs	r3, r2, r3
 800421e:	2b05      	cmp	r3, #5
 8004220:	d92a      	bls.n	8004278 <HAL_DMA_Init+0x510>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2220      	movs	r2, #32
 8004226:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2203      	movs	r2, #3
 800422c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8004230:	2301      	movs	r3, #1
 8004232:	e256      	b.n	80046e2 <HAL_DMA_Init+0x97a>
 8004234:	40020070 	.word	0x40020070
 8004238:	40020088 	.word	0x40020088
 800423c:	400200a0 	.word	0x400200a0
 8004240:	400200b8 	.word	0x400200b8
 8004244:	40020410 	.word	0x40020410
 8004248:	40020428 	.word	0x40020428
 800424c:	40020440 	.word	0x40020440
 8004250:	40020458 	.word	0x40020458
 8004254:	40020470 	.word	0x40020470
 8004258:	40020488 	.word	0x40020488
 800425c:	400204a0 	.word	0x400204a0
 8004260:	400204b8 	.word	0x400204b8
 8004264:	08021504 	.word	0x08021504
 8004268:	40020010 	.word	0x40020010
 800426c:	40020028 	.word	0x40020028
 8004270:	40020040 	.word	0x40020040
 8004274:	40020058 	.word	0x40020058
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f003 0301 	and.w	r3, r3, #1
 8004282:	2b00      	cmp	r3, #0
 8004284:	d1c6      	bne.n	8004214 <HAL_DMA_Init+0x4ac>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800428e:	697a      	ldr	r2, [r7, #20]
 8004290:	4b8b      	ldr	r3, [pc, #556]	@ (80044c0 <HAL_DMA_Init+0x758>)
 8004292:	4013      	ands	r3, r2
 8004294:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800429e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	691b      	ldr	r3, [r3, #16]
 80042a4:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80042aa:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	699b      	ldr	r3, [r3, #24]
 80042b0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80042b6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6a1b      	ldr	r3, [r3, #32]
 80042bc:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80042be:	697a      	ldr	r2, [r7, #20]
 80042c0:	4313      	orrs	r3, r2
 80042c2:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042c8:	2b04      	cmp	r3, #4
 80042ca:	d107      	bne.n	80042dc <HAL_DMA_Init+0x574>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042d4:	4313      	orrs	r3, r2
 80042d6:	697a      	ldr	r2, [r7, #20]
 80042d8:	4313      	orrs	r3, r2
 80042da:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	2b28      	cmp	r3, #40	@ 0x28
 80042e2:	d903      	bls.n	80042ec <HAL_DMA_Init+0x584>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	2b2e      	cmp	r3, #46	@ 0x2e
 80042ea:	d91f      	bls.n	800432c <HAL_DMA_Init+0x5c4>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	2b3e      	cmp	r3, #62	@ 0x3e
 80042f2:	d903      	bls.n	80042fc <HAL_DMA_Init+0x594>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	2b42      	cmp	r3, #66	@ 0x42
 80042fa:	d917      	bls.n	800432c <HAL_DMA_Init+0x5c4>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	2b46      	cmp	r3, #70	@ 0x46
 8004302:	d903      	bls.n	800430c <HAL_DMA_Init+0x5a4>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	2b48      	cmp	r3, #72	@ 0x48
 800430a:	d90f      	bls.n	800432c <HAL_DMA_Init+0x5c4>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	2b4e      	cmp	r3, #78	@ 0x4e
 8004312:	d903      	bls.n	800431c <HAL_DMA_Init+0x5b4>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	2b52      	cmp	r3, #82	@ 0x52
 800431a:	d907      	bls.n	800432c <HAL_DMA_Init+0x5c4>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	2b73      	cmp	r3, #115	@ 0x73
 8004322:	d905      	bls.n	8004330 <HAL_DMA_Init+0x5c8>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	2b77      	cmp	r3, #119	@ 0x77
 800432a:	d801      	bhi.n	8004330 <HAL_DMA_Init+0x5c8>
 800432c:	2301      	movs	r3, #1
 800432e:	e000      	b.n	8004332 <HAL_DMA_Init+0x5ca>
 8004330:	2300      	movs	r3, #0
 8004332:	2b00      	cmp	r3, #0
 8004334:	d003      	beq.n	800433e <HAL_DMA_Init+0x5d6>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800433c:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	697a      	ldr	r2, [r7, #20]
 8004344:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	695b      	ldr	r3, [r3, #20]
 800434c:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	f023 0307 	bic.w	r3, r3, #7
 8004354:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800435a:	697a      	ldr	r2, [r7, #20]
 800435c:	4313      	orrs	r3, r2
 800435e:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004364:	2b04      	cmp	r3, #4
 8004366:	d117      	bne.n	8004398 <HAL_DMA_Init+0x630>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800436c:	697a      	ldr	r2, [r7, #20]
 800436e:	4313      	orrs	r3, r2
 8004370:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004376:	2b00      	cmp	r3, #0
 8004378:	d00e      	beq.n	8004398 <HAL_DMA_Init+0x630>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800437a:	6878      	ldr	r0, [r7, #4]
 800437c:	f001 ff2a 	bl	80061d4 <DMA_CheckFifoParam>
 8004380:	4603      	mov	r3, r0
 8004382:	2b00      	cmp	r3, #0
 8004384:	d008      	beq.n	8004398 <HAL_DMA_Init+0x630>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2240      	movs	r2, #64	@ 0x40
 800438a:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2201      	movs	r2, #1
 8004390:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8004394:	2301      	movs	r3, #1
 8004396:	e1a4      	b.n	80046e2 <HAL_DMA_Init+0x97a>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	697a      	ldr	r2, [r7, #20]
 800439e:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80043a0:	6878      	ldr	r0, [r7, #4]
 80043a2:	f001 fe65 	bl	8006070 <DMA_CalcBaseAndBitshift>
 80043a6:	4603      	mov	r3, r0
 80043a8:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043ae:	f003 031f 	and.w	r3, r3, #31
 80043b2:	223f      	movs	r2, #63	@ 0x3f
 80043b4:	409a      	lsls	r2, r3
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	609a      	str	r2, [r3, #8]
 80043ba:	e0da      	b.n	8004572 <HAL_DMA_Init+0x80a>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a40      	ldr	r2, [pc, #256]	@ (80044c4 <HAL_DMA_Init+0x75c>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d022      	beq.n	800440c <HAL_DMA_Init+0x6a4>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a3f      	ldr	r2, [pc, #252]	@ (80044c8 <HAL_DMA_Init+0x760>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d01d      	beq.n	800440c <HAL_DMA_Init+0x6a4>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a3d      	ldr	r2, [pc, #244]	@ (80044cc <HAL_DMA_Init+0x764>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d018      	beq.n	800440c <HAL_DMA_Init+0x6a4>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a3c      	ldr	r2, [pc, #240]	@ (80044d0 <HAL_DMA_Init+0x768>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d013      	beq.n	800440c <HAL_DMA_Init+0x6a4>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a3a      	ldr	r2, [pc, #232]	@ (80044d4 <HAL_DMA_Init+0x76c>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d00e      	beq.n	800440c <HAL_DMA_Init+0x6a4>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a39      	ldr	r2, [pc, #228]	@ (80044d8 <HAL_DMA_Init+0x770>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d009      	beq.n	800440c <HAL_DMA_Init+0x6a4>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a37      	ldr	r2, [pc, #220]	@ (80044dc <HAL_DMA_Init+0x774>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d004      	beq.n	800440c <HAL_DMA_Init+0x6a4>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a36      	ldr	r2, [pc, #216]	@ (80044e0 <HAL_DMA_Init+0x778>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d101      	bne.n	8004410 <HAL_DMA_Init+0x6a8>
 800440c:	2301      	movs	r3, #1
 800440e:	e000      	b.n	8004412 <HAL_DMA_Init+0x6aa>
 8004410:	2300      	movs	r3, #0
 8004412:	2b00      	cmp	r3, #0
 8004414:	f000 80a4 	beq.w	8004560 <HAL_DMA_Init+0x7f8>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a29      	ldr	r2, [pc, #164]	@ (80044c4 <HAL_DMA_Init+0x75c>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d022      	beq.n	8004468 <HAL_DMA_Init+0x700>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a28      	ldr	r2, [pc, #160]	@ (80044c8 <HAL_DMA_Init+0x760>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d01d      	beq.n	8004468 <HAL_DMA_Init+0x700>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a26      	ldr	r2, [pc, #152]	@ (80044cc <HAL_DMA_Init+0x764>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d018      	beq.n	8004468 <HAL_DMA_Init+0x700>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a25      	ldr	r2, [pc, #148]	@ (80044d0 <HAL_DMA_Init+0x768>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d013      	beq.n	8004468 <HAL_DMA_Init+0x700>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a23      	ldr	r2, [pc, #140]	@ (80044d4 <HAL_DMA_Init+0x76c>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d00e      	beq.n	8004468 <HAL_DMA_Init+0x700>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a22      	ldr	r2, [pc, #136]	@ (80044d8 <HAL_DMA_Init+0x770>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d009      	beq.n	8004468 <HAL_DMA_Init+0x700>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a20      	ldr	r2, [pc, #128]	@ (80044dc <HAL_DMA_Init+0x774>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d004      	beq.n	8004468 <HAL_DMA_Init+0x700>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a1f      	ldr	r2, [pc, #124]	@ (80044e0 <HAL_DMA_Init+0x778>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d101      	bne.n	800446c <HAL_DMA_Init+0x704>
 8004468:	2301      	movs	r3, #1
 800446a:	e000      	b.n	800446e <HAL_DMA_Init+0x706>
 800446c:	2300      	movs	r3, #0
 800446e:	2b00      	cmp	r3, #0
 8004470:	d008      	beq.n	8004484 <HAL_DMA_Init+0x71c>
    {
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	2b11      	cmp	r3, #17
 8004478:	d904      	bls.n	8004484 <HAL_DMA_Init+0x71c>
 800447a:	f240 116b 	movw	r1, #363	@ 0x16b
 800447e:	4819      	ldr	r0, [pc, #100]	@ (80044e4 <HAL_DMA_Init+0x77c>)
 8004480:	f7fd ffa0 	bl	80023c4 <assert_failed>
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2202      	movs	r2, #2
 8004488:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2200      	movs	r2, #0
 8004490:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800449c:	697a      	ldr	r2, [r7, #20]
 800449e:	4b12      	ldr	r3, [pc, #72]	@ (80044e8 <HAL_DMA_Init+0x780>)
 80044a0:	4013      	ands	r3, r2
 80044a2:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	689b      	ldr	r3, [r3, #8]
 80044a8:	2b40      	cmp	r3, #64	@ 0x40
 80044aa:	d01f      	beq.n	80044ec <HAL_DMA_Init+0x784>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	689b      	ldr	r3, [r3, #8]
 80044b0:	2b80      	cmp	r3, #128	@ 0x80
 80044b2:	d102      	bne.n	80044ba <HAL_DMA_Init+0x752>
 80044b4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80044b8:	e019      	b.n	80044ee <HAL_DMA_Init+0x786>
 80044ba:	2300      	movs	r3, #0
 80044bc:	e017      	b.n	80044ee <HAL_DMA_Init+0x786>
 80044be:	bf00      	nop
 80044c0:	fe10803f 	.word	0xfe10803f
 80044c4:	58025408 	.word	0x58025408
 80044c8:	5802541c 	.word	0x5802541c
 80044cc:	58025430 	.word	0x58025430
 80044d0:	58025444 	.word	0x58025444
 80044d4:	58025458 	.word	0x58025458
 80044d8:	5802546c 	.word	0x5802546c
 80044dc:	58025480 	.word	0x58025480
 80044e0:	58025494 	.word	0x58025494
 80044e4:	08021504 	.word	0x08021504
 80044e8:	fffe000f 	.word	0xfffe000f
 80044ec:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80044ee:	687a      	ldr	r2, [r7, #4]
 80044f0:	68d2      	ldr	r2, [r2, #12]
 80044f2:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80044f4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	691b      	ldr	r3, [r3, #16]
 80044fa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80044fc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	695b      	ldr	r3, [r3, #20]
 8004502:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004504:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	699b      	ldr	r3, [r3, #24]
 800450a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800450c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	69db      	ldr	r3, [r3, #28]
 8004512:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004514:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6a1b      	ldr	r3, [r3, #32]
 800451a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800451c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800451e:	697a      	ldr	r2, [r7, #20]
 8004520:	4313      	orrs	r3, r2
 8004522:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	697a      	ldr	r2, [r7, #20]
 800452a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	461a      	mov	r2, r3
 8004532:	4b6e      	ldr	r3, [pc, #440]	@ (80046ec <HAL_DMA_Init+0x984>)
 8004534:	4413      	add	r3, r2
 8004536:	4a6e      	ldr	r2, [pc, #440]	@ (80046f0 <HAL_DMA_Init+0x988>)
 8004538:	fba2 2303 	umull	r2, r3, r2, r3
 800453c:	091b      	lsrs	r3, r3, #4
 800453e:	009a      	lsls	r2, r3, #2
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004544:	6878      	ldr	r0, [r7, #4]
 8004546:	f001 fd93 	bl	8006070 <DMA_CalcBaseAndBitshift>
 800454a:	4603      	mov	r3, r0
 800454c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004552:	f003 031f 	and.w	r3, r3, #31
 8004556:	2201      	movs	r2, #1
 8004558:	409a      	lsls	r2, r3
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	605a      	str	r2, [r3, #4]
 800455e:	e008      	b.n	8004572 <HAL_DMA_Init+0x80a>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2240      	movs	r2, #64	@ 0x40
 8004564:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2203      	movs	r2, #3
 800456a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 800456e:	2301      	movs	r3, #1
 8004570:	e0b7      	b.n	80046e2 <HAL_DMA_Init+0x97a>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a5f      	ldr	r2, [pc, #380]	@ (80046f4 <HAL_DMA_Init+0x98c>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d072      	beq.n	8004662 <HAL_DMA_Init+0x8fa>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a5d      	ldr	r2, [pc, #372]	@ (80046f8 <HAL_DMA_Init+0x990>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d06d      	beq.n	8004662 <HAL_DMA_Init+0x8fa>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a5c      	ldr	r2, [pc, #368]	@ (80046fc <HAL_DMA_Init+0x994>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d068      	beq.n	8004662 <HAL_DMA_Init+0x8fa>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a5a      	ldr	r2, [pc, #360]	@ (8004700 <HAL_DMA_Init+0x998>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d063      	beq.n	8004662 <HAL_DMA_Init+0x8fa>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4a59      	ldr	r2, [pc, #356]	@ (8004704 <HAL_DMA_Init+0x99c>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d05e      	beq.n	8004662 <HAL_DMA_Init+0x8fa>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a57      	ldr	r2, [pc, #348]	@ (8004708 <HAL_DMA_Init+0x9a0>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d059      	beq.n	8004662 <HAL_DMA_Init+0x8fa>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a56      	ldr	r2, [pc, #344]	@ (800470c <HAL_DMA_Init+0x9a4>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d054      	beq.n	8004662 <HAL_DMA_Init+0x8fa>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a54      	ldr	r2, [pc, #336]	@ (8004710 <HAL_DMA_Init+0x9a8>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d04f      	beq.n	8004662 <HAL_DMA_Init+0x8fa>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a53      	ldr	r2, [pc, #332]	@ (8004714 <HAL_DMA_Init+0x9ac>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d04a      	beq.n	8004662 <HAL_DMA_Init+0x8fa>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a51      	ldr	r2, [pc, #324]	@ (8004718 <HAL_DMA_Init+0x9b0>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d045      	beq.n	8004662 <HAL_DMA_Init+0x8fa>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4a50      	ldr	r2, [pc, #320]	@ (800471c <HAL_DMA_Init+0x9b4>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d040      	beq.n	8004662 <HAL_DMA_Init+0x8fa>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a4e      	ldr	r2, [pc, #312]	@ (8004720 <HAL_DMA_Init+0x9b8>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d03b      	beq.n	8004662 <HAL_DMA_Init+0x8fa>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4a4d      	ldr	r2, [pc, #308]	@ (8004724 <HAL_DMA_Init+0x9bc>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d036      	beq.n	8004662 <HAL_DMA_Init+0x8fa>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4a4b      	ldr	r2, [pc, #300]	@ (8004728 <HAL_DMA_Init+0x9c0>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d031      	beq.n	8004662 <HAL_DMA_Init+0x8fa>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4a4a      	ldr	r2, [pc, #296]	@ (800472c <HAL_DMA_Init+0x9c4>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d02c      	beq.n	8004662 <HAL_DMA_Init+0x8fa>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a48      	ldr	r2, [pc, #288]	@ (8004730 <HAL_DMA_Init+0x9c8>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d027      	beq.n	8004662 <HAL_DMA_Init+0x8fa>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4a47      	ldr	r2, [pc, #284]	@ (8004734 <HAL_DMA_Init+0x9cc>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d022      	beq.n	8004662 <HAL_DMA_Init+0x8fa>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4a45      	ldr	r2, [pc, #276]	@ (8004738 <HAL_DMA_Init+0x9d0>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d01d      	beq.n	8004662 <HAL_DMA_Init+0x8fa>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4a44      	ldr	r2, [pc, #272]	@ (800473c <HAL_DMA_Init+0x9d4>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d018      	beq.n	8004662 <HAL_DMA_Init+0x8fa>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a42      	ldr	r2, [pc, #264]	@ (8004740 <HAL_DMA_Init+0x9d8>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d013      	beq.n	8004662 <HAL_DMA_Init+0x8fa>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a41      	ldr	r2, [pc, #260]	@ (8004744 <HAL_DMA_Init+0x9dc>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d00e      	beq.n	8004662 <HAL_DMA_Init+0x8fa>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a3f      	ldr	r2, [pc, #252]	@ (8004748 <HAL_DMA_Init+0x9e0>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d009      	beq.n	8004662 <HAL_DMA_Init+0x8fa>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a3e      	ldr	r2, [pc, #248]	@ (800474c <HAL_DMA_Init+0x9e4>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d004      	beq.n	8004662 <HAL_DMA_Init+0x8fa>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a3c      	ldr	r2, [pc, #240]	@ (8004750 <HAL_DMA_Init+0x9e8>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d101      	bne.n	8004666 <HAL_DMA_Init+0x8fe>
 8004662:	2301      	movs	r3, #1
 8004664:	e000      	b.n	8004668 <HAL_DMA_Init+0x900>
 8004666:	2300      	movs	r3, #0
 8004668:	2b00      	cmp	r3, #0
 800466a:	d032      	beq.n	80046d2 <HAL_DMA_Init+0x96a>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800466c:	6878      	ldr	r0, [r7, #4]
 800466e:	f001 fe2d 	bl	80062cc <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	689b      	ldr	r3, [r3, #8]
 8004676:	2b80      	cmp	r3, #128	@ 0x80
 8004678:	d102      	bne.n	8004680 <HAL_DMA_Init+0x918>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2200      	movs	r2, #0
 800467e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	685a      	ldr	r2, [r3, #4]
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004688:	b2d2      	uxtb	r2, r2
 800468a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004690:	687a      	ldr	r2, [r7, #4]
 8004692:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004694:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d010      	beq.n	80046c0 <HAL_DMA_Init+0x958>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	2b08      	cmp	r3, #8
 80046a4:	d80c      	bhi.n	80046c0 <HAL_DMA_Init+0x958>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80046a6:	6878      	ldr	r0, [r7, #4]
 80046a8:	f001 feaa 	bl	8006400 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80046b0:	2200      	movs	r2, #0
 80046b2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046b8:	687a      	ldr	r2, [r7, #4]
 80046ba:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80046bc:	605a      	str	r2, [r3, #4]
 80046be:	e008      	b.n	80046d2 <HAL_DMA_Init+0x96a>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2200      	movs	r2, #0
 80046c4:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2200      	movs	r2, #0
 80046ca:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2200      	movs	r2, #0
 80046d0:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2200      	movs	r2, #0
 80046d6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2201      	movs	r2, #1
 80046dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80046e0:	2300      	movs	r3, #0
}
 80046e2:	4618      	mov	r0, r3
 80046e4:	3718      	adds	r7, #24
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bd80      	pop	{r7, pc}
 80046ea:	bf00      	nop
 80046ec:	a7fdabf8 	.word	0xa7fdabf8
 80046f0:	cccccccd 	.word	0xcccccccd
 80046f4:	40020010 	.word	0x40020010
 80046f8:	40020028 	.word	0x40020028
 80046fc:	40020040 	.word	0x40020040
 8004700:	40020058 	.word	0x40020058
 8004704:	40020070 	.word	0x40020070
 8004708:	40020088 	.word	0x40020088
 800470c:	400200a0 	.word	0x400200a0
 8004710:	400200b8 	.word	0x400200b8
 8004714:	40020410 	.word	0x40020410
 8004718:	40020428 	.word	0x40020428
 800471c:	40020440 	.word	0x40020440
 8004720:	40020458 	.word	0x40020458
 8004724:	40020470 	.word	0x40020470
 8004728:	40020488 	.word	0x40020488
 800472c:	400204a0 	.word	0x400204a0
 8004730:	400204b8 	.word	0x400204b8
 8004734:	58025408 	.word	0x58025408
 8004738:	5802541c 	.word	0x5802541c
 800473c:	58025430 	.word	0x58025430
 8004740:	58025444 	.word	0x58025444
 8004744:	58025458 	.word	0x58025458
 8004748:	5802546c 	.word	0x5802546c
 800474c:	58025480 	.word	0x58025480
 8004750:	58025494 	.word	0x58025494

08004754 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b086      	sub	sp, #24
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 800475c:	f7fe ffce 	bl	80036fc <HAL_GetTick>
 8004760:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d101      	bne.n	800476c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8004768:	2301      	movs	r3, #1
 800476a:	e2dc      	b.n	8004d26 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004772:	b2db      	uxtb	r3, r3
 8004774:	2b02      	cmp	r3, #2
 8004776:	d008      	beq.n	800478a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2280      	movs	r2, #128	@ 0x80
 800477c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2200      	movs	r2, #0
 8004782:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8004786:	2301      	movs	r3, #1
 8004788:	e2cd      	b.n	8004d26 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4a76      	ldr	r2, [pc, #472]	@ (8004968 <HAL_DMA_Abort+0x214>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d04a      	beq.n	800482a <HAL_DMA_Abort+0xd6>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a74      	ldr	r2, [pc, #464]	@ (800496c <HAL_DMA_Abort+0x218>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d045      	beq.n	800482a <HAL_DMA_Abort+0xd6>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4a73      	ldr	r2, [pc, #460]	@ (8004970 <HAL_DMA_Abort+0x21c>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d040      	beq.n	800482a <HAL_DMA_Abort+0xd6>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a71      	ldr	r2, [pc, #452]	@ (8004974 <HAL_DMA_Abort+0x220>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d03b      	beq.n	800482a <HAL_DMA_Abort+0xd6>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a70      	ldr	r2, [pc, #448]	@ (8004978 <HAL_DMA_Abort+0x224>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d036      	beq.n	800482a <HAL_DMA_Abort+0xd6>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a6e      	ldr	r2, [pc, #440]	@ (800497c <HAL_DMA_Abort+0x228>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d031      	beq.n	800482a <HAL_DMA_Abort+0xd6>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a6d      	ldr	r2, [pc, #436]	@ (8004980 <HAL_DMA_Abort+0x22c>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d02c      	beq.n	800482a <HAL_DMA_Abort+0xd6>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a6b      	ldr	r2, [pc, #428]	@ (8004984 <HAL_DMA_Abort+0x230>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d027      	beq.n	800482a <HAL_DMA_Abort+0xd6>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a6a      	ldr	r2, [pc, #424]	@ (8004988 <HAL_DMA_Abort+0x234>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d022      	beq.n	800482a <HAL_DMA_Abort+0xd6>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a68      	ldr	r2, [pc, #416]	@ (800498c <HAL_DMA_Abort+0x238>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d01d      	beq.n	800482a <HAL_DMA_Abort+0xd6>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a67      	ldr	r2, [pc, #412]	@ (8004990 <HAL_DMA_Abort+0x23c>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d018      	beq.n	800482a <HAL_DMA_Abort+0xd6>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a65      	ldr	r2, [pc, #404]	@ (8004994 <HAL_DMA_Abort+0x240>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d013      	beq.n	800482a <HAL_DMA_Abort+0xd6>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a64      	ldr	r2, [pc, #400]	@ (8004998 <HAL_DMA_Abort+0x244>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d00e      	beq.n	800482a <HAL_DMA_Abort+0xd6>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a62      	ldr	r2, [pc, #392]	@ (800499c <HAL_DMA_Abort+0x248>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d009      	beq.n	800482a <HAL_DMA_Abort+0xd6>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a61      	ldr	r2, [pc, #388]	@ (80049a0 <HAL_DMA_Abort+0x24c>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d004      	beq.n	800482a <HAL_DMA_Abort+0xd6>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a5f      	ldr	r2, [pc, #380]	@ (80049a4 <HAL_DMA_Abort+0x250>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d101      	bne.n	800482e <HAL_DMA_Abort+0xda>
 800482a:	2301      	movs	r3, #1
 800482c:	e000      	b.n	8004830 <HAL_DMA_Abort+0xdc>
 800482e:	2300      	movs	r3, #0
 8004830:	2b00      	cmp	r3, #0
 8004832:	d013      	beq.n	800485c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	681a      	ldr	r2, [r3, #0]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f022 021e 	bic.w	r2, r2, #30
 8004842:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	695a      	ldr	r2, [r3, #20]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004852:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	617b      	str	r3, [r7, #20]
 800485a:	e00a      	b.n	8004872 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	681a      	ldr	r2, [r3, #0]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f022 020e 	bic.w	r2, r2, #14
 800486a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4a3c      	ldr	r2, [pc, #240]	@ (8004968 <HAL_DMA_Abort+0x214>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d072      	beq.n	8004962 <HAL_DMA_Abort+0x20e>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4a3a      	ldr	r2, [pc, #232]	@ (800496c <HAL_DMA_Abort+0x218>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d06d      	beq.n	8004962 <HAL_DMA_Abort+0x20e>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4a39      	ldr	r2, [pc, #228]	@ (8004970 <HAL_DMA_Abort+0x21c>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d068      	beq.n	8004962 <HAL_DMA_Abort+0x20e>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4a37      	ldr	r2, [pc, #220]	@ (8004974 <HAL_DMA_Abort+0x220>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d063      	beq.n	8004962 <HAL_DMA_Abort+0x20e>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a36      	ldr	r2, [pc, #216]	@ (8004978 <HAL_DMA_Abort+0x224>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d05e      	beq.n	8004962 <HAL_DMA_Abort+0x20e>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a34      	ldr	r2, [pc, #208]	@ (800497c <HAL_DMA_Abort+0x228>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d059      	beq.n	8004962 <HAL_DMA_Abort+0x20e>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4a33      	ldr	r2, [pc, #204]	@ (8004980 <HAL_DMA_Abort+0x22c>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d054      	beq.n	8004962 <HAL_DMA_Abort+0x20e>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4a31      	ldr	r2, [pc, #196]	@ (8004984 <HAL_DMA_Abort+0x230>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d04f      	beq.n	8004962 <HAL_DMA_Abort+0x20e>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4a30      	ldr	r2, [pc, #192]	@ (8004988 <HAL_DMA_Abort+0x234>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d04a      	beq.n	8004962 <HAL_DMA_Abort+0x20e>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4a2e      	ldr	r2, [pc, #184]	@ (800498c <HAL_DMA_Abort+0x238>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d045      	beq.n	8004962 <HAL_DMA_Abort+0x20e>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4a2d      	ldr	r2, [pc, #180]	@ (8004990 <HAL_DMA_Abort+0x23c>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d040      	beq.n	8004962 <HAL_DMA_Abort+0x20e>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4a2b      	ldr	r2, [pc, #172]	@ (8004994 <HAL_DMA_Abort+0x240>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d03b      	beq.n	8004962 <HAL_DMA_Abort+0x20e>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4a2a      	ldr	r2, [pc, #168]	@ (8004998 <HAL_DMA_Abort+0x244>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d036      	beq.n	8004962 <HAL_DMA_Abort+0x20e>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4a28      	ldr	r2, [pc, #160]	@ (800499c <HAL_DMA_Abort+0x248>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d031      	beq.n	8004962 <HAL_DMA_Abort+0x20e>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4a27      	ldr	r2, [pc, #156]	@ (80049a0 <HAL_DMA_Abort+0x24c>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d02c      	beq.n	8004962 <HAL_DMA_Abort+0x20e>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a25      	ldr	r2, [pc, #148]	@ (80049a4 <HAL_DMA_Abort+0x250>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d027      	beq.n	8004962 <HAL_DMA_Abort+0x20e>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4a24      	ldr	r2, [pc, #144]	@ (80049a8 <HAL_DMA_Abort+0x254>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d022      	beq.n	8004962 <HAL_DMA_Abort+0x20e>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4a22      	ldr	r2, [pc, #136]	@ (80049ac <HAL_DMA_Abort+0x258>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d01d      	beq.n	8004962 <HAL_DMA_Abort+0x20e>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4a21      	ldr	r2, [pc, #132]	@ (80049b0 <HAL_DMA_Abort+0x25c>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d018      	beq.n	8004962 <HAL_DMA_Abort+0x20e>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a1f      	ldr	r2, [pc, #124]	@ (80049b4 <HAL_DMA_Abort+0x260>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d013      	beq.n	8004962 <HAL_DMA_Abort+0x20e>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4a1e      	ldr	r2, [pc, #120]	@ (80049b8 <HAL_DMA_Abort+0x264>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d00e      	beq.n	8004962 <HAL_DMA_Abort+0x20e>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a1c      	ldr	r2, [pc, #112]	@ (80049bc <HAL_DMA_Abort+0x268>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d009      	beq.n	8004962 <HAL_DMA_Abort+0x20e>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4a1b      	ldr	r2, [pc, #108]	@ (80049c0 <HAL_DMA_Abort+0x26c>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d004      	beq.n	8004962 <HAL_DMA_Abort+0x20e>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a19      	ldr	r2, [pc, #100]	@ (80049c4 <HAL_DMA_Abort+0x270>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d132      	bne.n	80049c8 <HAL_DMA_Abort+0x274>
 8004962:	2301      	movs	r3, #1
 8004964:	e031      	b.n	80049ca <HAL_DMA_Abort+0x276>
 8004966:	bf00      	nop
 8004968:	40020010 	.word	0x40020010
 800496c:	40020028 	.word	0x40020028
 8004970:	40020040 	.word	0x40020040
 8004974:	40020058 	.word	0x40020058
 8004978:	40020070 	.word	0x40020070
 800497c:	40020088 	.word	0x40020088
 8004980:	400200a0 	.word	0x400200a0
 8004984:	400200b8 	.word	0x400200b8
 8004988:	40020410 	.word	0x40020410
 800498c:	40020428 	.word	0x40020428
 8004990:	40020440 	.word	0x40020440
 8004994:	40020458 	.word	0x40020458
 8004998:	40020470 	.word	0x40020470
 800499c:	40020488 	.word	0x40020488
 80049a0:	400204a0 	.word	0x400204a0
 80049a4:	400204b8 	.word	0x400204b8
 80049a8:	58025408 	.word	0x58025408
 80049ac:	5802541c 	.word	0x5802541c
 80049b0:	58025430 	.word	0x58025430
 80049b4:	58025444 	.word	0x58025444
 80049b8:	58025458 	.word	0x58025458
 80049bc:	5802546c 	.word	0x5802546c
 80049c0:	58025480 	.word	0x58025480
 80049c4:	58025494 	.word	0x58025494
 80049c8:	2300      	movs	r3, #0
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d007      	beq.n	80049de <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049d2:	681a      	ldr	r2, [r3, #0]
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049d8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80049dc:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4a6d      	ldr	r2, [pc, #436]	@ (8004b98 <HAL_DMA_Abort+0x444>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d04a      	beq.n	8004a7e <HAL_DMA_Abort+0x32a>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4a6b      	ldr	r2, [pc, #428]	@ (8004b9c <HAL_DMA_Abort+0x448>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d045      	beq.n	8004a7e <HAL_DMA_Abort+0x32a>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4a6a      	ldr	r2, [pc, #424]	@ (8004ba0 <HAL_DMA_Abort+0x44c>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d040      	beq.n	8004a7e <HAL_DMA_Abort+0x32a>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a68      	ldr	r2, [pc, #416]	@ (8004ba4 <HAL_DMA_Abort+0x450>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d03b      	beq.n	8004a7e <HAL_DMA_Abort+0x32a>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4a67      	ldr	r2, [pc, #412]	@ (8004ba8 <HAL_DMA_Abort+0x454>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d036      	beq.n	8004a7e <HAL_DMA_Abort+0x32a>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4a65      	ldr	r2, [pc, #404]	@ (8004bac <HAL_DMA_Abort+0x458>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d031      	beq.n	8004a7e <HAL_DMA_Abort+0x32a>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4a64      	ldr	r2, [pc, #400]	@ (8004bb0 <HAL_DMA_Abort+0x45c>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d02c      	beq.n	8004a7e <HAL_DMA_Abort+0x32a>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a62      	ldr	r2, [pc, #392]	@ (8004bb4 <HAL_DMA_Abort+0x460>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d027      	beq.n	8004a7e <HAL_DMA_Abort+0x32a>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4a61      	ldr	r2, [pc, #388]	@ (8004bb8 <HAL_DMA_Abort+0x464>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d022      	beq.n	8004a7e <HAL_DMA_Abort+0x32a>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a5f      	ldr	r2, [pc, #380]	@ (8004bbc <HAL_DMA_Abort+0x468>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d01d      	beq.n	8004a7e <HAL_DMA_Abort+0x32a>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4a5e      	ldr	r2, [pc, #376]	@ (8004bc0 <HAL_DMA_Abort+0x46c>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d018      	beq.n	8004a7e <HAL_DMA_Abort+0x32a>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4a5c      	ldr	r2, [pc, #368]	@ (8004bc4 <HAL_DMA_Abort+0x470>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d013      	beq.n	8004a7e <HAL_DMA_Abort+0x32a>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4a5b      	ldr	r2, [pc, #364]	@ (8004bc8 <HAL_DMA_Abort+0x474>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d00e      	beq.n	8004a7e <HAL_DMA_Abort+0x32a>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a59      	ldr	r2, [pc, #356]	@ (8004bcc <HAL_DMA_Abort+0x478>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d009      	beq.n	8004a7e <HAL_DMA_Abort+0x32a>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a58      	ldr	r2, [pc, #352]	@ (8004bd0 <HAL_DMA_Abort+0x47c>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d004      	beq.n	8004a7e <HAL_DMA_Abort+0x32a>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4a56      	ldr	r2, [pc, #344]	@ (8004bd4 <HAL_DMA_Abort+0x480>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d108      	bne.n	8004a90 <HAL_DMA_Abort+0x33c>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	681a      	ldr	r2, [r3, #0]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f022 0201 	bic.w	r2, r2, #1
 8004a8c:	601a      	str	r2, [r3, #0]
 8004a8e:	e007      	b.n	8004aa0 <HAL_DMA_Abort+0x34c>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	681a      	ldr	r2, [r3, #0]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f022 0201 	bic.w	r2, r2, #1
 8004a9e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004aa0:	e013      	b.n	8004aca <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004aa2:	f7fe fe2b 	bl	80036fc <HAL_GetTick>
 8004aa6:	4602      	mov	r2, r0
 8004aa8:	693b      	ldr	r3, [r7, #16]
 8004aaa:	1ad3      	subs	r3, r2, r3
 8004aac:	2b05      	cmp	r3, #5
 8004aae:	d90c      	bls.n	8004aca <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2220      	movs	r2, #32
 8004ab4:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2203      	movs	r2, #3
 8004aba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	e12d      	b.n	8004d26 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f003 0301 	and.w	r3, r3, #1
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d1e5      	bne.n	8004aa2 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4a2f      	ldr	r2, [pc, #188]	@ (8004b98 <HAL_DMA_Abort+0x444>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d04a      	beq.n	8004b76 <HAL_DMA_Abort+0x422>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a2d      	ldr	r2, [pc, #180]	@ (8004b9c <HAL_DMA_Abort+0x448>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d045      	beq.n	8004b76 <HAL_DMA_Abort+0x422>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4a2c      	ldr	r2, [pc, #176]	@ (8004ba0 <HAL_DMA_Abort+0x44c>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d040      	beq.n	8004b76 <HAL_DMA_Abort+0x422>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a2a      	ldr	r2, [pc, #168]	@ (8004ba4 <HAL_DMA_Abort+0x450>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d03b      	beq.n	8004b76 <HAL_DMA_Abort+0x422>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4a29      	ldr	r2, [pc, #164]	@ (8004ba8 <HAL_DMA_Abort+0x454>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d036      	beq.n	8004b76 <HAL_DMA_Abort+0x422>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4a27      	ldr	r2, [pc, #156]	@ (8004bac <HAL_DMA_Abort+0x458>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d031      	beq.n	8004b76 <HAL_DMA_Abort+0x422>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4a26      	ldr	r2, [pc, #152]	@ (8004bb0 <HAL_DMA_Abort+0x45c>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d02c      	beq.n	8004b76 <HAL_DMA_Abort+0x422>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4a24      	ldr	r2, [pc, #144]	@ (8004bb4 <HAL_DMA_Abort+0x460>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d027      	beq.n	8004b76 <HAL_DMA_Abort+0x422>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4a23      	ldr	r2, [pc, #140]	@ (8004bb8 <HAL_DMA_Abort+0x464>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d022      	beq.n	8004b76 <HAL_DMA_Abort+0x422>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4a21      	ldr	r2, [pc, #132]	@ (8004bbc <HAL_DMA_Abort+0x468>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d01d      	beq.n	8004b76 <HAL_DMA_Abort+0x422>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4a20      	ldr	r2, [pc, #128]	@ (8004bc0 <HAL_DMA_Abort+0x46c>)
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d018      	beq.n	8004b76 <HAL_DMA_Abort+0x422>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4a1e      	ldr	r2, [pc, #120]	@ (8004bc4 <HAL_DMA_Abort+0x470>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d013      	beq.n	8004b76 <HAL_DMA_Abort+0x422>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4a1d      	ldr	r2, [pc, #116]	@ (8004bc8 <HAL_DMA_Abort+0x474>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d00e      	beq.n	8004b76 <HAL_DMA_Abort+0x422>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a1b      	ldr	r2, [pc, #108]	@ (8004bcc <HAL_DMA_Abort+0x478>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d009      	beq.n	8004b76 <HAL_DMA_Abort+0x422>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4a1a      	ldr	r2, [pc, #104]	@ (8004bd0 <HAL_DMA_Abort+0x47c>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d004      	beq.n	8004b76 <HAL_DMA_Abort+0x422>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a18      	ldr	r2, [pc, #96]	@ (8004bd4 <HAL_DMA_Abort+0x480>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d101      	bne.n	8004b7a <HAL_DMA_Abort+0x426>
 8004b76:	2301      	movs	r3, #1
 8004b78:	e000      	b.n	8004b7c <HAL_DMA_Abort+0x428>
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d02b      	beq.n	8004bd8 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b84:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b8a:	f003 031f 	and.w	r3, r3, #31
 8004b8e:	223f      	movs	r2, #63	@ 0x3f
 8004b90:	409a      	lsls	r2, r3
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	609a      	str	r2, [r3, #8]
 8004b96:	e02a      	b.n	8004bee <HAL_DMA_Abort+0x49a>
 8004b98:	40020010 	.word	0x40020010
 8004b9c:	40020028 	.word	0x40020028
 8004ba0:	40020040 	.word	0x40020040
 8004ba4:	40020058 	.word	0x40020058
 8004ba8:	40020070 	.word	0x40020070
 8004bac:	40020088 	.word	0x40020088
 8004bb0:	400200a0 	.word	0x400200a0
 8004bb4:	400200b8 	.word	0x400200b8
 8004bb8:	40020410 	.word	0x40020410
 8004bbc:	40020428 	.word	0x40020428
 8004bc0:	40020440 	.word	0x40020440
 8004bc4:	40020458 	.word	0x40020458
 8004bc8:	40020470 	.word	0x40020470
 8004bcc:	40020488 	.word	0x40020488
 8004bd0:	400204a0 	.word	0x400204a0
 8004bd4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bdc:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004be2:	f003 031f 	and.w	r3, r3, #31
 8004be6:	2201      	movs	r2, #1
 8004be8:	409a      	lsls	r2, r3
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a4f      	ldr	r2, [pc, #316]	@ (8004d30 <HAL_DMA_Abort+0x5dc>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d072      	beq.n	8004cde <HAL_DMA_Abort+0x58a>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a4d      	ldr	r2, [pc, #308]	@ (8004d34 <HAL_DMA_Abort+0x5e0>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d06d      	beq.n	8004cde <HAL_DMA_Abort+0x58a>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a4c      	ldr	r2, [pc, #304]	@ (8004d38 <HAL_DMA_Abort+0x5e4>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d068      	beq.n	8004cde <HAL_DMA_Abort+0x58a>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a4a      	ldr	r2, [pc, #296]	@ (8004d3c <HAL_DMA_Abort+0x5e8>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d063      	beq.n	8004cde <HAL_DMA_Abort+0x58a>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a49      	ldr	r2, [pc, #292]	@ (8004d40 <HAL_DMA_Abort+0x5ec>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d05e      	beq.n	8004cde <HAL_DMA_Abort+0x58a>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a47      	ldr	r2, [pc, #284]	@ (8004d44 <HAL_DMA_Abort+0x5f0>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d059      	beq.n	8004cde <HAL_DMA_Abort+0x58a>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a46      	ldr	r2, [pc, #280]	@ (8004d48 <HAL_DMA_Abort+0x5f4>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d054      	beq.n	8004cde <HAL_DMA_Abort+0x58a>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a44      	ldr	r2, [pc, #272]	@ (8004d4c <HAL_DMA_Abort+0x5f8>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d04f      	beq.n	8004cde <HAL_DMA_Abort+0x58a>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4a43      	ldr	r2, [pc, #268]	@ (8004d50 <HAL_DMA_Abort+0x5fc>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d04a      	beq.n	8004cde <HAL_DMA_Abort+0x58a>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a41      	ldr	r2, [pc, #260]	@ (8004d54 <HAL_DMA_Abort+0x600>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d045      	beq.n	8004cde <HAL_DMA_Abort+0x58a>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4a40      	ldr	r2, [pc, #256]	@ (8004d58 <HAL_DMA_Abort+0x604>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d040      	beq.n	8004cde <HAL_DMA_Abort+0x58a>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a3e      	ldr	r2, [pc, #248]	@ (8004d5c <HAL_DMA_Abort+0x608>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d03b      	beq.n	8004cde <HAL_DMA_Abort+0x58a>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a3d      	ldr	r2, [pc, #244]	@ (8004d60 <HAL_DMA_Abort+0x60c>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d036      	beq.n	8004cde <HAL_DMA_Abort+0x58a>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a3b      	ldr	r2, [pc, #236]	@ (8004d64 <HAL_DMA_Abort+0x610>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d031      	beq.n	8004cde <HAL_DMA_Abort+0x58a>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a3a      	ldr	r2, [pc, #232]	@ (8004d68 <HAL_DMA_Abort+0x614>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d02c      	beq.n	8004cde <HAL_DMA_Abort+0x58a>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a38      	ldr	r2, [pc, #224]	@ (8004d6c <HAL_DMA_Abort+0x618>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d027      	beq.n	8004cde <HAL_DMA_Abort+0x58a>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a37      	ldr	r2, [pc, #220]	@ (8004d70 <HAL_DMA_Abort+0x61c>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d022      	beq.n	8004cde <HAL_DMA_Abort+0x58a>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a35      	ldr	r2, [pc, #212]	@ (8004d74 <HAL_DMA_Abort+0x620>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d01d      	beq.n	8004cde <HAL_DMA_Abort+0x58a>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a34      	ldr	r2, [pc, #208]	@ (8004d78 <HAL_DMA_Abort+0x624>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d018      	beq.n	8004cde <HAL_DMA_Abort+0x58a>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a32      	ldr	r2, [pc, #200]	@ (8004d7c <HAL_DMA_Abort+0x628>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d013      	beq.n	8004cde <HAL_DMA_Abort+0x58a>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a31      	ldr	r2, [pc, #196]	@ (8004d80 <HAL_DMA_Abort+0x62c>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d00e      	beq.n	8004cde <HAL_DMA_Abort+0x58a>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4a2f      	ldr	r2, [pc, #188]	@ (8004d84 <HAL_DMA_Abort+0x630>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d009      	beq.n	8004cde <HAL_DMA_Abort+0x58a>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4a2e      	ldr	r2, [pc, #184]	@ (8004d88 <HAL_DMA_Abort+0x634>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d004      	beq.n	8004cde <HAL_DMA_Abort+0x58a>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a2c      	ldr	r2, [pc, #176]	@ (8004d8c <HAL_DMA_Abort+0x638>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d101      	bne.n	8004ce2 <HAL_DMA_Abort+0x58e>
 8004cde:	2301      	movs	r3, #1
 8004ce0:	e000      	b.n	8004ce4 <HAL_DMA_Abort+0x590>
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d015      	beq.n	8004d14 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004cec:	687a      	ldr	r2, [r7, #4]
 8004cee:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004cf0:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d00c      	beq.n	8004d14 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004cfe:	681a      	ldr	r2, [r3, #0]
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004d04:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004d08:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d0e:	687a      	ldr	r2, [r7, #4]
 8004d10:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004d12:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2201      	movs	r2, #1
 8004d18:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8004d24:	2300      	movs	r3, #0
}
 8004d26:	4618      	mov	r0, r3
 8004d28:	3718      	adds	r7, #24
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	bd80      	pop	{r7, pc}
 8004d2e:	bf00      	nop
 8004d30:	40020010 	.word	0x40020010
 8004d34:	40020028 	.word	0x40020028
 8004d38:	40020040 	.word	0x40020040
 8004d3c:	40020058 	.word	0x40020058
 8004d40:	40020070 	.word	0x40020070
 8004d44:	40020088 	.word	0x40020088
 8004d48:	400200a0 	.word	0x400200a0
 8004d4c:	400200b8 	.word	0x400200b8
 8004d50:	40020410 	.word	0x40020410
 8004d54:	40020428 	.word	0x40020428
 8004d58:	40020440 	.word	0x40020440
 8004d5c:	40020458 	.word	0x40020458
 8004d60:	40020470 	.word	0x40020470
 8004d64:	40020488 	.word	0x40020488
 8004d68:	400204a0 	.word	0x400204a0
 8004d6c:	400204b8 	.word	0x400204b8
 8004d70:	58025408 	.word	0x58025408
 8004d74:	5802541c 	.word	0x5802541c
 8004d78:	58025430 	.word	0x58025430
 8004d7c:	58025444 	.word	0x58025444
 8004d80:	58025458 	.word	0x58025458
 8004d84:	5802546c 	.word	0x5802546c
 8004d88:	58025480 	.word	0x58025480
 8004d8c:	58025494 	.word	0x58025494

08004d90 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b084      	sub	sp, #16
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d101      	bne.n	8004da2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8004d9e:	2301      	movs	r3, #1
 8004da0:	e237      	b.n	8005212 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004da8:	b2db      	uxtb	r3, r3
 8004daa:	2b02      	cmp	r3, #2
 8004dac:	d004      	beq.n	8004db8 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2280      	movs	r2, #128	@ 0x80
 8004db2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004db4:	2301      	movs	r3, #1
 8004db6:	e22c      	b.n	8005212 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a5c      	ldr	r2, [pc, #368]	@ (8004f30 <HAL_DMA_Abort_IT+0x1a0>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d04a      	beq.n	8004e58 <HAL_DMA_Abort_IT+0xc8>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4a5b      	ldr	r2, [pc, #364]	@ (8004f34 <HAL_DMA_Abort_IT+0x1a4>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d045      	beq.n	8004e58 <HAL_DMA_Abort_IT+0xc8>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a59      	ldr	r2, [pc, #356]	@ (8004f38 <HAL_DMA_Abort_IT+0x1a8>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d040      	beq.n	8004e58 <HAL_DMA_Abort_IT+0xc8>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4a58      	ldr	r2, [pc, #352]	@ (8004f3c <HAL_DMA_Abort_IT+0x1ac>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d03b      	beq.n	8004e58 <HAL_DMA_Abort_IT+0xc8>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a56      	ldr	r2, [pc, #344]	@ (8004f40 <HAL_DMA_Abort_IT+0x1b0>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d036      	beq.n	8004e58 <HAL_DMA_Abort_IT+0xc8>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4a55      	ldr	r2, [pc, #340]	@ (8004f44 <HAL_DMA_Abort_IT+0x1b4>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d031      	beq.n	8004e58 <HAL_DMA_Abort_IT+0xc8>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a53      	ldr	r2, [pc, #332]	@ (8004f48 <HAL_DMA_Abort_IT+0x1b8>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d02c      	beq.n	8004e58 <HAL_DMA_Abort_IT+0xc8>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4a52      	ldr	r2, [pc, #328]	@ (8004f4c <HAL_DMA_Abort_IT+0x1bc>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d027      	beq.n	8004e58 <HAL_DMA_Abort_IT+0xc8>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4a50      	ldr	r2, [pc, #320]	@ (8004f50 <HAL_DMA_Abort_IT+0x1c0>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d022      	beq.n	8004e58 <HAL_DMA_Abort_IT+0xc8>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4a4f      	ldr	r2, [pc, #316]	@ (8004f54 <HAL_DMA_Abort_IT+0x1c4>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d01d      	beq.n	8004e58 <HAL_DMA_Abort_IT+0xc8>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4a4d      	ldr	r2, [pc, #308]	@ (8004f58 <HAL_DMA_Abort_IT+0x1c8>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d018      	beq.n	8004e58 <HAL_DMA_Abort_IT+0xc8>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4a4c      	ldr	r2, [pc, #304]	@ (8004f5c <HAL_DMA_Abort_IT+0x1cc>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d013      	beq.n	8004e58 <HAL_DMA_Abort_IT+0xc8>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4a4a      	ldr	r2, [pc, #296]	@ (8004f60 <HAL_DMA_Abort_IT+0x1d0>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d00e      	beq.n	8004e58 <HAL_DMA_Abort_IT+0xc8>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4a49      	ldr	r2, [pc, #292]	@ (8004f64 <HAL_DMA_Abort_IT+0x1d4>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d009      	beq.n	8004e58 <HAL_DMA_Abort_IT+0xc8>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4a47      	ldr	r2, [pc, #284]	@ (8004f68 <HAL_DMA_Abort_IT+0x1d8>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d004      	beq.n	8004e58 <HAL_DMA_Abort_IT+0xc8>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4a46      	ldr	r2, [pc, #280]	@ (8004f6c <HAL_DMA_Abort_IT+0x1dc>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d101      	bne.n	8004e5c <HAL_DMA_Abort_IT+0xcc>
 8004e58:	2301      	movs	r3, #1
 8004e5a:	e000      	b.n	8004e5e <HAL_DMA_Abort_IT+0xce>
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	f000 8086 	beq.w	8004f70 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2204      	movs	r2, #4
 8004e68:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4a2f      	ldr	r2, [pc, #188]	@ (8004f30 <HAL_DMA_Abort_IT+0x1a0>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d04a      	beq.n	8004f0c <HAL_DMA_Abort_IT+0x17c>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4a2e      	ldr	r2, [pc, #184]	@ (8004f34 <HAL_DMA_Abort_IT+0x1a4>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d045      	beq.n	8004f0c <HAL_DMA_Abort_IT+0x17c>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4a2c      	ldr	r2, [pc, #176]	@ (8004f38 <HAL_DMA_Abort_IT+0x1a8>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d040      	beq.n	8004f0c <HAL_DMA_Abort_IT+0x17c>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	4a2b      	ldr	r2, [pc, #172]	@ (8004f3c <HAL_DMA_Abort_IT+0x1ac>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d03b      	beq.n	8004f0c <HAL_DMA_Abort_IT+0x17c>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4a29      	ldr	r2, [pc, #164]	@ (8004f40 <HAL_DMA_Abort_IT+0x1b0>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d036      	beq.n	8004f0c <HAL_DMA_Abort_IT+0x17c>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	4a28      	ldr	r2, [pc, #160]	@ (8004f44 <HAL_DMA_Abort_IT+0x1b4>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d031      	beq.n	8004f0c <HAL_DMA_Abort_IT+0x17c>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4a26      	ldr	r2, [pc, #152]	@ (8004f48 <HAL_DMA_Abort_IT+0x1b8>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d02c      	beq.n	8004f0c <HAL_DMA_Abort_IT+0x17c>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4a25      	ldr	r2, [pc, #148]	@ (8004f4c <HAL_DMA_Abort_IT+0x1bc>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d027      	beq.n	8004f0c <HAL_DMA_Abort_IT+0x17c>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4a23      	ldr	r2, [pc, #140]	@ (8004f50 <HAL_DMA_Abort_IT+0x1c0>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d022      	beq.n	8004f0c <HAL_DMA_Abort_IT+0x17c>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4a22      	ldr	r2, [pc, #136]	@ (8004f54 <HAL_DMA_Abort_IT+0x1c4>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d01d      	beq.n	8004f0c <HAL_DMA_Abort_IT+0x17c>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4a20      	ldr	r2, [pc, #128]	@ (8004f58 <HAL_DMA_Abort_IT+0x1c8>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d018      	beq.n	8004f0c <HAL_DMA_Abort_IT+0x17c>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4a1f      	ldr	r2, [pc, #124]	@ (8004f5c <HAL_DMA_Abort_IT+0x1cc>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d013      	beq.n	8004f0c <HAL_DMA_Abort_IT+0x17c>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4a1d      	ldr	r2, [pc, #116]	@ (8004f60 <HAL_DMA_Abort_IT+0x1d0>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d00e      	beq.n	8004f0c <HAL_DMA_Abort_IT+0x17c>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4a1c      	ldr	r2, [pc, #112]	@ (8004f64 <HAL_DMA_Abort_IT+0x1d4>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d009      	beq.n	8004f0c <HAL_DMA_Abort_IT+0x17c>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4a1a      	ldr	r2, [pc, #104]	@ (8004f68 <HAL_DMA_Abort_IT+0x1d8>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d004      	beq.n	8004f0c <HAL_DMA_Abort_IT+0x17c>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4a19      	ldr	r2, [pc, #100]	@ (8004f6c <HAL_DMA_Abort_IT+0x1dc>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d108      	bne.n	8004f1e <HAL_DMA_Abort_IT+0x18e>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	681a      	ldr	r2, [r3, #0]
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f022 0201 	bic.w	r2, r2, #1
 8004f1a:	601a      	str	r2, [r3, #0]
 8004f1c:	e178      	b.n	8005210 <HAL_DMA_Abort_IT+0x480>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	681a      	ldr	r2, [r3, #0]
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f022 0201 	bic.w	r2, r2, #1
 8004f2c:	601a      	str	r2, [r3, #0]
 8004f2e:	e16f      	b.n	8005210 <HAL_DMA_Abort_IT+0x480>
 8004f30:	40020010 	.word	0x40020010
 8004f34:	40020028 	.word	0x40020028
 8004f38:	40020040 	.word	0x40020040
 8004f3c:	40020058 	.word	0x40020058
 8004f40:	40020070 	.word	0x40020070
 8004f44:	40020088 	.word	0x40020088
 8004f48:	400200a0 	.word	0x400200a0
 8004f4c:	400200b8 	.word	0x400200b8
 8004f50:	40020410 	.word	0x40020410
 8004f54:	40020428 	.word	0x40020428
 8004f58:	40020440 	.word	0x40020440
 8004f5c:	40020458 	.word	0x40020458
 8004f60:	40020470 	.word	0x40020470
 8004f64:	40020488 	.word	0x40020488
 8004f68:	400204a0 	.word	0x400204a0
 8004f6c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	681a      	ldr	r2, [r3, #0]
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f022 020e 	bic.w	r2, r2, #14
 8004f7e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4a6c      	ldr	r2, [pc, #432]	@ (8005138 <HAL_DMA_Abort_IT+0x3a8>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d04a      	beq.n	8005020 <HAL_DMA_Abort_IT+0x290>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4a6b      	ldr	r2, [pc, #428]	@ (800513c <HAL_DMA_Abort_IT+0x3ac>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d045      	beq.n	8005020 <HAL_DMA_Abort_IT+0x290>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4a69      	ldr	r2, [pc, #420]	@ (8005140 <HAL_DMA_Abort_IT+0x3b0>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d040      	beq.n	8005020 <HAL_DMA_Abort_IT+0x290>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a68      	ldr	r2, [pc, #416]	@ (8005144 <HAL_DMA_Abort_IT+0x3b4>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d03b      	beq.n	8005020 <HAL_DMA_Abort_IT+0x290>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4a66      	ldr	r2, [pc, #408]	@ (8005148 <HAL_DMA_Abort_IT+0x3b8>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d036      	beq.n	8005020 <HAL_DMA_Abort_IT+0x290>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4a65      	ldr	r2, [pc, #404]	@ (800514c <HAL_DMA_Abort_IT+0x3bc>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d031      	beq.n	8005020 <HAL_DMA_Abort_IT+0x290>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4a63      	ldr	r2, [pc, #396]	@ (8005150 <HAL_DMA_Abort_IT+0x3c0>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d02c      	beq.n	8005020 <HAL_DMA_Abort_IT+0x290>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4a62      	ldr	r2, [pc, #392]	@ (8005154 <HAL_DMA_Abort_IT+0x3c4>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d027      	beq.n	8005020 <HAL_DMA_Abort_IT+0x290>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4a60      	ldr	r2, [pc, #384]	@ (8005158 <HAL_DMA_Abort_IT+0x3c8>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d022      	beq.n	8005020 <HAL_DMA_Abort_IT+0x290>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4a5f      	ldr	r2, [pc, #380]	@ (800515c <HAL_DMA_Abort_IT+0x3cc>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d01d      	beq.n	8005020 <HAL_DMA_Abort_IT+0x290>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a5d      	ldr	r2, [pc, #372]	@ (8005160 <HAL_DMA_Abort_IT+0x3d0>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d018      	beq.n	8005020 <HAL_DMA_Abort_IT+0x290>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4a5c      	ldr	r2, [pc, #368]	@ (8005164 <HAL_DMA_Abort_IT+0x3d4>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d013      	beq.n	8005020 <HAL_DMA_Abort_IT+0x290>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a5a      	ldr	r2, [pc, #360]	@ (8005168 <HAL_DMA_Abort_IT+0x3d8>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d00e      	beq.n	8005020 <HAL_DMA_Abort_IT+0x290>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4a59      	ldr	r2, [pc, #356]	@ (800516c <HAL_DMA_Abort_IT+0x3dc>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d009      	beq.n	8005020 <HAL_DMA_Abort_IT+0x290>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a57      	ldr	r2, [pc, #348]	@ (8005170 <HAL_DMA_Abort_IT+0x3e0>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d004      	beq.n	8005020 <HAL_DMA_Abort_IT+0x290>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a56      	ldr	r2, [pc, #344]	@ (8005174 <HAL_DMA_Abort_IT+0x3e4>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d108      	bne.n	8005032 <HAL_DMA_Abort_IT+0x2a2>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	681a      	ldr	r2, [r3, #0]
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f022 0201 	bic.w	r2, r2, #1
 800502e:	601a      	str	r2, [r3, #0]
 8005030:	e007      	b.n	8005042 <HAL_DMA_Abort_IT+0x2b2>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	681a      	ldr	r2, [r3, #0]
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f022 0201 	bic.w	r2, r2, #1
 8005040:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4a3c      	ldr	r2, [pc, #240]	@ (8005138 <HAL_DMA_Abort_IT+0x3a8>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d072      	beq.n	8005132 <HAL_DMA_Abort_IT+0x3a2>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a3a      	ldr	r2, [pc, #232]	@ (800513c <HAL_DMA_Abort_IT+0x3ac>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d06d      	beq.n	8005132 <HAL_DMA_Abort_IT+0x3a2>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a39      	ldr	r2, [pc, #228]	@ (8005140 <HAL_DMA_Abort_IT+0x3b0>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d068      	beq.n	8005132 <HAL_DMA_Abort_IT+0x3a2>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4a37      	ldr	r2, [pc, #220]	@ (8005144 <HAL_DMA_Abort_IT+0x3b4>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d063      	beq.n	8005132 <HAL_DMA_Abort_IT+0x3a2>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4a36      	ldr	r2, [pc, #216]	@ (8005148 <HAL_DMA_Abort_IT+0x3b8>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d05e      	beq.n	8005132 <HAL_DMA_Abort_IT+0x3a2>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4a34      	ldr	r2, [pc, #208]	@ (800514c <HAL_DMA_Abort_IT+0x3bc>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d059      	beq.n	8005132 <HAL_DMA_Abort_IT+0x3a2>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4a33      	ldr	r2, [pc, #204]	@ (8005150 <HAL_DMA_Abort_IT+0x3c0>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d054      	beq.n	8005132 <HAL_DMA_Abort_IT+0x3a2>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a31      	ldr	r2, [pc, #196]	@ (8005154 <HAL_DMA_Abort_IT+0x3c4>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d04f      	beq.n	8005132 <HAL_DMA_Abort_IT+0x3a2>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4a30      	ldr	r2, [pc, #192]	@ (8005158 <HAL_DMA_Abort_IT+0x3c8>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d04a      	beq.n	8005132 <HAL_DMA_Abort_IT+0x3a2>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a2e      	ldr	r2, [pc, #184]	@ (800515c <HAL_DMA_Abort_IT+0x3cc>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d045      	beq.n	8005132 <HAL_DMA_Abort_IT+0x3a2>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4a2d      	ldr	r2, [pc, #180]	@ (8005160 <HAL_DMA_Abort_IT+0x3d0>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d040      	beq.n	8005132 <HAL_DMA_Abort_IT+0x3a2>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4a2b      	ldr	r2, [pc, #172]	@ (8005164 <HAL_DMA_Abort_IT+0x3d4>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d03b      	beq.n	8005132 <HAL_DMA_Abort_IT+0x3a2>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4a2a      	ldr	r2, [pc, #168]	@ (8005168 <HAL_DMA_Abort_IT+0x3d8>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d036      	beq.n	8005132 <HAL_DMA_Abort_IT+0x3a2>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4a28      	ldr	r2, [pc, #160]	@ (800516c <HAL_DMA_Abort_IT+0x3dc>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d031      	beq.n	8005132 <HAL_DMA_Abort_IT+0x3a2>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4a27      	ldr	r2, [pc, #156]	@ (8005170 <HAL_DMA_Abort_IT+0x3e0>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d02c      	beq.n	8005132 <HAL_DMA_Abort_IT+0x3a2>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a25      	ldr	r2, [pc, #148]	@ (8005174 <HAL_DMA_Abort_IT+0x3e4>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d027      	beq.n	8005132 <HAL_DMA_Abort_IT+0x3a2>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a24      	ldr	r2, [pc, #144]	@ (8005178 <HAL_DMA_Abort_IT+0x3e8>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d022      	beq.n	8005132 <HAL_DMA_Abort_IT+0x3a2>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a22      	ldr	r2, [pc, #136]	@ (800517c <HAL_DMA_Abort_IT+0x3ec>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d01d      	beq.n	8005132 <HAL_DMA_Abort_IT+0x3a2>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4a21      	ldr	r2, [pc, #132]	@ (8005180 <HAL_DMA_Abort_IT+0x3f0>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d018      	beq.n	8005132 <HAL_DMA_Abort_IT+0x3a2>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a1f      	ldr	r2, [pc, #124]	@ (8005184 <HAL_DMA_Abort_IT+0x3f4>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d013      	beq.n	8005132 <HAL_DMA_Abort_IT+0x3a2>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4a1e      	ldr	r2, [pc, #120]	@ (8005188 <HAL_DMA_Abort_IT+0x3f8>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d00e      	beq.n	8005132 <HAL_DMA_Abort_IT+0x3a2>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4a1c      	ldr	r2, [pc, #112]	@ (800518c <HAL_DMA_Abort_IT+0x3fc>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d009      	beq.n	8005132 <HAL_DMA_Abort_IT+0x3a2>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4a1b      	ldr	r2, [pc, #108]	@ (8005190 <HAL_DMA_Abort_IT+0x400>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d004      	beq.n	8005132 <HAL_DMA_Abort_IT+0x3a2>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a19      	ldr	r2, [pc, #100]	@ (8005194 <HAL_DMA_Abort_IT+0x404>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d132      	bne.n	8005198 <HAL_DMA_Abort_IT+0x408>
 8005132:	2301      	movs	r3, #1
 8005134:	e031      	b.n	800519a <HAL_DMA_Abort_IT+0x40a>
 8005136:	bf00      	nop
 8005138:	40020010 	.word	0x40020010
 800513c:	40020028 	.word	0x40020028
 8005140:	40020040 	.word	0x40020040
 8005144:	40020058 	.word	0x40020058
 8005148:	40020070 	.word	0x40020070
 800514c:	40020088 	.word	0x40020088
 8005150:	400200a0 	.word	0x400200a0
 8005154:	400200b8 	.word	0x400200b8
 8005158:	40020410 	.word	0x40020410
 800515c:	40020428 	.word	0x40020428
 8005160:	40020440 	.word	0x40020440
 8005164:	40020458 	.word	0x40020458
 8005168:	40020470 	.word	0x40020470
 800516c:	40020488 	.word	0x40020488
 8005170:	400204a0 	.word	0x400204a0
 8005174:	400204b8 	.word	0x400204b8
 8005178:	58025408 	.word	0x58025408
 800517c:	5802541c 	.word	0x5802541c
 8005180:	58025430 	.word	0x58025430
 8005184:	58025444 	.word	0x58025444
 8005188:	58025458 	.word	0x58025458
 800518c:	5802546c 	.word	0x5802546c
 8005190:	58025480 	.word	0x58025480
 8005194:	58025494 	.word	0x58025494
 8005198:	2300      	movs	r3, #0
 800519a:	2b00      	cmp	r3, #0
 800519c:	d028      	beq.n	80051f0 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80051a2:	681a      	ldr	r2, [r3, #0]
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80051a8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80051ac:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051b2:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051b8:	f003 031f 	and.w	r3, r3, #31
 80051bc:	2201      	movs	r2, #1
 80051be:	409a      	lsls	r2, r3
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80051c8:	687a      	ldr	r2, [r7, #4]
 80051ca:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80051cc:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d00c      	beq.n	80051f0 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80051da:	681a      	ldr	r2, [r3, #0]
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80051e0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80051e4:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051ea:	687a      	ldr	r2, [r7, #4]
 80051ec:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80051ee:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2201      	movs	r2, #1
 80051f4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2200      	movs	r2, #0
 80051fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005204:	2b00      	cmp	r3, #0
 8005206:	d003      	beq.n	8005210 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800520c:	6878      	ldr	r0, [r7, #4]
 800520e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8005210:	2300      	movs	r3, #0
}
 8005212:	4618      	mov	r0, r3
 8005214:	3710      	adds	r7, #16
 8005216:	46bd      	mov	sp, r7
 8005218:	bd80      	pop	{r7, pc}
 800521a:	bf00      	nop

0800521c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b08a      	sub	sp, #40	@ 0x28
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8005224:	2300      	movs	r3, #0
 8005226:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005228:	4b67      	ldr	r3, [pc, #412]	@ (80053c8 <HAL_DMA_IRQHandler+0x1ac>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4a67      	ldr	r2, [pc, #412]	@ (80053cc <HAL_DMA_IRQHandler+0x1b0>)
 800522e:	fba2 2303 	umull	r2, r3, r2, r3
 8005232:	0a9b      	lsrs	r3, r3, #10
 8005234:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800523a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005240:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8005242:	6a3b      	ldr	r3, [r7, #32]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8005248:	69fb      	ldr	r3, [r7, #28]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	4a5f      	ldr	r2, [pc, #380]	@ (80053d0 <HAL_DMA_IRQHandler+0x1b4>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d04a      	beq.n	80052ee <HAL_DMA_IRQHandler+0xd2>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4a5d      	ldr	r2, [pc, #372]	@ (80053d4 <HAL_DMA_IRQHandler+0x1b8>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d045      	beq.n	80052ee <HAL_DMA_IRQHandler+0xd2>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4a5c      	ldr	r2, [pc, #368]	@ (80053d8 <HAL_DMA_IRQHandler+0x1bc>)
 8005268:	4293      	cmp	r3, r2
 800526a:	d040      	beq.n	80052ee <HAL_DMA_IRQHandler+0xd2>
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4a5a      	ldr	r2, [pc, #360]	@ (80053dc <HAL_DMA_IRQHandler+0x1c0>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d03b      	beq.n	80052ee <HAL_DMA_IRQHandler+0xd2>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	4a59      	ldr	r2, [pc, #356]	@ (80053e0 <HAL_DMA_IRQHandler+0x1c4>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d036      	beq.n	80052ee <HAL_DMA_IRQHandler+0xd2>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4a57      	ldr	r2, [pc, #348]	@ (80053e4 <HAL_DMA_IRQHandler+0x1c8>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d031      	beq.n	80052ee <HAL_DMA_IRQHandler+0xd2>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4a56      	ldr	r2, [pc, #344]	@ (80053e8 <HAL_DMA_IRQHandler+0x1cc>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d02c      	beq.n	80052ee <HAL_DMA_IRQHandler+0xd2>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4a54      	ldr	r2, [pc, #336]	@ (80053ec <HAL_DMA_IRQHandler+0x1d0>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d027      	beq.n	80052ee <HAL_DMA_IRQHandler+0xd2>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4a53      	ldr	r2, [pc, #332]	@ (80053f0 <HAL_DMA_IRQHandler+0x1d4>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d022      	beq.n	80052ee <HAL_DMA_IRQHandler+0xd2>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4a51      	ldr	r2, [pc, #324]	@ (80053f4 <HAL_DMA_IRQHandler+0x1d8>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d01d      	beq.n	80052ee <HAL_DMA_IRQHandler+0xd2>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4a50      	ldr	r2, [pc, #320]	@ (80053f8 <HAL_DMA_IRQHandler+0x1dc>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d018      	beq.n	80052ee <HAL_DMA_IRQHandler+0xd2>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4a4e      	ldr	r2, [pc, #312]	@ (80053fc <HAL_DMA_IRQHandler+0x1e0>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d013      	beq.n	80052ee <HAL_DMA_IRQHandler+0xd2>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4a4d      	ldr	r2, [pc, #308]	@ (8005400 <HAL_DMA_IRQHandler+0x1e4>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d00e      	beq.n	80052ee <HAL_DMA_IRQHandler+0xd2>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4a4b      	ldr	r2, [pc, #300]	@ (8005404 <HAL_DMA_IRQHandler+0x1e8>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d009      	beq.n	80052ee <HAL_DMA_IRQHandler+0xd2>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4a4a      	ldr	r2, [pc, #296]	@ (8005408 <HAL_DMA_IRQHandler+0x1ec>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d004      	beq.n	80052ee <HAL_DMA_IRQHandler+0xd2>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4a48      	ldr	r2, [pc, #288]	@ (800540c <HAL_DMA_IRQHandler+0x1f0>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d101      	bne.n	80052f2 <HAL_DMA_IRQHandler+0xd6>
 80052ee:	2301      	movs	r3, #1
 80052f0:	e000      	b.n	80052f4 <HAL_DMA_IRQHandler+0xd8>
 80052f2:	2300      	movs	r3, #0
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	f000 842b 	beq.w	8005b50 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052fe:	f003 031f 	and.w	r3, r3, #31
 8005302:	2208      	movs	r2, #8
 8005304:	409a      	lsls	r2, r3
 8005306:	69bb      	ldr	r3, [r7, #24]
 8005308:	4013      	ands	r3, r2
 800530a:	2b00      	cmp	r3, #0
 800530c:	f000 80a2 	beq.w	8005454 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4a2e      	ldr	r2, [pc, #184]	@ (80053d0 <HAL_DMA_IRQHandler+0x1b4>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d04a      	beq.n	80053b0 <HAL_DMA_IRQHandler+0x194>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4a2d      	ldr	r2, [pc, #180]	@ (80053d4 <HAL_DMA_IRQHandler+0x1b8>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d045      	beq.n	80053b0 <HAL_DMA_IRQHandler+0x194>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4a2b      	ldr	r2, [pc, #172]	@ (80053d8 <HAL_DMA_IRQHandler+0x1bc>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d040      	beq.n	80053b0 <HAL_DMA_IRQHandler+0x194>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	4a2a      	ldr	r2, [pc, #168]	@ (80053dc <HAL_DMA_IRQHandler+0x1c0>)
 8005334:	4293      	cmp	r3, r2
 8005336:	d03b      	beq.n	80053b0 <HAL_DMA_IRQHandler+0x194>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4a28      	ldr	r2, [pc, #160]	@ (80053e0 <HAL_DMA_IRQHandler+0x1c4>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d036      	beq.n	80053b0 <HAL_DMA_IRQHandler+0x194>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4a27      	ldr	r2, [pc, #156]	@ (80053e4 <HAL_DMA_IRQHandler+0x1c8>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d031      	beq.n	80053b0 <HAL_DMA_IRQHandler+0x194>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	4a25      	ldr	r2, [pc, #148]	@ (80053e8 <HAL_DMA_IRQHandler+0x1cc>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d02c      	beq.n	80053b0 <HAL_DMA_IRQHandler+0x194>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4a24      	ldr	r2, [pc, #144]	@ (80053ec <HAL_DMA_IRQHandler+0x1d0>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d027      	beq.n	80053b0 <HAL_DMA_IRQHandler+0x194>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4a22      	ldr	r2, [pc, #136]	@ (80053f0 <HAL_DMA_IRQHandler+0x1d4>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d022      	beq.n	80053b0 <HAL_DMA_IRQHandler+0x194>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4a21      	ldr	r2, [pc, #132]	@ (80053f4 <HAL_DMA_IRQHandler+0x1d8>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d01d      	beq.n	80053b0 <HAL_DMA_IRQHandler+0x194>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a1f      	ldr	r2, [pc, #124]	@ (80053f8 <HAL_DMA_IRQHandler+0x1dc>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d018      	beq.n	80053b0 <HAL_DMA_IRQHandler+0x194>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4a1e      	ldr	r2, [pc, #120]	@ (80053fc <HAL_DMA_IRQHandler+0x1e0>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d013      	beq.n	80053b0 <HAL_DMA_IRQHandler+0x194>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4a1c      	ldr	r2, [pc, #112]	@ (8005400 <HAL_DMA_IRQHandler+0x1e4>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d00e      	beq.n	80053b0 <HAL_DMA_IRQHandler+0x194>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4a1b      	ldr	r2, [pc, #108]	@ (8005404 <HAL_DMA_IRQHandler+0x1e8>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d009      	beq.n	80053b0 <HAL_DMA_IRQHandler+0x194>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a19      	ldr	r2, [pc, #100]	@ (8005408 <HAL_DMA_IRQHandler+0x1ec>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d004      	beq.n	80053b0 <HAL_DMA_IRQHandler+0x194>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4a18      	ldr	r2, [pc, #96]	@ (800540c <HAL_DMA_IRQHandler+0x1f0>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d12f      	bne.n	8005410 <HAL_DMA_IRQHandler+0x1f4>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f003 0304 	and.w	r3, r3, #4
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	bf14      	ite	ne
 80053be:	2301      	movne	r3, #1
 80053c0:	2300      	moveq	r3, #0
 80053c2:	b2db      	uxtb	r3, r3
 80053c4:	e02e      	b.n	8005424 <HAL_DMA_IRQHandler+0x208>
 80053c6:	bf00      	nop
 80053c8:	24000004 	.word	0x24000004
 80053cc:	1b4e81b5 	.word	0x1b4e81b5
 80053d0:	40020010 	.word	0x40020010
 80053d4:	40020028 	.word	0x40020028
 80053d8:	40020040 	.word	0x40020040
 80053dc:	40020058 	.word	0x40020058
 80053e0:	40020070 	.word	0x40020070
 80053e4:	40020088 	.word	0x40020088
 80053e8:	400200a0 	.word	0x400200a0
 80053ec:	400200b8 	.word	0x400200b8
 80053f0:	40020410 	.word	0x40020410
 80053f4:	40020428 	.word	0x40020428
 80053f8:	40020440 	.word	0x40020440
 80053fc:	40020458 	.word	0x40020458
 8005400:	40020470 	.word	0x40020470
 8005404:	40020488 	.word	0x40020488
 8005408:	400204a0 	.word	0x400204a0
 800540c:	400204b8 	.word	0x400204b8
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f003 0308 	and.w	r3, r3, #8
 800541a:	2b00      	cmp	r3, #0
 800541c:	bf14      	ite	ne
 800541e:	2301      	movne	r3, #1
 8005420:	2300      	moveq	r3, #0
 8005422:	b2db      	uxtb	r3, r3
 8005424:	2b00      	cmp	r3, #0
 8005426:	d015      	beq.n	8005454 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	681a      	ldr	r2, [r3, #0]
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f022 0204 	bic.w	r2, r2, #4
 8005436:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800543c:	f003 031f 	and.w	r3, r3, #31
 8005440:	2208      	movs	r2, #8
 8005442:	409a      	lsls	r2, r3
 8005444:	6a3b      	ldr	r3, [r7, #32]
 8005446:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800544c:	f043 0201 	orr.w	r2, r3, #1
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005458:	f003 031f 	and.w	r3, r3, #31
 800545c:	69ba      	ldr	r2, [r7, #24]
 800545e:	fa22 f303 	lsr.w	r3, r2, r3
 8005462:	f003 0301 	and.w	r3, r3, #1
 8005466:	2b00      	cmp	r3, #0
 8005468:	d06e      	beq.n	8005548 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4a69      	ldr	r2, [pc, #420]	@ (8005614 <HAL_DMA_IRQHandler+0x3f8>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d04a      	beq.n	800550a <HAL_DMA_IRQHandler+0x2ee>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a67      	ldr	r2, [pc, #412]	@ (8005618 <HAL_DMA_IRQHandler+0x3fc>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d045      	beq.n	800550a <HAL_DMA_IRQHandler+0x2ee>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4a66      	ldr	r2, [pc, #408]	@ (800561c <HAL_DMA_IRQHandler+0x400>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d040      	beq.n	800550a <HAL_DMA_IRQHandler+0x2ee>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a64      	ldr	r2, [pc, #400]	@ (8005620 <HAL_DMA_IRQHandler+0x404>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d03b      	beq.n	800550a <HAL_DMA_IRQHandler+0x2ee>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4a63      	ldr	r2, [pc, #396]	@ (8005624 <HAL_DMA_IRQHandler+0x408>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d036      	beq.n	800550a <HAL_DMA_IRQHandler+0x2ee>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4a61      	ldr	r2, [pc, #388]	@ (8005628 <HAL_DMA_IRQHandler+0x40c>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d031      	beq.n	800550a <HAL_DMA_IRQHandler+0x2ee>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4a60      	ldr	r2, [pc, #384]	@ (800562c <HAL_DMA_IRQHandler+0x410>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d02c      	beq.n	800550a <HAL_DMA_IRQHandler+0x2ee>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4a5e      	ldr	r2, [pc, #376]	@ (8005630 <HAL_DMA_IRQHandler+0x414>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d027      	beq.n	800550a <HAL_DMA_IRQHandler+0x2ee>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4a5d      	ldr	r2, [pc, #372]	@ (8005634 <HAL_DMA_IRQHandler+0x418>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d022      	beq.n	800550a <HAL_DMA_IRQHandler+0x2ee>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a5b      	ldr	r2, [pc, #364]	@ (8005638 <HAL_DMA_IRQHandler+0x41c>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d01d      	beq.n	800550a <HAL_DMA_IRQHandler+0x2ee>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4a5a      	ldr	r2, [pc, #360]	@ (800563c <HAL_DMA_IRQHandler+0x420>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d018      	beq.n	800550a <HAL_DMA_IRQHandler+0x2ee>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4a58      	ldr	r2, [pc, #352]	@ (8005640 <HAL_DMA_IRQHandler+0x424>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d013      	beq.n	800550a <HAL_DMA_IRQHandler+0x2ee>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	4a57      	ldr	r2, [pc, #348]	@ (8005644 <HAL_DMA_IRQHandler+0x428>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d00e      	beq.n	800550a <HAL_DMA_IRQHandler+0x2ee>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a55      	ldr	r2, [pc, #340]	@ (8005648 <HAL_DMA_IRQHandler+0x42c>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d009      	beq.n	800550a <HAL_DMA_IRQHandler+0x2ee>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4a54      	ldr	r2, [pc, #336]	@ (800564c <HAL_DMA_IRQHandler+0x430>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d004      	beq.n	800550a <HAL_DMA_IRQHandler+0x2ee>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4a52      	ldr	r2, [pc, #328]	@ (8005650 <HAL_DMA_IRQHandler+0x434>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d10a      	bne.n	8005520 <HAL_DMA_IRQHandler+0x304>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	695b      	ldr	r3, [r3, #20]
 8005510:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005514:	2b00      	cmp	r3, #0
 8005516:	bf14      	ite	ne
 8005518:	2301      	movne	r3, #1
 800551a:	2300      	moveq	r3, #0
 800551c:	b2db      	uxtb	r3, r3
 800551e:	e003      	b.n	8005528 <HAL_DMA_IRQHandler+0x30c>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	2300      	movs	r3, #0
 8005528:	2b00      	cmp	r3, #0
 800552a:	d00d      	beq.n	8005548 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005530:	f003 031f 	and.w	r3, r3, #31
 8005534:	2201      	movs	r2, #1
 8005536:	409a      	lsls	r2, r3
 8005538:	6a3b      	ldr	r3, [r7, #32]
 800553a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005540:	f043 0202 	orr.w	r2, r3, #2
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800554c:	f003 031f 	and.w	r3, r3, #31
 8005550:	2204      	movs	r2, #4
 8005552:	409a      	lsls	r2, r3
 8005554:	69bb      	ldr	r3, [r7, #24]
 8005556:	4013      	ands	r3, r2
 8005558:	2b00      	cmp	r3, #0
 800555a:	f000 808f 	beq.w	800567c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	4a2c      	ldr	r2, [pc, #176]	@ (8005614 <HAL_DMA_IRQHandler+0x3f8>)
 8005564:	4293      	cmp	r3, r2
 8005566:	d04a      	beq.n	80055fe <HAL_DMA_IRQHandler+0x3e2>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4a2a      	ldr	r2, [pc, #168]	@ (8005618 <HAL_DMA_IRQHandler+0x3fc>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d045      	beq.n	80055fe <HAL_DMA_IRQHandler+0x3e2>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4a29      	ldr	r2, [pc, #164]	@ (800561c <HAL_DMA_IRQHandler+0x400>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d040      	beq.n	80055fe <HAL_DMA_IRQHandler+0x3e2>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a27      	ldr	r2, [pc, #156]	@ (8005620 <HAL_DMA_IRQHandler+0x404>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d03b      	beq.n	80055fe <HAL_DMA_IRQHandler+0x3e2>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4a26      	ldr	r2, [pc, #152]	@ (8005624 <HAL_DMA_IRQHandler+0x408>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d036      	beq.n	80055fe <HAL_DMA_IRQHandler+0x3e2>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4a24      	ldr	r2, [pc, #144]	@ (8005628 <HAL_DMA_IRQHandler+0x40c>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d031      	beq.n	80055fe <HAL_DMA_IRQHandler+0x3e2>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	4a23      	ldr	r2, [pc, #140]	@ (800562c <HAL_DMA_IRQHandler+0x410>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d02c      	beq.n	80055fe <HAL_DMA_IRQHandler+0x3e2>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4a21      	ldr	r2, [pc, #132]	@ (8005630 <HAL_DMA_IRQHandler+0x414>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d027      	beq.n	80055fe <HAL_DMA_IRQHandler+0x3e2>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	4a20      	ldr	r2, [pc, #128]	@ (8005634 <HAL_DMA_IRQHandler+0x418>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d022      	beq.n	80055fe <HAL_DMA_IRQHandler+0x3e2>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4a1e      	ldr	r2, [pc, #120]	@ (8005638 <HAL_DMA_IRQHandler+0x41c>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d01d      	beq.n	80055fe <HAL_DMA_IRQHandler+0x3e2>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4a1d      	ldr	r2, [pc, #116]	@ (800563c <HAL_DMA_IRQHandler+0x420>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d018      	beq.n	80055fe <HAL_DMA_IRQHandler+0x3e2>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	4a1b      	ldr	r2, [pc, #108]	@ (8005640 <HAL_DMA_IRQHandler+0x424>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d013      	beq.n	80055fe <HAL_DMA_IRQHandler+0x3e2>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	4a1a      	ldr	r2, [pc, #104]	@ (8005644 <HAL_DMA_IRQHandler+0x428>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	d00e      	beq.n	80055fe <HAL_DMA_IRQHandler+0x3e2>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	4a18      	ldr	r2, [pc, #96]	@ (8005648 <HAL_DMA_IRQHandler+0x42c>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d009      	beq.n	80055fe <HAL_DMA_IRQHandler+0x3e2>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	4a17      	ldr	r2, [pc, #92]	@ (800564c <HAL_DMA_IRQHandler+0x430>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d004      	beq.n	80055fe <HAL_DMA_IRQHandler+0x3e2>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	4a15      	ldr	r2, [pc, #84]	@ (8005650 <HAL_DMA_IRQHandler+0x434>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d12a      	bne.n	8005654 <HAL_DMA_IRQHandler+0x438>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f003 0302 	and.w	r3, r3, #2
 8005608:	2b00      	cmp	r3, #0
 800560a:	bf14      	ite	ne
 800560c:	2301      	movne	r3, #1
 800560e:	2300      	moveq	r3, #0
 8005610:	b2db      	uxtb	r3, r3
 8005612:	e023      	b.n	800565c <HAL_DMA_IRQHandler+0x440>
 8005614:	40020010 	.word	0x40020010
 8005618:	40020028 	.word	0x40020028
 800561c:	40020040 	.word	0x40020040
 8005620:	40020058 	.word	0x40020058
 8005624:	40020070 	.word	0x40020070
 8005628:	40020088 	.word	0x40020088
 800562c:	400200a0 	.word	0x400200a0
 8005630:	400200b8 	.word	0x400200b8
 8005634:	40020410 	.word	0x40020410
 8005638:	40020428 	.word	0x40020428
 800563c:	40020440 	.word	0x40020440
 8005640:	40020458 	.word	0x40020458
 8005644:	40020470 	.word	0x40020470
 8005648:	40020488 	.word	0x40020488
 800564c:	400204a0 	.word	0x400204a0
 8005650:	400204b8 	.word	0x400204b8
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	2300      	movs	r3, #0
 800565c:	2b00      	cmp	r3, #0
 800565e:	d00d      	beq.n	800567c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005664:	f003 031f 	and.w	r3, r3, #31
 8005668:	2204      	movs	r2, #4
 800566a:	409a      	lsls	r2, r3
 800566c:	6a3b      	ldr	r3, [r7, #32]
 800566e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005674:	f043 0204 	orr.w	r2, r3, #4
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005680:	f003 031f 	and.w	r3, r3, #31
 8005684:	2210      	movs	r2, #16
 8005686:	409a      	lsls	r2, r3
 8005688:	69bb      	ldr	r3, [r7, #24]
 800568a:	4013      	ands	r3, r2
 800568c:	2b00      	cmp	r3, #0
 800568e:	f000 80a6 	beq.w	80057de <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4a85      	ldr	r2, [pc, #532]	@ (80058ac <HAL_DMA_IRQHandler+0x690>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d04a      	beq.n	8005732 <HAL_DMA_IRQHandler+0x516>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	4a83      	ldr	r2, [pc, #524]	@ (80058b0 <HAL_DMA_IRQHandler+0x694>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d045      	beq.n	8005732 <HAL_DMA_IRQHandler+0x516>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4a82      	ldr	r2, [pc, #520]	@ (80058b4 <HAL_DMA_IRQHandler+0x698>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d040      	beq.n	8005732 <HAL_DMA_IRQHandler+0x516>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4a80      	ldr	r2, [pc, #512]	@ (80058b8 <HAL_DMA_IRQHandler+0x69c>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d03b      	beq.n	8005732 <HAL_DMA_IRQHandler+0x516>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4a7f      	ldr	r2, [pc, #508]	@ (80058bc <HAL_DMA_IRQHandler+0x6a0>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d036      	beq.n	8005732 <HAL_DMA_IRQHandler+0x516>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4a7d      	ldr	r2, [pc, #500]	@ (80058c0 <HAL_DMA_IRQHandler+0x6a4>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d031      	beq.n	8005732 <HAL_DMA_IRQHandler+0x516>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4a7c      	ldr	r2, [pc, #496]	@ (80058c4 <HAL_DMA_IRQHandler+0x6a8>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d02c      	beq.n	8005732 <HAL_DMA_IRQHandler+0x516>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4a7a      	ldr	r2, [pc, #488]	@ (80058c8 <HAL_DMA_IRQHandler+0x6ac>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d027      	beq.n	8005732 <HAL_DMA_IRQHandler+0x516>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4a79      	ldr	r2, [pc, #484]	@ (80058cc <HAL_DMA_IRQHandler+0x6b0>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d022      	beq.n	8005732 <HAL_DMA_IRQHandler+0x516>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4a77      	ldr	r2, [pc, #476]	@ (80058d0 <HAL_DMA_IRQHandler+0x6b4>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d01d      	beq.n	8005732 <HAL_DMA_IRQHandler+0x516>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4a76      	ldr	r2, [pc, #472]	@ (80058d4 <HAL_DMA_IRQHandler+0x6b8>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d018      	beq.n	8005732 <HAL_DMA_IRQHandler+0x516>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	4a74      	ldr	r2, [pc, #464]	@ (80058d8 <HAL_DMA_IRQHandler+0x6bc>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d013      	beq.n	8005732 <HAL_DMA_IRQHandler+0x516>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	4a73      	ldr	r2, [pc, #460]	@ (80058dc <HAL_DMA_IRQHandler+0x6c0>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d00e      	beq.n	8005732 <HAL_DMA_IRQHandler+0x516>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	4a71      	ldr	r2, [pc, #452]	@ (80058e0 <HAL_DMA_IRQHandler+0x6c4>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d009      	beq.n	8005732 <HAL_DMA_IRQHandler+0x516>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4a70      	ldr	r2, [pc, #448]	@ (80058e4 <HAL_DMA_IRQHandler+0x6c8>)
 8005724:	4293      	cmp	r3, r2
 8005726:	d004      	beq.n	8005732 <HAL_DMA_IRQHandler+0x516>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4a6e      	ldr	r2, [pc, #440]	@ (80058e8 <HAL_DMA_IRQHandler+0x6cc>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d10a      	bne.n	8005748 <HAL_DMA_IRQHandler+0x52c>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f003 0308 	and.w	r3, r3, #8
 800573c:	2b00      	cmp	r3, #0
 800573e:	bf14      	ite	ne
 8005740:	2301      	movne	r3, #1
 8005742:	2300      	moveq	r3, #0
 8005744:	b2db      	uxtb	r3, r3
 8005746:	e009      	b.n	800575c <HAL_DMA_IRQHandler+0x540>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f003 0304 	and.w	r3, r3, #4
 8005752:	2b00      	cmp	r3, #0
 8005754:	bf14      	ite	ne
 8005756:	2301      	movne	r3, #1
 8005758:	2300      	moveq	r3, #0
 800575a:	b2db      	uxtb	r3, r3
 800575c:	2b00      	cmp	r3, #0
 800575e:	d03e      	beq.n	80057de <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005764:	f003 031f 	and.w	r3, r3, #31
 8005768:	2210      	movs	r2, #16
 800576a:	409a      	lsls	r2, r3
 800576c:	6a3b      	ldr	r3, [r7, #32]
 800576e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800577a:	2b00      	cmp	r3, #0
 800577c:	d018      	beq.n	80057b0 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005788:	2b00      	cmp	r3, #0
 800578a:	d108      	bne.n	800579e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005790:	2b00      	cmp	r3, #0
 8005792:	d024      	beq.n	80057de <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005798:	6878      	ldr	r0, [r7, #4]
 800579a:	4798      	blx	r3
 800579c:	e01f      	b.n	80057de <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d01b      	beq.n	80057de <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80057aa:	6878      	ldr	r0, [r7, #4]
 80057ac:	4798      	blx	r3
 80057ae:	e016      	b.n	80057de <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d107      	bne.n	80057ce <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	681a      	ldr	r2, [r3, #0]
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f022 0208 	bic.w	r2, r2, #8
 80057cc:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d003      	beq.n	80057de <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057da:	6878      	ldr	r0, [r7, #4]
 80057dc:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057e2:	f003 031f 	and.w	r3, r3, #31
 80057e6:	2220      	movs	r2, #32
 80057e8:	409a      	lsls	r2, r3
 80057ea:	69bb      	ldr	r3, [r7, #24]
 80057ec:	4013      	ands	r3, r2
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	f000 8110 	beq.w	8005a14 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	4a2c      	ldr	r2, [pc, #176]	@ (80058ac <HAL_DMA_IRQHandler+0x690>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d04a      	beq.n	8005894 <HAL_DMA_IRQHandler+0x678>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	4a2b      	ldr	r2, [pc, #172]	@ (80058b0 <HAL_DMA_IRQHandler+0x694>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d045      	beq.n	8005894 <HAL_DMA_IRQHandler+0x678>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4a29      	ldr	r2, [pc, #164]	@ (80058b4 <HAL_DMA_IRQHandler+0x698>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d040      	beq.n	8005894 <HAL_DMA_IRQHandler+0x678>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4a28      	ldr	r2, [pc, #160]	@ (80058b8 <HAL_DMA_IRQHandler+0x69c>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d03b      	beq.n	8005894 <HAL_DMA_IRQHandler+0x678>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4a26      	ldr	r2, [pc, #152]	@ (80058bc <HAL_DMA_IRQHandler+0x6a0>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d036      	beq.n	8005894 <HAL_DMA_IRQHandler+0x678>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	4a25      	ldr	r2, [pc, #148]	@ (80058c0 <HAL_DMA_IRQHandler+0x6a4>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d031      	beq.n	8005894 <HAL_DMA_IRQHandler+0x678>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4a23      	ldr	r2, [pc, #140]	@ (80058c4 <HAL_DMA_IRQHandler+0x6a8>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d02c      	beq.n	8005894 <HAL_DMA_IRQHandler+0x678>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4a22      	ldr	r2, [pc, #136]	@ (80058c8 <HAL_DMA_IRQHandler+0x6ac>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d027      	beq.n	8005894 <HAL_DMA_IRQHandler+0x678>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4a20      	ldr	r2, [pc, #128]	@ (80058cc <HAL_DMA_IRQHandler+0x6b0>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d022      	beq.n	8005894 <HAL_DMA_IRQHandler+0x678>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4a1f      	ldr	r2, [pc, #124]	@ (80058d0 <HAL_DMA_IRQHandler+0x6b4>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d01d      	beq.n	8005894 <HAL_DMA_IRQHandler+0x678>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	4a1d      	ldr	r2, [pc, #116]	@ (80058d4 <HAL_DMA_IRQHandler+0x6b8>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d018      	beq.n	8005894 <HAL_DMA_IRQHandler+0x678>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4a1c      	ldr	r2, [pc, #112]	@ (80058d8 <HAL_DMA_IRQHandler+0x6bc>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d013      	beq.n	8005894 <HAL_DMA_IRQHandler+0x678>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4a1a      	ldr	r2, [pc, #104]	@ (80058dc <HAL_DMA_IRQHandler+0x6c0>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d00e      	beq.n	8005894 <HAL_DMA_IRQHandler+0x678>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4a19      	ldr	r2, [pc, #100]	@ (80058e0 <HAL_DMA_IRQHandler+0x6c4>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d009      	beq.n	8005894 <HAL_DMA_IRQHandler+0x678>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4a17      	ldr	r2, [pc, #92]	@ (80058e4 <HAL_DMA_IRQHandler+0x6c8>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d004      	beq.n	8005894 <HAL_DMA_IRQHandler+0x678>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	4a16      	ldr	r2, [pc, #88]	@ (80058e8 <HAL_DMA_IRQHandler+0x6cc>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d12b      	bne.n	80058ec <HAL_DMA_IRQHandler+0x6d0>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f003 0310 	and.w	r3, r3, #16
 800589e:	2b00      	cmp	r3, #0
 80058a0:	bf14      	ite	ne
 80058a2:	2301      	movne	r3, #1
 80058a4:	2300      	moveq	r3, #0
 80058a6:	b2db      	uxtb	r3, r3
 80058a8:	e02a      	b.n	8005900 <HAL_DMA_IRQHandler+0x6e4>
 80058aa:	bf00      	nop
 80058ac:	40020010 	.word	0x40020010
 80058b0:	40020028 	.word	0x40020028
 80058b4:	40020040 	.word	0x40020040
 80058b8:	40020058 	.word	0x40020058
 80058bc:	40020070 	.word	0x40020070
 80058c0:	40020088 	.word	0x40020088
 80058c4:	400200a0 	.word	0x400200a0
 80058c8:	400200b8 	.word	0x400200b8
 80058cc:	40020410 	.word	0x40020410
 80058d0:	40020428 	.word	0x40020428
 80058d4:	40020440 	.word	0x40020440
 80058d8:	40020458 	.word	0x40020458
 80058dc:	40020470 	.word	0x40020470
 80058e0:	40020488 	.word	0x40020488
 80058e4:	400204a0 	.word	0x400204a0
 80058e8:	400204b8 	.word	0x400204b8
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f003 0302 	and.w	r3, r3, #2
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	bf14      	ite	ne
 80058fa:	2301      	movne	r3, #1
 80058fc:	2300      	moveq	r3, #0
 80058fe:	b2db      	uxtb	r3, r3
 8005900:	2b00      	cmp	r3, #0
 8005902:	f000 8087 	beq.w	8005a14 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800590a:	f003 031f 	and.w	r3, r3, #31
 800590e:	2220      	movs	r2, #32
 8005910:	409a      	lsls	r2, r3
 8005912:	6a3b      	ldr	r3, [r7, #32]
 8005914:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800591c:	b2db      	uxtb	r3, r3
 800591e:	2b04      	cmp	r3, #4
 8005920:	d139      	bne.n	8005996 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	681a      	ldr	r2, [r3, #0]
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f022 0216 	bic.w	r2, r2, #22
 8005930:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	695a      	ldr	r2, [r3, #20]
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005940:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005946:	2b00      	cmp	r3, #0
 8005948:	d103      	bne.n	8005952 <HAL_DMA_IRQHandler+0x736>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800594e:	2b00      	cmp	r3, #0
 8005950:	d007      	beq.n	8005962 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	681a      	ldr	r2, [r3, #0]
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f022 0208 	bic.w	r2, r2, #8
 8005960:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005966:	f003 031f 	and.w	r3, r3, #31
 800596a:	223f      	movs	r2, #63	@ 0x3f
 800596c:	409a      	lsls	r2, r3
 800596e:	6a3b      	ldr	r3, [r7, #32]
 8005970:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2201      	movs	r2, #1
 8005976:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2200      	movs	r2, #0
 800597e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005986:	2b00      	cmp	r3, #0
 8005988:	f000 834a 	beq.w	8006020 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005990:	6878      	ldr	r0, [r7, #4]
 8005992:	4798      	blx	r3
          }
          return;
 8005994:	e344      	b.n	8006020 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d018      	beq.n	80059d6 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d108      	bne.n	80059c4 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d02c      	beq.n	8005a14 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059be:	6878      	ldr	r0, [r7, #4]
 80059c0:	4798      	blx	r3
 80059c2:	e027      	b.n	8005a14 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d023      	beq.n	8005a14 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059d0:	6878      	ldr	r0, [r7, #4]
 80059d2:	4798      	blx	r3
 80059d4:	e01e      	b.n	8005a14 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d10f      	bne.n	8005a04 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	681a      	ldr	r2, [r3, #0]
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f022 0210 	bic.w	r2, r2, #16
 80059f2:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2201      	movs	r2, #1
 80059f8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2200      	movs	r2, #0
 8005a00:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d003      	beq.n	8005a14 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a10:	6878      	ldr	r0, [r7, #4]
 8005a12:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	f000 8306 	beq.w	800602a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a22:	f003 0301 	and.w	r3, r3, #1
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	f000 8088 	beq.w	8005b3c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2204      	movs	r2, #4
 8005a30:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4a7a      	ldr	r2, [pc, #488]	@ (8005c24 <HAL_DMA_IRQHandler+0xa08>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d04a      	beq.n	8005ad4 <HAL_DMA_IRQHandler+0x8b8>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	4a79      	ldr	r2, [pc, #484]	@ (8005c28 <HAL_DMA_IRQHandler+0xa0c>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d045      	beq.n	8005ad4 <HAL_DMA_IRQHandler+0x8b8>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	4a77      	ldr	r2, [pc, #476]	@ (8005c2c <HAL_DMA_IRQHandler+0xa10>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d040      	beq.n	8005ad4 <HAL_DMA_IRQHandler+0x8b8>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	4a76      	ldr	r2, [pc, #472]	@ (8005c30 <HAL_DMA_IRQHandler+0xa14>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d03b      	beq.n	8005ad4 <HAL_DMA_IRQHandler+0x8b8>
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4a74      	ldr	r2, [pc, #464]	@ (8005c34 <HAL_DMA_IRQHandler+0xa18>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d036      	beq.n	8005ad4 <HAL_DMA_IRQHandler+0x8b8>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4a73      	ldr	r2, [pc, #460]	@ (8005c38 <HAL_DMA_IRQHandler+0xa1c>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d031      	beq.n	8005ad4 <HAL_DMA_IRQHandler+0x8b8>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	4a71      	ldr	r2, [pc, #452]	@ (8005c3c <HAL_DMA_IRQHandler+0xa20>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d02c      	beq.n	8005ad4 <HAL_DMA_IRQHandler+0x8b8>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	4a70      	ldr	r2, [pc, #448]	@ (8005c40 <HAL_DMA_IRQHandler+0xa24>)
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d027      	beq.n	8005ad4 <HAL_DMA_IRQHandler+0x8b8>
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	4a6e      	ldr	r2, [pc, #440]	@ (8005c44 <HAL_DMA_IRQHandler+0xa28>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d022      	beq.n	8005ad4 <HAL_DMA_IRQHandler+0x8b8>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	4a6d      	ldr	r2, [pc, #436]	@ (8005c48 <HAL_DMA_IRQHandler+0xa2c>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d01d      	beq.n	8005ad4 <HAL_DMA_IRQHandler+0x8b8>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	4a6b      	ldr	r2, [pc, #428]	@ (8005c4c <HAL_DMA_IRQHandler+0xa30>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d018      	beq.n	8005ad4 <HAL_DMA_IRQHandler+0x8b8>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	4a6a      	ldr	r2, [pc, #424]	@ (8005c50 <HAL_DMA_IRQHandler+0xa34>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d013      	beq.n	8005ad4 <HAL_DMA_IRQHandler+0x8b8>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	4a68      	ldr	r2, [pc, #416]	@ (8005c54 <HAL_DMA_IRQHandler+0xa38>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d00e      	beq.n	8005ad4 <HAL_DMA_IRQHandler+0x8b8>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	4a67      	ldr	r2, [pc, #412]	@ (8005c58 <HAL_DMA_IRQHandler+0xa3c>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d009      	beq.n	8005ad4 <HAL_DMA_IRQHandler+0x8b8>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	4a65      	ldr	r2, [pc, #404]	@ (8005c5c <HAL_DMA_IRQHandler+0xa40>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d004      	beq.n	8005ad4 <HAL_DMA_IRQHandler+0x8b8>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	4a64      	ldr	r2, [pc, #400]	@ (8005c60 <HAL_DMA_IRQHandler+0xa44>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d108      	bne.n	8005ae6 <HAL_DMA_IRQHandler+0x8ca>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	681a      	ldr	r2, [r3, #0]
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f022 0201 	bic.w	r2, r2, #1
 8005ae2:	601a      	str	r2, [r3, #0]
 8005ae4:	e007      	b.n	8005af6 <HAL_DMA_IRQHandler+0x8da>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	681a      	ldr	r2, [r3, #0]
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f022 0201 	bic.w	r2, r2, #1
 8005af4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	3301      	adds	r3, #1
 8005afa:	60fb      	str	r3, [r7, #12]
 8005afc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005afe:	429a      	cmp	r2, r3
 8005b00:	d307      	bcc.n	8005b12 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f003 0301 	and.w	r3, r3, #1
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d1f2      	bne.n	8005af6 <HAL_DMA_IRQHandler+0x8da>
 8005b10:	e000      	b.n	8005b14 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8005b12:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f003 0301 	and.w	r3, r3, #1
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d004      	beq.n	8005b2c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2203      	movs	r2, #3
 8005b26:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8005b2a:	e003      	b.n	8005b34 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2201      	movs	r2, #1
 8005b30:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2200      	movs	r2, #0
 8005b38:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	f000 8272 	beq.w	800602a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b4a:	6878      	ldr	r0, [r7, #4]
 8005b4c:	4798      	blx	r3
 8005b4e:	e26c      	b.n	800602a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	4a43      	ldr	r2, [pc, #268]	@ (8005c64 <HAL_DMA_IRQHandler+0xa48>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d022      	beq.n	8005ba0 <HAL_DMA_IRQHandler+0x984>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	4a42      	ldr	r2, [pc, #264]	@ (8005c68 <HAL_DMA_IRQHandler+0xa4c>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d01d      	beq.n	8005ba0 <HAL_DMA_IRQHandler+0x984>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4a40      	ldr	r2, [pc, #256]	@ (8005c6c <HAL_DMA_IRQHandler+0xa50>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d018      	beq.n	8005ba0 <HAL_DMA_IRQHandler+0x984>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4a3f      	ldr	r2, [pc, #252]	@ (8005c70 <HAL_DMA_IRQHandler+0xa54>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d013      	beq.n	8005ba0 <HAL_DMA_IRQHandler+0x984>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	4a3d      	ldr	r2, [pc, #244]	@ (8005c74 <HAL_DMA_IRQHandler+0xa58>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d00e      	beq.n	8005ba0 <HAL_DMA_IRQHandler+0x984>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	4a3c      	ldr	r2, [pc, #240]	@ (8005c78 <HAL_DMA_IRQHandler+0xa5c>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d009      	beq.n	8005ba0 <HAL_DMA_IRQHandler+0x984>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4a3a      	ldr	r2, [pc, #232]	@ (8005c7c <HAL_DMA_IRQHandler+0xa60>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d004      	beq.n	8005ba0 <HAL_DMA_IRQHandler+0x984>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	4a39      	ldr	r2, [pc, #228]	@ (8005c80 <HAL_DMA_IRQHandler+0xa64>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d101      	bne.n	8005ba4 <HAL_DMA_IRQHandler+0x988>
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	e000      	b.n	8005ba6 <HAL_DMA_IRQHandler+0x98a>
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	f000 823f 	beq.w	800602a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005bb8:	f003 031f 	and.w	r3, r3, #31
 8005bbc:	2204      	movs	r2, #4
 8005bbe:	409a      	lsls	r2, r3
 8005bc0:	697b      	ldr	r3, [r7, #20]
 8005bc2:	4013      	ands	r3, r2
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	f000 80cd 	beq.w	8005d64 <HAL_DMA_IRQHandler+0xb48>
 8005bca:	693b      	ldr	r3, [r7, #16]
 8005bcc:	f003 0304 	and.w	r3, r3, #4
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	f000 80c7 	beq.w	8005d64 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005bda:	f003 031f 	and.w	r3, r3, #31
 8005bde:	2204      	movs	r2, #4
 8005be0:	409a      	lsls	r2, r3
 8005be2:	69fb      	ldr	r3, [r7, #28]
 8005be4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005be6:	693b      	ldr	r3, [r7, #16]
 8005be8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d049      	beq.n	8005c84 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005bf0:	693b      	ldr	r3, [r7, #16]
 8005bf2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d109      	bne.n	8005c0e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	f000 8210 	beq.w	8006024 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c08:	6878      	ldr	r0, [r7, #4]
 8005c0a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005c0c:	e20a      	b.n	8006024 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	f000 8206 	beq.w	8006024 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c1c:	6878      	ldr	r0, [r7, #4]
 8005c1e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005c20:	e200      	b.n	8006024 <HAL_DMA_IRQHandler+0xe08>
 8005c22:	bf00      	nop
 8005c24:	40020010 	.word	0x40020010
 8005c28:	40020028 	.word	0x40020028
 8005c2c:	40020040 	.word	0x40020040
 8005c30:	40020058 	.word	0x40020058
 8005c34:	40020070 	.word	0x40020070
 8005c38:	40020088 	.word	0x40020088
 8005c3c:	400200a0 	.word	0x400200a0
 8005c40:	400200b8 	.word	0x400200b8
 8005c44:	40020410 	.word	0x40020410
 8005c48:	40020428 	.word	0x40020428
 8005c4c:	40020440 	.word	0x40020440
 8005c50:	40020458 	.word	0x40020458
 8005c54:	40020470 	.word	0x40020470
 8005c58:	40020488 	.word	0x40020488
 8005c5c:	400204a0 	.word	0x400204a0
 8005c60:	400204b8 	.word	0x400204b8
 8005c64:	58025408 	.word	0x58025408
 8005c68:	5802541c 	.word	0x5802541c
 8005c6c:	58025430 	.word	0x58025430
 8005c70:	58025444 	.word	0x58025444
 8005c74:	58025458 	.word	0x58025458
 8005c78:	5802546c 	.word	0x5802546c
 8005c7c:	58025480 	.word	0x58025480
 8005c80:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005c84:	693b      	ldr	r3, [r7, #16]
 8005c86:	f003 0320 	and.w	r3, r3, #32
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d160      	bne.n	8005d50 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	4a7f      	ldr	r2, [pc, #508]	@ (8005e90 <HAL_DMA_IRQHandler+0xc74>)
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d04a      	beq.n	8005d2e <HAL_DMA_IRQHandler+0xb12>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	4a7d      	ldr	r2, [pc, #500]	@ (8005e94 <HAL_DMA_IRQHandler+0xc78>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d045      	beq.n	8005d2e <HAL_DMA_IRQHandler+0xb12>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	4a7c      	ldr	r2, [pc, #496]	@ (8005e98 <HAL_DMA_IRQHandler+0xc7c>)
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d040      	beq.n	8005d2e <HAL_DMA_IRQHandler+0xb12>
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	4a7a      	ldr	r2, [pc, #488]	@ (8005e9c <HAL_DMA_IRQHandler+0xc80>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d03b      	beq.n	8005d2e <HAL_DMA_IRQHandler+0xb12>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4a79      	ldr	r2, [pc, #484]	@ (8005ea0 <HAL_DMA_IRQHandler+0xc84>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d036      	beq.n	8005d2e <HAL_DMA_IRQHandler+0xb12>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	4a77      	ldr	r2, [pc, #476]	@ (8005ea4 <HAL_DMA_IRQHandler+0xc88>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d031      	beq.n	8005d2e <HAL_DMA_IRQHandler+0xb12>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4a76      	ldr	r2, [pc, #472]	@ (8005ea8 <HAL_DMA_IRQHandler+0xc8c>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d02c      	beq.n	8005d2e <HAL_DMA_IRQHandler+0xb12>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4a74      	ldr	r2, [pc, #464]	@ (8005eac <HAL_DMA_IRQHandler+0xc90>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d027      	beq.n	8005d2e <HAL_DMA_IRQHandler+0xb12>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	4a73      	ldr	r2, [pc, #460]	@ (8005eb0 <HAL_DMA_IRQHandler+0xc94>)
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d022      	beq.n	8005d2e <HAL_DMA_IRQHandler+0xb12>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	4a71      	ldr	r2, [pc, #452]	@ (8005eb4 <HAL_DMA_IRQHandler+0xc98>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d01d      	beq.n	8005d2e <HAL_DMA_IRQHandler+0xb12>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	4a70      	ldr	r2, [pc, #448]	@ (8005eb8 <HAL_DMA_IRQHandler+0xc9c>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d018      	beq.n	8005d2e <HAL_DMA_IRQHandler+0xb12>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	4a6e      	ldr	r2, [pc, #440]	@ (8005ebc <HAL_DMA_IRQHandler+0xca0>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d013      	beq.n	8005d2e <HAL_DMA_IRQHandler+0xb12>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	4a6d      	ldr	r2, [pc, #436]	@ (8005ec0 <HAL_DMA_IRQHandler+0xca4>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d00e      	beq.n	8005d2e <HAL_DMA_IRQHandler+0xb12>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4a6b      	ldr	r2, [pc, #428]	@ (8005ec4 <HAL_DMA_IRQHandler+0xca8>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d009      	beq.n	8005d2e <HAL_DMA_IRQHandler+0xb12>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	4a6a      	ldr	r2, [pc, #424]	@ (8005ec8 <HAL_DMA_IRQHandler+0xcac>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d004      	beq.n	8005d2e <HAL_DMA_IRQHandler+0xb12>
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4a68      	ldr	r2, [pc, #416]	@ (8005ecc <HAL_DMA_IRQHandler+0xcb0>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d108      	bne.n	8005d40 <HAL_DMA_IRQHandler+0xb24>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	681a      	ldr	r2, [r3, #0]
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f022 0208 	bic.w	r2, r2, #8
 8005d3c:	601a      	str	r2, [r3, #0]
 8005d3e:	e007      	b.n	8005d50 <HAL_DMA_IRQHandler+0xb34>
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	681a      	ldr	r2, [r3, #0]
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f022 0204 	bic.w	r2, r2, #4
 8005d4e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	f000 8165 	beq.w	8006024 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d5e:	6878      	ldr	r0, [r7, #4]
 8005d60:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005d62:	e15f      	b.n	8006024 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d68:	f003 031f 	and.w	r3, r3, #31
 8005d6c:	2202      	movs	r2, #2
 8005d6e:	409a      	lsls	r2, r3
 8005d70:	697b      	ldr	r3, [r7, #20]
 8005d72:	4013      	ands	r3, r2
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	f000 80c5 	beq.w	8005f04 <HAL_DMA_IRQHandler+0xce8>
 8005d7a:	693b      	ldr	r3, [r7, #16]
 8005d7c:	f003 0302 	and.w	r3, r3, #2
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	f000 80bf 	beq.w	8005f04 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d8a:	f003 031f 	and.w	r3, r3, #31
 8005d8e:	2202      	movs	r2, #2
 8005d90:	409a      	lsls	r2, r3
 8005d92:	69fb      	ldr	r3, [r7, #28]
 8005d94:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005d96:	693b      	ldr	r3, [r7, #16]
 8005d98:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d018      	beq.n	8005dd2 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005da0:	693b      	ldr	r3, [r7, #16]
 8005da2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d109      	bne.n	8005dbe <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	f000 813a 	beq.w	8006028 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005db8:	6878      	ldr	r0, [r7, #4]
 8005dba:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005dbc:	e134      	b.n	8006028 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	f000 8130 	beq.w	8006028 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005dcc:	6878      	ldr	r0, [r7, #4]
 8005dce:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005dd0:	e12a      	b.n	8006028 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005dd2:	693b      	ldr	r3, [r7, #16]
 8005dd4:	f003 0320 	and.w	r3, r3, #32
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	f040 8089 	bne.w	8005ef0 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	4a2b      	ldr	r2, [pc, #172]	@ (8005e90 <HAL_DMA_IRQHandler+0xc74>)
 8005de4:	4293      	cmp	r3, r2
 8005de6:	d04a      	beq.n	8005e7e <HAL_DMA_IRQHandler+0xc62>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	4a29      	ldr	r2, [pc, #164]	@ (8005e94 <HAL_DMA_IRQHandler+0xc78>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d045      	beq.n	8005e7e <HAL_DMA_IRQHandler+0xc62>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	4a28      	ldr	r2, [pc, #160]	@ (8005e98 <HAL_DMA_IRQHandler+0xc7c>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d040      	beq.n	8005e7e <HAL_DMA_IRQHandler+0xc62>
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	4a26      	ldr	r2, [pc, #152]	@ (8005e9c <HAL_DMA_IRQHandler+0xc80>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d03b      	beq.n	8005e7e <HAL_DMA_IRQHandler+0xc62>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	4a25      	ldr	r2, [pc, #148]	@ (8005ea0 <HAL_DMA_IRQHandler+0xc84>)
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	d036      	beq.n	8005e7e <HAL_DMA_IRQHandler+0xc62>
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	4a23      	ldr	r2, [pc, #140]	@ (8005ea4 <HAL_DMA_IRQHandler+0xc88>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d031      	beq.n	8005e7e <HAL_DMA_IRQHandler+0xc62>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	4a22      	ldr	r2, [pc, #136]	@ (8005ea8 <HAL_DMA_IRQHandler+0xc8c>)
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d02c      	beq.n	8005e7e <HAL_DMA_IRQHandler+0xc62>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	4a20      	ldr	r2, [pc, #128]	@ (8005eac <HAL_DMA_IRQHandler+0xc90>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d027      	beq.n	8005e7e <HAL_DMA_IRQHandler+0xc62>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	4a1f      	ldr	r2, [pc, #124]	@ (8005eb0 <HAL_DMA_IRQHandler+0xc94>)
 8005e34:	4293      	cmp	r3, r2
 8005e36:	d022      	beq.n	8005e7e <HAL_DMA_IRQHandler+0xc62>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	4a1d      	ldr	r2, [pc, #116]	@ (8005eb4 <HAL_DMA_IRQHandler+0xc98>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d01d      	beq.n	8005e7e <HAL_DMA_IRQHandler+0xc62>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	4a1c      	ldr	r2, [pc, #112]	@ (8005eb8 <HAL_DMA_IRQHandler+0xc9c>)
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d018      	beq.n	8005e7e <HAL_DMA_IRQHandler+0xc62>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4a1a      	ldr	r2, [pc, #104]	@ (8005ebc <HAL_DMA_IRQHandler+0xca0>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d013      	beq.n	8005e7e <HAL_DMA_IRQHandler+0xc62>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	4a19      	ldr	r2, [pc, #100]	@ (8005ec0 <HAL_DMA_IRQHandler+0xca4>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d00e      	beq.n	8005e7e <HAL_DMA_IRQHandler+0xc62>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	4a17      	ldr	r2, [pc, #92]	@ (8005ec4 <HAL_DMA_IRQHandler+0xca8>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d009      	beq.n	8005e7e <HAL_DMA_IRQHandler+0xc62>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	4a16      	ldr	r2, [pc, #88]	@ (8005ec8 <HAL_DMA_IRQHandler+0xcac>)
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d004      	beq.n	8005e7e <HAL_DMA_IRQHandler+0xc62>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	4a14      	ldr	r2, [pc, #80]	@ (8005ecc <HAL_DMA_IRQHandler+0xcb0>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d128      	bne.n	8005ed0 <HAL_DMA_IRQHandler+0xcb4>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	681a      	ldr	r2, [r3, #0]
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f022 0214 	bic.w	r2, r2, #20
 8005e8c:	601a      	str	r2, [r3, #0]
 8005e8e:	e027      	b.n	8005ee0 <HAL_DMA_IRQHandler+0xcc4>
 8005e90:	40020010 	.word	0x40020010
 8005e94:	40020028 	.word	0x40020028
 8005e98:	40020040 	.word	0x40020040
 8005e9c:	40020058 	.word	0x40020058
 8005ea0:	40020070 	.word	0x40020070
 8005ea4:	40020088 	.word	0x40020088
 8005ea8:	400200a0 	.word	0x400200a0
 8005eac:	400200b8 	.word	0x400200b8
 8005eb0:	40020410 	.word	0x40020410
 8005eb4:	40020428 	.word	0x40020428
 8005eb8:	40020440 	.word	0x40020440
 8005ebc:	40020458 	.word	0x40020458
 8005ec0:	40020470 	.word	0x40020470
 8005ec4:	40020488 	.word	0x40020488
 8005ec8:	400204a0 	.word	0x400204a0
 8005ecc:	400204b8 	.word	0x400204b8
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	681a      	ldr	r2, [r3, #0]
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f022 020a 	bic.w	r2, r2, #10
 8005ede:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2201      	movs	r2, #1
 8005ee4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2200      	movs	r2, #0
 8005eec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	f000 8097 	beq.w	8006028 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005efe:	6878      	ldr	r0, [r7, #4]
 8005f00:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005f02:	e091      	b.n	8006028 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f08:	f003 031f 	and.w	r3, r3, #31
 8005f0c:	2208      	movs	r2, #8
 8005f0e:	409a      	lsls	r2, r3
 8005f10:	697b      	ldr	r3, [r7, #20]
 8005f12:	4013      	ands	r3, r2
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	f000 8088 	beq.w	800602a <HAL_DMA_IRQHandler+0xe0e>
 8005f1a:	693b      	ldr	r3, [r7, #16]
 8005f1c:	f003 0308 	and.w	r3, r3, #8
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	f000 8082 	beq.w	800602a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	4a41      	ldr	r2, [pc, #260]	@ (8006030 <HAL_DMA_IRQHandler+0xe14>)
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d04a      	beq.n	8005fc6 <HAL_DMA_IRQHandler+0xdaa>
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	4a3f      	ldr	r2, [pc, #252]	@ (8006034 <HAL_DMA_IRQHandler+0xe18>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d045      	beq.n	8005fc6 <HAL_DMA_IRQHandler+0xdaa>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	4a3e      	ldr	r2, [pc, #248]	@ (8006038 <HAL_DMA_IRQHandler+0xe1c>)
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d040      	beq.n	8005fc6 <HAL_DMA_IRQHandler+0xdaa>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	4a3c      	ldr	r2, [pc, #240]	@ (800603c <HAL_DMA_IRQHandler+0xe20>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d03b      	beq.n	8005fc6 <HAL_DMA_IRQHandler+0xdaa>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	4a3b      	ldr	r2, [pc, #236]	@ (8006040 <HAL_DMA_IRQHandler+0xe24>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d036      	beq.n	8005fc6 <HAL_DMA_IRQHandler+0xdaa>
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	4a39      	ldr	r2, [pc, #228]	@ (8006044 <HAL_DMA_IRQHandler+0xe28>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d031      	beq.n	8005fc6 <HAL_DMA_IRQHandler+0xdaa>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	4a38      	ldr	r2, [pc, #224]	@ (8006048 <HAL_DMA_IRQHandler+0xe2c>)
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d02c      	beq.n	8005fc6 <HAL_DMA_IRQHandler+0xdaa>
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	4a36      	ldr	r2, [pc, #216]	@ (800604c <HAL_DMA_IRQHandler+0xe30>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d027      	beq.n	8005fc6 <HAL_DMA_IRQHandler+0xdaa>
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	4a35      	ldr	r2, [pc, #212]	@ (8006050 <HAL_DMA_IRQHandler+0xe34>)
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d022      	beq.n	8005fc6 <HAL_DMA_IRQHandler+0xdaa>
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	4a33      	ldr	r2, [pc, #204]	@ (8006054 <HAL_DMA_IRQHandler+0xe38>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d01d      	beq.n	8005fc6 <HAL_DMA_IRQHandler+0xdaa>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	4a32      	ldr	r2, [pc, #200]	@ (8006058 <HAL_DMA_IRQHandler+0xe3c>)
 8005f90:	4293      	cmp	r3, r2
 8005f92:	d018      	beq.n	8005fc6 <HAL_DMA_IRQHandler+0xdaa>
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	4a30      	ldr	r2, [pc, #192]	@ (800605c <HAL_DMA_IRQHandler+0xe40>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d013      	beq.n	8005fc6 <HAL_DMA_IRQHandler+0xdaa>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	4a2f      	ldr	r2, [pc, #188]	@ (8006060 <HAL_DMA_IRQHandler+0xe44>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d00e      	beq.n	8005fc6 <HAL_DMA_IRQHandler+0xdaa>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4a2d      	ldr	r2, [pc, #180]	@ (8006064 <HAL_DMA_IRQHandler+0xe48>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d009      	beq.n	8005fc6 <HAL_DMA_IRQHandler+0xdaa>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4a2c      	ldr	r2, [pc, #176]	@ (8006068 <HAL_DMA_IRQHandler+0xe4c>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d004      	beq.n	8005fc6 <HAL_DMA_IRQHandler+0xdaa>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4a2a      	ldr	r2, [pc, #168]	@ (800606c <HAL_DMA_IRQHandler+0xe50>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d108      	bne.n	8005fd8 <HAL_DMA_IRQHandler+0xdbc>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	681a      	ldr	r2, [r3, #0]
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f022 021c 	bic.w	r2, r2, #28
 8005fd4:	601a      	str	r2, [r3, #0]
 8005fd6:	e007      	b.n	8005fe8 <HAL_DMA_IRQHandler+0xdcc>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	681a      	ldr	r2, [r3, #0]
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f022 020e 	bic.w	r2, r2, #14
 8005fe6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005fec:	f003 031f 	and.w	r3, r3, #31
 8005ff0:	2201      	movs	r2, #1
 8005ff2:	409a      	lsls	r2, r3
 8005ff4:	69fb      	ldr	r3, [r7, #28]
 8005ff6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2201      	movs	r2, #1
 8005ffc:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2201      	movs	r2, #1
 8006002:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2200      	movs	r2, #0
 800600a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006012:	2b00      	cmp	r3, #0
 8006014:	d009      	beq.n	800602a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800601a:	6878      	ldr	r0, [r7, #4]
 800601c:	4798      	blx	r3
 800601e:	e004      	b.n	800602a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8006020:	bf00      	nop
 8006022:	e002      	b.n	800602a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006024:	bf00      	nop
 8006026:	e000      	b.n	800602a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006028:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800602a:	3728      	adds	r7, #40	@ 0x28
 800602c:	46bd      	mov	sp, r7
 800602e:	bd80      	pop	{r7, pc}
 8006030:	40020010 	.word	0x40020010
 8006034:	40020028 	.word	0x40020028
 8006038:	40020040 	.word	0x40020040
 800603c:	40020058 	.word	0x40020058
 8006040:	40020070 	.word	0x40020070
 8006044:	40020088 	.word	0x40020088
 8006048:	400200a0 	.word	0x400200a0
 800604c:	400200b8 	.word	0x400200b8
 8006050:	40020410 	.word	0x40020410
 8006054:	40020428 	.word	0x40020428
 8006058:	40020440 	.word	0x40020440
 800605c:	40020458 	.word	0x40020458
 8006060:	40020470 	.word	0x40020470
 8006064:	40020488 	.word	0x40020488
 8006068:	400204a0 	.word	0x400204a0
 800606c:	400204b8 	.word	0x400204b8

08006070 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006070:	b480      	push	{r7}
 8006072:	b085      	sub	sp, #20
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4a42      	ldr	r2, [pc, #264]	@ (8006188 <DMA_CalcBaseAndBitshift+0x118>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d04a      	beq.n	8006118 <DMA_CalcBaseAndBitshift+0xa8>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	4a41      	ldr	r2, [pc, #260]	@ (800618c <DMA_CalcBaseAndBitshift+0x11c>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d045      	beq.n	8006118 <DMA_CalcBaseAndBitshift+0xa8>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4a3f      	ldr	r2, [pc, #252]	@ (8006190 <DMA_CalcBaseAndBitshift+0x120>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d040      	beq.n	8006118 <DMA_CalcBaseAndBitshift+0xa8>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	4a3e      	ldr	r2, [pc, #248]	@ (8006194 <DMA_CalcBaseAndBitshift+0x124>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d03b      	beq.n	8006118 <DMA_CalcBaseAndBitshift+0xa8>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4a3c      	ldr	r2, [pc, #240]	@ (8006198 <DMA_CalcBaseAndBitshift+0x128>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d036      	beq.n	8006118 <DMA_CalcBaseAndBitshift+0xa8>
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	4a3b      	ldr	r2, [pc, #236]	@ (800619c <DMA_CalcBaseAndBitshift+0x12c>)
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d031      	beq.n	8006118 <DMA_CalcBaseAndBitshift+0xa8>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	4a39      	ldr	r2, [pc, #228]	@ (80061a0 <DMA_CalcBaseAndBitshift+0x130>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d02c      	beq.n	8006118 <DMA_CalcBaseAndBitshift+0xa8>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	4a38      	ldr	r2, [pc, #224]	@ (80061a4 <DMA_CalcBaseAndBitshift+0x134>)
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d027      	beq.n	8006118 <DMA_CalcBaseAndBitshift+0xa8>
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	4a36      	ldr	r2, [pc, #216]	@ (80061a8 <DMA_CalcBaseAndBitshift+0x138>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d022      	beq.n	8006118 <DMA_CalcBaseAndBitshift+0xa8>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	4a35      	ldr	r2, [pc, #212]	@ (80061ac <DMA_CalcBaseAndBitshift+0x13c>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d01d      	beq.n	8006118 <DMA_CalcBaseAndBitshift+0xa8>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	4a33      	ldr	r2, [pc, #204]	@ (80061b0 <DMA_CalcBaseAndBitshift+0x140>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d018      	beq.n	8006118 <DMA_CalcBaseAndBitshift+0xa8>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	4a32      	ldr	r2, [pc, #200]	@ (80061b4 <DMA_CalcBaseAndBitshift+0x144>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d013      	beq.n	8006118 <DMA_CalcBaseAndBitshift+0xa8>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4a30      	ldr	r2, [pc, #192]	@ (80061b8 <DMA_CalcBaseAndBitshift+0x148>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d00e      	beq.n	8006118 <DMA_CalcBaseAndBitshift+0xa8>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	4a2f      	ldr	r2, [pc, #188]	@ (80061bc <DMA_CalcBaseAndBitshift+0x14c>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d009      	beq.n	8006118 <DMA_CalcBaseAndBitshift+0xa8>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4a2d      	ldr	r2, [pc, #180]	@ (80061c0 <DMA_CalcBaseAndBitshift+0x150>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d004      	beq.n	8006118 <DMA_CalcBaseAndBitshift+0xa8>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	4a2c      	ldr	r2, [pc, #176]	@ (80061c4 <DMA_CalcBaseAndBitshift+0x154>)
 8006114:	4293      	cmp	r3, r2
 8006116:	d101      	bne.n	800611c <DMA_CalcBaseAndBitshift+0xac>
 8006118:	2301      	movs	r3, #1
 800611a:	e000      	b.n	800611e <DMA_CalcBaseAndBitshift+0xae>
 800611c:	2300      	movs	r3, #0
 800611e:	2b00      	cmp	r3, #0
 8006120:	d024      	beq.n	800616c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	b2db      	uxtb	r3, r3
 8006128:	3b10      	subs	r3, #16
 800612a:	4a27      	ldr	r2, [pc, #156]	@ (80061c8 <DMA_CalcBaseAndBitshift+0x158>)
 800612c:	fba2 2303 	umull	r2, r3, r2, r3
 8006130:	091b      	lsrs	r3, r3, #4
 8006132:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	f003 0307 	and.w	r3, r3, #7
 800613a:	4a24      	ldr	r2, [pc, #144]	@ (80061cc <DMA_CalcBaseAndBitshift+0x15c>)
 800613c:	5cd3      	ldrb	r3, [r2, r3]
 800613e:	461a      	mov	r2, r3
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	2b03      	cmp	r3, #3
 8006148:	d908      	bls.n	800615c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	461a      	mov	r2, r3
 8006150:	4b1f      	ldr	r3, [pc, #124]	@ (80061d0 <DMA_CalcBaseAndBitshift+0x160>)
 8006152:	4013      	ands	r3, r2
 8006154:	1d1a      	adds	r2, r3, #4
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	659a      	str	r2, [r3, #88]	@ 0x58
 800615a:	e00d      	b.n	8006178 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	461a      	mov	r2, r3
 8006162:	4b1b      	ldr	r3, [pc, #108]	@ (80061d0 <DMA_CalcBaseAndBitshift+0x160>)
 8006164:	4013      	ands	r3, r2
 8006166:	687a      	ldr	r2, [r7, #4]
 8006168:	6593      	str	r3, [r2, #88]	@ 0x58
 800616a:	e005      	b.n	8006178 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800617c:	4618      	mov	r0, r3
 800617e:	3714      	adds	r7, #20
 8006180:	46bd      	mov	sp, r7
 8006182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006186:	4770      	bx	lr
 8006188:	40020010 	.word	0x40020010
 800618c:	40020028 	.word	0x40020028
 8006190:	40020040 	.word	0x40020040
 8006194:	40020058 	.word	0x40020058
 8006198:	40020070 	.word	0x40020070
 800619c:	40020088 	.word	0x40020088
 80061a0:	400200a0 	.word	0x400200a0
 80061a4:	400200b8 	.word	0x400200b8
 80061a8:	40020410 	.word	0x40020410
 80061ac:	40020428 	.word	0x40020428
 80061b0:	40020440 	.word	0x40020440
 80061b4:	40020458 	.word	0x40020458
 80061b8:	40020470 	.word	0x40020470
 80061bc:	40020488 	.word	0x40020488
 80061c0:	400204a0 	.word	0x400204a0
 80061c4:	400204b8 	.word	0x400204b8
 80061c8:	aaaaaaab 	.word	0xaaaaaaab
 80061cc:	08022f24 	.word	0x08022f24
 80061d0:	fffffc00 	.word	0xfffffc00

080061d4 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 80061d4:	b480      	push	{r7}
 80061d6:	b085      	sub	sp, #20
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80061dc:	2300      	movs	r3, #0
 80061de:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	699b      	ldr	r3, [r3, #24]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d120      	bne.n	800622a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061ec:	2b03      	cmp	r3, #3
 80061ee:	d858      	bhi.n	80062a2 <DMA_CheckFifoParam+0xce>
 80061f0:	a201      	add	r2, pc, #4	@ (adr r2, 80061f8 <DMA_CheckFifoParam+0x24>)
 80061f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061f6:	bf00      	nop
 80061f8:	08006209 	.word	0x08006209
 80061fc:	0800621b 	.word	0x0800621b
 8006200:	08006209 	.word	0x08006209
 8006204:	080062a3 	.word	0x080062a3
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800620c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006210:	2b00      	cmp	r3, #0
 8006212:	d048      	beq.n	80062a6 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8006214:	2301      	movs	r3, #1
 8006216:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006218:	e045      	b.n	80062a6 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800621e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006222:	d142      	bne.n	80062aa <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8006224:	2301      	movs	r3, #1
 8006226:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006228:	e03f      	b.n	80062aa <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	699b      	ldr	r3, [r3, #24]
 800622e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006232:	d123      	bne.n	800627c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006238:	2b03      	cmp	r3, #3
 800623a:	d838      	bhi.n	80062ae <DMA_CheckFifoParam+0xda>
 800623c:	a201      	add	r2, pc, #4	@ (adr r2, 8006244 <DMA_CheckFifoParam+0x70>)
 800623e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006242:	bf00      	nop
 8006244:	08006255 	.word	0x08006255
 8006248:	0800625b 	.word	0x0800625b
 800624c:	08006255 	.word	0x08006255
 8006250:	0800626d 	.word	0x0800626d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8006254:	2301      	movs	r3, #1
 8006256:	73fb      	strb	r3, [r7, #15]
        break;
 8006258:	e030      	b.n	80062bc <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800625e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006262:	2b00      	cmp	r3, #0
 8006264:	d025      	beq.n	80062b2 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8006266:	2301      	movs	r3, #1
 8006268:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800626a:	e022      	b.n	80062b2 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006270:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006274:	d11f      	bne.n	80062b6 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8006276:	2301      	movs	r3, #1
 8006278:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800627a:	e01c      	b.n	80062b6 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006280:	2b02      	cmp	r3, #2
 8006282:	d902      	bls.n	800628a <DMA_CheckFifoParam+0xb6>
 8006284:	2b03      	cmp	r3, #3
 8006286:	d003      	beq.n	8006290 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8006288:	e018      	b.n	80062bc <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800628a:	2301      	movs	r3, #1
 800628c:	73fb      	strb	r3, [r7, #15]
        break;
 800628e:	e015      	b.n	80062bc <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006294:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006298:	2b00      	cmp	r3, #0
 800629a:	d00e      	beq.n	80062ba <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800629c:	2301      	movs	r3, #1
 800629e:	73fb      	strb	r3, [r7, #15]
    break;
 80062a0:	e00b      	b.n	80062ba <DMA_CheckFifoParam+0xe6>
        break;
 80062a2:	bf00      	nop
 80062a4:	e00a      	b.n	80062bc <DMA_CheckFifoParam+0xe8>
        break;
 80062a6:	bf00      	nop
 80062a8:	e008      	b.n	80062bc <DMA_CheckFifoParam+0xe8>
        break;
 80062aa:	bf00      	nop
 80062ac:	e006      	b.n	80062bc <DMA_CheckFifoParam+0xe8>
        break;
 80062ae:	bf00      	nop
 80062b0:	e004      	b.n	80062bc <DMA_CheckFifoParam+0xe8>
        break;
 80062b2:	bf00      	nop
 80062b4:	e002      	b.n	80062bc <DMA_CheckFifoParam+0xe8>
        break;
 80062b6:	bf00      	nop
 80062b8:	e000      	b.n	80062bc <DMA_CheckFifoParam+0xe8>
    break;
 80062ba:	bf00      	nop
    }
  }

  return status;
 80062bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80062be:	4618      	mov	r0, r3
 80062c0:	3714      	adds	r7, #20
 80062c2:	46bd      	mov	sp, r7
 80062c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c8:	4770      	bx	lr
 80062ca:	bf00      	nop

080062cc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80062cc:	b480      	push	{r7}
 80062ce:	b085      	sub	sp, #20
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	4a38      	ldr	r2, [pc, #224]	@ (80063c0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d022      	beq.n	800632a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	4a36      	ldr	r2, [pc, #216]	@ (80063c4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d01d      	beq.n	800632a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	4a35      	ldr	r2, [pc, #212]	@ (80063c8 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d018      	beq.n	800632a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	4a33      	ldr	r2, [pc, #204]	@ (80063cc <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80062fe:	4293      	cmp	r3, r2
 8006300:	d013      	beq.n	800632a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	4a32      	ldr	r2, [pc, #200]	@ (80063d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8006308:	4293      	cmp	r3, r2
 800630a:	d00e      	beq.n	800632a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	4a30      	ldr	r2, [pc, #192]	@ (80063d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d009      	beq.n	800632a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	4a2f      	ldr	r2, [pc, #188]	@ (80063d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800631c:	4293      	cmp	r3, r2
 800631e:	d004      	beq.n	800632a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	4a2d      	ldr	r2, [pc, #180]	@ (80063dc <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8006326:	4293      	cmp	r3, r2
 8006328:	d101      	bne.n	800632e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800632a:	2301      	movs	r3, #1
 800632c:	e000      	b.n	8006330 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800632e:	2300      	movs	r3, #0
 8006330:	2b00      	cmp	r3, #0
 8006332:	d01a      	beq.n	800636a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	b2db      	uxtb	r3, r3
 800633a:	3b08      	subs	r3, #8
 800633c:	4a28      	ldr	r2, [pc, #160]	@ (80063e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800633e:	fba2 2303 	umull	r2, r3, r2, r3
 8006342:	091b      	lsrs	r3, r3, #4
 8006344:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8006346:	68fa      	ldr	r2, [r7, #12]
 8006348:	4b26      	ldr	r3, [pc, #152]	@ (80063e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800634a:	4413      	add	r3, r2
 800634c:	009b      	lsls	r3, r3, #2
 800634e:	461a      	mov	r2, r3
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	4a24      	ldr	r2, [pc, #144]	@ (80063e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8006358:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	f003 031f 	and.w	r3, r3, #31
 8006360:	2201      	movs	r2, #1
 8006362:	409a      	lsls	r2, r3
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8006368:	e024      	b.n	80063b4 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	b2db      	uxtb	r3, r3
 8006370:	3b10      	subs	r3, #16
 8006372:	4a1e      	ldr	r2, [pc, #120]	@ (80063ec <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8006374:	fba2 2303 	umull	r2, r3, r2, r3
 8006378:	091b      	lsrs	r3, r3, #4
 800637a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800637c:	68bb      	ldr	r3, [r7, #8]
 800637e:	4a1c      	ldr	r2, [pc, #112]	@ (80063f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8006380:	4293      	cmp	r3, r2
 8006382:	d806      	bhi.n	8006392 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8006384:	68bb      	ldr	r3, [r7, #8]
 8006386:	4a1b      	ldr	r2, [pc, #108]	@ (80063f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8006388:	4293      	cmp	r3, r2
 800638a:	d902      	bls.n	8006392 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	3308      	adds	r3, #8
 8006390:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8006392:	68fa      	ldr	r2, [r7, #12]
 8006394:	4b18      	ldr	r3, [pc, #96]	@ (80063f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8006396:	4413      	add	r3, r2
 8006398:	009b      	lsls	r3, r3, #2
 800639a:	461a      	mov	r2, r3
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	4a16      	ldr	r2, [pc, #88]	@ (80063fc <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80063a4:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	f003 031f 	and.w	r3, r3, #31
 80063ac:	2201      	movs	r2, #1
 80063ae:	409a      	lsls	r2, r3
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80063b4:	bf00      	nop
 80063b6:	3714      	adds	r7, #20
 80063b8:	46bd      	mov	sp, r7
 80063ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063be:	4770      	bx	lr
 80063c0:	58025408 	.word	0x58025408
 80063c4:	5802541c 	.word	0x5802541c
 80063c8:	58025430 	.word	0x58025430
 80063cc:	58025444 	.word	0x58025444
 80063d0:	58025458 	.word	0x58025458
 80063d4:	5802546c 	.word	0x5802546c
 80063d8:	58025480 	.word	0x58025480
 80063dc:	58025494 	.word	0x58025494
 80063e0:	cccccccd 	.word	0xcccccccd
 80063e4:	16009600 	.word	0x16009600
 80063e8:	58025880 	.word	0x58025880
 80063ec:	aaaaaaab 	.word	0xaaaaaaab
 80063f0:	400204b8 	.word	0x400204b8
 80063f4:	4002040f 	.word	0x4002040f
 80063f8:	10008200 	.word	0x10008200
 80063fc:	40020880 	.word	0x40020880

08006400 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006400:	b480      	push	{r7}
 8006402:	b085      	sub	sp, #20
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	685b      	ldr	r3, [r3, #4]
 800640c:	b2db      	uxtb	r3, r3
 800640e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d04a      	beq.n	80064ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	2b08      	cmp	r3, #8
 800641a:	d847      	bhi.n	80064ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	4a25      	ldr	r2, [pc, #148]	@ (80064b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8006422:	4293      	cmp	r3, r2
 8006424:	d022      	beq.n	800646c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	4a24      	ldr	r2, [pc, #144]	@ (80064bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800642c:	4293      	cmp	r3, r2
 800642e:	d01d      	beq.n	800646c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	4a22      	ldr	r2, [pc, #136]	@ (80064c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8006436:	4293      	cmp	r3, r2
 8006438:	d018      	beq.n	800646c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	4a21      	ldr	r2, [pc, #132]	@ (80064c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8006440:	4293      	cmp	r3, r2
 8006442:	d013      	beq.n	800646c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	4a1f      	ldr	r2, [pc, #124]	@ (80064c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800644a:	4293      	cmp	r3, r2
 800644c:	d00e      	beq.n	800646c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	4a1e      	ldr	r2, [pc, #120]	@ (80064cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8006454:	4293      	cmp	r3, r2
 8006456:	d009      	beq.n	800646c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	4a1c      	ldr	r2, [pc, #112]	@ (80064d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800645e:	4293      	cmp	r3, r2
 8006460:	d004      	beq.n	800646c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	4a1b      	ldr	r2, [pc, #108]	@ (80064d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8006468:	4293      	cmp	r3, r2
 800646a:	d101      	bne.n	8006470 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800646c:	2301      	movs	r3, #1
 800646e:	e000      	b.n	8006472 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8006470:	2300      	movs	r3, #0
 8006472:	2b00      	cmp	r3, #0
 8006474:	d00a      	beq.n	800648c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8006476:	68fa      	ldr	r2, [r7, #12]
 8006478:	4b17      	ldr	r3, [pc, #92]	@ (80064d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800647a:	4413      	add	r3, r2
 800647c:	009b      	lsls	r3, r3, #2
 800647e:	461a      	mov	r2, r3
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	4a15      	ldr	r2, [pc, #84]	@ (80064dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8006488:	671a      	str	r2, [r3, #112]	@ 0x70
 800648a:	e009      	b.n	80064a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800648c:	68fa      	ldr	r2, [r7, #12]
 800648e:	4b14      	ldr	r3, [pc, #80]	@ (80064e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8006490:	4413      	add	r3, r2
 8006492:	009b      	lsls	r3, r3, #2
 8006494:	461a      	mov	r2, r3
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	4a11      	ldr	r2, [pc, #68]	@ (80064e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800649e:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	3b01      	subs	r3, #1
 80064a4:	2201      	movs	r2, #1
 80064a6:	409a      	lsls	r2, r3
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 80064ac:	bf00      	nop
 80064ae:	3714      	adds	r7, #20
 80064b0:	46bd      	mov	sp, r7
 80064b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b6:	4770      	bx	lr
 80064b8:	58025408 	.word	0x58025408
 80064bc:	5802541c 	.word	0x5802541c
 80064c0:	58025430 	.word	0x58025430
 80064c4:	58025444 	.word	0x58025444
 80064c8:	58025458 	.word	0x58025458
 80064cc:	5802546c 	.word	0x5802546c
 80064d0:	58025480 	.word	0x58025480
 80064d4:	58025494 	.word	0x58025494
 80064d8:	1600963f 	.word	0x1600963f
 80064dc:	58025940 	.word	0x58025940
 80064e0:	1000823f 	.word	0x1000823f
 80064e4:	40020940 	.word	0x40020940

080064e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b088      	sub	sp, #32
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
 80064f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80064f2:	2300      	movs	r3, #0
 80064f4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80064f6:	4b41      	ldr	r3, [pc, #260]	@ (80065fc <HAL_GPIO_Init+0x114>)
 80064f8:	617b      	str	r3, [r7, #20]
#endif

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	4a40      	ldr	r2, [pc, #256]	@ (8006600 <HAL_GPIO_Init+0x118>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d027      	beq.n	8006552 <HAL_GPIO_Init+0x6a>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	4a3f      	ldr	r2, [pc, #252]	@ (8006604 <HAL_GPIO_Init+0x11c>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d023      	beq.n	8006552 <HAL_GPIO_Init+0x6a>
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	4a3e      	ldr	r2, [pc, #248]	@ (8006608 <HAL_GPIO_Init+0x120>)
 800650e:	4293      	cmp	r3, r2
 8006510:	d01f      	beq.n	8006552 <HAL_GPIO_Init+0x6a>
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	4a3d      	ldr	r2, [pc, #244]	@ (800660c <HAL_GPIO_Init+0x124>)
 8006516:	4293      	cmp	r3, r2
 8006518:	d01b      	beq.n	8006552 <HAL_GPIO_Init+0x6a>
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	4a3c      	ldr	r2, [pc, #240]	@ (8006610 <HAL_GPIO_Init+0x128>)
 800651e:	4293      	cmp	r3, r2
 8006520:	d017      	beq.n	8006552 <HAL_GPIO_Init+0x6a>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	4a3b      	ldr	r2, [pc, #236]	@ (8006614 <HAL_GPIO_Init+0x12c>)
 8006526:	4293      	cmp	r3, r2
 8006528:	d013      	beq.n	8006552 <HAL_GPIO_Init+0x6a>
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	4a3a      	ldr	r2, [pc, #232]	@ (8006618 <HAL_GPIO_Init+0x130>)
 800652e:	4293      	cmp	r3, r2
 8006530:	d00f      	beq.n	8006552 <HAL_GPIO_Init+0x6a>
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	4a39      	ldr	r2, [pc, #228]	@ (800661c <HAL_GPIO_Init+0x134>)
 8006536:	4293      	cmp	r3, r2
 8006538:	d00b      	beq.n	8006552 <HAL_GPIO_Init+0x6a>
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	4a38      	ldr	r2, [pc, #224]	@ (8006620 <HAL_GPIO_Init+0x138>)
 800653e:	4293      	cmp	r3, r2
 8006540:	d007      	beq.n	8006552 <HAL_GPIO_Init+0x6a>
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	4a37      	ldr	r2, [pc, #220]	@ (8006624 <HAL_GPIO_Init+0x13c>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d003      	beq.n	8006552 <HAL_GPIO_Init+0x6a>
 800654a:	21b3      	movs	r1, #179	@ 0xb3
 800654c:	4836      	ldr	r0, [pc, #216]	@ (8006628 <HAL_GPIO_Init+0x140>)
 800654e:	f7fb ff39 	bl	80023c4 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	b29b      	uxth	r3, r3
 8006558:	2b00      	cmp	r3, #0
 800655a:	d004      	beq.n	8006566 <HAL_GPIO_Init+0x7e>
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006564:	d303      	bcc.n	800656e <HAL_GPIO_Init+0x86>
 8006566:	21b4      	movs	r1, #180	@ 0xb4
 8006568:	482f      	ldr	r0, [pc, #188]	@ (8006628 <HAL_GPIO_Init+0x140>)
 800656a:	f7fb ff2b 	bl	80023c4 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	685b      	ldr	r3, [r3, #4]
 8006572:	2b00      	cmp	r3, #0
 8006574:	f000 8241 	beq.w	80069fa <HAL_GPIO_Init+0x512>
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	685b      	ldr	r3, [r3, #4]
 800657c:	2b01      	cmp	r3, #1
 800657e:	f000 823c 	beq.w	80069fa <HAL_GPIO_Init+0x512>
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	685b      	ldr	r3, [r3, #4]
 8006586:	2b11      	cmp	r3, #17
 8006588:	f000 8237 	beq.w	80069fa <HAL_GPIO_Init+0x512>
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	685b      	ldr	r3, [r3, #4]
 8006590:	2b02      	cmp	r3, #2
 8006592:	f000 8232 	beq.w	80069fa <HAL_GPIO_Init+0x512>
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	685b      	ldr	r3, [r3, #4]
 800659a:	2b12      	cmp	r3, #18
 800659c:	f000 822d 	beq.w	80069fa <HAL_GPIO_Init+0x512>
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	685b      	ldr	r3, [r3, #4]
 80065a4:	f5b3 1f88 	cmp.w	r3, #1114112	@ 0x110000
 80065a8:	f000 8227 	beq.w	80069fa <HAL_GPIO_Init+0x512>
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	685b      	ldr	r3, [r3, #4]
 80065b0:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 80065b4:	f000 8221 	beq.w	80069fa <HAL_GPIO_Init+0x512>
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	685b      	ldr	r3, [r3, #4]
 80065bc:	f5b3 1f44 	cmp.w	r3, #3211264	@ 0x310000
 80065c0:	f000 821b 	beq.w	80069fa <HAL_GPIO_Init+0x512>
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	685b      	ldr	r3, [r3, #4]
 80065c8:	f5b3 1f90 	cmp.w	r3, #1179648	@ 0x120000
 80065cc:	f000 8215 	beq.w	80069fa <HAL_GPIO_Init+0x512>
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	685b      	ldr	r3, [r3, #4]
 80065d4:	f5b3 1f08 	cmp.w	r3, #2228224	@ 0x220000
 80065d8:	f000 820f 	beq.w	80069fa <HAL_GPIO_Init+0x512>
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	685b      	ldr	r3, [r3, #4]
 80065e0:	f5b3 1f48 	cmp.w	r3, #3276800	@ 0x320000
 80065e4:	f000 8209 	beq.w	80069fa <HAL_GPIO_Init+0x512>
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	685b      	ldr	r3, [r3, #4]
 80065ec:	2b03      	cmp	r3, #3
 80065ee:	f000 8204 	beq.w	80069fa <HAL_GPIO_Init+0x512>
 80065f2:	21b5      	movs	r1, #181	@ 0xb5
 80065f4:	480c      	ldr	r0, [pc, #48]	@ (8006628 <HAL_GPIO_Init+0x140>)
 80065f6:	f7fb fee5 	bl	80023c4 <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80065fa:	e1fe      	b.n	80069fa <HAL_GPIO_Init+0x512>
 80065fc:	58000080 	.word	0x58000080
 8006600:	58020000 	.word	0x58020000
 8006604:	58020400 	.word	0x58020400
 8006608:	58020800 	.word	0x58020800
 800660c:	58020c00 	.word	0x58020c00
 8006610:	58021000 	.word	0x58021000
 8006614:	58021400 	.word	0x58021400
 8006618:	58021800 	.word	0x58021800
 800661c:	58021c00 	.word	0x58021c00
 8006620:	58022400 	.word	0x58022400
 8006624:	58022800 	.word	0x58022800
 8006628:	0802153c 	.word	0x0802153c
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	681a      	ldr	r2, [r3, #0]
 8006630:	2101      	movs	r1, #1
 8006632:	69fb      	ldr	r3, [r7, #28]
 8006634:	fa01 f303 	lsl.w	r3, r1, r3
 8006638:	4013      	ands	r3, r2
 800663a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800663c:	693b      	ldr	r3, [r7, #16]
 800663e:	2b00      	cmp	r3, #0
 8006640:	f000 81d8 	beq.w	80069f4 <HAL_GPIO_Init+0x50c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	685b      	ldr	r3, [r3, #4]
 8006648:	f003 0303 	and.w	r3, r3, #3
 800664c:	2b01      	cmp	r3, #1
 800664e:	d005      	beq.n	800665c <HAL_GPIO_Init+0x174>
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	685b      	ldr	r3, [r3, #4]
 8006654:	f003 0303 	and.w	r3, r3, #3
 8006658:	2b02      	cmp	r3, #2
 800665a:	d144      	bne.n	80066e6 <HAL_GPIO_Init+0x1fe>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	68db      	ldr	r3, [r3, #12]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d00f      	beq.n	8006684 <HAL_GPIO_Init+0x19c>
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	68db      	ldr	r3, [r3, #12]
 8006668:	2b01      	cmp	r3, #1
 800666a:	d00b      	beq.n	8006684 <HAL_GPIO_Init+0x19c>
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	68db      	ldr	r3, [r3, #12]
 8006670:	2b02      	cmp	r3, #2
 8006672:	d007      	beq.n	8006684 <HAL_GPIO_Init+0x19c>
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	68db      	ldr	r3, [r3, #12]
 8006678:	2b03      	cmp	r3, #3
 800667a:	d003      	beq.n	8006684 <HAL_GPIO_Init+0x19c>
 800667c:	21c4      	movs	r1, #196	@ 0xc4
 800667e:	489b      	ldr	r0, [pc, #620]	@ (80068ec <HAL_GPIO_Init+0x404>)
 8006680:	f7fb fea0 	bl	80023c4 <assert_failed>

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	689b      	ldr	r3, [r3, #8]
 8006688:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800668a:	69fb      	ldr	r3, [r7, #28]
 800668c:	005b      	lsls	r3, r3, #1
 800668e:	2203      	movs	r2, #3
 8006690:	fa02 f303 	lsl.w	r3, r2, r3
 8006694:	43db      	mvns	r3, r3
 8006696:	69ba      	ldr	r2, [r7, #24]
 8006698:	4013      	ands	r3, r2
 800669a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	68da      	ldr	r2, [r3, #12]
 80066a0:	69fb      	ldr	r3, [r7, #28]
 80066a2:	005b      	lsls	r3, r3, #1
 80066a4:	fa02 f303 	lsl.w	r3, r2, r3
 80066a8:	69ba      	ldr	r2, [r7, #24]
 80066aa:	4313      	orrs	r3, r2
 80066ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	69ba      	ldr	r2, [r7, #24]
 80066b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	685b      	ldr	r3, [r3, #4]
 80066b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80066ba:	2201      	movs	r2, #1
 80066bc:	69fb      	ldr	r3, [r7, #28]
 80066be:	fa02 f303 	lsl.w	r3, r2, r3
 80066c2:	43db      	mvns	r3, r3
 80066c4:	69ba      	ldr	r2, [r7, #24]
 80066c6:	4013      	ands	r3, r2
 80066c8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	685b      	ldr	r3, [r3, #4]
 80066ce:	091b      	lsrs	r3, r3, #4
 80066d0:	f003 0201 	and.w	r2, r3, #1
 80066d4:	69fb      	ldr	r3, [r7, #28]
 80066d6:	fa02 f303 	lsl.w	r3, r2, r3
 80066da:	69ba      	ldr	r2, [r7, #24]
 80066dc:	4313      	orrs	r3, r2
 80066de:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	69ba      	ldr	r2, [r7, #24]
 80066e4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	685b      	ldr	r3, [r3, #4]
 80066ea:	f003 0303 	and.w	r3, r3, #3
 80066ee:	2b03      	cmp	r3, #3
 80066f0:	d027      	beq.n	8006742 <HAL_GPIO_Init+0x25a>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	689b      	ldr	r3, [r3, #8]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d00b      	beq.n	8006712 <HAL_GPIO_Init+0x22a>
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	689b      	ldr	r3, [r3, #8]
 80066fe:	2b01      	cmp	r3, #1
 8006700:	d007      	beq.n	8006712 <HAL_GPIO_Init+0x22a>
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	689b      	ldr	r3, [r3, #8]
 8006706:	2b02      	cmp	r3, #2
 8006708:	d003      	beq.n	8006712 <HAL_GPIO_Init+0x22a>
 800670a:	21d6      	movs	r1, #214	@ 0xd6
 800670c:	4877      	ldr	r0, [pc, #476]	@ (80068ec <HAL_GPIO_Init+0x404>)
 800670e:	f7fb fe59 	bl	80023c4 <assert_failed>

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	68db      	ldr	r3, [r3, #12]
 8006716:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006718:	69fb      	ldr	r3, [r7, #28]
 800671a:	005b      	lsls	r3, r3, #1
 800671c:	2203      	movs	r2, #3
 800671e:	fa02 f303 	lsl.w	r3, r2, r3
 8006722:	43db      	mvns	r3, r3
 8006724:	69ba      	ldr	r2, [r7, #24]
 8006726:	4013      	ands	r3, r2
 8006728:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	689a      	ldr	r2, [r3, #8]
 800672e:	69fb      	ldr	r3, [r7, #28]
 8006730:	005b      	lsls	r3, r3, #1
 8006732:	fa02 f303 	lsl.w	r3, r2, r3
 8006736:	69ba      	ldr	r2, [r7, #24]
 8006738:	4313      	orrs	r3, r2
 800673a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	69ba      	ldr	r2, [r7, #24]
 8006740:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	685b      	ldr	r3, [r3, #4]
 8006746:	f003 0303 	and.w	r3, r3, #3
 800674a:	2b02      	cmp	r3, #2
 800674c:	d157      	bne.n	80067fe <HAL_GPIO_Init+0x316>
      {
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	4a67      	ldr	r2, [pc, #412]	@ (80068f0 <HAL_GPIO_Init+0x408>)
 8006752:	4293      	cmp	r3, r2
 8006754:	d027      	beq.n	80067a6 <HAL_GPIO_Init+0x2be>
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	4a66      	ldr	r2, [pc, #408]	@ (80068f4 <HAL_GPIO_Init+0x40c>)
 800675a:	4293      	cmp	r3, r2
 800675c:	d023      	beq.n	80067a6 <HAL_GPIO_Init+0x2be>
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	4a65      	ldr	r2, [pc, #404]	@ (80068f8 <HAL_GPIO_Init+0x410>)
 8006762:	4293      	cmp	r3, r2
 8006764:	d01f      	beq.n	80067a6 <HAL_GPIO_Init+0x2be>
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	4a64      	ldr	r2, [pc, #400]	@ (80068fc <HAL_GPIO_Init+0x414>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d01b      	beq.n	80067a6 <HAL_GPIO_Init+0x2be>
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	4a63      	ldr	r2, [pc, #396]	@ (8006900 <HAL_GPIO_Init+0x418>)
 8006772:	4293      	cmp	r3, r2
 8006774:	d017      	beq.n	80067a6 <HAL_GPIO_Init+0x2be>
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	4a62      	ldr	r2, [pc, #392]	@ (8006904 <HAL_GPIO_Init+0x41c>)
 800677a:	4293      	cmp	r3, r2
 800677c:	d013      	beq.n	80067a6 <HAL_GPIO_Init+0x2be>
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	4a61      	ldr	r2, [pc, #388]	@ (8006908 <HAL_GPIO_Init+0x420>)
 8006782:	4293      	cmp	r3, r2
 8006784:	d00f      	beq.n	80067a6 <HAL_GPIO_Init+0x2be>
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	4a60      	ldr	r2, [pc, #384]	@ (800690c <HAL_GPIO_Init+0x424>)
 800678a:	4293      	cmp	r3, r2
 800678c:	d00b      	beq.n	80067a6 <HAL_GPIO_Init+0x2be>
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	4a5f      	ldr	r2, [pc, #380]	@ (8006910 <HAL_GPIO_Init+0x428>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d007      	beq.n	80067a6 <HAL_GPIO_Init+0x2be>
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	4a5e      	ldr	r2, [pc, #376]	@ (8006914 <HAL_GPIO_Init+0x42c>)
 800679a:	4293      	cmp	r3, r2
 800679c:	d003      	beq.n	80067a6 <HAL_GPIO_Init+0x2be>
 800679e:	21e3      	movs	r1, #227	@ 0xe3
 80067a0:	4852      	ldr	r0, [pc, #328]	@ (80068ec <HAL_GPIO_Init+0x404>)
 80067a2:	f7fb fe0f 	bl	80023c4 <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	691b      	ldr	r3, [r3, #16]
 80067aa:	2b0f      	cmp	r3, #15
 80067ac:	d903      	bls.n	80067b6 <HAL_GPIO_Init+0x2ce>
 80067ae:	21e4      	movs	r1, #228	@ 0xe4
 80067b0:	484e      	ldr	r0, [pc, #312]	@ (80068ec <HAL_GPIO_Init+0x404>)
 80067b2:	f7fb fe07 	bl	80023c4 <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80067b6:	69fb      	ldr	r3, [r7, #28]
 80067b8:	08da      	lsrs	r2, r3, #3
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	3208      	adds	r2, #8
 80067be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80067c4:	69fb      	ldr	r3, [r7, #28]
 80067c6:	f003 0307 	and.w	r3, r3, #7
 80067ca:	009b      	lsls	r3, r3, #2
 80067cc:	220f      	movs	r2, #15
 80067ce:	fa02 f303 	lsl.w	r3, r2, r3
 80067d2:	43db      	mvns	r3, r3
 80067d4:	69ba      	ldr	r2, [r7, #24]
 80067d6:	4013      	ands	r3, r2
 80067d8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	691a      	ldr	r2, [r3, #16]
 80067de:	69fb      	ldr	r3, [r7, #28]
 80067e0:	f003 0307 	and.w	r3, r3, #7
 80067e4:	009b      	lsls	r3, r3, #2
 80067e6:	fa02 f303 	lsl.w	r3, r2, r3
 80067ea:	69ba      	ldr	r2, [r7, #24]
 80067ec:	4313      	orrs	r3, r2
 80067ee:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80067f0:	69fb      	ldr	r3, [r7, #28]
 80067f2:	08da      	lsrs	r2, r3, #3
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	3208      	adds	r2, #8
 80067f8:	69b9      	ldr	r1, [r7, #24]
 80067fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006804:	69fb      	ldr	r3, [r7, #28]
 8006806:	005b      	lsls	r3, r3, #1
 8006808:	2203      	movs	r2, #3
 800680a:	fa02 f303 	lsl.w	r3, r2, r3
 800680e:	43db      	mvns	r3, r3
 8006810:	69ba      	ldr	r2, [r7, #24]
 8006812:	4013      	ands	r3, r2
 8006814:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	685b      	ldr	r3, [r3, #4]
 800681a:	f003 0203 	and.w	r2, r3, #3
 800681e:	69fb      	ldr	r3, [r7, #28]
 8006820:	005b      	lsls	r3, r3, #1
 8006822:	fa02 f303 	lsl.w	r3, r2, r3
 8006826:	69ba      	ldr	r2, [r7, #24]
 8006828:	4313      	orrs	r3, r2
 800682a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	69ba      	ldr	r2, [r7, #24]
 8006830:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	685b      	ldr	r3, [r3, #4]
 8006836:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800683a:	2b00      	cmp	r3, #0
 800683c:	f000 80da 	beq.w	80069f4 <HAL_GPIO_Init+0x50c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006840:	4b35      	ldr	r3, [pc, #212]	@ (8006918 <HAL_GPIO_Init+0x430>)
 8006842:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006846:	4a34      	ldr	r2, [pc, #208]	@ (8006918 <HAL_GPIO_Init+0x430>)
 8006848:	f043 0302 	orr.w	r3, r3, #2
 800684c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8006850:	4b31      	ldr	r3, [pc, #196]	@ (8006918 <HAL_GPIO_Init+0x430>)
 8006852:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006856:	f003 0302 	and.w	r3, r3, #2
 800685a:	60fb      	str	r3, [r7, #12]
 800685c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800685e:	4a2f      	ldr	r2, [pc, #188]	@ (800691c <HAL_GPIO_Init+0x434>)
 8006860:	69fb      	ldr	r3, [r7, #28]
 8006862:	089b      	lsrs	r3, r3, #2
 8006864:	3302      	adds	r3, #2
 8006866:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800686a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800686c:	69fb      	ldr	r3, [r7, #28]
 800686e:	f003 0303 	and.w	r3, r3, #3
 8006872:	009b      	lsls	r3, r3, #2
 8006874:	220f      	movs	r2, #15
 8006876:	fa02 f303 	lsl.w	r3, r2, r3
 800687a:	43db      	mvns	r3, r3
 800687c:	69ba      	ldr	r2, [r7, #24]
 800687e:	4013      	ands	r3, r2
 8006880:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	4a1a      	ldr	r2, [pc, #104]	@ (80068f0 <HAL_GPIO_Init+0x408>)
 8006886:	4293      	cmp	r3, r2
 8006888:	d04c      	beq.n	8006924 <HAL_GPIO_Init+0x43c>
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	4a19      	ldr	r2, [pc, #100]	@ (80068f4 <HAL_GPIO_Init+0x40c>)
 800688e:	4293      	cmp	r3, r2
 8006890:	d046      	beq.n	8006920 <HAL_GPIO_Init+0x438>
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	4a18      	ldr	r2, [pc, #96]	@ (80068f8 <HAL_GPIO_Init+0x410>)
 8006896:	4293      	cmp	r3, r2
 8006898:	d025      	beq.n	80068e6 <HAL_GPIO_Init+0x3fe>
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	4a17      	ldr	r2, [pc, #92]	@ (80068fc <HAL_GPIO_Init+0x414>)
 800689e:	4293      	cmp	r3, r2
 80068a0:	d01f      	beq.n	80068e2 <HAL_GPIO_Init+0x3fa>
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	4a16      	ldr	r2, [pc, #88]	@ (8006900 <HAL_GPIO_Init+0x418>)
 80068a6:	4293      	cmp	r3, r2
 80068a8:	d019      	beq.n	80068de <HAL_GPIO_Init+0x3f6>
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	4a15      	ldr	r2, [pc, #84]	@ (8006904 <HAL_GPIO_Init+0x41c>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d013      	beq.n	80068da <HAL_GPIO_Init+0x3f2>
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	4a14      	ldr	r2, [pc, #80]	@ (8006908 <HAL_GPIO_Init+0x420>)
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d00d      	beq.n	80068d6 <HAL_GPIO_Init+0x3ee>
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	4a13      	ldr	r2, [pc, #76]	@ (800690c <HAL_GPIO_Init+0x424>)
 80068be:	4293      	cmp	r3, r2
 80068c0:	d007      	beq.n	80068d2 <HAL_GPIO_Init+0x3ea>
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	4a12      	ldr	r2, [pc, #72]	@ (8006910 <HAL_GPIO_Init+0x428>)
 80068c6:	4293      	cmp	r3, r2
 80068c8:	d101      	bne.n	80068ce <HAL_GPIO_Init+0x3e6>
 80068ca:	2309      	movs	r3, #9
 80068cc:	e02b      	b.n	8006926 <HAL_GPIO_Init+0x43e>
 80068ce:	230a      	movs	r3, #10
 80068d0:	e029      	b.n	8006926 <HAL_GPIO_Init+0x43e>
 80068d2:	2307      	movs	r3, #7
 80068d4:	e027      	b.n	8006926 <HAL_GPIO_Init+0x43e>
 80068d6:	2306      	movs	r3, #6
 80068d8:	e025      	b.n	8006926 <HAL_GPIO_Init+0x43e>
 80068da:	2305      	movs	r3, #5
 80068dc:	e023      	b.n	8006926 <HAL_GPIO_Init+0x43e>
 80068de:	2304      	movs	r3, #4
 80068e0:	e021      	b.n	8006926 <HAL_GPIO_Init+0x43e>
 80068e2:	2303      	movs	r3, #3
 80068e4:	e01f      	b.n	8006926 <HAL_GPIO_Init+0x43e>
 80068e6:	2302      	movs	r3, #2
 80068e8:	e01d      	b.n	8006926 <HAL_GPIO_Init+0x43e>
 80068ea:	bf00      	nop
 80068ec:	0802153c 	.word	0x0802153c
 80068f0:	58020000 	.word	0x58020000
 80068f4:	58020400 	.word	0x58020400
 80068f8:	58020800 	.word	0x58020800
 80068fc:	58020c00 	.word	0x58020c00
 8006900:	58021000 	.word	0x58021000
 8006904:	58021400 	.word	0x58021400
 8006908:	58021800 	.word	0x58021800
 800690c:	58021c00 	.word	0x58021c00
 8006910:	58022400 	.word	0x58022400
 8006914:	58022800 	.word	0x58022800
 8006918:	58024400 	.word	0x58024400
 800691c:	58000400 	.word	0x58000400
 8006920:	2301      	movs	r3, #1
 8006922:	e000      	b.n	8006926 <HAL_GPIO_Init+0x43e>
 8006924:	2300      	movs	r3, #0
 8006926:	69fa      	ldr	r2, [r7, #28]
 8006928:	f002 0203 	and.w	r2, r2, #3
 800692c:	0092      	lsls	r2, r2, #2
 800692e:	4093      	lsls	r3, r2
 8006930:	69ba      	ldr	r2, [r7, #24]
 8006932:	4313      	orrs	r3, r2
 8006934:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006936:	4937      	ldr	r1, [pc, #220]	@ (8006a14 <HAL_GPIO_Init+0x52c>)
 8006938:	69fb      	ldr	r3, [r7, #28]
 800693a:	089b      	lsrs	r3, r3, #2
 800693c:	3302      	adds	r3, #2
 800693e:	69ba      	ldr	r2, [r7, #24]
 8006940:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006944:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800694c:	693b      	ldr	r3, [r7, #16]
 800694e:	43db      	mvns	r3, r3
 8006950:	69ba      	ldr	r2, [r7, #24]
 8006952:	4013      	ands	r3, r2
 8006954:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	685b      	ldr	r3, [r3, #4]
 800695a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800695e:	2b00      	cmp	r3, #0
 8006960:	d003      	beq.n	800696a <HAL_GPIO_Init+0x482>
        {
          temp |= iocurrent;
 8006962:	69ba      	ldr	r2, [r7, #24]
 8006964:	693b      	ldr	r3, [r7, #16]
 8006966:	4313      	orrs	r3, r2
 8006968:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800696a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800696e:	69bb      	ldr	r3, [r7, #24]
 8006970:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006972:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006976:	685b      	ldr	r3, [r3, #4]
 8006978:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800697a:	693b      	ldr	r3, [r7, #16]
 800697c:	43db      	mvns	r3, r3
 800697e:	69ba      	ldr	r2, [r7, #24]
 8006980:	4013      	ands	r3, r2
 8006982:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	685b      	ldr	r3, [r3, #4]
 8006988:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800698c:	2b00      	cmp	r3, #0
 800698e:	d003      	beq.n	8006998 <HAL_GPIO_Init+0x4b0>
        {
          temp |= iocurrent;
 8006990:	69ba      	ldr	r2, [r7, #24]
 8006992:	693b      	ldr	r3, [r7, #16]
 8006994:	4313      	orrs	r3, r2
 8006996:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006998:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800699c:	69bb      	ldr	r3, [r7, #24]
 800699e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80069a0:	697b      	ldr	r3, [r7, #20]
 80069a2:	685b      	ldr	r3, [r3, #4]
 80069a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80069a6:	693b      	ldr	r3, [r7, #16]
 80069a8:	43db      	mvns	r3, r3
 80069aa:	69ba      	ldr	r2, [r7, #24]
 80069ac:	4013      	ands	r3, r2
 80069ae:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	685b      	ldr	r3, [r3, #4]
 80069b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d003      	beq.n	80069c4 <HAL_GPIO_Init+0x4dc>
        {
          temp |= iocurrent;
 80069bc:	69ba      	ldr	r2, [r7, #24]
 80069be:	693b      	ldr	r3, [r7, #16]
 80069c0:	4313      	orrs	r3, r2
 80069c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80069c4:	697b      	ldr	r3, [r7, #20]
 80069c6:	69ba      	ldr	r2, [r7, #24]
 80069c8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80069ca:	697b      	ldr	r3, [r7, #20]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80069d0:	693b      	ldr	r3, [r7, #16]
 80069d2:	43db      	mvns	r3, r3
 80069d4:	69ba      	ldr	r2, [r7, #24]
 80069d6:	4013      	ands	r3, r2
 80069d8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	685b      	ldr	r3, [r3, #4]
 80069de:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d003      	beq.n	80069ee <HAL_GPIO_Init+0x506>
        {
          temp |= iocurrent;
 80069e6:	69ba      	ldr	r2, [r7, #24]
 80069e8:	693b      	ldr	r3, [r7, #16]
 80069ea:	4313      	orrs	r3, r2
 80069ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80069ee:	697b      	ldr	r3, [r7, #20]
 80069f0:	69ba      	ldr	r2, [r7, #24]
 80069f2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80069f4:	69fb      	ldr	r3, [r7, #28]
 80069f6:	3301      	adds	r3, #1
 80069f8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	681a      	ldr	r2, [r3, #0]
 80069fe:	69fb      	ldr	r3, [r7, #28]
 8006a00:	fa22 f303 	lsr.w	r3, r2, r3
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	f47f ae11 	bne.w	800662c <HAL_GPIO_Init+0x144>
  }
}
 8006a0a:	bf00      	nop
 8006a0c:	bf00      	nop
 8006a0e:	3720      	adds	r7, #32
 8006a10:	46bd      	mov	sp, r7
 8006a12:	bd80      	pop	{r7, pc}
 8006a14:	58000400 	.word	0x58000400

08006a18 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b084      	sub	sp, #16
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d101      	bne.n	8006a2a <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8006a26:	2301      	movs	r3, #1
 8006a28:	e07e      	b.n	8006b28 <HAL_IWDG_Init+0x110>
  }

  /* Check the parameters */
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	4a40      	ldr	r2, [pc, #256]	@ (8006b30 <HAL_IWDG_Init+0x118>)
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d003      	beq.n	8006a3c <HAL_IWDG_Init+0x24>
 8006a34:	21b7      	movs	r1, #183	@ 0xb7
 8006a36:	483f      	ldr	r0, [pc, #252]	@ (8006b34 <HAL_IWDG_Init+0x11c>)
 8006a38:	f7fb fcc4 	bl	80023c4 <assert_failed>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	685b      	ldr	r3, [r3, #4]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d01b      	beq.n	8006a7c <HAL_IWDG_Init+0x64>
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	685b      	ldr	r3, [r3, #4]
 8006a48:	2b01      	cmp	r3, #1
 8006a4a:	d017      	beq.n	8006a7c <HAL_IWDG_Init+0x64>
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	685b      	ldr	r3, [r3, #4]
 8006a50:	2b02      	cmp	r3, #2
 8006a52:	d013      	beq.n	8006a7c <HAL_IWDG_Init+0x64>
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	685b      	ldr	r3, [r3, #4]
 8006a58:	2b03      	cmp	r3, #3
 8006a5a:	d00f      	beq.n	8006a7c <HAL_IWDG_Init+0x64>
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	685b      	ldr	r3, [r3, #4]
 8006a60:	2b04      	cmp	r3, #4
 8006a62:	d00b      	beq.n	8006a7c <HAL_IWDG_Init+0x64>
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	685b      	ldr	r3, [r3, #4]
 8006a68:	2b05      	cmp	r3, #5
 8006a6a:	d007      	beq.n	8006a7c <HAL_IWDG_Init+0x64>
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	685b      	ldr	r3, [r3, #4]
 8006a70:	2b06      	cmp	r3, #6
 8006a72:	d003      	beq.n	8006a7c <HAL_IWDG_Init+0x64>
 8006a74:	21b8      	movs	r1, #184	@ 0xb8
 8006a76:	482f      	ldr	r0, [pc, #188]	@ (8006b34 <HAL_IWDG_Init+0x11c>)
 8006a78:	f7fb fca4 	bl	80023c4 <assert_failed>
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	689b      	ldr	r3, [r3, #8]
 8006a80:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a84:	d303      	bcc.n	8006a8e <HAL_IWDG_Init+0x76>
 8006a86:	21b9      	movs	r1, #185	@ 0xb9
 8006a88:	482a      	ldr	r0, [pc, #168]	@ (8006b34 <HAL_IWDG_Init+0x11c>)
 8006a8a:	f7fb fc9b 	bl	80023c4 <assert_failed>
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	68db      	ldr	r3, [r3, #12]
 8006a92:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a96:	d303      	bcc.n	8006aa0 <HAL_IWDG_Init+0x88>
 8006a98:	21ba      	movs	r1, #186	@ 0xba
 8006a9a:	4826      	ldr	r0, [pc, #152]	@ (8006b34 <HAL_IWDG_Init+0x11c>)
 8006a9c:	f7fb fc92 	bl	80023c4 <assert_failed>

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f64c 42cc 	movw	r2, #52428	@ 0xcccc
 8006aa8:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f245 5255 	movw	r2, #21845	@ 0x5555
 8006ab2:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	687a      	ldr	r2, [r7, #4]
 8006aba:	6852      	ldr	r2, [r2, #4]
 8006abc:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	687a      	ldr	r2, [r7, #4]
 8006ac4:	6892      	ldr	r2, [r2, #8]
 8006ac6:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8006ac8:	f7fc fe18 	bl	80036fc <HAL_GetTick>
 8006acc:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8006ace:	e011      	b.n	8006af4 <HAL_IWDG_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8006ad0:	f7fc fe14 	bl	80036fc <HAL_GetTick>
 8006ad4:	4602      	mov	r2, r0
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	1ad3      	subs	r3, r2, r3
 8006ada:	f641 0201 	movw	r2, #6145	@ 0x1801
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d908      	bls.n	8006af4 <HAL_IWDG_Init+0xdc>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	68db      	ldr	r3, [r3, #12]
 8006ae8:	f003 0307 	and.w	r3, r3, #7
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d001      	beq.n	8006af4 <HAL_IWDG_Init+0xdc>
      {
        return HAL_TIMEOUT;
 8006af0:	2303      	movs	r3, #3
 8006af2:	e019      	b.n	8006b28 <HAL_IWDG_Init+0x110>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	68db      	ldr	r3, [r3, #12]
 8006afa:	f003 0307 	and.w	r3, r3, #7
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d1e6      	bne.n	8006ad0 <HAL_IWDG_Init+0xb8>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	691a      	ldr	r2, [r3, #16]
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	68db      	ldr	r3, [r3, #12]
 8006b0c:	429a      	cmp	r2, r3
 8006b0e:	d005      	beq.n	8006b1c <HAL_IWDG_Init+0x104>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	687a      	ldr	r2, [r7, #4]
 8006b16:	68d2      	ldr	r2, [r2, #12]
 8006b18:	611a      	str	r2, [r3, #16]
 8006b1a:	e004      	b.n	8006b26 <HAL_IWDG_Init+0x10e>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8006b24:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006b26:	2300      	movs	r3, #0
}
 8006b28:	4618      	mov	r0, r3
 8006b2a:	3710      	adds	r7, #16
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	bd80      	pop	{r7, pc}
 8006b30:	58004800 	.word	0x58004800
 8006b34:	08021578 	.word	0x08021578

08006b38 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8006b38:	b480      	push	{r7}
 8006b3a:	b083      	sub	sp, #12
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8006b48:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006b4a:	2300      	movs	r3, #0
}
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	370c      	adds	r7, #12
 8006b50:	46bd      	mov	sp, r7
 8006b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b56:	4770      	bx	lr

08006b58 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init(OSPI_HandleTypeDef *hospi)
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b086      	sub	sp, #24
 8006b5c:	af02      	add	r7, sp, #8
 8006b5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006b60:	2300      	movs	r3, #0
 8006b62:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8006b64:	f7fc fdca 	bl	80036fc <HAL_GetTick>
 8006b68:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d102      	bne.n	8006b76 <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8006b70:	2301      	movs	r3, #1
 8006b72:	73fb      	strb	r3, [r7, #15]
 8006b74:	e17b      	b.n	8006e6e <HAL_OSPI_Init+0x316>
    /* No error code can be set set as the handler is null */
  }
  else
  {
    /* Check the parameters of the initialization structure */
    assert_param(IS_OSPI_FIFO_THRESHOLD(hospi->Init.FifoThreshold));
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	685b      	ldr	r3, [r3, #4]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d003      	beq.n	8006b86 <HAL_OSPI_Init+0x2e>
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	685b      	ldr	r3, [r3, #4]
 8006b82:	2b20      	cmp	r3, #32
 8006b84:	d904      	bls.n	8006b90 <HAL_OSPI_Init+0x38>
 8006b86:	f44f 71b6 	mov.w	r1, #364	@ 0x16c
 8006b8a:	4893      	ldr	r0, [pc, #588]	@ (8006dd8 <HAL_OSPI_Init+0x280>)
 8006b8c:	f7fb fc1a 	bl	80023c4 <assert_failed>
    assert_param(IS_OSPI_DUALQUAD_MODE(hospi->Init.DualQuad));
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	689b      	ldr	r3, [r3, #8]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d008      	beq.n	8006baa <HAL_OSPI_Init+0x52>
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	689b      	ldr	r3, [r3, #8]
 8006b9c:	2b40      	cmp	r3, #64	@ 0x40
 8006b9e:	d004      	beq.n	8006baa <HAL_OSPI_Init+0x52>
 8006ba0:	f240 116d 	movw	r1, #365	@ 0x16d
 8006ba4:	488c      	ldr	r0, [pc, #560]	@ (8006dd8 <HAL_OSPI_Init+0x280>)
 8006ba6:	f7fb fc0d 	bl	80023c4 <assert_failed>
    assert_param(IS_OSPI_MEMORY_TYPE(hospi->Init.MemoryType));
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	68db      	ldr	r3, [r3, #12]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d018      	beq.n	8006be4 <HAL_OSPI_Init+0x8c>
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	68db      	ldr	r3, [r3, #12]
 8006bb6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006bba:	d013      	beq.n	8006be4 <HAL_OSPI_Init+0x8c>
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	68db      	ldr	r3, [r3, #12]
 8006bc0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006bc4:	d00e      	beq.n	8006be4 <HAL_OSPI_Init+0x8c>
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	68db      	ldr	r3, [r3, #12]
 8006bca:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006bce:	d009      	beq.n	8006be4 <HAL_OSPI_Init+0x8c>
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	68db      	ldr	r3, [r3, #12]
 8006bd4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006bd8:	d004      	beq.n	8006be4 <HAL_OSPI_Init+0x8c>
 8006bda:	f44f 71b7 	mov.w	r1, #366	@ 0x16e
 8006bde:	487e      	ldr	r0, [pc, #504]	@ (8006dd8 <HAL_OSPI_Init+0x280>)
 8006be0:	f7fb fbf0 	bl	80023c4 <assert_failed>
    assert_param(IS_OSPI_DEVICE_SIZE(hospi->Init.DeviceSize));
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	691b      	ldr	r3, [r3, #16]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d003      	beq.n	8006bf4 <HAL_OSPI_Init+0x9c>
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	691b      	ldr	r3, [r3, #16]
 8006bf0:	2b20      	cmp	r3, #32
 8006bf2:	d904      	bls.n	8006bfe <HAL_OSPI_Init+0xa6>
 8006bf4:	f240 116f 	movw	r1, #367	@ 0x16f
 8006bf8:	4877      	ldr	r0, [pc, #476]	@ (8006dd8 <HAL_OSPI_Init+0x280>)
 8006bfa:	f7fb fbe3 	bl	80023c4 <assert_failed>
    assert_param(IS_OSPI_CS_HIGH_TIME(hospi->Init.ChipSelectHighTime));
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	695b      	ldr	r3, [r3, #20]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d003      	beq.n	8006c0e <HAL_OSPI_Init+0xb6>
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	695b      	ldr	r3, [r3, #20]
 8006c0a:	2b08      	cmp	r3, #8
 8006c0c:	d904      	bls.n	8006c18 <HAL_OSPI_Init+0xc0>
 8006c0e:	f44f 71b8 	mov.w	r1, #368	@ 0x170
 8006c12:	4871      	ldr	r0, [pc, #452]	@ (8006dd8 <HAL_OSPI_Init+0x280>)
 8006c14:	f7fb fbd6 	bl	80023c4 <assert_failed>
    assert_param(IS_OSPI_FREE_RUN_CLK(hospi->Init.FreeRunningClock));
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	699b      	ldr	r3, [r3, #24]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d008      	beq.n	8006c32 <HAL_OSPI_Init+0xda>
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	699b      	ldr	r3, [r3, #24]
 8006c24:	2b02      	cmp	r3, #2
 8006c26:	d004      	beq.n	8006c32 <HAL_OSPI_Init+0xda>
 8006c28:	f240 1171 	movw	r1, #369	@ 0x171
 8006c2c:	486a      	ldr	r0, [pc, #424]	@ (8006dd8 <HAL_OSPI_Init+0x280>)
 8006c2e:	f7fb fbc9 	bl	80023c4 <assert_failed>
    assert_param(IS_OSPI_CLOCK_MODE(hospi->Init.ClockMode));
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	69db      	ldr	r3, [r3, #28]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d008      	beq.n	8006c4c <HAL_OSPI_Init+0xf4>
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	69db      	ldr	r3, [r3, #28]
 8006c3e:	2b01      	cmp	r3, #1
 8006c40:	d004      	beq.n	8006c4c <HAL_OSPI_Init+0xf4>
 8006c42:	f44f 71b9 	mov.w	r1, #370	@ 0x172
 8006c46:	4864      	ldr	r0, [pc, #400]	@ (8006dd8 <HAL_OSPI_Init+0x280>)
 8006c48:	f7fb fbbc 	bl	80023c4 <assert_failed>
    assert_param(IS_OSPI_WRAP_SIZE(hospi->Init.WrapSize));
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	6a1b      	ldr	r3, [r3, #32]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d018      	beq.n	8006c86 <HAL_OSPI_Init+0x12e>
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	6a1b      	ldr	r3, [r3, #32]
 8006c58:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006c5c:	d013      	beq.n	8006c86 <HAL_OSPI_Init+0x12e>
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6a1b      	ldr	r3, [r3, #32]
 8006c62:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006c66:	d00e      	beq.n	8006c86 <HAL_OSPI_Init+0x12e>
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	6a1b      	ldr	r3, [r3, #32]
 8006c6c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006c70:	d009      	beq.n	8006c86 <HAL_OSPI_Init+0x12e>
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6a1b      	ldr	r3, [r3, #32]
 8006c76:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006c7a:	d004      	beq.n	8006c86 <HAL_OSPI_Init+0x12e>
 8006c7c:	f240 1173 	movw	r1, #371	@ 0x173
 8006c80:	4855      	ldr	r0, [pc, #340]	@ (8006dd8 <HAL_OSPI_Init+0x280>)
 8006c82:	f7fb fb9f 	bl	80023c4 <assert_failed>
    assert_param(IS_OSPI_CLK_PRESCALER(hospi->Init.ClockPrescaler));
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d004      	beq.n	8006c98 <HAL_OSPI_Init+0x140>
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c92:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006c96:	d904      	bls.n	8006ca2 <HAL_OSPI_Init+0x14a>
 8006c98:	f44f 71ba 	mov.w	r1, #372	@ 0x174
 8006c9c:	484e      	ldr	r0, [pc, #312]	@ (8006dd8 <HAL_OSPI_Init+0x280>)
 8006c9e:	f7fb fb91 	bl	80023c4 <assert_failed>
    assert_param(IS_OSPI_SAMPLE_SHIFTING(hospi->Init.SampleShifting));
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d009      	beq.n	8006cbe <HAL_OSPI_Init+0x166>
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006cb2:	d004      	beq.n	8006cbe <HAL_OSPI_Init+0x166>
 8006cb4:	f240 1175 	movw	r1, #373	@ 0x175
 8006cb8:	4847      	ldr	r0, [pc, #284]	@ (8006dd8 <HAL_OSPI_Init+0x280>)
 8006cba:	f7fb fb83 	bl	80023c4 <assert_failed>
    assert_param(IS_OSPI_DHQC(hospi->Init.DelayHoldQuarterCycle));
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d009      	beq.n	8006cda <HAL_OSPI_Init+0x182>
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006cce:	d004      	beq.n	8006cda <HAL_OSPI_Init+0x182>
 8006cd0:	f44f 71bb 	mov.w	r1, #374	@ 0x176
 8006cd4:	4840      	ldr	r0, [pc, #256]	@ (8006dd8 <HAL_OSPI_Init+0x280>)
 8006cd6:	f7fb fb75 	bl	80023c4 <assert_failed>
    assert_param(IS_OSPI_CS_BOUNDARY(hospi->Init.ChipSelectBoundary));
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cde:	2b1f      	cmp	r3, #31
 8006ce0:	d904      	bls.n	8006cec <HAL_OSPI_Init+0x194>
 8006ce2:	f240 1177 	movw	r1, #375	@ 0x177
 8006ce6:	483c      	ldr	r0, [pc, #240]	@ (8006dd8 <HAL_OSPI_Init+0x280>)
 8006ce8:	f7fb fb6c 	bl	80023c4 <assert_failed>
    assert_param(IS_OSPI_DLYBYP(hospi->Init.DelayBlockBypass));
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d008      	beq.n	8006d06 <HAL_OSPI_Init+0x1ae>
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006cf8:	2b08      	cmp	r3, #8
 8006cfa:	d004      	beq.n	8006d06 <HAL_OSPI_Init+0x1ae>
 8006cfc:	f44f 71bc 	mov.w	r1, #376	@ 0x178
 8006d00:	4835      	ldr	r0, [pc, #212]	@ (8006dd8 <HAL_OSPI_Init+0x280>)
 8006d02:	f7fb fb5f 	bl	80023c4 <assert_failed>
    assert_param(IS_OSPI_MAXTRAN(hospi->Init.MaxTran));
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d0a:	2bff      	cmp	r3, #255	@ 0xff
 8006d0c:	d904      	bls.n	8006d18 <HAL_OSPI_Init+0x1c0>
 8006d0e:	f240 1179 	movw	r1, #377	@ 0x179
 8006d12:	4831      	ldr	r0, [pc, #196]	@ (8006dd8 <HAL_OSPI_Init+0x280>)
 8006d14:	f7fb fb56 	bl	80023c4 <assert_failed>

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	f040 80a3 	bne.w	8006e6e <HAL_OSPI_Init+0x316>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 8006d28:	6878      	ldr	r0, [r7, #4]
 8006d2a:	f7fb fc1d 	bl	8002568 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 8006d2e:	f241 3188 	movw	r1, #5000	@ 0x1388
 8006d32:	6878      	ldr	r0, [r7, #4]
 8006d34:	f000 f8a0 	bl	8006e78 <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	689a      	ldr	r2, [r3, #8]
 8006d3e:	4b27      	ldr	r3, [pc, #156]	@ (8006ddc <HAL_OSPI_Init+0x284>)
 8006d40:	4013      	ands	r3, r2
 8006d42:	687a      	ldr	r2, [r7, #4]
 8006d44:	68d1      	ldr	r1, [r2, #12]
 8006d46:	687a      	ldr	r2, [r7, #4]
 8006d48:	6912      	ldr	r2, [r2, #16]
 8006d4a:	3a01      	subs	r2, #1
 8006d4c:	0412      	lsls	r2, r2, #16
 8006d4e:	4311      	orrs	r1, r2
 8006d50:	687a      	ldr	r2, [r7, #4]
 8006d52:	6952      	ldr	r2, [r2, #20]
 8006d54:	3a01      	subs	r2, #1
 8006d56:	0212      	lsls	r2, r2, #8
 8006d58:	4311      	orrs	r1, r2
 8006d5a:	687a      	ldr	r2, [r7, #4]
 8006d5c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006d5e:	4311      	orrs	r1, r2
 8006d60:	687a      	ldr	r2, [r7, #4]
 8006d62:	69d2      	ldr	r2, [r2, #28]
 8006d64:	4311      	orrs	r1, r2
 8006d66:	687a      	ldr	r2, [r7, #4]
 8006d68:	6812      	ldr	r2, [r2, #0]
 8006d6a:	430b      	orrs	r3, r1
 8006d6c:	6093      	str	r3, [r2, #8]
                 (hospi->Init.MemoryType | ((hospi->Init.DeviceSize - 1U) << OCTOSPI_DCR1_DEVSIZE_Pos) |
                  ((hospi->Init.ChipSelectHighTime - 1U) << OCTOSPI_DCR1_CSHT_Pos) |
                  hospi->Init.DelayBlockBypass | hospi->Init.ClockMode));

      /* Configure wrap size */
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	68db      	ldr	r3, [r3, #12]
 8006d74:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	6a1a      	ldr	r2, [r3, #32]
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	430a      	orrs	r2, r1
 8006d82:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d88:	0419      	lsls	r1, r3, #16
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	430a      	orrs	r2, r1
 8006d94:	611a      	str	r2, [r3, #16]

      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	687a      	ldr	r2, [r7, #4]
 8006d9c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006d9e:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	685b      	ldr	r3, [r3, #4]
 8006dae:	3b01      	subs	r3, #1
 8006db0:	021a      	lsls	r2, r3, #8
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	430a      	orrs	r2, r1
 8006db8:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006dbe:	9300      	str	r3, [sp, #0]
 8006dc0:	68bb      	ldr	r3, [r7, #8]
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	2120      	movs	r1, #32
 8006dc6:	6878      	ldr	r0, [r7, #4]
 8006dc8:	f000 fe58 	bl	8007a7c <OSPI_WaitFlagStateUntilTimeout>
 8006dcc:	4603      	mov	r3, r0
 8006dce:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8006dd0:	7bfb      	ldrb	r3, [r7, #15]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d14b      	bne.n	8006e6e <HAL_OSPI_Init+0x316>
 8006dd6:	e003      	b.n	8006de0 <HAL_OSPI_Init+0x288>
 8006dd8:	080215b4 	.word	0x080215b4
 8006ddc:	f8e0f8f4 	.word	0xf8e0f8f4
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	68db      	ldr	r3, [r3, #12]
 8006de6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dee:	1e5a      	subs	r2, r3, #1
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	430a      	orrs	r2, r1
 8006df6:	60da      	str	r2, [r3, #12]
                   ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	689a      	ldr	r2, [r3, #8]
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	430a      	orrs	r2, r1
 8006e0c:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8006e16:	f023 41a0 	bic.w	r1, r3, #1342177280	@ 0x50000000
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e22:	431a      	orrs	r2, r3
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	430a      	orrs	r2, r1
 8006e2a:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
                   (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	681a      	ldr	r2, [r3, #0]
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f042 0201 	orr.w	r2, r2, #1
 8006e3c:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	699b      	ldr	r3, [r3, #24]
 8006e42:	2b02      	cmp	r3, #2
 8006e44:	d107      	bne.n	8006e56 <HAL_OSPI_Init+0x2fe>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	689a      	ldr	r2, [r3, #8]
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f042 0202 	orr.w	r2, r2, #2
 8006e54:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	68db      	ldr	r3, [r3, #12]
 8006e5a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006e5e:	d103      	bne.n	8006e68 <HAL_OSPI_Init+0x310>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2201      	movs	r2, #1
 8006e64:	651a      	str	r2, [r3, #80]	@ 0x50
 8006e66:	e002      	b.n	8006e6e <HAL_OSPI_Init+0x316>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2202      	movs	r2, #2
 8006e6c:	651a      	str	r2, [r3, #80]	@ 0x50
      }
    }
  }

  /* Return function status */
  return status;
 8006e6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e70:	4618      	mov	r0, r3
 8006e72:	3710      	adds	r7, #16
 8006e74:	46bd      	mov	sp, r7
 8006e76:	bd80      	pop	{r7, pc}

08006e78 <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 8006e78:	b480      	push	{r7}
 8006e7a:	b083      	sub	sp, #12
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
 8006e80:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	683a      	ldr	r2, [r7, #0]
 8006e86:	659a      	str	r2, [r3, #88]	@ 0x58
  return HAL_OK;
 8006e88:	2300      	movs	r3, #0
}
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	370c      	adds	r7, #12
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e94:	4770      	bx	lr
	...

08006e98 <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b094      	sub	sp, #80	@ 0x50
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	60f8      	str	r0, [r7, #12]
 8006ea0:	60b9      	str	r1, [r7, #8]
 8006ea2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 8006eaa:	2300      	movs	r3, #0
 8006eac:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46

  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);

  /* Check the parameters of the OctoSPI IO Manager configuration structure */
  assert_param(IS_OSPIM_PORT(cfg->ClkPort));
 8006eb0:	68bb      	ldr	r3, [r7, #8]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d003      	beq.n	8006ec0 <HAL_OSPIM_Config+0x28>
 8006eb8:	68bb      	ldr	r3, [r7, #8]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	2b08      	cmp	r3, #8
 8006ebe:	d904      	bls.n	8006eca <HAL_OSPIM_Config+0x32>
 8006ec0:	f640 11c1 	movw	r1, #2497	@ 0x9c1
 8006ec4:	4876      	ldr	r0, [pc, #472]	@ (80070a0 <HAL_OSPIM_Config+0x208>)
 8006ec6:	f7fb fa7d 	bl	80023c4 <assert_failed>
  assert_param(IS_OSPIM_DQS_PORT(cfg->DQSPort));
 8006eca:	68bb      	ldr	r3, [r7, #8]
 8006ecc:	685b      	ldr	r3, [r3, #4]
 8006ece:	2b08      	cmp	r3, #8
 8006ed0:	d904      	bls.n	8006edc <HAL_OSPIM_Config+0x44>
 8006ed2:	f640 11c2 	movw	r1, #2498	@ 0x9c2
 8006ed6:	4872      	ldr	r0, [pc, #456]	@ (80070a0 <HAL_OSPIM_Config+0x208>)
 8006ed8:	f7fb fa74 	bl	80023c4 <assert_failed>
  assert_param(IS_OSPIM_PORT(cfg->NCSPort));
 8006edc:	68bb      	ldr	r3, [r7, #8]
 8006ede:	689b      	ldr	r3, [r3, #8]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d003      	beq.n	8006eec <HAL_OSPIM_Config+0x54>
 8006ee4:	68bb      	ldr	r3, [r7, #8]
 8006ee6:	689b      	ldr	r3, [r3, #8]
 8006ee8:	2b08      	cmp	r3, #8
 8006eea:	d904      	bls.n	8006ef6 <HAL_OSPIM_Config+0x5e>
 8006eec:	f640 11c3 	movw	r1, #2499	@ 0x9c3
 8006ef0:	486b      	ldr	r0, [pc, #428]	@ (80070a0 <HAL_OSPIM_Config+0x208>)
 8006ef2:	f7fb fa67 	bl	80023c4 <assert_failed>
  assert_param(IS_OSPIM_IO_PORT(cfg->IOLowPort));
 8006ef6:	68bb      	ldr	r3, [r7, #8]
 8006ef8:	68db      	ldr	r3, [r3, #12]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d054      	beq.n	8006fa8 <HAL_OSPIM_Config+0x110>
 8006efe:	68bb      	ldr	r3, [r7, #8]
 8006f00:	68db      	ldr	r3, [r3, #12]
 8006f02:	f1b3 1f01 	cmp.w	r3, #65537	@ 0x10001
 8006f06:	d04f      	beq.n	8006fa8 <HAL_OSPIM_Config+0x110>
 8006f08:	68bb      	ldr	r3, [r7, #8]
 8006f0a:	68db      	ldr	r3, [r3, #12]
 8006f0c:	4a65      	ldr	r2, [pc, #404]	@ (80070a4 <HAL_OSPIM_Config+0x20c>)
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d04a      	beq.n	8006fa8 <HAL_OSPIM_Config+0x110>
 8006f12:	68bb      	ldr	r3, [r7, #8]
 8006f14:	68db      	ldr	r3, [r3, #12]
 8006f16:	4a64      	ldr	r2, [pc, #400]	@ (80070a8 <HAL_OSPIM_Config+0x210>)
 8006f18:	4293      	cmp	r3, r2
 8006f1a:	d045      	beq.n	8006fa8 <HAL_OSPIM_Config+0x110>
 8006f1c:	68bb      	ldr	r3, [r7, #8]
 8006f1e:	68db      	ldr	r3, [r3, #12]
 8006f20:	4a62      	ldr	r2, [pc, #392]	@ (80070ac <HAL_OSPIM_Config+0x214>)
 8006f22:	4293      	cmp	r3, r2
 8006f24:	d040      	beq.n	8006fa8 <HAL_OSPIM_Config+0x110>
 8006f26:	68bb      	ldr	r3, [r7, #8]
 8006f28:	68db      	ldr	r3, [r3, #12]
 8006f2a:	4a61      	ldr	r2, [pc, #388]	@ (80070b0 <HAL_OSPIM_Config+0x218>)
 8006f2c:	4293      	cmp	r3, r2
 8006f2e:	d03b      	beq.n	8006fa8 <HAL_OSPIM_Config+0x110>
 8006f30:	68bb      	ldr	r3, [r7, #8]
 8006f32:	68db      	ldr	r3, [r3, #12]
 8006f34:	4a5f      	ldr	r2, [pc, #380]	@ (80070b4 <HAL_OSPIM_Config+0x21c>)
 8006f36:	4293      	cmp	r3, r2
 8006f38:	d036      	beq.n	8006fa8 <HAL_OSPIM_Config+0x110>
 8006f3a:	68bb      	ldr	r3, [r7, #8]
 8006f3c:	68db      	ldr	r3, [r3, #12]
 8006f3e:	4a5e      	ldr	r2, [pc, #376]	@ (80070b8 <HAL_OSPIM_Config+0x220>)
 8006f40:	4293      	cmp	r3, r2
 8006f42:	d031      	beq.n	8006fa8 <HAL_OSPIM_Config+0x110>
 8006f44:	68bb      	ldr	r3, [r7, #8]
 8006f46:	68db      	ldr	r3, [r3, #12]
 8006f48:	4a5c      	ldr	r2, [pc, #368]	@ (80070bc <HAL_OSPIM_Config+0x224>)
 8006f4a:	4293      	cmp	r3, r2
 8006f4c:	d02c      	beq.n	8006fa8 <HAL_OSPIM_Config+0x110>
 8006f4e:	68bb      	ldr	r3, [r7, #8]
 8006f50:	68db      	ldr	r3, [r3, #12]
 8006f52:	4a5b      	ldr	r2, [pc, #364]	@ (80070c0 <HAL_OSPIM_Config+0x228>)
 8006f54:	4293      	cmp	r3, r2
 8006f56:	d027      	beq.n	8006fa8 <HAL_OSPIM_Config+0x110>
 8006f58:	68bb      	ldr	r3, [r7, #8]
 8006f5a:	68db      	ldr	r3, [r3, #12]
 8006f5c:	4a59      	ldr	r2, [pc, #356]	@ (80070c4 <HAL_OSPIM_Config+0x22c>)
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d022      	beq.n	8006fa8 <HAL_OSPIM_Config+0x110>
 8006f62:	68bb      	ldr	r3, [r7, #8]
 8006f64:	68db      	ldr	r3, [r3, #12]
 8006f66:	4a58      	ldr	r2, [pc, #352]	@ (80070c8 <HAL_OSPIM_Config+0x230>)
 8006f68:	4293      	cmp	r3, r2
 8006f6a:	d01d      	beq.n	8006fa8 <HAL_OSPIM_Config+0x110>
 8006f6c:	68bb      	ldr	r3, [r7, #8]
 8006f6e:	68db      	ldr	r3, [r3, #12]
 8006f70:	4a56      	ldr	r2, [pc, #344]	@ (80070cc <HAL_OSPIM_Config+0x234>)
 8006f72:	4293      	cmp	r3, r2
 8006f74:	d018      	beq.n	8006fa8 <HAL_OSPIM_Config+0x110>
 8006f76:	68bb      	ldr	r3, [r7, #8]
 8006f78:	68db      	ldr	r3, [r3, #12]
 8006f7a:	4a55      	ldr	r2, [pc, #340]	@ (80070d0 <HAL_OSPIM_Config+0x238>)
 8006f7c:	4293      	cmp	r3, r2
 8006f7e:	d013      	beq.n	8006fa8 <HAL_OSPIM_Config+0x110>
 8006f80:	68bb      	ldr	r3, [r7, #8]
 8006f82:	68db      	ldr	r3, [r3, #12]
 8006f84:	4a53      	ldr	r2, [pc, #332]	@ (80070d4 <HAL_OSPIM_Config+0x23c>)
 8006f86:	4293      	cmp	r3, r2
 8006f88:	d00e      	beq.n	8006fa8 <HAL_OSPIM_Config+0x110>
 8006f8a:	68bb      	ldr	r3, [r7, #8]
 8006f8c:	68db      	ldr	r3, [r3, #12]
 8006f8e:	4a52      	ldr	r2, [pc, #328]	@ (80070d8 <HAL_OSPIM_Config+0x240>)
 8006f90:	4293      	cmp	r3, r2
 8006f92:	d009      	beq.n	8006fa8 <HAL_OSPIM_Config+0x110>
 8006f94:	68bb      	ldr	r3, [r7, #8]
 8006f96:	68db      	ldr	r3, [r3, #12]
 8006f98:	4a50      	ldr	r2, [pc, #320]	@ (80070dc <HAL_OSPIM_Config+0x244>)
 8006f9a:	4293      	cmp	r3, r2
 8006f9c:	d004      	beq.n	8006fa8 <HAL_OSPIM_Config+0x110>
 8006f9e:	f640 11c4 	movw	r1, #2500	@ 0x9c4
 8006fa2:	483f      	ldr	r0, [pc, #252]	@ (80070a0 <HAL_OSPIM_Config+0x208>)
 8006fa4:	f7fb fa0e 	bl	80023c4 <assert_failed>
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));
 8006fa8:	68bb      	ldr	r3, [r7, #8]
 8006faa:	691b      	ldr	r3, [r3, #16]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d054      	beq.n	800705a <HAL_OSPIM_Config+0x1c2>
 8006fb0:	68bb      	ldr	r3, [r7, #8]
 8006fb2:	691b      	ldr	r3, [r3, #16]
 8006fb4:	f1b3 1f01 	cmp.w	r3, #65537	@ 0x10001
 8006fb8:	d04f      	beq.n	800705a <HAL_OSPIM_Config+0x1c2>
 8006fba:	68bb      	ldr	r3, [r7, #8]
 8006fbc:	691b      	ldr	r3, [r3, #16]
 8006fbe:	4a39      	ldr	r2, [pc, #228]	@ (80070a4 <HAL_OSPIM_Config+0x20c>)
 8006fc0:	4293      	cmp	r3, r2
 8006fc2:	d04a      	beq.n	800705a <HAL_OSPIM_Config+0x1c2>
 8006fc4:	68bb      	ldr	r3, [r7, #8]
 8006fc6:	691b      	ldr	r3, [r3, #16]
 8006fc8:	4a37      	ldr	r2, [pc, #220]	@ (80070a8 <HAL_OSPIM_Config+0x210>)
 8006fca:	4293      	cmp	r3, r2
 8006fcc:	d045      	beq.n	800705a <HAL_OSPIM_Config+0x1c2>
 8006fce:	68bb      	ldr	r3, [r7, #8]
 8006fd0:	691b      	ldr	r3, [r3, #16]
 8006fd2:	4a36      	ldr	r2, [pc, #216]	@ (80070ac <HAL_OSPIM_Config+0x214>)
 8006fd4:	4293      	cmp	r3, r2
 8006fd6:	d040      	beq.n	800705a <HAL_OSPIM_Config+0x1c2>
 8006fd8:	68bb      	ldr	r3, [r7, #8]
 8006fda:	691b      	ldr	r3, [r3, #16]
 8006fdc:	4a34      	ldr	r2, [pc, #208]	@ (80070b0 <HAL_OSPIM_Config+0x218>)
 8006fde:	4293      	cmp	r3, r2
 8006fe0:	d03b      	beq.n	800705a <HAL_OSPIM_Config+0x1c2>
 8006fe2:	68bb      	ldr	r3, [r7, #8]
 8006fe4:	691b      	ldr	r3, [r3, #16]
 8006fe6:	4a33      	ldr	r2, [pc, #204]	@ (80070b4 <HAL_OSPIM_Config+0x21c>)
 8006fe8:	4293      	cmp	r3, r2
 8006fea:	d036      	beq.n	800705a <HAL_OSPIM_Config+0x1c2>
 8006fec:	68bb      	ldr	r3, [r7, #8]
 8006fee:	691b      	ldr	r3, [r3, #16]
 8006ff0:	4a31      	ldr	r2, [pc, #196]	@ (80070b8 <HAL_OSPIM_Config+0x220>)
 8006ff2:	4293      	cmp	r3, r2
 8006ff4:	d031      	beq.n	800705a <HAL_OSPIM_Config+0x1c2>
 8006ff6:	68bb      	ldr	r3, [r7, #8]
 8006ff8:	691b      	ldr	r3, [r3, #16]
 8006ffa:	4a30      	ldr	r2, [pc, #192]	@ (80070bc <HAL_OSPIM_Config+0x224>)
 8006ffc:	4293      	cmp	r3, r2
 8006ffe:	d02c      	beq.n	800705a <HAL_OSPIM_Config+0x1c2>
 8007000:	68bb      	ldr	r3, [r7, #8]
 8007002:	691b      	ldr	r3, [r3, #16]
 8007004:	4a2e      	ldr	r2, [pc, #184]	@ (80070c0 <HAL_OSPIM_Config+0x228>)
 8007006:	4293      	cmp	r3, r2
 8007008:	d027      	beq.n	800705a <HAL_OSPIM_Config+0x1c2>
 800700a:	68bb      	ldr	r3, [r7, #8]
 800700c:	691b      	ldr	r3, [r3, #16]
 800700e:	4a2d      	ldr	r2, [pc, #180]	@ (80070c4 <HAL_OSPIM_Config+0x22c>)
 8007010:	4293      	cmp	r3, r2
 8007012:	d022      	beq.n	800705a <HAL_OSPIM_Config+0x1c2>
 8007014:	68bb      	ldr	r3, [r7, #8]
 8007016:	691b      	ldr	r3, [r3, #16]
 8007018:	4a2b      	ldr	r2, [pc, #172]	@ (80070c8 <HAL_OSPIM_Config+0x230>)
 800701a:	4293      	cmp	r3, r2
 800701c:	d01d      	beq.n	800705a <HAL_OSPIM_Config+0x1c2>
 800701e:	68bb      	ldr	r3, [r7, #8]
 8007020:	691b      	ldr	r3, [r3, #16]
 8007022:	4a2a      	ldr	r2, [pc, #168]	@ (80070cc <HAL_OSPIM_Config+0x234>)
 8007024:	4293      	cmp	r3, r2
 8007026:	d018      	beq.n	800705a <HAL_OSPIM_Config+0x1c2>
 8007028:	68bb      	ldr	r3, [r7, #8]
 800702a:	691b      	ldr	r3, [r3, #16]
 800702c:	4a28      	ldr	r2, [pc, #160]	@ (80070d0 <HAL_OSPIM_Config+0x238>)
 800702e:	4293      	cmp	r3, r2
 8007030:	d013      	beq.n	800705a <HAL_OSPIM_Config+0x1c2>
 8007032:	68bb      	ldr	r3, [r7, #8]
 8007034:	691b      	ldr	r3, [r3, #16]
 8007036:	4a27      	ldr	r2, [pc, #156]	@ (80070d4 <HAL_OSPIM_Config+0x23c>)
 8007038:	4293      	cmp	r3, r2
 800703a:	d00e      	beq.n	800705a <HAL_OSPIM_Config+0x1c2>
 800703c:	68bb      	ldr	r3, [r7, #8]
 800703e:	691b      	ldr	r3, [r3, #16]
 8007040:	4a25      	ldr	r2, [pc, #148]	@ (80070d8 <HAL_OSPIM_Config+0x240>)
 8007042:	4293      	cmp	r3, r2
 8007044:	d009      	beq.n	800705a <HAL_OSPIM_Config+0x1c2>
 8007046:	68bb      	ldr	r3, [r7, #8]
 8007048:	691b      	ldr	r3, [r3, #16]
 800704a:	4a24      	ldr	r2, [pc, #144]	@ (80070dc <HAL_OSPIM_Config+0x244>)
 800704c:	4293      	cmp	r3, r2
 800704e:	d004      	beq.n	800705a <HAL_OSPIM_Config+0x1c2>
 8007050:	f640 11c5 	movw	r1, #2501	@ 0x9c5
 8007054:	4812      	ldr	r0, [pc, #72]	@ (80070a0 <HAL_OSPIM_Config+0x208>)
 8007056:	f7fb f9b5 	bl	80023c4 <assert_failed>
  assert_param(IS_OSPIM_REQ2ACKTIME(cfg->Req2AckTime));
 800705a:	68bb      	ldr	r3, [r7, #8]
 800705c:	695b      	ldr	r3, [r3, #20]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d004      	beq.n	800706c <HAL_OSPIM_Config+0x1d4>
 8007062:	68bb      	ldr	r3, [r7, #8]
 8007064:	695b      	ldr	r3, [r3, #20]
 8007066:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800706a:	d904      	bls.n	8007076 <HAL_OSPIM_Config+0x1de>
 800706c:	f640 11c6 	movw	r1, #2502	@ 0x9c6
 8007070:	480b      	ldr	r0, [pc, #44]	@ (80070a0 <HAL_OSPIM_Config+0x208>)
 8007072:	f7fb f9a7 	bl	80023c4 <assert_failed>

  if (hospi->Instance == OCTOSPI1)
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	4a19      	ldr	r2, [pc, #100]	@ (80070e0 <HAL_OSPIM_Config+0x248>)
 800707c:	4293      	cmp	r3, r2
 800707e:	d105      	bne.n	800708c <HAL_OSPIM_Config+0x1f4>
  {
    instance = 0U;
 8007080:	2300      	movs	r3, #0
 8007082:	64bb      	str	r3, [r7, #72]	@ 0x48
    other_instance = 1U;
 8007084:	2301      	movs	r3, #1
 8007086:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 800708a:	e004      	b.n	8007096 <HAL_OSPIM_Config+0x1fe>
  }
  else
  {
    instance = 1U;
 800708c:	2301      	movs	r3, #1
 800708e:	64bb      	str	r3, [r7, #72]	@ 0x48
    other_instance = 0U;
 8007090:	2300      	movs	r3, #0
 8007092:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8007096:	2300      	movs	r3, #0
 8007098:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800709c:	e040      	b.n	8007120 <HAL_OSPIM_Config+0x288>
 800709e:	bf00      	nop
 80070a0:	080215b4 	.word	0x080215b4
 80070a4:	01000001 	.word	0x01000001
 80070a8:	00010002 	.word	0x00010002
 80070ac:	01000002 	.word	0x01000002
 80070b0:	00010003 	.word	0x00010003
 80070b4:	01000003 	.word	0x01000003
 80070b8:	00010004 	.word	0x00010004
 80070bc:	01000004 	.word	0x01000004
 80070c0:	00010005 	.word	0x00010005
 80070c4:	01000005 	.word	0x01000005
 80070c8:	00010006 	.word	0x00010006
 80070cc:	01000006 	.word	0x01000006
 80070d0:	00010007 	.word	0x00010007
 80070d4:	01000007 	.word	0x01000007
 80070d8:	00010008 	.word	0x00010008
 80070dc:	01000008 	.word	0x01000008
 80070e0:	52005000 	.word	0x52005000
  {
    if (OSPIM_GetConfig(index + 1U, &(IOM_cfg[index])) != HAL_OK)
 80070e4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80070e8:	3301      	adds	r3, #1
 80070ea:	b2d8      	uxtb	r0, r3
 80070ec:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 80070f0:	f107 0114 	add.w	r1, r7, #20
 80070f4:	4613      	mov	r3, r2
 80070f6:	005b      	lsls	r3, r3, #1
 80070f8:	4413      	add	r3, r2
 80070fa:	00db      	lsls	r3, r3, #3
 80070fc:	440b      	add	r3, r1
 80070fe:	4619      	mov	r1, r3
 8007100:	f000 fcf4 	bl	8007aec <OSPIM_GetConfig>
 8007104:	4603      	mov	r3, r0
 8007106:	2b00      	cmp	r3, #0
 8007108:	d005      	beq.n	8007116 <HAL_OSPIM_Config+0x27e>
    {
      status = HAL_ERROR;
 800710a:	2301      	movs	r3, #1
 800710c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	2208      	movs	r2, #8
 8007114:	655a      	str	r2, [r3, #84]	@ 0x54
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8007116:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800711a:	3301      	adds	r3, #1
 800711c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8007120:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8007124:	2b01      	cmp	r3, #1
 8007126:	d9dd      	bls.n	80070e4 <HAL_OSPIM_Config+0x24c>
    }
  }

  if (status == HAL_OK)
 8007128:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800712c:	2b00      	cmp	r3, #0
 800712e:	f040 8499 	bne.w	8007a64 <HAL_OSPIM_Config+0xbcc>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 8007132:	4b81      	ldr	r3, [pc, #516]	@ (8007338 <HAL_OSPIM_Config+0x4a0>)
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	f003 0301 	and.w	r3, r3, #1
 800713a:	2b00      	cmp	r3, #0
 800713c:	d00b      	beq.n	8007156 <HAL_OSPIM_Config+0x2be>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 800713e:	4b7e      	ldr	r3, [pc, #504]	@ (8007338 <HAL_OSPIM_Config+0x4a0>)
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	4a7d      	ldr	r2, [pc, #500]	@ (8007338 <HAL_OSPIM_Config+0x4a0>)
 8007144:	f023 0301 	bic.w	r3, r3, #1
 8007148:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 800714a:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800714e:	f043 0301 	orr.w	r3, r3, #1
 8007152:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 8007156:	4b79      	ldr	r3, [pc, #484]	@ (800733c <HAL_OSPIM_Config+0x4a4>)
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f003 0301 	and.w	r3, r3, #1
 800715e:	2b00      	cmp	r3, #0
 8007160:	d00b      	beq.n	800717a <HAL_OSPIM_Config+0x2e2>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8007162:	4b76      	ldr	r3, [pc, #472]	@ (800733c <HAL_OSPIM_Config+0x4a4>)
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	4a75      	ldr	r2, [pc, #468]	@ (800733c <HAL_OSPIM_Config+0x4a4>)
 8007168:	f023 0301 	bic.w	r3, r3, #1
 800716c:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 800716e:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8007172:	f043 0302 	orr.w	r3, r3, #2
 8007176:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 800717a:	4971      	ldr	r1, [pc, #452]	@ (8007340 <HAL_OSPIM_Config+0x4a8>)
 800717c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800717e:	4613      	mov	r3, r2
 8007180:	005b      	lsls	r3, r3, #1
 8007182:	4413      	add	r3, r2
 8007184:	00db      	lsls	r3, r3, #3
 8007186:	3350      	adds	r3, #80	@ 0x50
 8007188:	443b      	add	r3, r7
 800718a:	3b34      	subs	r3, #52	@ 0x34
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	3b01      	subs	r3, #1
 8007190:	009b      	lsls	r3, r3, #2
 8007192:	440b      	add	r3, r1
 8007194:	6859      	ldr	r1, [r3, #4]
 8007196:	486a      	ldr	r0, [pc, #424]	@ (8007340 <HAL_OSPIM_Config+0x4a8>)
 8007198:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800719a:	4613      	mov	r3, r2
 800719c:	005b      	lsls	r3, r3, #1
 800719e:	4413      	add	r3, r2
 80071a0:	00db      	lsls	r3, r3, #3
 80071a2:	3350      	adds	r3, #80	@ 0x50
 80071a4:	443b      	add	r3, r7
 80071a6:	3b34      	subs	r3, #52	@ 0x34
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	3b01      	subs	r3, #1
 80071ac:	f421 7280 	bic.w	r2, r1, #256	@ 0x100
 80071b0:	009b      	lsls	r3, r3, #2
 80071b2:	4403      	add	r3, r0
 80071b4:	605a      	str	r2, [r3, #4]
    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 80071b6:	4b62      	ldr	r3, [pc, #392]	@ (8007340 <HAL_OSPIM_Config+0x4a8>)
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f003 0301 	and.w	r3, r3, #1
 80071be:	2b00      	cmp	r3, #0
 80071c0:	f000 80c0 	beq.w	8007344 <HAL_OSPIM_Config+0x4ac>
    {
      /* De-multiplexing should be performed */
      CLEAR_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 80071c4:	4b5e      	ldr	r3, [pc, #376]	@ (8007340 <HAL_OSPIM_Config+0x4a8>)
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	4a5d      	ldr	r2, [pc, #372]	@ (8007340 <HAL_OSPIM_Config+0x4a8>)
 80071ca:	f023 0301 	bic.w	r3, r3, #1
 80071ce:	6013      	str	r3, [r2, #0]

      if (other_instance == 1U)
 80071d0:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 80071d4:	2b01      	cmp	r3, #1
 80071d6:	f040 8162 	bne.w	800749e <HAL_OSPIM_Config+0x606>
      {
        SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKSRC);
 80071da:	4959      	ldr	r1, [pc, #356]	@ (8007340 <HAL_OSPIM_Config+0x4a8>)
 80071dc:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80071e0:	4613      	mov	r3, r2
 80071e2:	005b      	lsls	r3, r3, #1
 80071e4:	4413      	add	r3, r2
 80071e6:	00db      	lsls	r3, r3, #3
 80071e8:	3350      	adds	r3, #80	@ 0x50
 80071ea:	443b      	add	r3, r7
 80071ec:	3b3c      	subs	r3, #60	@ 0x3c
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	3b01      	subs	r3, #1
 80071f2:	009b      	lsls	r3, r3, #2
 80071f4:	440b      	add	r3, r1
 80071f6:	6859      	ldr	r1, [r3, #4]
 80071f8:	4851      	ldr	r0, [pc, #324]	@ (8007340 <HAL_OSPIM_Config+0x4a8>)
 80071fa:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80071fe:	4613      	mov	r3, r2
 8007200:	005b      	lsls	r3, r3, #1
 8007202:	4413      	add	r3, r2
 8007204:	00db      	lsls	r3, r3, #3
 8007206:	3350      	adds	r3, #80	@ 0x50
 8007208:	443b      	add	r3, r7
 800720a:	3b3c      	subs	r3, #60	@ 0x3c
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	3b01      	subs	r3, #1
 8007210:	f041 0202 	orr.w	r2, r1, #2
 8007214:	009b      	lsls	r3, r3, #2
 8007216:	4403      	add	r3, r0
 8007218:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 800721a:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800721e:	4613      	mov	r3, r2
 8007220:	005b      	lsls	r3, r3, #1
 8007222:	4413      	add	r3, r2
 8007224:	00db      	lsls	r3, r3, #3
 8007226:	3350      	adds	r3, #80	@ 0x50
 8007228:	443b      	add	r3, r7
 800722a:	3b38      	subs	r3, #56	@ 0x38
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d01f      	beq.n	8007272 <HAL_OSPIM_Config+0x3da>
        {
          SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSSRC);
 8007232:	4943      	ldr	r1, [pc, #268]	@ (8007340 <HAL_OSPIM_Config+0x4a8>)
 8007234:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8007238:	4613      	mov	r3, r2
 800723a:	005b      	lsls	r3, r3, #1
 800723c:	4413      	add	r3, r2
 800723e:	00db      	lsls	r3, r3, #3
 8007240:	3350      	adds	r3, #80	@ 0x50
 8007242:	443b      	add	r3, r7
 8007244:	3b38      	subs	r3, #56	@ 0x38
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	3b01      	subs	r3, #1
 800724a:	009b      	lsls	r3, r3, #2
 800724c:	440b      	add	r3, r1
 800724e:	6859      	ldr	r1, [r3, #4]
 8007250:	483b      	ldr	r0, [pc, #236]	@ (8007340 <HAL_OSPIM_Config+0x4a8>)
 8007252:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8007256:	4613      	mov	r3, r2
 8007258:	005b      	lsls	r3, r3, #1
 800725a:	4413      	add	r3, r2
 800725c:	00db      	lsls	r3, r3, #3
 800725e:	3350      	adds	r3, #80	@ 0x50
 8007260:	443b      	add	r3, r7
 8007262:	3b38      	subs	r3, #56	@ 0x38
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	3b01      	subs	r3, #1
 8007268:	f041 0220 	orr.w	r2, r1, #32
 800726c:	009b      	lsls	r3, r3, #2
 800726e:	4403      	add	r3, r0
 8007270:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8007272:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8007276:	4613      	mov	r3, r2
 8007278:	005b      	lsls	r3, r3, #1
 800727a:	4413      	add	r3, r2
 800727c:	00db      	lsls	r3, r3, #3
 800727e:	3350      	adds	r3, #80	@ 0x50
 8007280:	443b      	add	r3, r7
 8007282:	3b30      	subs	r3, #48	@ 0x30
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d023      	beq.n	80072d2 <HAL_OSPIM_Config+0x43a>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], \
 800728a:	492d      	ldr	r1, [pc, #180]	@ (8007340 <HAL_OSPIM_Config+0x4a8>)
 800728c:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8007290:	4613      	mov	r3, r2
 8007292:	005b      	lsls	r3, r3, #1
 8007294:	4413      	add	r3, r2
 8007296:	00db      	lsls	r3, r3, #3
 8007298:	3350      	adds	r3, #80	@ 0x50
 800729a:	443b      	add	r3, r7
 800729c:	3b30      	subs	r3, #48	@ 0x30
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	3b01      	subs	r3, #1
 80072a2:	f003 0301 	and.w	r3, r3, #1
 80072a6:	009b      	lsls	r3, r3, #2
 80072a8:	440b      	add	r3, r1
 80072aa:	6859      	ldr	r1, [r3, #4]
 80072ac:	4824      	ldr	r0, [pc, #144]	@ (8007340 <HAL_OSPIM_Config+0x4a8>)
 80072ae:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80072b2:	4613      	mov	r3, r2
 80072b4:	005b      	lsls	r3, r3, #1
 80072b6:	4413      	add	r3, r2
 80072b8:	00db      	lsls	r3, r3, #3
 80072ba:	3350      	adds	r3, #80	@ 0x50
 80072bc:	443b      	add	r3, r7
 80072be:	3b30      	subs	r3, #48	@ 0x30
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	3b01      	subs	r3, #1
 80072c4:	f003 0301 	and.w	r3, r3, #1
 80072c8:	f441 2280 	orr.w	r2, r1, #262144	@ 0x40000
 80072cc:	009b      	lsls	r3, r3, #2
 80072ce:	4403      	add	r3, r0
 80072d0:	605a      	str	r2, [r3, #4]
                  OCTOSPIM_PCR_IOLSRC_1);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80072d2:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80072d6:	4613      	mov	r3, r2
 80072d8:	005b      	lsls	r3, r3, #1
 80072da:	4413      	add	r3, r2
 80072dc:	00db      	lsls	r3, r3, #3
 80072de:	3350      	adds	r3, #80	@ 0x50
 80072e0:	443b      	add	r3, r7
 80072e2:	3b2c      	subs	r3, #44	@ 0x2c
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	f000 80d9 	beq.w	800749e <HAL_OSPIM_Config+0x606>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], \
 80072ec:	4914      	ldr	r1, [pc, #80]	@ (8007340 <HAL_OSPIM_Config+0x4a8>)
 80072ee:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80072f2:	4613      	mov	r3, r2
 80072f4:	005b      	lsls	r3, r3, #1
 80072f6:	4413      	add	r3, r2
 80072f8:	00db      	lsls	r3, r3, #3
 80072fa:	3350      	adds	r3, #80	@ 0x50
 80072fc:	443b      	add	r3, r7
 80072fe:	3b2c      	subs	r3, #44	@ 0x2c
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	3b01      	subs	r3, #1
 8007304:	f003 0301 	and.w	r3, r3, #1
 8007308:	009b      	lsls	r3, r3, #2
 800730a:	440b      	add	r3, r1
 800730c:	6859      	ldr	r1, [r3, #4]
 800730e:	480c      	ldr	r0, [pc, #48]	@ (8007340 <HAL_OSPIM_Config+0x4a8>)
 8007310:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8007314:	4613      	mov	r3, r2
 8007316:	005b      	lsls	r3, r3, #1
 8007318:	4413      	add	r3, r2
 800731a:	00db      	lsls	r3, r3, #3
 800731c:	3350      	adds	r3, #80	@ 0x50
 800731e:	443b      	add	r3, r7
 8007320:	3b2c      	subs	r3, #44	@ 0x2c
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	3b01      	subs	r3, #1
 8007326:	f003 0301 	and.w	r3, r3, #1
 800732a:	f041 6280 	orr.w	r2, r1, #67108864	@ 0x4000000
 800732e:	009b      	lsls	r3, r3, #2
 8007330:	4403      	add	r3, r0
 8007332:	605a      	str	r2, [r3, #4]
 8007334:	e0b3      	b.n	800749e <HAL_OSPIM_Config+0x606>
 8007336:	bf00      	nop
 8007338:	52005000 	.word	0x52005000
 800733c:	5200a000 	.word	0x5200a000
 8007340:	5200b400 	.word	0x5200b400
        }
      }
    }
    else
    {
      if (IOM_cfg[instance].ClkPort != 0U)
 8007344:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007346:	4613      	mov	r3, r2
 8007348:	005b      	lsls	r3, r3, #1
 800734a:	4413      	add	r3, r2
 800734c:	00db      	lsls	r3, r3, #3
 800734e:	3350      	adds	r3, #80	@ 0x50
 8007350:	443b      	add	r3, r7
 8007352:	3b3c      	subs	r3, #60	@ 0x3c
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	2b00      	cmp	r3, #0
 8007358:	f000 80a1 	beq.w	800749e <HAL_OSPIM_Config+0x606>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 800735c:	4995      	ldr	r1, [pc, #596]	@ (80075b4 <HAL_OSPIM_Config+0x71c>)
 800735e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007360:	4613      	mov	r3, r2
 8007362:	005b      	lsls	r3, r3, #1
 8007364:	4413      	add	r3, r2
 8007366:	00db      	lsls	r3, r3, #3
 8007368:	3350      	adds	r3, #80	@ 0x50
 800736a:	443b      	add	r3, r7
 800736c:	3b3c      	subs	r3, #60	@ 0x3c
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	3b01      	subs	r3, #1
 8007372:	009b      	lsls	r3, r3, #2
 8007374:	440b      	add	r3, r1
 8007376:	6859      	ldr	r1, [r3, #4]
 8007378:	488e      	ldr	r0, [pc, #568]	@ (80075b4 <HAL_OSPIM_Config+0x71c>)
 800737a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800737c:	4613      	mov	r3, r2
 800737e:	005b      	lsls	r3, r3, #1
 8007380:	4413      	add	r3, r2
 8007382:	00db      	lsls	r3, r3, #3
 8007384:	3350      	adds	r3, #80	@ 0x50
 8007386:	443b      	add	r3, r7
 8007388:	3b3c      	subs	r3, #60	@ 0x3c
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	3b01      	subs	r3, #1
 800738e:	f021 0201 	bic.w	r2, r1, #1
 8007392:	009b      	lsls	r3, r3, #2
 8007394:	4403      	add	r3, r0
 8007396:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 8007398:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800739a:	4613      	mov	r3, r2
 800739c:	005b      	lsls	r3, r3, #1
 800739e:	4413      	add	r3, r2
 80073a0:	00db      	lsls	r3, r3, #3
 80073a2:	3350      	adds	r3, #80	@ 0x50
 80073a4:	443b      	add	r3, r7
 80073a6:	3b38      	subs	r3, #56	@ 0x38
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d01d      	beq.n	80073ea <HAL_OSPIM_Config+0x552>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 80073ae:	4981      	ldr	r1, [pc, #516]	@ (80075b4 <HAL_OSPIM_Config+0x71c>)
 80073b0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80073b2:	4613      	mov	r3, r2
 80073b4:	005b      	lsls	r3, r3, #1
 80073b6:	4413      	add	r3, r2
 80073b8:	00db      	lsls	r3, r3, #3
 80073ba:	3350      	adds	r3, #80	@ 0x50
 80073bc:	443b      	add	r3, r7
 80073be:	3b38      	subs	r3, #56	@ 0x38
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	3b01      	subs	r3, #1
 80073c4:	009b      	lsls	r3, r3, #2
 80073c6:	440b      	add	r3, r1
 80073c8:	6859      	ldr	r1, [r3, #4]
 80073ca:	487a      	ldr	r0, [pc, #488]	@ (80075b4 <HAL_OSPIM_Config+0x71c>)
 80073cc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80073ce:	4613      	mov	r3, r2
 80073d0:	005b      	lsls	r3, r3, #1
 80073d2:	4413      	add	r3, r2
 80073d4:	00db      	lsls	r3, r3, #3
 80073d6:	3350      	adds	r3, #80	@ 0x50
 80073d8:	443b      	add	r3, r7
 80073da:	3b38      	subs	r3, #56	@ 0x38
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	3b01      	subs	r3, #1
 80073e0:	f021 0210 	bic.w	r2, r1, #16
 80073e4:	009b      	lsls	r3, r3, #2
 80073e6:	4403      	add	r3, r0
 80073e8:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80073ea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80073ec:	4613      	mov	r3, r2
 80073ee:	005b      	lsls	r3, r3, #1
 80073f0:	4413      	add	r3, r2
 80073f2:	00db      	lsls	r3, r3, #3
 80073f4:	3350      	adds	r3, #80	@ 0x50
 80073f6:	443b      	add	r3, r7
 80073f8:	3b30      	subs	r3, #48	@ 0x30
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d021      	beq.n	8007444 <HAL_OSPIM_Config+0x5ac>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 8007400:	496c      	ldr	r1, [pc, #432]	@ (80075b4 <HAL_OSPIM_Config+0x71c>)
 8007402:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007404:	4613      	mov	r3, r2
 8007406:	005b      	lsls	r3, r3, #1
 8007408:	4413      	add	r3, r2
 800740a:	00db      	lsls	r3, r3, #3
 800740c:	3350      	adds	r3, #80	@ 0x50
 800740e:	443b      	add	r3, r7
 8007410:	3b30      	subs	r3, #48	@ 0x30
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	3b01      	subs	r3, #1
 8007416:	f003 0301 	and.w	r3, r3, #1
 800741a:	009b      	lsls	r3, r3, #2
 800741c:	440b      	add	r3, r1
 800741e:	6859      	ldr	r1, [r3, #4]
 8007420:	4864      	ldr	r0, [pc, #400]	@ (80075b4 <HAL_OSPIM_Config+0x71c>)
 8007422:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007424:	4613      	mov	r3, r2
 8007426:	005b      	lsls	r3, r3, #1
 8007428:	4413      	add	r3, r2
 800742a:	00db      	lsls	r3, r3, #3
 800742c:	3350      	adds	r3, #80	@ 0x50
 800742e:	443b      	add	r3, r7
 8007430:	3b30      	subs	r3, #48	@ 0x30
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	3b01      	subs	r3, #1
 8007436:	f003 0301 	and.w	r3, r3, #1
 800743a:	f421 3280 	bic.w	r2, r1, #65536	@ 0x10000
 800743e:	009b      	lsls	r3, r3, #2
 8007440:	4403      	add	r3, r0
 8007442:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8007444:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007446:	4613      	mov	r3, r2
 8007448:	005b      	lsls	r3, r3, #1
 800744a:	4413      	add	r3, r2
 800744c:	00db      	lsls	r3, r3, #3
 800744e:	3350      	adds	r3, #80	@ 0x50
 8007450:	443b      	add	r3, r7
 8007452:	3b2c      	subs	r3, #44	@ 0x2c
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d021      	beq.n	800749e <HAL_OSPIM_Config+0x606>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 800745a:	4956      	ldr	r1, [pc, #344]	@ (80075b4 <HAL_OSPIM_Config+0x71c>)
 800745c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800745e:	4613      	mov	r3, r2
 8007460:	005b      	lsls	r3, r3, #1
 8007462:	4413      	add	r3, r2
 8007464:	00db      	lsls	r3, r3, #3
 8007466:	3350      	adds	r3, #80	@ 0x50
 8007468:	443b      	add	r3, r7
 800746a:	3b2c      	subs	r3, #44	@ 0x2c
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	3b01      	subs	r3, #1
 8007470:	f003 0301 	and.w	r3, r3, #1
 8007474:	009b      	lsls	r3, r3, #2
 8007476:	440b      	add	r3, r1
 8007478:	6859      	ldr	r1, [r3, #4]
 800747a:	484e      	ldr	r0, [pc, #312]	@ (80075b4 <HAL_OSPIM_Config+0x71c>)
 800747c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800747e:	4613      	mov	r3, r2
 8007480:	005b      	lsls	r3, r3, #1
 8007482:	4413      	add	r3, r2
 8007484:	00db      	lsls	r3, r3, #3
 8007486:	3350      	adds	r3, #80	@ 0x50
 8007488:	443b      	add	r3, r7
 800748a:	3b2c      	subs	r3, #44	@ 0x2c
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	3b01      	subs	r3, #1
 8007490:	f003 0301 	and.w	r3, r3, #1
 8007494:	f021 7280 	bic.w	r2, r1, #16777216	@ 0x1000000
 8007498:	009b      	lsls	r3, r3, #2
 800749a:	4403      	add	r3, r0
 800749c:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) ||
 800749e:	68bb      	ldr	r3, [r7, #8]
 80074a0:	6819      	ldr	r1, [r3, #0]
 80074a2:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80074a6:	4613      	mov	r3, r2
 80074a8:	005b      	lsls	r3, r3, #1
 80074aa:	4413      	add	r3, r2
 80074ac:	00db      	lsls	r3, r3, #3
 80074ae:	3350      	adds	r3, #80	@ 0x50
 80074b0:	443b      	add	r3, r7
 80074b2:	3b3c      	subs	r3, #60	@ 0x3c
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	4299      	cmp	r1, r3
 80074b8:	d03c      	beq.n	8007534 <HAL_OSPIM_Config+0x69c>
 80074ba:	68bb      	ldr	r3, [r7, #8]
 80074bc:	6899      	ldr	r1, [r3, #8]
 80074be:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80074c2:	4613      	mov	r3, r2
 80074c4:	005b      	lsls	r3, r3, #1
 80074c6:	4413      	add	r3, r2
 80074c8:	00db      	lsls	r3, r3, #3
 80074ca:	3350      	adds	r3, #80	@ 0x50
 80074cc:	443b      	add	r3, r7
 80074ce:	3b34      	subs	r3, #52	@ 0x34
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	4299      	cmp	r1, r3
 80074d4:	d02e      	beq.n	8007534 <HAL_OSPIM_Config+0x69c>
        ((cfg->DQSPort == IOM_cfg[other_instance].DQSPort) && (cfg->DQSPort != 0U)) ||
 80074d6:	68bb      	ldr	r3, [r7, #8]
 80074d8:	6859      	ldr	r1, [r3, #4]
 80074da:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80074de:	4613      	mov	r3, r2
 80074e0:	005b      	lsls	r3, r3, #1
 80074e2:	4413      	add	r3, r2
 80074e4:	00db      	lsls	r3, r3, #3
 80074e6:	3350      	adds	r3, #80	@ 0x50
 80074e8:	443b      	add	r3, r7
 80074ea:	3b38      	subs	r3, #56	@ 0x38
 80074ec:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) ||
 80074ee:	4299      	cmp	r1, r3
 80074f0:	d103      	bne.n	80074fa <HAL_OSPIM_Config+0x662>
        ((cfg->DQSPort == IOM_cfg[other_instance].DQSPort) && (cfg->DQSPort != 0U)) ||
 80074f2:	68bb      	ldr	r3, [r7, #8]
 80074f4:	685b      	ldr	r3, [r3, #4]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d11c      	bne.n	8007534 <HAL_OSPIM_Config+0x69c>
        (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 80074fa:	68bb      	ldr	r3, [r7, #8]
 80074fc:	68d9      	ldr	r1, [r3, #12]
 80074fe:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8007502:	4613      	mov	r3, r2
 8007504:	005b      	lsls	r3, r3, #1
 8007506:	4413      	add	r3, r2
 8007508:	00db      	lsls	r3, r3, #3
 800750a:	3350      	adds	r3, #80	@ 0x50
 800750c:	443b      	add	r3, r7
 800750e:	3b30      	subs	r3, #48	@ 0x30
 8007510:	681b      	ldr	r3, [r3, #0]
        ((cfg->DQSPort == IOM_cfg[other_instance].DQSPort) && (cfg->DQSPort != 0U)) ||
 8007512:	4299      	cmp	r1, r3
 8007514:	d00e      	beq.n	8007534 <HAL_OSPIM_Config+0x69c>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 8007516:	68bb      	ldr	r3, [r7, #8]
 8007518:	6919      	ldr	r1, [r3, #16]
 800751a:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800751e:	4613      	mov	r3, r2
 8007520:	005b      	lsls	r3, r3, #1
 8007522:	4413      	add	r3, r2
 8007524:	00db      	lsls	r3, r3, #3
 8007526:	3350      	adds	r3, #80	@ 0x50
 8007528:	443b      	add	r3, r7
 800752a:	3b2c      	subs	r3, #44	@ 0x2c
 800752c:	681b      	ldr	r3, [r3, #0]
        (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 800752e:	4299      	cmp	r1, r3
 8007530:	f040 810e 	bne.w	8007750 <HAL_OSPIM_Config+0x8b8>
    {
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 8007534:	68bb      	ldr	r3, [r7, #8]
 8007536:	6819      	ldr	r1, [r3, #0]
 8007538:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800753c:	4613      	mov	r3, r2
 800753e:	005b      	lsls	r3, r3, #1
 8007540:	4413      	add	r3, r2
 8007542:	00db      	lsls	r3, r3, #3
 8007544:	3350      	adds	r3, #80	@ 0x50
 8007546:	443b      	add	r3, r7
 8007548:	3b3c      	subs	r3, #60	@ 0x3c
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	4299      	cmp	r1, r3
 800754e:	d133      	bne.n	80075b8 <HAL_OSPIM_Config+0x720>
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 8007550:	68bb      	ldr	r3, [r7, #8]
 8007552:	6859      	ldr	r1, [r3, #4]
 8007554:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8007558:	4613      	mov	r3, r2
 800755a:	005b      	lsls	r3, r3, #1
 800755c:	4413      	add	r3, r2
 800755e:	00db      	lsls	r3, r3, #3
 8007560:	3350      	adds	r3, #80	@ 0x50
 8007562:	443b      	add	r3, r7
 8007564:	3b38      	subs	r3, #56	@ 0x38
 8007566:	681b      	ldr	r3, [r3, #0]
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 8007568:	4299      	cmp	r1, r3
 800756a:	d125      	bne.n	80075b8 <HAL_OSPIM_Config+0x720>
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 800756c:	68bb      	ldr	r3, [r7, #8]
 800756e:	68d9      	ldr	r1, [r3, #12]
 8007570:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8007574:	4613      	mov	r3, r2
 8007576:	005b      	lsls	r3, r3, #1
 8007578:	4413      	add	r3, r2
 800757a:	00db      	lsls	r3, r3, #3
 800757c:	3350      	adds	r3, #80	@ 0x50
 800757e:	443b      	add	r3, r7
 8007580:	3b30      	subs	r3, #48	@ 0x30
 8007582:	681b      	ldr	r3, [r3, #0]
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 8007584:	4299      	cmp	r1, r3
 8007586:	d117      	bne.n	80075b8 <HAL_OSPIM_Config+0x720>
          (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 8007588:	68bb      	ldr	r3, [r7, #8]
 800758a:	6919      	ldr	r1, [r3, #16]
 800758c:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8007590:	4613      	mov	r3, r2
 8007592:	005b      	lsls	r3, r3, #1
 8007594:	4413      	add	r3, r2
 8007596:	00db      	lsls	r3, r3, #3
 8007598:	3350      	adds	r3, #80	@ 0x50
 800759a:	443b      	add	r3, r7
 800759c:	3b2c      	subs	r3, #44	@ 0x2c
 800759e:	681b      	ldr	r3, [r3, #0]
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 80075a0:	4299      	cmp	r1, r3
 80075a2:	d109      	bne.n	80075b8 <HAL_OSPIM_Config+0x720>
      {
        /* Multiplexing should be performed */
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 80075a4:	4b03      	ldr	r3, [pc, #12]	@ (80075b4 <HAL_OSPIM_Config+0x71c>)
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	4a02      	ldr	r2, [pc, #8]	@ (80075b4 <HAL_OSPIM_Config+0x71c>)
 80075aa:	f043 0301 	orr.w	r3, r3, #1
 80075ae:	6013      	str	r3, [r2, #0]
 80075b0:	e0ce      	b.n	8007750 <HAL_OSPIM_Config+0x8b8>
 80075b2:	bf00      	nop
 80075b4:	5200b400 	.word	0x5200b400
      }
      else
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 80075b8:	49bb      	ldr	r1, [pc, #748]	@ (80078a8 <HAL_OSPIM_Config+0xa10>)
 80075ba:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80075be:	4613      	mov	r3, r2
 80075c0:	005b      	lsls	r3, r3, #1
 80075c2:	4413      	add	r3, r2
 80075c4:	00db      	lsls	r3, r3, #3
 80075c6:	3350      	adds	r3, #80	@ 0x50
 80075c8:	443b      	add	r3, r7
 80075ca:	3b3c      	subs	r3, #60	@ 0x3c
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	3b01      	subs	r3, #1
 80075d0:	009b      	lsls	r3, r3, #2
 80075d2:	440b      	add	r3, r1
 80075d4:	6859      	ldr	r1, [r3, #4]
 80075d6:	48b4      	ldr	r0, [pc, #720]	@ (80078a8 <HAL_OSPIM_Config+0xa10>)
 80075d8:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80075dc:	4613      	mov	r3, r2
 80075de:	005b      	lsls	r3, r3, #1
 80075e0:	4413      	add	r3, r2
 80075e2:	00db      	lsls	r3, r3, #3
 80075e4:	3350      	adds	r3, #80	@ 0x50
 80075e6:	443b      	add	r3, r7
 80075e8:	3b3c      	subs	r3, #60	@ 0x3c
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	3b01      	subs	r3, #1
 80075ee:	f021 0201 	bic.w	r2, r1, #1
 80075f2:	009b      	lsls	r3, r3, #2
 80075f4:	4403      	add	r3, r0
 80075f6:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 80075f8:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80075fc:	4613      	mov	r3, r2
 80075fe:	005b      	lsls	r3, r3, #1
 8007600:	4413      	add	r3, r2
 8007602:	00db      	lsls	r3, r3, #3
 8007604:	3350      	adds	r3, #80	@ 0x50
 8007606:	443b      	add	r3, r7
 8007608:	3b38      	subs	r3, #56	@ 0x38
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d01f      	beq.n	8007650 <HAL_OSPIM_Config+0x7b8>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 8007610:	49a5      	ldr	r1, [pc, #660]	@ (80078a8 <HAL_OSPIM_Config+0xa10>)
 8007612:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8007616:	4613      	mov	r3, r2
 8007618:	005b      	lsls	r3, r3, #1
 800761a:	4413      	add	r3, r2
 800761c:	00db      	lsls	r3, r3, #3
 800761e:	3350      	adds	r3, #80	@ 0x50
 8007620:	443b      	add	r3, r7
 8007622:	3b38      	subs	r3, #56	@ 0x38
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	3b01      	subs	r3, #1
 8007628:	009b      	lsls	r3, r3, #2
 800762a:	440b      	add	r3, r1
 800762c:	6859      	ldr	r1, [r3, #4]
 800762e:	489e      	ldr	r0, [pc, #632]	@ (80078a8 <HAL_OSPIM_Config+0xa10>)
 8007630:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8007634:	4613      	mov	r3, r2
 8007636:	005b      	lsls	r3, r3, #1
 8007638:	4413      	add	r3, r2
 800763a:	00db      	lsls	r3, r3, #3
 800763c:	3350      	adds	r3, #80	@ 0x50
 800763e:	443b      	add	r3, r7
 8007640:	3b38      	subs	r3, #56	@ 0x38
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	3b01      	subs	r3, #1
 8007646:	f021 0210 	bic.w	r2, r1, #16
 800764a:	009b      	lsls	r3, r3, #2
 800764c:	4403      	add	r3, r0
 800764e:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 8007650:	4995      	ldr	r1, [pc, #596]	@ (80078a8 <HAL_OSPIM_Config+0xa10>)
 8007652:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8007656:	4613      	mov	r3, r2
 8007658:	005b      	lsls	r3, r3, #1
 800765a:	4413      	add	r3, r2
 800765c:	00db      	lsls	r3, r3, #3
 800765e:	3350      	adds	r3, #80	@ 0x50
 8007660:	443b      	add	r3, r7
 8007662:	3b34      	subs	r3, #52	@ 0x34
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	3b01      	subs	r3, #1
 8007668:	009b      	lsls	r3, r3, #2
 800766a:	440b      	add	r3, r1
 800766c:	6859      	ldr	r1, [r3, #4]
 800766e:	488e      	ldr	r0, [pc, #568]	@ (80078a8 <HAL_OSPIM_Config+0xa10>)
 8007670:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8007674:	4613      	mov	r3, r2
 8007676:	005b      	lsls	r3, r3, #1
 8007678:	4413      	add	r3, r2
 800767a:	00db      	lsls	r3, r3, #3
 800767c:	3350      	adds	r3, #80	@ 0x50
 800767e:	443b      	add	r3, r7
 8007680:	3b34      	subs	r3, #52	@ 0x34
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	3b01      	subs	r3, #1
 8007686:	f421 7280 	bic.w	r2, r1, #256	@ 0x100
 800768a:	009b      	lsls	r3, r3, #2
 800768c:	4403      	add	r3, r0
 800768e:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8007690:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8007694:	4613      	mov	r3, r2
 8007696:	005b      	lsls	r3, r3, #1
 8007698:	4413      	add	r3, r2
 800769a:	00db      	lsls	r3, r3, #3
 800769c:	3350      	adds	r3, #80	@ 0x50
 800769e:	443b      	add	r3, r7
 80076a0:	3b30      	subs	r3, #48	@ 0x30
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d023      	beq.n	80076f0 <HAL_OSPIM_Config+0x858>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 80076a8:	497f      	ldr	r1, [pc, #508]	@ (80078a8 <HAL_OSPIM_Config+0xa10>)
 80076aa:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80076ae:	4613      	mov	r3, r2
 80076b0:	005b      	lsls	r3, r3, #1
 80076b2:	4413      	add	r3, r2
 80076b4:	00db      	lsls	r3, r3, #3
 80076b6:	3350      	adds	r3, #80	@ 0x50
 80076b8:	443b      	add	r3, r7
 80076ba:	3b30      	subs	r3, #48	@ 0x30
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	3b01      	subs	r3, #1
 80076c0:	f003 0301 	and.w	r3, r3, #1
 80076c4:	009b      	lsls	r3, r3, #2
 80076c6:	440b      	add	r3, r1
 80076c8:	6859      	ldr	r1, [r3, #4]
 80076ca:	4877      	ldr	r0, [pc, #476]	@ (80078a8 <HAL_OSPIM_Config+0xa10>)
 80076cc:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80076d0:	4613      	mov	r3, r2
 80076d2:	005b      	lsls	r3, r3, #1
 80076d4:	4413      	add	r3, r2
 80076d6:	00db      	lsls	r3, r3, #3
 80076d8:	3350      	adds	r3, #80	@ 0x50
 80076da:	443b      	add	r3, r7
 80076dc:	3b30      	subs	r3, #48	@ 0x30
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	3b01      	subs	r3, #1
 80076e2:	f003 0301 	and.w	r3, r3, #1
 80076e6:	f421 3280 	bic.w	r2, r1, #65536	@ 0x10000
 80076ea:	009b      	lsls	r3, r3, #2
 80076ec:	4403      	add	r3, r0
 80076ee:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80076f0:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80076f4:	4613      	mov	r3, r2
 80076f6:	005b      	lsls	r3, r3, #1
 80076f8:	4413      	add	r3, r2
 80076fa:	00db      	lsls	r3, r3, #3
 80076fc:	3350      	adds	r3, #80	@ 0x50
 80076fe:	443b      	add	r3, r7
 8007700:	3b2c      	subs	r3, #44	@ 0x2c
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	2b00      	cmp	r3, #0
 8007706:	d023      	beq.n	8007750 <HAL_OSPIM_Config+0x8b8>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8007708:	4967      	ldr	r1, [pc, #412]	@ (80078a8 <HAL_OSPIM_Config+0xa10>)
 800770a:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800770e:	4613      	mov	r3, r2
 8007710:	005b      	lsls	r3, r3, #1
 8007712:	4413      	add	r3, r2
 8007714:	00db      	lsls	r3, r3, #3
 8007716:	3350      	adds	r3, #80	@ 0x50
 8007718:	443b      	add	r3, r7
 800771a:	3b2c      	subs	r3, #44	@ 0x2c
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	3b01      	subs	r3, #1
 8007720:	f003 0301 	and.w	r3, r3, #1
 8007724:	009b      	lsls	r3, r3, #2
 8007726:	440b      	add	r3, r1
 8007728:	6859      	ldr	r1, [r3, #4]
 800772a:	485f      	ldr	r0, [pc, #380]	@ (80078a8 <HAL_OSPIM_Config+0xa10>)
 800772c:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8007730:	4613      	mov	r3, r2
 8007732:	005b      	lsls	r3, r3, #1
 8007734:	4413      	add	r3, r2
 8007736:	00db      	lsls	r3, r3, #3
 8007738:	3350      	adds	r3, #80	@ 0x50
 800773a:	443b      	add	r3, r7
 800773c:	3b2c      	subs	r3, #44	@ 0x2c
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	3b01      	subs	r3, #1
 8007742:	f003 0301 	and.w	r3, r3, #1
 8007746:	f021 7280 	bic.w	r2, r1, #16777216	@ 0x1000000
 800774a:	009b      	lsls	r3, r3, #2
 800774c:	4403      	add	r3, r0
 800774e:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /******************** Activation of new configuration *********************/
    MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 8007750:	4a55      	ldr	r2, [pc, #340]	@ (80078a8 <HAL_OSPIM_Config+0xa10>)
 8007752:	68bb      	ldr	r3, [r7, #8]
 8007754:	689b      	ldr	r3, [r3, #8]
 8007756:	3b01      	subs	r3, #1
 8007758:	009b      	lsls	r3, r3, #2
 800775a:	4413      	add	r3, r2
 800775c:	685b      	ldr	r3, [r3, #4]
 800775e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007762:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007764:	025b      	lsls	r3, r3, #9
 8007766:	431a      	orrs	r2, r3
 8007768:	494f      	ldr	r1, [pc, #316]	@ (80078a8 <HAL_OSPIM_Config+0xa10>)
 800776a:	68bb      	ldr	r3, [r7, #8]
 800776c:	689b      	ldr	r3, [r3, #8]
 800776e:	3b01      	subs	r3, #1
 8007770:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007774:	009b      	lsls	r3, r3, #2
 8007776:	440b      	add	r3, r1
 8007778:	605a      	str	r2, [r3, #4]
               (OCTOSPIM_PCR_NCSEN | (instance << OCTOSPIM_PCR_NCSSRC_Pos)));

    if ((cfg->Req2AckTime - 1U) > ((OCTOSPIM->CR & OCTOSPIM_CR_REQ2ACK_TIME) >> OCTOSPIM_CR_REQ2ACK_TIME_Pos))
 800777a:	68bb      	ldr	r3, [r7, #8]
 800777c:	695b      	ldr	r3, [r3, #20]
 800777e:	1e5a      	subs	r2, r3, #1
 8007780:	4b49      	ldr	r3, [pc, #292]	@ (80078a8 <HAL_OSPIM_Config+0xa10>)
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	0c1b      	lsrs	r3, r3, #16
 8007786:	b2db      	uxtb	r3, r3
 8007788:	429a      	cmp	r2, r3
 800778a:	d90a      	bls.n	80077a2 <HAL_OSPIM_Config+0x90a>
    {
      MODIFY_REG(OCTOSPIM->CR, OCTOSPIM_CR_REQ2ACK_TIME, ((cfg->Req2AckTime - 1U) << OCTOSPIM_CR_REQ2ACK_TIME_Pos));
 800778c:	4b46      	ldr	r3, [pc, #280]	@ (80078a8 <HAL_OSPIM_Config+0xa10>)
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	f423 027f 	bic.w	r2, r3, #16711680	@ 0xff0000
 8007794:	68bb      	ldr	r3, [r7, #8]
 8007796:	695b      	ldr	r3, [r3, #20]
 8007798:	3b01      	subs	r3, #1
 800779a:	041b      	lsls	r3, r3, #16
 800779c:	4942      	ldr	r1, [pc, #264]	@ (80078a8 <HAL_OSPIM_Config+0xa10>)
 800779e:	4313      	orrs	r3, r2
 80077a0:	600b      	str	r3, [r1, #0]
    }

    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 80077a2:	4b41      	ldr	r3, [pc, #260]	@ (80078a8 <HAL_OSPIM_Config+0xa10>)
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	f003 0301 	and.w	r3, r3, #1
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	f000 809a 	beq.w	80078e4 <HAL_OSPIM_Config+0xa4c>
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC), OCTOSPIM_PCR_CLKEN);
 80077b0:	4a3d      	ldr	r2, [pc, #244]	@ (80078a8 <HAL_OSPIM_Config+0xa10>)
 80077b2:	68bb      	ldr	r3, [r7, #8]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	3b01      	subs	r3, #1
 80077b8:	009b      	lsls	r3, r3, #2
 80077ba:	4413      	add	r3, r2
 80077bc:	685b      	ldr	r3, [r3, #4]
 80077be:	f023 0203 	bic.w	r2, r3, #3
 80077c2:	4939      	ldr	r1, [pc, #228]	@ (80078a8 <HAL_OSPIM_Config+0xa10>)
 80077c4:	68bb      	ldr	r3, [r7, #8]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	3b01      	subs	r3, #1
 80077ca:	f042 0201 	orr.w	r2, r2, #1
 80077ce:	009b      	lsls	r3, r3, #2
 80077d0:	440b      	add	r3, r1
 80077d2:	605a      	str	r2, [r3, #4]
      if (cfg->DQSPort != 0U)
 80077d4:	68bb      	ldr	r3, [r7, #8]
 80077d6:	685b      	ldr	r3, [r3, #4]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d011      	beq.n	8007800 <HAL_OSPIM_Config+0x968>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC), OCTOSPIM_PCR_DQSEN);
 80077dc:	4a32      	ldr	r2, [pc, #200]	@ (80078a8 <HAL_OSPIM_Config+0xa10>)
 80077de:	68bb      	ldr	r3, [r7, #8]
 80077e0:	685b      	ldr	r3, [r3, #4]
 80077e2:	3b01      	subs	r3, #1
 80077e4:	009b      	lsls	r3, r3, #2
 80077e6:	4413      	add	r3, r2
 80077e8:	685b      	ldr	r3, [r3, #4]
 80077ea:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80077ee:	492e      	ldr	r1, [pc, #184]	@ (80078a8 <HAL_OSPIM_Config+0xa10>)
 80077f0:	68bb      	ldr	r3, [r7, #8]
 80077f2:	685b      	ldr	r3, [r3, #4]
 80077f4:	3b01      	subs	r3, #1
 80077f6:	f042 0210 	orr.w	r2, r2, #16
 80077fa:	009b      	lsls	r3, r3, #2
 80077fc:	440b      	add	r3, r1
 80077fe:	605a      	str	r2, [r3, #4]
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8007800:	68bb      	ldr	r3, [r7, #8]
 8007802:	68db      	ldr	r3, [r3, #12]
 8007804:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007808:	2b00      	cmp	r3, #0
 800780a:	d016      	beq.n	800783a <HAL_OSPIM_Config+0x9a2>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 800780c:	4a26      	ldr	r2, [pc, #152]	@ (80078a8 <HAL_OSPIM_Config+0xa10>)
 800780e:	68bb      	ldr	r3, [r7, #8]
 8007810:	68db      	ldr	r3, [r3, #12]
 8007812:	3b01      	subs	r3, #1
 8007814:	f003 0301 	and.w	r3, r3, #1
 8007818:	009b      	lsls	r3, r3, #2
 800781a:	4413      	add	r3, r2
 800781c:	685b      	ldr	r3, [r3, #4]
 800781e:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8007822:	4921      	ldr	r1, [pc, #132]	@ (80078a8 <HAL_OSPIM_Config+0xa10>)
 8007824:	68bb      	ldr	r3, [r7, #8]
 8007826:	68db      	ldr	r3, [r3, #12]
 8007828:	3b01      	subs	r3, #1
 800782a:	f003 0301 	and.w	r3, r3, #1
 800782e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8007832:	009b      	lsls	r3, r3, #2
 8007834:	440b      	add	r3, r1
 8007836:	605a      	str	r2, [r3, #4]
 8007838:	e019      	b.n	800786e <HAL_OSPIM_Config+0x9d6>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), OCTOSPIM_PCR_IOLEN);
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800783a:	68bb      	ldr	r3, [r7, #8]
 800783c:	68db      	ldr	r3, [r3, #12]
 800783e:	2b00      	cmp	r3, #0
 8007840:	d015      	beq.n	800786e <HAL_OSPIM_Config+0x9d6>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8007842:	4a19      	ldr	r2, [pc, #100]	@ (80078a8 <HAL_OSPIM_Config+0xa10>)
 8007844:	68bb      	ldr	r3, [r7, #8]
 8007846:	68db      	ldr	r3, [r3, #12]
 8007848:	3b01      	subs	r3, #1
 800784a:	f003 0301 	and.w	r3, r3, #1
 800784e:	009b      	lsls	r3, r3, #2
 8007850:	4413      	add	r3, r2
 8007852:	685b      	ldr	r3, [r3, #4]
 8007854:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 8007858:	4913      	ldr	r1, [pc, #76]	@ (80078a8 <HAL_OSPIM_Config+0xa10>)
 800785a:	68bb      	ldr	r3, [r7, #8]
 800785c:	68db      	ldr	r3, [r3, #12]
 800785e:	3b01      	subs	r3, #1
 8007860:	f003 0301 	and.w	r3, r3, #1
 8007864:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8007868:	009b      	lsls	r3, r3, #2
 800786a:	440b      	add	r3, r1
 800786c:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 800786e:	68bb      	ldr	r3, [r7, #8]
 8007870:	691b      	ldr	r3, [r3, #16]
 8007872:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007876:	2b00      	cmp	r3, #0
 8007878:	d018      	beq.n	80078ac <HAL_OSPIM_Config+0xa14>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 800787a:	4a0b      	ldr	r2, [pc, #44]	@ (80078a8 <HAL_OSPIM_Config+0xa10>)
 800787c:	68bb      	ldr	r3, [r7, #8]
 800787e:	691b      	ldr	r3, [r3, #16]
 8007880:	3b01      	subs	r3, #1
 8007882:	f003 0301 	and.w	r3, r3, #1
 8007886:	009b      	lsls	r3, r3, #2
 8007888:	4413      	add	r3, r2
 800788a:	685b      	ldr	r3, [r3, #4]
 800788c:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8007890:	4905      	ldr	r1, [pc, #20]	@ (80078a8 <HAL_OSPIM_Config+0xa10>)
 8007892:	68bb      	ldr	r3, [r7, #8]
 8007894:	691b      	ldr	r3, [r3, #16]
 8007896:	3b01      	subs	r3, #1
 8007898:	f003 0301 	and.w	r3, r3, #1
 800789c:	f442 3240 	orr.w	r2, r2, #196608	@ 0x30000
 80078a0:	009b      	lsls	r3, r3, #2
 80078a2:	440b      	add	r3, r1
 80078a4:	605a      	str	r2, [r3, #4]
 80078a6:	e0c5      	b.n	8007a34 <HAL_OSPIM_Config+0xb9c>
 80078a8:	5200b400 	.word	0x5200b400
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80078ac:	68bb      	ldr	r3, [r7, #8]
 80078ae:	691b      	ldr	r3, [r3, #16]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	f000 80bf 	beq.w	8007a34 <HAL_OSPIM_Config+0xb9c>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 80078b6:	4a6e      	ldr	r2, [pc, #440]	@ (8007a70 <HAL_OSPIM_Config+0xbd8>)
 80078b8:	68bb      	ldr	r3, [r7, #8]
 80078ba:	691b      	ldr	r3, [r3, #16]
 80078bc:	3b01      	subs	r3, #1
 80078be:	f003 0301 	and.w	r3, r3, #1
 80078c2:	009b      	lsls	r3, r3, #2
 80078c4:	4413      	add	r3, r2
 80078c6:	685b      	ldr	r3, [r3, #4]
 80078c8:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 80078cc:	4968      	ldr	r1, [pc, #416]	@ (8007a70 <HAL_OSPIM_Config+0xbd8>)
 80078ce:	68bb      	ldr	r3, [r7, #8]
 80078d0:	691b      	ldr	r3, [r3, #16]
 80078d2:	3b01      	subs	r3, #1
 80078d4:	f003 0301 	and.w	r3, r3, #1
 80078d8:	f042 7240 	orr.w	r2, r2, #50331648	@ 0x3000000
 80078dc:	009b      	lsls	r3, r3, #2
 80078de:	440b      	add	r3, r1
 80078e0:	605a      	str	r2, [r3, #4]
 80078e2:	e0a7      	b.n	8007a34 <HAL_OSPIM_Config+0xb9c>
        /* Nothing to do */
      }
    }
    else
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 80078e4:	4a62      	ldr	r2, [pc, #392]	@ (8007a70 <HAL_OSPIM_Config+0xbd8>)
 80078e6:	68bb      	ldr	r3, [r7, #8]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	3b01      	subs	r3, #1
 80078ec:	009b      	lsls	r3, r3, #2
 80078ee:	4413      	add	r3, r2
 80078f0:	685b      	ldr	r3, [r3, #4]
 80078f2:	f023 0203 	bic.w	r2, r3, #3
 80078f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80078f8:	005b      	lsls	r3, r3, #1
 80078fa:	431a      	orrs	r2, r3
 80078fc:	495c      	ldr	r1, [pc, #368]	@ (8007a70 <HAL_OSPIM_Config+0xbd8>)
 80078fe:	68bb      	ldr	r3, [r7, #8]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	3b01      	subs	r3, #1
 8007904:	f042 0201 	orr.w	r2, r2, #1
 8007908:	009b      	lsls	r3, r3, #2
 800790a:	440b      	add	r3, r1
 800790c:	605a      	str	r2, [r3, #4]
                 (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 800790e:	68bb      	ldr	r3, [r7, #8]
 8007910:	685b      	ldr	r3, [r3, #4]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d014      	beq.n	8007940 <HAL_OSPIM_Config+0xaa8>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 8007916:	4a56      	ldr	r2, [pc, #344]	@ (8007a70 <HAL_OSPIM_Config+0xbd8>)
 8007918:	68bb      	ldr	r3, [r7, #8]
 800791a:	685b      	ldr	r3, [r3, #4]
 800791c:	3b01      	subs	r3, #1
 800791e:	009b      	lsls	r3, r3, #2
 8007920:	4413      	add	r3, r2
 8007922:	685b      	ldr	r3, [r3, #4]
 8007924:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8007928:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800792a:	015b      	lsls	r3, r3, #5
 800792c:	431a      	orrs	r2, r3
 800792e:	4950      	ldr	r1, [pc, #320]	@ (8007a70 <HAL_OSPIM_Config+0xbd8>)
 8007930:	68bb      	ldr	r3, [r7, #8]
 8007932:	685b      	ldr	r3, [r3, #4]
 8007934:	3b01      	subs	r3, #1
 8007936:	f042 0210 	orr.w	r2, r2, #16
 800793a:	009b      	lsls	r3, r3, #2
 800793c:	440b      	add	r3, r1
 800793e:	605a      	str	r2, [r3, #4]
                   (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8007940:	68bb      	ldr	r3, [r7, #8]
 8007942:	68db      	ldr	r3, [r3, #12]
 8007944:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007948:	2b00      	cmp	r3, #0
 800794a:	d019      	beq.n	8007980 <HAL_OSPIM_Config+0xae8>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 800794c:	4a48      	ldr	r2, [pc, #288]	@ (8007a70 <HAL_OSPIM_Config+0xbd8>)
 800794e:	68bb      	ldr	r3, [r7, #8]
 8007950:	68db      	ldr	r3, [r3, #12]
 8007952:	3b01      	subs	r3, #1
 8007954:	f003 0301 	and.w	r3, r3, #1
 8007958:	009b      	lsls	r3, r3, #2
 800795a:	4413      	add	r3, r2
 800795c:	685b      	ldr	r3, [r3, #4]
 800795e:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8007962:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007964:	049b      	lsls	r3, r3, #18
 8007966:	431a      	orrs	r2, r3
 8007968:	4941      	ldr	r1, [pc, #260]	@ (8007a70 <HAL_OSPIM_Config+0xbd8>)
 800796a:	68bb      	ldr	r3, [r7, #8]
 800796c:	68db      	ldr	r3, [r3, #12]
 800796e:	3b01      	subs	r3, #1
 8007970:	f003 0301 	and.w	r3, r3, #1
 8007974:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8007978:	009b      	lsls	r3, r3, #2
 800797a:	440b      	add	r3, r1
 800797c:	605a      	str	r2, [r3, #4]
 800797e:	e01c      	b.n	80079ba <HAL_OSPIM_Config+0xb22>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8007980:	68bb      	ldr	r3, [r7, #8]
 8007982:	68db      	ldr	r3, [r3, #12]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d018      	beq.n	80079ba <HAL_OSPIM_Config+0xb22>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8007988:	4a39      	ldr	r2, [pc, #228]	@ (8007a70 <HAL_OSPIM_Config+0xbd8>)
 800798a:	68bb      	ldr	r3, [r7, #8]
 800798c:	68db      	ldr	r3, [r3, #12]
 800798e:	3b01      	subs	r3, #1
 8007990:	f003 0301 	and.w	r3, r3, #1
 8007994:	009b      	lsls	r3, r3, #2
 8007996:	4413      	add	r3, r2
 8007998:	685b      	ldr	r3, [r3, #4]
 800799a:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 800799e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80079a0:	069b      	lsls	r3, r3, #26
 80079a2:	431a      	orrs	r2, r3
 80079a4:	4932      	ldr	r1, [pc, #200]	@ (8007a70 <HAL_OSPIM_Config+0xbd8>)
 80079a6:	68bb      	ldr	r3, [r7, #8]
 80079a8:	68db      	ldr	r3, [r3, #12]
 80079aa:	3b01      	subs	r3, #1
 80079ac:	f003 0301 	and.w	r3, r3, #1
 80079b0:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 80079b4:	009b      	lsls	r3, r3, #2
 80079b6:	440b      	add	r3, r1
 80079b8:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 80079ba:	68bb      	ldr	r3, [r7, #8]
 80079bc:	691b      	ldr	r3, [r3, #16]
 80079be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d019      	beq.n	80079fa <HAL_OSPIM_Config+0xb62>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 80079c6:	4a2a      	ldr	r2, [pc, #168]	@ (8007a70 <HAL_OSPIM_Config+0xbd8>)
 80079c8:	68bb      	ldr	r3, [r7, #8]
 80079ca:	691b      	ldr	r3, [r3, #16]
 80079cc:	3b01      	subs	r3, #1
 80079ce:	f003 0301 	and.w	r3, r3, #1
 80079d2:	009b      	lsls	r3, r3, #2
 80079d4:	4413      	add	r3, r2
 80079d6:	685b      	ldr	r3, [r3, #4]
 80079d8:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 80079dc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80079de:	049b      	lsls	r3, r3, #18
 80079e0:	431a      	orrs	r2, r3
 80079e2:	4923      	ldr	r1, [pc, #140]	@ (8007a70 <HAL_OSPIM_Config+0xbd8>)
 80079e4:	68bb      	ldr	r3, [r7, #8]
 80079e6:	691b      	ldr	r3, [r3, #16]
 80079e8:	3b01      	subs	r3, #1
 80079ea:	f003 0301 	and.w	r3, r3, #1
 80079ee:	f442 3240 	orr.w	r2, r2, #196608	@ 0x30000
 80079f2:	009b      	lsls	r3, r3, #2
 80079f4:	440b      	add	r3, r1
 80079f6:	605a      	str	r2, [r3, #4]
 80079f8:	e01c      	b.n	8007a34 <HAL_OSPIM_Config+0xb9c>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80079fa:	68bb      	ldr	r3, [r7, #8]
 80079fc:	691b      	ldr	r3, [r3, #16]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d018      	beq.n	8007a34 <HAL_OSPIM_Config+0xb9c>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8007a02:	4a1b      	ldr	r2, [pc, #108]	@ (8007a70 <HAL_OSPIM_Config+0xbd8>)
 8007a04:	68bb      	ldr	r3, [r7, #8]
 8007a06:	691b      	ldr	r3, [r3, #16]
 8007a08:	3b01      	subs	r3, #1
 8007a0a:	f003 0301 	and.w	r3, r3, #1
 8007a0e:	009b      	lsls	r3, r3, #2
 8007a10:	4413      	add	r3, r2
 8007a12:	685b      	ldr	r3, [r3, #4]
 8007a14:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 8007a18:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007a1a:	069b      	lsls	r3, r3, #26
 8007a1c:	431a      	orrs	r2, r3
 8007a1e:	4914      	ldr	r1, [pc, #80]	@ (8007a70 <HAL_OSPIM_Config+0xbd8>)
 8007a20:	68bb      	ldr	r3, [r7, #8]
 8007a22:	691b      	ldr	r3, [r3, #16]
 8007a24:	3b01      	subs	r3, #1
 8007a26:	f003 0301 	and.w	r3, r3, #1
 8007a2a:	f042 7240 	orr.w	r2, r2, #50331648	@ 0x3000000
 8007a2e:	009b      	lsls	r3, r3, #2
 8007a30:	440b      	add	r3, r1
 8007a32:	605a      	str	r2, [r3, #4]
        /* Nothing to do */
      }
    }

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 8007a34:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8007a38:	f003 0301 	and.w	r3, r3, #1
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d005      	beq.n	8007a4c <HAL_OSPIM_Config+0xbb4>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8007a40:	4b0c      	ldr	r3, [pc, #48]	@ (8007a74 <HAL_OSPIM_Config+0xbdc>)
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	4a0b      	ldr	r2, [pc, #44]	@ (8007a74 <HAL_OSPIM_Config+0xbdc>)
 8007a46:	f043 0301 	orr.w	r3, r3, #1
 8007a4a:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 8007a4c:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8007a50:	f003 0302 	and.w	r3, r3, #2
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d005      	beq.n	8007a64 <HAL_OSPIM_Config+0xbcc>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8007a58:	4b07      	ldr	r3, [pc, #28]	@ (8007a78 <HAL_OSPIM_Config+0xbe0>)
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	4a06      	ldr	r2, [pc, #24]	@ (8007a78 <HAL_OSPIM_Config+0xbe0>)
 8007a5e:	f043 0301 	orr.w	r3, r3, #1
 8007a62:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 8007a64:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 8007a68:	4618      	mov	r0, r3
 8007a6a:	3750      	adds	r7, #80	@ 0x50
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	bd80      	pop	{r7, pc}
 8007a70:	5200b400 	.word	0x5200b400
 8007a74:	52005000 	.word	0x52005000
 8007a78:	5200a000 	.word	0x5200a000

08007a7c <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b084      	sub	sp, #16
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	60f8      	str	r0, [r7, #12]
 8007a84:	60b9      	str	r1, [r7, #8]
 8007a86:	603b      	str	r3, [r7, #0]
 8007a88:	4613      	mov	r3, r2
 8007a8a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8007a8c:	e01a      	b.n	8007ac4 <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007a8e:	69bb      	ldr	r3, [r7, #24]
 8007a90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a94:	d016      	beq.n	8007ac4 <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007a96:	f7fb fe31 	bl	80036fc <HAL_GetTick>
 8007a9a:	4602      	mov	r2, r0
 8007a9c:	683b      	ldr	r3, [r7, #0]
 8007a9e:	1ad3      	subs	r3, r2, r3
 8007aa0:	69ba      	ldr	r2, [r7, #24]
 8007aa2:	429a      	cmp	r2, r3
 8007aa4:	d302      	bcc.n	8007aac <OSPI_WaitFlagStateUntilTimeout+0x30>
 8007aa6:	69bb      	ldr	r3, [r7, #24]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d10b      	bne.n	8007ac4 <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007ab2:	651a      	str	r2, [r3, #80]	@ 0x50
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ab8:	f043 0201 	orr.w	r2, r3, #1
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	655a      	str	r2, [r3, #84]	@ 0x54

        return HAL_ERROR;
 8007ac0:	2301      	movs	r3, #1
 8007ac2:	e00e      	b.n	8007ae2 <OSPI_WaitFlagStateUntilTimeout+0x66>
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	6a1a      	ldr	r2, [r3, #32]
 8007aca:	68bb      	ldr	r3, [r7, #8]
 8007acc:	4013      	ands	r3, r2
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	bf14      	ite	ne
 8007ad2:	2301      	movne	r3, #1
 8007ad4:	2300      	moveq	r3, #0
 8007ad6:	b2db      	uxtb	r3, r3
 8007ad8:	461a      	mov	r2, r3
 8007ada:	79fb      	ldrb	r3, [r7, #7]
 8007adc:	429a      	cmp	r2, r3
 8007ade:	d1d6      	bne.n	8007a8e <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007ae0:	2300      	movs	r3, #0
}
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	3710      	adds	r7, #16
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	bd80      	pop	{r7, pc}
	...

08007aec <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 8007aec:	b480      	push	{r7}
 8007aee:	b087      	sub	sp, #28
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	4603      	mov	r3, r0
 8007af4:	6039      	str	r1, [r7, #0]
 8007af6:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8007af8:	2300      	movs	r3, #0
 8007afa:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 8007afc:	2300      	movs	r3, #0
 8007afe:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 8007b00:	79fb      	ldrb	r3, [r7, #7]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d005      	beq.n	8007b12 <OSPIM_GetConfig+0x26>
 8007b06:	79fb      	ldrb	r3, [r7, #7]
 8007b08:	2b02      	cmp	r3, #2
 8007b0a:	d802      	bhi.n	8007b12 <OSPIM_GetConfig+0x26>
 8007b0c:	683b      	ldr	r3, [r7, #0]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d102      	bne.n	8007b18 <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 8007b12:	2301      	movs	r3, #1
 8007b14:	75fb      	strb	r3, [r7, #23]
 8007b16:	e098      	b.n	8007c4a <OSPIM_GetConfig+0x15e>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 8007b18:	683b      	ldr	r3, [r7, #0]
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 8007b1e:	683b      	ldr	r3, [r7, #0]
 8007b20:	2200      	movs	r2, #0
 8007b22:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 8007b24:	683b      	ldr	r3, [r7, #0]
 8007b26:	2200      	movs	r2, #0
 8007b28:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 8007b2a:	683b      	ldr	r3, [r7, #0]
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 8007b30:	683b      	ldr	r3, [r7, #0]
 8007b32:	2200      	movs	r2, #0
 8007b34:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 8007b36:	79fb      	ldrb	r3, [r7, #7]
 8007b38:	2b02      	cmp	r3, #2
 8007b3a:	d10b      	bne.n	8007b54 <OSPIM_GetConfig+0x68>
    {
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
 8007b3c:	4b46      	ldr	r3, [pc, #280]	@ (8007c58 <OSPIM_GetConfig+0x16c>)
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	f003 0301 	and.w	r3, r3, #1
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d102      	bne.n	8007b4e <OSPIM_GetConfig+0x62>
      {
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 8007b48:	4b44      	ldr	r3, [pc, #272]	@ (8007c5c <OSPIM_GetConfig+0x170>)
 8007b4a:	613b      	str	r3, [r7, #16]
 8007b4c:	e002      	b.n	8007b54 <OSPIM_GetConfig+0x68>
                 | OCTOSPIM_PCR_IOLSRC_1 | OCTOSPIM_PCR_IOHSRC_1);
      }
      else
      {
        value = OCTOSPIM_PCR_NCSSRC;
 8007b4e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007b52:	613b      	str	r3, [r7, #16]
      }
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8007b54:	2300      	movs	r3, #0
 8007b56:	60fb      	str	r3, [r7, #12]
 8007b58:	e074      	b.n	8007c44 <OSPIM_GetConfig+0x158>
    {
      reg = OCTOSPIM->PCR[index];
 8007b5a:	4a3f      	ldr	r2, [pc, #252]	@ (8007c58 <OSPIM_GetConfig+0x16c>)
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	009b      	lsls	r3, r3, #2
 8007b60:	4413      	add	r3, r2
 8007b62:	685b      	ldr	r3, [r3, #4]
 8007b64:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 8007b66:	68bb      	ldr	r3, [r7, #8]
 8007b68:	f003 0301 	and.w	r3, r3, #1
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d00a      	beq.n	8007b86 <OSPIM_GetConfig+0x9a>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 8007b70:	68ba      	ldr	r2, [r7, #8]
 8007b72:	693b      	ldr	r3, [r7, #16]
 8007b74:	4053      	eors	r3, r2
 8007b76:	f003 0302 	and.w	r3, r3, #2
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d103      	bne.n	8007b86 <OSPIM_GetConfig+0x9a>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index + 1U;
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	1c5a      	adds	r2, r3, #1
 8007b82:	683b      	ldr	r3, [r7, #0]
 8007b84:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 8007b86:	68bb      	ldr	r3, [r7, #8]
 8007b88:	f003 0310 	and.w	r3, r3, #16
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d00a      	beq.n	8007ba6 <OSPIM_GetConfig+0xba>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 8007b90:	68ba      	ldr	r2, [r7, #8]
 8007b92:	693b      	ldr	r3, [r7, #16]
 8007b94:	4053      	eors	r3, r2
 8007b96:	f003 0320 	and.w	r3, r3, #32
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d103      	bne.n	8007ba6 <OSPIM_GetConfig+0xba>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index + 1U;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	1c5a      	adds	r2, r3, #1
 8007ba2:	683b      	ldr	r3, [r7, #0]
 8007ba4:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 8007ba6:	68bb      	ldr	r3, [r7, #8]
 8007ba8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d00a      	beq.n	8007bc6 <OSPIM_GetConfig+0xda>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 8007bb0:	68ba      	ldr	r2, [r7, #8]
 8007bb2:	693b      	ldr	r3, [r7, #16]
 8007bb4:	4053      	eors	r3, r2
 8007bb6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d103      	bne.n	8007bc6 <OSPIM_GetConfig+0xda>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index + 1U;
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	1c5a      	adds	r2, r3, #1
 8007bc2:	683b      	ldr	r3, [r7, #0]
 8007bc4:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 8007bc6:	68bb      	ldr	r3, [r7, #8]
 8007bc8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d018      	beq.n	8007c02 <OSPIM_GetConfig+0x116>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 8007bd0:	68ba      	ldr	r2, [r7, #8]
 8007bd2:	693b      	ldr	r3, [r7, #16]
 8007bd4:	4053      	eors	r3, r2
 8007bd6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d111      	bne.n	8007c02 <OSPIM_GetConfig+0x116>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 8007bde:	68bb      	ldr	r3, [r7, #8]
 8007be0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d106      	bne.n	8007bf6 <OSPIM_GetConfig+0x10a>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	3301      	adds	r3, #1
 8007bec:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007bf0:	683b      	ldr	r3, [r7, #0]
 8007bf2:	60da      	str	r2, [r3, #12]
 8007bf4:	e005      	b.n	8007c02 <OSPIM_GetConfig+0x116>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	3301      	adds	r3, #1
 8007bfa:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8007bfe:	683b      	ldr	r3, [r7, #0]
 8007c00:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 8007c02:	68bb      	ldr	r3, [r7, #8]
 8007c04:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d018      	beq.n	8007c3e <OSPIM_GetConfig+0x152>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 8007c0c:	68ba      	ldr	r2, [r7, #8]
 8007c0e:	693b      	ldr	r3, [r7, #16]
 8007c10:	4053      	eors	r3, r2
 8007c12:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d111      	bne.n	8007c3e <OSPIM_GetConfig+0x152>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 8007c1a:	68bb      	ldr	r3, [r7, #8]
 8007c1c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d106      	bne.n	8007c32 <OSPIM_GetConfig+0x146>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	3301      	adds	r3, #1
 8007c28:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007c2c:	683b      	ldr	r3, [r7, #0]
 8007c2e:	611a      	str	r2, [r3, #16]
 8007c30:	e005      	b.n	8007c3e <OSPIM_GetConfig+0x152>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	3301      	adds	r3, #1
 8007c36:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8007c3a:	683b      	ldr	r3, [r7, #0]
 8007c3c:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	3301      	adds	r3, #1
 8007c42:	60fb      	str	r3, [r7, #12]
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	2b01      	cmp	r3, #1
 8007c48:	d987      	bls.n	8007b5a <OSPIM_GetConfig+0x6e>
      }
    }
  }

  /* Return function status */
  return status;
 8007c4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	371c      	adds	r7, #28
 8007c50:	46bd      	mov	sp, r7
 8007c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c56:	4770      	bx	lr
 8007c58:	5200b400 	.word	0x5200b400
 8007c5c:	04040222 	.word	0x04040222

08007c60 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8007c60:	b590      	push	{r4, r7, lr}
 8007c62:	b08d      	sub	sp, #52	@ 0x34
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c6e:	6a3b      	ldr	r3, [r7, #32]
 8007c70:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	4618      	mov	r0, r3
 8007c78:	f00d f867 	bl	8014d4a <USB_GetMode>
 8007c7c:	4603      	mov	r3, r0
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	f040 84b9 	bne.w	80085f6 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	4618      	mov	r0, r3
 8007c8a:	f00c ffcb 	bl	8014c24 <USB_ReadInterrupts>
 8007c8e:	4603      	mov	r3, r0
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	f000 84af 	beq.w	80085f4 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8007c96:	69fb      	ldr	r3, [r7, #28]
 8007c98:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007c9c:	689b      	ldr	r3, [r3, #8]
 8007c9e:	0a1b      	lsrs	r3, r3, #8
 8007ca0:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	4618      	mov	r0, r3
 8007cb0:	f00c ffb8 	bl	8014c24 <USB_ReadInterrupts>
 8007cb4:	4603      	mov	r3, r0
 8007cb6:	f003 0302 	and.w	r3, r3, #2
 8007cba:	2b02      	cmp	r3, #2
 8007cbc:	d107      	bne.n	8007cce <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	695a      	ldr	r2, [r3, #20]
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	f002 0202 	and.w	r2, r2, #2
 8007ccc:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	f00c ffa6 	bl	8014c24 <USB_ReadInterrupts>
 8007cd8:	4603      	mov	r3, r0
 8007cda:	f003 0310 	and.w	r3, r3, #16
 8007cde:	2b10      	cmp	r3, #16
 8007ce0:	d161      	bne.n	8007da6 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	699a      	ldr	r2, [r3, #24]
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	f022 0210 	bic.w	r2, r2, #16
 8007cf0:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8007cf2:	6a3b      	ldr	r3, [r7, #32]
 8007cf4:	6a1b      	ldr	r3, [r3, #32]
 8007cf6:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8007cf8:	69bb      	ldr	r3, [r7, #24]
 8007cfa:	f003 020f 	and.w	r2, r3, #15
 8007cfe:	4613      	mov	r3, r2
 8007d00:	00db      	lsls	r3, r3, #3
 8007d02:	4413      	add	r3, r2
 8007d04:	009b      	lsls	r3, r3, #2
 8007d06:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007d0a:	687a      	ldr	r2, [r7, #4]
 8007d0c:	4413      	add	r3, r2
 8007d0e:	3304      	adds	r3, #4
 8007d10:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8007d12:	69bb      	ldr	r3, [r7, #24]
 8007d14:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8007d18:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007d1c:	d124      	bne.n	8007d68 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8007d1e:	69ba      	ldr	r2, [r7, #24]
 8007d20:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8007d24:	4013      	ands	r3, r2
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d035      	beq.n	8007d96 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8007d2a:	697b      	ldr	r3, [r7, #20]
 8007d2c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8007d2e:	69bb      	ldr	r3, [r7, #24]
 8007d30:	091b      	lsrs	r3, r3, #4
 8007d32:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8007d34:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007d38:	b29b      	uxth	r3, r3
 8007d3a:	461a      	mov	r2, r3
 8007d3c:	6a38      	ldr	r0, [r7, #32]
 8007d3e:	f00c fe1f 	bl	8014980 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007d42:	697b      	ldr	r3, [r7, #20]
 8007d44:	68da      	ldr	r2, [r3, #12]
 8007d46:	69bb      	ldr	r3, [r7, #24]
 8007d48:	091b      	lsrs	r3, r3, #4
 8007d4a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007d4e:	441a      	add	r2, r3
 8007d50:	697b      	ldr	r3, [r7, #20]
 8007d52:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007d54:	697b      	ldr	r3, [r7, #20]
 8007d56:	695a      	ldr	r2, [r3, #20]
 8007d58:	69bb      	ldr	r3, [r7, #24]
 8007d5a:	091b      	lsrs	r3, r3, #4
 8007d5c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007d60:	441a      	add	r2, r3
 8007d62:	697b      	ldr	r3, [r7, #20]
 8007d64:	615a      	str	r2, [r3, #20]
 8007d66:	e016      	b.n	8007d96 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8007d68:	69bb      	ldr	r3, [r7, #24]
 8007d6a:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8007d6e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8007d72:	d110      	bne.n	8007d96 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007d7a:	2208      	movs	r2, #8
 8007d7c:	4619      	mov	r1, r3
 8007d7e:	6a38      	ldr	r0, [r7, #32]
 8007d80:	f00c fdfe 	bl	8014980 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007d84:	697b      	ldr	r3, [r7, #20]
 8007d86:	695a      	ldr	r2, [r3, #20]
 8007d88:	69bb      	ldr	r3, [r7, #24]
 8007d8a:	091b      	lsrs	r3, r3, #4
 8007d8c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007d90:	441a      	add	r2, r3
 8007d92:	697b      	ldr	r3, [r7, #20]
 8007d94:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	699a      	ldr	r2, [r3, #24]
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	f042 0210 	orr.w	r2, r2, #16
 8007da4:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	4618      	mov	r0, r3
 8007dac:	f00c ff3a 	bl	8014c24 <USB_ReadInterrupts>
 8007db0:	4603      	mov	r3, r0
 8007db2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007db6:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8007dba:	f040 80a7 	bne.w	8007f0c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	f00c ff3f 	bl	8014c4a <USB_ReadDevAllOutEpInterrupt>
 8007dcc:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8007dce:	e099      	b.n	8007f04 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8007dd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007dd2:	f003 0301 	and.w	r3, r3, #1
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	f000 808e 	beq.w	8007ef8 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007de2:	b2d2      	uxtb	r2, r2
 8007de4:	4611      	mov	r1, r2
 8007de6:	4618      	mov	r0, r3
 8007de8:	f00c ff63 	bl	8014cb2 <USB_ReadDevOutEPInterrupt>
 8007dec:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8007dee:	693b      	ldr	r3, [r7, #16]
 8007df0:	f003 0301 	and.w	r3, r3, #1
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d00c      	beq.n	8007e12 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8007df8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dfa:	015a      	lsls	r2, r3, #5
 8007dfc:	69fb      	ldr	r3, [r7, #28]
 8007dfe:	4413      	add	r3, r2
 8007e00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e04:	461a      	mov	r2, r3
 8007e06:	2301      	movs	r3, #1
 8007e08:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8007e0a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007e0c:	6878      	ldr	r0, [r7, #4]
 8007e0e:	f000 fe6f 	bl	8008af0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8007e12:	693b      	ldr	r3, [r7, #16]
 8007e14:	f003 0308 	and.w	r3, r3, #8
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d00c      	beq.n	8007e36 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8007e1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e1e:	015a      	lsls	r2, r3, #5
 8007e20:	69fb      	ldr	r3, [r7, #28]
 8007e22:	4413      	add	r3, r2
 8007e24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e28:	461a      	mov	r2, r3
 8007e2a:	2308      	movs	r3, #8
 8007e2c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8007e2e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007e30:	6878      	ldr	r0, [r7, #4]
 8007e32:	f000 ff45 	bl	8008cc0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8007e36:	693b      	ldr	r3, [r7, #16]
 8007e38:	f003 0310 	and.w	r3, r3, #16
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d008      	beq.n	8007e52 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8007e40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e42:	015a      	lsls	r2, r3, #5
 8007e44:	69fb      	ldr	r3, [r7, #28]
 8007e46:	4413      	add	r3, r2
 8007e48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e4c:	461a      	mov	r2, r3
 8007e4e:	2310      	movs	r3, #16
 8007e50:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8007e52:	693b      	ldr	r3, [r7, #16]
 8007e54:	f003 0302 	and.w	r3, r3, #2
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d030      	beq.n	8007ebe <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8007e5c:	6a3b      	ldr	r3, [r7, #32]
 8007e5e:	695b      	ldr	r3, [r3, #20]
 8007e60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e64:	2b80      	cmp	r3, #128	@ 0x80
 8007e66:	d109      	bne.n	8007e7c <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8007e68:	69fb      	ldr	r3, [r7, #28]
 8007e6a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e6e:	685b      	ldr	r3, [r3, #4]
 8007e70:	69fa      	ldr	r2, [r7, #28]
 8007e72:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007e76:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8007e7a:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8007e7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007e7e:	4613      	mov	r3, r2
 8007e80:	00db      	lsls	r3, r3, #3
 8007e82:	4413      	add	r3, r2
 8007e84:	009b      	lsls	r3, r3, #2
 8007e86:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007e8a:	687a      	ldr	r2, [r7, #4]
 8007e8c:	4413      	add	r3, r2
 8007e8e:	3304      	adds	r3, #4
 8007e90:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8007e92:	697b      	ldr	r3, [r7, #20]
 8007e94:	78db      	ldrb	r3, [r3, #3]
 8007e96:	2b01      	cmp	r3, #1
 8007e98:	d108      	bne.n	8007eac <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8007e9a:	697b      	ldr	r3, [r7, #20]
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8007ea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ea2:	b2db      	uxtb	r3, r3
 8007ea4:	4619      	mov	r1, r3
 8007ea6:	6878      	ldr	r0, [r7, #4]
 8007ea8:	f016 fd92 	bl	801e9d0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8007eac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007eae:	015a      	lsls	r2, r3, #5
 8007eb0:	69fb      	ldr	r3, [r7, #28]
 8007eb2:	4413      	add	r3, r2
 8007eb4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007eb8:	461a      	mov	r2, r3
 8007eba:	2302      	movs	r3, #2
 8007ebc:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007ebe:	693b      	ldr	r3, [r7, #16]
 8007ec0:	f003 0320 	and.w	r3, r3, #32
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d008      	beq.n	8007eda <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007ec8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007eca:	015a      	lsls	r2, r3, #5
 8007ecc:	69fb      	ldr	r3, [r7, #28]
 8007ece:	4413      	add	r3, r2
 8007ed0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ed4:	461a      	mov	r2, r3
 8007ed6:	2320      	movs	r3, #32
 8007ed8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8007eda:	693b      	ldr	r3, [r7, #16]
 8007edc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d009      	beq.n	8007ef8 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8007ee4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ee6:	015a      	lsls	r2, r3, #5
 8007ee8:	69fb      	ldr	r3, [r7, #28]
 8007eea:	4413      	add	r3, r2
 8007eec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ef0:	461a      	mov	r2, r3
 8007ef2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8007ef6:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8007ef8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007efa:	3301      	adds	r3, #1
 8007efc:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8007efe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f00:	085b      	lsrs	r3, r3, #1
 8007f02:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8007f04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	f47f af62 	bne.w	8007dd0 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	4618      	mov	r0, r3
 8007f12:	f00c fe87 	bl	8014c24 <USB_ReadInterrupts>
 8007f16:	4603      	mov	r3, r0
 8007f18:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007f1c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007f20:	f040 80db 	bne.w	80080da <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	4618      	mov	r0, r3
 8007f2a:	f00c fea8 	bl	8014c7e <USB_ReadDevAllInEpInterrupt>
 8007f2e:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8007f30:	2300      	movs	r3, #0
 8007f32:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8007f34:	e0cd      	b.n	80080d2 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8007f36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f38:	f003 0301 	and.w	r3, r3, #1
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	f000 80c2 	beq.w	80080c6 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007f48:	b2d2      	uxtb	r2, r2
 8007f4a:	4611      	mov	r1, r2
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	f00c fece 	bl	8014cee <USB_ReadDevInEPInterrupt>
 8007f52:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8007f54:	693b      	ldr	r3, [r7, #16]
 8007f56:	f003 0301 	and.w	r3, r3, #1
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d057      	beq.n	800800e <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007f5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f60:	f003 030f 	and.w	r3, r3, #15
 8007f64:	2201      	movs	r2, #1
 8007f66:	fa02 f303 	lsl.w	r3, r2, r3
 8007f6a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007f6c:	69fb      	ldr	r3, [r7, #28]
 8007f6e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007f72:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	43db      	mvns	r3, r3
 8007f78:	69f9      	ldr	r1, [r7, #28]
 8007f7a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007f7e:	4013      	ands	r3, r2
 8007f80:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8007f82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f84:	015a      	lsls	r2, r3, #5
 8007f86:	69fb      	ldr	r3, [r7, #28]
 8007f88:	4413      	add	r3, r2
 8007f8a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f8e:	461a      	mov	r2, r3
 8007f90:	2301      	movs	r3, #1
 8007f92:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	799b      	ldrb	r3, [r3, #6]
 8007f98:	2b01      	cmp	r3, #1
 8007f9a:	d132      	bne.n	8008002 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8007f9c:	6879      	ldr	r1, [r7, #4]
 8007f9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007fa0:	4613      	mov	r3, r2
 8007fa2:	00db      	lsls	r3, r3, #3
 8007fa4:	4413      	add	r3, r2
 8007fa6:	009b      	lsls	r3, r3, #2
 8007fa8:	440b      	add	r3, r1
 8007faa:	3320      	adds	r3, #32
 8007fac:	6819      	ldr	r1, [r3, #0]
 8007fae:	6878      	ldr	r0, [r7, #4]
 8007fb0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007fb2:	4613      	mov	r3, r2
 8007fb4:	00db      	lsls	r3, r3, #3
 8007fb6:	4413      	add	r3, r2
 8007fb8:	009b      	lsls	r3, r3, #2
 8007fba:	4403      	add	r3, r0
 8007fbc:	331c      	adds	r3, #28
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	4419      	add	r1, r3
 8007fc2:	6878      	ldr	r0, [r7, #4]
 8007fc4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007fc6:	4613      	mov	r3, r2
 8007fc8:	00db      	lsls	r3, r3, #3
 8007fca:	4413      	add	r3, r2
 8007fcc:	009b      	lsls	r3, r3, #2
 8007fce:	4403      	add	r3, r0
 8007fd0:	3320      	adds	r3, #32
 8007fd2:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8007fd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d113      	bne.n	8008002 <HAL_PCD_IRQHandler+0x3a2>
 8007fda:	6879      	ldr	r1, [r7, #4]
 8007fdc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007fde:	4613      	mov	r3, r2
 8007fe0:	00db      	lsls	r3, r3, #3
 8007fe2:	4413      	add	r3, r2
 8007fe4:	009b      	lsls	r3, r3, #2
 8007fe6:	440b      	add	r3, r1
 8007fe8:	3324      	adds	r3, #36	@ 0x24
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d108      	bne.n	8008002 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	6818      	ldr	r0, [r3, #0]
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007ffa:	461a      	mov	r2, r3
 8007ffc:	2101      	movs	r1, #1
 8007ffe:	f00c fed7 	bl	8014db0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8008002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008004:	b2db      	uxtb	r3, r3
 8008006:	4619      	mov	r1, r3
 8008008:	6878      	ldr	r0, [r7, #4]
 800800a:	f016 fc5c 	bl	801e8c6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800800e:	693b      	ldr	r3, [r7, #16]
 8008010:	f003 0308 	and.w	r3, r3, #8
 8008014:	2b00      	cmp	r3, #0
 8008016:	d008      	beq.n	800802a <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8008018:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800801a:	015a      	lsls	r2, r3, #5
 800801c:	69fb      	ldr	r3, [r7, #28]
 800801e:	4413      	add	r3, r2
 8008020:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008024:	461a      	mov	r2, r3
 8008026:	2308      	movs	r3, #8
 8008028:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800802a:	693b      	ldr	r3, [r7, #16]
 800802c:	f003 0310 	and.w	r3, r3, #16
 8008030:	2b00      	cmp	r3, #0
 8008032:	d008      	beq.n	8008046 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8008034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008036:	015a      	lsls	r2, r3, #5
 8008038:	69fb      	ldr	r3, [r7, #28]
 800803a:	4413      	add	r3, r2
 800803c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008040:	461a      	mov	r2, r3
 8008042:	2310      	movs	r3, #16
 8008044:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8008046:	693b      	ldr	r3, [r7, #16]
 8008048:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800804c:	2b00      	cmp	r3, #0
 800804e:	d008      	beq.n	8008062 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8008050:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008052:	015a      	lsls	r2, r3, #5
 8008054:	69fb      	ldr	r3, [r7, #28]
 8008056:	4413      	add	r3, r2
 8008058:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800805c:	461a      	mov	r2, r3
 800805e:	2340      	movs	r3, #64	@ 0x40
 8008060:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8008062:	693b      	ldr	r3, [r7, #16]
 8008064:	f003 0302 	and.w	r3, r3, #2
 8008068:	2b00      	cmp	r3, #0
 800806a:	d023      	beq.n	80080b4 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800806c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800806e:	6a38      	ldr	r0, [r7, #32]
 8008070:	f00c f81a 	bl	80140a8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8008074:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008076:	4613      	mov	r3, r2
 8008078:	00db      	lsls	r3, r3, #3
 800807a:	4413      	add	r3, r2
 800807c:	009b      	lsls	r3, r3, #2
 800807e:	3310      	adds	r3, #16
 8008080:	687a      	ldr	r2, [r7, #4]
 8008082:	4413      	add	r3, r2
 8008084:	3304      	adds	r3, #4
 8008086:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8008088:	697b      	ldr	r3, [r7, #20]
 800808a:	78db      	ldrb	r3, [r3, #3]
 800808c:	2b01      	cmp	r3, #1
 800808e:	d108      	bne.n	80080a2 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8008090:	697b      	ldr	r3, [r7, #20]
 8008092:	2200      	movs	r2, #0
 8008094:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8008096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008098:	b2db      	uxtb	r3, r3
 800809a:	4619      	mov	r1, r3
 800809c:	6878      	ldr	r0, [r7, #4]
 800809e:	f016 fca9 	bl	801e9f4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80080a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080a4:	015a      	lsls	r2, r3, #5
 80080a6:	69fb      	ldr	r3, [r7, #28]
 80080a8:	4413      	add	r3, r2
 80080aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80080ae:	461a      	mov	r2, r3
 80080b0:	2302      	movs	r3, #2
 80080b2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80080b4:	693b      	ldr	r3, [r7, #16]
 80080b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d003      	beq.n	80080c6 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80080be:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80080c0:	6878      	ldr	r0, [r7, #4]
 80080c2:	f000 fc88 	bl	80089d6 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80080c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080c8:	3301      	adds	r3, #1
 80080ca:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80080cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080ce:	085b      	lsrs	r3, r3, #1
 80080d0:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80080d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	f47f af2e 	bne.w	8007f36 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	4618      	mov	r0, r3
 80080e0:	f00c fda0 	bl	8014c24 <USB_ReadInterrupts>
 80080e4:	4603      	mov	r3, r0
 80080e6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80080ea:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80080ee:	d122      	bne.n	8008136 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80080f0:	69fb      	ldr	r3, [r7, #28]
 80080f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80080f6:	685b      	ldr	r3, [r3, #4]
 80080f8:	69fa      	ldr	r2, [r7, #28]
 80080fa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80080fe:	f023 0301 	bic.w	r3, r3, #1
 8008102:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800810a:	2b01      	cmp	r3, #1
 800810c:	d108      	bne.n	8008120 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	2200      	movs	r2, #0
 8008112:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8008116:	2100      	movs	r1, #0
 8008118:	6878      	ldr	r0, [r7, #4]
 800811a:	f000 fe17 	bl	8008d4c <HAL_PCDEx_LPM_Callback>
 800811e:	e002      	b.n	8008126 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8008120:	6878      	ldr	r0, [r7, #4]
 8008122:	f016 fc47 	bl	801e9b4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	695a      	ldr	r2, [r3, #20]
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8008134:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	4618      	mov	r0, r3
 800813c:	f00c fd72 	bl	8014c24 <USB_ReadInterrupts>
 8008140:	4603      	mov	r3, r0
 8008142:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008146:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800814a:	d112      	bne.n	8008172 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800814c:	69fb      	ldr	r3, [r7, #28]
 800814e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008152:	689b      	ldr	r3, [r3, #8]
 8008154:	f003 0301 	and.w	r3, r3, #1
 8008158:	2b01      	cmp	r3, #1
 800815a:	d102      	bne.n	8008162 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800815c:	6878      	ldr	r0, [r7, #4]
 800815e:	f016 fc03 	bl	801e968 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	695a      	ldr	r2, [r3, #20]
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8008170:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	4618      	mov	r0, r3
 8008178:	f00c fd54 	bl	8014c24 <USB_ReadInterrupts>
 800817c:	4603      	mov	r3, r0
 800817e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008182:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008186:	d121      	bne.n	80081cc <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	695a      	ldr	r2, [r3, #20]
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8008196:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d111      	bne.n	80081c6 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	2201      	movs	r2, #1
 80081a6:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80081b0:	089b      	lsrs	r3, r3, #2
 80081b2:	f003 020f 	and.w	r2, r3, #15
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80081bc:	2101      	movs	r1, #1
 80081be:	6878      	ldr	r0, [r7, #4]
 80081c0:	f000 fdc4 	bl	8008d4c <HAL_PCDEx_LPM_Callback>
 80081c4:	e002      	b.n	80081cc <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80081c6:	6878      	ldr	r0, [r7, #4]
 80081c8:	f016 fbce 	bl	801e968 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	4618      	mov	r0, r3
 80081d2:	f00c fd27 	bl	8014c24 <USB_ReadInterrupts>
 80081d6:	4603      	mov	r3, r0
 80081d8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80081dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80081e0:	f040 80b7 	bne.w	8008352 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80081e4:	69fb      	ldr	r3, [r7, #28]
 80081e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80081ea:	685b      	ldr	r3, [r3, #4]
 80081ec:	69fa      	ldr	r2, [r7, #28]
 80081ee:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80081f2:	f023 0301 	bic.w	r3, r3, #1
 80081f6:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	2110      	movs	r1, #16
 80081fe:	4618      	mov	r0, r3
 8008200:	f00b ff52 	bl	80140a8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008204:	2300      	movs	r3, #0
 8008206:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008208:	e046      	b.n	8008298 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800820a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800820c:	015a      	lsls	r2, r3, #5
 800820e:	69fb      	ldr	r3, [r7, #28]
 8008210:	4413      	add	r3, r2
 8008212:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008216:	461a      	mov	r2, r3
 8008218:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800821c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800821e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008220:	015a      	lsls	r2, r3, #5
 8008222:	69fb      	ldr	r3, [r7, #28]
 8008224:	4413      	add	r3, r2
 8008226:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800822e:	0151      	lsls	r1, r2, #5
 8008230:	69fa      	ldr	r2, [r7, #28]
 8008232:	440a      	add	r2, r1
 8008234:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008238:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800823c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800823e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008240:	015a      	lsls	r2, r3, #5
 8008242:	69fb      	ldr	r3, [r7, #28]
 8008244:	4413      	add	r3, r2
 8008246:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800824a:	461a      	mov	r2, r3
 800824c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8008250:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008252:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008254:	015a      	lsls	r2, r3, #5
 8008256:	69fb      	ldr	r3, [r7, #28]
 8008258:	4413      	add	r3, r2
 800825a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008262:	0151      	lsls	r1, r2, #5
 8008264:	69fa      	ldr	r2, [r7, #28]
 8008266:	440a      	add	r2, r1
 8008268:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800826c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008270:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008272:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008274:	015a      	lsls	r2, r3, #5
 8008276:	69fb      	ldr	r3, [r7, #28]
 8008278:	4413      	add	r3, r2
 800827a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008282:	0151      	lsls	r1, r2, #5
 8008284:	69fa      	ldr	r2, [r7, #28]
 8008286:	440a      	add	r2, r1
 8008288:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800828c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008290:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008292:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008294:	3301      	adds	r3, #1
 8008296:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	791b      	ldrb	r3, [r3, #4]
 800829c:	461a      	mov	r2, r3
 800829e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082a0:	4293      	cmp	r3, r2
 80082a2:	d3b2      	bcc.n	800820a <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80082a4:	69fb      	ldr	r3, [r7, #28]
 80082a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80082aa:	69db      	ldr	r3, [r3, #28]
 80082ac:	69fa      	ldr	r2, [r7, #28]
 80082ae:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80082b2:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80082b6:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	7bdb      	ldrb	r3, [r3, #15]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d016      	beq.n	80082ee <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80082c0:	69fb      	ldr	r3, [r7, #28]
 80082c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80082c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80082ca:	69fa      	ldr	r2, [r7, #28]
 80082cc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80082d0:	f043 030b 	orr.w	r3, r3, #11
 80082d4:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80082d8:	69fb      	ldr	r3, [r7, #28]
 80082da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80082de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80082e0:	69fa      	ldr	r2, [r7, #28]
 80082e2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80082e6:	f043 030b 	orr.w	r3, r3, #11
 80082ea:	6453      	str	r3, [r2, #68]	@ 0x44
 80082ec:	e015      	b.n	800831a <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80082ee:	69fb      	ldr	r3, [r7, #28]
 80082f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80082f4:	695a      	ldr	r2, [r3, #20]
 80082f6:	69fb      	ldr	r3, [r7, #28]
 80082f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80082fc:	4619      	mov	r1, r3
 80082fe:	f242 032b 	movw	r3, #8235	@ 0x202b
 8008302:	4313      	orrs	r3, r2
 8008304:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8008306:	69fb      	ldr	r3, [r7, #28]
 8008308:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800830c:	691b      	ldr	r3, [r3, #16]
 800830e:	69fa      	ldr	r2, [r7, #28]
 8008310:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008314:	f043 030b 	orr.w	r3, r3, #11
 8008318:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800831a:	69fb      	ldr	r3, [r7, #28]
 800831c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	69fa      	ldr	r2, [r7, #28]
 8008324:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008328:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800832c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	6818      	ldr	r0, [r3, #0]
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800833c:	461a      	mov	r2, r3
 800833e:	f00c fd37 	bl	8014db0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	695a      	ldr	r2, [r3, #20]
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8008350:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	4618      	mov	r0, r3
 8008358:	f00c fc64 	bl	8014c24 <USB_ReadInterrupts>
 800835c:	4603      	mov	r3, r0
 800835e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008362:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008366:	d123      	bne.n	80083b0 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	4618      	mov	r0, r3
 800836e:	f00c fcfb 	bl	8014d68 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	4618      	mov	r0, r3
 8008378:	f00b fec8 	bl	801410c <USB_GetDevSpeed>
 800837c:	4603      	mov	r3, r0
 800837e:	461a      	mov	r2, r3
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681c      	ldr	r4, [r3, #0]
 8008388:	f001 ff82 	bl	800a290 <HAL_RCC_GetHCLKFreq>
 800838c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008392:	461a      	mov	r2, r3
 8008394:	4620      	mov	r0, r4
 8008396:	f00b fde5 	bl	8013f64 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800839a:	6878      	ldr	r0, [r7, #4]
 800839c:	f016 fabb 	bl	801e916 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	695a      	ldr	r2, [r3, #20]
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80083ae:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	4618      	mov	r0, r3
 80083b6:	f00c fc35 	bl	8014c24 <USB_ReadInterrupts>
 80083ba:	4603      	mov	r3, r0
 80083bc:	f003 0308 	and.w	r3, r3, #8
 80083c0:	2b08      	cmp	r3, #8
 80083c2:	d10a      	bne.n	80083da <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80083c4:	6878      	ldr	r0, [r7, #4]
 80083c6:	f016 fa98 	bl	801e8fa <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	695a      	ldr	r2, [r3, #20]
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	f002 0208 	and.w	r2, r2, #8
 80083d8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	4618      	mov	r0, r3
 80083e0:	f00c fc20 	bl	8014c24 <USB_ReadInterrupts>
 80083e4:	4603      	mov	r3, r0
 80083e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80083ea:	2b80      	cmp	r3, #128	@ 0x80
 80083ec:	d123      	bne.n	8008436 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80083ee:	6a3b      	ldr	r3, [r7, #32]
 80083f0:	699b      	ldr	r3, [r3, #24]
 80083f2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80083f6:	6a3b      	ldr	r3, [r7, #32]
 80083f8:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80083fa:	2301      	movs	r3, #1
 80083fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80083fe:	e014      	b.n	800842a <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8008400:	6879      	ldr	r1, [r7, #4]
 8008402:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008404:	4613      	mov	r3, r2
 8008406:	00db      	lsls	r3, r3, #3
 8008408:	4413      	add	r3, r2
 800840a:	009b      	lsls	r3, r3, #2
 800840c:	440b      	add	r3, r1
 800840e:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8008412:	781b      	ldrb	r3, [r3, #0]
 8008414:	2b01      	cmp	r3, #1
 8008416:	d105      	bne.n	8008424 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8008418:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800841a:	b2db      	uxtb	r3, r3
 800841c:	4619      	mov	r1, r3
 800841e:	6878      	ldr	r0, [r7, #4]
 8008420:	f000 faa8 	bl	8008974 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008424:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008426:	3301      	adds	r3, #1
 8008428:	627b      	str	r3, [r7, #36]	@ 0x24
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	791b      	ldrb	r3, [r3, #4]
 800842e:	461a      	mov	r2, r3
 8008430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008432:	4293      	cmp	r3, r2
 8008434:	d3e4      	bcc.n	8008400 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	4618      	mov	r0, r3
 800843c:	f00c fbf2 	bl	8014c24 <USB_ReadInterrupts>
 8008440:	4603      	mov	r3, r0
 8008442:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008446:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800844a:	d13c      	bne.n	80084c6 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800844c:	2301      	movs	r3, #1
 800844e:	627b      	str	r3, [r7, #36]	@ 0x24
 8008450:	e02b      	b.n	80084aa <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8008452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008454:	015a      	lsls	r2, r3, #5
 8008456:	69fb      	ldr	r3, [r7, #28]
 8008458:	4413      	add	r3, r2
 800845a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8008462:	6879      	ldr	r1, [r7, #4]
 8008464:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008466:	4613      	mov	r3, r2
 8008468:	00db      	lsls	r3, r3, #3
 800846a:	4413      	add	r3, r2
 800846c:	009b      	lsls	r3, r3, #2
 800846e:	440b      	add	r3, r1
 8008470:	3318      	adds	r3, #24
 8008472:	781b      	ldrb	r3, [r3, #0]
 8008474:	2b01      	cmp	r3, #1
 8008476:	d115      	bne.n	80084a4 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8008478:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800847a:	2b00      	cmp	r3, #0
 800847c:	da12      	bge.n	80084a4 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800847e:	6879      	ldr	r1, [r7, #4]
 8008480:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008482:	4613      	mov	r3, r2
 8008484:	00db      	lsls	r3, r3, #3
 8008486:	4413      	add	r3, r2
 8008488:	009b      	lsls	r3, r3, #2
 800848a:	440b      	add	r3, r1
 800848c:	3317      	adds	r3, #23
 800848e:	2201      	movs	r2, #1
 8008490:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8008492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008494:	b2db      	uxtb	r3, r3
 8008496:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800849a:	b2db      	uxtb	r3, r3
 800849c:	4619      	mov	r1, r3
 800849e:	6878      	ldr	r0, [r7, #4]
 80084a0:	f000 fa68 	bl	8008974 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80084a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084a6:	3301      	adds	r3, #1
 80084a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	791b      	ldrb	r3, [r3, #4]
 80084ae:	461a      	mov	r2, r3
 80084b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084b2:	4293      	cmp	r3, r2
 80084b4:	d3cd      	bcc.n	8008452 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	695a      	ldr	r2, [r3, #20]
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80084c4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	4618      	mov	r0, r3
 80084cc:	f00c fbaa 	bl	8014c24 <USB_ReadInterrupts>
 80084d0:	4603      	mov	r3, r0
 80084d2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80084d6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80084da:	d156      	bne.n	800858a <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80084dc:	2301      	movs	r3, #1
 80084de:	627b      	str	r3, [r7, #36]	@ 0x24
 80084e0:	e045      	b.n	800856e <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80084e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084e4:	015a      	lsls	r2, r3, #5
 80084e6:	69fb      	ldr	r3, [r7, #28]
 80084e8:	4413      	add	r3, r2
 80084ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80084f2:	6879      	ldr	r1, [r7, #4]
 80084f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80084f6:	4613      	mov	r3, r2
 80084f8:	00db      	lsls	r3, r3, #3
 80084fa:	4413      	add	r3, r2
 80084fc:	009b      	lsls	r3, r3, #2
 80084fe:	440b      	add	r3, r1
 8008500:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8008504:	781b      	ldrb	r3, [r3, #0]
 8008506:	2b01      	cmp	r3, #1
 8008508:	d12e      	bne.n	8008568 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800850a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800850c:	2b00      	cmp	r3, #0
 800850e:	da2b      	bge.n	8008568 <HAL_PCD_IRQHandler+0x908>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8008510:	69bb      	ldr	r3, [r7, #24]
 8008512:	0c1a      	lsrs	r2, r3, #16
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 800851a:	4053      	eors	r3, r2
 800851c:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8008520:	2b00      	cmp	r3, #0
 8008522:	d121      	bne.n	8008568 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8008524:	6879      	ldr	r1, [r7, #4]
 8008526:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008528:	4613      	mov	r3, r2
 800852a:	00db      	lsls	r3, r3, #3
 800852c:	4413      	add	r3, r2
 800852e:	009b      	lsls	r3, r3, #2
 8008530:	440b      	add	r3, r1
 8008532:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8008536:	2201      	movs	r2, #1
 8008538:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800853a:	6a3b      	ldr	r3, [r7, #32]
 800853c:	699b      	ldr	r3, [r3, #24]
 800853e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008542:	6a3b      	ldr	r3, [r7, #32]
 8008544:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8008546:	6a3b      	ldr	r3, [r7, #32]
 8008548:	695b      	ldr	r3, [r3, #20]
 800854a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800854e:	2b00      	cmp	r3, #0
 8008550:	d10a      	bne.n	8008568 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8008552:	69fb      	ldr	r3, [r7, #28]
 8008554:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008558:	685b      	ldr	r3, [r3, #4]
 800855a:	69fa      	ldr	r2, [r7, #28]
 800855c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008560:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008564:	6053      	str	r3, [r2, #4]
            break;
 8008566:	e008      	b.n	800857a <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800856a:	3301      	adds	r3, #1
 800856c:	627b      	str	r3, [r7, #36]	@ 0x24
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	791b      	ldrb	r3, [r3, #4]
 8008572:	461a      	mov	r2, r3
 8008574:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008576:	4293      	cmp	r3, r2
 8008578:	d3b3      	bcc.n	80084e2 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	695a      	ldr	r2, [r3, #20]
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8008588:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	4618      	mov	r0, r3
 8008590:	f00c fb48 	bl	8014c24 <USB_ReadInterrupts>
 8008594:	4603      	mov	r3, r0
 8008596:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800859a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800859e:	d10a      	bne.n	80085b6 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80085a0:	6878      	ldr	r0, [r7, #4]
 80085a2:	f016 fa39 	bl	801ea18 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	695a      	ldr	r2, [r3, #20]
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80085b4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	4618      	mov	r0, r3
 80085bc:	f00c fb32 	bl	8014c24 <USB_ReadInterrupts>
 80085c0:	4603      	mov	r3, r0
 80085c2:	f003 0304 	and.w	r3, r3, #4
 80085c6:	2b04      	cmp	r3, #4
 80085c8:	d115      	bne.n	80085f6 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	685b      	ldr	r3, [r3, #4]
 80085d0:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80085d2:	69bb      	ldr	r3, [r7, #24]
 80085d4:	f003 0304 	and.w	r3, r3, #4
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d002      	beq.n	80085e2 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80085dc:	6878      	ldr	r0, [r7, #4]
 80085de:	f016 fa29 	bl	801ea34 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	6859      	ldr	r1, [r3, #4]
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	69ba      	ldr	r2, [r7, #24]
 80085ee:	430a      	orrs	r2, r1
 80085f0:	605a      	str	r2, [r3, #4]
 80085f2:	e000      	b.n	80085f6 <HAL_PCD_IRQHandler+0x996>
      return;
 80085f4:	bf00      	nop
    }
  }
}
 80085f6:	3734      	adds	r7, #52	@ 0x34
 80085f8:	46bd      	mov	sp, r7
 80085fa:	bd90      	pop	{r4, r7, pc}

080085fc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80085fc:	b580      	push	{r7, lr}
 80085fe:	b082      	sub	sp, #8
 8008600:	af00      	add	r7, sp, #0
 8008602:	6078      	str	r0, [r7, #4]
 8008604:	460b      	mov	r3, r1
 8008606:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800860e:	2b01      	cmp	r3, #1
 8008610:	d101      	bne.n	8008616 <HAL_PCD_SetAddress+0x1a>
 8008612:	2302      	movs	r3, #2
 8008614:	e012      	b.n	800863c <HAL_PCD_SetAddress+0x40>
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	2201      	movs	r2, #1
 800861a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	78fa      	ldrb	r2, [r7, #3]
 8008622:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	78fa      	ldrb	r2, [r7, #3]
 800862a:	4611      	mov	r1, r2
 800862c:	4618      	mov	r0, r3
 800862e:	f00c fad3 	bl	8014bd8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	2200      	movs	r2, #0
 8008636:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800863a:	2300      	movs	r3, #0
}
 800863c:	4618      	mov	r0, r3
 800863e:	3708      	adds	r7, #8
 8008640:	46bd      	mov	sp, r7
 8008642:	bd80      	pop	{r7, pc}

08008644 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8008644:	b580      	push	{r7, lr}
 8008646:	b084      	sub	sp, #16
 8008648:	af00      	add	r7, sp, #0
 800864a:	6078      	str	r0, [r7, #4]
 800864c:	4608      	mov	r0, r1
 800864e:	4611      	mov	r1, r2
 8008650:	461a      	mov	r2, r3
 8008652:	4603      	mov	r3, r0
 8008654:	70fb      	strb	r3, [r7, #3]
 8008656:	460b      	mov	r3, r1
 8008658:	803b      	strh	r3, [r7, #0]
 800865a:	4613      	mov	r3, r2
 800865c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800865e:	2300      	movs	r3, #0
 8008660:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008662:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008666:	2b00      	cmp	r3, #0
 8008668:	da0f      	bge.n	800868a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800866a:	78fb      	ldrb	r3, [r7, #3]
 800866c:	f003 020f 	and.w	r2, r3, #15
 8008670:	4613      	mov	r3, r2
 8008672:	00db      	lsls	r3, r3, #3
 8008674:	4413      	add	r3, r2
 8008676:	009b      	lsls	r3, r3, #2
 8008678:	3310      	adds	r3, #16
 800867a:	687a      	ldr	r2, [r7, #4]
 800867c:	4413      	add	r3, r2
 800867e:	3304      	adds	r3, #4
 8008680:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	2201      	movs	r2, #1
 8008686:	705a      	strb	r2, [r3, #1]
 8008688:	e00f      	b.n	80086aa <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800868a:	78fb      	ldrb	r3, [r7, #3]
 800868c:	f003 020f 	and.w	r2, r3, #15
 8008690:	4613      	mov	r3, r2
 8008692:	00db      	lsls	r3, r3, #3
 8008694:	4413      	add	r3, r2
 8008696:	009b      	lsls	r3, r3, #2
 8008698:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800869c:	687a      	ldr	r2, [r7, #4]
 800869e:	4413      	add	r3, r2
 80086a0:	3304      	adds	r3, #4
 80086a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	2200      	movs	r2, #0
 80086a8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80086aa:	78fb      	ldrb	r3, [r7, #3]
 80086ac:	f003 030f 	and.w	r3, r3, #15
 80086b0:	b2da      	uxtb	r2, r3
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80086b6:	883b      	ldrh	r3, [r7, #0]
 80086b8:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	78ba      	ldrb	r2, [r7, #2]
 80086c4:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	785b      	ldrb	r3, [r3, #1]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d004      	beq.n	80086d8 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	781b      	ldrb	r3, [r3, #0]
 80086d2:	461a      	mov	r2, r3
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80086d8:	78bb      	ldrb	r3, [r7, #2]
 80086da:	2b02      	cmp	r3, #2
 80086dc:	d102      	bne.n	80086e4 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	2200      	movs	r2, #0
 80086e2:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80086ea:	2b01      	cmp	r3, #1
 80086ec:	d101      	bne.n	80086f2 <HAL_PCD_EP_Open+0xae>
 80086ee:	2302      	movs	r3, #2
 80086f0:	e00e      	b.n	8008710 <HAL_PCD_EP_Open+0xcc>
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	2201      	movs	r2, #1
 80086f6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	68f9      	ldr	r1, [r7, #12]
 8008700:	4618      	mov	r0, r3
 8008702:	f00b fd29 	bl	8014158 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	2200      	movs	r2, #0
 800870a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 800870e:	7afb      	ldrb	r3, [r7, #11]
}
 8008710:	4618      	mov	r0, r3
 8008712:	3710      	adds	r7, #16
 8008714:	46bd      	mov	sp, r7
 8008716:	bd80      	pop	{r7, pc}

08008718 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008718:	b580      	push	{r7, lr}
 800871a:	b086      	sub	sp, #24
 800871c:	af00      	add	r7, sp, #0
 800871e:	60f8      	str	r0, [r7, #12]
 8008720:	607a      	str	r2, [r7, #4]
 8008722:	603b      	str	r3, [r7, #0]
 8008724:	460b      	mov	r3, r1
 8008726:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008728:	7afb      	ldrb	r3, [r7, #11]
 800872a:	f003 020f 	and.w	r2, r3, #15
 800872e:	4613      	mov	r3, r2
 8008730:	00db      	lsls	r3, r3, #3
 8008732:	4413      	add	r3, r2
 8008734:	009b      	lsls	r3, r3, #2
 8008736:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800873a:	68fa      	ldr	r2, [r7, #12]
 800873c:	4413      	add	r3, r2
 800873e:	3304      	adds	r3, #4
 8008740:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008742:	697b      	ldr	r3, [r7, #20]
 8008744:	687a      	ldr	r2, [r7, #4]
 8008746:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8008748:	697b      	ldr	r3, [r7, #20]
 800874a:	683a      	ldr	r2, [r7, #0]
 800874c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800874e:	697b      	ldr	r3, [r7, #20]
 8008750:	2200      	movs	r2, #0
 8008752:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8008754:	697b      	ldr	r3, [r7, #20]
 8008756:	2200      	movs	r2, #0
 8008758:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800875a:	7afb      	ldrb	r3, [r7, #11]
 800875c:	f003 030f 	and.w	r3, r3, #15
 8008760:	b2da      	uxtb	r2, r3
 8008762:	697b      	ldr	r3, [r7, #20]
 8008764:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	799b      	ldrb	r3, [r3, #6]
 800876a:	2b01      	cmp	r3, #1
 800876c:	d102      	bne.n	8008774 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800876e:	687a      	ldr	r2, [r7, #4]
 8008770:	697b      	ldr	r3, [r7, #20]
 8008772:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	6818      	ldr	r0, [r3, #0]
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	799b      	ldrb	r3, [r3, #6]
 800877c:	461a      	mov	r2, r3
 800877e:	6979      	ldr	r1, [r7, #20]
 8008780:	f00b fd72 	bl	8014268 <USB_EPStartXfer>

  return HAL_OK;
 8008784:	2300      	movs	r3, #0
}
 8008786:	4618      	mov	r0, r3
 8008788:	3718      	adds	r7, #24
 800878a:	46bd      	mov	sp, r7
 800878c:	bd80      	pop	{r7, pc}

0800878e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800878e:	b580      	push	{r7, lr}
 8008790:	b086      	sub	sp, #24
 8008792:	af00      	add	r7, sp, #0
 8008794:	60f8      	str	r0, [r7, #12]
 8008796:	607a      	str	r2, [r7, #4]
 8008798:	603b      	str	r3, [r7, #0]
 800879a:	460b      	mov	r3, r1
 800879c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800879e:	7afb      	ldrb	r3, [r7, #11]
 80087a0:	f003 020f 	and.w	r2, r3, #15
 80087a4:	4613      	mov	r3, r2
 80087a6:	00db      	lsls	r3, r3, #3
 80087a8:	4413      	add	r3, r2
 80087aa:	009b      	lsls	r3, r3, #2
 80087ac:	3310      	adds	r3, #16
 80087ae:	68fa      	ldr	r2, [r7, #12]
 80087b0:	4413      	add	r3, r2
 80087b2:	3304      	adds	r3, #4
 80087b4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80087b6:	697b      	ldr	r3, [r7, #20]
 80087b8:	687a      	ldr	r2, [r7, #4]
 80087ba:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80087bc:	697b      	ldr	r3, [r7, #20]
 80087be:	683a      	ldr	r2, [r7, #0]
 80087c0:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80087c2:	697b      	ldr	r3, [r7, #20]
 80087c4:	2200      	movs	r2, #0
 80087c6:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80087c8:	697b      	ldr	r3, [r7, #20]
 80087ca:	2201      	movs	r2, #1
 80087cc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80087ce:	7afb      	ldrb	r3, [r7, #11]
 80087d0:	f003 030f 	and.w	r3, r3, #15
 80087d4:	b2da      	uxtb	r2, r3
 80087d6:	697b      	ldr	r3, [r7, #20]
 80087d8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	799b      	ldrb	r3, [r3, #6]
 80087de:	2b01      	cmp	r3, #1
 80087e0:	d102      	bne.n	80087e8 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80087e2:	687a      	ldr	r2, [r7, #4]
 80087e4:	697b      	ldr	r3, [r7, #20]
 80087e6:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	6818      	ldr	r0, [r3, #0]
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	799b      	ldrb	r3, [r3, #6]
 80087f0:	461a      	mov	r2, r3
 80087f2:	6979      	ldr	r1, [r7, #20]
 80087f4:	f00b fd38 	bl	8014268 <USB_EPStartXfer>

  return HAL_OK;
 80087f8:	2300      	movs	r3, #0
}
 80087fa:	4618      	mov	r0, r3
 80087fc:	3718      	adds	r7, #24
 80087fe:	46bd      	mov	sp, r7
 8008800:	bd80      	pop	{r7, pc}

08008802 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008802:	b580      	push	{r7, lr}
 8008804:	b084      	sub	sp, #16
 8008806:	af00      	add	r7, sp, #0
 8008808:	6078      	str	r0, [r7, #4]
 800880a:	460b      	mov	r3, r1
 800880c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800880e:	78fb      	ldrb	r3, [r7, #3]
 8008810:	f003 030f 	and.w	r3, r3, #15
 8008814:	687a      	ldr	r2, [r7, #4]
 8008816:	7912      	ldrb	r2, [r2, #4]
 8008818:	4293      	cmp	r3, r2
 800881a:	d901      	bls.n	8008820 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800881c:	2301      	movs	r3, #1
 800881e:	e04f      	b.n	80088c0 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8008820:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008824:	2b00      	cmp	r3, #0
 8008826:	da0f      	bge.n	8008848 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008828:	78fb      	ldrb	r3, [r7, #3]
 800882a:	f003 020f 	and.w	r2, r3, #15
 800882e:	4613      	mov	r3, r2
 8008830:	00db      	lsls	r3, r3, #3
 8008832:	4413      	add	r3, r2
 8008834:	009b      	lsls	r3, r3, #2
 8008836:	3310      	adds	r3, #16
 8008838:	687a      	ldr	r2, [r7, #4]
 800883a:	4413      	add	r3, r2
 800883c:	3304      	adds	r3, #4
 800883e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	2201      	movs	r2, #1
 8008844:	705a      	strb	r2, [r3, #1]
 8008846:	e00d      	b.n	8008864 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8008848:	78fa      	ldrb	r2, [r7, #3]
 800884a:	4613      	mov	r3, r2
 800884c:	00db      	lsls	r3, r3, #3
 800884e:	4413      	add	r3, r2
 8008850:	009b      	lsls	r3, r3, #2
 8008852:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8008856:	687a      	ldr	r2, [r7, #4]
 8008858:	4413      	add	r3, r2
 800885a:	3304      	adds	r3, #4
 800885c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	2200      	movs	r2, #0
 8008862:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	2201      	movs	r2, #1
 8008868:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800886a:	78fb      	ldrb	r3, [r7, #3]
 800886c:	f003 030f 	and.w	r3, r3, #15
 8008870:	b2da      	uxtb	r2, r3
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800887c:	2b01      	cmp	r3, #1
 800887e:	d101      	bne.n	8008884 <HAL_PCD_EP_SetStall+0x82>
 8008880:	2302      	movs	r3, #2
 8008882:	e01d      	b.n	80088c0 <HAL_PCD_EP_SetStall+0xbe>
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	2201      	movs	r2, #1
 8008888:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	68f9      	ldr	r1, [r7, #12]
 8008892:	4618      	mov	r0, r3
 8008894:	f00c f8cc 	bl	8014a30 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008898:	78fb      	ldrb	r3, [r7, #3]
 800889a:	f003 030f 	and.w	r3, r3, #15
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d109      	bne.n	80088b6 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	6818      	ldr	r0, [r3, #0]
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	7999      	ldrb	r1, [r3, #6]
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80088b0:	461a      	mov	r2, r3
 80088b2:	f00c fa7d 	bl	8014db0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	2200      	movs	r2, #0
 80088ba:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80088be:	2300      	movs	r3, #0
}
 80088c0:	4618      	mov	r0, r3
 80088c2:	3710      	adds	r7, #16
 80088c4:	46bd      	mov	sp, r7
 80088c6:	bd80      	pop	{r7, pc}

080088c8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80088c8:	b580      	push	{r7, lr}
 80088ca:	b084      	sub	sp, #16
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	6078      	str	r0, [r7, #4]
 80088d0:	460b      	mov	r3, r1
 80088d2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80088d4:	78fb      	ldrb	r3, [r7, #3]
 80088d6:	f003 030f 	and.w	r3, r3, #15
 80088da:	687a      	ldr	r2, [r7, #4]
 80088dc:	7912      	ldrb	r2, [r2, #4]
 80088de:	4293      	cmp	r3, r2
 80088e0:	d901      	bls.n	80088e6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80088e2:	2301      	movs	r3, #1
 80088e4:	e042      	b.n	800896c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80088e6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	da0f      	bge.n	800890e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80088ee:	78fb      	ldrb	r3, [r7, #3]
 80088f0:	f003 020f 	and.w	r2, r3, #15
 80088f4:	4613      	mov	r3, r2
 80088f6:	00db      	lsls	r3, r3, #3
 80088f8:	4413      	add	r3, r2
 80088fa:	009b      	lsls	r3, r3, #2
 80088fc:	3310      	adds	r3, #16
 80088fe:	687a      	ldr	r2, [r7, #4]
 8008900:	4413      	add	r3, r2
 8008902:	3304      	adds	r3, #4
 8008904:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	2201      	movs	r2, #1
 800890a:	705a      	strb	r2, [r3, #1]
 800890c:	e00f      	b.n	800892e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800890e:	78fb      	ldrb	r3, [r7, #3]
 8008910:	f003 020f 	and.w	r2, r3, #15
 8008914:	4613      	mov	r3, r2
 8008916:	00db      	lsls	r3, r3, #3
 8008918:	4413      	add	r3, r2
 800891a:	009b      	lsls	r3, r3, #2
 800891c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8008920:	687a      	ldr	r2, [r7, #4]
 8008922:	4413      	add	r3, r2
 8008924:	3304      	adds	r3, #4
 8008926:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	2200      	movs	r2, #0
 800892c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	2200      	movs	r2, #0
 8008932:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008934:	78fb      	ldrb	r3, [r7, #3]
 8008936:	f003 030f 	and.w	r3, r3, #15
 800893a:	b2da      	uxtb	r2, r3
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8008946:	2b01      	cmp	r3, #1
 8008948:	d101      	bne.n	800894e <HAL_PCD_EP_ClrStall+0x86>
 800894a:	2302      	movs	r3, #2
 800894c:	e00e      	b.n	800896c <HAL_PCD_EP_ClrStall+0xa4>
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	2201      	movs	r2, #1
 8008952:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	68f9      	ldr	r1, [r7, #12]
 800895c:	4618      	mov	r0, r3
 800895e:	f00c f8d5 	bl	8014b0c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	2200      	movs	r2, #0
 8008966:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800896a:	2300      	movs	r3, #0
}
 800896c:	4618      	mov	r0, r3
 800896e:	3710      	adds	r7, #16
 8008970:	46bd      	mov	sp, r7
 8008972:	bd80      	pop	{r7, pc}

08008974 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008974:	b580      	push	{r7, lr}
 8008976:	b084      	sub	sp, #16
 8008978:	af00      	add	r7, sp, #0
 800897a:	6078      	str	r0, [r7, #4]
 800897c:	460b      	mov	r3, r1
 800897e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8008980:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008984:	2b00      	cmp	r3, #0
 8008986:	da0c      	bge.n	80089a2 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008988:	78fb      	ldrb	r3, [r7, #3]
 800898a:	f003 020f 	and.w	r2, r3, #15
 800898e:	4613      	mov	r3, r2
 8008990:	00db      	lsls	r3, r3, #3
 8008992:	4413      	add	r3, r2
 8008994:	009b      	lsls	r3, r3, #2
 8008996:	3310      	adds	r3, #16
 8008998:	687a      	ldr	r2, [r7, #4]
 800899a:	4413      	add	r3, r2
 800899c:	3304      	adds	r3, #4
 800899e:	60fb      	str	r3, [r7, #12]
 80089a0:	e00c      	b.n	80089bc <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80089a2:	78fb      	ldrb	r3, [r7, #3]
 80089a4:	f003 020f 	and.w	r2, r3, #15
 80089a8:	4613      	mov	r3, r2
 80089aa:	00db      	lsls	r3, r3, #3
 80089ac:	4413      	add	r3, r2
 80089ae:	009b      	lsls	r3, r3, #2
 80089b0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80089b4:	687a      	ldr	r2, [r7, #4]
 80089b6:	4413      	add	r3, r2
 80089b8:	3304      	adds	r3, #4
 80089ba:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	68f9      	ldr	r1, [r7, #12]
 80089c2:	4618      	mov	r0, r3
 80089c4:	f00b fef4 	bl	80147b0 <USB_EPStopXfer>
 80089c8:	4603      	mov	r3, r0
 80089ca:	72fb      	strb	r3, [r7, #11]

  return ret;
 80089cc:	7afb      	ldrb	r3, [r7, #11]
}
 80089ce:	4618      	mov	r0, r3
 80089d0:	3710      	adds	r7, #16
 80089d2:	46bd      	mov	sp, r7
 80089d4:	bd80      	pop	{r7, pc}

080089d6 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80089d6:	b580      	push	{r7, lr}
 80089d8:	b08a      	sub	sp, #40	@ 0x28
 80089da:	af02      	add	r7, sp, #8
 80089dc:	6078      	str	r0, [r7, #4]
 80089de:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089e6:	697b      	ldr	r3, [r7, #20]
 80089e8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80089ea:	683a      	ldr	r2, [r7, #0]
 80089ec:	4613      	mov	r3, r2
 80089ee:	00db      	lsls	r3, r3, #3
 80089f0:	4413      	add	r3, r2
 80089f2:	009b      	lsls	r3, r3, #2
 80089f4:	3310      	adds	r3, #16
 80089f6:	687a      	ldr	r2, [r7, #4]
 80089f8:	4413      	add	r3, r2
 80089fa:	3304      	adds	r3, #4
 80089fc:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	695a      	ldr	r2, [r3, #20]
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	691b      	ldr	r3, [r3, #16]
 8008a06:	429a      	cmp	r2, r3
 8008a08:	d901      	bls.n	8008a0e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8008a0a:	2301      	movs	r3, #1
 8008a0c:	e06b      	b.n	8008ae6 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	691a      	ldr	r2, [r3, #16]
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	695b      	ldr	r3, [r3, #20]
 8008a16:	1ad3      	subs	r3, r2, r3
 8008a18:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	689b      	ldr	r3, [r3, #8]
 8008a1e:	69fa      	ldr	r2, [r7, #28]
 8008a20:	429a      	cmp	r2, r3
 8008a22:	d902      	bls.n	8008a2a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	689b      	ldr	r3, [r3, #8]
 8008a28:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8008a2a:	69fb      	ldr	r3, [r7, #28]
 8008a2c:	3303      	adds	r3, #3
 8008a2e:	089b      	lsrs	r3, r3, #2
 8008a30:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008a32:	e02a      	b.n	8008a8a <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	691a      	ldr	r2, [r3, #16]
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	695b      	ldr	r3, [r3, #20]
 8008a3c:	1ad3      	subs	r3, r2, r3
 8008a3e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	689b      	ldr	r3, [r3, #8]
 8008a44:	69fa      	ldr	r2, [r7, #28]
 8008a46:	429a      	cmp	r2, r3
 8008a48:	d902      	bls.n	8008a50 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	689b      	ldr	r3, [r3, #8]
 8008a4e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8008a50:	69fb      	ldr	r3, [r7, #28]
 8008a52:	3303      	adds	r3, #3
 8008a54:	089b      	lsrs	r3, r3, #2
 8008a56:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	68d9      	ldr	r1, [r3, #12]
 8008a5c:	683b      	ldr	r3, [r7, #0]
 8008a5e:	b2da      	uxtb	r2, r3
 8008a60:	69fb      	ldr	r3, [r7, #28]
 8008a62:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8008a68:	9300      	str	r3, [sp, #0]
 8008a6a:	4603      	mov	r3, r0
 8008a6c:	6978      	ldr	r0, [r7, #20]
 8008a6e:	f00b ff49 	bl	8014904 <USB_WritePacket>

    ep->xfer_buff  += len;
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	68da      	ldr	r2, [r3, #12]
 8008a76:	69fb      	ldr	r3, [r7, #28]
 8008a78:	441a      	add	r2, r3
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	695a      	ldr	r2, [r3, #20]
 8008a82:	69fb      	ldr	r3, [r7, #28]
 8008a84:	441a      	add	r2, r3
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008a8a:	683b      	ldr	r3, [r7, #0]
 8008a8c:	015a      	lsls	r2, r3, #5
 8008a8e:	693b      	ldr	r3, [r7, #16]
 8008a90:	4413      	add	r3, r2
 8008a92:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008a96:	699b      	ldr	r3, [r3, #24]
 8008a98:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8008a9a:	69ba      	ldr	r2, [r7, #24]
 8008a9c:	429a      	cmp	r2, r3
 8008a9e:	d809      	bhi.n	8008ab4 <PCD_WriteEmptyTxFifo+0xde>
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	695a      	ldr	r2, [r3, #20]
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008aa8:	429a      	cmp	r2, r3
 8008aaa:	d203      	bcs.n	8008ab4 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	691b      	ldr	r3, [r3, #16]
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d1bf      	bne.n	8008a34 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	691a      	ldr	r2, [r3, #16]
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	695b      	ldr	r3, [r3, #20]
 8008abc:	429a      	cmp	r2, r3
 8008abe:	d811      	bhi.n	8008ae4 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8008ac0:	683b      	ldr	r3, [r7, #0]
 8008ac2:	f003 030f 	and.w	r3, r3, #15
 8008ac6:	2201      	movs	r2, #1
 8008ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8008acc:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008ace:	693b      	ldr	r3, [r7, #16]
 8008ad0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008ad4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008ad6:	68bb      	ldr	r3, [r7, #8]
 8008ad8:	43db      	mvns	r3, r3
 8008ada:	6939      	ldr	r1, [r7, #16]
 8008adc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008ae0:	4013      	ands	r3, r2
 8008ae2:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8008ae4:	2300      	movs	r3, #0
}
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	3720      	adds	r7, #32
 8008aea:	46bd      	mov	sp, r7
 8008aec:	bd80      	pop	{r7, pc}
	...

08008af0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008af0:	b580      	push	{r7, lr}
 8008af2:	b088      	sub	sp, #32
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	6078      	str	r0, [r7, #4]
 8008af8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b00:	69fb      	ldr	r3, [r7, #28]
 8008b02:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8008b04:	69fb      	ldr	r3, [r7, #28]
 8008b06:	333c      	adds	r3, #60	@ 0x3c
 8008b08:	3304      	adds	r3, #4
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8008b0e:	683b      	ldr	r3, [r7, #0]
 8008b10:	015a      	lsls	r2, r3, #5
 8008b12:	69bb      	ldr	r3, [r7, #24]
 8008b14:	4413      	add	r3, r2
 8008b16:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b1a:	689b      	ldr	r3, [r3, #8]
 8008b1c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	799b      	ldrb	r3, [r3, #6]
 8008b22:	2b01      	cmp	r3, #1
 8008b24:	d17b      	bne.n	8008c1e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8008b26:	693b      	ldr	r3, [r7, #16]
 8008b28:	f003 0308 	and.w	r3, r3, #8
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d015      	beq.n	8008b5c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008b30:	697b      	ldr	r3, [r7, #20]
 8008b32:	4a61      	ldr	r2, [pc, #388]	@ (8008cb8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8008b34:	4293      	cmp	r3, r2
 8008b36:	f240 80b9 	bls.w	8008cac <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008b3a:	693b      	ldr	r3, [r7, #16]
 8008b3c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	f000 80b3 	beq.w	8008cac <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008b46:	683b      	ldr	r3, [r7, #0]
 8008b48:	015a      	lsls	r2, r3, #5
 8008b4a:	69bb      	ldr	r3, [r7, #24]
 8008b4c:	4413      	add	r3, r2
 8008b4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b52:	461a      	mov	r2, r3
 8008b54:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008b58:	6093      	str	r3, [r2, #8]
 8008b5a:	e0a7      	b.n	8008cac <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8008b5c:	693b      	ldr	r3, [r7, #16]
 8008b5e:	f003 0320 	and.w	r3, r3, #32
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d009      	beq.n	8008b7a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008b66:	683b      	ldr	r3, [r7, #0]
 8008b68:	015a      	lsls	r2, r3, #5
 8008b6a:	69bb      	ldr	r3, [r7, #24]
 8008b6c:	4413      	add	r3, r2
 8008b6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b72:	461a      	mov	r2, r3
 8008b74:	2320      	movs	r3, #32
 8008b76:	6093      	str	r3, [r2, #8]
 8008b78:	e098      	b.n	8008cac <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8008b7a:	693b      	ldr	r3, [r7, #16]
 8008b7c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	f040 8093 	bne.w	8008cac <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008b86:	697b      	ldr	r3, [r7, #20]
 8008b88:	4a4b      	ldr	r2, [pc, #300]	@ (8008cb8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8008b8a:	4293      	cmp	r3, r2
 8008b8c:	d90f      	bls.n	8008bae <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008b8e:	693b      	ldr	r3, [r7, #16]
 8008b90:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d00a      	beq.n	8008bae <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008b98:	683b      	ldr	r3, [r7, #0]
 8008b9a:	015a      	lsls	r2, r3, #5
 8008b9c:	69bb      	ldr	r3, [r7, #24]
 8008b9e:	4413      	add	r3, r2
 8008ba0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008ba4:	461a      	mov	r2, r3
 8008ba6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008baa:	6093      	str	r3, [r2, #8]
 8008bac:	e07e      	b.n	8008cac <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8008bae:	683a      	ldr	r2, [r7, #0]
 8008bb0:	4613      	mov	r3, r2
 8008bb2:	00db      	lsls	r3, r3, #3
 8008bb4:	4413      	add	r3, r2
 8008bb6:	009b      	lsls	r3, r3, #2
 8008bb8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8008bbc:	687a      	ldr	r2, [r7, #4]
 8008bbe:	4413      	add	r3, r2
 8008bc0:	3304      	adds	r3, #4
 8008bc2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	6a1a      	ldr	r2, [r3, #32]
 8008bc8:	683b      	ldr	r3, [r7, #0]
 8008bca:	0159      	lsls	r1, r3, #5
 8008bcc:	69bb      	ldr	r3, [r7, #24]
 8008bce:	440b      	add	r3, r1
 8008bd0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008bd4:	691b      	ldr	r3, [r3, #16]
 8008bd6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008bda:	1ad2      	subs	r2, r2, r3
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8008be0:	683b      	ldr	r3, [r7, #0]
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d114      	bne.n	8008c10 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	691b      	ldr	r3, [r3, #16]
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d109      	bne.n	8008c02 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	6818      	ldr	r0, [r3, #0]
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008bf8:	461a      	mov	r2, r3
 8008bfa:	2101      	movs	r1, #1
 8008bfc:	f00c f8d8 	bl	8014db0 <USB_EP0_OutStart>
 8008c00:	e006      	b.n	8008c10 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	68da      	ldr	r2, [r3, #12]
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	695b      	ldr	r3, [r3, #20]
 8008c0a:	441a      	add	r2, r3
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008c10:	683b      	ldr	r3, [r7, #0]
 8008c12:	b2db      	uxtb	r3, r3
 8008c14:	4619      	mov	r1, r3
 8008c16:	6878      	ldr	r0, [r7, #4]
 8008c18:	f015 fe3a 	bl	801e890 <HAL_PCD_DataOutStageCallback>
 8008c1c:	e046      	b.n	8008cac <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8008c1e:	697b      	ldr	r3, [r7, #20]
 8008c20:	4a26      	ldr	r2, [pc, #152]	@ (8008cbc <PCD_EP_OutXfrComplete_int+0x1cc>)
 8008c22:	4293      	cmp	r3, r2
 8008c24:	d124      	bne.n	8008c70 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8008c26:	693b      	ldr	r3, [r7, #16]
 8008c28:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d00a      	beq.n	8008c46 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008c30:	683b      	ldr	r3, [r7, #0]
 8008c32:	015a      	lsls	r2, r3, #5
 8008c34:	69bb      	ldr	r3, [r7, #24]
 8008c36:	4413      	add	r3, r2
 8008c38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008c3c:	461a      	mov	r2, r3
 8008c3e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008c42:	6093      	str	r3, [r2, #8]
 8008c44:	e032      	b.n	8008cac <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8008c46:	693b      	ldr	r3, [r7, #16]
 8008c48:	f003 0320 	and.w	r3, r3, #32
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d008      	beq.n	8008c62 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008c50:	683b      	ldr	r3, [r7, #0]
 8008c52:	015a      	lsls	r2, r3, #5
 8008c54:	69bb      	ldr	r3, [r7, #24]
 8008c56:	4413      	add	r3, r2
 8008c58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008c5c:	461a      	mov	r2, r3
 8008c5e:	2320      	movs	r3, #32
 8008c60:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008c62:	683b      	ldr	r3, [r7, #0]
 8008c64:	b2db      	uxtb	r3, r3
 8008c66:	4619      	mov	r1, r3
 8008c68:	6878      	ldr	r0, [r7, #4]
 8008c6a:	f015 fe11 	bl	801e890 <HAL_PCD_DataOutStageCallback>
 8008c6e:	e01d      	b.n	8008cac <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8008c70:	683b      	ldr	r3, [r7, #0]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d114      	bne.n	8008ca0 <PCD_EP_OutXfrComplete_int+0x1b0>
 8008c76:	6879      	ldr	r1, [r7, #4]
 8008c78:	683a      	ldr	r2, [r7, #0]
 8008c7a:	4613      	mov	r3, r2
 8008c7c:	00db      	lsls	r3, r3, #3
 8008c7e:	4413      	add	r3, r2
 8008c80:	009b      	lsls	r3, r3, #2
 8008c82:	440b      	add	r3, r1
 8008c84:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d108      	bne.n	8008ca0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	6818      	ldr	r0, [r3, #0]
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008c98:	461a      	mov	r2, r3
 8008c9a:	2100      	movs	r1, #0
 8008c9c:	f00c f888 	bl	8014db0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008ca0:	683b      	ldr	r3, [r7, #0]
 8008ca2:	b2db      	uxtb	r3, r3
 8008ca4:	4619      	mov	r1, r3
 8008ca6:	6878      	ldr	r0, [r7, #4]
 8008ca8:	f015 fdf2 	bl	801e890 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8008cac:	2300      	movs	r3, #0
}
 8008cae:	4618      	mov	r0, r3
 8008cb0:	3720      	adds	r7, #32
 8008cb2:	46bd      	mov	sp, r7
 8008cb4:	bd80      	pop	{r7, pc}
 8008cb6:	bf00      	nop
 8008cb8:	4f54300a 	.word	0x4f54300a
 8008cbc:	4f54310a 	.word	0x4f54310a

08008cc0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008cc0:	b580      	push	{r7, lr}
 8008cc2:	b086      	sub	sp, #24
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	6078      	str	r0, [r7, #4]
 8008cc8:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008cd0:	697b      	ldr	r3, [r7, #20]
 8008cd2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8008cd4:	697b      	ldr	r3, [r7, #20]
 8008cd6:	333c      	adds	r3, #60	@ 0x3c
 8008cd8:	3304      	adds	r3, #4
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8008cde:	683b      	ldr	r3, [r7, #0]
 8008ce0:	015a      	lsls	r2, r3, #5
 8008ce2:	693b      	ldr	r3, [r7, #16]
 8008ce4:	4413      	add	r3, r2
 8008ce6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008cea:	689b      	ldr	r3, [r3, #8]
 8008cec:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	4a15      	ldr	r2, [pc, #84]	@ (8008d48 <PCD_EP_OutSetupPacket_int+0x88>)
 8008cf2:	4293      	cmp	r3, r2
 8008cf4:	d90e      	bls.n	8008d14 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008cf6:	68bb      	ldr	r3, [r7, #8]
 8008cf8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d009      	beq.n	8008d14 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008d00:	683b      	ldr	r3, [r7, #0]
 8008d02:	015a      	lsls	r2, r3, #5
 8008d04:	693b      	ldr	r3, [r7, #16]
 8008d06:	4413      	add	r3, r2
 8008d08:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008d0c:	461a      	mov	r2, r3
 8008d0e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008d12:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8008d14:	6878      	ldr	r0, [r7, #4]
 8008d16:	f015 fda9 	bl	801e86c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	4a0a      	ldr	r2, [pc, #40]	@ (8008d48 <PCD_EP_OutSetupPacket_int+0x88>)
 8008d1e:	4293      	cmp	r3, r2
 8008d20:	d90c      	bls.n	8008d3c <PCD_EP_OutSetupPacket_int+0x7c>
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	799b      	ldrb	r3, [r3, #6]
 8008d26:	2b01      	cmp	r3, #1
 8008d28:	d108      	bne.n	8008d3c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	6818      	ldr	r0, [r3, #0]
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008d34:	461a      	mov	r2, r3
 8008d36:	2101      	movs	r1, #1
 8008d38:	f00c f83a 	bl	8014db0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8008d3c:	2300      	movs	r3, #0
}
 8008d3e:	4618      	mov	r0, r3
 8008d40:	3718      	adds	r7, #24
 8008d42:	46bd      	mov	sp, r7
 8008d44:	bd80      	pop	{r7, pc}
 8008d46:	bf00      	nop
 8008d48:	4f54300a 	.word	0x4f54300a

08008d4c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8008d4c:	b480      	push	{r7}
 8008d4e:	b083      	sub	sp, #12
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	6078      	str	r0, [r7, #4]
 8008d54:	460b      	mov	r3, r1
 8008d56:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8008d58:	bf00      	nop
 8008d5a:	370c      	adds	r7, #12
 8008d5c:	46bd      	mov	sp, r7
 8008d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d62:	4770      	bx	lr

08008d64 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008d64:	b580      	push	{r7, lr}
 8008d66:	b084      	sub	sp, #16
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	2b02      	cmp	r3, #2
 8008d70:	d01c      	beq.n	8008dac <HAL_PWREx_ConfigSupply+0x48>
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	2b04      	cmp	r3, #4
 8008d76:	d019      	beq.n	8008dac <HAL_PWREx_ConfigSupply+0x48>
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	2b16      	cmp	r3, #22
 8008d7c:	d016      	beq.n	8008dac <HAL_PWREx_ConfigSupply+0x48>
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	2b26      	cmp	r3, #38	@ 0x26
 8008d82:	d013      	beq.n	8008dac <HAL_PWREx_ConfigSupply+0x48>
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	2b1e      	cmp	r3, #30
 8008d88:	d010      	beq.n	8008dac <HAL_PWREx_ConfigSupply+0x48>
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	2b2e      	cmp	r3, #46	@ 0x2e
 8008d8e:	d00d      	beq.n	8008dac <HAL_PWREx_ConfigSupply+0x48>
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	2b1d      	cmp	r3, #29
 8008d94:	d00a      	beq.n	8008dac <HAL_PWREx_ConfigSupply+0x48>
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	2b2d      	cmp	r3, #45	@ 0x2d
 8008d9a:	d007      	beq.n	8008dac <HAL_PWREx_ConfigSupply+0x48>
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	2b01      	cmp	r3, #1
 8008da0:	d004      	beq.n	8008dac <HAL_PWREx_ConfigSupply+0x48>
 8008da2:	f44f 71a1 	mov.w	r1, #322	@ 0x142
 8008da6:	482b      	ldr	r0, [pc, #172]	@ (8008e54 <HAL_PWREx_ConfigSupply+0xf0>)
 8008da8:	f7f9 fb0c 	bl	80023c4 <assert_failed>

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8008dac:	4b2a      	ldr	r3, [pc, #168]	@ (8008e58 <HAL_PWREx_ConfigSupply+0xf4>)
 8008dae:	68db      	ldr	r3, [r3, #12]
 8008db0:	f003 0307 	and.w	r3, r3, #7
 8008db4:	2b06      	cmp	r3, #6
 8008db6:	d00a      	beq.n	8008dce <HAL_PWREx_ConfigSupply+0x6a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008db8:	4b27      	ldr	r3, [pc, #156]	@ (8008e58 <HAL_PWREx_ConfigSupply+0xf4>)
 8008dba:	68db      	ldr	r3, [r3, #12]
 8008dbc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008dc0:	687a      	ldr	r2, [r7, #4]
 8008dc2:	429a      	cmp	r2, r3
 8008dc4:	d001      	beq.n	8008dca <HAL_PWREx_ConfigSupply+0x66>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8008dc6:	2301      	movs	r3, #1
 8008dc8:	e03f      	b.n	8008e4a <HAL_PWREx_ConfigSupply+0xe6>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8008dca:	2300      	movs	r3, #0
 8008dcc:	e03d      	b.n	8008e4a <HAL_PWREx_ConfigSupply+0xe6>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8008dce:	4b22      	ldr	r3, [pc, #136]	@ (8008e58 <HAL_PWREx_ConfigSupply+0xf4>)
 8008dd0:	68db      	ldr	r3, [r3, #12]
 8008dd2:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8008dd6:	4920      	ldr	r1, [pc, #128]	@ (8008e58 <HAL_PWREx_ConfigSupply+0xf4>)
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	4313      	orrs	r3, r2
 8008ddc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8008dde:	f7fa fc8d 	bl	80036fc <HAL_GetTick>
 8008de2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008de4:	e009      	b.n	8008dfa <HAL_PWREx_ConfigSupply+0x96>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008de6:	f7fa fc89 	bl	80036fc <HAL_GetTick>
 8008dea:	4602      	mov	r2, r0
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	1ad3      	subs	r3, r2, r3
 8008df0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008df4:	d901      	bls.n	8008dfa <HAL_PWREx_ConfigSupply+0x96>
    {
      return HAL_ERROR;
 8008df6:	2301      	movs	r3, #1
 8008df8:	e027      	b.n	8008e4a <HAL_PWREx_ConfigSupply+0xe6>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008dfa:	4b17      	ldr	r3, [pc, #92]	@ (8008e58 <HAL_PWREx_ConfigSupply+0xf4>)
 8008dfc:	685b      	ldr	r3, [r3, #4]
 8008dfe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008e02:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008e06:	d1ee      	bne.n	8008de6 <HAL_PWREx_ConfigSupply+0x82>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	2b1e      	cmp	r3, #30
 8008e0c:	d008      	beq.n	8008e20 <HAL_PWREx_ConfigSupply+0xbc>
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	2b2e      	cmp	r3, #46	@ 0x2e
 8008e12:	d005      	beq.n	8008e20 <HAL_PWREx_ConfigSupply+0xbc>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	2b1d      	cmp	r3, #29
 8008e18:	d002      	beq.n	8008e20 <HAL_PWREx_ConfigSupply+0xbc>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	2b2d      	cmp	r3, #45	@ 0x2d
 8008e1e:	d113      	bne.n	8008e48 <HAL_PWREx_ConfigSupply+0xe4>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8008e20:	f7fa fc6c 	bl	80036fc <HAL_GetTick>
 8008e24:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8008e26:	e009      	b.n	8008e3c <HAL_PWREx_ConfigSupply+0xd8>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008e28:	f7fa fc68 	bl	80036fc <HAL_GetTick>
 8008e2c:	4602      	mov	r2, r0
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	1ad3      	subs	r3, r2, r3
 8008e32:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008e36:	d901      	bls.n	8008e3c <HAL_PWREx_ConfigSupply+0xd8>
      {
        return HAL_ERROR;
 8008e38:	2301      	movs	r3, #1
 8008e3a:	e006      	b.n	8008e4a <HAL_PWREx_ConfigSupply+0xe6>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8008e3c:	4b06      	ldr	r3, [pc, #24]	@ (8008e58 <HAL_PWREx_ConfigSupply+0xf4>)
 8008e3e:	68db      	ldr	r3, [r3, #12]
 8008e40:	f003 0311 	and.w	r3, r3, #17
 8008e44:	2b11      	cmp	r3, #17
 8008e46:	d1ef      	bne.n	8008e28 <HAL_PWREx_ConfigSupply+0xc4>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8008e48:	2300      	movs	r3, #0
}
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	3710      	adds	r7, #16
 8008e4e:	46bd      	mov	sp, r7
 8008e50:	bd80      	pop	{r7, pc}
 8008e52:	bf00      	nop
 8008e54:	080215f0 	.word	0x080215f0
 8008e58:	58024800 	.word	0x58024800

08008e5c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008e5c:	b580      	push	{r7, lr}
 8008e5e:	b08c      	sub	sp, #48	@ 0x30
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d102      	bne.n	8008e70 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8008e6a:	2301      	movs	r3, #1
 8008e6c:	f000 bd1c 	b.w	80098a8 <HAL_RCC_OscConfig+0xa4c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d028      	beq.n	8008eca <HAL_RCC_OscConfig+0x6e>
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	f003 0301 	and.w	r3, r3, #1
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d122      	bne.n	8008eca <HAL_RCC_OscConfig+0x6e>
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	f003 0302 	and.w	r3, r3, #2
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d11c      	bne.n	8008eca <HAL_RCC_OscConfig+0x6e>
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	f003 0310 	and.w	r3, r3, #16
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d116      	bne.n	8008eca <HAL_RCC_OscConfig+0x6e>
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	f003 0308 	and.w	r3, r3, #8
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d110      	bne.n	8008eca <HAL_RCC_OscConfig+0x6e>
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	f003 0304 	and.w	r3, r3, #4
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d10a      	bne.n	8008eca <HAL_RCC_OscConfig+0x6e>
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	f003 0320 	and.w	r3, r3, #32
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d104      	bne.n	8008eca <HAL_RCC_OscConfig+0x6e>
 8008ec0:	f240 11a1 	movw	r1, #417	@ 0x1a1
 8008ec4:	4895      	ldr	r0, [pc, #596]	@ (800911c <HAL_RCC_OscConfig+0x2c0>)
 8008ec6:	f7f9 fa7d 	bl	80023c4 <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	f003 0301 	and.w	r3, r3, #1
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	f000 809d 	beq.w	8009012 <HAL_RCC_OscConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	685b      	ldr	r3, [r3, #4]
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d00e      	beq.n	8008efe <HAL_RCC_OscConfig+0xa2>
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	685b      	ldr	r3, [r3, #4]
 8008ee4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008ee8:	d009      	beq.n	8008efe <HAL_RCC_OscConfig+0xa2>
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	685b      	ldr	r3, [r3, #4]
 8008eee:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008ef2:	d004      	beq.n	8008efe <HAL_RCC_OscConfig+0xa2>
 8008ef4:	f44f 71d3 	mov.w	r1, #422	@ 0x1a6
 8008ef8:	4888      	ldr	r0, [pc, #544]	@ (800911c <HAL_RCC_OscConfig+0x2c0>)
 8008efa:	f7f9 fa63 	bl	80023c4 <assert_failed>

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008efe:	4b88      	ldr	r3, [pc, #544]	@ (8009120 <HAL_RCC_OscConfig+0x2c4>)
 8008f00:	691b      	ldr	r3, [r3, #16]
 8008f02:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008f06:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008f08:	4b85      	ldr	r3, [pc, #532]	@ (8009120 <HAL_RCC_OscConfig+0x2c4>)
 8008f0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f0c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8008f0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f10:	2b10      	cmp	r3, #16
 8008f12:	d007      	beq.n	8008f24 <HAL_RCC_OscConfig+0xc8>
 8008f14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f16:	2b18      	cmp	r3, #24
 8008f18:	d111      	bne.n	8008f3e <HAL_RCC_OscConfig+0xe2>
 8008f1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f1c:	f003 0303 	and.w	r3, r3, #3
 8008f20:	2b02      	cmp	r3, #2
 8008f22:	d10c      	bne.n	8008f3e <HAL_RCC_OscConfig+0xe2>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008f24:	4b7e      	ldr	r3, [pc, #504]	@ (8009120 <HAL_RCC_OscConfig+0x2c4>)
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d06f      	beq.n	8009010 <HAL_RCC_OscConfig+0x1b4>
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	685b      	ldr	r3, [r3, #4]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d16b      	bne.n	8009010 <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 8008f38:	2301      	movs	r3, #1
 8008f3a:	f000 bcb5 	b.w	80098a8 <HAL_RCC_OscConfig+0xa4c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	685b      	ldr	r3, [r3, #4]
 8008f42:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008f46:	d106      	bne.n	8008f56 <HAL_RCC_OscConfig+0xfa>
 8008f48:	4b75      	ldr	r3, [pc, #468]	@ (8009120 <HAL_RCC_OscConfig+0x2c4>)
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	4a74      	ldr	r2, [pc, #464]	@ (8009120 <HAL_RCC_OscConfig+0x2c4>)
 8008f4e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008f52:	6013      	str	r3, [r2, #0]
 8008f54:	e02e      	b.n	8008fb4 <HAL_RCC_OscConfig+0x158>
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	685b      	ldr	r3, [r3, #4]
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d10c      	bne.n	8008f78 <HAL_RCC_OscConfig+0x11c>
 8008f5e:	4b70      	ldr	r3, [pc, #448]	@ (8009120 <HAL_RCC_OscConfig+0x2c4>)
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	4a6f      	ldr	r2, [pc, #444]	@ (8009120 <HAL_RCC_OscConfig+0x2c4>)
 8008f64:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008f68:	6013      	str	r3, [r2, #0]
 8008f6a:	4b6d      	ldr	r3, [pc, #436]	@ (8009120 <HAL_RCC_OscConfig+0x2c4>)
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	4a6c      	ldr	r2, [pc, #432]	@ (8009120 <HAL_RCC_OscConfig+0x2c4>)
 8008f70:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008f74:	6013      	str	r3, [r2, #0]
 8008f76:	e01d      	b.n	8008fb4 <HAL_RCC_OscConfig+0x158>
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	685b      	ldr	r3, [r3, #4]
 8008f7c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008f80:	d10c      	bne.n	8008f9c <HAL_RCC_OscConfig+0x140>
 8008f82:	4b67      	ldr	r3, [pc, #412]	@ (8009120 <HAL_RCC_OscConfig+0x2c4>)
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	4a66      	ldr	r2, [pc, #408]	@ (8009120 <HAL_RCC_OscConfig+0x2c4>)
 8008f88:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008f8c:	6013      	str	r3, [r2, #0]
 8008f8e:	4b64      	ldr	r3, [pc, #400]	@ (8009120 <HAL_RCC_OscConfig+0x2c4>)
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	4a63      	ldr	r2, [pc, #396]	@ (8009120 <HAL_RCC_OscConfig+0x2c4>)
 8008f94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008f98:	6013      	str	r3, [r2, #0]
 8008f9a:	e00b      	b.n	8008fb4 <HAL_RCC_OscConfig+0x158>
 8008f9c:	4b60      	ldr	r3, [pc, #384]	@ (8009120 <HAL_RCC_OscConfig+0x2c4>)
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	4a5f      	ldr	r2, [pc, #380]	@ (8009120 <HAL_RCC_OscConfig+0x2c4>)
 8008fa2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008fa6:	6013      	str	r3, [r2, #0]
 8008fa8:	4b5d      	ldr	r3, [pc, #372]	@ (8009120 <HAL_RCC_OscConfig+0x2c4>)
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	4a5c      	ldr	r2, [pc, #368]	@ (8009120 <HAL_RCC_OscConfig+0x2c4>)
 8008fae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008fb2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	685b      	ldr	r3, [r3, #4]
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d014      	beq.n	8008fe6 <HAL_RCC_OscConfig+0x18a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008fbc:	f7fa fb9e 	bl	80036fc <HAL_GetTick>
 8008fc0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008fc2:	e009      	b.n	8008fd8 <HAL_RCC_OscConfig+0x17c>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008fc4:	f7fa fb9a 	bl	80036fc <HAL_GetTick>
 8008fc8:	4602      	mov	r2, r0
 8008fca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fcc:	1ad3      	subs	r3, r2, r3
 8008fce:	2b64      	cmp	r3, #100	@ 0x64
 8008fd0:	d902      	bls.n	8008fd8 <HAL_RCC_OscConfig+0x17c>
          {
            return HAL_TIMEOUT;
 8008fd2:	2303      	movs	r3, #3
 8008fd4:	f000 bc68 	b.w	80098a8 <HAL_RCC_OscConfig+0xa4c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008fd8:	4b51      	ldr	r3, [pc, #324]	@ (8009120 <HAL_RCC_OscConfig+0x2c4>)
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d0ef      	beq.n	8008fc4 <HAL_RCC_OscConfig+0x168>
 8008fe4:	e015      	b.n	8009012 <HAL_RCC_OscConfig+0x1b6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008fe6:	f7fa fb89 	bl	80036fc <HAL_GetTick>
 8008fea:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008fec:	e009      	b.n	8009002 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008fee:	f7fa fb85 	bl	80036fc <HAL_GetTick>
 8008ff2:	4602      	mov	r2, r0
 8008ff4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ff6:	1ad3      	subs	r3, r2, r3
 8008ff8:	2b64      	cmp	r3, #100	@ 0x64
 8008ffa:	d902      	bls.n	8009002 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8008ffc:	2303      	movs	r3, #3
 8008ffe:	f000 bc53 	b.w	80098a8 <HAL_RCC_OscConfig+0xa4c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009002:	4b47      	ldr	r3, [pc, #284]	@ (8009120 <HAL_RCC_OscConfig+0x2c4>)
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800900a:	2b00      	cmp	r3, #0
 800900c:	d1ef      	bne.n	8008fee <HAL_RCC_OscConfig+0x192>
 800900e:	e000      	b.n	8009012 <HAL_RCC_OscConfig+0x1b6>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009010:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	f003 0302 	and.w	r3, r3, #2
 800901a:	2b00      	cmp	r3, #0
 800901c:	f000 80b5 	beq.w	800918a <HAL_RCC_OscConfig+0x32e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	68db      	ldr	r3, [r3, #12]
 8009024:	2b00      	cmp	r3, #0
 8009026:	d018      	beq.n	800905a <HAL_RCC_OscConfig+0x1fe>
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	68db      	ldr	r3, [r3, #12]
 800902c:	2b01      	cmp	r3, #1
 800902e:	d014      	beq.n	800905a <HAL_RCC_OscConfig+0x1fe>
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	68db      	ldr	r3, [r3, #12]
 8009034:	2b01      	cmp	r3, #1
 8009036:	d010      	beq.n	800905a <HAL_RCC_OscConfig+0x1fe>
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	68db      	ldr	r3, [r3, #12]
 800903c:	2b09      	cmp	r3, #9
 800903e:	d00c      	beq.n	800905a <HAL_RCC_OscConfig+0x1fe>
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	68db      	ldr	r3, [r3, #12]
 8009044:	2b11      	cmp	r3, #17
 8009046:	d008      	beq.n	800905a <HAL_RCC_OscConfig+0x1fe>
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	68db      	ldr	r3, [r3, #12]
 800904c:	2b19      	cmp	r3, #25
 800904e:	d004      	beq.n	800905a <HAL_RCC_OscConfig+0x1fe>
 8009050:	f44f 71ed 	mov.w	r1, #474	@ 0x1da
 8009054:	4831      	ldr	r0, [pc, #196]	@ (800911c <HAL_RCC_OscConfig+0x2c0>)
 8009056:	f7f9 f9b5 	bl	80023c4 <assert_failed>
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	691b      	ldr	r3, [r3, #16]
 800905e:	2b7f      	cmp	r3, #127	@ 0x7f
 8009060:	d904      	bls.n	800906c <HAL_RCC_OscConfig+0x210>
 8009062:	f240 11db 	movw	r1, #475	@ 0x1db
 8009066:	482d      	ldr	r0, [pc, #180]	@ (800911c <HAL_RCC_OscConfig+0x2c0>)
 8009068:	f7f9 f9ac 	bl	80023c4 <assert_failed>

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800906c:	4b2c      	ldr	r3, [pc, #176]	@ (8009120 <HAL_RCC_OscConfig+0x2c4>)
 800906e:	691b      	ldr	r3, [r3, #16]
 8009070:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009074:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009076:	4b2a      	ldr	r3, [pc, #168]	@ (8009120 <HAL_RCC_OscConfig+0x2c4>)
 8009078:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800907a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800907c:	6a3b      	ldr	r3, [r7, #32]
 800907e:	2b00      	cmp	r3, #0
 8009080:	d007      	beq.n	8009092 <HAL_RCC_OscConfig+0x236>
 8009082:	6a3b      	ldr	r3, [r7, #32]
 8009084:	2b18      	cmp	r3, #24
 8009086:	d137      	bne.n	80090f8 <HAL_RCC_OscConfig+0x29c>
 8009088:	69fb      	ldr	r3, [r7, #28]
 800908a:	f003 0303 	and.w	r3, r3, #3
 800908e:	2b00      	cmp	r3, #0
 8009090:	d132      	bne.n	80090f8 <HAL_RCC_OscConfig+0x29c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009092:	4b23      	ldr	r3, [pc, #140]	@ (8009120 <HAL_RCC_OscConfig+0x2c4>)
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	f003 0304 	and.w	r3, r3, #4
 800909a:	2b00      	cmp	r3, #0
 800909c:	d005      	beq.n	80090aa <HAL_RCC_OscConfig+0x24e>
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	68db      	ldr	r3, [r3, #12]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d101      	bne.n	80090aa <HAL_RCC_OscConfig+0x24e>
      {
        return HAL_ERROR;
 80090a6:	2301      	movs	r3, #1
 80090a8:	e3fe      	b.n	80098a8 <HAL_RCC_OscConfig+0xa4c>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80090aa:	4b1d      	ldr	r3, [pc, #116]	@ (8009120 <HAL_RCC_OscConfig+0x2c4>)
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	f023 0219 	bic.w	r2, r3, #25
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	68db      	ldr	r3, [r3, #12]
 80090b6:	491a      	ldr	r1, [pc, #104]	@ (8009120 <HAL_RCC_OscConfig+0x2c4>)
 80090b8:	4313      	orrs	r3, r2
 80090ba:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80090bc:	f7fa fb1e 	bl	80036fc <HAL_GetTick>
 80090c0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80090c2:	e008      	b.n	80090d6 <HAL_RCC_OscConfig+0x27a>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80090c4:	f7fa fb1a 	bl	80036fc <HAL_GetTick>
 80090c8:	4602      	mov	r2, r0
 80090ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090cc:	1ad3      	subs	r3, r2, r3
 80090ce:	2b02      	cmp	r3, #2
 80090d0:	d901      	bls.n	80090d6 <HAL_RCC_OscConfig+0x27a>
          {
            return HAL_TIMEOUT;
 80090d2:	2303      	movs	r3, #3
 80090d4:	e3e8      	b.n	80098a8 <HAL_RCC_OscConfig+0xa4c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80090d6:	4b12      	ldr	r3, [pc, #72]	@ (8009120 <HAL_RCC_OscConfig+0x2c4>)
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	f003 0304 	and.w	r3, r3, #4
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d0f0      	beq.n	80090c4 <HAL_RCC_OscConfig+0x268>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80090e2:	4b0f      	ldr	r3, [pc, #60]	@ (8009120 <HAL_RCC_OscConfig+0x2c4>)
 80090e4:	685b      	ldr	r3, [r3, #4]
 80090e6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	691b      	ldr	r3, [r3, #16]
 80090ee:	061b      	lsls	r3, r3, #24
 80090f0:	490b      	ldr	r1, [pc, #44]	@ (8009120 <HAL_RCC_OscConfig+0x2c4>)
 80090f2:	4313      	orrs	r3, r2
 80090f4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80090f6:	e048      	b.n	800918a <HAL_RCC_OscConfig+0x32e>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	68db      	ldr	r3, [r3, #12]
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d02b      	beq.n	8009158 <HAL_RCC_OscConfig+0x2fc>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009100:	4b07      	ldr	r3, [pc, #28]	@ (8009120 <HAL_RCC_OscConfig+0x2c4>)
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	f023 0219 	bic.w	r2, r3, #25
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	68db      	ldr	r3, [r3, #12]
 800910c:	4904      	ldr	r1, [pc, #16]	@ (8009120 <HAL_RCC_OscConfig+0x2c4>)
 800910e:	4313      	orrs	r3, r2
 8009110:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009112:	f7fa faf3 	bl	80036fc <HAL_GetTick>
 8009116:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009118:	e00d      	b.n	8009136 <HAL_RCC_OscConfig+0x2da>
 800911a:	bf00      	nop
 800911c:	0802162c 	.word	0x0802162c
 8009120:	58024400 	.word	0x58024400
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009124:	f7fa faea 	bl	80036fc <HAL_GetTick>
 8009128:	4602      	mov	r2, r0
 800912a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800912c:	1ad3      	subs	r3, r2, r3
 800912e:	2b02      	cmp	r3, #2
 8009130:	d901      	bls.n	8009136 <HAL_RCC_OscConfig+0x2da>
          {
            return HAL_TIMEOUT;
 8009132:	2303      	movs	r3, #3
 8009134:	e3b8      	b.n	80098a8 <HAL_RCC_OscConfig+0xa4c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009136:	4b9b      	ldr	r3, [pc, #620]	@ (80093a4 <HAL_RCC_OscConfig+0x548>)
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	f003 0304 	and.w	r3, r3, #4
 800913e:	2b00      	cmp	r3, #0
 8009140:	d0f0      	beq.n	8009124 <HAL_RCC_OscConfig+0x2c8>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009142:	4b98      	ldr	r3, [pc, #608]	@ (80093a4 <HAL_RCC_OscConfig+0x548>)
 8009144:	685b      	ldr	r3, [r3, #4]
 8009146:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	691b      	ldr	r3, [r3, #16]
 800914e:	061b      	lsls	r3, r3, #24
 8009150:	4994      	ldr	r1, [pc, #592]	@ (80093a4 <HAL_RCC_OscConfig+0x548>)
 8009152:	4313      	orrs	r3, r2
 8009154:	604b      	str	r3, [r1, #4]
 8009156:	e018      	b.n	800918a <HAL_RCC_OscConfig+0x32e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009158:	4b92      	ldr	r3, [pc, #584]	@ (80093a4 <HAL_RCC_OscConfig+0x548>)
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	4a91      	ldr	r2, [pc, #580]	@ (80093a4 <HAL_RCC_OscConfig+0x548>)
 800915e:	f023 0301 	bic.w	r3, r3, #1
 8009162:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009164:	f7fa faca 	bl	80036fc <HAL_GetTick>
 8009168:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800916a:	e008      	b.n	800917e <HAL_RCC_OscConfig+0x322>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800916c:	f7fa fac6 	bl	80036fc <HAL_GetTick>
 8009170:	4602      	mov	r2, r0
 8009172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009174:	1ad3      	subs	r3, r2, r3
 8009176:	2b02      	cmp	r3, #2
 8009178:	d901      	bls.n	800917e <HAL_RCC_OscConfig+0x322>
          {
            return HAL_TIMEOUT;
 800917a:	2303      	movs	r3, #3
 800917c:	e394      	b.n	80098a8 <HAL_RCC_OscConfig+0xa4c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800917e:	4b89      	ldr	r3, [pc, #548]	@ (80093a4 <HAL_RCC_OscConfig+0x548>)
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	f003 0304 	and.w	r3, r3, #4
 8009186:	2b00      	cmp	r3, #0
 8009188:	d1f0      	bne.n	800916c <HAL_RCC_OscConfig+0x310>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	f003 0310 	and.w	r3, r3, #16
 8009192:	2b00      	cmp	r3, #0
 8009194:	f000 8081 	beq.w	800929a <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	69db      	ldr	r3, [r3, #28]
 800919c:	2b00      	cmp	r3, #0
 800919e:	d008      	beq.n	80091b2 <HAL_RCC_OscConfig+0x356>
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	69db      	ldr	r3, [r3, #28]
 80091a4:	2b80      	cmp	r3, #128	@ 0x80
 80091a6:	d004      	beq.n	80091b2 <HAL_RCC_OscConfig+0x356>
 80091a8:	f240 212b 	movw	r1, #555	@ 0x22b
 80091ac:	487e      	ldr	r0, [pc, #504]	@ (80093a8 <HAL_RCC_OscConfig+0x54c>)
 80091ae:	f7f9 f909 	bl	80023c4 <assert_failed>
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	6a1b      	ldr	r3, [r3, #32]
 80091b6:	2b3f      	cmp	r3, #63	@ 0x3f
 80091b8:	d904      	bls.n	80091c4 <HAL_RCC_OscConfig+0x368>
 80091ba:	f44f 710b 	mov.w	r1, #556	@ 0x22c
 80091be:	487a      	ldr	r0, [pc, #488]	@ (80093a8 <HAL_RCC_OscConfig+0x54c>)
 80091c0:	f7f9 f900 	bl	80023c4 <assert_failed>

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80091c4:	4b77      	ldr	r3, [pc, #476]	@ (80093a4 <HAL_RCC_OscConfig+0x548>)
 80091c6:	691b      	ldr	r3, [r3, #16]
 80091c8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80091cc:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80091ce:	4b75      	ldr	r3, [pc, #468]	@ (80093a4 <HAL_RCC_OscConfig+0x548>)
 80091d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80091d2:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80091d4:	69bb      	ldr	r3, [r7, #24]
 80091d6:	2b08      	cmp	r3, #8
 80091d8:	d007      	beq.n	80091ea <HAL_RCC_OscConfig+0x38e>
 80091da:	69bb      	ldr	r3, [r7, #24]
 80091dc:	2b18      	cmp	r3, #24
 80091de:	d11b      	bne.n	8009218 <HAL_RCC_OscConfig+0x3bc>
 80091e0:	697b      	ldr	r3, [r7, #20]
 80091e2:	f003 0303 	and.w	r3, r3, #3
 80091e6:	2b01      	cmp	r3, #1
 80091e8:	d116      	bne.n	8009218 <HAL_RCC_OscConfig+0x3bc>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80091ea:	4b6e      	ldr	r3, [pc, #440]	@ (80093a4 <HAL_RCC_OscConfig+0x548>)
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d005      	beq.n	8009202 <HAL_RCC_OscConfig+0x3a6>
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	69db      	ldr	r3, [r3, #28]
 80091fa:	2b80      	cmp	r3, #128	@ 0x80
 80091fc:	d001      	beq.n	8009202 <HAL_RCC_OscConfig+0x3a6>
      {
        return HAL_ERROR;
 80091fe:	2301      	movs	r3, #1
 8009200:	e352      	b.n	80098a8 <HAL_RCC_OscConfig+0xa4c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009202:	4b68      	ldr	r3, [pc, #416]	@ (80093a4 <HAL_RCC_OscConfig+0x548>)
 8009204:	68db      	ldr	r3, [r3, #12]
 8009206:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	6a1b      	ldr	r3, [r3, #32]
 800920e:	061b      	lsls	r3, r3, #24
 8009210:	4964      	ldr	r1, [pc, #400]	@ (80093a4 <HAL_RCC_OscConfig+0x548>)
 8009212:	4313      	orrs	r3, r2
 8009214:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009216:	e040      	b.n	800929a <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	69db      	ldr	r3, [r3, #28]
 800921c:	2b00      	cmp	r3, #0
 800921e:	d023      	beq.n	8009268 <HAL_RCC_OscConfig+0x40c>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8009220:	4b60      	ldr	r3, [pc, #384]	@ (80093a4 <HAL_RCC_OscConfig+0x548>)
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	4a5f      	ldr	r2, [pc, #380]	@ (80093a4 <HAL_RCC_OscConfig+0x548>)
 8009226:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800922a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800922c:	f7fa fa66 	bl	80036fc <HAL_GetTick>
 8009230:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009232:	e008      	b.n	8009246 <HAL_RCC_OscConfig+0x3ea>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8009234:	f7fa fa62 	bl	80036fc <HAL_GetTick>
 8009238:	4602      	mov	r2, r0
 800923a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800923c:	1ad3      	subs	r3, r2, r3
 800923e:	2b02      	cmp	r3, #2
 8009240:	d901      	bls.n	8009246 <HAL_RCC_OscConfig+0x3ea>
          {
            return HAL_TIMEOUT;
 8009242:	2303      	movs	r3, #3
 8009244:	e330      	b.n	80098a8 <HAL_RCC_OscConfig+0xa4c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009246:	4b57      	ldr	r3, [pc, #348]	@ (80093a4 <HAL_RCC_OscConfig+0x548>)
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800924e:	2b00      	cmp	r3, #0
 8009250:	d0f0      	beq.n	8009234 <HAL_RCC_OscConfig+0x3d8>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009252:	4b54      	ldr	r3, [pc, #336]	@ (80093a4 <HAL_RCC_OscConfig+0x548>)
 8009254:	68db      	ldr	r3, [r3, #12]
 8009256:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	6a1b      	ldr	r3, [r3, #32]
 800925e:	061b      	lsls	r3, r3, #24
 8009260:	4950      	ldr	r1, [pc, #320]	@ (80093a4 <HAL_RCC_OscConfig+0x548>)
 8009262:	4313      	orrs	r3, r2
 8009264:	60cb      	str	r3, [r1, #12]
 8009266:	e018      	b.n	800929a <HAL_RCC_OscConfig+0x43e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8009268:	4b4e      	ldr	r3, [pc, #312]	@ (80093a4 <HAL_RCC_OscConfig+0x548>)
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	4a4d      	ldr	r2, [pc, #308]	@ (80093a4 <HAL_RCC_OscConfig+0x548>)
 800926e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009272:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009274:	f7fa fa42 	bl	80036fc <HAL_GetTick>
 8009278:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800927a:	e008      	b.n	800928e <HAL_RCC_OscConfig+0x432>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800927c:	f7fa fa3e 	bl	80036fc <HAL_GetTick>
 8009280:	4602      	mov	r2, r0
 8009282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009284:	1ad3      	subs	r3, r2, r3
 8009286:	2b02      	cmp	r3, #2
 8009288:	d901      	bls.n	800928e <HAL_RCC_OscConfig+0x432>
          {
            return HAL_TIMEOUT;
 800928a:	2303      	movs	r3, #3
 800928c:	e30c      	b.n	80098a8 <HAL_RCC_OscConfig+0xa4c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800928e:	4b45      	ldr	r3, [pc, #276]	@ (80093a4 <HAL_RCC_OscConfig+0x548>)
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009296:	2b00      	cmp	r3, #0
 8009298:	d1f0      	bne.n	800927c <HAL_RCC_OscConfig+0x420>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	f003 0308 	and.w	r3, r3, #8
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d043      	beq.n	800932e <HAL_RCC_OscConfig+0x4d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	695b      	ldr	r3, [r3, #20]
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d008      	beq.n	80092c0 <HAL_RCC_OscConfig+0x464>
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	695b      	ldr	r3, [r3, #20]
 80092b2:	2b01      	cmp	r3, #1
 80092b4:	d004      	beq.n	80092c0 <HAL_RCC_OscConfig+0x464>
 80092b6:	f240 216d 	movw	r1, #621	@ 0x26d
 80092ba:	483b      	ldr	r0, [pc, #236]	@ (80093a8 <HAL_RCC_OscConfig+0x54c>)
 80092bc:	f7f9 f882 	bl	80023c4 <assert_failed>

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	695b      	ldr	r3, [r3, #20]
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d019      	beq.n	80092fc <HAL_RCC_OscConfig+0x4a0>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80092c8:	4b36      	ldr	r3, [pc, #216]	@ (80093a4 <HAL_RCC_OscConfig+0x548>)
 80092ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80092cc:	4a35      	ldr	r2, [pc, #212]	@ (80093a4 <HAL_RCC_OscConfig+0x548>)
 80092ce:	f043 0301 	orr.w	r3, r3, #1
 80092d2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80092d4:	f7fa fa12 	bl	80036fc <HAL_GetTick>
 80092d8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80092da:	e008      	b.n	80092ee <HAL_RCC_OscConfig+0x492>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80092dc:	f7fa fa0e 	bl	80036fc <HAL_GetTick>
 80092e0:	4602      	mov	r2, r0
 80092e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092e4:	1ad3      	subs	r3, r2, r3
 80092e6:	2b02      	cmp	r3, #2
 80092e8:	d901      	bls.n	80092ee <HAL_RCC_OscConfig+0x492>
        {
          return HAL_TIMEOUT;
 80092ea:	2303      	movs	r3, #3
 80092ec:	e2dc      	b.n	80098a8 <HAL_RCC_OscConfig+0xa4c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80092ee:	4b2d      	ldr	r3, [pc, #180]	@ (80093a4 <HAL_RCC_OscConfig+0x548>)
 80092f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80092f2:	f003 0302 	and.w	r3, r3, #2
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d0f0      	beq.n	80092dc <HAL_RCC_OscConfig+0x480>
 80092fa:	e018      	b.n	800932e <HAL_RCC_OscConfig+0x4d2>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80092fc:	4b29      	ldr	r3, [pc, #164]	@ (80093a4 <HAL_RCC_OscConfig+0x548>)
 80092fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009300:	4a28      	ldr	r2, [pc, #160]	@ (80093a4 <HAL_RCC_OscConfig+0x548>)
 8009302:	f023 0301 	bic.w	r3, r3, #1
 8009306:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009308:	f7fa f9f8 	bl	80036fc <HAL_GetTick>
 800930c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800930e:	e008      	b.n	8009322 <HAL_RCC_OscConfig+0x4c6>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009310:	f7fa f9f4 	bl	80036fc <HAL_GetTick>
 8009314:	4602      	mov	r2, r0
 8009316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009318:	1ad3      	subs	r3, r2, r3
 800931a:	2b02      	cmp	r3, #2
 800931c:	d901      	bls.n	8009322 <HAL_RCC_OscConfig+0x4c6>
        {
          return HAL_TIMEOUT;
 800931e:	2303      	movs	r3, #3
 8009320:	e2c2      	b.n	80098a8 <HAL_RCC_OscConfig+0xa4c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009322:	4b20      	ldr	r3, [pc, #128]	@ (80093a4 <HAL_RCC_OscConfig+0x548>)
 8009324:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009326:	f003 0302 	and.w	r3, r3, #2
 800932a:	2b00      	cmp	r3, #0
 800932c:	d1f0      	bne.n	8009310 <HAL_RCC_OscConfig+0x4b4>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	f003 0320 	and.w	r3, r3, #32
 8009336:	2b00      	cmp	r3, #0
 8009338:	d047      	beq.n	80093ca <HAL_RCC_OscConfig+0x56e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	699b      	ldr	r3, [r3, #24]
 800933e:	2b00      	cmp	r3, #0
 8009340:	d008      	beq.n	8009354 <HAL_RCC_OscConfig+0x4f8>
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	699b      	ldr	r3, [r3, #24]
 8009346:	2b01      	cmp	r3, #1
 8009348:	d004      	beq.n	8009354 <HAL_RCC_OscConfig+0x4f8>
 800934a:	f44f 7126 	mov.w	r1, #664	@ 0x298
 800934e:	4816      	ldr	r0, [pc, #88]	@ (80093a8 <HAL_RCC_OscConfig+0x54c>)
 8009350:	f7f9 f838 	bl	80023c4 <assert_failed>

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	699b      	ldr	r3, [r3, #24]
 8009358:	2b00      	cmp	r3, #0
 800935a:	d019      	beq.n	8009390 <HAL_RCC_OscConfig+0x534>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800935c:	4b11      	ldr	r3, [pc, #68]	@ (80093a4 <HAL_RCC_OscConfig+0x548>)
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	4a10      	ldr	r2, [pc, #64]	@ (80093a4 <HAL_RCC_OscConfig+0x548>)
 8009362:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8009366:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009368:	f7fa f9c8 	bl	80036fc <HAL_GetTick>
 800936c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800936e:	e008      	b.n	8009382 <HAL_RCC_OscConfig+0x526>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009370:	f7fa f9c4 	bl	80036fc <HAL_GetTick>
 8009374:	4602      	mov	r2, r0
 8009376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009378:	1ad3      	subs	r3, r2, r3
 800937a:	2b02      	cmp	r3, #2
 800937c:	d901      	bls.n	8009382 <HAL_RCC_OscConfig+0x526>
        {
          return HAL_TIMEOUT;
 800937e:	2303      	movs	r3, #3
 8009380:	e292      	b.n	80098a8 <HAL_RCC_OscConfig+0xa4c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009382:	4b08      	ldr	r3, [pc, #32]	@ (80093a4 <HAL_RCC_OscConfig+0x548>)
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800938a:	2b00      	cmp	r3, #0
 800938c:	d0f0      	beq.n	8009370 <HAL_RCC_OscConfig+0x514>
 800938e:	e01c      	b.n	80093ca <HAL_RCC_OscConfig+0x56e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009390:	4b04      	ldr	r3, [pc, #16]	@ (80093a4 <HAL_RCC_OscConfig+0x548>)
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	4a03      	ldr	r2, [pc, #12]	@ (80093a4 <HAL_RCC_OscConfig+0x548>)
 8009396:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800939a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800939c:	f7fa f9ae 	bl	80036fc <HAL_GetTick>
 80093a0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80093a2:	e00c      	b.n	80093be <HAL_RCC_OscConfig+0x562>
 80093a4:	58024400 	.word	0x58024400
 80093a8:	0802162c 	.word	0x0802162c
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80093ac:	f7fa f9a6 	bl	80036fc <HAL_GetTick>
 80093b0:	4602      	mov	r2, r0
 80093b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093b4:	1ad3      	subs	r3, r2, r3
 80093b6:	2b02      	cmp	r3, #2
 80093b8:	d901      	bls.n	80093be <HAL_RCC_OscConfig+0x562>
        {
          return HAL_TIMEOUT;
 80093ba:	2303      	movs	r3, #3
 80093bc:	e274      	b.n	80098a8 <HAL_RCC_OscConfig+0xa4c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80093be:	4b4c      	ldr	r3, [pc, #304]	@ (80094f0 <HAL_RCC_OscConfig+0x694>)
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d1f0      	bne.n	80093ac <HAL_RCC_OscConfig+0x550>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	f003 0304 	and.w	r3, r3, #4
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	f000 8098 	beq.w	8009508 <HAL_RCC_OscConfig+0x6ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	689b      	ldr	r3, [r3, #8]
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d00c      	beq.n	80093fa <HAL_RCC_OscConfig+0x59e>
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	689b      	ldr	r3, [r3, #8]
 80093e4:	2b01      	cmp	r3, #1
 80093e6:	d008      	beq.n	80093fa <HAL_RCC_OscConfig+0x59e>
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	689b      	ldr	r3, [r3, #8]
 80093ec:	2b05      	cmp	r3, #5
 80093ee:	d004      	beq.n	80093fa <HAL_RCC_OscConfig+0x59e>
 80093f0:	f240 21c2 	movw	r1, #706	@ 0x2c2
 80093f4:	483f      	ldr	r0, [pc, #252]	@ (80094f4 <HAL_RCC_OscConfig+0x698>)
 80093f6:	f7f8 ffe5 	bl	80023c4 <assert_failed>

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80093fa:	4b3f      	ldr	r3, [pc, #252]	@ (80094f8 <HAL_RCC_OscConfig+0x69c>)
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	4a3e      	ldr	r2, [pc, #248]	@ (80094f8 <HAL_RCC_OscConfig+0x69c>)
 8009400:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009404:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009406:	f7fa f979 	bl	80036fc <HAL_GetTick>
 800940a:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800940c:	e008      	b.n	8009420 <HAL_RCC_OscConfig+0x5c4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800940e:	f7fa f975 	bl	80036fc <HAL_GetTick>
 8009412:	4602      	mov	r2, r0
 8009414:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009416:	1ad3      	subs	r3, r2, r3
 8009418:	2b64      	cmp	r3, #100	@ 0x64
 800941a:	d901      	bls.n	8009420 <HAL_RCC_OscConfig+0x5c4>
      {
        return HAL_TIMEOUT;
 800941c:	2303      	movs	r3, #3
 800941e:	e243      	b.n	80098a8 <HAL_RCC_OscConfig+0xa4c>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009420:	4b35      	ldr	r3, [pc, #212]	@ (80094f8 <HAL_RCC_OscConfig+0x69c>)
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009428:	2b00      	cmp	r3, #0
 800942a:	d0f0      	beq.n	800940e <HAL_RCC_OscConfig+0x5b2>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	689b      	ldr	r3, [r3, #8]
 8009430:	2b01      	cmp	r3, #1
 8009432:	d106      	bne.n	8009442 <HAL_RCC_OscConfig+0x5e6>
 8009434:	4b2e      	ldr	r3, [pc, #184]	@ (80094f0 <HAL_RCC_OscConfig+0x694>)
 8009436:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009438:	4a2d      	ldr	r2, [pc, #180]	@ (80094f0 <HAL_RCC_OscConfig+0x694>)
 800943a:	f043 0301 	orr.w	r3, r3, #1
 800943e:	6713      	str	r3, [r2, #112]	@ 0x70
 8009440:	e02d      	b.n	800949e <HAL_RCC_OscConfig+0x642>
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	689b      	ldr	r3, [r3, #8]
 8009446:	2b00      	cmp	r3, #0
 8009448:	d10c      	bne.n	8009464 <HAL_RCC_OscConfig+0x608>
 800944a:	4b29      	ldr	r3, [pc, #164]	@ (80094f0 <HAL_RCC_OscConfig+0x694>)
 800944c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800944e:	4a28      	ldr	r2, [pc, #160]	@ (80094f0 <HAL_RCC_OscConfig+0x694>)
 8009450:	f023 0301 	bic.w	r3, r3, #1
 8009454:	6713      	str	r3, [r2, #112]	@ 0x70
 8009456:	4b26      	ldr	r3, [pc, #152]	@ (80094f0 <HAL_RCC_OscConfig+0x694>)
 8009458:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800945a:	4a25      	ldr	r2, [pc, #148]	@ (80094f0 <HAL_RCC_OscConfig+0x694>)
 800945c:	f023 0304 	bic.w	r3, r3, #4
 8009460:	6713      	str	r3, [r2, #112]	@ 0x70
 8009462:	e01c      	b.n	800949e <HAL_RCC_OscConfig+0x642>
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	689b      	ldr	r3, [r3, #8]
 8009468:	2b05      	cmp	r3, #5
 800946a:	d10c      	bne.n	8009486 <HAL_RCC_OscConfig+0x62a>
 800946c:	4b20      	ldr	r3, [pc, #128]	@ (80094f0 <HAL_RCC_OscConfig+0x694>)
 800946e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009470:	4a1f      	ldr	r2, [pc, #124]	@ (80094f0 <HAL_RCC_OscConfig+0x694>)
 8009472:	f043 0304 	orr.w	r3, r3, #4
 8009476:	6713      	str	r3, [r2, #112]	@ 0x70
 8009478:	4b1d      	ldr	r3, [pc, #116]	@ (80094f0 <HAL_RCC_OscConfig+0x694>)
 800947a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800947c:	4a1c      	ldr	r2, [pc, #112]	@ (80094f0 <HAL_RCC_OscConfig+0x694>)
 800947e:	f043 0301 	orr.w	r3, r3, #1
 8009482:	6713      	str	r3, [r2, #112]	@ 0x70
 8009484:	e00b      	b.n	800949e <HAL_RCC_OscConfig+0x642>
 8009486:	4b1a      	ldr	r3, [pc, #104]	@ (80094f0 <HAL_RCC_OscConfig+0x694>)
 8009488:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800948a:	4a19      	ldr	r2, [pc, #100]	@ (80094f0 <HAL_RCC_OscConfig+0x694>)
 800948c:	f023 0301 	bic.w	r3, r3, #1
 8009490:	6713      	str	r3, [r2, #112]	@ 0x70
 8009492:	4b17      	ldr	r3, [pc, #92]	@ (80094f0 <HAL_RCC_OscConfig+0x694>)
 8009494:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009496:	4a16      	ldr	r2, [pc, #88]	@ (80094f0 <HAL_RCC_OscConfig+0x694>)
 8009498:	f023 0304 	bic.w	r3, r3, #4
 800949c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	689b      	ldr	r3, [r3, #8]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d015      	beq.n	80094d2 <HAL_RCC_OscConfig+0x676>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80094a6:	f7fa f929 	bl	80036fc <HAL_GetTick>
 80094aa:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80094ac:	e00a      	b.n	80094c4 <HAL_RCC_OscConfig+0x668>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80094ae:	f7fa f925 	bl	80036fc <HAL_GetTick>
 80094b2:	4602      	mov	r2, r0
 80094b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094b6:	1ad3      	subs	r3, r2, r3
 80094b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80094bc:	4293      	cmp	r3, r2
 80094be:	d901      	bls.n	80094c4 <HAL_RCC_OscConfig+0x668>
        {
          return HAL_TIMEOUT;
 80094c0:	2303      	movs	r3, #3
 80094c2:	e1f1      	b.n	80098a8 <HAL_RCC_OscConfig+0xa4c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80094c4:	4b0a      	ldr	r3, [pc, #40]	@ (80094f0 <HAL_RCC_OscConfig+0x694>)
 80094c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80094c8:	f003 0302 	and.w	r3, r3, #2
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d0ee      	beq.n	80094ae <HAL_RCC_OscConfig+0x652>
 80094d0:	e01a      	b.n	8009508 <HAL_RCC_OscConfig+0x6ac>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80094d2:	f7fa f913 	bl	80036fc <HAL_GetTick>
 80094d6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80094d8:	e010      	b.n	80094fc <HAL_RCC_OscConfig+0x6a0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80094da:	f7fa f90f 	bl	80036fc <HAL_GetTick>
 80094de:	4602      	mov	r2, r0
 80094e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094e2:	1ad3      	subs	r3, r2, r3
 80094e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80094e8:	4293      	cmp	r3, r2
 80094ea:	d907      	bls.n	80094fc <HAL_RCC_OscConfig+0x6a0>
        {
          return HAL_TIMEOUT;
 80094ec:	2303      	movs	r3, #3
 80094ee:	e1db      	b.n	80098a8 <HAL_RCC_OscConfig+0xa4c>
 80094f0:	58024400 	.word	0x58024400
 80094f4:	0802162c 	.word	0x0802162c
 80094f8:	58024800 	.word	0x58024800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80094fc:	4b97      	ldr	r3, [pc, #604]	@ (800975c <HAL_RCC_OscConfig+0x900>)
 80094fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009500:	f003 0302 	and.w	r3, r3, #2
 8009504:	2b00      	cmp	r3, #0
 8009506:	d1e8      	bne.n	80094da <HAL_RCC_OscConfig+0x67e>
      }
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800950c:	2b00      	cmp	r3, #0
 800950e:	d00c      	beq.n	800952a <HAL_RCC_OscConfig+0x6ce>
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009514:	2b01      	cmp	r3, #1
 8009516:	d008      	beq.n	800952a <HAL_RCC_OscConfig+0x6ce>
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800951c:	2b02      	cmp	r3, #2
 800951e:	d004      	beq.n	800952a <HAL_RCC_OscConfig+0x6ce>
 8009520:	f44f 713d 	mov.w	r1, #756	@ 0x2f4
 8009524:	488e      	ldr	r0, [pc, #568]	@ (8009760 <HAL_RCC_OscConfig+0x904>)
 8009526:	f7f8 ff4d 	bl	80023c4 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800952e:	2b00      	cmp	r3, #0
 8009530:	f000 81b9 	beq.w	80098a6 <HAL_RCC_OscConfig+0xa4a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8009534:	4b89      	ldr	r3, [pc, #548]	@ (800975c <HAL_RCC_OscConfig+0x900>)
 8009536:	691b      	ldr	r3, [r3, #16]
 8009538:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800953c:	2b18      	cmp	r3, #24
 800953e:	f000 813f 	beq.w	80097c0 <HAL_RCC_OscConfig+0x964>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009546:	2b02      	cmp	r3, #2
 8009548:	f040 8120 	bne.w	800978c <HAL_RCC_OscConfig+0x930>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009550:	2b01      	cmp	r3, #1
 8009552:	d010      	beq.n	8009576 <HAL_RCC_OscConfig+0x71a>
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009558:	2b00      	cmp	r3, #0
 800955a:	d00c      	beq.n	8009576 <HAL_RCC_OscConfig+0x71a>
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009560:	2b03      	cmp	r3, #3
 8009562:	d008      	beq.n	8009576 <HAL_RCC_OscConfig+0x71a>
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009568:	2b02      	cmp	r3, #2
 800956a:	d004      	beq.n	8009576 <HAL_RCC_OscConfig+0x71a>
 800956c:	f240 21fd 	movw	r1, #765	@ 0x2fd
 8009570:	487b      	ldr	r0, [pc, #492]	@ (8009760 <HAL_RCC_OscConfig+0x904>)
 8009572:	f7f8 ff27 	bl	80023c4 <assert_failed>
        assert_param(IS_RCC_PLLRGE_VALUE(RCC_OscInitStruct->PLL.PLLRGE));
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800957a:	2b00      	cmp	r3, #0
 800957c:	d010      	beq.n	80095a0 <HAL_RCC_OscConfig+0x744>
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009582:	2b04      	cmp	r3, #4
 8009584:	d00c      	beq.n	80095a0 <HAL_RCC_OscConfig+0x744>
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800958a:	2b08      	cmp	r3, #8
 800958c:	d008      	beq.n	80095a0 <HAL_RCC_OscConfig+0x744>
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009592:	2b0c      	cmp	r3, #12
 8009594:	d004      	beq.n	80095a0 <HAL_RCC_OscConfig+0x744>
 8009596:	f240 21fe 	movw	r1, #766	@ 0x2fe
 800959a:	4871      	ldr	r0, [pc, #452]	@ (8009760 <HAL_RCC_OscConfig+0x904>)
 800959c:	f7f8 ff12 	bl	80023c4 <assert_failed>
        assert_param(IS_RCC_PLLVCO_VALUE(RCC_OscInitStruct->PLL.PLLVCOSEL));
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d008      	beq.n	80095ba <HAL_RCC_OscConfig+0x75e>
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80095ac:	2b02      	cmp	r3, #2
 80095ae:	d004      	beq.n	80095ba <HAL_RCC_OscConfig+0x75e>
 80095b0:	f240 21ff 	movw	r1, #767	@ 0x2ff
 80095b4:	486a      	ldr	r0, [pc, #424]	@ (8009760 <HAL_RCC_OscConfig+0x904>)
 80095b6:	f7f8 ff05 	bl	80023c4 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d003      	beq.n	80095ca <HAL_RCC_OscConfig+0x76e>
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095c6:	2b3f      	cmp	r3, #63	@ 0x3f
 80095c8:	d904      	bls.n	80095d4 <HAL_RCC_OscConfig+0x778>
 80095ca:	f44f 7140 	mov.w	r1, #768	@ 0x300
 80095ce:	4864      	ldr	r0, [pc, #400]	@ (8009760 <HAL_RCC_OscConfig+0x904>)
 80095d0:	f7f8 fef8 	bl	80023c4 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80095d8:	2b03      	cmp	r3, #3
 80095da:	d904      	bls.n	80095e6 <HAL_RCC_OscConfig+0x78a>
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80095e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80095e4:	d904      	bls.n	80095f0 <HAL_RCC_OscConfig+0x794>
 80095e6:	f240 3101 	movw	r1, #769	@ 0x301
 80095ea:	485d      	ldr	r0, [pc, #372]	@ (8009760 <HAL_RCC_OscConfig+0x904>)
 80095ec:	f7f8 feea 	bl	80023c4 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d003      	beq.n	8009600 <HAL_RCC_OscConfig+0x7a4>
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80095fc:	2b80      	cmp	r3, #128	@ 0x80
 80095fe:	d904      	bls.n	800960a <HAL_RCC_OscConfig+0x7ae>
 8009600:	f240 3102 	movw	r1, #770	@ 0x302
 8009604:	4856      	ldr	r0, [pc, #344]	@ (8009760 <HAL_RCC_OscConfig+0x904>)
 8009606:	f7f8 fedd 	bl	80023c4 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800960e:	2b00      	cmp	r3, #0
 8009610:	d003      	beq.n	800961a <HAL_RCC_OscConfig+0x7be>
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009616:	2b80      	cmp	r3, #128	@ 0x80
 8009618:	d904      	bls.n	8009624 <HAL_RCC_OscConfig+0x7c8>
 800961a:	f240 3103 	movw	r1, #771	@ 0x303
 800961e:	4850      	ldr	r0, [pc, #320]	@ (8009760 <HAL_RCC_OscConfig+0x904>)
 8009620:	f7f8 fed0 	bl	80023c4 <assert_failed>
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009628:	2b00      	cmp	r3, #0
 800962a:	d003      	beq.n	8009634 <HAL_RCC_OscConfig+0x7d8>
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009630:	2b80      	cmp	r3, #128	@ 0x80
 8009632:	d904      	bls.n	800963e <HAL_RCC_OscConfig+0x7e2>
 8009634:	f44f 7141 	mov.w	r1, #772	@ 0x304
 8009638:	4849      	ldr	r0, [pc, #292]	@ (8009760 <HAL_RCC_OscConfig+0x904>)
 800963a:	f7f8 fec3 	bl	80023c4 <assert_failed>
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009642:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009646:	d304      	bcc.n	8009652 <HAL_RCC_OscConfig+0x7f6>
 8009648:	f240 3105 	movw	r1, #773	@ 0x305
 800964c:	4844      	ldr	r0, [pc, #272]	@ (8009760 <HAL_RCC_OscConfig+0x904>)
 800964e:	f7f8 feb9 	bl	80023c4 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009652:	4b42      	ldr	r3, [pc, #264]	@ (800975c <HAL_RCC_OscConfig+0x900>)
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	4a41      	ldr	r2, [pc, #260]	@ (800975c <HAL_RCC_OscConfig+0x900>)
 8009658:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800965c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800965e:	f7fa f84d 	bl	80036fc <HAL_GetTick>
 8009662:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009664:	e008      	b.n	8009678 <HAL_RCC_OscConfig+0x81c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009666:	f7fa f849 	bl	80036fc <HAL_GetTick>
 800966a:	4602      	mov	r2, r0
 800966c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800966e:	1ad3      	subs	r3, r2, r3
 8009670:	2b02      	cmp	r3, #2
 8009672:	d901      	bls.n	8009678 <HAL_RCC_OscConfig+0x81c>
          {
            return HAL_TIMEOUT;
 8009674:	2303      	movs	r3, #3
 8009676:	e117      	b.n	80098a8 <HAL_RCC_OscConfig+0xa4c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009678:	4b38      	ldr	r3, [pc, #224]	@ (800975c <HAL_RCC_OscConfig+0x900>)
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009680:	2b00      	cmp	r3, #0
 8009682:	d1f0      	bne.n	8009666 <HAL_RCC_OscConfig+0x80a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009684:	4b35      	ldr	r3, [pc, #212]	@ (800975c <HAL_RCC_OscConfig+0x900>)
 8009686:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009688:	4b36      	ldr	r3, [pc, #216]	@ (8009764 <HAL_RCC_OscConfig+0x908>)
 800968a:	4013      	ands	r3, r2
 800968c:	687a      	ldr	r2, [r7, #4]
 800968e:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8009690:	687a      	ldr	r2, [r7, #4]
 8009692:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8009694:	0112      	lsls	r2, r2, #4
 8009696:	430a      	orrs	r2, r1
 8009698:	4930      	ldr	r1, [pc, #192]	@ (800975c <HAL_RCC_OscConfig+0x900>)
 800969a:	4313      	orrs	r3, r2
 800969c:	628b      	str	r3, [r1, #40]	@ 0x28
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80096a2:	3b01      	subs	r3, #1
 80096a4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80096ac:	3b01      	subs	r3, #1
 80096ae:	025b      	lsls	r3, r3, #9
 80096b0:	b29b      	uxth	r3, r3
 80096b2:	431a      	orrs	r2, r3
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096b8:	3b01      	subs	r3, #1
 80096ba:	041b      	lsls	r3, r3, #16
 80096bc:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80096c0:	431a      	orrs	r2, r3
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80096c6:	3b01      	subs	r3, #1
 80096c8:	061b      	lsls	r3, r3, #24
 80096ca:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80096ce:	4923      	ldr	r1, [pc, #140]	@ (800975c <HAL_RCC_OscConfig+0x900>)
 80096d0:	4313      	orrs	r3, r2
 80096d2:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80096d4:	4b21      	ldr	r3, [pc, #132]	@ (800975c <HAL_RCC_OscConfig+0x900>)
 80096d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096d8:	4a20      	ldr	r2, [pc, #128]	@ (800975c <HAL_RCC_OscConfig+0x900>)
 80096da:	f023 0301 	bic.w	r3, r3, #1
 80096de:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80096e0:	4b1e      	ldr	r3, [pc, #120]	@ (800975c <HAL_RCC_OscConfig+0x900>)
 80096e2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80096e4:	4b20      	ldr	r3, [pc, #128]	@ (8009768 <HAL_RCC_OscConfig+0x90c>)
 80096e6:	4013      	ands	r3, r2
 80096e8:	687a      	ldr	r2, [r7, #4]
 80096ea:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80096ec:	00d2      	lsls	r2, r2, #3
 80096ee:	491b      	ldr	r1, [pc, #108]	@ (800975c <HAL_RCC_OscConfig+0x900>)
 80096f0:	4313      	orrs	r3, r2
 80096f2:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80096f4:	4b19      	ldr	r3, [pc, #100]	@ (800975c <HAL_RCC_OscConfig+0x900>)
 80096f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096f8:	f023 020c 	bic.w	r2, r3, #12
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009700:	4916      	ldr	r1, [pc, #88]	@ (800975c <HAL_RCC_OscConfig+0x900>)
 8009702:	4313      	orrs	r3, r2
 8009704:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8009706:	4b15      	ldr	r3, [pc, #84]	@ (800975c <HAL_RCC_OscConfig+0x900>)
 8009708:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800970a:	f023 0202 	bic.w	r2, r3, #2
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009712:	4912      	ldr	r1, [pc, #72]	@ (800975c <HAL_RCC_OscConfig+0x900>)
 8009714:	4313      	orrs	r3, r2
 8009716:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009718:	4b10      	ldr	r3, [pc, #64]	@ (800975c <HAL_RCC_OscConfig+0x900>)
 800971a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800971c:	4a0f      	ldr	r2, [pc, #60]	@ (800975c <HAL_RCC_OscConfig+0x900>)
 800971e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009722:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009724:	4b0d      	ldr	r3, [pc, #52]	@ (800975c <HAL_RCC_OscConfig+0x900>)
 8009726:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009728:	4a0c      	ldr	r2, [pc, #48]	@ (800975c <HAL_RCC_OscConfig+0x900>)
 800972a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800972e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8009730:	4b0a      	ldr	r3, [pc, #40]	@ (800975c <HAL_RCC_OscConfig+0x900>)
 8009732:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009734:	4a09      	ldr	r2, [pc, #36]	@ (800975c <HAL_RCC_OscConfig+0x900>)
 8009736:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800973a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800973c:	4b07      	ldr	r3, [pc, #28]	@ (800975c <HAL_RCC_OscConfig+0x900>)
 800973e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009740:	4a06      	ldr	r2, [pc, #24]	@ (800975c <HAL_RCC_OscConfig+0x900>)
 8009742:	f043 0301 	orr.w	r3, r3, #1
 8009746:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009748:	4b04      	ldr	r3, [pc, #16]	@ (800975c <HAL_RCC_OscConfig+0x900>)
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	4a03      	ldr	r2, [pc, #12]	@ (800975c <HAL_RCC_OscConfig+0x900>)
 800974e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009752:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009754:	f7f9 ffd2 	bl	80036fc <HAL_GetTick>
 8009758:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800975a:	e010      	b.n	800977e <HAL_RCC_OscConfig+0x922>
 800975c:	58024400 	.word	0x58024400
 8009760:	0802162c 	.word	0x0802162c
 8009764:	fffffc0c 	.word	0xfffffc0c
 8009768:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800976c:	f7f9 ffc6 	bl	80036fc <HAL_GetTick>
 8009770:	4602      	mov	r2, r0
 8009772:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009774:	1ad3      	subs	r3, r2, r3
 8009776:	2b02      	cmp	r3, #2
 8009778:	d901      	bls.n	800977e <HAL_RCC_OscConfig+0x922>
          {
            return HAL_TIMEOUT;
 800977a:	2303      	movs	r3, #3
 800977c:	e094      	b.n	80098a8 <HAL_RCC_OscConfig+0xa4c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800977e:	4b4c      	ldr	r3, [pc, #304]	@ (80098b0 <HAL_RCC_OscConfig+0xa54>)
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009786:	2b00      	cmp	r3, #0
 8009788:	d0f0      	beq.n	800976c <HAL_RCC_OscConfig+0x910>
 800978a:	e08c      	b.n	80098a6 <HAL_RCC_OscConfig+0xa4a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800978c:	4b48      	ldr	r3, [pc, #288]	@ (80098b0 <HAL_RCC_OscConfig+0xa54>)
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	4a47      	ldr	r2, [pc, #284]	@ (80098b0 <HAL_RCC_OscConfig+0xa54>)
 8009792:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009796:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009798:	f7f9 ffb0 	bl	80036fc <HAL_GetTick>
 800979c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800979e:	e008      	b.n	80097b2 <HAL_RCC_OscConfig+0x956>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80097a0:	f7f9 ffac 	bl	80036fc <HAL_GetTick>
 80097a4:	4602      	mov	r2, r0
 80097a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097a8:	1ad3      	subs	r3, r2, r3
 80097aa:	2b02      	cmp	r3, #2
 80097ac:	d901      	bls.n	80097b2 <HAL_RCC_OscConfig+0x956>
          {
            return HAL_TIMEOUT;
 80097ae:	2303      	movs	r3, #3
 80097b0:	e07a      	b.n	80098a8 <HAL_RCC_OscConfig+0xa4c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80097b2:	4b3f      	ldr	r3, [pc, #252]	@ (80098b0 <HAL_RCC_OscConfig+0xa54>)
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d1f0      	bne.n	80097a0 <HAL_RCC_OscConfig+0x944>
 80097be:	e072      	b.n	80098a6 <HAL_RCC_OscConfig+0xa4a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80097c0:	4b3b      	ldr	r3, [pc, #236]	@ (80098b0 <HAL_RCC_OscConfig+0xa54>)
 80097c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097c4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80097c6:	4b3a      	ldr	r3, [pc, #232]	@ (80098b0 <HAL_RCC_OscConfig+0xa54>)
 80097c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80097ca:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80097d0:	2b01      	cmp	r3, #1
 80097d2:	d031      	beq.n	8009838 <HAL_RCC_OscConfig+0x9dc>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80097d4:	693b      	ldr	r3, [r7, #16]
 80097d6:	f003 0203 	and.w	r2, r3, #3
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80097de:	429a      	cmp	r2, r3
 80097e0:	d12a      	bne.n	8009838 <HAL_RCC_OscConfig+0x9dc>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80097e2:	693b      	ldr	r3, [r7, #16]
 80097e4:	091b      	lsrs	r3, r3, #4
 80097e6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80097ee:	429a      	cmp	r2, r3
 80097f0:	d122      	bne.n	8009838 <HAL_RCC_OscConfig+0x9dc>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80097fc:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80097fe:	429a      	cmp	r2, r3
 8009800:	d11a      	bne.n	8009838 <HAL_RCC_OscConfig+0x9dc>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	0a5b      	lsrs	r3, r3, #9
 8009806:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800980e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009810:	429a      	cmp	r2, r3
 8009812:	d111      	bne.n	8009838 <HAL_RCC_OscConfig+0x9dc>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	0c1b      	lsrs	r3, r3, #16
 8009818:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009820:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009822:	429a      	cmp	r2, r3
 8009824:	d108      	bne.n	8009838 <HAL_RCC_OscConfig+0x9dc>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	0e1b      	lsrs	r3, r3, #24
 800982a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009832:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009834:	429a      	cmp	r2, r3
 8009836:	d001      	beq.n	800983c <HAL_RCC_OscConfig+0x9e0>
      {
        return HAL_ERROR;
 8009838:	2301      	movs	r3, #1
 800983a:	e035      	b.n	80098a8 <HAL_RCC_OscConfig+0xa4c>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800983c:	4b1c      	ldr	r3, [pc, #112]	@ (80098b0 <HAL_RCC_OscConfig+0xa54>)
 800983e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009840:	08db      	lsrs	r3, r3, #3
 8009842:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009846:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800984c:	693a      	ldr	r2, [r7, #16]
 800984e:	429a      	cmp	r2, r3
 8009850:	d029      	beq.n	80098a6 <HAL_RCC_OscConfig+0xa4a>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009856:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800985a:	d304      	bcc.n	8009866 <HAL_RCC_OscConfig+0xa0a>
 800985c:	f44f 715b 	mov.w	r1, #876	@ 0x36c
 8009860:	4814      	ldr	r0, [pc, #80]	@ (80098b4 <HAL_RCC_OscConfig+0xa58>)
 8009862:	f7f8 fdaf 	bl	80023c4 <assert_failed>
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8009866:	4b12      	ldr	r3, [pc, #72]	@ (80098b0 <HAL_RCC_OscConfig+0xa54>)
 8009868:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800986a:	4a11      	ldr	r2, [pc, #68]	@ (80098b0 <HAL_RCC_OscConfig+0xa54>)
 800986c:	f023 0301 	bic.w	r3, r3, #1
 8009870:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8009872:	f7f9 ff43 	bl	80036fc <HAL_GetTick>
 8009876:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8009878:	bf00      	nop
 800987a:	f7f9 ff3f 	bl	80036fc <HAL_GetTick>
 800987e:	4602      	mov	r2, r0
 8009880:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009882:	4293      	cmp	r3, r2
 8009884:	d0f9      	beq.n	800987a <HAL_RCC_OscConfig+0xa1e>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009886:	4b0a      	ldr	r3, [pc, #40]	@ (80098b0 <HAL_RCC_OscConfig+0xa54>)
 8009888:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800988a:	4b0b      	ldr	r3, [pc, #44]	@ (80098b8 <HAL_RCC_OscConfig+0xa5c>)
 800988c:	4013      	ands	r3, r2
 800988e:	687a      	ldr	r2, [r7, #4]
 8009890:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8009892:	00d2      	lsls	r2, r2, #3
 8009894:	4906      	ldr	r1, [pc, #24]	@ (80098b0 <HAL_RCC_OscConfig+0xa54>)
 8009896:	4313      	orrs	r3, r2
 8009898:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800989a:	4b05      	ldr	r3, [pc, #20]	@ (80098b0 <HAL_RCC_OscConfig+0xa54>)
 800989c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800989e:	4a04      	ldr	r2, [pc, #16]	@ (80098b0 <HAL_RCC_OscConfig+0xa54>)
 80098a0:	f043 0301 	orr.w	r3, r3, #1
 80098a4:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80098a6:	2300      	movs	r3, #0
}
 80098a8:	4618      	mov	r0, r3
 80098aa:	3730      	adds	r7, #48	@ 0x30
 80098ac:	46bd      	mov	sp, r7
 80098ae:	bd80      	pop	{r7, pc}
 80098b0:	58024400 	.word	0x58024400
 80098b4:	0802162c 	.word	0x0802162c
 80098b8:	ffff0007 	.word	0xffff0007

080098bc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80098bc:	b580      	push	{r7, lr}
 80098be:	b086      	sub	sp, #24
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	6078      	str	r0, [r7, #4]
 80098c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d101      	bne.n	80098d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80098cc:	2301      	movs	r3, #1
 80098ce:	e354      	b.n	8009f7a <HAL_RCC_ClockConfig+0x6be>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d003      	beq.n	80098e0 <HAL_RCC_ClockConfig+0x24>
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	2b3f      	cmp	r3, #63	@ 0x3f
 80098de:	d904      	bls.n	80098ea <HAL_RCC_ClockConfig+0x2e>
 80098e0:	f240 31a7 	movw	r1, #935	@ 0x3a7
 80098e4:	4827      	ldr	r0, [pc, #156]	@ (8009984 <HAL_RCC_ClockConfig+0xc8>)
 80098e6:	f7f8 fd6d 	bl	80023c4 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 80098ea:	683b      	ldr	r3, [r7, #0]
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d031      	beq.n	8009954 <HAL_RCC_ClockConfig+0x98>
 80098f0:	683b      	ldr	r3, [r7, #0]
 80098f2:	2b01      	cmp	r3, #1
 80098f4:	d02e      	beq.n	8009954 <HAL_RCC_ClockConfig+0x98>
 80098f6:	683b      	ldr	r3, [r7, #0]
 80098f8:	2b02      	cmp	r3, #2
 80098fa:	d02b      	beq.n	8009954 <HAL_RCC_ClockConfig+0x98>
 80098fc:	683b      	ldr	r3, [r7, #0]
 80098fe:	2b03      	cmp	r3, #3
 8009900:	d028      	beq.n	8009954 <HAL_RCC_ClockConfig+0x98>
 8009902:	683b      	ldr	r3, [r7, #0]
 8009904:	2b04      	cmp	r3, #4
 8009906:	d025      	beq.n	8009954 <HAL_RCC_ClockConfig+0x98>
 8009908:	683b      	ldr	r3, [r7, #0]
 800990a:	2b05      	cmp	r3, #5
 800990c:	d022      	beq.n	8009954 <HAL_RCC_ClockConfig+0x98>
 800990e:	683b      	ldr	r3, [r7, #0]
 8009910:	2b06      	cmp	r3, #6
 8009912:	d01f      	beq.n	8009954 <HAL_RCC_ClockConfig+0x98>
 8009914:	683b      	ldr	r3, [r7, #0]
 8009916:	2b07      	cmp	r3, #7
 8009918:	d01c      	beq.n	8009954 <HAL_RCC_ClockConfig+0x98>
 800991a:	683b      	ldr	r3, [r7, #0]
 800991c:	2b08      	cmp	r3, #8
 800991e:	d019      	beq.n	8009954 <HAL_RCC_ClockConfig+0x98>
 8009920:	683b      	ldr	r3, [r7, #0]
 8009922:	2b09      	cmp	r3, #9
 8009924:	d016      	beq.n	8009954 <HAL_RCC_ClockConfig+0x98>
 8009926:	683b      	ldr	r3, [r7, #0]
 8009928:	2b0a      	cmp	r3, #10
 800992a:	d013      	beq.n	8009954 <HAL_RCC_ClockConfig+0x98>
 800992c:	683b      	ldr	r3, [r7, #0]
 800992e:	2b0b      	cmp	r3, #11
 8009930:	d010      	beq.n	8009954 <HAL_RCC_ClockConfig+0x98>
 8009932:	683b      	ldr	r3, [r7, #0]
 8009934:	2b0c      	cmp	r3, #12
 8009936:	d00d      	beq.n	8009954 <HAL_RCC_ClockConfig+0x98>
 8009938:	683b      	ldr	r3, [r7, #0]
 800993a:	2b0d      	cmp	r3, #13
 800993c:	d00a      	beq.n	8009954 <HAL_RCC_ClockConfig+0x98>
 800993e:	683b      	ldr	r3, [r7, #0]
 8009940:	2b0e      	cmp	r3, #14
 8009942:	d007      	beq.n	8009954 <HAL_RCC_ClockConfig+0x98>
 8009944:	683b      	ldr	r3, [r7, #0]
 8009946:	2b0f      	cmp	r3, #15
 8009948:	d004      	beq.n	8009954 <HAL_RCC_ClockConfig+0x98>
 800994a:	f44f 716a 	mov.w	r1, #936	@ 0x3a8
 800994e:	480d      	ldr	r0, [pc, #52]	@ (8009984 <HAL_RCC_ClockConfig+0xc8>)
 8009950:	f7f8 fd38 	bl	80023c4 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009954:	4b0c      	ldr	r3, [pc, #48]	@ (8009988 <HAL_RCC_ClockConfig+0xcc>)
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	f003 030f 	and.w	r3, r3, #15
 800995c:	683a      	ldr	r2, [r7, #0]
 800995e:	429a      	cmp	r2, r3
 8009960:	d914      	bls.n	800998c <HAL_RCC_ClockConfig+0xd0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009962:	4b09      	ldr	r3, [pc, #36]	@ (8009988 <HAL_RCC_ClockConfig+0xcc>)
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	f023 020f 	bic.w	r2, r3, #15
 800996a:	4907      	ldr	r1, [pc, #28]	@ (8009988 <HAL_RCC_ClockConfig+0xcc>)
 800996c:	683b      	ldr	r3, [r7, #0]
 800996e:	4313      	orrs	r3, r2
 8009970:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009972:	4b05      	ldr	r3, [pc, #20]	@ (8009988 <HAL_RCC_ClockConfig+0xcc>)
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	f003 030f 	and.w	r3, r3, #15
 800997a:	683a      	ldr	r2, [r7, #0]
 800997c:	429a      	cmp	r2, r3
 800997e:	d005      	beq.n	800998c <HAL_RCC_ClockConfig+0xd0>
    {
      return HAL_ERROR;
 8009980:	2301      	movs	r3, #1
 8009982:	e2fa      	b.n	8009f7a <HAL_RCC_ClockConfig+0x6be>
 8009984:	0802162c 	.word	0x0802162c
 8009988:	52002000 	.word	0x52002000

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	f003 0304 	and.w	r3, r3, #4
 8009994:	2b00      	cmp	r3, #0
 8009996:	d029      	beq.n	80099ec <HAL_RCC_ClockConfig+0x130>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	691a      	ldr	r2, [r3, #16]
 800999c:	4b7e      	ldr	r3, [pc, #504]	@ (8009b98 <HAL_RCC_ClockConfig+0x2dc>)
 800999e:	699b      	ldr	r3, [r3, #24]
 80099a0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80099a4:	429a      	cmp	r2, r3
 80099a6:	d921      	bls.n	80099ec <HAL_RCC_ClockConfig+0x130>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	691b      	ldr	r3, [r3, #16]
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d014      	beq.n	80099da <HAL_RCC_ClockConfig+0x11e>
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	691b      	ldr	r3, [r3, #16]
 80099b4:	2b40      	cmp	r3, #64	@ 0x40
 80099b6:	d010      	beq.n	80099da <HAL_RCC_ClockConfig+0x11e>
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	691b      	ldr	r3, [r3, #16]
 80099bc:	2b50      	cmp	r3, #80	@ 0x50
 80099be:	d00c      	beq.n	80099da <HAL_RCC_ClockConfig+0x11e>
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	691b      	ldr	r3, [r3, #16]
 80099c4:	2b60      	cmp	r3, #96	@ 0x60
 80099c6:	d008      	beq.n	80099da <HAL_RCC_ClockConfig+0x11e>
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	691b      	ldr	r3, [r3, #16]
 80099cc:	2b70      	cmp	r3, #112	@ 0x70
 80099ce:	d004      	beq.n	80099da <HAL_RCC_ClockConfig+0x11e>
 80099d0:	f44f 7171 	mov.w	r1, #964	@ 0x3c4
 80099d4:	4871      	ldr	r0, [pc, #452]	@ (8009b9c <HAL_RCC_ClockConfig+0x2e0>)
 80099d6:	f7f8 fcf5 	bl	80023c4 <assert_failed>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80099da:	4b6f      	ldr	r3, [pc, #444]	@ (8009b98 <HAL_RCC_ClockConfig+0x2dc>)
 80099dc:	699b      	ldr	r3, [r3, #24]
 80099de:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	691b      	ldr	r3, [r3, #16]
 80099e6:	496c      	ldr	r1, [pc, #432]	@ (8009b98 <HAL_RCC_ClockConfig+0x2dc>)
 80099e8:	4313      	orrs	r3, r2
 80099ea:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	f003 0308 	and.w	r3, r3, #8
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d029      	beq.n	8009a4c <HAL_RCC_ClockConfig+0x190>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	695a      	ldr	r2, [r3, #20]
 80099fc:	4b66      	ldr	r3, [pc, #408]	@ (8009b98 <HAL_RCC_ClockConfig+0x2dc>)
 80099fe:	69db      	ldr	r3, [r3, #28]
 8009a00:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009a04:	429a      	cmp	r2, r3
 8009a06:	d921      	bls.n	8009a4c <HAL_RCC_ClockConfig+0x190>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	695b      	ldr	r3, [r3, #20]
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d014      	beq.n	8009a3a <HAL_RCC_ClockConfig+0x17e>
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	695b      	ldr	r3, [r3, #20]
 8009a14:	2b40      	cmp	r3, #64	@ 0x40
 8009a16:	d010      	beq.n	8009a3a <HAL_RCC_ClockConfig+0x17e>
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	695b      	ldr	r3, [r3, #20]
 8009a1c:	2b50      	cmp	r3, #80	@ 0x50
 8009a1e:	d00c      	beq.n	8009a3a <HAL_RCC_ClockConfig+0x17e>
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	695b      	ldr	r3, [r3, #20]
 8009a24:	2b60      	cmp	r3, #96	@ 0x60
 8009a26:	d008      	beq.n	8009a3a <HAL_RCC_ClockConfig+0x17e>
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	695b      	ldr	r3, [r3, #20]
 8009a2c:	2b70      	cmp	r3, #112	@ 0x70
 8009a2e:	d004      	beq.n	8009a3a <HAL_RCC_ClockConfig+0x17e>
 8009a30:	f240 31d6 	movw	r1, #982	@ 0x3d6
 8009a34:	4859      	ldr	r0, [pc, #356]	@ (8009b9c <HAL_RCC_ClockConfig+0x2e0>)
 8009a36:	f7f8 fcc5 	bl	80023c4 <assert_failed>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009a3a:	4b57      	ldr	r3, [pc, #348]	@ (8009b98 <HAL_RCC_ClockConfig+0x2dc>)
 8009a3c:	69db      	ldr	r3, [r3, #28]
 8009a3e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	695b      	ldr	r3, [r3, #20]
 8009a46:	4954      	ldr	r1, [pc, #336]	@ (8009b98 <HAL_RCC_ClockConfig+0x2dc>)
 8009a48:	4313      	orrs	r3, r2
 8009a4a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	f003 0310 	and.w	r3, r3, #16
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d02d      	beq.n	8009ab4 <HAL_RCC_ClockConfig+0x1f8>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	699a      	ldr	r2, [r3, #24]
 8009a5c:	4b4e      	ldr	r3, [pc, #312]	@ (8009b98 <HAL_RCC_ClockConfig+0x2dc>)
 8009a5e:	69db      	ldr	r3, [r3, #28]
 8009a60:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009a64:	429a      	cmp	r2, r3
 8009a66:	d925      	bls.n	8009ab4 <HAL_RCC_ClockConfig+0x1f8>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	699b      	ldr	r3, [r3, #24]
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d018      	beq.n	8009aa2 <HAL_RCC_ClockConfig+0x1e6>
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	699b      	ldr	r3, [r3, #24]
 8009a74:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009a78:	d013      	beq.n	8009aa2 <HAL_RCC_ClockConfig+0x1e6>
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	699b      	ldr	r3, [r3, #24]
 8009a7e:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8009a82:	d00e      	beq.n	8009aa2 <HAL_RCC_ClockConfig+0x1e6>
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	699b      	ldr	r3, [r3, #24]
 8009a88:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8009a8c:	d009      	beq.n	8009aa2 <HAL_RCC_ClockConfig+0x1e6>
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	699b      	ldr	r3, [r3, #24]
 8009a92:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009a96:	d004      	beq.n	8009aa2 <HAL_RCC_ClockConfig+0x1e6>
 8009a98:	f240 31e7 	movw	r1, #999	@ 0x3e7
 8009a9c:	483f      	ldr	r0, [pc, #252]	@ (8009b9c <HAL_RCC_ClockConfig+0x2e0>)
 8009a9e:	f7f8 fc91 	bl	80023c4 <assert_failed>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009aa2:	4b3d      	ldr	r3, [pc, #244]	@ (8009b98 <HAL_RCC_ClockConfig+0x2dc>)
 8009aa4:	69db      	ldr	r3, [r3, #28]
 8009aa6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	699b      	ldr	r3, [r3, #24]
 8009aae:	493a      	ldr	r1, [pc, #232]	@ (8009b98 <HAL_RCC_ClockConfig+0x2dc>)
 8009ab0:	4313      	orrs	r3, r2
 8009ab2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	f003 0320 	and.w	r3, r3, #32
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d029      	beq.n	8009b14 <HAL_RCC_ClockConfig+0x258>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	69da      	ldr	r2, [r3, #28]
 8009ac4:	4b34      	ldr	r3, [pc, #208]	@ (8009b98 <HAL_RCC_ClockConfig+0x2dc>)
 8009ac6:	6a1b      	ldr	r3, [r3, #32]
 8009ac8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009acc:	429a      	cmp	r2, r3
 8009ace:	d921      	bls.n	8009b14 <HAL_RCC_ClockConfig+0x258>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	69db      	ldr	r3, [r3, #28]
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d014      	beq.n	8009b02 <HAL_RCC_ClockConfig+0x246>
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	69db      	ldr	r3, [r3, #28]
 8009adc:	2b40      	cmp	r3, #64	@ 0x40
 8009ade:	d010      	beq.n	8009b02 <HAL_RCC_ClockConfig+0x246>
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	69db      	ldr	r3, [r3, #28]
 8009ae4:	2b50      	cmp	r3, #80	@ 0x50
 8009ae6:	d00c      	beq.n	8009b02 <HAL_RCC_ClockConfig+0x246>
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	69db      	ldr	r3, [r3, #28]
 8009aec:	2b60      	cmp	r3, #96	@ 0x60
 8009aee:	d008      	beq.n	8009b02 <HAL_RCC_ClockConfig+0x246>
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	69db      	ldr	r3, [r3, #28]
 8009af4:	2b70      	cmp	r3, #112	@ 0x70
 8009af6:	d004      	beq.n	8009b02 <HAL_RCC_ClockConfig+0x246>
 8009af8:	f240 31f9 	movw	r1, #1017	@ 0x3f9
 8009afc:	4827      	ldr	r0, [pc, #156]	@ (8009b9c <HAL_RCC_ClockConfig+0x2e0>)
 8009afe:	f7f8 fc61 	bl	80023c4 <assert_failed>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8009b02:	4b25      	ldr	r3, [pc, #148]	@ (8009b98 <HAL_RCC_ClockConfig+0x2dc>)
 8009b04:	6a1b      	ldr	r3, [r3, #32]
 8009b06:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	69db      	ldr	r3, [r3, #28]
 8009b0e:	4922      	ldr	r1, [pc, #136]	@ (8009b98 <HAL_RCC_ClockConfig+0x2dc>)
 8009b10:	4313      	orrs	r3, r2
 8009b12:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	f003 0302 	and.w	r3, r3, #2
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d03f      	beq.n	8009ba0 <HAL_RCC_ClockConfig+0x2e4>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	68da      	ldr	r2, [r3, #12]
 8009b24:	4b1c      	ldr	r3, [pc, #112]	@ (8009b98 <HAL_RCC_ClockConfig+0x2dc>)
 8009b26:	699b      	ldr	r3, [r3, #24]
 8009b28:	f003 030f 	and.w	r3, r3, #15
 8009b2c:	429a      	cmp	r2, r3
 8009b2e:	d937      	bls.n	8009ba0 <HAL_RCC_ClockConfig+0x2e4>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	68db      	ldr	r3, [r3, #12]
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d024      	beq.n	8009b82 <HAL_RCC_ClockConfig+0x2c6>
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	68db      	ldr	r3, [r3, #12]
 8009b3c:	2b08      	cmp	r3, #8
 8009b3e:	d020      	beq.n	8009b82 <HAL_RCC_ClockConfig+0x2c6>
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	68db      	ldr	r3, [r3, #12]
 8009b44:	2b09      	cmp	r3, #9
 8009b46:	d01c      	beq.n	8009b82 <HAL_RCC_ClockConfig+0x2c6>
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	68db      	ldr	r3, [r3, #12]
 8009b4c:	2b0a      	cmp	r3, #10
 8009b4e:	d018      	beq.n	8009b82 <HAL_RCC_ClockConfig+0x2c6>
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	68db      	ldr	r3, [r3, #12]
 8009b54:	2b0b      	cmp	r3, #11
 8009b56:	d014      	beq.n	8009b82 <HAL_RCC_ClockConfig+0x2c6>
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	68db      	ldr	r3, [r3, #12]
 8009b5c:	2b0c      	cmp	r3, #12
 8009b5e:	d010      	beq.n	8009b82 <HAL_RCC_ClockConfig+0x2c6>
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	68db      	ldr	r3, [r3, #12]
 8009b64:	2b0d      	cmp	r3, #13
 8009b66:	d00c      	beq.n	8009b82 <HAL_RCC_ClockConfig+0x2c6>
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	68db      	ldr	r3, [r3, #12]
 8009b6c:	2b0e      	cmp	r3, #14
 8009b6e:	d008      	beq.n	8009b82 <HAL_RCC_ClockConfig+0x2c6>
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	68db      	ldr	r3, [r3, #12]
 8009b74:	2b0f      	cmp	r3, #15
 8009b76:	d004      	beq.n	8009b82 <HAL_RCC_ClockConfig+0x2c6>
 8009b78:	f240 410c 	movw	r1, #1036	@ 0x40c
 8009b7c:	4807      	ldr	r0, [pc, #28]	@ (8009b9c <HAL_RCC_ClockConfig+0x2e0>)
 8009b7e:	f7f8 fc21 	bl	80023c4 <assert_failed>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009b82:	4b05      	ldr	r3, [pc, #20]	@ (8009b98 <HAL_RCC_ClockConfig+0x2dc>)
 8009b84:	699b      	ldr	r3, [r3, #24]
 8009b86:	f023 020f 	bic.w	r2, r3, #15
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	68db      	ldr	r3, [r3, #12]
 8009b8e:	4902      	ldr	r1, [pc, #8]	@ (8009b98 <HAL_RCC_ClockConfig+0x2dc>)
 8009b90:	4313      	orrs	r3, r2
 8009b92:	618b      	str	r3, [r1, #24]
 8009b94:	e004      	b.n	8009ba0 <HAL_RCC_ClockConfig+0x2e4>
 8009b96:	bf00      	nop
 8009b98:	58024400 	.word	0x58024400
 8009b9c:	0802162c 	.word	0x0802162c
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	f003 0301 	and.w	r3, r3, #1
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	f000 809c 	beq.w	8009ce6 <HAL_RCC_ClockConfig+0x42a>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	689b      	ldr	r3, [r3, #8]
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d02c      	beq.n	8009c10 <HAL_RCC_ClockConfig+0x354>
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	689b      	ldr	r3, [r3, #8]
 8009bba:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009bbe:	d027      	beq.n	8009c10 <HAL_RCC_ClockConfig+0x354>
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	689b      	ldr	r3, [r3, #8]
 8009bc4:	f5b3 6f10 	cmp.w	r3, #2304	@ 0x900
 8009bc8:	d022      	beq.n	8009c10 <HAL_RCC_ClockConfig+0x354>
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	689b      	ldr	r3, [r3, #8]
 8009bce:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8009bd2:	d01d      	beq.n	8009c10 <HAL_RCC_ClockConfig+0x354>
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	689b      	ldr	r3, [r3, #8]
 8009bd8:	f5b3 6f30 	cmp.w	r3, #2816	@ 0xb00
 8009bdc:	d018      	beq.n	8009c10 <HAL_RCC_ClockConfig+0x354>
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	689b      	ldr	r3, [r3, #8]
 8009be2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009be6:	d013      	beq.n	8009c10 <HAL_RCC_ClockConfig+0x354>
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	689b      	ldr	r3, [r3, #8]
 8009bec:	f5b3 6f50 	cmp.w	r3, #3328	@ 0xd00
 8009bf0:	d00e      	beq.n	8009c10 <HAL_RCC_ClockConfig+0x354>
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	689b      	ldr	r3, [r3, #8]
 8009bf6:	f5b3 6f60 	cmp.w	r3, #3584	@ 0xe00
 8009bfa:	d009      	beq.n	8009c10 <HAL_RCC_ClockConfig+0x354>
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	689b      	ldr	r3, [r3, #8]
 8009c00:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8009c04:	d004      	beq.n	8009c10 <HAL_RCC_ClockConfig+0x354>
 8009c06:	f240 411c 	movw	r1, #1052	@ 0x41c
 8009c0a:	4863      	ldr	r0, [pc, #396]	@ (8009d98 <HAL_RCC_ClockConfig+0x4dc>)
 8009c0c:	f7f8 fbda 	bl	80023c4 <assert_failed>
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	685b      	ldr	r3, [r3, #4]
 8009c14:	2b01      	cmp	r3, #1
 8009c16:	d010      	beq.n	8009c3a <HAL_RCC_ClockConfig+0x37e>
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	685b      	ldr	r3, [r3, #4]
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d00c      	beq.n	8009c3a <HAL_RCC_ClockConfig+0x37e>
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	685b      	ldr	r3, [r3, #4]
 8009c24:	2b02      	cmp	r3, #2
 8009c26:	d008      	beq.n	8009c3a <HAL_RCC_ClockConfig+0x37e>
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	685b      	ldr	r3, [r3, #4]
 8009c2c:	2b03      	cmp	r3, #3
 8009c2e:	d004      	beq.n	8009c3a <HAL_RCC_ClockConfig+0x37e>
 8009c30:	f240 411d 	movw	r1, #1053	@ 0x41d
 8009c34:	4858      	ldr	r0, [pc, #352]	@ (8009d98 <HAL_RCC_ClockConfig+0x4dc>)
 8009c36:	f7f8 fbc5 	bl	80023c4 <assert_failed>
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8009c3a:	4b58      	ldr	r3, [pc, #352]	@ (8009d9c <HAL_RCC_ClockConfig+0x4e0>)
 8009c3c:	699b      	ldr	r3, [r3, #24]
 8009c3e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	689b      	ldr	r3, [r3, #8]
 8009c46:	4955      	ldr	r1, [pc, #340]	@ (8009d9c <HAL_RCC_ClockConfig+0x4e0>)
 8009c48:	4313      	orrs	r3, r2
 8009c4a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	685b      	ldr	r3, [r3, #4]
 8009c50:	2b02      	cmp	r3, #2
 8009c52:	d107      	bne.n	8009c64 <HAL_RCC_ClockConfig+0x3a8>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009c54:	4b51      	ldr	r3, [pc, #324]	@ (8009d9c <HAL_RCC_ClockConfig+0x4e0>)
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d121      	bne.n	8009ca4 <HAL_RCC_ClockConfig+0x3e8>
      {
        return HAL_ERROR;
 8009c60:	2301      	movs	r3, #1
 8009c62:	e18a      	b.n	8009f7a <HAL_RCC_ClockConfig+0x6be>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	685b      	ldr	r3, [r3, #4]
 8009c68:	2b03      	cmp	r3, #3
 8009c6a:	d107      	bne.n	8009c7c <HAL_RCC_ClockConfig+0x3c0>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009c6c:	4b4b      	ldr	r3, [pc, #300]	@ (8009d9c <HAL_RCC_ClockConfig+0x4e0>)
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d115      	bne.n	8009ca4 <HAL_RCC_ClockConfig+0x3e8>
      {
        return HAL_ERROR;
 8009c78:	2301      	movs	r3, #1
 8009c7a:	e17e      	b.n	8009f7a <HAL_RCC_ClockConfig+0x6be>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	685b      	ldr	r3, [r3, #4]
 8009c80:	2b01      	cmp	r3, #1
 8009c82:	d107      	bne.n	8009c94 <HAL_RCC_ClockConfig+0x3d8>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009c84:	4b45      	ldr	r3, [pc, #276]	@ (8009d9c <HAL_RCC_ClockConfig+0x4e0>)
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d109      	bne.n	8009ca4 <HAL_RCC_ClockConfig+0x3e8>
      {
        return HAL_ERROR;
 8009c90:	2301      	movs	r3, #1
 8009c92:	e172      	b.n	8009f7a <HAL_RCC_ClockConfig+0x6be>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009c94:	4b41      	ldr	r3, [pc, #260]	@ (8009d9c <HAL_RCC_ClockConfig+0x4e0>)
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	f003 0304 	and.w	r3, r3, #4
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d101      	bne.n	8009ca4 <HAL_RCC_ClockConfig+0x3e8>
      {
        return HAL_ERROR;
 8009ca0:	2301      	movs	r3, #1
 8009ca2:	e16a      	b.n	8009f7a <HAL_RCC_ClockConfig+0x6be>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009ca4:	4b3d      	ldr	r3, [pc, #244]	@ (8009d9c <HAL_RCC_ClockConfig+0x4e0>)
 8009ca6:	691b      	ldr	r3, [r3, #16]
 8009ca8:	f023 0207 	bic.w	r2, r3, #7
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	685b      	ldr	r3, [r3, #4]
 8009cb0:	493a      	ldr	r1, [pc, #232]	@ (8009d9c <HAL_RCC_ClockConfig+0x4e0>)
 8009cb2:	4313      	orrs	r3, r2
 8009cb4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009cb6:	f7f9 fd21 	bl	80036fc <HAL_GetTick>
 8009cba:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009cbc:	e00a      	b.n	8009cd4 <HAL_RCC_ClockConfig+0x418>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009cbe:	f7f9 fd1d 	bl	80036fc <HAL_GetTick>
 8009cc2:	4602      	mov	r2, r0
 8009cc4:	697b      	ldr	r3, [r7, #20]
 8009cc6:	1ad3      	subs	r3, r2, r3
 8009cc8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009ccc:	4293      	cmp	r3, r2
 8009cce:	d901      	bls.n	8009cd4 <HAL_RCC_ClockConfig+0x418>
      {
        return HAL_TIMEOUT;
 8009cd0:	2303      	movs	r3, #3
 8009cd2:	e152      	b.n	8009f7a <HAL_RCC_ClockConfig+0x6be>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009cd4:	4b31      	ldr	r3, [pc, #196]	@ (8009d9c <HAL_RCC_ClockConfig+0x4e0>)
 8009cd6:	691b      	ldr	r3, [r3, #16]
 8009cd8:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	685b      	ldr	r3, [r3, #4]
 8009ce0:	00db      	lsls	r3, r3, #3
 8009ce2:	429a      	cmp	r2, r3
 8009ce4:	d1eb      	bne.n	8009cbe <HAL_RCC_ClockConfig+0x402>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	f003 0302 	and.w	r3, r3, #2
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d039      	beq.n	8009d66 <HAL_RCC_ClockConfig+0x4aa>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	68da      	ldr	r2, [r3, #12]
 8009cf6:	4b29      	ldr	r3, [pc, #164]	@ (8009d9c <HAL_RCC_ClockConfig+0x4e0>)
 8009cf8:	699b      	ldr	r3, [r3, #24]
 8009cfa:	f003 030f 	and.w	r3, r3, #15
 8009cfe:	429a      	cmp	r2, r3
 8009d00:	d231      	bcs.n	8009d66 <HAL_RCC_ClockConfig+0x4aa>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	68db      	ldr	r3, [r3, #12]
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d024      	beq.n	8009d54 <HAL_RCC_ClockConfig+0x498>
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	68db      	ldr	r3, [r3, #12]
 8009d0e:	2b08      	cmp	r3, #8
 8009d10:	d020      	beq.n	8009d54 <HAL_RCC_ClockConfig+0x498>
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	68db      	ldr	r3, [r3, #12]
 8009d16:	2b09      	cmp	r3, #9
 8009d18:	d01c      	beq.n	8009d54 <HAL_RCC_ClockConfig+0x498>
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	68db      	ldr	r3, [r3, #12]
 8009d1e:	2b0a      	cmp	r3, #10
 8009d20:	d018      	beq.n	8009d54 <HAL_RCC_ClockConfig+0x498>
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	68db      	ldr	r3, [r3, #12]
 8009d26:	2b0b      	cmp	r3, #11
 8009d28:	d014      	beq.n	8009d54 <HAL_RCC_ClockConfig+0x498>
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	68db      	ldr	r3, [r3, #12]
 8009d2e:	2b0c      	cmp	r3, #12
 8009d30:	d010      	beq.n	8009d54 <HAL_RCC_ClockConfig+0x498>
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	68db      	ldr	r3, [r3, #12]
 8009d36:	2b0d      	cmp	r3, #13
 8009d38:	d00c      	beq.n	8009d54 <HAL_RCC_ClockConfig+0x498>
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	68db      	ldr	r3, [r3, #12]
 8009d3e:	2b0e      	cmp	r3, #14
 8009d40:	d008      	beq.n	8009d54 <HAL_RCC_ClockConfig+0x498>
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	68db      	ldr	r3, [r3, #12]
 8009d46:	2b0f      	cmp	r3, #15
 8009d48:	d004      	beq.n	8009d54 <HAL_RCC_ClockConfig+0x498>
 8009d4a:	f240 415e 	movw	r1, #1118	@ 0x45e
 8009d4e:	4812      	ldr	r0, [pc, #72]	@ (8009d98 <HAL_RCC_ClockConfig+0x4dc>)
 8009d50:	f7f8 fb38 	bl	80023c4 <assert_failed>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009d54:	4b11      	ldr	r3, [pc, #68]	@ (8009d9c <HAL_RCC_ClockConfig+0x4e0>)
 8009d56:	699b      	ldr	r3, [r3, #24]
 8009d58:	f023 020f 	bic.w	r2, r3, #15
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	68db      	ldr	r3, [r3, #12]
 8009d60:	490e      	ldr	r1, [pc, #56]	@ (8009d9c <HAL_RCC_ClockConfig+0x4e0>)
 8009d62:	4313      	orrs	r3, r2
 8009d64:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009d66:	4b0e      	ldr	r3, [pc, #56]	@ (8009da0 <HAL_RCC_ClockConfig+0x4e4>)
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	f003 030f 	and.w	r3, r3, #15
 8009d6e:	683a      	ldr	r2, [r7, #0]
 8009d70:	429a      	cmp	r2, r3
 8009d72:	d217      	bcs.n	8009da4 <HAL_RCC_ClockConfig+0x4e8>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009d74:	4b0a      	ldr	r3, [pc, #40]	@ (8009da0 <HAL_RCC_ClockConfig+0x4e4>)
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	f023 020f 	bic.w	r2, r3, #15
 8009d7c:	4908      	ldr	r1, [pc, #32]	@ (8009da0 <HAL_RCC_ClockConfig+0x4e4>)
 8009d7e:	683b      	ldr	r3, [r7, #0]
 8009d80:	4313      	orrs	r3, r2
 8009d82:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009d84:	4b06      	ldr	r3, [pc, #24]	@ (8009da0 <HAL_RCC_ClockConfig+0x4e4>)
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	f003 030f 	and.w	r3, r3, #15
 8009d8c:	683a      	ldr	r2, [r7, #0]
 8009d8e:	429a      	cmp	r2, r3
 8009d90:	d008      	beq.n	8009da4 <HAL_RCC_ClockConfig+0x4e8>
    {
      return HAL_ERROR;
 8009d92:	2301      	movs	r3, #1
 8009d94:	e0f1      	b.n	8009f7a <HAL_RCC_ClockConfig+0x6be>
 8009d96:	bf00      	nop
 8009d98:	0802162c 	.word	0x0802162c
 8009d9c:	58024400 	.word	0x58024400
 8009da0:	52002000 	.word	0x52002000
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	f003 0304 	and.w	r3, r3, #4
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d029      	beq.n	8009e04 <HAL_RCC_ClockConfig+0x548>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	691a      	ldr	r2, [r3, #16]
 8009db4:	4b73      	ldr	r3, [pc, #460]	@ (8009f84 <HAL_RCC_ClockConfig+0x6c8>)
 8009db6:	699b      	ldr	r3, [r3, #24]
 8009db8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009dbc:	429a      	cmp	r2, r3
 8009dbe:	d221      	bcs.n	8009e04 <HAL_RCC_ClockConfig+0x548>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	691b      	ldr	r3, [r3, #16]
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d014      	beq.n	8009df2 <HAL_RCC_ClockConfig+0x536>
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	691b      	ldr	r3, [r3, #16]
 8009dcc:	2b40      	cmp	r3, #64	@ 0x40
 8009dce:	d010      	beq.n	8009df2 <HAL_RCC_ClockConfig+0x536>
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	691b      	ldr	r3, [r3, #16]
 8009dd4:	2b50      	cmp	r3, #80	@ 0x50
 8009dd6:	d00c      	beq.n	8009df2 <HAL_RCC_ClockConfig+0x536>
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	691b      	ldr	r3, [r3, #16]
 8009ddc:	2b60      	cmp	r3, #96	@ 0x60
 8009dde:	d008      	beq.n	8009df2 <HAL_RCC_ClockConfig+0x536>
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	691b      	ldr	r3, [r3, #16]
 8009de4:	2b70      	cmp	r3, #112	@ 0x70
 8009de6:	d004      	beq.n	8009df2 <HAL_RCC_ClockConfig+0x536>
 8009de8:	f240 417f 	movw	r1, #1151	@ 0x47f
 8009dec:	4866      	ldr	r0, [pc, #408]	@ (8009f88 <HAL_RCC_ClockConfig+0x6cc>)
 8009dee:	f7f8 fae9 	bl	80023c4 <assert_failed>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009df2:	4b64      	ldr	r3, [pc, #400]	@ (8009f84 <HAL_RCC_ClockConfig+0x6c8>)
 8009df4:	699b      	ldr	r3, [r3, #24]
 8009df6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	691b      	ldr	r3, [r3, #16]
 8009dfe:	4961      	ldr	r1, [pc, #388]	@ (8009f84 <HAL_RCC_ClockConfig+0x6c8>)
 8009e00:	4313      	orrs	r3, r2
 8009e02:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	f003 0308 	and.w	r3, r3, #8
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d029      	beq.n	8009e64 <HAL_RCC_ClockConfig+0x5a8>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	695a      	ldr	r2, [r3, #20]
 8009e14:	4b5b      	ldr	r3, [pc, #364]	@ (8009f84 <HAL_RCC_ClockConfig+0x6c8>)
 8009e16:	69db      	ldr	r3, [r3, #28]
 8009e18:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009e1c:	429a      	cmp	r2, r3
 8009e1e:	d221      	bcs.n	8009e64 <HAL_RCC_ClockConfig+0x5a8>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	695b      	ldr	r3, [r3, #20]
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d014      	beq.n	8009e52 <HAL_RCC_ClockConfig+0x596>
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	695b      	ldr	r3, [r3, #20]
 8009e2c:	2b40      	cmp	r3, #64	@ 0x40
 8009e2e:	d010      	beq.n	8009e52 <HAL_RCC_ClockConfig+0x596>
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	695b      	ldr	r3, [r3, #20]
 8009e34:	2b50      	cmp	r3, #80	@ 0x50
 8009e36:	d00c      	beq.n	8009e52 <HAL_RCC_ClockConfig+0x596>
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	695b      	ldr	r3, [r3, #20]
 8009e3c:	2b60      	cmp	r3, #96	@ 0x60
 8009e3e:	d008      	beq.n	8009e52 <HAL_RCC_ClockConfig+0x596>
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	695b      	ldr	r3, [r3, #20]
 8009e44:	2b70      	cmp	r3, #112	@ 0x70
 8009e46:	d004      	beq.n	8009e52 <HAL_RCC_ClockConfig+0x596>
 8009e48:	f240 4191 	movw	r1, #1169	@ 0x491
 8009e4c:	484e      	ldr	r0, [pc, #312]	@ (8009f88 <HAL_RCC_ClockConfig+0x6cc>)
 8009e4e:	f7f8 fab9 	bl	80023c4 <assert_failed>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009e52:	4b4c      	ldr	r3, [pc, #304]	@ (8009f84 <HAL_RCC_ClockConfig+0x6c8>)
 8009e54:	69db      	ldr	r3, [r3, #28]
 8009e56:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	695b      	ldr	r3, [r3, #20]
 8009e5e:	4949      	ldr	r1, [pc, #292]	@ (8009f84 <HAL_RCC_ClockConfig+0x6c8>)
 8009e60:	4313      	orrs	r3, r2
 8009e62:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	f003 0310 	and.w	r3, r3, #16
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d02d      	beq.n	8009ecc <HAL_RCC_ClockConfig+0x610>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	699a      	ldr	r2, [r3, #24]
 8009e74:	4b43      	ldr	r3, [pc, #268]	@ (8009f84 <HAL_RCC_ClockConfig+0x6c8>)
 8009e76:	69db      	ldr	r3, [r3, #28]
 8009e78:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009e7c:	429a      	cmp	r2, r3
 8009e7e:	d225      	bcs.n	8009ecc <HAL_RCC_ClockConfig+0x610>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	699b      	ldr	r3, [r3, #24]
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d018      	beq.n	8009eba <HAL_RCC_ClockConfig+0x5fe>
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	699b      	ldr	r3, [r3, #24]
 8009e8c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009e90:	d013      	beq.n	8009eba <HAL_RCC_ClockConfig+0x5fe>
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	699b      	ldr	r3, [r3, #24]
 8009e96:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8009e9a:	d00e      	beq.n	8009eba <HAL_RCC_ClockConfig+0x5fe>
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	699b      	ldr	r3, [r3, #24]
 8009ea0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8009ea4:	d009      	beq.n	8009eba <HAL_RCC_ClockConfig+0x5fe>
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	699b      	ldr	r3, [r3, #24]
 8009eaa:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009eae:	d004      	beq.n	8009eba <HAL_RCC_ClockConfig+0x5fe>
 8009eb0:	f240 41a3 	movw	r1, #1187	@ 0x4a3
 8009eb4:	4834      	ldr	r0, [pc, #208]	@ (8009f88 <HAL_RCC_ClockConfig+0x6cc>)
 8009eb6:	f7f8 fa85 	bl	80023c4 <assert_failed>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009eba:	4b32      	ldr	r3, [pc, #200]	@ (8009f84 <HAL_RCC_ClockConfig+0x6c8>)
 8009ebc:	69db      	ldr	r3, [r3, #28]
 8009ebe:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	699b      	ldr	r3, [r3, #24]
 8009ec6:	492f      	ldr	r1, [pc, #188]	@ (8009f84 <HAL_RCC_ClockConfig+0x6c8>)
 8009ec8:	4313      	orrs	r3, r2
 8009eca:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	f003 0320 	and.w	r3, r3, #32
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d029      	beq.n	8009f2c <HAL_RCC_ClockConfig+0x670>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	69da      	ldr	r2, [r3, #28]
 8009edc:	4b29      	ldr	r3, [pc, #164]	@ (8009f84 <HAL_RCC_ClockConfig+0x6c8>)
 8009ede:	6a1b      	ldr	r3, [r3, #32]
 8009ee0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009ee4:	429a      	cmp	r2, r3
 8009ee6:	d221      	bcs.n	8009f2c <HAL_RCC_ClockConfig+0x670>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	69db      	ldr	r3, [r3, #28]
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d014      	beq.n	8009f1a <HAL_RCC_ClockConfig+0x65e>
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	69db      	ldr	r3, [r3, #28]
 8009ef4:	2b40      	cmp	r3, #64	@ 0x40
 8009ef6:	d010      	beq.n	8009f1a <HAL_RCC_ClockConfig+0x65e>
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	69db      	ldr	r3, [r3, #28]
 8009efc:	2b50      	cmp	r3, #80	@ 0x50
 8009efe:	d00c      	beq.n	8009f1a <HAL_RCC_ClockConfig+0x65e>
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	69db      	ldr	r3, [r3, #28]
 8009f04:	2b60      	cmp	r3, #96	@ 0x60
 8009f06:	d008      	beq.n	8009f1a <HAL_RCC_ClockConfig+0x65e>
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	69db      	ldr	r3, [r3, #28]
 8009f0c:	2b70      	cmp	r3, #112	@ 0x70
 8009f0e:	d004      	beq.n	8009f1a <HAL_RCC_ClockConfig+0x65e>
 8009f10:	f240 41b5 	movw	r1, #1205	@ 0x4b5
 8009f14:	481c      	ldr	r0, [pc, #112]	@ (8009f88 <HAL_RCC_ClockConfig+0x6cc>)
 8009f16:	f7f8 fa55 	bl	80023c4 <assert_failed>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8009f1a:	4b1a      	ldr	r3, [pc, #104]	@ (8009f84 <HAL_RCC_ClockConfig+0x6c8>)
 8009f1c:	6a1b      	ldr	r3, [r3, #32]
 8009f1e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	69db      	ldr	r3, [r3, #28]
 8009f26:	4917      	ldr	r1, [pc, #92]	@ (8009f84 <HAL_RCC_ClockConfig+0x6c8>)
 8009f28:	4313      	orrs	r3, r2
 8009f2a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8009f2c:	f000 f836 	bl	8009f9c <HAL_RCC_GetSysClockFreq>
 8009f30:	4602      	mov	r2, r0
 8009f32:	4b14      	ldr	r3, [pc, #80]	@ (8009f84 <HAL_RCC_ClockConfig+0x6c8>)
 8009f34:	699b      	ldr	r3, [r3, #24]
 8009f36:	0a1b      	lsrs	r3, r3, #8
 8009f38:	f003 030f 	and.w	r3, r3, #15
 8009f3c:	4913      	ldr	r1, [pc, #76]	@ (8009f8c <HAL_RCC_ClockConfig+0x6d0>)
 8009f3e:	5ccb      	ldrb	r3, [r1, r3]
 8009f40:	f003 031f 	and.w	r3, r3, #31
 8009f44:	fa22 f303 	lsr.w	r3, r2, r3
 8009f48:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009f4a:	4b0e      	ldr	r3, [pc, #56]	@ (8009f84 <HAL_RCC_ClockConfig+0x6c8>)
 8009f4c:	699b      	ldr	r3, [r3, #24]
 8009f4e:	f003 030f 	and.w	r3, r3, #15
 8009f52:	4a0e      	ldr	r2, [pc, #56]	@ (8009f8c <HAL_RCC_ClockConfig+0x6d0>)
 8009f54:	5cd3      	ldrb	r3, [r2, r3]
 8009f56:	f003 031f 	and.w	r3, r3, #31
 8009f5a:	693a      	ldr	r2, [r7, #16]
 8009f5c:	fa22 f303 	lsr.w	r3, r2, r3
 8009f60:	4a0b      	ldr	r2, [pc, #44]	@ (8009f90 <HAL_RCC_ClockConfig+0x6d4>)
 8009f62:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009f64:	4a0b      	ldr	r2, [pc, #44]	@ (8009f94 <HAL_RCC_ClockConfig+0x6d8>)
 8009f66:	693b      	ldr	r3, [r7, #16]
 8009f68:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8009f6a:	4b0b      	ldr	r3, [pc, #44]	@ (8009f98 <HAL_RCC_ClockConfig+0x6dc>)
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	4618      	mov	r0, r3
 8009f70:	f7f8 feaa 	bl	8002cc8 <HAL_InitTick>
 8009f74:	4603      	mov	r3, r0
 8009f76:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8009f78:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f7a:	4618      	mov	r0, r3
 8009f7c:	3718      	adds	r7, #24
 8009f7e:	46bd      	mov	sp, r7
 8009f80:	bd80      	pop	{r7, pc}
 8009f82:	bf00      	nop
 8009f84:	58024400 	.word	0x58024400
 8009f88:	0802162c 	.word	0x0802162c
 8009f8c:	08022f14 	.word	0x08022f14
 8009f90:	24000008 	.word	0x24000008
 8009f94:	24000004 	.word	0x24000004
 8009f98:	2400000c 	.word	0x2400000c

08009f9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009f9c:	b480      	push	{r7}
 8009f9e:	b089      	sub	sp, #36	@ 0x24
 8009fa0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009fa2:	4bb3      	ldr	r3, [pc, #716]	@ (800a270 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009fa4:	691b      	ldr	r3, [r3, #16]
 8009fa6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009faa:	2b18      	cmp	r3, #24
 8009fac:	f200 8155 	bhi.w	800a25a <HAL_RCC_GetSysClockFreq+0x2be>
 8009fb0:	a201      	add	r2, pc, #4	@ (adr r2, 8009fb8 <HAL_RCC_GetSysClockFreq+0x1c>)
 8009fb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fb6:	bf00      	nop
 8009fb8:	0800a01d 	.word	0x0800a01d
 8009fbc:	0800a25b 	.word	0x0800a25b
 8009fc0:	0800a25b 	.word	0x0800a25b
 8009fc4:	0800a25b 	.word	0x0800a25b
 8009fc8:	0800a25b 	.word	0x0800a25b
 8009fcc:	0800a25b 	.word	0x0800a25b
 8009fd0:	0800a25b 	.word	0x0800a25b
 8009fd4:	0800a25b 	.word	0x0800a25b
 8009fd8:	0800a043 	.word	0x0800a043
 8009fdc:	0800a25b 	.word	0x0800a25b
 8009fe0:	0800a25b 	.word	0x0800a25b
 8009fe4:	0800a25b 	.word	0x0800a25b
 8009fe8:	0800a25b 	.word	0x0800a25b
 8009fec:	0800a25b 	.word	0x0800a25b
 8009ff0:	0800a25b 	.word	0x0800a25b
 8009ff4:	0800a25b 	.word	0x0800a25b
 8009ff8:	0800a049 	.word	0x0800a049
 8009ffc:	0800a25b 	.word	0x0800a25b
 800a000:	0800a25b 	.word	0x0800a25b
 800a004:	0800a25b 	.word	0x0800a25b
 800a008:	0800a25b 	.word	0x0800a25b
 800a00c:	0800a25b 	.word	0x0800a25b
 800a010:	0800a25b 	.word	0x0800a25b
 800a014:	0800a25b 	.word	0x0800a25b
 800a018:	0800a04f 	.word	0x0800a04f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a01c:	4b94      	ldr	r3, [pc, #592]	@ (800a270 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	f003 0320 	and.w	r3, r3, #32
 800a024:	2b00      	cmp	r3, #0
 800a026:	d009      	beq.n	800a03c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a028:	4b91      	ldr	r3, [pc, #580]	@ (800a270 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	08db      	lsrs	r3, r3, #3
 800a02e:	f003 0303 	and.w	r3, r3, #3
 800a032:	4a90      	ldr	r2, [pc, #576]	@ (800a274 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a034:	fa22 f303 	lsr.w	r3, r2, r3
 800a038:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800a03a:	e111      	b.n	800a260 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800a03c:	4b8d      	ldr	r3, [pc, #564]	@ (800a274 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a03e:	61bb      	str	r3, [r7, #24]
      break;
 800a040:	e10e      	b.n	800a260 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800a042:	4b8d      	ldr	r3, [pc, #564]	@ (800a278 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a044:	61bb      	str	r3, [r7, #24]
      break;
 800a046:	e10b      	b.n	800a260 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800a048:	4b8c      	ldr	r3, [pc, #560]	@ (800a27c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800a04a:	61bb      	str	r3, [r7, #24]
      break;
 800a04c:	e108      	b.n	800a260 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a04e:	4b88      	ldr	r3, [pc, #544]	@ (800a270 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a050:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a052:	f003 0303 	and.w	r3, r3, #3
 800a056:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800a058:	4b85      	ldr	r3, [pc, #532]	@ (800a270 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a05a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a05c:	091b      	lsrs	r3, r3, #4
 800a05e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a062:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800a064:	4b82      	ldr	r3, [pc, #520]	@ (800a270 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a066:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a068:	f003 0301 	and.w	r3, r3, #1
 800a06c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800a06e:	4b80      	ldr	r3, [pc, #512]	@ (800a270 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a070:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a072:	08db      	lsrs	r3, r3, #3
 800a074:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a078:	68fa      	ldr	r2, [r7, #12]
 800a07a:	fb02 f303 	mul.w	r3, r2, r3
 800a07e:	ee07 3a90 	vmov	s15, r3
 800a082:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a086:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800a08a:	693b      	ldr	r3, [r7, #16]
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	f000 80e1 	beq.w	800a254 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 800a092:	697b      	ldr	r3, [r7, #20]
 800a094:	2b02      	cmp	r3, #2
 800a096:	f000 8083 	beq.w	800a1a0 <HAL_RCC_GetSysClockFreq+0x204>
 800a09a:	697b      	ldr	r3, [r7, #20]
 800a09c:	2b02      	cmp	r3, #2
 800a09e:	f200 80a1 	bhi.w	800a1e4 <HAL_RCC_GetSysClockFreq+0x248>
 800a0a2:	697b      	ldr	r3, [r7, #20]
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d003      	beq.n	800a0b0 <HAL_RCC_GetSysClockFreq+0x114>
 800a0a8:	697b      	ldr	r3, [r7, #20]
 800a0aa:	2b01      	cmp	r3, #1
 800a0ac:	d056      	beq.n	800a15c <HAL_RCC_GetSysClockFreq+0x1c0>
 800a0ae:	e099      	b.n	800a1e4 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a0b0:	4b6f      	ldr	r3, [pc, #444]	@ (800a270 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	f003 0320 	and.w	r3, r3, #32
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d02d      	beq.n	800a118 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a0bc:	4b6c      	ldr	r3, [pc, #432]	@ (800a270 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	08db      	lsrs	r3, r3, #3
 800a0c2:	f003 0303 	and.w	r3, r3, #3
 800a0c6:	4a6b      	ldr	r2, [pc, #428]	@ (800a274 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a0c8:	fa22 f303 	lsr.w	r3, r2, r3
 800a0cc:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	ee07 3a90 	vmov	s15, r3
 800a0d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a0d8:	693b      	ldr	r3, [r7, #16]
 800a0da:	ee07 3a90 	vmov	s15, r3
 800a0de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a0e6:	4b62      	ldr	r3, [pc, #392]	@ (800a270 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a0e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a0ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a0ee:	ee07 3a90 	vmov	s15, r3
 800a0f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a0f6:	ed97 6a02 	vldr	s12, [r7, #8]
 800a0fa:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800a280 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a0fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a102:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a106:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a10a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a10e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a112:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800a116:	e087      	b.n	800a228 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a118:	693b      	ldr	r3, [r7, #16]
 800a11a:	ee07 3a90 	vmov	s15, r3
 800a11e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a122:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800a284 <HAL_RCC_GetSysClockFreq+0x2e8>
 800a126:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a12a:	4b51      	ldr	r3, [pc, #324]	@ (800a270 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a12c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a12e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a132:	ee07 3a90 	vmov	s15, r3
 800a136:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a13a:	ed97 6a02 	vldr	s12, [r7, #8]
 800a13e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800a280 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a142:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a146:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a14a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a14e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a152:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a156:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a15a:	e065      	b.n	800a228 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a15c:	693b      	ldr	r3, [r7, #16]
 800a15e:	ee07 3a90 	vmov	s15, r3
 800a162:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a166:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800a288 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a16a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a16e:	4b40      	ldr	r3, [pc, #256]	@ (800a270 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a170:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a172:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a176:	ee07 3a90 	vmov	s15, r3
 800a17a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a17e:	ed97 6a02 	vldr	s12, [r7, #8]
 800a182:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800a280 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a186:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a18a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a18e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a192:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a196:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a19a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a19e:	e043      	b.n	800a228 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a1a0:	693b      	ldr	r3, [r7, #16]
 800a1a2:	ee07 3a90 	vmov	s15, r3
 800a1a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a1aa:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800a28c <HAL_RCC_GetSysClockFreq+0x2f0>
 800a1ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a1b2:	4b2f      	ldr	r3, [pc, #188]	@ (800a270 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a1b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a1b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a1ba:	ee07 3a90 	vmov	s15, r3
 800a1be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a1c2:	ed97 6a02 	vldr	s12, [r7, #8]
 800a1c6:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800a280 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a1ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a1ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a1d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a1d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a1da:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a1de:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a1e2:	e021      	b.n	800a228 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a1e4:	693b      	ldr	r3, [r7, #16]
 800a1e6:	ee07 3a90 	vmov	s15, r3
 800a1ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a1ee:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800a288 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a1f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a1f6:	4b1e      	ldr	r3, [pc, #120]	@ (800a270 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a1f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a1fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a1fe:	ee07 3a90 	vmov	s15, r3
 800a202:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a206:	ed97 6a02 	vldr	s12, [r7, #8]
 800a20a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800a280 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a20e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a212:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a216:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a21a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a21e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a222:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a226:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800a228:	4b11      	ldr	r3, [pc, #68]	@ (800a270 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a22a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a22c:	0a5b      	lsrs	r3, r3, #9
 800a22e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a232:	3301      	adds	r3, #1
 800a234:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800a236:	683b      	ldr	r3, [r7, #0]
 800a238:	ee07 3a90 	vmov	s15, r3
 800a23c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a240:	edd7 6a07 	vldr	s13, [r7, #28]
 800a244:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a248:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a24c:	ee17 3a90 	vmov	r3, s15
 800a250:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800a252:	e005      	b.n	800a260 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800a254:	2300      	movs	r3, #0
 800a256:	61bb      	str	r3, [r7, #24]
      break;
 800a258:	e002      	b.n	800a260 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800a25a:	4b07      	ldr	r3, [pc, #28]	@ (800a278 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a25c:	61bb      	str	r3, [r7, #24]
      break;
 800a25e:	bf00      	nop
  }

  return sysclockfreq;
 800a260:	69bb      	ldr	r3, [r7, #24]
}
 800a262:	4618      	mov	r0, r3
 800a264:	3724      	adds	r7, #36	@ 0x24
 800a266:	46bd      	mov	sp, r7
 800a268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a26c:	4770      	bx	lr
 800a26e:	bf00      	nop
 800a270:	58024400 	.word	0x58024400
 800a274:	03d09000 	.word	0x03d09000
 800a278:	003d0900 	.word	0x003d0900
 800a27c:	017d7840 	.word	0x017d7840
 800a280:	46000000 	.word	0x46000000
 800a284:	4c742400 	.word	0x4c742400
 800a288:	4a742400 	.word	0x4a742400
 800a28c:	4bbebc20 	.word	0x4bbebc20

0800a290 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a290:	b580      	push	{r7, lr}
 800a292:	b082      	sub	sp, #8
 800a294:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800a296:	f7ff fe81 	bl	8009f9c <HAL_RCC_GetSysClockFreq>
 800a29a:	4602      	mov	r2, r0
 800a29c:	4b10      	ldr	r3, [pc, #64]	@ (800a2e0 <HAL_RCC_GetHCLKFreq+0x50>)
 800a29e:	699b      	ldr	r3, [r3, #24]
 800a2a0:	0a1b      	lsrs	r3, r3, #8
 800a2a2:	f003 030f 	and.w	r3, r3, #15
 800a2a6:	490f      	ldr	r1, [pc, #60]	@ (800a2e4 <HAL_RCC_GetHCLKFreq+0x54>)
 800a2a8:	5ccb      	ldrb	r3, [r1, r3]
 800a2aa:	f003 031f 	and.w	r3, r3, #31
 800a2ae:	fa22 f303 	lsr.w	r3, r2, r3
 800a2b2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a2b4:	4b0a      	ldr	r3, [pc, #40]	@ (800a2e0 <HAL_RCC_GetHCLKFreq+0x50>)
 800a2b6:	699b      	ldr	r3, [r3, #24]
 800a2b8:	f003 030f 	and.w	r3, r3, #15
 800a2bc:	4a09      	ldr	r2, [pc, #36]	@ (800a2e4 <HAL_RCC_GetHCLKFreq+0x54>)
 800a2be:	5cd3      	ldrb	r3, [r2, r3]
 800a2c0:	f003 031f 	and.w	r3, r3, #31
 800a2c4:	687a      	ldr	r2, [r7, #4]
 800a2c6:	fa22 f303 	lsr.w	r3, r2, r3
 800a2ca:	4a07      	ldr	r2, [pc, #28]	@ (800a2e8 <HAL_RCC_GetHCLKFreq+0x58>)
 800a2cc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a2ce:	4a07      	ldr	r2, [pc, #28]	@ (800a2ec <HAL_RCC_GetHCLKFreq+0x5c>)
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800a2d4:	4b04      	ldr	r3, [pc, #16]	@ (800a2e8 <HAL_RCC_GetHCLKFreq+0x58>)
 800a2d6:	681b      	ldr	r3, [r3, #0]
}
 800a2d8:	4618      	mov	r0, r3
 800a2da:	3708      	adds	r7, #8
 800a2dc:	46bd      	mov	sp, r7
 800a2de:	bd80      	pop	{r7, pc}
 800a2e0:	58024400 	.word	0x58024400
 800a2e4:	08022f14 	.word	0x08022f14
 800a2e8:	24000008 	.word	0x24000008
 800a2ec:	24000004 	.word	0x24000004

0800a2f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a2f0:	b580      	push	{r7, lr}
 800a2f2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800a2f4:	f7ff ffcc 	bl	800a290 <HAL_RCC_GetHCLKFreq>
 800a2f8:	4602      	mov	r2, r0
 800a2fa:	4b06      	ldr	r3, [pc, #24]	@ (800a314 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a2fc:	69db      	ldr	r3, [r3, #28]
 800a2fe:	091b      	lsrs	r3, r3, #4
 800a300:	f003 0307 	and.w	r3, r3, #7
 800a304:	4904      	ldr	r1, [pc, #16]	@ (800a318 <HAL_RCC_GetPCLK1Freq+0x28>)
 800a306:	5ccb      	ldrb	r3, [r1, r3]
 800a308:	f003 031f 	and.w	r3, r3, #31
 800a30c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800a310:	4618      	mov	r0, r3
 800a312:	bd80      	pop	{r7, pc}
 800a314:	58024400 	.word	0x58024400
 800a318:	08022f14 	.word	0x08022f14

0800a31c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a31c:	b580      	push	{r7, lr}
 800a31e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800a320:	f7ff ffb6 	bl	800a290 <HAL_RCC_GetHCLKFreq>
 800a324:	4602      	mov	r2, r0
 800a326:	4b06      	ldr	r3, [pc, #24]	@ (800a340 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a328:	69db      	ldr	r3, [r3, #28]
 800a32a:	0a1b      	lsrs	r3, r3, #8
 800a32c:	f003 0307 	and.w	r3, r3, #7
 800a330:	4904      	ldr	r1, [pc, #16]	@ (800a344 <HAL_RCC_GetPCLK2Freq+0x28>)
 800a332:	5ccb      	ldrb	r3, [r1, r3]
 800a334:	f003 031f 	and.w	r3, r3, #31
 800a338:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800a33c:	4618      	mov	r0, r3
 800a33e:	bd80      	pop	{r7, pc}
 800a340:	58024400 	.word	0x58024400
 800a344:	08022f14 	.word	0x08022f14

0800a348 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800a348:	b480      	push	{r7}
 800a34a:	b083      	sub	sp, #12
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	6078      	str	r0, [r7, #4]
 800a350:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	223f      	movs	r2, #63	@ 0x3f
 800a356:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800a358:	4b1a      	ldr	r3, [pc, #104]	@ (800a3c4 <HAL_RCC_GetClockConfig+0x7c>)
 800a35a:	691b      	ldr	r3, [r3, #16]
 800a35c:	f003 0207 	and.w	r2, r3, #7
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800a364:	4b17      	ldr	r3, [pc, #92]	@ (800a3c4 <HAL_RCC_GetClockConfig+0x7c>)
 800a366:	699b      	ldr	r3, [r3, #24]
 800a368:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800a370:	4b14      	ldr	r3, [pc, #80]	@ (800a3c4 <HAL_RCC_GetClockConfig+0x7c>)
 800a372:	699b      	ldr	r3, [r3, #24]
 800a374:	f003 020f 	and.w	r2, r3, #15
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800a37c:	4b11      	ldr	r3, [pc, #68]	@ (800a3c4 <HAL_RCC_GetClockConfig+0x7c>)
 800a37e:	699b      	ldr	r3, [r3, #24]
 800a380:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800a388:	4b0e      	ldr	r3, [pc, #56]	@ (800a3c4 <HAL_RCC_GetClockConfig+0x7c>)
 800a38a:	69db      	ldr	r3, [r3, #28]
 800a38c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800a394:	4b0b      	ldr	r3, [pc, #44]	@ (800a3c4 <HAL_RCC_GetClockConfig+0x7c>)
 800a396:	69db      	ldr	r3, [r3, #28]
 800a398:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800a3a0:	4b08      	ldr	r3, [pc, #32]	@ (800a3c4 <HAL_RCC_GetClockConfig+0x7c>)
 800a3a2:	6a1b      	ldr	r3, [r3, #32]
 800a3a4:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800a3ac:	4b06      	ldr	r3, [pc, #24]	@ (800a3c8 <HAL_RCC_GetClockConfig+0x80>)
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	f003 020f 	and.w	r2, r3, #15
 800a3b4:	683b      	ldr	r3, [r7, #0]
 800a3b6:	601a      	str	r2, [r3, #0]
}
 800a3b8:	bf00      	nop
 800a3ba:	370c      	adds	r7, #12
 800a3bc:	46bd      	mov	sp, r7
 800a3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c2:	4770      	bx	lr
 800a3c4:	58024400 	.word	0x58024400
 800a3c8:	52002000 	.word	0x52002000

0800a3cc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a3cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a3d0:	b0c6      	sub	sp, #280	@ 0x118
 800a3d2:	af00      	add	r7, sp, #0
 800a3d4:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a3d8:	2300      	movs	r3, #0
 800a3da:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a3de:	2300      	movs	r3, #0
 800a3e0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a3e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a3e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3ec:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800a3f0:	2500      	movs	r5, #0
 800a3f2:	ea54 0305 	orrs.w	r3, r4, r5
 800a3f6:	d049      	beq.n	800a48c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800a3f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a3fc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a3fe:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a402:	d02f      	beq.n	800a464 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800a404:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a408:	d828      	bhi.n	800a45c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800a40a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a40e:	d01a      	beq.n	800a446 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800a410:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a414:	d822      	bhi.n	800a45c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800a416:	2b00      	cmp	r3, #0
 800a418:	d003      	beq.n	800a422 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800a41a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a41e:	d007      	beq.n	800a430 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800a420:	e01c      	b.n	800a45c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a422:	4bab      	ldr	r3, [pc, #684]	@ (800a6d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a424:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a426:	4aaa      	ldr	r2, [pc, #680]	@ (800a6d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a428:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a42c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a42e:	e01a      	b.n	800a466 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a430:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a434:	3308      	adds	r3, #8
 800a436:	2102      	movs	r1, #2
 800a438:	4618      	mov	r0, r3
 800a43a:	f002 fd5b 	bl	800cef4 <RCCEx_PLL2_Config>
 800a43e:	4603      	mov	r3, r0
 800a440:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a444:	e00f      	b.n	800a466 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a446:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a44a:	3328      	adds	r3, #40	@ 0x28
 800a44c:	2102      	movs	r1, #2
 800a44e:	4618      	mov	r0, r3
 800a450:	f002 fe72 	bl	800d138 <RCCEx_PLL3_Config>
 800a454:	4603      	mov	r3, r0
 800a456:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a45a:	e004      	b.n	800a466 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a45c:	2301      	movs	r3, #1
 800a45e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a462:	e000      	b.n	800a466 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800a464:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a466:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d10a      	bne.n	800a484 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800a46e:	4b98      	ldr	r3, [pc, #608]	@ (800a6d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a470:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a472:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800a476:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a47a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a47c:	4a94      	ldr	r2, [pc, #592]	@ (800a6d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a47e:	430b      	orrs	r3, r1
 800a480:	6513      	str	r3, [r2, #80]	@ 0x50
 800a482:	e003      	b.n	800a48c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a484:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a488:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800a48c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a490:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a494:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800a498:	f04f 0900 	mov.w	r9, #0
 800a49c:	ea58 0309 	orrs.w	r3, r8, r9
 800a4a0:	d047      	beq.n	800a532 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800a4a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a4a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a4a8:	2b04      	cmp	r3, #4
 800a4aa:	d82a      	bhi.n	800a502 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800a4ac:	a201      	add	r2, pc, #4	@ (adr r2, 800a4b4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800a4ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4b2:	bf00      	nop
 800a4b4:	0800a4c9 	.word	0x0800a4c9
 800a4b8:	0800a4d7 	.word	0x0800a4d7
 800a4bc:	0800a4ed 	.word	0x0800a4ed
 800a4c0:	0800a50b 	.word	0x0800a50b
 800a4c4:	0800a50b 	.word	0x0800a50b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a4c8:	4b81      	ldr	r3, [pc, #516]	@ (800a6d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a4ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4cc:	4a80      	ldr	r2, [pc, #512]	@ (800a6d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a4ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a4d2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a4d4:	e01a      	b.n	800a50c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a4d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a4da:	3308      	adds	r3, #8
 800a4dc:	2100      	movs	r1, #0
 800a4de:	4618      	mov	r0, r3
 800a4e0:	f002 fd08 	bl	800cef4 <RCCEx_PLL2_Config>
 800a4e4:	4603      	mov	r3, r0
 800a4e6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a4ea:	e00f      	b.n	800a50c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a4ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a4f0:	3328      	adds	r3, #40	@ 0x28
 800a4f2:	2100      	movs	r1, #0
 800a4f4:	4618      	mov	r0, r3
 800a4f6:	f002 fe1f 	bl	800d138 <RCCEx_PLL3_Config>
 800a4fa:	4603      	mov	r3, r0
 800a4fc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a500:	e004      	b.n	800a50c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a502:	2301      	movs	r3, #1
 800a504:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a508:	e000      	b.n	800a50c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800a50a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a50c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a510:	2b00      	cmp	r3, #0
 800a512:	d10a      	bne.n	800a52a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a514:	4b6e      	ldr	r3, [pc, #440]	@ (800a6d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a516:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a518:	f023 0107 	bic.w	r1, r3, #7
 800a51c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a520:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a522:	4a6b      	ldr	r2, [pc, #428]	@ (800a6d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a524:	430b      	orrs	r3, r1
 800a526:	6513      	str	r3, [r2, #80]	@ 0x50
 800a528:	e003      	b.n	800a532 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a52a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a52e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800a532:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a53a:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 800a53e:	f04f 0b00 	mov.w	fp, #0
 800a542:	ea5a 030b 	orrs.w	r3, sl, fp
 800a546:	d05b      	beq.n	800a600 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800a548:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a54c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a550:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800a554:	d03b      	beq.n	800a5ce <HAL_RCCEx_PeriphCLKConfig+0x202>
 800a556:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800a55a:	d834      	bhi.n	800a5c6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800a55c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a560:	d037      	beq.n	800a5d2 <HAL_RCCEx_PeriphCLKConfig+0x206>
 800a562:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a566:	d82e      	bhi.n	800a5c6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800a568:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a56c:	d033      	beq.n	800a5d6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800a56e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a572:	d828      	bhi.n	800a5c6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800a574:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a578:	d01a      	beq.n	800a5b0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800a57a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a57e:	d822      	bhi.n	800a5c6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800a580:	2b00      	cmp	r3, #0
 800a582:	d003      	beq.n	800a58c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800a584:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a588:	d007      	beq.n	800a59a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800a58a:	e01c      	b.n	800a5c6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a58c:	4b50      	ldr	r3, [pc, #320]	@ (800a6d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a58e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a590:	4a4f      	ldr	r2, [pc, #316]	@ (800a6d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a592:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a596:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a598:	e01e      	b.n	800a5d8 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a59a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a59e:	3308      	adds	r3, #8
 800a5a0:	2100      	movs	r1, #0
 800a5a2:	4618      	mov	r0, r3
 800a5a4:	f002 fca6 	bl	800cef4 <RCCEx_PLL2_Config>
 800a5a8:	4603      	mov	r3, r0
 800a5aa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800a5ae:	e013      	b.n	800a5d8 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a5b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a5b4:	3328      	adds	r3, #40	@ 0x28
 800a5b6:	2100      	movs	r1, #0
 800a5b8:	4618      	mov	r0, r3
 800a5ba:	f002 fdbd 	bl	800d138 <RCCEx_PLL3_Config>
 800a5be:	4603      	mov	r3, r0
 800a5c0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a5c4:	e008      	b.n	800a5d8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800a5c6:	2301      	movs	r3, #1
 800a5c8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a5cc:	e004      	b.n	800a5d8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800a5ce:	bf00      	nop
 800a5d0:	e002      	b.n	800a5d8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800a5d2:	bf00      	nop
 800a5d4:	e000      	b.n	800a5d8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800a5d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a5d8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d10b      	bne.n	800a5f8 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800a5e0:	4b3b      	ldr	r3, [pc, #236]	@ (800a6d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a5e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a5e4:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800a5e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a5ec:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a5f0:	4a37      	ldr	r2, [pc, #220]	@ (800a6d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a5f2:	430b      	orrs	r3, r1
 800a5f4:	6593      	str	r3, [r2, #88]	@ 0x58
 800a5f6:	e003      	b.n	800a600 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a5f8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a5fc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800a600:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a604:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a608:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800a60c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800a610:	2300      	movs	r3, #0
 800a612:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800a616:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800a61a:	460b      	mov	r3, r1
 800a61c:	4313      	orrs	r3, r2
 800a61e:	d05d      	beq.n	800a6dc <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800a620:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a624:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800a628:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800a62c:	d03b      	beq.n	800a6a6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800a62e:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800a632:	d834      	bhi.n	800a69e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800a634:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a638:	d037      	beq.n	800a6aa <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800a63a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a63e:	d82e      	bhi.n	800a69e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800a640:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a644:	d033      	beq.n	800a6ae <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800a646:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a64a:	d828      	bhi.n	800a69e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800a64c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a650:	d01a      	beq.n	800a688 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800a652:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a656:	d822      	bhi.n	800a69e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d003      	beq.n	800a664 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800a65c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a660:	d007      	beq.n	800a672 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800a662:	e01c      	b.n	800a69e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a664:	4b1a      	ldr	r3, [pc, #104]	@ (800a6d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a666:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a668:	4a19      	ldr	r2, [pc, #100]	@ (800a6d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a66a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a66e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a670:	e01e      	b.n	800a6b0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a672:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a676:	3308      	adds	r3, #8
 800a678:	2100      	movs	r1, #0
 800a67a:	4618      	mov	r0, r3
 800a67c:	f002 fc3a 	bl	800cef4 <RCCEx_PLL2_Config>
 800a680:	4603      	mov	r3, r0
 800a682:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800a686:	e013      	b.n	800a6b0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a688:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a68c:	3328      	adds	r3, #40	@ 0x28
 800a68e:	2100      	movs	r1, #0
 800a690:	4618      	mov	r0, r3
 800a692:	f002 fd51 	bl	800d138 <RCCEx_PLL3_Config>
 800a696:	4603      	mov	r3, r0
 800a698:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a69c:	e008      	b.n	800a6b0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800a69e:	2301      	movs	r3, #1
 800a6a0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a6a4:	e004      	b.n	800a6b0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800a6a6:	bf00      	nop
 800a6a8:	e002      	b.n	800a6b0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800a6aa:	bf00      	nop
 800a6ac:	e000      	b.n	800a6b0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800a6ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a6b0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d10d      	bne.n	800a6d4 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800a6b8:	4b05      	ldr	r3, [pc, #20]	@ (800a6d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a6ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a6bc:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800a6c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a6c4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800a6c8:	4a01      	ldr	r2, [pc, #4]	@ (800a6d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a6ca:	430b      	orrs	r3, r1
 800a6cc:	6593      	str	r3, [r2, #88]	@ 0x58
 800a6ce:	e005      	b.n	800a6dc <HAL_RCCEx_PeriphCLKConfig+0x310>
 800a6d0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a6d4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a6d8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800a6dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a6e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6e4:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800a6e8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800a6ec:	2300      	movs	r3, #0
 800a6ee:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800a6f2:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800a6f6:	460b      	mov	r3, r1
 800a6f8:	4313      	orrs	r3, r2
 800a6fa:	d03a      	beq.n	800a772 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800a6fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a700:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a702:	2b30      	cmp	r3, #48	@ 0x30
 800a704:	d01f      	beq.n	800a746 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800a706:	2b30      	cmp	r3, #48	@ 0x30
 800a708:	d819      	bhi.n	800a73e <HAL_RCCEx_PeriphCLKConfig+0x372>
 800a70a:	2b20      	cmp	r3, #32
 800a70c:	d00c      	beq.n	800a728 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800a70e:	2b20      	cmp	r3, #32
 800a710:	d815      	bhi.n	800a73e <HAL_RCCEx_PeriphCLKConfig+0x372>
 800a712:	2b00      	cmp	r3, #0
 800a714:	d019      	beq.n	800a74a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800a716:	2b10      	cmp	r3, #16
 800a718:	d111      	bne.n	800a73e <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a71a:	4baa      	ldr	r3, [pc, #680]	@ (800a9c4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a71c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a71e:	4aa9      	ldr	r2, [pc, #676]	@ (800a9c4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a720:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a724:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800a726:	e011      	b.n	800a74c <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a728:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a72c:	3308      	adds	r3, #8
 800a72e:	2102      	movs	r1, #2
 800a730:	4618      	mov	r0, r3
 800a732:	f002 fbdf 	bl	800cef4 <RCCEx_PLL2_Config>
 800a736:	4603      	mov	r3, r0
 800a738:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800a73c:	e006      	b.n	800a74c <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800a73e:	2301      	movs	r3, #1
 800a740:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a744:	e002      	b.n	800a74c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800a746:	bf00      	nop
 800a748:	e000      	b.n	800a74c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800a74a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a74c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a750:	2b00      	cmp	r3, #0
 800a752:	d10a      	bne.n	800a76a <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800a754:	4b9b      	ldr	r3, [pc, #620]	@ (800a9c4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a756:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a758:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800a75c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a760:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a762:	4a98      	ldr	r2, [pc, #608]	@ (800a9c4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a764:	430b      	orrs	r3, r1
 800a766:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a768:	e003      	b.n	800a772 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a76a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a76e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800a772:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a776:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a77a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800a77e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a782:	2300      	movs	r3, #0
 800a784:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800a788:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800a78c:	460b      	mov	r3, r1
 800a78e:	4313      	orrs	r3, r2
 800a790:	d051      	beq.n	800a836 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800a792:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a796:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a798:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a79c:	d035      	beq.n	800a80a <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800a79e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a7a2:	d82e      	bhi.n	800a802 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800a7a4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a7a8:	d031      	beq.n	800a80e <HAL_RCCEx_PeriphCLKConfig+0x442>
 800a7aa:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a7ae:	d828      	bhi.n	800a802 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800a7b0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a7b4:	d01a      	beq.n	800a7ec <HAL_RCCEx_PeriphCLKConfig+0x420>
 800a7b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a7ba:	d822      	bhi.n	800a802 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d003      	beq.n	800a7c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800a7c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a7c4:	d007      	beq.n	800a7d6 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800a7c6:	e01c      	b.n	800a802 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a7c8:	4b7e      	ldr	r3, [pc, #504]	@ (800a9c4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a7ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a7cc:	4a7d      	ldr	r2, [pc, #500]	@ (800a9c4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a7ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a7d2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a7d4:	e01c      	b.n	800a810 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a7d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a7da:	3308      	adds	r3, #8
 800a7dc:	2100      	movs	r1, #0
 800a7de:	4618      	mov	r0, r3
 800a7e0:	f002 fb88 	bl	800cef4 <RCCEx_PLL2_Config>
 800a7e4:	4603      	mov	r3, r0
 800a7e6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a7ea:	e011      	b.n	800a810 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a7ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a7f0:	3328      	adds	r3, #40	@ 0x28
 800a7f2:	2100      	movs	r1, #0
 800a7f4:	4618      	mov	r0, r3
 800a7f6:	f002 fc9f 	bl	800d138 <RCCEx_PLL3_Config>
 800a7fa:	4603      	mov	r3, r0
 800a7fc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a800:	e006      	b.n	800a810 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a802:	2301      	movs	r3, #1
 800a804:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a808:	e002      	b.n	800a810 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800a80a:	bf00      	nop
 800a80c:	e000      	b.n	800a810 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800a80e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a810:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a814:	2b00      	cmp	r3, #0
 800a816:	d10a      	bne.n	800a82e <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800a818:	4b6a      	ldr	r3, [pc, #424]	@ (800a9c4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a81a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a81c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800a820:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a824:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a826:	4a67      	ldr	r2, [pc, #412]	@ (800a9c4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a828:	430b      	orrs	r3, r1
 800a82a:	6513      	str	r3, [r2, #80]	@ 0x50
 800a82c:	e003      	b.n	800a836 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a82e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a832:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800a836:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a83a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a83e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800a842:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a846:	2300      	movs	r3, #0
 800a848:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a84c:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800a850:	460b      	mov	r3, r1
 800a852:	4313      	orrs	r3, r2
 800a854:	d053      	beq.n	800a8fe <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800a856:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a85a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a85c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a860:	d033      	beq.n	800a8ca <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800a862:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a866:	d82c      	bhi.n	800a8c2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800a868:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a86c:	d02f      	beq.n	800a8ce <HAL_RCCEx_PeriphCLKConfig+0x502>
 800a86e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a872:	d826      	bhi.n	800a8c2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800a874:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a878:	d02b      	beq.n	800a8d2 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800a87a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a87e:	d820      	bhi.n	800a8c2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800a880:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a884:	d012      	beq.n	800a8ac <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800a886:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a88a:	d81a      	bhi.n	800a8c2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d022      	beq.n	800a8d6 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800a890:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a894:	d115      	bne.n	800a8c2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a896:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a89a:	3308      	adds	r3, #8
 800a89c:	2101      	movs	r1, #1
 800a89e:	4618      	mov	r0, r3
 800a8a0:	f002 fb28 	bl	800cef4 <RCCEx_PLL2_Config>
 800a8a4:	4603      	mov	r3, r0
 800a8a6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800a8aa:	e015      	b.n	800a8d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a8ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a8b0:	3328      	adds	r3, #40	@ 0x28
 800a8b2:	2101      	movs	r1, #1
 800a8b4:	4618      	mov	r0, r3
 800a8b6:	f002 fc3f 	bl	800d138 <RCCEx_PLL3_Config>
 800a8ba:	4603      	mov	r3, r0
 800a8bc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800a8c0:	e00a      	b.n	800a8d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a8c2:	2301      	movs	r3, #1
 800a8c4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a8c8:	e006      	b.n	800a8d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800a8ca:	bf00      	nop
 800a8cc:	e004      	b.n	800a8d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800a8ce:	bf00      	nop
 800a8d0:	e002      	b.n	800a8d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800a8d2:	bf00      	nop
 800a8d4:	e000      	b.n	800a8d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800a8d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a8d8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d10a      	bne.n	800a8f6 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800a8e0:	4b38      	ldr	r3, [pc, #224]	@ (800a9c4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a8e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a8e4:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800a8e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a8ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a8ee:	4a35      	ldr	r2, [pc, #212]	@ (800a9c4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a8f0:	430b      	orrs	r3, r1
 800a8f2:	6513      	str	r3, [r2, #80]	@ 0x50
 800a8f4:	e003      	b.n	800a8fe <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a8f6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a8fa:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800a8fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a902:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a906:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800a90a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a90e:	2300      	movs	r3, #0
 800a910:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800a914:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800a918:	460b      	mov	r3, r1
 800a91a:	4313      	orrs	r3, r2
 800a91c:	d058      	beq.n	800a9d0 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800a91e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a922:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800a926:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a92a:	d033      	beq.n	800a994 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800a92c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a930:	d82c      	bhi.n	800a98c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800a932:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a936:	d02f      	beq.n	800a998 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800a938:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a93c:	d826      	bhi.n	800a98c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800a93e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a942:	d02b      	beq.n	800a99c <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800a944:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a948:	d820      	bhi.n	800a98c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800a94a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a94e:	d012      	beq.n	800a976 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800a950:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a954:	d81a      	bhi.n	800a98c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800a956:	2b00      	cmp	r3, #0
 800a958:	d022      	beq.n	800a9a0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800a95a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a95e:	d115      	bne.n	800a98c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a960:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a964:	3308      	adds	r3, #8
 800a966:	2101      	movs	r1, #1
 800a968:	4618      	mov	r0, r3
 800a96a:	f002 fac3 	bl	800cef4 <RCCEx_PLL2_Config>
 800a96e:	4603      	mov	r3, r0
 800a970:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800a974:	e015      	b.n	800a9a2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a976:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a97a:	3328      	adds	r3, #40	@ 0x28
 800a97c:	2101      	movs	r1, #1
 800a97e:	4618      	mov	r0, r3
 800a980:	f002 fbda 	bl	800d138 <RCCEx_PLL3_Config>
 800a984:	4603      	mov	r3, r0
 800a986:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800a98a:	e00a      	b.n	800a9a2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800a98c:	2301      	movs	r3, #1
 800a98e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a992:	e006      	b.n	800a9a2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800a994:	bf00      	nop
 800a996:	e004      	b.n	800a9a2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800a998:	bf00      	nop
 800a99a:	e002      	b.n	800a9a2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800a99c:	bf00      	nop
 800a99e:	e000      	b.n	800a9a2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800a9a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a9a2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d10e      	bne.n	800a9c8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800a9aa:	4b06      	ldr	r3, [pc, #24]	@ (800a9c4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a9ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a9ae:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800a9b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a9b6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800a9ba:	4a02      	ldr	r2, [pc, #8]	@ (800a9c4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a9bc:	430b      	orrs	r3, r1
 800a9be:	6593      	str	r3, [r2, #88]	@ 0x58
 800a9c0:	e006      	b.n	800a9d0 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800a9c2:	bf00      	nop
 800a9c4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a9c8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a9cc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800a9d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a9d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9d8:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800a9dc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a9e0:	2300      	movs	r3, #0
 800a9e2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800a9e6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800a9ea:	460b      	mov	r3, r1
 800a9ec:	4313      	orrs	r3, r2
 800a9ee:	d037      	beq.n	800aa60 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800a9f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a9f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a9f6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a9fa:	d00e      	beq.n	800aa1a <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800a9fc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aa00:	d816      	bhi.n	800aa30 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d018      	beq.n	800aa38 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800aa06:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800aa0a:	d111      	bne.n	800aa30 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aa0c:	4b37      	ldr	r3, [pc, #220]	@ (800aaec <HAL_RCCEx_PeriphCLKConfig+0x720>)
 800aa0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa10:	4a36      	ldr	r2, [pc, #216]	@ (800aaec <HAL_RCCEx_PeriphCLKConfig+0x720>)
 800aa12:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800aa16:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800aa18:	e00f      	b.n	800aa3a <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800aa1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aa1e:	3308      	adds	r3, #8
 800aa20:	2101      	movs	r1, #1
 800aa22:	4618      	mov	r0, r3
 800aa24:	f002 fa66 	bl	800cef4 <RCCEx_PLL2_Config>
 800aa28:	4603      	mov	r3, r0
 800aa2a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800aa2e:	e004      	b.n	800aa3a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800aa30:	2301      	movs	r3, #1
 800aa32:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800aa36:	e000      	b.n	800aa3a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800aa38:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aa3a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d10a      	bne.n	800aa58 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800aa42:	4b2a      	ldr	r3, [pc, #168]	@ (800aaec <HAL_RCCEx_PeriphCLKConfig+0x720>)
 800aa44:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aa46:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800aa4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aa4e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aa50:	4a26      	ldr	r2, [pc, #152]	@ (800aaec <HAL_RCCEx_PeriphCLKConfig+0x720>)
 800aa52:	430b      	orrs	r3, r1
 800aa54:	6513      	str	r3, [r2, #80]	@ 0x50
 800aa56:	e003      	b.n	800aa60 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa58:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800aa5c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800aa60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aa64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa68:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800aa6c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800aa70:	2300      	movs	r3, #0
 800aa72:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800aa76:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800aa7a:	460b      	mov	r3, r1
 800aa7c:	4313      	orrs	r3, r2
 800aa7e:	d03b      	beq.n	800aaf8 <HAL_RCCEx_PeriphCLKConfig+0x72c>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800aa80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aa84:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800aa86:	2b03      	cmp	r3, #3
 800aa88:	d81c      	bhi.n	800aac4 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800aa8a:	a201      	add	r2, pc, #4	@ (adr r2, 800aa90 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800aa8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa90:	0800aacd 	.word	0x0800aacd
 800aa94:	0800aaa1 	.word	0x0800aaa1
 800aa98:	0800aaaf 	.word	0x0800aaaf
 800aa9c:	0800aacd 	.word	0x0800aacd
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aaa0:	4b12      	ldr	r3, [pc, #72]	@ (800aaec <HAL_RCCEx_PeriphCLKConfig+0x720>)
 800aaa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aaa4:	4a11      	ldr	r2, [pc, #68]	@ (800aaec <HAL_RCCEx_PeriphCLKConfig+0x720>)
 800aaa6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800aaaa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800aaac:	e00f      	b.n	800aace <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800aaae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aab2:	3308      	adds	r3, #8
 800aab4:	2102      	movs	r1, #2
 800aab6:	4618      	mov	r0, r3
 800aab8:	f002 fa1c 	bl	800cef4 <RCCEx_PLL2_Config>
 800aabc:	4603      	mov	r3, r0
 800aabe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800aac2:	e004      	b.n	800aace <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800aac4:	2301      	movs	r3, #1
 800aac6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800aaca:	e000      	b.n	800aace <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800aacc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aace:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d10c      	bne.n	800aaf0 <HAL_RCCEx_PeriphCLKConfig+0x724>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800aad6:	4b05      	ldr	r3, [pc, #20]	@ (800aaec <HAL_RCCEx_PeriphCLKConfig+0x720>)
 800aad8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800aada:	f023 0103 	bic.w	r1, r3, #3
 800aade:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aae2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800aae4:	4a01      	ldr	r2, [pc, #4]	@ (800aaec <HAL_RCCEx_PeriphCLKConfig+0x720>)
 800aae6:	430b      	orrs	r3, r1
 800aae8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800aaea:	e005      	b.n	800aaf8 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 800aaec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aaf0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800aaf4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800aaf8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aafc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab00:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800ab04:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800ab08:	2300      	movs	r3, #0
 800ab0a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800ab0e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800ab12:	460b      	mov	r3, r1
 800ab14:	4313      	orrs	r3, r2
 800ab16:	f000 82f1 	beq.w	800b0fc <HAL_RCCEx_PeriphCLKConfig+0xd30>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 800ab1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ab1e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800ab22:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ab26:	f000 81eb 	beq.w	800af00 <HAL_RCCEx_PeriphCLKConfig+0xb34>
 800ab2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ab2e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800ab32:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ab36:	f000 81e3 	beq.w	800af00 <HAL_RCCEx_PeriphCLKConfig+0xb34>
 800ab3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ab3e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800ab42:	f5b3 5f0c 	cmp.w	r3, #8960	@ 0x2300
 800ab46:	f000 81db 	beq.w	800af00 <HAL_RCCEx_PeriphCLKConfig+0xb34>
 800ab4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ab4e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800ab52:	f5b3 5f4c 	cmp.w	r3, #13056	@ 0x3300
 800ab56:	f000 81d3 	beq.w	800af00 <HAL_RCCEx_PeriphCLKConfig+0xb34>
 800ab5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ab5e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800ab62:	f5b3 4f86 	cmp.w	r3, #17152	@ 0x4300
 800ab66:	f000 81cb 	beq.w	800af00 <HAL_RCCEx_PeriphCLKConfig+0xb34>
 800ab6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ab6e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800ab72:	f5b3 4fa6 	cmp.w	r3, #21248	@ 0x5300
 800ab76:	f000 81c3 	beq.w	800af00 <HAL_RCCEx_PeriphCLKConfig+0xb34>
 800ab7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ab7e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800ab82:	f5b3 4fc6 	cmp.w	r3, #25344	@ 0x6300
 800ab86:	f000 81bb 	beq.w	800af00 <HAL_RCCEx_PeriphCLKConfig+0xb34>
 800ab8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ab8e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800ab92:	f5b3 4fe6 	cmp.w	r3, #29440	@ 0x7300
 800ab96:	f000 81b3 	beq.w	800af00 <HAL_RCCEx_PeriphCLKConfig+0xb34>
 800ab9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ab9e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800aba2:	f5b3 4f03 	cmp.w	r3, #33536	@ 0x8300
 800aba6:	f000 81ab 	beq.w	800af00 <HAL_RCCEx_PeriphCLKConfig+0xb34>
 800abaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800abae:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800abb2:	f5b3 4f13 	cmp.w	r3, #37632	@ 0x9300
 800abb6:	f000 81a3 	beq.w	800af00 <HAL_RCCEx_PeriphCLKConfig+0xb34>
 800abba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800abbe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800abc2:	f5b3 4f23 	cmp.w	r3, #41728	@ 0xa300
 800abc6:	f000 819b 	beq.w	800af00 <HAL_RCCEx_PeriphCLKConfig+0xb34>
 800abca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800abce:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800abd2:	f5b3 4f33 	cmp.w	r3, #45824	@ 0xb300
 800abd6:	f000 8193 	beq.w	800af00 <HAL_RCCEx_PeriphCLKConfig+0xb34>
 800abda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800abde:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800abe2:	f5b3 4f43 	cmp.w	r3, #49920	@ 0xc300
 800abe6:	f000 818b 	beq.w	800af00 <HAL_RCCEx_PeriphCLKConfig+0xb34>
 800abea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800abee:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800abf2:	f5b3 4f53 	cmp.w	r3, #54016	@ 0xd300
 800abf6:	f000 8183 	beq.w	800af00 <HAL_RCCEx_PeriphCLKConfig+0xb34>
 800abfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800abfe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800ac02:	f5b3 4f63 	cmp.w	r3, #58112	@ 0xe300
 800ac06:	f000 817b 	beq.w	800af00 <HAL_RCCEx_PeriphCLKConfig+0xb34>
 800ac0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ac0e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800ac12:	f5b3 4f73 	cmp.w	r3, #62208	@ 0xf300
 800ac16:	f000 8173 	beq.w	800af00 <HAL_RCCEx_PeriphCLKConfig+0xb34>
 800ac1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ac1e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800ac22:	4bbd      	ldr	r3, [pc, #756]	@ (800af18 <HAL_RCCEx_PeriphCLKConfig+0xb4c>)
 800ac24:	429a      	cmp	r2, r3
 800ac26:	f000 816b 	beq.w	800af00 <HAL_RCCEx_PeriphCLKConfig+0xb34>
 800ac2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ac2e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800ac32:	4bba      	ldr	r3, [pc, #744]	@ (800af1c <HAL_RCCEx_PeriphCLKConfig+0xb50>)
 800ac34:	429a      	cmp	r2, r3
 800ac36:	f000 8163 	beq.w	800af00 <HAL_RCCEx_PeriphCLKConfig+0xb34>
 800ac3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ac3e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800ac42:	4bb7      	ldr	r3, [pc, #732]	@ (800af20 <HAL_RCCEx_PeriphCLKConfig+0xb54>)
 800ac44:	429a      	cmp	r2, r3
 800ac46:	f000 815b 	beq.w	800af00 <HAL_RCCEx_PeriphCLKConfig+0xb34>
 800ac4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ac4e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800ac52:	4bb4      	ldr	r3, [pc, #720]	@ (800af24 <HAL_RCCEx_PeriphCLKConfig+0xb58>)
 800ac54:	429a      	cmp	r2, r3
 800ac56:	f000 8153 	beq.w	800af00 <HAL_RCCEx_PeriphCLKConfig+0xb34>
 800ac5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ac5e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800ac62:	4bb1      	ldr	r3, [pc, #708]	@ (800af28 <HAL_RCCEx_PeriphCLKConfig+0xb5c>)
 800ac64:	429a      	cmp	r2, r3
 800ac66:	f000 814b 	beq.w	800af00 <HAL_RCCEx_PeriphCLKConfig+0xb34>
 800ac6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ac6e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800ac72:	4bae      	ldr	r3, [pc, #696]	@ (800af2c <HAL_RCCEx_PeriphCLKConfig+0xb60>)
 800ac74:	429a      	cmp	r2, r3
 800ac76:	f000 8143 	beq.w	800af00 <HAL_RCCEx_PeriphCLKConfig+0xb34>
 800ac7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ac7e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800ac82:	4bab      	ldr	r3, [pc, #684]	@ (800af30 <HAL_RCCEx_PeriphCLKConfig+0xb64>)
 800ac84:	429a      	cmp	r2, r3
 800ac86:	f000 813b 	beq.w	800af00 <HAL_RCCEx_PeriphCLKConfig+0xb34>
 800ac8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ac8e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800ac92:	4ba8      	ldr	r3, [pc, #672]	@ (800af34 <HAL_RCCEx_PeriphCLKConfig+0xb68>)
 800ac94:	429a      	cmp	r2, r3
 800ac96:	f000 8133 	beq.w	800af00 <HAL_RCCEx_PeriphCLKConfig+0xb34>
 800ac9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ac9e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800aca2:	4ba5      	ldr	r3, [pc, #660]	@ (800af38 <HAL_RCCEx_PeriphCLKConfig+0xb6c>)
 800aca4:	429a      	cmp	r2, r3
 800aca6:	f000 812b 	beq.w	800af00 <HAL_RCCEx_PeriphCLKConfig+0xb34>
 800acaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800acae:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800acb2:	4ba2      	ldr	r3, [pc, #648]	@ (800af3c <HAL_RCCEx_PeriphCLKConfig+0xb70>)
 800acb4:	429a      	cmp	r2, r3
 800acb6:	f000 8123 	beq.w	800af00 <HAL_RCCEx_PeriphCLKConfig+0xb34>
 800acba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800acbe:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800acc2:	4b9f      	ldr	r3, [pc, #636]	@ (800af40 <HAL_RCCEx_PeriphCLKConfig+0xb74>)
 800acc4:	429a      	cmp	r2, r3
 800acc6:	f000 811b 	beq.w	800af00 <HAL_RCCEx_PeriphCLKConfig+0xb34>
 800acca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800acce:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800acd2:	4b9c      	ldr	r3, [pc, #624]	@ (800af44 <HAL_RCCEx_PeriphCLKConfig+0xb78>)
 800acd4:	429a      	cmp	r2, r3
 800acd6:	f000 8113 	beq.w	800af00 <HAL_RCCEx_PeriphCLKConfig+0xb34>
 800acda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800acde:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800ace2:	4b99      	ldr	r3, [pc, #612]	@ (800af48 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800ace4:	429a      	cmp	r2, r3
 800ace6:	f000 810b 	beq.w	800af00 <HAL_RCCEx_PeriphCLKConfig+0xb34>
 800acea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800acee:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800acf2:	4b96      	ldr	r3, [pc, #600]	@ (800af4c <HAL_RCCEx_PeriphCLKConfig+0xb80>)
 800acf4:	429a      	cmp	r2, r3
 800acf6:	f000 8103 	beq.w	800af00 <HAL_RCCEx_PeriphCLKConfig+0xb34>
 800acfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800acfe:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800ad02:	4b93      	ldr	r3, [pc, #588]	@ (800af50 <HAL_RCCEx_PeriphCLKConfig+0xb84>)
 800ad04:	429a      	cmp	r2, r3
 800ad06:	f000 80fb 	beq.w	800af00 <HAL_RCCEx_PeriphCLKConfig+0xb34>
 800ad0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ad0e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800ad12:	4b90      	ldr	r3, [pc, #576]	@ (800af54 <HAL_RCCEx_PeriphCLKConfig+0xb88>)
 800ad14:	429a      	cmp	r2, r3
 800ad16:	f000 80f3 	beq.w	800af00 <HAL_RCCEx_PeriphCLKConfig+0xb34>
 800ad1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ad1e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800ad22:	4b8d      	ldr	r3, [pc, #564]	@ (800af58 <HAL_RCCEx_PeriphCLKConfig+0xb8c>)
 800ad24:	429a      	cmp	r2, r3
 800ad26:	f000 80eb 	beq.w	800af00 <HAL_RCCEx_PeriphCLKConfig+0xb34>
 800ad2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ad2e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800ad32:	4b8a      	ldr	r3, [pc, #552]	@ (800af5c <HAL_RCCEx_PeriphCLKConfig+0xb90>)
 800ad34:	429a      	cmp	r2, r3
 800ad36:	f000 80e3 	beq.w	800af00 <HAL_RCCEx_PeriphCLKConfig+0xb34>
 800ad3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ad3e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800ad42:	4b87      	ldr	r3, [pc, #540]	@ (800af60 <HAL_RCCEx_PeriphCLKConfig+0xb94>)
 800ad44:	429a      	cmp	r2, r3
 800ad46:	f000 80db 	beq.w	800af00 <HAL_RCCEx_PeriphCLKConfig+0xb34>
 800ad4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ad4e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800ad52:	4b84      	ldr	r3, [pc, #528]	@ (800af64 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 800ad54:	429a      	cmp	r2, r3
 800ad56:	f000 80d3 	beq.w	800af00 <HAL_RCCEx_PeriphCLKConfig+0xb34>
 800ad5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ad5e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800ad62:	4b81      	ldr	r3, [pc, #516]	@ (800af68 <HAL_RCCEx_PeriphCLKConfig+0xb9c>)
 800ad64:	429a      	cmp	r2, r3
 800ad66:	f000 80cb 	beq.w	800af00 <HAL_RCCEx_PeriphCLKConfig+0xb34>
 800ad6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ad6e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800ad72:	4b7e      	ldr	r3, [pc, #504]	@ (800af6c <HAL_RCCEx_PeriphCLKConfig+0xba0>)
 800ad74:	429a      	cmp	r2, r3
 800ad76:	f000 80c3 	beq.w	800af00 <HAL_RCCEx_PeriphCLKConfig+0xb34>
 800ad7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ad7e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800ad82:	4b7b      	ldr	r3, [pc, #492]	@ (800af70 <HAL_RCCEx_PeriphCLKConfig+0xba4>)
 800ad84:	429a      	cmp	r2, r3
 800ad86:	f000 80bb 	beq.w	800af00 <HAL_RCCEx_PeriphCLKConfig+0xb34>
 800ad8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ad8e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800ad92:	4b78      	ldr	r3, [pc, #480]	@ (800af74 <HAL_RCCEx_PeriphCLKConfig+0xba8>)
 800ad94:	429a      	cmp	r2, r3
 800ad96:	f000 80b3 	beq.w	800af00 <HAL_RCCEx_PeriphCLKConfig+0xb34>
 800ad9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ad9e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800ada2:	4b75      	ldr	r3, [pc, #468]	@ (800af78 <HAL_RCCEx_PeriphCLKConfig+0xbac>)
 800ada4:	429a      	cmp	r2, r3
 800ada6:	f000 80ab 	beq.w	800af00 <HAL_RCCEx_PeriphCLKConfig+0xb34>
 800adaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800adae:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800adb2:	4b72      	ldr	r3, [pc, #456]	@ (800af7c <HAL_RCCEx_PeriphCLKConfig+0xbb0>)
 800adb4:	429a      	cmp	r2, r3
 800adb6:	f000 80a3 	beq.w	800af00 <HAL_RCCEx_PeriphCLKConfig+0xb34>
 800adba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800adbe:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800adc2:	4b6f      	ldr	r3, [pc, #444]	@ (800af80 <HAL_RCCEx_PeriphCLKConfig+0xbb4>)
 800adc4:	429a      	cmp	r2, r3
 800adc6:	f000 809b 	beq.w	800af00 <HAL_RCCEx_PeriphCLKConfig+0xb34>
 800adca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800adce:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800add2:	4b6c      	ldr	r3, [pc, #432]	@ (800af84 <HAL_RCCEx_PeriphCLKConfig+0xbb8>)
 800add4:	429a      	cmp	r2, r3
 800add6:	f000 8093 	beq.w	800af00 <HAL_RCCEx_PeriphCLKConfig+0xb34>
 800adda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800adde:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800ade2:	4b69      	ldr	r3, [pc, #420]	@ (800af88 <HAL_RCCEx_PeriphCLKConfig+0xbbc>)
 800ade4:	429a      	cmp	r2, r3
 800ade6:	f000 808b 	beq.w	800af00 <HAL_RCCEx_PeriphCLKConfig+0xb34>
 800adea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800adee:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800adf2:	4b66      	ldr	r3, [pc, #408]	@ (800af8c <HAL_RCCEx_PeriphCLKConfig+0xbc0>)
 800adf4:	429a      	cmp	r2, r3
 800adf6:	f000 8083 	beq.w	800af00 <HAL_RCCEx_PeriphCLKConfig+0xb34>
 800adfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800adfe:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800ae02:	4b63      	ldr	r3, [pc, #396]	@ (800af90 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800ae04:	429a      	cmp	r2, r3
 800ae06:	d07b      	beq.n	800af00 <HAL_RCCEx_PeriphCLKConfig+0xb34>
 800ae08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ae0c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800ae10:	4b60      	ldr	r3, [pc, #384]	@ (800af94 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 800ae12:	429a      	cmp	r2, r3
 800ae14:	d074      	beq.n	800af00 <HAL_RCCEx_PeriphCLKConfig+0xb34>
 800ae16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ae1a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800ae1e:	4b5e      	ldr	r3, [pc, #376]	@ (800af98 <HAL_RCCEx_PeriphCLKConfig+0xbcc>)
 800ae20:	429a      	cmp	r2, r3
 800ae22:	d06d      	beq.n	800af00 <HAL_RCCEx_PeriphCLKConfig+0xb34>
 800ae24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ae28:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800ae2c:	4b5b      	ldr	r3, [pc, #364]	@ (800af9c <HAL_RCCEx_PeriphCLKConfig+0xbd0>)
 800ae2e:	429a      	cmp	r2, r3
 800ae30:	d066      	beq.n	800af00 <HAL_RCCEx_PeriphCLKConfig+0xb34>
 800ae32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ae36:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800ae3a:	4b59      	ldr	r3, [pc, #356]	@ (800afa0 <HAL_RCCEx_PeriphCLKConfig+0xbd4>)
 800ae3c:	429a      	cmp	r2, r3
 800ae3e:	d05f      	beq.n	800af00 <HAL_RCCEx_PeriphCLKConfig+0xb34>
 800ae40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ae44:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800ae48:	4b56      	ldr	r3, [pc, #344]	@ (800afa4 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 800ae4a:	429a      	cmp	r2, r3
 800ae4c:	d058      	beq.n	800af00 <HAL_RCCEx_PeriphCLKConfig+0xb34>
 800ae4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ae52:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800ae56:	4b54      	ldr	r3, [pc, #336]	@ (800afa8 <HAL_RCCEx_PeriphCLKConfig+0xbdc>)
 800ae58:	429a      	cmp	r2, r3
 800ae5a:	d051      	beq.n	800af00 <HAL_RCCEx_PeriphCLKConfig+0xb34>
 800ae5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ae60:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800ae64:	4b51      	ldr	r3, [pc, #324]	@ (800afac <HAL_RCCEx_PeriphCLKConfig+0xbe0>)
 800ae66:	429a      	cmp	r2, r3
 800ae68:	d04a      	beq.n	800af00 <HAL_RCCEx_PeriphCLKConfig+0xb34>
 800ae6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ae6e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800ae72:	4b4f      	ldr	r3, [pc, #316]	@ (800afb0 <HAL_RCCEx_PeriphCLKConfig+0xbe4>)
 800ae74:	429a      	cmp	r2, r3
 800ae76:	d043      	beq.n	800af00 <HAL_RCCEx_PeriphCLKConfig+0xb34>
 800ae78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ae7c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800ae80:	4b4c      	ldr	r3, [pc, #304]	@ (800afb4 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 800ae82:	429a      	cmp	r2, r3
 800ae84:	d03c      	beq.n	800af00 <HAL_RCCEx_PeriphCLKConfig+0xb34>
 800ae86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ae8a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800ae8e:	4b4a      	ldr	r3, [pc, #296]	@ (800afb8 <HAL_RCCEx_PeriphCLKConfig+0xbec>)
 800ae90:	429a      	cmp	r2, r3
 800ae92:	d035      	beq.n	800af00 <HAL_RCCEx_PeriphCLKConfig+0xb34>
 800ae94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ae98:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800ae9c:	4b47      	ldr	r3, [pc, #284]	@ (800afbc <HAL_RCCEx_PeriphCLKConfig+0xbf0>)
 800ae9e:	429a      	cmp	r2, r3
 800aea0:	d02e      	beq.n	800af00 <HAL_RCCEx_PeriphCLKConfig+0xb34>
 800aea2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aea6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800aeaa:	4b45      	ldr	r3, [pc, #276]	@ (800afc0 <HAL_RCCEx_PeriphCLKConfig+0xbf4>)
 800aeac:	429a      	cmp	r2, r3
 800aeae:	d027      	beq.n	800af00 <HAL_RCCEx_PeriphCLKConfig+0xb34>
 800aeb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aeb4:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800aeb8:	4b42      	ldr	r3, [pc, #264]	@ (800afc4 <HAL_RCCEx_PeriphCLKConfig+0xbf8>)
 800aeba:	429a      	cmp	r2, r3
 800aebc:	d020      	beq.n	800af00 <HAL_RCCEx_PeriphCLKConfig+0xb34>
 800aebe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aec2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800aec6:	4b40      	ldr	r3, [pc, #256]	@ (800afc8 <HAL_RCCEx_PeriphCLKConfig+0xbfc>)
 800aec8:	429a      	cmp	r2, r3
 800aeca:	d019      	beq.n	800af00 <HAL_RCCEx_PeriphCLKConfig+0xb34>
 800aecc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aed0:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800aed4:	4b3d      	ldr	r3, [pc, #244]	@ (800afcc <HAL_RCCEx_PeriphCLKConfig+0xc00>)
 800aed6:	429a      	cmp	r2, r3
 800aed8:	d012      	beq.n	800af00 <HAL_RCCEx_PeriphCLKConfig+0xb34>
 800aeda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aede:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800aee2:	4b3b      	ldr	r3, [pc, #236]	@ (800afd0 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 800aee4:	429a      	cmp	r2, r3
 800aee6:	d00b      	beq.n	800af00 <HAL_RCCEx_PeriphCLKConfig+0xb34>
 800aee8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aeec:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800aef0:	4b38      	ldr	r3, [pc, #224]	@ (800afd4 <HAL_RCCEx_PeriphCLKConfig+0xc08>)
 800aef2:	429a      	cmp	r2, r3
 800aef4:	d004      	beq.n	800af00 <HAL_RCCEx_PeriphCLKConfig+0xb34>
 800aef6:	f240 317d 	movw	r1, #893	@ 0x37d
 800aefa:	4837      	ldr	r0, [pc, #220]	@ (800afd8 <HAL_RCCEx_PeriphCLKConfig+0xc0c>)
 800aefc:	f7f7 fa62 	bl	80023c4 <assert_failed>

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800af00:	4b36      	ldr	r3, [pc, #216]	@ (800afdc <HAL_RCCEx_PeriphCLKConfig+0xc10>)
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	4a35      	ldr	r2, [pc, #212]	@ (800afdc <HAL_RCCEx_PeriphCLKConfig+0xc10>)
 800af06:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800af0a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800af0c:	f7f8 fbf6 	bl	80036fc <HAL_GetTick>
 800af10:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800af14:	e070      	b.n	800aff8 <HAL_RCCEx_PeriphCLKConfig+0xc2c>
 800af16:	bf00      	nop
 800af18:	00010300 	.word	0x00010300
 800af1c:	00011300 	.word	0x00011300
 800af20:	00012300 	.word	0x00012300
 800af24:	00013300 	.word	0x00013300
 800af28:	00014300 	.word	0x00014300
 800af2c:	00015300 	.word	0x00015300
 800af30:	00016300 	.word	0x00016300
 800af34:	00017300 	.word	0x00017300
 800af38:	00018300 	.word	0x00018300
 800af3c:	00019300 	.word	0x00019300
 800af40:	0001a300 	.word	0x0001a300
 800af44:	0001b300 	.word	0x0001b300
 800af48:	0001c300 	.word	0x0001c300
 800af4c:	0001d300 	.word	0x0001d300
 800af50:	0001e300 	.word	0x0001e300
 800af54:	0001f300 	.word	0x0001f300
 800af58:	00020300 	.word	0x00020300
 800af5c:	00021300 	.word	0x00021300
 800af60:	00022300 	.word	0x00022300
 800af64:	00023300 	.word	0x00023300
 800af68:	00024300 	.word	0x00024300
 800af6c:	00025300 	.word	0x00025300
 800af70:	00026300 	.word	0x00026300
 800af74:	00027300 	.word	0x00027300
 800af78:	00028300 	.word	0x00028300
 800af7c:	00029300 	.word	0x00029300
 800af80:	0002a300 	.word	0x0002a300
 800af84:	0002b300 	.word	0x0002b300
 800af88:	0002c300 	.word	0x0002c300
 800af8c:	0002d300 	.word	0x0002d300
 800af90:	0002e300 	.word	0x0002e300
 800af94:	0002f300 	.word	0x0002f300
 800af98:	00030300 	.word	0x00030300
 800af9c:	00031300 	.word	0x00031300
 800afa0:	00032300 	.word	0x00032300
 800afa4:	00033300 	.word	0x00033300
 800afa8:	00034300 	.word	0x00034300
 800afac:	00035300 	.word	0x00035300
 800afb0:	00036300 	.word	0x00036300
 800afb4:	00037300 	.word	0x00037300
 800afb8:	00038300 	.word	0x00038300
 800afbc:	00039300 	.word	0x00039300
 800afc0:	0003a300 	.word	0x0003a300
 800afc4:	0003b300 	.word	0x0003b300
 800afc8:	0003c300 	.word	0x0003c300
 800afcc:	0003d300 	.word	0x0003d300
 800afd0:	0003e300 	.word	0x0003e300
 800afd4:	0003f300 	.word	0x0003f300
 800afd8:	08021664 	.word	0x08021664
 800afdc:	58024800 	.word	0x58024800
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800afe0:	f7f8 fb8c 	bl	80036fc <HAL_GetTick>
 800afe4:	4602      	mov	r2, r0
 800afe6:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800afea:	1ad3      	subs	r3, r2, r3
 800afec:	2b64      	cmp	r3, #100	@ 0x64
 800afee:	d903      	bls.n	800aff8 <HAL_RCCEx_PeriphCLKConfig+0xc2c>
      {
        ret = HAL_TIMEOUT;
 800aff0:	2303      	movs	r3, #3
 800aff2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800aff6:	e005      	b.n	800b004 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800aff8:	4bcf      	ldr	r3, [pc, #828]	@ (800b338 <HAL_RCCEx_PeriphCLKConfig+0xf6c>)
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b000:	2b00      	cmp	r3, #0
 800b002:	d0ed      	beq.n	800afe0 <HAL_RCCEx_PeriphCLKConfig+0xc14>
      }
    }

    if (ret == HAL_OK)
 800b004:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d173      	bne.n	800b0f4 <HAL_RCCEx_PeriphCLKConfig+0xd28>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800b00c:	4bcb      	ldr	r3, [pc, #812]	@ (800b33c <HAL_RCCEx_PeriphCLKConfig+0xf70>)
 800b00e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800b010:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b014:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800b018:	4053      	eors	r3, r2
 800b01a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d015      	beq.n	800b04e <HAL_RCCEx_PeriphCLKConfig+0xc82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b022:	4bc6      	ldr	r3, [pc, #792]	@ (800b33c <HAL_RCCEx_PeriphCLKConfig+0xf70>)
 800b024:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b026:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b02a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b02e:	4bc3      	ldr	r3, [pc, #780]	@ (800b33c <HAL_RCCEx_PeriphCLKConfig+0xf70>)
 800b030:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b032:	4ac2      	ldr	r2, [pc, #776]	@ (800b33c <HAL_RCCEx_PeriphCLKConfig+0xf70>)
 800b034:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b038:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b03a:	4bc0      	ldr	r3, [pc, #768]	@ (800b33c <HAL_RCCEx_PeriphCLKConfig+0xf70>)
 800b03c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b03e:	4abf      	ldr	r2, [pc, #764]	@ (800b33c <HAL_RCCEx_PeriphCLKConfig+0xf70>)
 800b040:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b044:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800b046:	4abd      	ldr	r2, [pc, #756]	@ (800b33c <HAL_RCCEx_PeriphCLKConfig+0xf70>)
 800b048:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b04c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800b04e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b052:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800b056:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b05a:	d118      	bne.n	800b08e <HAL_RCCEx_PeriphCLKConfig+0xcc2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b05c:	f7f8 fb4e 	bl	80036fc <HAL_GetTick>
 800b060:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b064:	e00d      	b.n	800b082 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b066:	f7f8 fb49 	bl	80036fc <HAL_GetTick>
 800b06a:	4602      	mov	r2, r0
 800b06c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800b070:	1ad2      	subs	r2, r2, r3
 800b072:	f241 3388 	movw	r3, #5000	@ 0x1388
 800b076:	429a      	cmp	r2, r3
 800b078:	d903      	bls.n	800b082 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
          {
            ret = HAL_TIMEOUT;
 800b07a:	2303      	movs	r3, #3
 800b07c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 800b080:	e005      	b.n	800b08e <HAL_RCCEx_PeriphCLKConfig+0xcc2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b082:	4bae      	ldr	r3, [pc, #696]	@ (800b33c <HAL_RCCEx_PeriphCLKConfig+0xf70>)
 800b084:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b086:	f003 0302 	and.w	r3, r3, #2
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d0eb      	beq.n	800b066 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
          }
        }
      }

      if (ret == HAL_OK)
 800b08e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b092:	2b00      	cmp	r3, #0
 800b094:	d129      	bne.n	800b0ea <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b096:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b09a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800b09e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b0a2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b0a6:	d10e      	bne.n	800b0c6 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
 800b0a8:	4ba4      	ldr	r3, [pc, #656]	@ (800b33c <HAL_RCCEx_PeriphCLKConfig+0xf70>)
 800b0aa:	691b      	ldr	r3, [r3, #16]
 800b0ac:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800b0b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b0b4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800b0b8:	091a      	lsrs	r2, r3, #4
 800b0ba:	4ba1      	ldr	r3, [pc, #644]	@ (800b340 <HAL_RCCEx_PeriphCLKConfig+0xf74>)
 800b0bc:	4013      	ands	r3, r2
 800b0be:	4a9f      	ldr	r2, [pc, #636]	@ (800b33c <HAL_RCCEx_PeriphCLKConfig+0xf70>)
 800b0c0:	430b      	orrs	r3, r1
 800b0c2:	6113      	str	r3, [r2, #16]
 800b0c4:	e005      	b.n	800b0d2 <HAL_RCCEx_PeriphCLKConfig+0xd06>
 800b0c6:	4b9d      	ldr	r3, [pc, #628]	@ (800b33c <HAL_RCCEx_PeriphCLKConfig+0xf70>)
 800b0c8:	691b      	ldr	r3, [r3, #16]
 800b0ca:	4a9c      	ldr	r2, [pc, #624]	@ (800b33c <HAL_RCCEx_PeriphCLKConfig+0xf70>)
 800b0cc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800b0d0:	6113      	str	r3, [r2, #16]
 800b0d2:	4b9a      	ldr	r3, [pc, #616]	@ (800b33c <HAL_RCCEx_PeriphCLKConfig+0xf70>)
 800b0d4:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800b0d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b0da:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800b0de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b0e2:	4a96      	ldr	r2, [pc, #600]	@ (800b33c <HAL_RCCEx_PeriphCLKConfig+0xf70>)
 800b0e4:	430b      	orrs	r3, r1
 800b0e6:	6713      	str	r3, [r2, #112]	@ 0x70
 800b0e8:	e008      	b.n	800b0fc <HAL_RCCEx_PeriphCLKConfig+0xd30>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b0ea:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b0ee:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800b0f2:	e003      	b.n	800b0fc <HAL_RCCEx_PeriphCLKConfig+0xd30>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b0f4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b0f8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800b0fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b100:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b104:	f002 0301 	and.w	r3, r2, #1
 800b108:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b10c:	2300      	movs	r3, #0
 800b10e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800b112:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800b116:	460b      	mov	r3, r1
 800b118:	4313      	orrs	r3, r2
 800b11a:	f000 8089 	beq.w	800b230 <HAL_RCCEx_PeriphCLKConfig+0xe64>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800b11e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b122:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b124:	2b28      	cmp	r3, #40	@ 0x28
 800b126:	d86b      	bhi.n	800b200 <HAL_RCCEx_PeriphCLKConfig+0xe34>
 800b128:	a201      	add	r2, pc, #4	@ (adr r2, 800b130 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 800b12a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b12e:	bf00      	nop
 800b130:	0800b209 	.word	0x0800b209
 800b134:	0800b201 	.word	0x0800b201
 800b138:	0800b201 	.word	0x0800b201
 800b13c:	0800b201 	.word	0x0800b201
 800b140:	0800b201 	.word	0x0800b201
 800b144:	0800b201 	.word	0x0800b201
 800b148:	0800b201 	.word	0x0800b201
 800b14c:	0800b201 	.word	0x0800b201
 800b150:	0800b1d5 	.word	0x0800b1d5
 800b154:	0800b201 	.word	0x0800b201
 800b158:	0800b201 	.word	0x0800b201
 800b15c:	0800b201 	.word	0x0800b201
 800b160:	0800b201 	.word	0x0800b201
 800b164:	0800b201 	.word	0x0800b201
 800b168:	0800b201 	.word	0x0800b201
 800b16c:	0800b201 	.word	0x0800b201
 800b170:	0800b1eb 	.word	0x0800b1eb
 800b174:	0800b201 	.word	0x0800b201
 800b178:	0800b201 	.word	0x0800b201
 800b17c:	0800b201 	.word	0x0800b201
 800b180:	0800b201 	.word	0x0800b201
 800b184:	0800b201 	.word	0x0800b201
 800b188:	0800b201 	.word	0x0800b201
 800b18c:	0800b201 	.word	0x0800b201
 800b190:	0800b209 	.word	0x0800b209
 800b194:	0800b201 	.word	0x0800b201
 800b198:	0800b201 	.word	0x0800b201
 800b19c:	0800b201 	.word	0x0800b201
 800b1a0:	0800b201 	.word	0x0800b201
 800b1a4:	0800b201 	.word	0x0800b201
 800b1a8:	0800b201 	.word	0x0800b201
 800b1ac:	0800b201 	.word	0x0800b201
 800b1b0:	0800b209 	.word	0x0800b209
 800b1b4:	0800b201 	.word	0x0800b201
 800b1b8:	0800b201 	.word	0x0800b201
 800b1bc:	0800b201 	.word	0x0800b201
 800b1c0:	0800b201 	.word	0x0800b201
 800b1c4:	0800b201 	.word	0x0800b201
 800b1c8:	0800b201 	.word	0x0800b201
 800b1cc:	0800b201 	.word	0x0800b201
 800b1d0:	0800b209 	.word	0x0800b209
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b1d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b1d8:	3308      	adds	r3, #8
 800b1da:	2101      	movs	r1, #1
 800b1dc:	4618      	mov	r0, r3
 800b1de:	f001 fe89 	bl	800cef4 <RCCEx_PLL2_Config>
 800b1e2:	4603      	mov	r3, r0
 800b1e4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800b1e8:	e00f      	b.n	800b20a <HAL_RCCEx_PeriphCLKConfig+0xe3e>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b1ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b1ee:	3328      	adds	r3, #40	@ 0x28
 800b1f0:	2101      	movs	r1, #1
 800b1f2:	4618      	mov	r0, r3
 800b1f4:	f001 ffa0 	bl	800d138 <RCCEx_PLL3_Config>
 800b1f8:	4603      	mov	r3, r0
 800b1fa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800b1fe:	e004      	b.n	800b20a <HAL_RCCEx_PeriphCLKConfig+0xe3e>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b200:	2301      	movs	r3, #1
 800b202:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800b206:	e000      	b.n	800b20a <HAL_RCCEx_PeriphCLKConfig+0xe3e>
        break;
 800b208:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b20a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d10a      	bne.n	800b228 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800b212:	4b4a      	ldr	r3, [pc, #296]	@ (800b33c <HAL_RCCEx_PeriphCLKConfig+0xf70>)
 800b214:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b216:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800b21a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b21e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b220:	4a46      	ldr	r2, [pc, #280]	@ (800b33c <HAL_RCCEx_PeriphCLKConfig+0xf70>)
 800b222:	430b      	orrs	r3, r1
 800b224:	6553      	str	r3, [r2, #84]	@ 0x54
 800b226:	e003      	b.n	800b230 <HAL_RCCEx_PeriphCLKConfig+0xe64>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b228:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b22c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800b230:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b234:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b238:	f002 0302 	and.w	r3, r2, #2
 800b23c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b240:	2300      	movs	r3, #0
 800b242:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b246:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800b24a:	460b      	mov	r3, r1
 800b24c:	4313      	orrs	r3, r2
 800b24e:	d041      	beq.n	800b2d4 <HAL_RCCEx_PeriphCLKConfig+0xf08>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800b250:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b254:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b256:	2b05      	cmp	r3, #5
 800b258:	d824      	bhi.n	800b2a4 <HAL_RCCEx_PeriphCLKConfig+0xed8>
 800b25a:	a201      	add	r2, pc, #4	@ (adr r2, 800b260 <HAL_RCCEx_PeriphCLKConfig+0xe94>)
 800b25c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b260:	0800b2ad 	.word	0x0800b2ad
 800b264:	0800b279 	.word	0x0800b279
 800b268:	0800b28f 	.word	0x0800b28f
 800b26c:	0800b2ad 	.word	0x0800b2ad
 800b270:	0800b2ad 	.word	0x0800b2ad
 800b274:	0800b2ad 	.word	0x0800b2ad
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b278:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b27c:	3308      	adds	r3, #8
 800b27e:	2101      	movs	r1, #1
 800b280:	4618      	mov	r0, r3
 800b282:	f001 fe37 	bl	800cef4 <RCCEx_PLL2_Config>
 800b286:	4603      	mov	r3, r0
 800b288:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800b28c:	e00f      	b.n	800b2ae <HAL_RCCEx_PeriphCLKConfig+0xee2>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b28e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b292:	3328      	adds	r3, #40	@ 0x28
 800b294:	2101      	movs	r1, #1
 800b296:	4618      	mov	r0, r3
 800b298:	f001 ff4e 	bl	800d138 <RCCEx_PLL3_Config>
 800b29c:	4603      	mov	r3, r0
 800b29e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800b2a2:	e004      	b.n	800b2ae <HAL_RCCEx_PeriphCLKConfig+0xee2>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b2a4:	2301      	movs	r3, #1
 800b2a6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800b2aa:	e000      	b.n	800b2ae <HAL_RCCEx_PeriphCLKConfig+0xee2>
        break;
 800b2ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b2ae:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d10a      	bne.n	800b2cc <HAL_RCCEx_PeriphCLKConfig+0xf00>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800b2b6:	4b21      	ldr	r3, [pc, #132]	@ (800b33c <HAL_RCCEx_PeriphCLKConfig+0xf70>)
 800b2b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b2ba:	f023 0107 	bic.w	r1, r3, #7
 800b2be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b2c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b2c4:	4a1d      	ldr	r2, [pc, #116]	@ (800b33c <HAL_RCCEx_PeriphCLKConfig+0xf70>)
 800b2c6:	430b      	orrs	r3, r1
 800b2c8:	6553      	str	r3, [r2, #84]	@ 0x54
 800b2ca:	e003      	b.n	800b2d4 <HAL_RCCEx_PeriphCLKConfig+0xf08>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b2cc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b2d0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b2d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b2d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2dc:	f002 0304 	and.w	r3, r2, #4
 800b2e0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800b2e4:	2300      	movs	r3, #0
 800b2e6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800b2ea:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800b2ee:	460b      	mov	r3, r1
 800b2f0:	4313      	orrs	r3, r2
 800b2f2:	d04b      	beq.n	800b38c <HAL_RCCEx_PeriphCLKConfig+0xfc0>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800b2f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b2f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b2fc:	2b05      	cmp	r3, #5
 800b2fe:	d82c      	bhi.n	800b35a <HAL_RCCEx_PeriphCLKConfig+0xf8e>
 800b300:	a201      	add	r2, pc, #4	@ (adr r2, 800b308 <HAL_RCCEx_PeriphCLKConfig+0xf3c>)
 800b302:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b306:	bf00      	nop
 800b308:	0800b363 	.word	0x0800b363
 800b30c:	0800b321 	.word	0x0800b321
 800b310:	0800b345 	.word	0x0800b345
 800b314:	0800b363 	.word	0x0800b363
 800b318:	0800b363 	.word	0x0800b363
 800b31c:	0800b363 	.word	0x0800b363
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b320:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b324:	3308      	adds	r3, #8
 800b326:	2101      	movs	r1, #1
 800b328:	4618      	mov	r0, r3
 800b32a:	f001 fde3 	bl	800cef4 <RCCEx_PLL2_Config>
 800b32e:	4603      	mov	r3, r0
 800b330:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800b334:	e016      	b.n	800b364 <HAL_RCCEx_PeriphCLKConfig+0xf98>
 800b336:	bf00      	nop
 800b338:	58024800 	.word	0x58024800
 800b33c:	58024400 	.word	0x58024400
 800b340:	00ffffcf 	.word	0x00ffffcf

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b344:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b348:	3328      	adds	r3, #40	@ 0x28
 800b34a:	2101      	movs	r1, #1
 800b34c:	4618      	mov	r0, r3
 800b34e:	f001 fef3 	bl	800d138 <RCCEx_PLL3_Config>
 800b352:	4603      	mov	r3, r0
 800b354:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800b358:	e004      	b.n	800b364 <HAL_RCCEx_PeriphCLKConfig+0xf98>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b35a:	2301      	movs	r3, #1
 800b35c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800b360:	e000      	b.n	800b364 <HAL_RCCEx_PeriphCLKConfig+0xf98>
        break;
 800b362:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b364:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d10b      	bne.n	800b384 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b36c:	4b9e      	ldr	r3, [pc, #632]	@ (800b5e8 <HAL_RCCEx_PeriphCLKConfig+0x121c>)
 800b36e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b370:	f023 0107 	bic.w	r1, r3, #7
 800b374:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b378:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b37c:	4a9a      	ldr	r2, [pc, #616]	@ (800b5e8 <HAL_RCCEx_PeriphCLKConfig+0x121c>)
 800b37e:	430b      	orrs	r3, r1
 800b380:	6593      	str	r3, [r2, #88]	@ 0x58
 800b382:	e003      	b.n	800b38c <HAL_RCCEx_PeriphCLKConfig+0xfc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b384:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b388:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b38c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b390:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b394:	f002 0320 	and.w	r3, r2, #32
 800b398:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800b39c:	2300      	movs	r3, #0
 800b39e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800b3a2:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800b3a6:	460b      	mov	r3, r1
 800b3a8:	4313      	orrs	r3, r2
 800b3aa:	d055      	beq.n	800b458 <HAL_RCCEx_PeriphCLKConfig+0x108c>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800b3ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b3b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b3b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b3b8:	d033      	beq.n	800b422 <HAL_RCCEx_PeriphCLKConfig+0x1056>
 800b3ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b3be:	d82c      	bhi.n	800b41a <HAL_RCCEx_PeriphCLKConfig+0x104e>
 800b3c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b3c4:	d02f      	beq.n	800b426 <HAL_RCCEx_PeriphCLKConfig+0x105a>
 800b3c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b3ca:	d826      	bhi.n	800b41a <HAL_RCCEx_PeriphCLKConfig+0x104e>
 800b3cc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800b3d0:	d02b      	beq.n	800b42a <HAL_RCCEx_PeriphCLKConfig+0x105e>
 800b3d2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800b3d6:	d820      	bhi.n	800b41a <HAL_RCCEx_PeriphCLKConfig+0x104e>
 800b3d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b3dc:	d012      	beq.n	800b404 <HAL_RCCEx_PeriphCLKConfig+0x1038>
 800b3de:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b3e2:	d81a      	bhi.n	800b41a <HAL_RCCEx_PeriphCLKConfig+0x104e>
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d022      	beq.n	800b42e <HAL_RCCEx_PeriphCLKConfig+0x1062>
 800b3e8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b3ec:	d115      	bne.n	800b41a <HAL_RCCEx_PeriphCLKConfig+0x104e>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b3ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b3f2:	3308      	adds	r3, #8
 800b3f4:	2100      	movs	r1, #0
 800b3f6:	4618      	mov	r0, r3
 800b3f8:	f001 fd7c 	bl	800cef4 <RCCEx_PLL2_Config>
 800b3fc:	4603      	mov	r3, r0
 800b3fe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800b402:	e015      	b.n	800b430 <HAL_RCCEx_PeriphCLKConfig+0x1064>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b404:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b408:	3328      	adds	r3, #40	@ 0x28
 800b40a:	2102      	movs	r1, #2
 800b40c:	4618      	mov	r0, r3
 800b40e:	f001 fe93 	bl	800d138 <RCCEx_PLL3_Config>
 800b412:	4603      	mov	r3, r0
 800b414:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800b418:	e00a      	b.n	800b430 <HAL_RCCEx_PeriphCLKConfig+0x1064>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b41a:	2301      	movs	r3, #1
 800b41c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800b420:	e006      	b.n	800b430 <HAL_RCCEx_PeriphCLKConfig+0x1064>
        break;
 800b422:	bf00      	nop
 800b424:	e004      	b.n	800b430 <HAL_RCCEx_PeriphCLKConfig+0x1064>
        break;
 800b426:	bf00      	nop
 800b428:	e002      	b.n	800b430 <HAL_RCCEx_PeriphCLKConfig+0x1064>
        break;
 800b42a:	bf00      	nop
 800b42c:	e000      	b.n	800b430 <HAL_RCCEx_PeriphCLKConfig+0x1064>
        break;
 800b42e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b430:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b434:	2b00      	cmp	r3, #0
 800b436:	d10b      	bne.n	800b450 <HAL_RCCEx_PeriphCLKConfig+0x1084>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b438:	4b6b      	ldr	r3, [pc, #428]	@ (800b5e8 <HAL_RCCEx_PeriphCLKConfig+0x121c>)
 800b43a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b43c:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800b440:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b444:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b448:	4a67      	ldr	r2, [pc, #412]	@ (800b5e8 <HAL_RCCEx_PeriphCLKConfig+0x121c>)
 800b44a:	430b      	orrs	r3, r1
 800b44c:	6553      	str	r3, [r2, #84]	@ 0x54
 800b44e:	e003      	b.n	800b458 <HAL_RCCEx_PeriphCLKConfig+0x108c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b450:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b454:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800b458:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b45c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b460:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800b464:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800b468:	2300      	movs	r3, #0
 800b46a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800b46e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800b472:	460b      	mov	r3, r1
 800b474:	4313      	orrs	r3, r2
 800b476:	d055      	beq.n	800b524 <HAL_RCCEx_PeriphCLKConfig+0x1158>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800b478:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b47c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b480:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800b484:	d033      	beq.n	800b4ee <HAL_RCCEx_PeriphCLKConfig+0x1122>
 800b486:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800b48a:	d82c      	bhi.n	800b4e6 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800b48c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b490:	d02f      	beq.n	800b4f2 <HAL_RCCEx_PeriphCLKConfig+0x1126>
 800b492:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b496:	d826      	bhi.n	800b4e6 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800b498:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b49c:	d02b      	beq.n	800b4f6 <HAL_RCCEx_PeriphCLKConfig+0x112a>
 800b49e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b4a2:	d820      	bhi.n	800b4e6 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800b4a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b4a8:	d012      	beq.n	800b4d0 <HAL_RCCEx_PeriphCLKConfig+0x1104>
 800b4aa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b4ae:	d81a      	bhi.n	800b4e6 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d022      	beq.n	800b4fa <HAL_RCCEx_PeriphCLKConfig+0x112e>
 800b4b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b4b8:	d115      	bne.n	800b4e6 <HAL_RCCEx_PeriphCLKConfig+0x111a>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b4ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b4be:	3308      	adds	r3, #8
 800b4c0:	2100      	movs	r1, #0
 800b4c2:	4618      	mov	r0, r3
 800b4c4:	f001 fd16 	bl	800cef4 <RCCEx_PLL2_Config>
 800b4c8:	4603      	mov	r3, r0
 800b4ca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800b4ce:	e015      	b.n	800b4fc <HAL_RCCEx_PeriphCLKConfig+0x1130>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b4d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b4d4:	3328      	adds	r3, #40	@ 0x28
 800b4d6:	2102      	movs	r1, #2
 800b4d8:	4618      	mov	r0, r3
 800b4da:	f001 fe2d 	bl	800d138 <RCCEx_PLL3_Config>
 800b4de:	4603      	mov	r3, r0
 800b4e0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800b4e4:	e00a      	b.n	800b4fc <HAL_RCCEx_PeriphCLKConfig+0x1130>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b4e6:	2301      	movs	r3, #1
 800b4e8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800b4ec:	e006      	b.n	800b4fc <HAL_RCCEx_PeriphCLKConfig+0x1130>
        break;
 800b4ee:	bf00      	nop
 800b4f0:	e004      	b.n	800b4fc <HAL_RCCEx_PeriphCLKConfig+0x1130>
        break;
 800b4f2:	bf00      	nop
 800b4f4:	e002      	b.n	800b4fc <HAL_RCCEx_PeriphCLKConfig+0x1130>
        break;
 800b4f6:	bf00      	nop
 800b4f8:	e000      	b.n	800b4fc <HAL_RCCEx_PeriphCLKConfig+0x1130>
        break;
 800b4fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b4fc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b500:	2b00      	cmp	r3, #0
 800b502:	d10b      	bne.n	800b51c <HAL_RCCEx_PeriphCLKConfig+0x1150>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b504:	4b38      	ldr	r3, [pc, #224]	@ (800b5e8 <HAL_RCCEx_PeriphCLKConfig+0x121c>)
 800b506:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b508:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800b50c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b510:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b514:	4a34      	ldr	r2, [pc, #208]	@ (800b5e8 <HAL_RCCEx_PeriphCLKConfig+0x121c>)
 800b516:	430b      	orrs	r3, r1
 800b518:	6593      	str	r3, [r2, #88]	@ 0x58
 800b51a:	e003      	b.n	800b524 <HAL_RCCEx_PeriphCLKConfig+0x1158>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b51c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b520:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800b524:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b52c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800b530:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b534:	2300      	movs	r3, #0
 800b536:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b53a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800b53e:	460b      	mov	r3, r1
 800b540:	4313      	orrs	r3, r2
 800b542:	d057      	beq.n	800b5f4 <HAL_RCCEx_PeriphCLKConfig+0x1228>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800b544:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b548:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800b54c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800b550:	d033      	beq.n	800b5ba <HAL_RCCEx_PeriphCLKConfig+0x11ee>
 800b552:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800b556:	d82c      	bhi.n	800b5b2 <HAL_RCCEx_PeriphCLKConfig+0x11e6>
 800b558:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b55c:	d02f      	beq.n	800b5be <HAL_RCCEx_PeriphCLKConfig+0x11f2>
 800b55e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b562:	d826      	bhi.n	800b5b2 <HAL_RCCEx_PeriphCLKConfig+0x11e6>
 800b564:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800b568:	d02b      	beq.n	800b5c2 <HAL_RCCEx_PeriphCLKConfig+0x11f6>
 800b56a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800b56e:	d820      	bhi.n	800b5b2 <HAL_RCCEx_PeriphCLKConfig+0x11e6>
 800b570:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b574:	d012      	beq.n	800b59c <HAL_RCCEx_PeriphCLKConfig+0x11d0>
 800b576:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b57a:	d81a      	bhi.n	800b5b2 <HAL_RCCEx_PeriphCLKConfig+0x11e6>
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d022      	beq.n	800b5c6 <HAL_RCCEx_PeriphCLKConfig+0x11fa>
 800b580:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b584:	d115      	bne.n	800b5b2 <HAL_RCCEx_PeriphCLKConfig+0x11e6>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b586:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b58a:	3308      	adds	r3, #8
 800b58c:	2100      	movs	r1, #0
 800b58e:	4618      	mov	r0, r3
 800b590:	f001 fcb0 	bl	800cef4 <RCCEx_PLL2_Config>
 800b594:	4603      	mov	r3, r0
 800b596:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800b59a:	e015      	b.n	800b5c8 <HAL_RCCEx_PeriphCLKConfig+0x11fc>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b59c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b5a0:	3328      	adds	r3, #40	@ 0x28
 800b5a2:	2102      	movs	r1, #2
 800b5a4:	4618      	mov	r0, r3
 800b5a6:	f001 fdc7 	bl	800d138 <RCCEx_PLL3_Config>
 800b5aa:	4603      	mov	r3, r0
 800b5ac:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800b5b0:	e00a      	b.n	800b5c8 <HAL_RCCEx_PeriphCLKConfig+0x11fc>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b5b2:	2301      	movs	r3, #1
 800b5b4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800b5b8:	e006      	b.n	800b5c8 <HAL_RCCEx_PeriphCLKConfig+0x11fc>
        break;
 800b5ba:	bf00      	nop
 800b5bc:	e004      	b.n	800b5c8 <HAL_RCCEx_PeriphCLKConfig+0x11fc>
        break;
 800b5be:	bf00      	nop
 800b5c0:	e002      	b.n	800b5c8 <HAL_RCCEx_PeriphCLKConfig+0x11fc>
        break;
 800b5c2:	bf00      	nop
 800b5c4:	e000      	b.n	800b5c8 <HAL_RCCEx_PeriphCLKConfig+0x11fc>
        break;
 800b5c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b5c8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d10d      	bne.n	800b5ec <HAL_RCCEx_PeriphCLKConfig+0x1220>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800b5d0:	4b05      	ldr	r3, [pc, #20]	@ (800b5e8 <HAL_RCCEx_PeriphCLKConfig+0x121c>)
 800b5d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b5d4:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800b5d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b5dc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800b5e0:	4a01      	ldr	r2, [pc, #4]	@ (800b5e8 <HAL_RCCEx_PeriphCLKConfig+0x121c>)
 800b5e2:	430b      	orrs	r3, r1
 800b5e4:	6593      	str	r3, [r2, #88]	@ 0x58
 800b5e6:	e005      	b.n	800b5f4 <HAL_RCCEx_PeriphCLKConfig+0x1228>
 800b5e8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b5ec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b5f0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800b5f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b5f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5fc:	f002 0308 	and.w	r3, r2, #8
 800b600:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800b604:	2300      	movs	r3, #0
 800b606:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800b60a:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800b60e:	460b      	mov	r3, r1
 800b610:	4313      	orrs	r3, r2
 800b612:	d03e      	beq.n	800b692 <HAL_RCCEx_PeriphCLKConfig+0x12c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));
 800b614:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b618:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b61c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b620:	d018      	beq.n	800b654 <HAL_RCCEx_PeriphCLKConfig+0x1288>
 800b622:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b626:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b62a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b62e:	d011      	beq.n	800b654 <HAL_RCCEx_PeriphCLKConfig+0x1288>
 800b630:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b634:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d00b      	beq.n	800b654 <HAL_RCCEx_PeriphCLKConfig+0x1288>
 800b63c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b640:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b644:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b648:	d004      	beq.n	800b654 <HAL_RCCEx_PeriphCLKConfig+0x1288>
 800b64a:	f240 41fc 	movw	r1, #1276	@ 0x4fc
 800b64e:	48aa      	ldr	r0, [pc, #680]	@ (800b8f8 <HAL_RCCEx_PeriphCLKConfig+0x152c>)
 800b650:	f7f6 feb8 	bl	80023c4 <assert_failed>

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800b654:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b658:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b65c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b660:	d10c      	bne.n	800b67c <HAL_RCCEx_PeriphCLKConfig+0x12b0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b662:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b666:	3328      	adds	r3, #40	@ 0x28
 800b668:	2102      	movs	r1, #2
 800b66a:	4618      	mov	r0, r3
 800b66c:	f001 fd64 	bl	800d138 <RCCEx_PLL3_Config>
 800b670:	4603      	mov	r3, r0
 800b672:	2b00      	cmp	r3, #0
 800b674:	d002      	beq.n	800b67c <HAL_RCCEx_PeriphCLKConfig+0x12b0>
      {
        status = HAL_ERROR;
 800b676:	2301      	movs	r3, #1
 800b678:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800b67c:	4b9f      	ldr	r3, [pc, #636]	@ (800b8fc <HAL_RCCEx_PeriphCLKConfig+0x1530>)
 800b67e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b680:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800b684:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b688:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b68c:	4a9b      	ldr	r2, [pc, #620]	@ (800b8fc <HAL_RCCEx_PeriphCLKConfig+0x1530>)
 800b68e:	430b      	orrs	r3, r1
 800b690:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b692:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b69a:	f002 0310 	and.w	r3, r2, #16
 800b69e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800b6a2:	2300      	movs	r3, #0
 800b6a4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b6a8:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800b6ac:	460b      	mov	r3, r1
 800b6ae:	4313      	orrs	r3, r2
 800b6b0:	d03e      	beq.n	800b730 <HAL_RCCEx_PeriphCLKConfig+0x1364>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
 800b6b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b6b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b6ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b6be:	d018      	beq.n	800b6f2 <HAL_RCCEx_PeriphCLKConfig+0x1326>
 800b6c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b6c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b6c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b6cc:	d011      	beq.n	800b6f2 <HAL_RCCEx_PeriphCLKConfig+0x1326>
 800b6ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b6d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d00b      	beq.n	800b6f2 <HAL_RCCEx_PeriphCLKConfig+0x1326>
 800b6da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b6de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b6e2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b6e6:	d004      	beq.n	800b6f2 <HAL_RCCEx_PeriphCLKConfig+0x1326>
 800b6e8:	f44f 61a4 	mov.w	r1, #1312	@ 0x520
 800b6ec:	4882      	ldr	r0, [pc, #520]	@ (800b8f8 <HAL_RCCEx_PeriphCLKConfig+0x152c>)
 800b6ee:	f7f6 fe69 	bl	80023c4 <assert_failed>

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800b6f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b6f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b6fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b6fe:	d10c      	bne.n	800b71a <HAL_RCCEx_PeriphCLKConfig+0x134e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b700:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b704:	3328      	adds	r3, #40	@ 0x28
 800b706:	2102      	movs	r1, #2
 800b708:	4618      	mov	r0, r3
 800b70a:	f001 fd15 	bl	800d138 <RCCEx_PLL3_Config>
 800b70e:	4603      	mov	r3, r0
 800b710:	2b00      	cmp	r3, #0
 800b712:	d002      	beq.n	800b71a <HAL_RCCEx_PeriphCLKConfig+0x134e>
      {
        status = HAL_ERROR;
 800b714:	2301      	movs	r3, #1
 800b716:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b71a:	4b78      	ldr	r3, [pc, #480]	@ (800b8fc <HAL_RCCEx_PeriphCLKConfig+0x1530>)
 800b71c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b71e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800b722:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b726:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b72a:	4a74      	ldr	r2, [pc, #464]	@ (800b8fc <HAL_RCCEx_PeriphCLKConfig+0x1530>)
 800b72c:	430b      	orrs	r3, r1
 800b72e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b730:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b734:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b738:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800b73c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800b73e:	2300      	movs	r3, #0
 800b740:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800b742:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800b746:	460b      	mov	r3, r1
 800b748:	4313      	orrs	r3, r2
 800b74a:	d03e      	beq.n	800b7ca <HAL_RCCEx_PeriphCLKConfig+0x13fe>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800b74c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b750:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800b754:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b758:	d022      	beq.n	800b7a0 <HAL_RCCEx_PeriphCLKConfig+0x13d4>
 800b75a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b75e:	d81b      	bhi.n	800b798 <HAL_RCCEx_PeriphCLKConfig+0x13cc>
 800b760:	2b00      	cmp	r3, #0
 800b762:	d003      	beq.n	800b76c <HAL_RCCEx_PeriphCLKConfig+0x13a0>
 800b764:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b768:	d00b      	beq.n	800b782 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
 800b76a:	e015      	b.n	800b798 <HAL_RCCEx_PeriphCLKConfig+0x13cc>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b76c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b770:	3308      	adds	r3, #8
 800b772:	2100      	movs	r1, #0
 800b774:	4618      	mov	r0, r3
 800b776:	f001 fbbd 	bl	800cef4 <RCCEx_PLL2_Config>
 800b77a:	4603      	mov	r3, r0
 800b77c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800b780:	e00f      	b.n	800b7a2 <HAL_RCCEx_PeriphCLKConfig+0x13d6>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b782:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b786:	3328      	adds	r3, #40	@ 0x28
 800b788:	2102      	movs	r1, #2
 800b78a:	4618      	mov	r0, r3
 800b78c:	f001 fcd4 	bl	800d138 <RCCEx_PLL3_Config>
 800b790:	4603      	mov	r3, r0
 800b792:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800b796:	e004      	b.n	800b7a2 <HAL_RCCEx_PeriphCLKConfig+0x13d6>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b798:	2301      	movs	r3, #1
 800b79a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800b79e:	e000      	b.n	800b7a2 <HAL_RCCEx_PeriphCLKConfig+0x13d6>
        break;
 800b7a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b7a2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d10b      	bne.n	800b7c2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b7aa:	4b54      	ldr	r3, [pc, #336]	@ (800b8fc <HAL_RCCEx_PeriphCLKConfig+0x1530>)
 800b7ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b7ae:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800b7b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b7b6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800b7ba:	4a50      	ldr	r2, [pc, #320]	@ (800b8fc <HAL_RCCEx_PeriphCLKConfig+0x1530>)
 800b7bc:	430b      	orrs	r3, r1
 800b7be:	6593      	str	r3, [r2, #88]	@ 0x58
 800b7c0:	e003      	b.n	800b7ca <HAL_RCCEx_PeriphCLKConfig+0x13fe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b7c2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b7c6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800b7ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b7ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7d2:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800b7d6:	673b      	str	r3, [r7, #112]	@ 0x70
 800b7d8:	2300      	movs	r3, #0
 800b7da:	677b      	str	r3, [r7, #116]	@ 0x74
 800b7dc:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800b7e0:	460b      	mov	r3, r1
 800b7e2:	4313      	orrs	r3, r2
 800b7e4:	d03b      	beq.n	800b85e <HAL_RCCEx_PeriphCLKConfig+0x1492>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800b7e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b7ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b7ee:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b7f2:	d01f      	beq.n	800b834 <HAL_RCCEx_PeriphCLKConfig+0x1468>
 800b7f4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b7f8:	d818      	bhi.n	800b82c <HAL_RCCEx_PeriphCLKConfig+0x1460>
 800b7fa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b7fe:	d003      	beq.n	800b808 <HAL_RCCEx_PeriphCLKConfig+0x143c>
 800b800:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b804:	d007      	beq.n	800b816 <HAL_RCCEx_PeriphCLKConfig+0x144a>
 800b806:	e011      	b.n	800b82c <HAL_RCCEx_PeriphCLKConfig+0x1460>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b808:	4b3c      	ldr	r3, [pc, #240]	@ (800b8fc <HAL_RCCEx_PeriphCLKConfig+0x1530>)
 800b80a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b80c:	4a3b      	ldr	r2, [pc, #236]	@ (800b8fc <HAL_RCCEx_PeriphCLKConfig+0x1530>)
 800b80e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b812:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800b814:	e00f      	b.n	800b836 <HAL_RCCEx_PeriphCLKConfig+0x146a>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b816:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b81a:	3328      	adds	r3, #40	@ 0x28
 800b81c:	2101      	movs	r1, #1
 800b81e:	4618      	mov	r0, r3
 800b820:	f001 fc8a 	bl	800d138 <RCCEx_PLL3_Config>
 800b824:	4603      	mov	r3, r0
 800b826:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800b82a:	e004      	b.n	800b836 <HAL_RCCEx_PeriphCLKConfig+0x146a>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b82c:	2301      	movs	r3, #1
 800b82e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800b832:	e000      	b.n	800b836 <HAL_RCCEx_PeriphCLKConfig+0x146a>
        break;
 800b834:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b836:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d10b      	bne.n	800b856 <HAL_RCCEx_PeriphCLKConfig+0x148a>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b83e:	4b2f      	ldr	r3, [pc, #188]	@ (800b8fc <HAL_RCCEx_PeriphCLKConfig+0x1530>)
 800b840:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b842:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800b846:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b84a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b84e:	4a2b      	ldr	r2, [pc, #172]	@ (800b8fc <HAL_RCCEx_PeriphCLKConfig+0x1530>)
 800b850:	430b      	orrs	r3, r1
 800b852:	6553      	str	r3, [r2, #84]	@ 0x54
 800b854:	e003      	b.n	800b85e <HAL_RCCEx_PeriphCLKConfig+0x1492>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b856:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b85a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800b85e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b862:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b866:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800b86a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b86c:	2300      	movs	r3, #0
 800b86e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800b870:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800b874:	460b      	mov	r3, r1
 800b876:	4313      	orrs	r3, r2
 800b878:	d046      	beq.n	800b908 <HAL_RCCEx_PeriphCLKConfig+0x153c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));
 800b87a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b87e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b880:	2b00      	cmp	r3, #0
 800b882:	d00a      	beq.n	800b89a <HAL_RCCEx_PeriphCLKConfig+0x14ce>
 800b884:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b888:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b88a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b88e:	d004      	beq.n	800b89a <HAL_RCCEx_PeriphCLKConfig+0x14ce>
 800b890:	f240 5186 	movw	r1, #1414	@ 0x586
 800b894:	4818      	ldr	r0, [pc, #96]	@ (800b8f8 <HAL_RCCEx_PeriphCLKConfig+0x152c>)
 800b896:	f7f6 fd95 	bl	80023c4 <assert_failed>

    switch (PeriphClkInit->SdmmcClockSelection)
 800b89a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b89e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d003      	beq.n	800b8ac <HAL_RCCEx_PeriphCLKConfig+0x14e0>
 800b8a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b8a8:	d007      	beq.n	800b8ba <HAL_RCCEx_PeriphCLKConfig+0x14ee>
 800b8aa:	e011      	b.n	800b8d0 <HAL_RCCEx_PeriphCLKConfig+0x1504>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b8ac:	4b13      	ldr	r3, [pc, #76]	@ (800b8fc <HAL_RCCEx_PeriphCLKConfig+0x1530>)
 800b8ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b8b0:	4a12      	ldr	r2, [pc, #72]	@ (800b8fc <HAL_RCCEx_PeriphCLKConfig+0x1530>)
 800b8b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b8b6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800b8b8:	e00e      	b.n	800b8d8 <HAL_RCCEx_PeriphCLKConfig+0x150c>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b8ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b8be:	3308      	adds	r3, #8
 800b8c0:	2102      	movs	r1, #2
 800b8c2:	4618      	mov	r0, r3
 800b8c4:	f001 fb16 	bl	800cef4 <RCCEx_PLL2_Config>
 800b8c8:	4603      	mov	r3, r0
 800b8ca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800b8ce:	e003      	b.n	800b8d8 <HAL_RCCEx_PeriphCLKConfig+0x150c>

      default:
        ret = HAL_ERROR;
 800b8d0:	2301      	movs	r3, #1
 800b8d2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800b8d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b8d8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d10f      	bne.n	800b900 <HAL_RCCEx_PeriphCLKConfig+0x1534>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800b8e0:	4b06      	ldr	r3, [pc, #24]	@ (800b8fc <HAL_RCCEx_PeriphCLKConfig+0x1530>)
 800b8e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b8e4:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b8e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b8ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b8ee:	4a03      	ldr	r2, [pc, #12]	@ (800b8fc <HAL_RCCEx_PeriphCLKConfig+0x1530>)
 800b8f0:	430b      	orrs	r3, r1
 800b8f2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800b8f4:	e008      	b.n	800b908 <HAL_RCCEx_PeriphCLKConfig+0x153c>
 800b8f6:	bf00      	nop
 800b8f8:	08021664 	.word	0x08021664
 800b8fc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b900:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b904:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800b908:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b90c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b910:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800b914:	663b      	str	r3, [r7, #96]	@ 0x60
 800b916:	2300      	movs	r3, #0
 800b918:	667b      	str	r3, [r7, #100]	@ 0x64
 800b91a:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800b91e:	460b      	mov	r3, r1
 800b920:	4313      	orrs	r3, r2
 800b922:	d00c      	beq.n	800b93e <HAL_RCCEx_PeriphCLKConfig+0x1572>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b924:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b928:	3328      	adds	r3, #40	@ 0x28
 800b92a:	2102      	movs	r1, #2
 800b92c:	4618      	mov	r0, r3
 800b92e:	f001 fc03 	bl	800d138 <RCCEx_PLL3_Config>
 800b932:	4603      	mov	r3, r0
 800b934:	2b00      	cmp	r3, #0
 800b936:	d002      	beq.n	800b93e <HAL_RCCEx_PeriphCLKConfig+0x1572>
    {
      status = HAL_ERROR;
 800b938:	2301      	movs	r3, #1
 800b93a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800b93e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b942:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b946:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800b94a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b94c:	2300      	movs	r3, #0
 800b94e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b950:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800b954:	460b      	mov	r3, r1
 800b956:	4313      	orrs	r3, r2
 800b958:	d038      	beq.n	800b9cc <HAL_RCCEx_PeriphCLKConfig+0x1600>
  {

    switch (PeriphClkInit->RngClockSelection)
 800b95a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b95e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b960:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b964:	d018      	beq.n	800b998 <HAL_RCCEx_PeriphCLKConfig+0x15cc>
 800b966:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b96a:	d811      	bhi.n	800b990 <HAL_RCCEx_PeriphCLKConfig+0x15c4>
 800b96c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b970:	d014      	beq.n	800b99c <HAL_RCCEx_PeriphCLKConfig+0x15d0>
 800b972:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b976:	d80b      	bhi.n	800b990 <HAL_RCCEx_PeriphCLKConfig+0x15c4>
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d011      	beq.n	800b9a0 <HAL_RCCEx_PeriphCLKConfig+0x15d4>
 800b97c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b980:	d106      	bne.n	800b990 <HAL_RCCEx_PeriphCLKConfig+0x15c4>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b982:	4b0f      	ldr	r3, [pc, #60]	@ (800b9c0 <HAL_RCCEx_PeriphCLKConfig+0x15f4>)
 800b984:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b986:	4a0e      	ldr	r2, [pc, #56]	@ (800b9c0 <HAL_RCCEx_PeriphCLKConfig+0x15f4>)
 800b988:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b98c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800b98e:	e008      	b.n	800b9a2 <HAL_RCCEx_PeriphCLKConfig+0x15d6>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b990:	2301      	movs	r3, #1
 800b992:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800b996:	e004      	b.n	800b9a2 <HAL_RCCEx_PeriphCLKConfig+0x15d6>
        break;
 800b998:	bf00      	nop
 800b99a:	e002      	b.n	800b9a2 <HAL_RCCEx_PeriphCLKConfig+0x15d6>
        break;
 800b99c:	bf00      	nop
 800b99e:	e000      	b.n	800b9a2 <HAL_RCCEx_PeriphCLKConfig+0x15d6>
        break;
 800b9a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b9a2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d10c      	bne.n	800b9c4 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b9aa:	4b05      	ldr	r3, [pc, #20]	@ (800b9c0 <HAL_RCCEx_PeriphCLKConfig+0x15f4>)
 800b9ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b9ae:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800b9b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b9b6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b9b8:	4a01      	ldr	r2, [pc, #4]	@ (800b9c0 <HAL_RCCEx_PeriphCLKConfig+0x15f4>)
 800b9ba:	430b      	orrs	r3, r1
 800b9bc:	6553      	str	r3, [r2, #84]	@ 0x54
 800b9be:	e005      	b.n	800b9cc <HAL_RCCEx_PeriphCLKConfig+0x1600>
 800b9c0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b9c4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b9c8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800b9cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b9d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9d4:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800b9d8:	653b      	str	r3, [r7, #80]	@ 0x50
 800b9da:	2300      	movs	r3, #0
 800b9dc:	657b      	str	r3, [r7, #84]	@ 0x54
 800b9de:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800b9e2:	460b      	mov	r3, r1
 800b9e4:	4313      	orrs	r3, r2
 800b9e6:	d019      	beq.n	800ba1c <HAL_RCCEx_PeriphCLKConfig+0x1650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));
 800b9e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b9ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d00a      	beq.n	800ba08 <HAL_RCCEx_PeriphCLKConfig+0x163c>
 800b9f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b9f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b9f8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b9fc:	d004      	beq.n	800ba08 <HAL_RCCEx_PeriphCLKConfig+0x163c>
 800b9fe:	f240 51e5 	movw	r1, #1509	@ 0x5e5
 800ba02:	48c5      	ldr	r0, [pc, #788]	@ (800bd18 <HAL_RCCEx_PeriphCLKConfig+0x194c>)
 800ba04:	f7f6 fcde 	bl	80023c4 <assert_failed>

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800ba08:	4bc4      	ldr	r3, [pc, #784]	@ (800bd1c <HAL_RCCEx_PeriphCLKConfig+0x1950>)
 800ba0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ba0c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800ba10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ba14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ba16:	4ac1      	ldr	r2, [pc, #772]	@ (800bd1c <HAL_RCCEx_PeriphCLKConfig+0x1950>)
 800ba18:	430b      	orrs	r3, r1
 800ba1a:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800ba1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ba20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba24:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800ba28:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ba2a:	2300      	movs	r3, #0
 800ba2c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ba2e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800ba32:	460b      	mov	r3, r1
 800ba34:	4313      	orrs	r3, r2
 800ba36:	d019      	beq.n	800ba6c <HAL_RCCEx_PeriphCLKConfig+0x16a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));
 800ba38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ba3c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d00a      	beq.n	800ba58 <HAL_RCCEx_PeriphCLKConfig+0x168c>
 800ba42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ba46:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ba48:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ba4c:	d004      	beq.n	800ba58 <HAL_RCCEx_PeriphCLKConfig+0x168c>
 800ba4e:	f240 51f9 	movw	r1, #1529	@ 0x5f9
 800ba52:	48b1      	ldr	r0, [pc, #708]	@ (800bd18 <HAL_RCCEx_PeriphCLKConfig+0x194c>)
 800ba54:	f7f6 fcb6 	bl	80023c4 <assert_failed>

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800ba58:	4bb0      	ldr	r3, [pc, #704]	@ (800bd1c <HAL_RCCEx_PeriphCLKConfig+0x1950>)
 800ba5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ba5c:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800ba60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ba64:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ba66:	4aad      	ldr	r2, [pc, #692]	@ (800bd1c <HAL_RCCEx_PeriphCLKConfig+0x1950>)
 800ba68:	430b      	orrs	r3, r1
 800ba6a:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800ba6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ba70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba74:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800ba78:	643b      	str	r3, [r7, #64]	@ 0x40
 800ba7a:	2300      	movs	r3, #0
 800ba7c:	647b      	str	r3, [r7, #68]	@ 0x44
 800ba7e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800ba82:	460b      	mov	r3, r1
 800ba84:	4313      	orrs	r3, r2
 800ba86:	d020      	beq.n	800baca <HAL_RCCEx_PeriphCLKConfig+0x16fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
 800ba88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ba8c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d00b      	beq.n	800baac <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 800ba94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ba98:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800ba9c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800baa0:	d004      	beq.n	800baac <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 800baa2:	f240 610f 	movw	r1, #1551	@ 0x60f
 800baa6:	489c      	ldr	r0, [pc, #624]	@ (800bd18 <HAL_RCCEx_PeriphCLKConfig+0x194c>)
 800baa8:	f7f6 fc8c 	bl	80023c4 <assert_failed>

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800baac:	4b9b      	ldr	r3, [pc, #620]	@ (800bd1c <HAL_RCCEx_PeriphCLKConfig+0x1950>)
 800baae:	691b      	ldr	r3, [r3, #16]
 800bab0:	4a9a      	ldr	r2, [pc, #616]	@ (800bd1c <HAL_RCCEx_PeriphCLKConfig+0x1950>)
 800bab2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800bab6:	6113      	str	r3, [r2, #16]
 800bab8:	4b98      	ldr	r3, [pc, #608]	@ (800bd1c <HAL_RCCEx_PeriphCLKConfig+0x1950>)
 800baba:	6919      	ldr	r1, [r3, #16]
 800babc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bac0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800bac4:	4a95      	ldr	r2, [pc, #596]	@ (800bd1c <HAL_RCCEx_PeriphCLKConfig+0x1950>)
 800bac6:	430b      	orrs	r3, r1
 800bac8:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800baca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bace:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bad2:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800bad6:	63bb      	str	r3, [r7, #56]	@ 0x38
 800bad8:	2300      	movs	r3, #0
 800bada:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800badc:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800bae0:	460b      	mov	r3, r1
 800bae2:	4313      	orrs	r3, r2
 800bae4:	d01f      	beq.n	800bb26 <HAL_RCCEx_PeriphCLKConfig+0x175a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));
 800bae6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800baea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800baec:	2b00      	cmp	r3, #0
 800baee:	d010      	beq.n	800bb12 <HAL_RCCEx_PeriphCLKConfig+0x1746>
 800baf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800baf4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800baf6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bafa:	d00a      	beq.n	800bb12 <HAL_RCCEx_PeriphCLKConfig+0x1746>
 800bafc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bb00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bb02:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bb06:	d004      	beq.n	800bb12 <HAL_RCCEx_PeriphCLKConfig+0x1746>
 800bb08:	f240 6119 	movw	r1, #1561	@ 0x619
 800bb0c:	4882      	ldr	r0, [pc, #520]	@ (800bd18 <HAL_RCCEx_PeriphCLKConfig+0x194c>)
 800bb0e:	f7f6 fc59 	bl	80023c4 <assert_failed>

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800bb12:	4b82      	ldr	r3, [pc, #520]	@ (800bd1c <HAL_RCCEx_PeriphCLKConfig+0x1950>)
 800bb14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bb16:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800bb1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bb1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bb20:	4a7e      	ldr	r2, [pc, #504]	@ (800bd1c <HAL_RCCEx_PeriphCLKConfig+0x1950>)
 800bb22:	430b      	orrs	r3, r1
 800bb24:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800bb26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bb2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb2e:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800bb32:	633b      	str	r3, [r7, #48]	@ 0x30
 800bb34:	2300      	movs	r3, #0
 800bb36:	637b      	str	r3, [r7, #52]	@ 0x34
 800bb38:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800bb3c:	460b      	mov	r3, r1
 800bb3e:	4313      	orrs	r3, r2
 800bb40:	d023      	beq.n	800bb8a <HAL_RCCEx_PeriphCLKConfig+0x17be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
 800bb42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bb46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d012      	beq.n	800bb74 <HAL_RCCEx_PeriphCLKConfig+0x17a8>
 800bb4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bb52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bb56:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800bb5a:	d00b      	beq.n	800bb74 <HAL_RCCEx_PeriphCLKConfig+0x17a8>
 800bb5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bb60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bb64:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800bb68:	d004      	beq.n	800bb74 <HAL_RCCEx_PeriphCLKConfig+0x17a8>
 800bb6a:	f240 6123 	movw	r1, #1571	@ 0x623
 800bb6e:	486a      	ldr	r0, [pc, #424]	@ (800bd18 <HAL_RCCEx_PeriphCLKConfig+0x194c>)
 800bb70:	f7f6 fc28 	bl	80023c4 <assert_failed>

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800bb74:	4b69      	ldr	r3, [pc, #420]	@ (800bd1c <HAL_RCCEx_PeriphCLKConfig+0x1950>)
 800bb76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bb78:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800bb7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bb80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bb84:	4a65      	ldr	r2, [pc, #404]	@ (800bd1c <HAL_RCCEx_PeriphCLKConfig+0x1950>)
 800bb86:	430b      	orrs	r3, r1
 800bb88:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800bb8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bb8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb92:	2100      	movs	r1, #0
 800bb94:	62b9      	str	r1, [r7, #40]	@ 0x28
 800bb96:	f003 0301 	and.w	r3, r3, #1
 800bb9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bb9c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800bba0:	460b      	mov	r3, r1
 800bba2:	4313      	orrs	r3, r2
 800bba4:	d011      	beq.n	800bbca <HAL_RCCEx_PeriphCLKConfig+0x17fe>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bba6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bbaa:	3308      	adds	r3, #8
 800bbac:	2100      	movs	r1, #0
 800bbae:	4618      	mov	r0, r3
 800bbb0:	f001 f9a0 	bl	800cef4 <RCCEx_PLL2_Config>
 800bbb4:	4603      	mov	r3, r0
 800bbb6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800bbba:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d003      	beq.n	800bbca <HAL_RCCEx_PeriphCLKConfig+0x17fe>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bbc2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bbc6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800bbca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bbce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbd2:	2100      	movs	r1, #0
 800bbd4:	6239      	str	r1, [r7, #32]
 800bbd6:	f003 0302 	and.w	r3, r3, #2
 800bbda:	627b      	str	r3, [r7, #36]	@ 0x24
 800bbdc:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800bbe0:	460b      	mov	r3, r1
 800bbe2:	4313      	orrs	r3, r2
 800bbe4:	d011      	beq.n	800bc0a <HAL_RCCEx_PeriphCLKConfig+0x183e>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bbe6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bbea:	3308      	adds	r3, #8
 800bbec:	2101      	movs	r1, #1
 800bbee:	4618      	mov	r0, r3
 800bbf0:	f001 f980 	bl	800cef4 <RCCEx_PLL2_Config>
 800bbf4:	4603      	mov	r3, r0
 800bbf6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800bbfa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d003      	beq.n	800bc0a <HAL_RCCEx_PeriphCLKConfig+0x183e>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc02:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bc06:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800bc0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bc0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc12:	2100      	movs	r1, #0
 800bc14:	61b9      	str	r1, [r7, #24]
 800bc16:	f003 0304 	and.w	r3, r3, #4
 800bc1a:	61fb      	str	r3, [r7, #28]
 800bc1c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800bc20:	460b      	mov	r3, r1
 800bc22:	4313      	orrs	r3, r2
 800bc24:	d011      	beq.n	800bc4a <HAL_RCCEx_PeriphCLKConfig+0x187e>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800bc26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bc2a:	3308      	adds	r3, #8
 800bc2c:	2102      	movs	r1, #2
 800bc2e:	4618      	mov	r0, r3
 800bc30:	f001 f960 	bl	800cef4 <RCCEx_PLL2_Config>
 800bc34:	4603      	mov	r3, r0
 800bc36:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800bc3a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d003      	beq.n	800bc4a <HAL_RCCEx_PeriphCLKConfig+0x187e>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc42:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bc46:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800bc4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bc4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc52:	2100      	movs	r1, #0
 800bc54:	6139      	str	r1, [r7, #16]
 800bc56:	f003 0308 	and.w	r3, r3, #8
 800bc5a:	617b      	str	r3, [r7, #20]
 800bc5c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800bc60:	460b      	mov	r3, r1
 800bc62:	4313      	orrs	r3, r2
 800bc64:	d011      	beq.n	800bc8a <HAL_RCCEx_PeriphCLKConfig+0x18be>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800bc66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bc6a:	3328      	adds	r3, #40	@ 0x28
 800bc6c:	2100      	movs	r1, #0
 800bc6e:	4618      	mov	r0, r3
 800bc70:	f001 fa62 	bl	800d138 <RCCEx_PLL3_Config>
 800bc74:	4603      	mov	r3, r0
 800bc76:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 800bc7a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d003      	beq.n	800bc8a <HAL_RCCEx_PeriphCLKConfig+0x18be>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc82:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bc86:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800bc8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bc8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc92:	2100      	movs	r1, #0
 800bc94:	60b9      	str	r1, [r7, #8]
 800bc96:	f003 0310 	and.w	r3, r3, #16
 800bc9a:	60fb      	str	r3, [r7, #12]
 800bc9c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800bca0:	460b      	mov	r3, r1
 800bca2:	4313      	orrs	r3, r2
 800bca4:	d011      	beq.n	800bcca <HAL_RCCEx_PeriphCLKConfig+0x18fe>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bca6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bcaa:	3328      	adds	r3, #40	@ 0x28
 800bcac:	2101      	movs	r1, #1
 800bcae:	4618      	mov	r0, r3
 800bcb0:	f001 fa42 	bl	800d138 <RCCEx_PLL3_Config>
 800bcb4:	4603      	mov	r3, r0
 800bcb6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800bcba:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d003      	beq.n	800bcca <HAL_RCCEx_PeriphCLKConfig+0x18fe>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bcc2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bcc6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800bcca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bcce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcd2:	2100      	movs	r1, #0
 800bcd4:	6039      	str	r1, [r7, #0]
 800bcd6:	f003 0320 	and.w	r3, r3, #32
 800bcda:	607b      	str	r3, [r7, #4]
 800bcdc:	e9d7 1200 	ldrd	r1, r2, [r7]
 800bce0:	460b      	mov	r3, r1
 800bce2:	4313      	orrs	r3, r2
 800bce4:	d011      	beq.n	800bd0a <HAL_RCCEx_PeriphCLKConfig+0x193e>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bce6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bcea:	3328      	adds	r3, #40	@ 0x28
 800bcec:	2102      	movs	r1, #2
 800bcee:	4618      	mov	r0, r3
 800bcf0:	f001 fa22 	bl	800d138 <RCCEx_PLL3_Config>
 800bcf4:	4603      	mov	r3, r0
 800bcf6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800bcfa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d003      	beq.n	800bd0a <HAL_RCCEx_PeriphCLKConfig+0x193e>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd02:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bd06:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 800bd0a:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d106      	bne.n	800bd20 <HAL_RCCEx_PeriphCLKConfig+0x1954>
  {
    return HAL_OK;
 800bd12:	2300      	movs	r3, #0
 800bd14:	e005      	b.n	800bd22 <HAL_RCCEx_PeriphCLKConfig+0x1956>
 800bd16:	bf00      	nop
 800bd18:	08021664 	.word	0x08021664
 800bd1c:	58024400 	.word	0x58024400
  }
  return HAL_ERROR;
 800bd20:	2301      	movs	r3, #1
}
 800bd22:	4618      	mov	r0, r3
 800bd24:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 800bd28:	46bd      	mov	sp, r7
 800bd2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bd2e:	bf00      	nop

0800bd30 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800bd30:	b580      	push	{r7, lr}
 800bd32:	b090      	sub	sp, #64	@ 0x40
 800bd34:	af00      	add	r7, sp, #0
 800bd36:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800bd3a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bd3e:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800bd42:	430b      	orrs	r3, r1
 800bd44:	f040 8094 	bne.w	800be70 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800bd48:	4b9b      	ldr	r3, [pc, #620]	@ (800bfb8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bd4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bd4c:	f003 0307 	and.w	r3, r3, #7
 800bd50:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800bd52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd54:	2b04      	cmp	r3, #4
 800bd56:	f200 8087 	bhi.w	800be68 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800bd5a:	a201      	add	r2, pc, #4	@ (adr r2, 800bd60 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800bd5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd60:	0800bd75 	.word	0x0800bd75
 800bd64:	0800bd9d 	.word	0x0800bd9d
 800bd68:	0800bdc5 	.word	0x0800bdc5
 800bd6c:	0800be61 	.word	0x0800be61
 800bd70:	0800bded 	.word	0x0800bded
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bd74:	4b90      	ldr	r3, [pc, #576]	@ (800bfb8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bd7c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800bd80:	d108      	bne.n	800bd94 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bd82:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800bd86:	4618      	mov	r0, r3
 800bd88:	f000 ff62 	bl	800cc50 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bd8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bd90:	f000 bc93 	b.w	800c6ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bd94:	2300      	movs	r3, #0
 800bd96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bd98:	f000 bc8f 	b.w	800c6ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bd9c:	4b86      	ldr	r3, [pc, #536]	@ (800bfb8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800bda4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800bda8:	d108      	bne.n	800bdbc <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bdaa:	f107 0318 	add.w	r3, r7, #24
 800bdae:	4618      	mov	r0, r3
 800bdb0:	f000 fca6 	bl	800c700 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800bdb4:	69bb      	ldr	r3, [r7, #24]
 800bdb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bdb8:	f000 bc7f 	b.w	800c6ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bdbc:	2300      	movs	r3, #0
 800bdbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bdc0:	f000 bc7b 	b.w	800c6ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bdc4:	4b7c      	ldr	r3, [pc, #496]	@ (800bfb8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800bdcc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bdd0:	d108      	bne.n	800bde4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bdd2:	f107 030c 	add.w	r3, r7, #12
 800bdd6:	4618      	mov	r0, r3
 800bdd8:	f000 fde6 	bl	800c9a8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bde0:	f000 bc6b 	b.w	800c6ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bde4:	2300      	movs	r3, #0
 800bde6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bde8:	f000 bc67 	b.w	800c6ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800bdec:	4b72      	ldr	r3, [pc, #456]	@ (800bfb8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bdee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bdf0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800bdf4:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bdf6:	4b70      	ldr	r3, [pc, #448]	@ (800bfb8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	f003 0304 	and.w	r3, r3, #4
 800bdfe:	2b04      	cmp	r3, #4
 800be00:	d10c      	bne.n	800be1c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800be02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800be04:	2b00      	cmp	r3, #0
 800be06:	d109      	bne.n	800be1c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800be08:	4b6b      	ldr	r3, [pc, #428]	@ (800bfb8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	08db      	lsrs	r3, r3, #3
 800be0e:	f003 0303 	and.w	r3, r3, #3
 800be12:	4a6a      	ldr	r2, [pc, #424]	@ (800bfbc <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800be14:	fa22 f303 	lsr.w	r3, r2, r3
 800be18:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800be1a:	e01f      	b.n	800be5c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800be1c:	4b66      	ldr	r3, [pc, #408]	@ (800bfb8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800be24:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800be28:	d106      	bne.n	800be38 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800be2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800be2c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800be30:	d102      	bne.n	800be38 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800be32:	4b63      	ldr	r3, [pc, #396]	@ (800bfc0 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800be34:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800be36:	e011      	b.n	800be5c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800be38:	4b5f      	ldr	r3, [pc, #380]	@ (800bfb8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800be40:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800be44:	d106      	bne.n	800be54 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800be46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800be48:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800be4c:	d102      	bne.n	800be54 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800be4e:	4b5d      	ldr	r3, [pc, #372]	@ (800bfc4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800be50:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800be52:	e003      	b.n	800be5c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800be54:	2300      	movs	r3, #0
 800be56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800be58:	f000 bc2f 	b.w	800c6ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800be5c:	f000 bc2d 	b.w	800c6ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800be60:	4b59      	ldr	r3, [pc, #356]	@ (800bfc8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800be62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800be64:	f000 bc29 	b.w	800c6ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800be68:	2300      	movs	r3, #0
 800be6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800be6c:	f000 bc25 	b.w	800c6ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800be70:	e9d7 2300 	ldrd	r2, r3, [r7]
 800be74:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800be78:	430b      	orrs	r3, r1
 800be7a:	f040 80a7 	bne.w	800bfcc <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800be7e:	4b4e      	ldr	r3, [pc, #312]	@ (800bfb8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800be80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800be82:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800be86:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800be88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be8a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800be8e:	d054      	beq.n	800bf3a <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800be90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be92:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800be96:	f200 808b 	bhi.w	800bfb0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800be9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be9c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800bea0:	f000 8083 	beq.w	800bfaa <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 800bea4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bea6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800beaa:	f200 8081 	bhi.w	800bfb0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800beae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800beb0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800beb4:	d02f      	beq.n	800bf16 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800beb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800beb8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800bebc:	d878      	bhi.n	800bfb0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800bebe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d004      	beq.n	800bece <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 800bec4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bec6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800beca:	d012      	beq.n	800bef2 <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 800becc:	e070      	b.n	800bfb0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bece:	4b3a      	ldr	r3, [pc, #232]	@ (800bfb8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bed6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800beda:	d107      	bne.n	800beec <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bedc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800bee0:	4618      	mov	r0, r3
 800bee2:	f000 feb5 	bl	800cc50 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bee6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bee8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800beea:	e3e6      	b.n	800c6ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800beec:	2300      	movs	r3, #0
 800beee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bef0:	e3e3      	b.n	800c6ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bef2:	4b31      	ldr	r3, [pc, #196]	@ (800bfb8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800befa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800befe:	d107      	bne.n	800bf10 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bf00:	f107 0318 	add.w	r3, r7, #24
 800bf04:	4618      	mov	r0, r3
 800bf06:	f000 fbfb 	bl	800c700 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800bf0a:	69bb      	ldr	r3, [r7, #24]
 800bf0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bf0e:	e3d4      	b.n	800c6ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bf10:	2300      	movs	r3, #0
 800bf12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bf14:	e3d1      	b.n	800c6ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bf16:	4b28      	ldr	r3, [pc, #160]	@ (800bfb8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800bf1e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bf22:	d107      	bne.n	800bf34 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bf24:	f107 030c 	add.w	r3, r7, #12
 800bf28:	4618      	mov	r0, r3
 800bf2a:	f000 fd3d 	bl	800c9a8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bf32:	e3c2      	b.n	800c6ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bf34:	2300      	movs	r3, #0
 800bf36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bf38:	e3bf      	b.n	800c6ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800bf3a:	4b1f      	ldr	r3, [pc, #124]	@ (800bfb8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bf3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bf3e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800bf42:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bf44:	4b1c      	ldr	r3, [pc, #112]	@ (800bfb8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	f003 0304 	and.w	r3, r3, #4
 800bf4c:	2b04      	cmp	r3, #4
 800bf4e:	d10c      	bne.n	800bf6a <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 800bf50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d109      	bne.n	800bf6a <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bf56:	4b18      	ldr	r3, [pc, #96]	@ (800bfb8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	08db      	lsrs	r3, r3, #3
 800bf5c:	f003 0303 	and.w	r3, r3, #3
 800bf60:	4a16      	ldr	r2, [pc, #88]	@ (800bfbc <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800bf62:	fa22 f303 	lsr.w	r3, r2, r3
 800bf66:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bf68:	e01e      	b.n	800bfa8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bf6a:	4b13      	ldr	r3, [pc, #76]	@ (800bfb8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bf72:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bf76:	d106      	bne.n	800bf86 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 800bf78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bf7a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bf7e:	d102      	bne.n	800bf86 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800bf80:	4b0f      	ldr	r3, [pc, #60]	@ (800bfc0 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800bf82:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bf84:	e010      	b.n	800bfa8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bf86:	4b0c      	ldr	r3, [pc, #48]	@ (800bfb8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bf8e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bf92:	d106      	bne.n	800bfa2 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800bf94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bf96:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bf9a:	d102      	bne.n	800bfa2 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800bf9c:	4b09      	ldr	r3, [pc, #36]	@ (800bfc4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bf9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bfa0:	e002      	b.n	800bfa8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800bfa2:	2300      	movs	r3, #0
 800bfa4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800bfa6:	e388      	b.n	800c6ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800bfa8:	e387      	b.n	800c6ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800bfaa:	4b07      	ldr	r3, [pc, #28]	@ (800bfc8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800bfac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bfae:	e384      	b.n	800c6ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800bfb0:	2300      	movs	r3, #0
 800bfb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bfb4:	e381      	b.n	800c6ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800bfb6:	bf00      	nop
 800bfb8:	58024400 	.word	0x58024400
 800bfbc:	03d09000 	.word	0x03d09000
 800bfc0:	003d0900 	.word	0x003d0900
 800bfc4:	017d7840 	.word	0x017d7840
 800bfc8:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800bfcc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bfd0:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800bfd4:	430b      	orrs	r3, r1
 800bfd6:	f040 809c 	bne.w	800c112 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800bfda:	4b9e      	ldr	r3, [pc, #632]	@ (800c254 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bfdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bfde:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800bfe2:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800bfe4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bfe6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800bfea:	d054      	beq.n	800c096 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 800bfec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bfee:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800bff2:	f200 808b 	bhi.w	800c10c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800bff6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bff8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800bffc:	f000 8083 	beq.w	800c106 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 800c000:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c002:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800c006:	f200 8081 	bhi.w	800c10c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800c00a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c00c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c010:	d02f      	beq.n	800c072 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800c012:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c014:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c018:	d878      	bhi.n	800c10c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800c01a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d004      	beq.n	800c02a <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800c020:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c022:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c026:	d012      	beq.n	800c04e <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800c028:	e070      	b.n	800c10c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c02a:	4b8a      	ldr	r3, [pc, #552]	@ (800c254 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c032:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c036:	d107      	bne.n	800c048 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c038:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c03c:	4618      	mov	r0, r3
 800c03e:	f000 fe07 	bl	800cc50 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c042:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c044:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c046:	e338      	b.n	800c6ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c048:	2300      	movs	r3, #0
 800c04a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c04c:	e335      	b.n	800c6ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c04e:	4b81      	ldr	r3, [pc, #516]	@ (800c254 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c056:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c05a:	d107      	bne.n	800c06c <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c05c:	f107 0318 	add.w	r3, r7, #24
 800c060:	4618      	mov	r0, r3
 800c062:	f000 fb4d 	bl	800c700 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c066:	69bb      	ldr	r3, [r7, #24]
 800c068:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c06a:	e326      	b.n	800c6ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c06c:	2300      	movs	r3, #0
 800c06e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c070:	e323      	b.n	800c6ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c072:	4b78      	ldr	r3, [pc, #480]	@ (800c254 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c07a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c07e:	d107      	bne.n	800c090 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c080:	f107 030c 	add.w	r3, r7, #12
 800c084:	4618      	mov	r0, r3
 800c086:	f000 fc8f 	bl	800c9a8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c08e:	e314      	b.n	800c6ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c090:	2300      	movs	r3, #0
 800c092:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c094:	e311      	b.n	800c6ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c096:	4b6f      	ldr	r3, [pc, #444]	@ (800c254 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c098:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c09a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800c09e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c0a0:	4b6c      	ldr	r3, [pc, #432]	@ (800c254 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	f003 0304 	and.w	r3, r3, #4
 800c0a8:	2b04      	cmp	r3, #4
 800c0aa:	d10c      	bne.n	800c0c6 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800c0ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d109      	bne.n	800c0c6 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c0b2:	4b68      	ldr	r3, [pc, #416]	@ (800c254 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	08db      	lsrs	r3, r3, #3
 800c0b8:	f003 0303 	and.w	r3, r3, #3
 800c0bc:	4a66      	ldr	r2, [pc, #408]	@ (800c258 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800c0be:	fa22 f303 	lsr.w	r3, r2, r3
 800c0c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c0c4:	e01e      	b.n	800c104 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c0c6:	4b63      	ldr	r3, [pc, #396]	@ (800c254 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c0ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c0d2:	d106      	bne.n	800c0e2 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800c0d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c0d6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c0da:	d102      	bne.n	800c0e2 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c0dc:	4b5f      	ldr	r3, [pc, #380]	@ (800c25c <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800c0de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c0e0:	e010      	b.n	800c104 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c0e2:	4b5c      	ldr	r3, [pc, #368]	@ (800c254 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c0ea:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c0ee:	d106      	bne.n	800c0fe <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 800c0f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c0f2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c0f6:	d102      	bne.n	800c0fe <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c0f8:	4b59      	ldr	r3, [pc, #356]	@ (800c260 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c0fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c0fc:	e002      	b.n	800c104 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c0fe:	2300      	movs	r3, #0
 800c100:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800c102:	e2da      	b.n	800c6ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c104:	e2d9      	b.n	800c6ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c106:	4b57      	ldr	r3, [pc, #348]	@ (800c264 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800c108:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c10a:	e2d6      	b.n	800c6ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800c10c:	2300      	movs	r3, #0
 800c10e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c110:	e2d3      	b.n	800c6ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800c112:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c116:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800c11a:	430b      	orrs	r3, r1
 800c11c:	f040 80a7 	bne.w	800c26e <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800c120:	4b4c      	ldr	r3, [pc, #304]	@ (800c254 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c122:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c124:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800c128:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800c12a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c12c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c130:	d055      	beq.n	800c1de <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800c132:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c134:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c138:	f200 8096 	bhi.w	800c268 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800c13c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c13e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800c142:	f000 8084 	beq.w	800c24e <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800c146:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c148:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800c14c:	f200 808c 	bhi.w	800c268 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800c150:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c152:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c156:	d030      	beq.n	800c1ba <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800c158:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c15a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c15e:	f200 8083 	bhi.w	800c268 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800c162:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c164:	2b00      	cmp	r3, #0
 800c166:	d004      	beq.n	800c172 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 800c168:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c16a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c16e:	d012      	beq.n	800c196 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800c170:	e07a      	b.n	800c268 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c172:	4b38      	ldr	r3, [pc, #224]	@ (800c254 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c17a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c17e:	d107      	bne.n	800c190 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c180:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c184:	4618      	mov	r0, r3
 800c186:	f000 fd63 	bl	800cc50 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c18a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c18c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c18e:	e294      	b.n	800c6ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c190:	2300      	movs	r3, #0
 800c192:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c194:	e291      	b.n	800c6ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c196:	4b2f      	ldr	r3, [pc, #188]	@ (800c254 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c19e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c1a2:	d107      	bne.n	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c1a4:	f107 0318 	add.w	r3, r7, #24
 800c1a8:	4618      	mov	r0, r3
 800c1aa:	f000 faa9 	bl	800c700 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c1ae:	69bb      	ldr	r3, [r7, #24]
 800c1b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c1b2:	e282      	b.n	800c6ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c1b4:	2300      	movs	r3, #0
 800c1b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c1b8:	e27f      	b.n	800c6ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c1ba:	4b26      	ldr	r3, [pc, #152]	@ (800c254 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c1c2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c1c6:	d107      	bne.n	800c1d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c1c8:	f107 030c 	add.w	r3, r7, #12
 800c1cc:	4618      	mov	r0, r3
 800c1ce:	f000 fbeb 	bl	800c9a8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c1d2:	68fb      	ldr	r3, [r7, #12]
 800c1d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c1d6:	e270      	b.n	800c6ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c1d8:	2300      	movs	r3, #0
 800c1da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c1dc:	e26d      	b.n	800c6ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c1de:	4b1d      	ldr	r3, [pc, #116]	@ (800c254 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c1e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c1e2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800c1e6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c1e8:	4b1a      	ldr	r3, [pc, #104]	@ (800c254 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	f003 0304 	and.w	r3, r3, #4
 800c1f0:	2b04      	cmp	r3, #4
 800c1f2:	d10c      	bne.n	800c20e <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 800c1f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d109      	bne.n	800c20e <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c1fa:	4b16      	ldr	r3, [pc, #88]	@ (800c254 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	08db      	lsrs	r3, r3, #3
 800c200:	f003 0303 	and.w	r3, r3, #3
 800c204:	4a14      	ldr	r2, [pc, #80]	@ (800c258 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800c206:	fa22 f303 	lsr.w	r3, r2, r3
 800c20a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c20c:	e01e      	b.n	800c24c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c20e:	4b11      	ldr	r3, [pc, #68]	@ (800c254 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c216:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c21a:	d106      	bne.n	800c22a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800c21c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c21e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c222:	d102      	bne.n	800c22a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c224:	4b0d      	ldr	r3, [pc, #52]	@ (800c25c <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800c226:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c228:	e010      	b.n	800c24c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c22a:	4b0a      	ldr	r3, [pc, #40]	@ (800c254 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c232:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c236:	d106      	bne.n	800c246 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800c238:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c23a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c23e:	d102      	bne.n	800c246 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c240:	4b07      	ldr	r3, [pc, #28]	@ (800c260 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c242:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c244:	e002      	b.n	800c24c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c246:	2300      	movs	r3, #0
 800c248:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800c24a:	e236      	b.n	800c6ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c24c:	e235      	b.n	800c6ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c24e:	4b05      	ldr	r3, [pc, #20]	@ (800c264 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800c250:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c252:	e232      	b.n	800c6ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c254:	58024400 	.word	0x58024400
 800c258:	03d09000 	.word	0x03d09000
 800c25c:	003d0900 	.word	0x003d0900
 800c260:	017d7840 	.word	0x017d7840
 800c264:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800c268:	2300      	movs	r3, #0
 800c26a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c26c:	e225      	b.n	800c6ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800c26e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c272:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800c276:	430b      	orrs	r3, r1
 800c278:	f040 8085 	bne.w	800c386 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800c27c:	4b9c      	ldr	r3, [pc, #624]	@ (800c4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c27e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c280:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800c284:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800c286:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c288:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800c28c:	d06b      	beq.n	800c366 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800c28e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c290:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800c294:	d874      	bhi.n	800c380 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800c296:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c298:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800c29c:	d056      	beq.n	800c34c <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800c29e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c2a0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800c2a4:	d86c      	bhi.n	800c380 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800c2a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c2a8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800c2ac:	d03b      	beq.n	800c326 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800c2ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c2b0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800c2b4:	d864      	bhi.n	800c380 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800c2b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c2b8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c2bc:	d021      	beq.n	800c302 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800c2be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c2c0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c2c4:	d85c      	bhi.n	800c380 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800c2c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d004      	beq.n	800c2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 800c2cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c2ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c2d2:	d004      	beq.n	800c2de <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 800c2d4:	e054      	b.n	800c380 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800c2d6:	f7fe f80b 	bl	800a2f0 <HAL_RCC_GetPCLK1Freq>
 800c2da:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c2dc:	e1ed      	b.n	800c6ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c2de:	4b84      	ldr	r3, [pc, #528]	@ (800c4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c2e6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c2ea:	d107      	bne.n	800c2fc <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c2ec:	f107 0318 	add.w	r3, r7, #24
 800c2f0:	4618      	mov	r0, r3
 800c2f2:	f000 fa05 	bl	800c700 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c2f6:	69fb      	ldr	r3, [r7, #28]
 800c2f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c2fa:	e1de      	b.n	800c6ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c2fc:	2300      	movs	r3, #0
 800c2fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c300:	e1db      	b.n	800c6ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c302:	4b7b      	ldr	r3, [pc, #492]	@ (800c4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c30a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c30e:	d107      	bne.n	800c320 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c310:	f107 030c 	add.w	r3, r7, #12
 800c314:	4618      	mov	r0, r3
 800c316:	f000 fb47 	bl	800c9a8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800c31a:	693b      	ldr	r3, [r7, #16]
 800c31c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c31e:	e1cc      	b.n	800c6ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c320:	2300      	movs	r3, #0
 800c322:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c324:	e1c9      	b.n	800c6ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c326:	4b72      	ldr	r3, [pc, #456]	@ (800c4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	f003 0304 	and.w	r3, r3, #4
 800c32e:	2b04      	cmp	r3, #4
 800c330:	d109      	bne.n	800c346 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c332:	4b6f      	ldr	r3, [pc, #444]	@ (800c4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	08db      	lsrs	r3, r3, #3
 800c338:	f003 0303 	and.w	r3, r3, #3
 800c33c:	4a6d      	ldr	r2, [pc, #436]	@ (800c4f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800c33e:	fa22 f303 	lsr.w	r3, r2, r3
 800c342:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c344:	e1b9      	b.n	800c6ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c346:	2300      	movs	r3, #0
 800c348:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c34a:	e1b6      	b.n	800c6ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800c34c:	4b68      	ldr	r3, [pc, #416]	@ (800c4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c354:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c358:	d102      	bne.n	800c360 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 800c35a:	4b67      	ldr	r3, [pc, #412]	@ (800c4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800c35c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c35e:	e1ac      	b.n	800c6ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c360:	2300      	movs	r3, #0
 800c362:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c364:	e1a9      	b.n	800c6ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c366:	4b62      	ldr	r3, [pc, #392]	@ (800c4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c36e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c372:	d102      	bne.n	800c37a <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 800c374:	4b61      	ldr	r3, [pc, #388]	@ (800c4fc <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800c376:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c378:	e19f      	b.n	800c6ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c37a:	2300      	movs	r3, #0
 800c37c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c37e:	e19c      	b.n	800c6ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800c380:	2300      	movs	r3, #0
 800c382:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c384:	e199      	b.n	800c6ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800c386:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c38a:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800c38e:	430b      	orrs	r3, r1
 800c390:	d173      	bne.n	800c47a <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800c392:	4b57      	ldr	r3, [pc, #348]	@ (800c4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c394:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c396:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800c39a:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800c39c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c39e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c3a2:	d02f      	beq.n	800c404 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 800c3a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c3a6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c3aa:	d863      	bhi.n	800c474 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 800c3ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	d004      	beq.n	800c3bc <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800c3b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c3b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c3b8:	d012      	beq.n	800c3e0 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 800c3ba:	e05b      	b.n	800c474 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c3bc:	4b4c      	ldr	r3, [pc, #304]	@ (800c4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c3c4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c3c8:	d107      	bne.n	800c3da <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c3ca:	f107 0318 	add.w	r3, r7, #24
 800c3ce:	4618      	mov	r0, r3
 800c3d0:	f000 f996 	bl	800c700 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c3d4:	69bb      	ldr	r3, [r7, #24]
 800c3d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c3d8:	e16f      	b.n	800c6ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c3da:	2300      	movs	r3, #0
 800c3dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c3de:	e16c      	b.n	800c6ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c3e0:	4b43      	ldr	r3, [pc, #268]	@ (800c4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c3e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c3ec:	d107      	bne.n	800c3fe <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c3ee:	f107 030c 	add.w	r3, r7, #12
 800c3f2:	4618      	mov	r0, r3
 800c3f4:	f000 fad8 	bl	800c9a8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800c3f8:	697b      	ldr	r3, [r7, #20]
 800c3fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c3fc:	e15d      	b.n	800c6ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c3fe:	2300      	movs	r3, #0
 800c400:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c402:	e15a      	b.n	800c6ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c404:	4b3a      	ldr	r3, [pc, #232]	@ (800c4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c406:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c408:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800c40c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c40e:	4b38      	ldr	r3, [pc, #224]	@ (800c4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	f003 0304 	and.w	r3, r3, #4
 800c416:	2b04      	cmp	r3, #4
 800c418:	d10c      	bne.n	800c434 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800c41a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d109      	bne.n	800c434 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c420:	4b33      	ldr	r3, [pc, #204]	@ (800c4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	08db      	lsrs	r3, r3, #3
 800c426:	f003 0303 	and.w	r3, r3, #3
 800c42a:	4a32      	ldr	r2, [pc, #200]	@ (800c4f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800c42c:	fa22 f303 	lsr.w	r3, r2, r3
 800c430:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c432:	e01e      	b.n	800c472 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c434:	4b2e      	ldr	r3, [pc, #184]	@ (800c4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c43c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c440:	d106      	bne.n	800c450 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800c442:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c444:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c448:	d102      	bne.n	800c450 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c44a:	4b2b      	ldr	r3, [pc, #172]	@ (800c4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800c44c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c44e:	e010      	b.n	800c472 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c450:	4b27      	ldr	r3, [pc, #156]	@ (800c4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c458:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c45c:	d106      	bne.n	800c46c <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800c45e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c460:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c464:	d102      	bne.n	800c46c <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c466:	4b25      	ldr	r3, [pc, #148]	@ (800c4fc <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800c468:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c46a:	e002      	b.n	800c472 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c46c:	2300      	movs	r3, #0
 800c46e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800c470:	e123      	b.n	800c6ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c472:	e122      	b.n	800c6ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800c474:	2300      	movs	r3, #0
 800c476:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c478:	e11f      	b.n	800c6ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800c47a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c47e:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800c482:	430b      	orrs	r3, r1
 800c484:	d13c      	bne.n	800c500 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800c486:	4b1a      	ldr	r3, [pc, #104]	@ (800c4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c488:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c48a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c48e:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800c490:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c492:	2b00      	cmp	r3, #0
 800c494:	d004      	beq.n	800c4a0 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800c496:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c498:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c49c:	d012      	beq.n	800c4c4 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800c49e:	e023      	b.n	800c4e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c4a0:	4b13      	ldr	r3, [pc, #76]	@ (800c4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c4a8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c4ac:	d107      	bne.n	800c4be <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c4ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c4b2:	4618      	mov	r0, r3
 800c4b4:	f000 fbcc 	bl	800cc50 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c4b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c4bc:	e0fd      	b.n	800c6ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c4be:	2300      	movs	r3, #0
 800c4c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c4c2:	e0fa      	b.n	800c6ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c4c4:	4b0a      	ldr	r3, [pc, #40]	@ (800c4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c4cc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c4d0:	d107      	bne.n	800c4e2 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c4d2:	f107 0318 	add.w	r3, r7, #24
 800c4d6:	4618      	mov	r0, r3
 800c4d8:	f000 f912 	bl	800c700 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800c4dc:	6a3b      	ldr	r3, [r7, #32]
 800c4de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c4e0:	e0eb      	b.n	800c6ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c4e2:	2300      	movs	r3, #0
 800c4e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c4e6:	e0e8      	b.n	800c6ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800c4e8:	2300      	movs	r3, #0
 800c4ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c4ec:	e0e5      	b.n	800c6ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c4ee:	bf00      	nop
 800c4f0:	58024400 	.word	0x58024400
 800c4f4:	03d09000 	.word	0x03d09000
 800c4f8:	003d0900 	.word	0x003d0900
 800c4fc:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800c500:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c504:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800c508:	430b      	orrs	r3, r1
 800c50a:	f040 8085 	bne.w	800c618 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800c50e:	4b6d      	ldr	r3, [pc, #436]	@ (800c6c4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c510:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c512:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800c516:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800c518:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c51a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c51e:	d06b      	beq.n	800c5f8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800c520:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c522:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c526:	d874      	bhi.n	800c612 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800c528:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c52a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c52e:	d056      	beq.n	800c5de <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800c530:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c532:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c536:	d86c      	bhi.n	800c612 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800c538:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c53a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800c53e:	d03b      	beq.n	800c5b8 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 800c540:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c542:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800c546:	d864      	bhi.n	800c612 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800c548:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c54a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c54e:	d021      	beq.n	800c594 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800c550:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c552:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c556:	d85c      	bhi.n	800c612 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800c558:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d004      	beq.n	800c568 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800c55e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c560:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c564:	d004      	beq.n	800c570 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800c566:	e054      	b.n	800c612 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800c568:	f000 f8b4 	bl	800c6d4 <HAL_RCCEx_GetD3PCLK1Freq>
 800c56c:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c56e:	e0a4      	b.n	800c6ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c570:	4b54      	ldr	r3, [pc, #336]	@ (800c6c4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c578:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c57c:	d107      	bne.n	800c58e <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c57e:	f107 0318 	add.w	r3, r7, #24
 800c582:	4618      	mov	r0, r3
 800c584:	f000 f8bc 	bl	800c700 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c588:	69fb      	ldr	r3, [r7, #28]
 800c58a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c58c:	e095      	b.n	800c6ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c58e:	2300      	movs	r3, #0
 800c590:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c592:	e092      	b.n	800c6ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c594:	4b4b      	ldr	r3, [pc, #300]	@ (800c6c4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c59c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c5a0:	d107      	bne.n	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c5a2:	f107 030c 	add.w	r3, r7, #12
 800c5a6:	4618      	mov	r0, r3
 800c5a8:	f000 f9fe 	bl	800c9a8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800c5ac:	693b      	ldr	r3, [r7, #16]
 800c5ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c5b0:	e083      	b.n	800c6ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c5b2:	2300      	movs	r3, #0
 800c5b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c5b6:	e080      	b.n	800c6ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c5b8:	4b42      	ldr	r3, [pc, #264]	@ (800c6c4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	f003 0304 	and.w	r3, r3, #4
 800c5c0:	2b04      	cmp	r3, #4
 800c5c2:	d109      	bne.n	800c5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c5c4:	4b3f      	ldr	r3, [pc, #252]	@ (800c6c4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	08db      	lsrs	r3, r3, #3
 800c5ca:	f003 0303 	and.w	r3, r3, #3
 800c5ce:	4a3e      	ldr	r2, [pc, #248]	@ (800c6c8 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800c5d0:	fa22 f303 	lsr.w	r3, r2, r3
 800c5d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c5d6:	e070      	b.n	800c6ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c5d8:	2300      	movs	r3, #0
 800c5da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c5dc:	e06d      	b.n	800c6ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800c5de:	4b39      	ldr	r3, [pc, #228]	@ (800c6c4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c5e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c5ea:	d102      	bne.n	800c5f2 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 800c5ec:	4b37      	ldr	r3, [pc, #220]	@ (800c6cc <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800c5ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c5f0:	e063      	b.n	800c6ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c5f2:	2300      	movs	r3, #0
 800c5f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c5f6:	e060      	b.n	800c6ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c5f8:	4b32      	ldr	r3, [pc, #200]	@ (800c6c4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c600:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c604:	d102      	bne.n	800c60c <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800c606:	4b32      	ldr	r3, [pc, #200]	@ (800c6d0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800c608:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c60a:	e056      	b.n	800c6ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c60c:	2300      	movs	r3, #0
 800c60e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c610:	e053      	b.n	800c6ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800c612:	2300      	movs	r3, #0
 800c614:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c616:	e050      	b.n	800c6ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800c618:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c61c:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800c620:	430b      	orrs	r3, r1
 800c622:	d148      	bne.n	800c6b6 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800c624:	4b27      	ldr	r3, [pc, #156]	@ (800c6c4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c626:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c628:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800c62c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800c62e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c630:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c634:	d02a      	beq.n	800c68c <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800c636:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c638:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c63c:	d838      	bhi.n	800c6b0 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800c63e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c640:	2b00      	cmp	r3, #0
 800c642:	d004      	beq.n	800c64e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800c644:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c646:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c64a:	d00d      	beq.n	800c668 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800c64c:	e030      	b.n	800c6b0 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c64e:	4b1d      	ldr	r3, [pc, #116]	@ (800c6c4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c656:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c65a:	d102      	bne.n	800c662 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 800c65c:	4b1c      	ldr	r3, [pc, #112]	@ (800c6d0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800c65e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c660:	e02b      	b.n	800c6ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c662:	2300      	movs	r3, #0
 800c664:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c666:	e028      	b.n	800c6ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c668:	4b16      	ldr	r3, [pc, #88]	@ (800c6c4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c670:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c674:	d107      	bne.n	800c686 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c676:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c67a:	4618      	mov	r0, r3
 800c67c:	f000 fae8 	bl	800cc50 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c680:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c682:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c684:	e019      	b.n	800c6ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c686:	2300      	movs	r3, #0
 800c688:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c68a:	e016      	b.n	800c6ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c68c:	4b0d      	ldr	r3, [pc, #52]	@ (800c6c4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c694:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c698:	d107      	bne.n	800c6aa <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c69a:	f107 0318 	add.w	r3, r7, #24
 800c69e:	4618      	mov	r0, r3
 800c6a0:	f000 f82e 	bl	800c700 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c6a4:	69fb      	ldr	r3, [r7, #28]
 800c6a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c6a8:	e007      	b.n	800c6ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c6aa:	2300      	movs	r3, #0
 800c6ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c6ae:	e004      	b.n	800c6ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800c6b0:	2300      	movs	r3, #0
 800c6b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c6b4:	e001      	b.n	800c6ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800c6b6:	2300      	movs	r3, #0
 800c6b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800c6ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800c6bc:	4618      	mov	r0, r3
 800c6be:	3740      	adds	r7, #64	@ 0x40
 800c6c0:	46bd      	mov	sp, r7
 800c6c2:	bd80      	pop	{r7, pc}
 800c6c4:	58024400 	.word	0x58024400
 800c6c8:	03d09000 	.word	0x03d09000
 800c6cc:	003d0900 	.word	0x003d0900
 800c6d0:	017d7840 	.word	0x017d7840

0800c6d4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800c6d4:	b580      	push	{r7, lr}
 800c6d6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800c6d8:	f7fd fdda 	bl	800a290 <HAL_RCC_GetHCLKFreq>
 800c6dc:	4602      	mov	r2, r0
 800c6de:	4b06      	ldr	r3, [pc, #24]	@ (800c6f8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800c6e0:	6a1b      	ldr	r3, [r3, #32]
 800c6e2:	091b      	lsrs	r3, r3, #4
 800c6e4:	f003 0307 	and.w	r3, r3, #7
 800c6e8:	4904      	ldr	r1, [pc, #16]	@ (800c6fc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800c6ea:	5ccb      	ldrb	r3, [r1, r3]
 800c6ec:	f003 031f 	and.w	r3, r3, #31
 800c6f0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800c6f4:	4618      	mov	r0, r3
 800c6f6:	bd80      	pop	{r7, pc}
 800c6f8:	58024400 	.word	0x58024400
 800c6fc:	08022f14 	.word	0x08022f14

0800c700 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800c700:	b480      	push	{r7}
 800c702:	b089      	sub	sp, #36	@ 0x24
 800c704:	af00      	add	r7, sp, #0
 800c706:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c708:	4ba1      	ldr	r3, [pc, #644]	@ (800c990 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c70a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c70c:	f003 0303 	and.w	r3, r3, #3
 800c710:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800c712:	4b9f      	ldr	r3, [pc, #636]	@ (800c990 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c714:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c716:	0b1b      	lsrs	r3, r3, #12
 800c718:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c71c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800c71e:	4b9c      	ldr	r3, [pc, #624]	@ (800c990 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c720:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c722:	091b      	lsrs	r3, r3, #4
 800c724:	f003 0301 	and.w	r3, r3, #1
 800c728:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800c72a:	4b99      	ldr	r3, [pc, #612]	@ (800c990 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c72c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c72e:	08db      	lsrs	r3, r3, #3
 800c730:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c734:	693a      	ldr	r2, [r7, #16]
 800c736:	fb02 f303 	mul.w	r3, r2, r3
 800c73a:	ee07 3a90 	vmov	s15, r3
 800c73e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c742:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800c746:	697b      	ldr	r3, [r7, #20]
 800c748:	2b00      	cmp	r3, #0
 800c74a:	f000 8111 	beq.w	800c970 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800c74e:	69bb      	ldr	r3, [r7, #24]
 800c750:	2b02      	cmp	r3, #2
 800c752:	f000 8083 	beq.w	800c85c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800c756:	69bb      	ldr	r3, [r7, #24]
 800c758:	2b02      	cmp	r3, #2
 800c75a:	f200 80a1 	bhi.w	800c8a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800c75e:	69bb      	ldr	r3, [r7, #24]
 800c760:	2b00      	cmp	r3, #0
 800c762:	d003      	beq.n	800c76c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800c764:	69bb      	ldr	r3, [r7, #24]
 800c766:	2b01      	cmp	r3, #1
 800c768:	d056      	beq.n	800c818 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800c76a:	e099      	b.n	800c8a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c76c:	4b88      	ldr	r3, [pc, #544]	@ (800c990 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	f003 0320 	and.w	r3, r3, #32
 800c774:	2b00      	cmp	r3, #0
 800c776:	d02d      	beq.n	800c7d4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c778:	4b85      	ldr	r3, [pc, #532]	@ (800c990 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	08db      	lsrs	r3, r3, #3
 800c77e:	f003 0303 	and.w	r3, r3, #3
 800c782:	4a84      	ldr	r2, [pc, #528]	@ (800c994 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800c784:	fa22 f303 	lsr.w	r3, r2, r3
 800c788:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c78a:	68bb      	ldr	r3, [r7, #8]
 800c78c:	ee07 3a90 	vmov	s15, r3
 800c790:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c794:	697b      	ldr	r3, [r7, #20]
 800c796:	ee07 3a90 	vmov	s15, r3
 800c79a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c79e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c7a2:	4b7b      	ldr	r3, [pc, #492]	@ (800c990 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c7a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c7a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c7aa:	ee07 3a90 	vmov	s15, r3
 800c7ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c7b2:	ed97 6a03 	vldr	s12, [r7, #12]
 800c7b6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800c998 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c7ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c7be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c7c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c7c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c7ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c7ce:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800c7d2:	e087      	b.n	800c8e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c7d4:	697b      	ldr	r3, [r7, #20]
 800c7d6:	ee07 3a90 	vmov	s15, r3
 800c7da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c7de:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800c99c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800c7e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c7e6:	4b6a      	ldr	r3, [pc, #424]	@ (800c990 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c7e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c7ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c7ee:	ee07 3a90 	vmov	s15, r3
 800c7f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c7f6:	ed97 6a03 	vldr	s12, [r7, #12]
 800c7fa:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800c998 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c7fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c802:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c806:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c80a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c80e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c812:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c816:	e065      	b.n	800c8e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c818:	697b      	ldr	r3, [r7, #20]
 800c81a:	ee07 3a90 	vmov	s15, r3
 800c81e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c822:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800c9a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800c826:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c82a:	4b59      	ldr	r3, [pc, #356]	@ (800c990 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c82c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c82e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c832:	ee07 3a90 	vmov	s15, r3
 800c836:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c83a:	ed97 6a03 	vldr	s12, [r7, #12]
 800c83e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800c998 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c842:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c846:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c84a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c84e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c852:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c856:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c85a:	e043      	b.n	800c8e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c85c:	697b      	ldr	r3, [r7, #20]
 800c85e:	ee07 3a90 	vmov	s15, r3
 800c862:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c866:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800c9a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800c86a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c86e:	4b48      	ldr	r3, [pc, #288]	@ (800c990 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c870:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c872:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c876:	ee07 3a90 	vmov	s15, r3
 800c87a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c87e:	ed97 6a03 	vldr	s12, [r7, #12]
 800c882:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800c998 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c886:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c88a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c88e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c892:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c896:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c89a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c89e:	e021      	b.n	800c8e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c8a0:	697b      	ldr	r3, [r7, #20]
 800c8a2:	ee07 3a90 	vmov	s15, r3
 800c8a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c8aa:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800c9a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800c8ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c8b2:	4b37      	ldr	r3, [pc, #220]	@ (800c990 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c8b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c8b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c8ba:	ee07 3a90 	vmov	s15, r3
 800c8be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c8c2:	ed97 6a03 	vldr	s12, [r7, #12]
 800c8c6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800c998 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c8ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c8ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c8d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c8d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c8da:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c8de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c8e2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800c8e4:	4b2a      	ldr	r3, [pc, #168]	@ (800c990 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c8e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c8e8:	0a5b      	lsrs	r3, r3, #9
 800c8ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c8ee:	ee07 3a90 	vmov	s15, r3
 800c8f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c8f6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c8fa:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c8fe:	edd7 6a07 	vldr	s13, [r7, #28]
 800c902:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c906:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c90a:	ee17 2a90 	vmov	r2, s15
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800c912:	4b1f      	ldr	r3, [pc, #124]	@ (800c990 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c914:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c916:	0c1b      	lsrs	r3, r3, #16
 800c918:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c91c:	ee07 3a90 	vmov	s15, r3
 800c920:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c924:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c928:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c92c:	edd7 6a07 	vldr	s13, [r7, #28]
 800c930:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c934:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c938:	ee17 2a90 	vmov	r2, s15
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800c940:	4b13      	ldr	r3, [pc, #76]	@ (800c990 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c942:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c944:	0e1b      	lsrs	r3, r3, #24
 800c946:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c94a:	ee07 3a90 	vmov	s15, r3
 800c94e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c952:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c956:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c95a:	edd7 6a07 	vldr	s13, [r7, #28]
 800c95e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c962:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c966:	ee17 2a90 	vmov	r2, s15
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800c96e:	e008      	b.n	800c982 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	2200      	movs	r2, #0
 800c974:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	2200      	movs	r2, #0
 800c97a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	2200      	movs	r2, #0
 800c980:	609a      	str	r2, [r3, #8]
}
 800c982:	bf00      	nop
 800c984:	3724      	adds	r7, #36	@ 0x24
 800c986:	46bd      	mov	sp, r7
 800c988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c98c:	4770      	bx	lr
 800c98e:	bf00      	nop
 800c990:	58024400 	.word	0x58024400
 800c994:	03d09000 	.word	0x03d09000
 800c998:	46000000 	.word	0x46000000
 800c99c:	4c742400 	.word	0x4c742400
 800c9a0:	4a742400 	.word	0x4a742400
 800c9a4:	4bbebc20 	.word	0x4bbebc20

0800c9a8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800c9a8:	b480      	push	{r7}
 800c9aa:	b089      	sub	sp, #36	@ 0x24
 800c9ac:	af00      	add	r7, sp, #0
 800c9ae:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c9b0:	4ba1      	ldr	r3, [pc, #644]	@ (800cc38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c9b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c9b4:	f003 0303 	and.w	r3, r3, #3
 800c9b8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800c9ba:	4b9f      	ldr	r3, [pc, #636]	@ (800cc38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c9bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c9be:	0d1b      	lsrs	r3, r3, #20
 800c9c0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c9c4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800c9c6:	4b9c      	ldr	r3, [pc, #624]	@ (800cc38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c9c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c9ca:	0a1b      	lsrs	r3, r3, #8
 800c9cc:	f003 0301 	and.w	r3, r3, #1
 800c9d0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800c9d2:	4b99      	ldr	r3, [pc, #612]	@ (800cc38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c9d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c9d6:	08db      	lsrs	r3, r3, #3
 800c9d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c9dc:	693a      	ldr	r2, [r7, #16]
 800c9de:	fb02 f303 	mul.w	r3, r2, r3
 800c9e2:	ee07 3a90 	vmov	s15, r3
 800c9e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c9ea:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800c9ee:	697b      	ldr	r3, [r7, #20]
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	f000 8111 	beq.w	800cc18 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800c9f6:	69bb      	ldr	r3, [r7, #24]
 800c9f8:	2b02      	cmp	r3, #2
 800c9fa:	f000 8083 	beq.w	800cb04 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800c9fe:	69bb      	ldr	r3, [r7, #24]
 800ca00:	2b02      	cmp	r3, #2
 800ca02:	f200 80a1 	bhi.w	800cb48 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800ca06:	69bb      	ldr	r3, [r7, #24]
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d003      	beq.n	800ca14 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800ca0c:	69bb      	ldr	r3, [r7, #24]
 800ca0e:	2b01      	cmp	r3, #1
 800ca10:	d056      	beq.n	800cac0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800ca12:	e099      	b.n	800cb48 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ca14:	4b88      	ldr	r3, [pc, #544]	@ (800cc38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	f003 0320 	and.w	r3, r3, #32
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d02d      	beq.n	800ca7c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ca20:	4b85      	ldr	r3, [pc, #532]	@ (800cc38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	08db      	lsrs	r3, r3, #3
 800ca26:	f003 0303 	and.w	r3, r3, #3
 800ca2a:	4a84      	ldr	r2, [pc, #528]	@ (800cc3c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800ca2c:	fa22 f303 	lsr.w	r3, r2, r3
 800ca30:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ca32:	68bb      	ldr	r3, [r7, #8]
 800ca34:	ee07 3a90 	vmov	s15, r3
 800ca38:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ca3c:	697b      	ldr	r3, [r7, #20]
 800ca3e:	ee07 3a90 	vmov	s15, r3
 800ca42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ca4a:	4b7b      	ldr	r3, [pc, #492]	@ (800cc38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ca4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ca4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca52:	ee07 3a90 	vmov	s15, r3
 800ca56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ca5a:	ed97 6a03 	vldr	s12, [r7, #12]
 800ca5e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800cc40 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ca62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ca66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ca6a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ca6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ca72:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ca76:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800ca7a:	e087      	b.n	800cb8c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ca7c:	697b      	ldr	r3, [r7, #20]
 800ca7e:	ee07 3a90 	vmov	s15, r3
 800ca82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca86:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800cc44 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800ca8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ca8e:	4b6a      	ldr	r3, [pc, #424]	@ (800cc38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ca90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ca92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca96:	ee07 3a90 	vmov	s15, r3
 800ca9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ca9e:	ed97 6a03 	vldr	s12, [r7, #12]
 800caa2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800cc40 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800caa6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800caaa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800caae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cab2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cab6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800caba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cabe:	e065      	b.n	800cb8c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cac0:	697b      	ldr	r3, [r7, #20]
 800cac2:	ee07 3a90 	vmov	s15, r3
 800cac6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800caca:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800cc48 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800cace:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cad2:	4b59      	ldr	r3, [pc, #356]	@ (800cc38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cad4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cad6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cada:	ee07 3a90 	vmov	s15, r3
 800cade:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cae2:	ed97 6a03 	vldr	s12, [r7, #12]
 800cae6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800cc40 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800caea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800caee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800caf2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800caf6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cafa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cafe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cb02:	e043      	b.n	800cb8c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cb04:	697b      	ldr	r3, [r7, #20]
 800cb06:	ee07 3a90 	vmov	s15, r3
 800cb0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb0e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800cc4c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800cb12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cb16:	4b48      	ldr	r3, [pc, #288]	@ (800cc38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cb18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cb1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cb1e:	ee07 3a90 	vmov	s15, r3
 800cb22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cb26:	ed97 6a03 	vldr	s12, [r7, #12]
 800cb2a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800cc40 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cb2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cb32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cb36:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cb3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cb3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cb42:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cb46:	e021      	b.n	800cb8c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cb48:	697b      	ldr	r3, [r7, #20]
 800cb4a:	ee07 3a90 	vmov	s15, r3
 800cb4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb52:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800cc48 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800cb56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cb5a:	4b37      	ldr	r3, [pc, #220]	@ (800cc38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cb5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cb5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cb62:	ee07 3a90 	vmov	s15, r3
 800cb66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cb6a:	ed97 6a03 	vldr	s12, [r7, #12]
 800cb6e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800cc40 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cb72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cb76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cb7a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cb7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cb82:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cb86:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cb8a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800cb8c:	4b2a      	ldr	r3, [pc, #168]	@ (800cc38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cb8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cb90:	0a5b      	lsrs	r3, r3, #9
 800cb92:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cb96:	ee07 3a90 	vmov	s15, r3
 800cb9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb9e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800cba2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cba6:	edd7 6a07 	vldr	s13, [r7, #28]
 800cbaa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cbae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cbb2:	ee17 2a90 	vmov	r2, s15
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800cbba:	4b1f      	ldr	r3, [pc, #124]	@ (800cc38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cbbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cbbe:	0c1b      	lsrs	r3, r3, #16
 800cbc0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cbc4:	ee07 3a90 	vmov	s15, r3
 800cbc8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cbcc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800cbd0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cbd4:	edd7 6a07 	vldr	s13, [r7, #28]
 800cbd8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cbdc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cbe0:	ee17 2a90 	vmov	r2, s15
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800cbe8:	4b13      	ldr	r3, [pc, #76]	@ (800cc38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cbea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cbec:	0e1b      	lsrs	r3, r3, #24
 800cbee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cbf2:	ee07 3a90 	vmov	s15, r3
 800cbf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cbfa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800cbfe:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cc02:	edd7 6a07 	vldr	s13, [r7, #28]
 800cc06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cc0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cc0e:	ee17 2a90 	vmov	r2, s15
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800cc16:	e008      	b.n	800cc2a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	2200      	movs	r2, #0
 800cc1c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	2200      	movs	r2, #0
 800cc22:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	2200      	movs	r2, #0
 800cc28:	609a      	str	r2, [r3, #8]
}
 800cc2a:	bf00      	nop
 800cc2c:	3724      	adds	r7, #36	@ 0x24
 800cc2e:	46bd      	mov	sp, r7
 800cc30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc34:	4770      	bx	lr
 800cc36:	bf00      	nop
 800cc38:	58024400 	.word	0x58024400
 800cc3c:	03d09000 	.word	0x03d09000
 800cc40:	46000000 	.word	0x46000000
 800cc44:	4c742400 	.word	0x4c742400
 800cc48:	4a742400 	.word	0x4a742400
 800cc4c:	4bbebc20 	.word	0x4bbebc20

0800cc50 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800cc50:	b480      	push	{r7}
 800cc52:	b089      	sub	sp, #36	@ 0x24
 800cc54:	af00      	add	r7, sp, #0
 800cc56:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800cc58:	4ba0      	ldr	r3, [pc, #640]	@ (800cedc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cc5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cc5c:	f003 0303 	and.w	r3, r3, #3
 800cc60:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800cc62:	4b9e      	ldr	r3, [pc, #632]	@ (800cedc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cc64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cc66:	091b      	lsrs	r3, r3, #4
 800cc68:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800cc6c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800cc6e:	4b9b      	ldr	r3, [pc, #620]	@ (800cedc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cc70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cc72:	f003 0301 	and.w	r3, r3, #1
 800cc76:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800cc78:	4b98      	ldr	r3, [pc, #608]	@ (800cedc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cc7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cc7c:	08db      	lsrs	r3, r3, #3
 800cc7e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cc82:	693a      	ldr	r2, [r7, #16]
 800cc84:	fb02 f303 	mul.w	r3, r2, r3
 800cc88:	ee07 3a90 	vmov	s15, r3
 800cc8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc90:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800cc94:	697b      	ldr	r3, [r7, #20]
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	f000 8111 	beq.w	800cebe <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800cc9c:	69bb      	ldr	r3, [r7, #24]
 800cc9e:	2b02      	cmp	r3, #2
 800cca0:	f000 8083 	beq.w	800cdaa <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800cca4:	69bb      	ldr	r3, [r7, #24]
 800cca6:	2b02      	cmp	r3, #2
 800cca8:	f200 80a1 	bhi.w	800cdee <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800ccac:	69bb      	ldr	r3, [r7, #24]
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d003      	beq.n	800ccba <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800ccb2:	69bb      	ldr	r3, [r7, #24]
 800ccb4:	2b01      	cmp	r3, #1
 800ccb6:	d056      	beq.n	800cd66 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800ccb8:	e099      	b.n	800cdee <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ccba:	4b88      	ldr	r3, [pc, #544]	@ (800cedc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	f003 0320 	and.w	r3, r3, #32
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	d02d      	beq.n	800cd22 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ccc6:	4b85      	ldr	r3, [pc, #532]	@ (800cedc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	08db      	lsrs	r3, r3, #3
 800cccc:	f003 0303 	and.w	r3, r3, #3
 800ccd0:	4a83      	ldr	r2, [pc, #524]	@ (800cee0 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800ccd2:	fa22 f303 	lsr.w	r3, r2, r3
 800ccd6:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ccd8:	68bb      	ldr	r3, [r7, #8]
 800ccda:	ee07 3a90 	vmov	s15, r3
 800ccde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cce2:	697b      	ldr	r3, [r7, #20]
 800cce4:	ee07 3a90 	vmov	s15, r3
 800cce8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ccec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ccf0:	4b7a      	ldr	r3, [pc, #488]	@ (800cedc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ccf2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ccf4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ccf8:	ee07 3a90 	vmov	s15, r3
 800ccfc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cd00:	ed97 6a03 	vldr	s12, [r7, #12]
 800cd04:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800cee4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cd08:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cd0c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cd10:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cd14:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cd18:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cd1c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800cd20:	e087      	b.n	800ce32 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cd22:	697b      	ldr	r3, [r7, #20]
 800cd24:	ee07 3a90 	vmov	s15, r3
 800cd28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd2c:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800cee8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800cd30:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cd34:	4b69      	ldr	r3, [pc, #420]	@ (800cedc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cd36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cd38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cd3c:	ee07 3a90 	vmov	s15, r3
 800cd40:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cd44:	ed97 6a03 	vldr	s12, [r7, #12]
 800cd48:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800cee4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cd4c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cd50:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cd54:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cd58:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cd5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cd60:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cd64:	e065      	b.n	800ce32 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cd66:	697b      	ldr	r3, [r7, #20]
 800cd68:	ee07 3a90 	vmov	s15, r3
 800cd6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd70:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800ceec <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800cd74:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cd78:	4b58      	ldr	r3, [pc, #352]	@ (800cedc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cd7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cd7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cd80:	ee07 3a90 	vmov	s15, r3
 800cd84:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cd88:	ed97 6a03 	vldr	s12, [r7, #12]
 800cd8c:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800cee4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cd90:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cd94:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cd98:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cd9c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cda0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cda4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cda8:	e043      	b.n	800ce32 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cdaa:	697b      	ldr	r3, [r7, #20]
 800cdac:	ee07 3a90 	vmov	s15, r3
 800cdb0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cdb4:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800cef0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800cdb8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cdbc:	4b47      	ldr	r3, [pc, #284]	@ (800cedc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cdbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cdc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cdc4:	ee07 3a90 	vmov	s15, r3
 800cdc8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cdcc:	ed97 6a03 	vldr	s12, [r7, #12]
 800cdd0:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800cee4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cdd4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cdd8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cddc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cde0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cde4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cde8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cdec:	e021      	b.n	800ce32 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cdee:	697b      	ldr	r3, [r7, #20]
 800cdf0:	ee07 3a90 	vmov	s15, r3
 800cdf4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cdf8:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800cee8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800cdfc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ce00:	4b36      	ldr	r3, [pc, #216]	@ (800cedc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ce02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ce04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ce08:	ee07 3a90 	vmov	s15, r3
 800ce0c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ce10:	ed97 6a03 	vldr	s12, [r7, #12]
 800ce14:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800cee4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ce18:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ce1c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ce20:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ce24:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ce28:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ce2c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ce30:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800ce32:	4b2a      	ldr	r3, [pc, #168]	@ (800cedc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ce34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ce36:	0a5b      	lsrs	r3, r3, #9
 800ce38:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ce3c:	ee07 3a90 	vmov	s15, r3
 800ce40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce44:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ce48:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ce4c:	edd7 6a07 	vldr	s13, [r7, #28]
 800ce50:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ce54:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ce58:	ee17 2a90 	vmov	r2, s15
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800ce60:	4b1e      	ldr	r3, [pc, #120]	@ (800cedc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ce62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ce64:	0c1b      	lsrs	r3, r3, #16
 800ce66:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ce6a:	ee07 3a90 	vmov	s15, r3
 800ce6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce72:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ce76:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ce7a:	edd7 6a07 	vldr	s13, [r7, #28]
 800ce7e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ce82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ce86:	ee17 2a90 	vmov	r2, s15
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800ce8e:	4b13      	ldr	r3, [pc, #76]	@ (800cedc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ce90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ce92:	0e1b      	lsrs	r3, r3, #24
 800ce94:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ce98:	ee07 3a90 	vmov	s15, r3
 800ce9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cea0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800cea4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cea8:	edd7 6a07 	vldr	s13, [r7, #28]
 800ceac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ceb0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ceb4:	ee17 2a90 	vmov	r2, s15
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800cebc:	e008      	b.n	800ced0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	2200      	movs	r2, #0
 800cec2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	2200      	movs	r2, #0
 800cec8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	2200      	movs	r2, #0
 800cece:	609a      	str	r2, [r3, #8]
}
 800ced0:	bf00      	nop
 800ced2:	3724      	adds	r7, #36	@ 0x24
 800ced4:	46bd      	mov	sp, r7
 800ced6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceda:	4770      	bx	lr
 800cedc:	58024400 	.word	0x58024400
 800cee0:	03d09000 	.word	0x03d09000
 800cee4:	46000000 	.word	0x46000000
 800cee8:	4c742400 	.word	0x4c742400
 800ceec:	4a742400 	.word	0x4a742400
 800cef0:	4bbebc20 	.word	0x4bbebc20

0800cef4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800cef4:	b580      	push	{r7, lr}
 800cef6:	b084      	sub	sp, #16
 800cef8:	af00      	add	r7, sp, #0
 800cefa:	6078      	str	r0, [r7, #4]
 800cefc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800cefe:	2300      	movs	r3, #0
 800cf00:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2M_VALUE(pll2->PLL2M));
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	681b      	ldr	r3, [r3, #0]
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d003      	beq.n	800cf12 <RCCEx_PLL2_Config+0x1e>
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	681b      	ldr	r3, [r3, #0]
 800cf0e:	2b3f      	cmp	r3, #63	@ 0x3f
 800cf10:	d904      	bls.n	800cf1c <RCCEx_PLL2_Config+0x28>
 800cf12:	f640 6172 	movw	r1, #3698	@ 0xe72
 800cf16:	4885      	ldr	r0, [pc, #532]	@ (800d12c <RCCEx_PLL2_Config+0x238>)
 800cf18:	f7f5 fa54 	bl	80023c4 <assert_failed>
  assert_param(IS_RCC_PLL2N_VALUE(pll2->PLL2N));
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	685b      	ldr	r3, [r3, #4]
 800cf20:	2b03      	cmp	r3, #3
 800cf22:	d904      	bls.n	800cf2e <RCCEx_PLL2_Config+0x3a>
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	685b      	ldr	r3, [r3, #4]
 800cf28:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cf2c:	d904      	bls.n	800cf38 <RCCEx_PLL2_Config+0x44>
 800cf2e:	f640 6173 	movw	r1, #3699	@ 0xe73
 800cf32:	487e      	ldr	r0, [pc, #504]	@ (800d12c <RCCEx_PLL2_Config+0x238>)
 800cf34:	f7f5 fa46 	bl	80023c4 <assert_failed>
  assert_param(IS_RCC_PLL2P_VALUE(pll2->PLL2P));
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	689b      	ldr	r3, [r3, #8]
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	d003      	beq.n	800cf48 <RCCEx_PLL2_Config+0x54>
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	689b      	ldr	r3, [r3, #8]
 800cf44:	2b80      	cmp	r3, #128	@ 0x80
 800cf46:	d904      	bls.n	800cf52 <RCCEx_PLL2_Config+0x5e>
 800cf48:	f640 6174 	movw	r1, #3700	@ 0xe74
 800cf4c:	4877      	ldr	r0, [pc, #476]	@ (800d12c <RCCEx_PLL2_Config+0x238>)
 800cf4e:	f7f5 fa39 	bl	80023c4 <assert_failed>
  assert_param(IS_RCC_PLL2R_VALUE(pll2->PLL2R));
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	691b      	ldr	r3, [r3, #16]
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	d003      	beq.n	800cf62 <RCCEx_PLL2_Config+0x6e>
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	691b      	ldr	r3, [r3, #16]
 800cf5e:	2b80      	cmp	r3, #128	@ 0x80
 800cf60:	d904      	bls.n	800cf6c <RCCEx_PLL2_Config+0x78>
 800cf62:	f640 6175 	movw	r1, #3701	@ 0xe75
 800cf66:	4871      	ldr	r0, [pc, #452]	@ (800d12c <RCCEx_PLL2_Config+0x238>)
 800cf68:	f7f5 fa2c 	bl	80023c4 <assert_failed>
  assert_param(IS_RCC_PLL2Q_VALUE(pll2->PLL2Q));
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	68db      	ldr	r3, [r3, #12]
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	d003      	beq.n	800cf7c <RCCEx_PLL2_Config+0x88>
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	68db      	ldr	r3, [r3, #12]
 800cf78:	2b80      	cmp	r3, #128	@ 0x80
 800cf7a:	d904      	bls.n	800cf86 <RCCEx_PLL2_Config+0x92>
 800cf7c:	f640 6176 	movw	r1, #3702	@ 0xe76
 800cf80:	486a      	ldr	r0, [pc, #424]	@ (800d12c <RCCEx_PLL2_Config+0x238>)
 800cf82:	f7f5 fa1f 	bl	80023c4 <assert_failed>
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	695b      	ldr	r3, [r3, #20]
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	d010      	beq.n	800cfb0 <RCCEx_PLL2_Config+0xbc>
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	695b      	ldr	r3, [r3, #20]
 800cf92:	2b40      	cmp	r3, #64	@ 0x40
 800cf94:	d00c      	beq.n	800cfb0 <RCCEx_PLL2_Config+0xbc>
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	695b      	ldr	r3, [r3, #20]
 800cf9a:	2b80      	cmp	r3, #128	@ 0x80
 800cf9c:	d008      	beq.n	800cfb0 <RCCEx_PLL2_Config+0xbc>
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	695b      	ldr	r3, [r3, #20]
 800cfa2:	2bc0      	cmp	r3, #192	@ 0xc0
 800cfa4:	d004      	beq.n	800cfb0 <RCCEx_PLL2_Config+0xbc>
 800cfa6:	f640 6177 	movw	r1, #3703	@ 0xe77
 800cfaa:	4860      	ldr	r0, [pc, #384]	@ (800d12c <RCCEx_PLL2_Config+0x238>)
 800cfac:	f7f5 fa0a 	bl	80023c4 <assert_failed>
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	699b      	ldr	r3, [r3, #24]
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	d008      	beq.n	800cfca <RCCEx_PLL2_Config+0xd6>
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	699b      	ldr	r3, [r3, #24]
 800cfbc:	2b20      	cmp	r3, #32
 800cfbe:	d004      	beq.n	800cfca <RCCEx_PLL2_Config+0xd6>
 800cfc0:	f640 6178 	movw	r1, #3704	@ 0xe78
 800cfc4:	4859      	ldr	r0, [pc, #356]	@ (800d12c <RCCEx_PLL2_Config+0x238>)
 800cfc6:	f7f5 f9fd 	bl	80023c4 <assert_failed>
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	69db      	ldr	r3, [r3, #28]
 800cfce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800cfd2:	d304      	bcc.n	800cfde <RCCEx_PLL2_Config+0xea>
 800cfd4:	f640 6179 	movw	r1, #3705	@ 0xe79
 800cfd8:	4854      	ldr	r0, [pc, #336]	@ (800d12c <RCCEx_PLL2_Config+0x238>)
 800cfda:	f7f5 f9f3 	bl	80023c4 <assert_failed>

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800cfde:	4b54      	ldr	r3, [pc, #336]	@ (800d130 <RCCEx_PLL2_Config+0x23c>)
 800cfe0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cfe2:	f003 0303 	and.w	r3, r3, #3
 800cfe6:	2b03      	cmp	r3, #3
 800cfe8:	d101      	bne.n	800cfee <RCCEx_PLL2_Config+0xfa>
  {
    return HAL_ERROR;
 800cfea:	2301      	movs	r3, #1
 800cfec:	e099      	b.n	800d122 <RCCEx_PLL2_Config+0x22e>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800cfee:	4b50      	ldr	r3, [pc, #320]	@ (800d130 <RCCEx_PLL2_Config+0x23c>)
 800cff0:	681b      	ldr	r3, [r3, #0]
 800cff2:	4a4f      	ldr	r2, [pc, #316]	@ (800d130 <RCCEx_PLL2_Config+0x23c>)
 800cff4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800cff8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cffa:	f7f6 fb7f 	bl	80036fc <HAL_GetTick>
 800cffe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d000:	e008      	b.n	800d014 <RCCEx_PLL2_Config+0x120>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d002:	f7f6 fb7b 	bl	80036fc <HAL_GetTick>
 800d006:	4602      	mov	r2, r0
 800d008:	68bb      	ldr	r3, [r7, #8]
 800d00a:	1ad3      	subs	r3, r2, r3
 800d00c:	2b02      	cmp	r3, #2
 800d00e:	d901      	bls.n	800d014 <RCCEx_PLL2_Config+0x120>
      {
        return HAL_TIMEOUT;
 800d010:	2303      	movs	r3, #3
 800d012:	e086      	b.n	800d122 <RCCEx_PLL2_Config+0x22e>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d014:	4b46      	ldr	r3, [pc, #280]	@ (800d130 <RCCEx_PLL2_Config+0x23c>)
 800d016:	681b      	ldr	r3, [r3, #0]
 800d018:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d1f0      	bne.n	800d002 <RCCEx_PLL2_Config+0x10e>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800d020:	4b43      	ldr	r3, [pc, #268]	@ (800d130 <RCCEx_PLL2_Config+0x23c>)
 800d022:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d024:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	681b      	ldr	r3, [r3, #0]
 800d02c:	031b      	lsls	r3, r3, #12
 800d02e:	4940      	ldr	r1, [pc, #256]	@ (800d130 <RCCEx_PLL2_Config+0x23c>)
 800d030:	4313      	orrs	r3, r2
 800d032:	628b      	str	r3, [r1, #40]	@ 0x28
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	685b      	ldr	r3, [r3, #4]
 800d038:	3b01      	subs	r3, #1
 800d03a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	689b      	ldr	r3, [r3, #8]
 800d042:	3b01      	subs	r3, #1
 800d044:	025b      	lsls	r3, r3, #9
 800d046:	b29b      	uxth	r3, r3
 800d048:	431a      	orrs	r2, r3
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	68db      	ldr	r3, [r3, #12]
 800d04e:	3b01      	subs	r3, #1
 800d050:	041b      	lsls	r3, r3, #16
 800d052:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800d056:	431a      	orrs	r2, r3
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	691b      	ldr	r3, [r3, #16]
 800d05c:	3b01      	subs	r3, #1
 800d05e:	061b      	lsls	r3, r3, #24
 800d060:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800d064:	4932      	ldr	r1, [pc, #200]	@ (800d130 <RCCEx_PLL2_Config+0x23c>)
 800d066:	4313      	orrs	r3, r2
 800d068:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800d06a:	4b31      	ldr	r3, [pc, #196]	@ (800d130 <RCCEx_PLL2_Config+0x23c>)
 800d06c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d06e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	695b      	ldr	r3, [r3, #20]
 800d076:	492e      	ldr	r1, [pc, #184]	@ (800d130 <RCCEx_PLL2_Config+0x23c>)
 800d078:	4313      	orrs	r3, r2
 800d07a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800d07c:	4b2c      	ldr	r3, [pc, #176]	@ (800d130 <RCCEx_PLL2_Config+0x23c>)
 800d07e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d080:	f023 0220 	bic.w	r2, r3, #32
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	699b      	ldr	r3, [r3, #24]
 800d088:	4929      	ldr	r1, [pc, #164]	@ (800d130 <RCCEx_PLL2_Config+0x23c>)
 800d08a:	4313      	orrs	r3, r2
 800d08c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800d08e:	4b28      	ldr	r3, [pc, #160]	@ (800d130 <RCCEx_PLL2_Config+0x23c>)
 800d090:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d092:	4a27      	ldr	r2, [pc, #156]	@ (800d130 <RCCEx_PLL2_Config+0x23c>)
 800d094:	f023 0310 	bic.w	r3, r3, #16
 800d098:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800d09a:	4b25      	ldr	r3, [pc, #148]	@ (800d130 <RCCEx_PLL2_Config+0x23c>)
 800d09c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d09e:	4b25      	ldr	r3, [pc, #148]	@ (800d134 <RCCEx_PLL2_Config+0x240>)
 800d0a0:	4013      	ands	r3, r2
 800d0a2:	687a      	ldr	r2, [r7, #4]
 800d0a4:	69d2      	ldr	r2, [r2, #28]
 800d0a6:	00d2      	lsls	r2, r2, #3
 800d0a8:	4921      	ldr	r1, [pc, #132]	@ (800d130 <RCCEx_PLL2_Config+0x23c>)
 800d0aa:	4313      	orrs	r3, r2
 800d0ac:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800d0ae:	4b20      	ldr	r3, [pc, #128]	@ (800d130 <RCCEx_PLL2_Config+0x23c>)
 800d0b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d0b2:	4a1f      	ldr	r2, [pc, #124]	@ (800d130 <RCCEx_PLL2_Config+0x23c>)
 800d0b4:	f043 0310 	orr.w	r3, r3, #16
 800d0b8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800d0ba:	683b      	ldr	r3, [r7, #0]
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d106      	bne.n	800d0ce <RCCEx_PLL2_Config+0x1da>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800d0c0:	4b1b      	ldr	r3, [pc, #108]	@ (800d130 <RCCEx_PLL2_Config+0x23c>)
 800d0c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d0c4:	4a1a      	ldr	r2, [pc, #104]	@ (800d130 <RCCEx_PLL2_Config+0x23c>)
 800d0c6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800d0ca:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800d0cc:	e00f      	b.n	800d0ee <RCCEx_PLL2_Config+0x1fa>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800d0ce:	683b      	ldr	r3, [r7, #0]
 800d0d0:	2b01      	cmp	r3, #1
 800d0d2:	d106      	bne.n	800d0e2 <RCCEx_PLL2_Config+0x1ee>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800d0d4:	4b16      	ldr	r3, [pc, #88]	@ (800d130 <RCCEx_PLL2_Config+0x23c>)
 800d0d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d0d8:	4a15      	ldr	r2, [pc, #84]	@ (800d130 <RCCEx_PLL2_Config+0x23c>)
 800d0da:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d0de:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800d0e0:	e005      	b.n	800d0ee <RCCEx_PLL2_Config+0x1fa>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800d0e2:	4b13      	ldr	r3, [pc, #76]	@ (800d130 <RCCEx_PLL2_Config+0x23c>)
 800d0e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d0e6:	4a12      	ldr	r2, [pc, #72]	@ (800d130 <RCCEx_PLL2_Config+0x23c>)
 800d0e8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800d0ec:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800d0ee:	4b10      	ldr	r3, [pc, #64]	@ (800d130 <RCCEx_PLL2_Config+0x23c>)
 800d0f0:	681b      	ldr	r3, [r3, #0]
 800d0f2:	4a0f      	ldr	r2, [pc, #60]	@ (800d130 <RCCEx_PLL2_Config+0x23c>)
 800d0f4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800d0f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d0fa:	f7f6 faff 	bl	80036fc <HAL_GetTick>
 800d0fe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d100:	e008      	b.n	800d114 <RCCEx_PLL2_Config+0x220>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d102:	f7f6 fafb 	bl	80036fc <HAL_GetTick>
 800d106:	4602      	mov	r2, r0
 800d108:	68bb      	ldr	r3, [r7, #8]
 800d10a:	1ad3      	subs	r3, r2, r3
 800d10c:	2b02      	cmp	r3, #2
 800d10e:	d901      	bls.n	800d114 <RCCEx_PLL2_Config+0x220>
      {
        return HAL_TIMEOUT;
 800d110:	2303      	movs	r3, #3
 800d112:	e006      	b.n	800d122 <RCCEx_PLL2_Config+0x22e>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d114:	4b06      	ldr	r3, [pc, #24]	@ (800d130 <RCCEx_PLL2_Config+0x23c>)
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d0f0      	beq.n	800d102 <RCCEx_PLL2_Config+0x20e>
    }

  }


  return status;
 800d120:	7bfb      	ldrb	r3, [r7, #15]
}
 800d122:	4618      	mov	r0, r3
 800d124:	3710      	adds	r7, #16
 800d126:	46bd      	mov	sp, r7
 800d128:	bd80      	pop	{r7, pc}
 800d12a:	bf00      	nop
 800d12c:	08021664 	.word	0x08021664
 800d130:	58024400 	.word	0x58024400
 800d134:	ffff0007 	.word	0xffff0007

0800d138 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800d138:	b580      	push	{r7, lr}
 800d13a:	b084      	sub	sp, #16
 800d13c:	af00      	add	r7, sp, #0
 800d13e:	6078      	str	r0, [r7, #4]
 800d140:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d142:	2300      	movs	r3, #0
 800d144:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3M_VALUE(pll3->PLL3M));
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	681b      	ldr	r3, [r3, #0]
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d003      	beq.n	800d156 <RCCEx_PLL3_Config+0x1e>
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	681b      	ldr	r3, [r3, #0]
 800d152:	2b3f      	cmp	r3, #63	@ 0x3f
 800d154:	d904      	bls.n	800d160 <RCCEx_PLL3_Config+0x28>
 800d156:	f640 61da 	movw	r1, #3802	@ 0xeda
 800d15a:	4887      	ldr	r0, [pc, #540]	@ (800d378 <RCCEx_PLL3_Config+0x240>)
 800d15c:	f7f5 f932 	bl	80023c4 <assert_failed>
  assert_param(IS_RCC_PLL3N_VALUE(pll3->PLL3N));
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	685b      	ldr	r3, [r3, #4]
 800d164:	2b03      	cmp	r3, #3
 800d166:	d904      	bls.n	800d172 <RCCEx_PLL3_Config+0x3a>
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	685b      	ldr	r3, [r3, #4]
 800d16c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d170:	d904      	bls.n	800d17c <RCCEx_PLL3_Config+0x44>
 800d172:	f640 61db 	movw	r1, #3803	@ 0xedb
 800d176:	4880      	ldr	r0, [pc, #512]	@ (800d378 <RCCEx_PLL3_Config+0x240>)
 800d178:	f7f5 f924 	bl	80023c4 <assert_failed>
  assert_param(IS_RCC_PLL3P_VALUE(pll3->PLL3P));
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	689b      	ldr	r3, [r3, #8]
 800d180:	2b00      	cmp	r3, #0
 800d182:	d003      	beq.n	800d18c <RCCEx_PLL3_Config+0x54>
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	689b      	ldr	r3, [r3, #8]
 800d188:	2b80      	cmp	r3, #128	@ 0x80
 800d18a:	d904      	bls.n	800d196 <RCCEx_PLL3_Config+0x5e>
 800d18c:	f640 61dc 	movw	r1, #3804	@ 0xedc
 800d190:	4879      	ldr	r0, [pc, #484]	@ (800d378 <RCCEx_PLL3_Config+0x240>)
 800d192:	f7f5 f917 	bl	80023c4 <assert_failed>
  assert_param(IS_RCC_PLL3R_VALUE(pll3->PLL3R));
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	691b      	ldr	r3, [r3, #16]
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	d003      	beq.n	800d1a6 <RCCEx_PLL3_Config+0x6e>
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	691b      	ldr	r3, [r3, #16]
 800d1a2:	2b80      	cmp	r3, #128	@ 0x80
 800d1a4:	d904      	bls.n	800d1b0 <RCCEx_PLL3_Config+0x78>
 800d1a6:	f640 61dd 	movw	r1, #3805	@ 0xedd
 800d1aa:	4873      	ldr	r0, [pc, #460]	@ (800d378 <RCCEx_PLL3_Config+0x240>)
 800d1ac:	f7f5 f90a 	bl	80023c4 <assert_failed>
  assert_param(IS_RCC_PLL3Q_VALUE(pll3->PLL3Q));
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	68db      	ldr	r3, [r3, #12]
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	d003      	beq.n	800d1c0 <RCCEx_PLL3_Config+0x88>
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	68db      	ldr	r3, [r3, #12]
 800d1bc:	2b80      	cmp	r3, #128	@ 0x80
 800d1be:	d904      	bls.n	800d1ca <RCCEx_PLL3_Config+0x92>
 800d1c0:	f640 61de 	movw	r1, #3806	@ 0xede
 800d1c4:	486c      	ldr	r0, [pc, #432]	@ (800d378 <RCCEx_PLL3_Config+0x240>)
 800d1c6:	f7f5 f8fd 	bl	80023c4 <assert_failed>
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	695b      	ldr	r3, [r3, #20]
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	d013      	beq.n	800d1fa <RCCEx_PLL3_Config+0xc2>
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	695b      	ldr	r3, [r3, #20]
 800d1d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d1da:	d00e      	beq.n	800d1fa <RCCEx_PLL3_Config+0xc2>
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	695b      	ldr	r3, [r3, #20]
 800d1e0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d1e4:	d009      	beq.n	800d1fa <RCCEx_PLL3_Config+0xc2>
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	695b      	ldr	r3, [r3, #20]
 800d1ea:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800d1ee:	d004      	beq.n	800d1fa <RCCEx_PLL3_Config+0xc2>
 800d1f0:	f640 61df 	movw	r1, #3807	@ 0xedf
 800d1f4:	4860      	ldr	r0, [pc, #384]	@ (800d378 <RCCEx_PLL3_Config+0x240>)
 800d1f6:	f7f5 f8e5 	bl	80023c4 <assert_failed>
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	699b      	ldr	r3, [r3, #24]
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	d009      	beq.n	800d216 <RCCEx_PLL3_Config+0xde>
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	699b      	ldr	r3, [r3, #24]
 800d206:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d20a:	d004      	beq.n	800d216 <RCCEx_PLL3_Config+0xde>
 800d20c:	f44f 616e 	mov.w	r1, #3808	@ 0xee0
 800d210:	4859      	ldr	r0, [pc, #356]	@ (800d378 <RCCEx_PLL3_Config+0x240>)
 800d212:	f7f5 f8d7 	bl	80023c4 <assert_failed>
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	69db      	ldr	r3, [r3, #28]
 800d21a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d21e:	d304      	bcc.n	800d22a <RCCEx_PLL3_Config+0xf2>
 800d220:	f640 61e1 	movw	r1, #3809	@ 0xee1
 800d224:	4854      	ldr	r0, [pc, #336]	@ (800d378 <RCCEx_PLL3_Config+0x240>)
 800d226:	f7f5 f8cd 	bl	80023c4 <assert_failed>

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d22a:	4b54      	ldr	r3, [pc, #336]	@ (800d37c <RCCEx_PLL3_Config+0x244>)
 800d22c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d22e:	f003 0303 	and.w	r3, r3, #3
 800d232:	2b03      	cmp	r3, #3
 800d234:	d101      	bne.n	800d23a <RCCEx_PLL3_Config+0x102>
  {
    return HAL_ERROR;
 800d236:	2301      	movs	r3, #1
 800d238:	e099      	b.n	800d36e <RCCEx_PLL3_Config+0x236>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800d23a:	4b50      	ldr	r3, [pc, #320]	@ (800d37c <RCCEx_PLL3_Config+0x244>)
 800d23c:	681b      	ldr	r3, [r3, #0]
 800d23e:	4a4f      	ldr	r2, [pc, #316]	@ (800d37c <RCCEx_PLL3_Config+0x244>)
 800d240:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800d244:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d246:	f7f6 fa59 	bl	80036fc <HAL_GetTick>
 800d24a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d24c:	e008      	b.n	800d260 <RCCEx_PLL3_Config+0x128>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d24e:	f7f6 fa55 	bl	80036fc <HAL_GetTick>
 800d252:	4602      	mov	r2, r0
 800d254:	68bb      	ldr	r3, [r7, #8]
 800d256:	1ad3      	subs	r3, r2, r3
 800d258:	2b02      	cmp	r3, #2
 800d25a:	d901      	bls.n	800d260 <RCCEx_PLL3_Config+0x128>
      {
        return HAL_TIMEOUT;
 800d25c:	2303      	movs	r3, #3
 800d25e:	e086      	b.n	800d36e <RCCEx_PLL3_Config+0x236>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d260:	4b46      	ldr	r3, [pc, #280]	@ (800d37c <RCCEx_PLL3_Config+0x244>)
 800d262:	681b      	ldr	r3, [r3, #0]
 800d264:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d1f0      	bne.n	800d24e <RCCEx_PLL3_Config+0x116>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800d26c:	4b43      	ldr	r3, [pc, #268]	@ (800d37c <RCCEx_PLL3_Config+0x244>)
 800d26e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d270:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	681b      	ldr	r3, [r3, #0]
 800d278:	051b      	lsls	r3, r3, #20
 800d27a:	4940      	ldr	r1, [pc, #256]	@ (800d37c <RCCEx_PLL3_Config+0x244>)
 800d27c:	4313      	orrs	r3, r2
 800d27e:	628b      	str	r3, [r1, #40]	@ 0x28
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	685b      	ldr	r3, [r3, #4]
 800d284:	3b01      	subs	r3, #1
 800d286:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	689b      	ldr	r3, [r3, #8]
 800d28e:	3b01      	subs	r3, #1
 800d290:	025b      	lsls	r3, r3, #9
 800d292:	b29b      	uxth	r3, r3
 800d294:	431a      	orrs	r2, r3
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	68db      	ldr	r3, [r3, #12]
 800d29a:	3b01      	subs	r3, #1
 800d29c:	041b      	lsls	r3, r3, #16
 800d29e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800d2a2:	431a      	orrs	r2, r3
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	691b      	ldr	r3, [r3, #16]
 800d2a8:	3b01      	subs	r3, #1
 800d2aa:	061b      	lsls	r3, r3, #24
 800d2ac:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800d2b0:	4932      	ldr	r1, [pc, #200]	@ (800d37c <RCCEx_PLL3_Config+0x244>)
 800d2b2:	4313      	orrs	r3, r2
 800d2b4:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800d2b6:	4b31      	ldr	r3, [pc, #196]	@ (800d37c <RCCEx_PLL3_Config+0x244>)
 800d2b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d2ba:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	695b      	ldr	r3, [r3, #20]
 800d2c2:	492e      	ldr	r1, [pc, #184]	@ (800d37c <RCCEx_PLL3_Config+0x244>)
 800d2c4:	4313      	orrs	r3, r2
 800d2c6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800d2c8:	4b2c      	ldr	r3, [pc, #176]	@ (800d37c <RCCEx_PLL3_Config+0x244>)
 800d2ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d2cc:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	699b      	ldr	r3, [r3, #24]
 800d2d4:	4929      	ldr	r1, [pc, #164]	@ (800d37c <RCCEx_PLL3_Config+0x244>)
 800d2d6:	4313      	orrs	r3, r2
 800d2d8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800d2da:	4b28      	ldr	r3, [pc, #160]	@ (800d37c <RCCEx_PLL3_Config+0x244>)
 800d2dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d2de:	4a27      	ldr	r2, [pc, #156]	@ (800d37c <RCCEx_PLL3_Config+0x244>)
 800d2e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d2e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800d2e6:	4b25      	ldr	r3, [pc, #148]	@ (800d37c <RCCEx_PLL3_Config+0x244>)
 800d2e8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d2ea:	4b25      	ldr	r3, [pc, #148]	@ (800d380 <RCCEx_PLL3_Config+0x248>)
 800d2ec:	4013      	ands	r3, r2
 800d2ee:	687a      	ldr	r2, [r7, #4]
 800d2f0:	69d2      	ldr	r2, [r2, #28]
 800d2f2:	00d2      	lsls	r2, r2, #3
 800d2f4:	4921      	ldr	r1, [pc, #132]	@ (800d37c <RCCEx_PLL3_Config+0x244>)
 800d2f6:	4313      	orrs	r3, r2
 800d2f8:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800d2fa:	4b20      	ldr	r3, [pc, #128]	@ (800d37c <RCCEx_PLL3_Config+0x244>)
 800d2fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d2fe:	4a1f      	ldr	r2, [pc, #124]	@ (800d37c <RCCEx_PLL3_Config+0x244>)
 800d300:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d304:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800d306:	683b      	ldr	r3, [r7, #0]
 800d308:	2b00      	cmp	r3, #0
 800d30a:	d106      	bne.n	800d31a <RCCEx_PLL3_Config+0x1e2>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800d30c:	4b1b      	ldr	r3, [pc, #108]	@ (800d37c <RCCEx_PLL3_Config+0x244>)
 800d30e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d310:	4a1a      	ldr	r2, [pc, #104]	@ (800d37c <RCCEx_PLL3_Config+0x244>)
 800d312:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800d316:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800d318:	e00f      	b.n	800d33a <RCCEx_PLL3_Config+0x202>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800d31a:	683b      	ldr	r3, [r7, #0]
 800d31c:	2b01      	cmp	r3, #1
 800d31e:	d106      	bne.n	800d32e <RCCEx_PLL3_Config+0x1f6>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800d320:	4b16      	ldr	r3, [pc, #88]	@ (800d37c <RCCEx_PLL3_Config+0x244>)
 800d322:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d324:	4a15      	ldr	r2, [pc, #84]	@ (800d37c <RCCEx_PLL3_Config+0x244>)
 800d326:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800d32a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800d32c:	e005      	b.n	800d33a <RCCEx_PLL3_Config+0x202>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800d32e:	4b13      	ldr	r3, [pc, #76]	@ (800d37c <RCCEx_PLL3_Config+0x244>)
 800d330:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d332:	4a12      	ldr	r2, [pc, #72]	@ (800d37c <RCCEx_PLL3_Config+0x244>)
 800d334:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800d338:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800d33a:	4b10      	ldr	r3, [pc, #64]	@ (800d37c <RCCEx_PLL3_Config+0x244>)
 800d33c:	681b      	ldr	r3, [r3, #0]
 800d33e:	4a0f      	ldr	r2, [pc, #60]	@ (800d37c <RCCEx_PLL3_Config+0x244>)
 800d340:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800d344:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d346:	f7f6 f9d9 	bl	80036fc <HAL_GetTick>
 800d34a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d34c:	e008      	b.n	800d360 <RCCEx_PLL3_Config+0x228>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d34e:	f7f6 f9d5 	bl	80036fc <HAL_GetTick>
 800d352:	4602      	mov	r2, r0
 800d354:	68bb      	ldr	r3, [r7, #8]
 800d356:	1ad3      	subs	r3, r2, r3
 800d358:	2b02      	cmp	r3, #2
 800d35a:	d901      	bls.n	800d360 <RCCEx_PLL3_Config+0x228>
      {
        return HAL_TIMEOUT;
 800d35c:	2303      	movs	r3, #3
 800d35e:	e006      	b.n	800d36e <RCCEx_PLL3_Config+0x236>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d360:	4b06      	ldr	r3, [pc, #24]	@ (800d37c <RCCEx_PLL3_Config+0x244>)
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d0f0      	beq.n	800d34e <RCCEx_PLL3_Config+0x216>
    }

  }


  return status;
 800d36c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d36e:	4618      	mov	r0, r3
 800d370:	3710      	adds	r7, #16
 800d372:	46bd      	mov	sp, r7
 800d374:	bd80      	pop	{r7, pc}
 800d376:	bf00      	nop
 800d378:	08021664 	.word	0x08021664
 800d37c:	58024400 	.word	0x58024400
 800d380:	ffff0007 	.word	0xffff0007

0800d384 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800d384:	b580      	push	{r7, lr}
 800d386:	b086      	sub	sp, #24
 800d388:	af00      	add	r7, sp, #0
 800d38a:	60f8      	str	r0, [r7, #12]
 800d38c:	60b9      	str	r1, [r7, #8]
 800d38e:	607a      	str	r2, [r7, #4]
 800d390:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
 800d392:	68bb      	ldr	r3, [r7, #8]
 800d394:	2b00      	cmp	r3, #0
 800d396:	d010      	beq.n	800d3ba <HAL_SAI_InitProtocol+0x36>
 800d398:	68bb      	ldr	r3, [r7, #8]
 800d39a:	2b01      	cmp	r3, #1
 800d39c:	d00d      	beq.n	800d3ba <HAL_SAI_InitProtocol+0x36>
 800d39e:	68bb      	ldr	r3, [r7, #8]
 800d3a0:	2b02      	cmp	r3, #2
 800d3a2:	d00a      	beq.n	800d3ba <HAL_SAI_InitProtocol+0x36>
 800d3a4:	68bb      	ldr	r3, [r7, #8]
 800d3a6:	2b03      	cmp	r3, #3
 800d3a8:	d007      	beq.n	800d3ba <HAL_SAI_InitProtocol+0x36>
 800d3aa:	68bb      	ldr	r3, [r7, #8]
 800d3ac:	2b04      	cmp	r3, #4
 800d3ae:	d004      	beq.n	800d3ba <HAL_SAI_InitProtocol+0x36>
 800d3b0:	f240 1151 	movw	r1, #337	@ 0x151
 800d3b4:	481e      	ldr	r0, [pc, #120]	@ (800d430 <HAL_SAI_InitProtocol+0xac>)
 800d3b6:	f7f5 f805 	bl	80023c4 <assert_failed>
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	d00d      	beq.n	800d3dc <HAL_SAI_InitProtocol+0x58>
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	2b01      	cmp	r3, #1
 800d3c4:	d00a      	beq.n	800d3dc <HAL_SAI_InitProtocol+0x58>
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	2b02      	cmp	r3, #2
 800d3ca:	d007      	beq.n	800d3dc <HAL_SAI_InitProtocol+0x58>
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	2b03      	cmp	r3, #3
 800d3d0:	d004      	beq.n	800d3dc <HAL_SAI_InitProtocol+0x58>
 800d3d2:	f44f 71a9 	mov.w	r1, #338	@ 0x152
 800d3d6:	4816      	ldr	r0, [pc, #88]	@ (800d430 <HAL_SAI_InitProtocol+0xac>)
 800d3d8:	f7f4 fff4 	bl	80023c4 <assert_failed>

  switch (protocol)
 800d3dc:	68bb      	ldr	r3, [r7, #8]
 800d3de:	2b02      	cmp	r3, #2
 800d3e0:	d904      	bls.n	800d3ec <HAL_SAI_InitProtocol+0x68>
 800d3e2:	68bb      	ldr	r3, [r7, #8]
 800d3e4:	3b03      	subs	r3, #3
 800d3e6:	2b01      	cmp	r3, #1
 800d3e8:	d812      	bhi.n	800d410 <HAL_SAI_InitProtocol+0x8c>
 800d3ea:	e008      	b.n	800d3fe <HAL_SAI_InitProtocol+0x7a>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 800d3ec:	683b      	ldr	r3, [r7, #0]
 800d3ee:	687a      	ldr	r2, [r7, #4]
 800d3f0:	68b9      	ldr	r1, [r7, #8]
 800d3f2:	68f8      	ldr	r0, [r7, #12]
 800d3f4:	f000 fc5c 	bl	800dcb0 <SAI_InitI2S>
 800d3f8:	4603      	mov	r3, r0
 800d3fa:	75fb      	strb	r3, [r7, #23]
      break;
 800d3fc:	e00b      	b.n	800d416 <HAL_SAI_InitProtocol+0x92>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 800d3fe:	683b      	ldr	r3, [r7, #0]
 800d400:	687a      	ldr	r2, [r7, #4]
 800d402:	68b9      	ldr	r1, [r7, #8]
 800d404:	68f8      	ldr	r0, [r7, #12]
 800d406:	f000 fd05 	bl	800de14 <SAI_InitPCM>
 800d40a:	4603      	mov	r3, r0
 800d40c:	75fb      	strb	r3, [r7, #23]
      break;
 800d40e:	e002      	b.n	800d416 <HAL_SAI_InitProtocol+0x92>
    default :
      status = HAL_ERROR;
 800d410:	2301      	movs	r3, #1
 800d412:	75fb      	strb	r3, [r7, #23]
      break;
 800d414:	bf00      	nop
  }

  if (status == HAL_OK)
 800d416:	7dfb      	ldrb	r3, [r7, #23]
 800d418:	2b00      	cmp	r3, #0
 800d41a:	d104      	bne.n	800d426 <HAL_SAI_InitProtocol+0xa2>
  {
    status = HAL_SAI_Init(hsai);
 800d41c:	68f8      	ldr	r0, [r7, #12]
 800d41e:	f000 f809 	bl	800d434 <HAL_SAI_Init>
 800d422:	4603      	mov	r3, r0
 800d424:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800d426:	7dfb      	ldrb	r3, [r7, #23]
}
 800d428:	4618      	mov	r0, r3
 800d42a:	3718      	adds	r7, #24
 800d42c:	46bd      	mov	sp, r7
 800d42e:	bd80      	pop	{r7, pc}
 800d430:	080216a0 	.word	0x080216a0

0800d434 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800d434:	b580      	push	{r7, lr}
 800d436:	b08a      	sub	sp, #40	@ 0x28
 800d438:	af00      	add	r7, sp, #0
 800d43a:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	2b00      	cmp	r3, #0
 800d440:	d102      	bne.n	800d448 <HAL_SAI_Init+0x14>
  {
    return HAL_ERROR;
 800d442:	2301      	movs	r3, #1
 800d444:	f000 bc25 	b.w	800dc92 <HAL_SAI_Init+0x85e>
  }

  /* check the instance */
  assert_param(IS_SAI_ALL_INSTANCE(hsai->Instance));
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	681b      	ldr	r3, [r3, #0]
 800d44c:	4a8a      	ldr	r2, [pc, #552]	@ (800d678 <HAL_SAI_Init+0x244>)
 800d44e:	4293      	cmp	r3, r2
 800d450:	d013      	beq.n	800d47a <HAL_SAI_Init+0x46>
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	681b      	ldr	r3, [r3, #0]
 800d456:	4a89      	ldr	r2, [pc, #548]	@ (800d67c <HAL_SAI_Init+0x248>)
 800d458:	4293      	cmp	r3, r2
 800d45a:	d00e      	beq.n	800d47a <HAL_SAI_Init+0x46>
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	681b      	ldr	r3, [r3, #0]
 800d460:	4a87      	ldr	r2, [pc, #540]	@ (800d680 <HAL_SAI_Init+0x24c>)
 800d462:	4293      	cmp	r3, r2
 800d464:	d009      	beq.n	800d47a <HAL_SAI_Init+0x46>
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	681b      	ldr	r3, [r3, #0]
 800d46a:	4a86      	ldr	r2, [pc, #536]	@ (800d684 <HAL_SAI_Init+0x250>)
 800d46c:	4293      	cmp	r3, r2
 800d46e:	d004      	beq.n	800d47a <HAL_SAI_Init+0x46>
 800d470:	f240 1181 	movw	r1, #385	@ 0x181
 800d474:	4884      	ldr	r0, [pc, #528]	@ (800d688 <HAL_SAI_Init+0x254>)
 800d476:	f7f4 ffa5 	bl	80023c4 <assert_failed>

  /* Check the SAI Block parameters */
  assert_param(IS_SAI_AUDIO_FREQUENCY(hsai->Init.AudioFrequency));
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	6a1b      	ldr	r3, [r3, #32]
 800d47e:	4a83      	ldr	r2, [pc, #524]	@ (800d68c <HAL_SAI_Init+0x258>)
 800d480:	4293      	cmp	r3, r2
 800d482:	d034      	beq.n	800d4ee <HAL_SAI_Init+0xba>
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	6a1b      	ldr	r3, [r3, #32]
 800d488:	4a81      	ldr	r2, [pc, #516]	@ (800d690 <HAL_SAI_Init+0x25c>)
 800d48a:	4293      	cmp	r3, r2
 800d48c:	d02f      	beq.n	800d4ee <HAL_SAI_Init+0xba>
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	6a1b      	ldr	r3, [r3, #32]
 800d492:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 800d496:	4293      	cmp	r3, r2
 800d498:	d029      	beq.n	800d4ee <HAL_SAI_Init+0xba>
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	6a1b      	ldr	r3, [r3, #32]
 800d49e:	f64a 4244 	movw	r2, #44100	@ 0xac44
 800d4a2:	4293      	cmp	r3, r2
 800d4a4:	d023      	beq.n	800d4ee <HAL_SAI_Init+0xba>
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	6a1b      	ldr	r3, [r3, #32]
 800d4aa:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 800d4ae:	d01e      	beq.n	800d4ee <HAL_SAI_Init+0xba>
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	6a1b      	ldr	r3, [r3, #32]
 800d4b4:	f245 6222 	movw	r2, #22050	@ 0x5622
 800d4b8:	4293      	cmp	r3, r2
 800d4ba:	d018      	beq.n	800d4ee <HAL_SAI_Init+0xba>
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	6a1b      	ldr	r3, [r3, #32]
 800d4c0:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 800d4c4:	d013      	beq.n	800d4ee <HAL_SAI_Init+0xba>
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	6a1b      	ldr	r3, [r3, #32]
 800d4ca:	f642 3211 	movw	r2, #11025	@ 0x2b11
 800d4ce:	4293      	cmp	r3, r2
 800d4d0:	d00d      	beq.n	800d4ee <HAL_SAI_Init+0xba>
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	6a1b      	ldr	r3, [r3, #32]
 800d4d6:	f5b3 5ffa 	cmp.w	r3, #8000	@ 0x1f40
 800d4da:	d008      	beq.n	800d4ee <HAL_SAI_Init+0xba>
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	6a1b      	ldr	r3, [r3, #32]
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	d004      	beq.n	800d4ee <HAL_SAI_Init+0xba>
 800d4e4:	f44f 71c2 	mov.w	r1, #388	@ 0x184
 800d4e8:	4867      	ldr	r0, [pc, #412]	@ (800d688 <HAL_SAI_Init+0x254>)
 800d4ea:	f7f4 ff6b 	bl	80023c4 <assert_failed>
  assert_param(IS_SAI_BLOCK_PROTOCOL(hsai->Init.Protocol));
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d4f2:	2b00      	cmp	r3, #0
 800d4f4:	d00c      	beq.n	800d510 <HAL_SAI_Init+0xdc>
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d4fa:	2b08      	cmp	r3, #8
 800d4fc:	d008      	beq.n	800d510 <HAL_SAI_Init+0xdc>
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d502:	2b04      	cmp	r3, #4
 800d504:	d004      	beq.n	800d510 <HAL_SAI_Init+0xdc>
 800d506:	f240 1185 	movw	r1, #389	@ 0x185
 800d50a:	485f      	ldr	r0, [pc, #380]	@ (800d688 <HAL_SAI_Init+0x254>)
 800d50c:	f7f4 ff5a 	bl	80023c4 <assert_failed>
  assert_param(IS_SAI_BLOCK_MODE(hsai->Init.AudioMode));
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	685b      	ldr	r3, [r3, #4]
 800d514:	2b00      	cmp	r3, #0
 800d516:	d010      	beq.n	800d53a <HAL_SAI_Init+0x106>
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	685b      	ldr	r3, [r3, #4]
 800d51c:	2b01      	cmp	r3, #1
 800d51e:	d00c      	beq.n	800d53a <HAL_SAI_Init+0x106>
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	685b      	ldr	r3, [r3, #4]
 800d524:	2b02      	cmp	r3, #2
 800d526:	d008      	beq.n	800d53a <HAL_SAI_Init+0x106>
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	685b      	ldr	r3, [r3, #4]
 800d52c:	2b03      	cmp	r3, #3
 800d52e:	d004      	beq.n	800d53a <HAL_SAI_Init+0x106>
 800d530:	f44f 71c3 	mov.w	r1, #390	@ 0x186
 800d534:	4854      	ldr	r0, [pc, #336]	@ (800d688 <HAL_SAI_Init+0x254>)
 800d536:	f7f4 ff45 	bl	80023c4 <assert_failed>
  assert_param(IS_SAI_BLOCK_DATASIZE(hsai->Init.DataSize));
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d53e:	2b40      	cmp	r3, #64	@ 0x40
 800d540:	d018      	beq.n	800d574 <HAL_SAI_Init+0x140>
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d546:	2b60      	cmp	r3, #96	@ 0x60
 800d548:	d014      	beq.n	800d574 <HAL_SAI_Init+0x140>
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d54e:	2b80      	cmp	r3, #128	@ 0x80
 800d550:	d010      	beq.n	800d574 <HAL_SAI_Init+0x140>
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d556:	2ba0      	cmp	r3, #160	@ 0xa0
 800d558:	d00c      	beq.n	800d574 <HAL_SAI_Init+0x140>
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d55e:	2bc0      	cmp	r3, #192	@ 0xc0
 800d560:	d008      	beq.n	800d574 <HAL_SAI_Init+0x140>
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d566:	2be0      	cmp	r3, #224	@ 0xe0
 800d568:	d004      	beq.n	800d574 <HAL_SAI_Init+0x140>
 800d56a:	f240 1187 	movw	r1, #391	@ 0x187
 800d56e:	4846      	ldr	r0, [pc, #280]	@ (800d688 <HAL_SAI_Init+0x254>)
 800d570:	f7f4 ff28 	bl	80023c4 <assert_failed>
  assert_param(IS_SAI_BLOCK_FIRST_BIT(hsai->Init.FirstBit));
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d578:	2b00      	cmp	r3, #0
 800d57a:	d009      	beq.n	800d590 <HAL_SAI_Init+0x15c>
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d580:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d584:	d004      	beq.n	800d590 <HAL_SAI_Init+0x15c>
 800d586:	f44f 71c4 	mov.w	r1, #392	@ 0x188
 800d58a:	483f      	ldr	r0, [pc, #252]	@ (800d688 <HAL_SAI_Init+0x254>)
 800d58c:	f7f4 ff1a 	bl	80023c4 <assert_failed>
  assert_param(IS_SAI_BLOCK_CLOCK_STROBING(hsai->Init.ClockStrobing));
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d594:	2b00      	cmp	r3, #0
 800d596:	d008      	beq.n	800d5aa <HAL_SAI_Init+0x176>
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d59c:	2b01      	cmp	r3, #1
 800d59e:	d004      	beq.n	800d5aa <HAL_SAI_Init+0x176>
 800d5a0:	f240 1189 	movw	r1, #393	@ 0x189
 800d5a4:	4838      	ldr	r0, [pc, #224]	@ (800d688 <HAL_SAI_Init+0x254>)
 800d5a6:	f7f4 ff0d 	bl	80023c4 <assert_failed>
  assert_param(IS_SAI_BLOCK_SYNCHRO(hsai->Init.Synchro));
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	689b      	ldr	r3, [r3, #8]
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	d010      	beq.n	800d5d4 <HAL_SAI_Init+0x1a0>
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	689b      	ldr	r3, [r3, #8]
 800d5b6:	2b01      	cmp	r3, #1
 800d5b8:	d00c      	beq.n	800d5d4 <HAL_SAI_Init+0x1a0>
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	689b      	ldr	r3, [r3, #8]
 800d5be:	2b02      	cmp	r3, #2
 800d5c0:	d008      	beq.n	800d5d4 <HAL_SAI_Init+0x1a0>
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	689b      	ldr	r3, [r3, #8]
 800d5c6:	2b05      	cmp	r3, #5
 800d5c8:	d004      	beq.n	800d5d4 <HAL_SAI_Init+0x1a0>
 800d5ca:	f44f 71c5 	mov.w	r1, #394	@ 0x18a
 800d5ce:	482e      	ldr	r0, [pc, #184]	@ (800d688 <HAL_SAI_Init+0x254>)
 800d5d0:	f7f4 fef8 	bl	80023c4 <assert_failed>
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
  {
    assert_param(IS_SAI_BLOCK_MCK_OUTPUT(hsai->Init.MckOutput));
  }
#else /* SAI_VER_V2_1 */
  assert_param(IS_SAI_BLOCK_MCK_OUTPUT(hsai->Init.MckOutput));
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	691b      	ldr	r3, [r3, #16]
 800d5d8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d5dc:	d008      	beq.n	800d5f0 <HAL_SAI_Init+0x1bc>
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	691b      	ldr	r3, [r3, #16]
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	d004      	beq.n	800d5f0 <HAL_SAI_Init+0x1bc>
 800d5e6:	f44f 71c9 	mov.w	r1, #402	@ 0x192
 800d5ea:	4827      	ldr	r0, [pc, #156]	@ (800d688 <HAL_SAI_Init+0x254>)
 800d5ec:	f7f4 feea 	bl	80023c4 <assert_failed>
#endif /* SAI_VER_V2_X */
  assert_param(IS_SAI_BLOCK_OUTPUT_DRIVE(hsai->Init.OutputDrive));
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	695b      	ldr	r3, [r3, #20]
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	d009      	beq.n	800d60c <HAL_SAI_Init+0x1d8>
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	695b      	ldr	r3, [r3, #20]
 800d5fc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d600:	d004      	beq.n	800d60c <HAL_SAI_Init+0x1d8>
 800d602:	f44f 71ca 	mov.w	r1, #404	@ 0x194
 800d606:	4820      	ldr	r0, [pc, #128]	@ (800d688 <HAL_SAI_Init+0x254>)
 800d608:	f7f4 fedc 	bl	80023c4 <assert_failed>
  assert_param(IS_SAI_BLOCK_NODIVIDER(hsai->Init.NoDivider));
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	699b      	ldr	r3, [r3, #24]
 800d610:	2b00      	cmp	r3, #0
 800d612:	d009      	beq.n	800d628 <HAL_SAI_Init+0x1f4>
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	699b      	ldr	r3, [r3, #24]
 800d618:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800d61c:	d004      	beq.n	800d628 <HAL_SAI_Init+0x1f4>
 800d61e:	f240 1195 	movw	r1, #405	@ 0x195
 800d622:	4819      	ldr	r0, [pc, #100]	@ (800d688 <HAL_SAI_Init+0x254>)
 800d624:	f7f4 fece 	bl	80023c4 <assert_failed>
  assert_param(IS_SAI_BLOCK_FIFO_THRESHOLD(hsai->Init.FIFOThreshold));
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	69db      	ldr	r3, [r3, #28]
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	d014      	beq.n	800d65a <HAL_SAI_Init+0x226>
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	69db      	ldr	r3, [r3, #28]
 800d634:	2b01      	cmp	r3, #1
 800d636:	d010      	beq.n	800d65a <HAL_SAI_Init+0x226>
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	69db      	ldr	r3, [r3, #28]
 800d63c:	2b02      	cmp	r3, #2
 800d63e:	d00c      	beq.n	800d65a <HAL_SAI_Init+0x226>
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	69db      	ldr	r3, [r3, #28]
 800d644:	2b03      	cmp	r3, #3
 800d646:	d008      	beq.n	800d65a <HAL_SAI_Init+0x226>
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	69db      	ldr	r3, [r3, #28]
 800d64c:	2b04      	cmp	r3, #4
 800d64e:	d004      	beq.n	800d65a <HAL_SAI_Init+0x226>
 800d650:	f44f 71cb 	mov.w	r1, #406	@ 0x196
 800d654:	480c      	ldr	r0, [pc, #48]	@ (800d688 <HAL_SAI_Init+0x254>)
 800d656:	f7f4 feb5 	bl	80023c4 <assert_failed>
  assert_param(IS_SAI_MONO_STEREO_MODE(hsai->Init.MonoStereoMode));
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d65e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d662:	d017      	beq.n	800d694 <HAL_SAI_Init+0x260>
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d013      	beq.n	800d694 <HAL_SAI_Init+0x260>
 800d66c:	f240 1197 	movw	r1, #407	@ 0x197
 800d670:	4805      	ldr	r0, [pc, #20]	@ (800d688 <HAL_SAI_Init+0x254>)
 800d672:	f7f4 fea7 	bl	80023c4 <assert_failed>
 800d676:	e00d      	b.n	800d694 <HAL_SAI_Init+0x260>
 800d678:	40015804 	.word	0x40015804
 800d67c:	40015824 	.word	0x40015824
 800d680:	58005404 	.word	0x58005404
 800d684:	58005424 	.word	0x58005424
 800d688:	080216a0 	.word	0x080216a0
 800d68c:	0002ee00 	.word	0x0002ee00
 800d690:	00017700 	.word	0x00017700
  assert_param(IS_SAI_BLOCK_COMPANDING_MODE(hsai->Init.CompandingMode));
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d698:	2b00      	cmp	r3, #0
 800d69a:	d018      	beq.n	800d6ce <HAL_SAI_Init+0x29a>
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d6a0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d6a4:	d013      	beq.n	800d6ce <HAL_SAI_Init+0x29a>
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d6aa:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800d6ae:	d00e      	beq.n	800d6ce <HAL_SAI_Init+0x29a>
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d6b4:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800d6b8:	d009      	beq.n	800d6ce <HAL_SAI_Init+0x29a>
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d6be:	f5b3 4f60 	cmp.w	r3, #57344	@ 0xe000
 800d6c2:	d004      	beq.n	800d6ce <HAL_SAI_Init+0x29a>
 800d6c4:	f44f 71cc 	mov.w	r1, #408	@ 0x198
 800d6c8:	4895      	ldr	r0, [pc, #596]	@ (800d920 <HAL_SAI_Init+0x4ec>)
 800d6ca:	f7f4 fe7b 	bl	80023c4 <assert_failed>
  assert_param(IS_SAI_BLOCK_TRISTATE_MANAGEMENT(hsai->Init.TriState));
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	d008      	beq.n	800d6e8 <HAL_SAI_Init+0x2b4>
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d6da:	2b10      	cmp	r3, #16
 800d6dc:	d004      	beq.n	800d6e8 <HAL_SAI_Init+0x2b4>
 800d6de:	f240 1199 	movw	r1, #409	@ 0x199
 800d6e2:	488f      	ldr	r0, [pc, #572]	@ (800d920 <HAL_SAI_Init+0x4ec>)
 800d6e4:	f7f4 fe6e 	bl	80023c4 <assert_failed>
  assert_param(IS_SAI_BLOCK_SYNCEXT(hsai->Init.SynchroExt));
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	68db      	ldr	r3, [r3, #12]
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d00c      	beq.n	800d70a <HAL_SAI_Init+0x2d6>
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	68db      	ldr	r3, [r3, #12]
 800d6f4:	2b01      	cmp	r3, #1
 800d6f6:	d008      	beq.n	800d70a <HAL_SAI_Init+0x2d6>
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	68db      	ldr	r3, [r3, #12]
 800d6fc:	2b02      	cmp	r3, #2
 800d6fe:	d004      	beq.n	800d70a <HAL_SAI_Init+0x2d6>
 800d700:	f44f 71cd 	mov.w	r1, #410	@ 0x19a
 800d704:	4886      	ldr	r0, [pc, #536]	@ (800d920 <HAL_SAI_Init+0x4ec>)
 800d706:	f7f4 fe5d 	bl	80023c4 <assert_failed>
  assert_param(IS_SAI_BLOCK_MCK_OVERSAMPLING(hsai->Init.MckOverSampling));
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d70e:	2b00      	cmp	r3, #0
 800d710:	d009      	beq.n	800d726 <HAL_SAI_Init+0x2f2>
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d716:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800d71a:	d004      	beq.n	800d726 <HAL_SAI_Init+0x2f2>
 800d71c:	f240 119b 	movw	r1, #411	@ 0x19b
 800d720:	487f      	ldr	r0, [pc, #508]	@ (800d920 <HAL_SAI_Init+0x4ec>)
 800d722:	f7f4 fe4f 	bl	80023c4 <assert_failed>

  /* Check the SAI Block Frame parameters */
  assert_param(IS_SAI_BLOCK_FRAME_LENGTH(hsai->FrameInit.FrameLength));
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d72a:	2b07      	cmp	r3, #7
 800d72c:	d904      	bls.n	800d738 <HAL_SAI_Init+0x304>
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d732:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d736:	d904      	bls.n	800d742 <HAL_SAI_Init+0x30e>
 800d738:	f44f 71cf 	mov.w	r1, #414	@ 0x19e
 800d73c:	4878      	ldr	r0, [pc, #480]	@ (800d920 <HAL_SAI_Init+0x4ec>)
 800d73e:	f7f4 fe41 	bl	80023c4 <assert_failed>
  assert_param(IS_SAI_BLOCK_ACTIVE_FRAME(hsai->FrameInit.ActiveFrameLength));
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d746:	2b00      	cmp	r3, #0
 800d748:	d003      	beq.n	800d752 <HAL_SAI_Init+0x31e>
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d74e:	2b80      	cmp	r3, #128	@ 0x80
 800d750:	d904      	bls.n	800d75c <HAL_SAI_Init+0x328>
 800d752:	f240 119f 	movw	r1, #415	@ 0x19f
 800d756:	4872      	ldr	r0, [pc, #456]	@ (800d920 <HAL_SAI_Init+0x4ec>)
 800d758:	f7f4 fe34 	bl	80023c4 <assert_failed>
  assert_param(IS_SAI_BLOCK_FS_DEFINITION(hsai->FrameInit.FSDefinition));
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d760:	2b00      	cmp	r3, #0
 800d762:	d009      	beq.n	800d778 <HAL_SAI_Init+0x344>
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d768:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d76c:	d004      	beq.n	800d778 <HAL_SAI_Init+0x344>
 800d76e:	f44f 71d0 	mov.w	r1, #416	@ 0x1a0
 800d772:	486b      	ldr	r0, [pc, #428]	@ (800d920 <HAL_SAI_Init+0x4ec>)
 800d774:	f7f4 fe26 	bl	80023c4 <assert_failed>
  assert_param(IS_SAI_BLOCK_FS_POLARITY(hsai->FrameInit.FSPolarity));
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	d009      	beq.n	800d794 <HAL_SAI_Init+0x360>
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d784:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d788:	d004      	beq.n	800d794 <HAL_SAI_Init+0x360>
 800d78a:	f240 11a1 	movw	r1, #417	@ 0x1a1
 800d78e:	4864      	ldr	r0, [pc, #400]	@ (800d920 <HAL_SAI_Init+0x4ec>)
 800d790:	f7f4 fe18 	bl	80023c4 <assert_failed>
  assert_param(IS_SAI_BLOCK_FS_OFFSET(hsai->FrameInit.FSOffset));
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d798:	2b00      	cmp	r3, #0
 800d79a:	d009      	beq.n	800d7b0 <HAL_SAI_Init+0x37c>
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d7a0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800d7a4:	d004      	beq.n	800d7b0 <HAL_SAI_Init+0x37c>
 800d7a6:	f44f 71d1 	mov.w	r1, #418	@ 0x1a2
 800d7aa:	485d      	ldr	r0, [pc, #372]	@ (800d920 <HAL_SAI_Init+0x4ec>)
 800d7ac:	f7f4 fe0a 	bl	80023c4 <assert_failed>

  /* Check the SAI Block Slot parameters */
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d7b4:	2b18      	cmp	r3, #24
 800d7b6:	d904      	bls.n	800d7c2 <HAL_SAI_Init+0x38e>
 800d7b8:	f240 11a5 	movw	r1, #421	@ 0x1a5
 800d7bc:	4858      	ldr	r0, [pc, #352]	@ (800d920 <HAL_SAI_Init+0x4ec>)
 800d7be:	f7f4 fe01 	bl	80023c4 <assert_failed>
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	d00c      	beq.n	800d7e4 <HAL_SAI_Init+0x3b0>
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d7ce:	2b40      	cmp	r3, #64	@ 0x40
 800d7d0:	d008      	beq.n	800d7e4 <HAL_SAI_Init+0x3b0>
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d7d6:	2b80      	cmp	r3, #128	@ 0x80
 800d7d8:	d004      	beq.n	800d7e4 <HAL_SAI_Init+0x3b0>
 800d7da:	f44f 71d3 	mov.w	r1, #422	@ 0x1a6
 800d7de:	4850      	ldr	r0, [pc, #320]	@ (800d920 <HAL_SAI_Init+0x4ec>)
 800d7e0:	f7f4 fdf0 	bl	80023c4 <assert_failed>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	d003      	beq.n	800d7f4 <HAL_SAI_Init+0x3c0>
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d7f0:	2b10      	cmp	r3, #16
 800d7f2:	d904      	bls.n	800d7fe <HAL_SAI_Init+0x3ca>
 800d7f4:	f240 11a7 	movw	r1, #423	@ 0x1a7
 800d7f8:	4849      	ldr	r0, [pc, #292]	@ (800d920 <HAL_SAI_Init+0x4ec>)
 800d7fa:	f7f4 fde3 	bl	80023c4 <assert_failed>
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d802:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d806:	d304      	bcc.n	800d812 <HAL_SAI_Init+0x3de>
 800d808:	f44f 71d4 	mov.w	r1, #424	@ 0x1a8
 800d80c:	4844      	ldr	r0, [pc, #272]	@ (800d920 <HAL_SAI_Init+0x4ec>)
 800d80e:	f7f4 fdd9 	bl	80023c4 <assert_failed>

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800d818:	2b00      	cmp	r3, #0
 800d81a:	d009      	beq.n	800d830 <HAL_SAI_Init+0x3fc>
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800d822:	2b01      	cmp	r3, #1
 800d824:	d004      	beq.n	800d830 <HAL_SAI_Init+0x3fc>
 800d826:	f240 11ab 	movw	r1, #427	@ 0x1ab
 800d82a:	483d      	ldr	r0, [pc, #244]	@ (800d920 <HAL_SAI_Init+0x4ec>)
 800d82c:	f7f4 fdca 	bl	80023c4 <assert_failed>
  if (hsai->Init.PdmInit.Activation == ENABLE)
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800d836:	2b01      	cmp	r3, #1
 800d838:	d12f      	bne.n	800d89a <HAL_SAI_Init+0x466>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d83e:	2b00      	cmp	r3, #0
 800d840:	d003      	beq.n	800d84a <HAL_SAI_Init+0x416>
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d846:	2b03      	cmp	r3, #3
 800d848:	d904      	bls.n	800d854 <HAL_SAI_Init+0x420>
 800d84a:	f44f 71d7 	mov.w	r1, #430	@ 0x1ae
 800d84e:	4834      	ldr	r0, [pc, #208]	@ (800d920 <HAL_SAI_Init+0x4ec>)
 800d850:	f7f4 fdb8 	bl	80023c4 <assert_failed>
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d858:	2b00      	cmp	r3, #0
 800d85a:	d005      	beq.n	800d868 <HAL_SAI_Init+0x434>
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d860:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d864:	2b00      	cmp	r3, #0
 800d866:	d004      	beq.n	800d872 <HAL_SAI_Init+0x43e>
 800d868:	f240 11af 	movw	r1, #431	@ 0x1af
 800d86c:	482c      	ldr	r0, [pc, #176]	@ (800d920 <HAL_SAI_Init+0x4ec>)
 800d86e:	f7f4 fda9 	bl	80023c4 <assert_failed>
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	681b      	ldr	r3, [r3, #0]
 800d876:	4a2b      	ldr	r2, [pc, #172]	@ (800d924 <HAL_SAI_Init+0x4f0>)
 800d878:	4293      	cmp	r3, r2
 800d87a:	d004      	beq.n	800d886 <HAL_SAI_Init+0x452>
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	681b      	ldr	r3, [r3, #0]
 800d880:	4a29      	ldr	r2, [pc, #164]	@ (800d928 <HAL_SAI_Init+0x4f4>)
 800d882:	4293      	cmp	r3, r2
 800d884:	d107      	bne.n	800d896 <HAL_SAI_Init+0x462>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	685b      	ldr	r3, [r3, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 800d88a:	2b01      	cmp	r3, #1
 800d88c:	d103      	bne.n	800d896 <HAL_SAI_Init+0x462>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800d892:	2b00      	cmp	r3, #0
 800d894:	d001      	beq.n	800d89a <HAL_SAI_Init+0x466>
    {
      return HAL_ERROR;
 800d896:	2301      	movs	r3, #1
 800d898:	e1fb      	b.n	800dc92 <HAL_SAI_Init+0x85e>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	681b      	ldr	r3, [r3, #0]
 800d89e:	4a21      	ldr	r2, [pc, #132]	@ (800d924 <HAL_SAI_Init+0x4f0>)
 800d8a0:	4293      	cmp	r3, r2
 800d8a2:	d004      	beq.n	800d8ae <HAL_SAI_Init+0x47a>
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	681b      	ldr	r3, [r3, #0]
 800d8a8:	4a20      	ldr	r2, [pc, #128]	@ (800d92c <HAL_SAI_Init+0x4f8>)
 800d8aa:	4293      	cmp	r3, r2
 800d8ac:	d102      	bne.n	800d8b4 <HAL_SAI_Init+0x480>
  {
    SaiBaseAddress = SAI1;
 800d8ae:	4b20      	ldr	r3, [pc, #128]	@ (800d930 <HAL_SAI_Init+0x4fc>)
 800d8b0:	61bb      	str	r3, [r7, #24]
 800d8b2:	e00e      	b.n	800d8d2 <HAL_SAI_Init+0x49e>
  {
    SaiBaseAddress = SAI3;
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	681b      	ldr	r3, [r3, #0]
 800d8b8:	4a1b      	ldr	r2, [pc, #108]	@ (800d928 <HAL_SAI_Init+0x4f4>)
 800d8ba:	4293      	cmp	r3, r2
 800d8bc:	d004      	beq.n	800d8c8 <HAL_SAI_Init+0x494>
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	681b      	ldr	r3, [r3, #0]
 800d8c2:	4a1c      	ldr	r2, [pc, #112]	@ (800d934 <HAL_SAI_Init+0x500>)
 800d8c4:	4293      	cmp	r3, r2
 800d8c6:	d102      	bne.n	800d8ce <HAL_SAI_Init+0x49a>
  {
    SaiBaseAddress = SAI4;
 800d8c8:	4b1b      	ldr	r3, [pc, #108]	@ (800d938 <HAL_SAI_Init+0x504>)
 800d8ca:	61bb      	str	r3, [r7, #24]
 800d8cc:	e001      	b.n	800d8d2 <HAL_SAI_Init+0x49e>
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 800d8ce:	2301      	movs	r3, #1
 800d8d0:	e1df      	b.n	800dc92 <HAL_SAI_Init+0x85e>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 800d8d8:	b2db      	uxtb	r3, r3
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	d106      	bne.n	800d8ec <HAL_SAI_Init+0x4b8>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	2200      	movs	r2, #0
 800d8e2:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800d8e6:	6878      	ldr	r0, [r7, #4]
 800d8e8:	f7f5 f85a 	bl	80029a0 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 800d8ec:	6878      	ldr	r0, [r7, #4]
 800d8ee:	f000 fb13 	bl	800df18 <SAI_Disable>
 800d8f2:	4603      	mov	r3, r0
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	d001      	beq.n	800d8fc <HAL_SAI_Init+0x4c8>
  {
    return HAL_ERROR;
 800d8f8:	2301      	movs	r3, #1
 800d8fa:	e1ca      	b.n	800dc92 <HAL_SAI_Init+0x85e>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	2202      	movs	r2, #2
 800d900:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	68db      	ldr	r3, [r3, #12]
 800d908:	2b02      	cmp	r3, #2
 800d90a:	d01a      	beq.n	800d942 <HAL_SAI_Init+0x50e>
 800d90c:	2b02      	cmp	r3, #2
 800d90e:	d81b      	bhi.n	800d948 <HAL_SAI_Init+0x514>
 800d910:	2b00      	cmp	r3, #0
 800d912:	d002      	beq.n	800d91a <HAL_SAI_Init+0x4e6>
 800d914:	2b01      	cmp	r3, #1
 800d916:	d011      	beq.n	800d93c <HAL_SAI_Init+0x508>
 800d918:	e016      	b.n	800d948 <HAL_SAI_Init+0x514>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 800d91a:	2300      	movs	r3, #0
 800d91c:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800d91e:	e016      	b.n	800d94e <HAL_SAI_Init+0x51a>
 800d920:	080216a0 	.word	0x080216a0
 800d924:	40015804 	.word	0x40015804
 800d928:	58005404 	.word	0x58005404
 800d92c:	40015824 	.word	0x40015824
 800d930:	40015800 	.word	0x40015800
 800d934:	58005424 	.word	0x58005424
 800d938:	58005400 	.word	0x58005400
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800d93c:	2310      	movs	r3, #16
 800d93e:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800d940:	e005      	b.n	800d94e <HAL_SAI_Init+0x51a>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800d942:	2320      	movs	r3, #32
 800d944:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800d946:	e002      	b.n	800d94e <HAL_SAI_Init+0x51a>
    default:
      tmpregisterGCR = 0;
 800d948:	2300      	movs	r3, #0
 800d94a:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800d94c:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	689b      	ldr	r3, [r3, #8]
 800d952:	2b05      	cmp	r3, #5
 800d954:	d821      	bhi.n	800d99a <HAL_SAI_Init+0x566>
 800d956:	a201      	add	r2, pc, #4	@ (adr r2, 800d95c <HAL_SAI_Init+0x528>)
 800d958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d95c:	0800d975 	.word	0x0800d975
 800d960:	0800d97b 	.word	0x0800d97b
 800d964:	0800d983 	.word	0x0800d983
 800d968:	0800d99b 	.word	0x0800d99b
 800d96c:	0800d99b 	.word	0x0800d99b
 800d970:	0800d98b 	.word	0x0800d98b
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 800d974:	2300      	movs	r3, #0
 800d976:	61fb      	str	r3, [r7, #28]
      break;
 800d978:	e012      	b.n	800d9a0 <HAL_SAI_Init+0x56c>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800d97a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d97e:	61fb      	str	r3, [r7, #28]
      break;
 800d980:	e00e      	b.n	800d9a0 <HAL_SAI_Init+0x56c>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800d982:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800d986:	61fb      	str	r3, [r7, #28]
      break;
 800d988:	e00a      	b.n	800d9a0 <HAL_SAI_Init+0x56c>
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
      break;
#endif /* SAI3 */
#if defined(SAI4)
    case SAI_SYNCHRONOUS_EXT_SAI4 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800d98a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800d98e:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 800d990:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d992:	f043 0303 	orr.w	r3, r3, #3
 800d996:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800d998:	e002      	b.n	800d9a0 <HAL_SAI_Init+0x56c>
#endif /* SAI4 */
    default:
      syncen_bits = 0;
 800d99a:	2300      	movs	r3, #0
 800d99c:	61fb      	str	r3, [r7, #28]
      break;
 800d99e:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 800d9a0:	69bb      	ldr	r3, [r7, #24]
 800d9a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d9a4:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	6a1b      	ldr	r3, [r3, #32]
 800d9aa:	2b00      	cmp	r3, #0
 800d9ac:	f000 808a 	beq.w	800dac4 <HAL_SAI_Init+0x690>
  {
    uint32_t freq = 0;
 800d9b0:	2300      	movs	r3, #0
 800d9b2:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	681b      	ldr	r3, [r3, #0]
 800d9b8:	4a53      	ldr	r2, [pc, #332]	@ (800db08 <HAL_SAI_Init+0x6d4>)
 800d9ba:	4293      	cmp	r3, r2
 800d9bc:	d004      	beq.n	800d9c8 <HAL_SAI_Init+0x594>
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	681b      	ldr	r3, [r3, #0]
 800d9c2:	4a52      	ldr	r2, [pc, #328]	@ (800db0c <HAL_SAI_Init+0x6d8>)
 800d9c4:	4293      	cmp	r3, r2
 800d9c6:	d106      	bne.n	800d9d6 <HAL_SAI_Init+0x5a2>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800d9c8:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800d9cc:	f04f 0100 	mov.w	r1, #0
 800d9d0:	f7fe f9ae 	bl	800bd30 <HAL_RCCEx_GetPeriphCLKFreq>
 800d9d4:	6178      	str	r0, [r7, #20]
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
    }
#endif /* SAI3 */
#if defined(SAI4)
    if (hsai->Instance == SAI4_Block_A)
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	681b      	ldr	r3, [r3, #0]
 800d9da:	4a4d      	ldr	r2, [pc, #308]	@ (800db10 <HAL_SAI_Init+0x6dc>)
 800d9dc:	4293      	cmp	r3, r2
 800d9de:	d106      	bne.n	800d9ee <HAL_SAI_Init+0x5ba>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 800d9e0:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800d9e4:	f04f 0100 	mov.w	r1, #0
 800d9e8:	f7fe f9a2 	bl	800bd30 <HAL_RCCEx_GetPeriphCLKFreq>
 800d9ec:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI4_Block_B)
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	681b      	ldr	r3, [r3, #0]
 800d9f2:	4a48      	ldr	r2, [pc, #288]	@ (800db14 <HAL_SAI_Init+0x6e0>)
 800d9f4:	4293      	cmp	r3, r2
 800d9f6:	d106      	bne.n	800da06 <HAL_SAI_Init+0x5d2>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 800d9f8:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800d9fc:	f04f 0100 	mov.w	r1, #0
 800da00:	f7fe f996 	bl	800bd30 <HAL_RCCEx_GetPeriphCLKFreq>
 800da04:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	699b      	ldr	r3, [r3, #24]
 800da0a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800da0e:	d120      	bne.n	800da52 <HAL_SAI_Init+0x61e>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800da14:	2b04      	cmp	r3, #4
 800da16:	d102      	bne.n	800da1e <HAL_SAI_Init+0x5ea>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 800da18:	2340      	movs	r3, #64	@ 0x40
 800da1a:	60fb      	str	r3, [r7, #12]
 800da1c:	e00a      	b.n	800da34 <HAL_SAI_Init+0x600>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800da22:	2b08      	cmp	r3, #8
 800da24:	d103      	bne.n	800da2e <HAL_SAI_Init+0x5fa>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 800da26:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800da2a:	60fb      	str	r3, [r7, #12]
 800da2c:	e002      	b.n	800da34 <HAL_SAI_Init+0x600>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800da32:	60fb      	str	r3, [r7, #12]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 800da34:	697a      	ldr	r2, [r7, #20]
 800da36:	4613      	mov	r3, r2
 800da38:	009b      	lsls	r3, r3, #2
 800da3a:	4413      	add	r3, r2
 800da3c:	005b      	lsls	r3, r3, #1
 800da3e:	4619      	mov	r1, r3
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	6a1b      	ldr	r3, [r3, #32]
 800da44:	68fa      	ldr	r2, [r7, #12]
 800da46:	fb02 f303 	mul.w	r3, r2, r3
 800da4a:	fbb1 f3f3 	udiv	r3, r1, r3
 800da4e:	613b      	str	r3, [r7, #16]
 800da50:	e017      	b.n	800da82 <HAL_SAI_Init+0x64e>
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800da56:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800da5a:	d101      	bne.n	800da60 <HAL_SAI_Init+0x62c>
 800da5c:	2302      	movs	r3, #2
 800da5e:	e000      	b.n	800da62 <HAL_SAI_Init+0x62e>
 800da60:	2301      	movs	r3, #1
 800da62:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 800da64:	697a      	ldr	r2, [r7, #20]
 800da66:	4613      	mov	r3, r2
 800da68:	009b      	lsls	r3, r3, #2
 800da6a:	4413      	add	r3, r2
 800da6c:	005b      	lsls	r3, r3, #1
 800da6e:	4619      	mov	r1, r3
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	6a1b      	ldr	r3, [r3, #32]
 800da74:	68ba      	ldr	r2, [r7, #8]
 800da76:	fb02 f303 	mul.w	r3, r2, r3
 800da7a:	021b      	lsls	r3, r3, #8
 800da7c:	fbb1 f3f3 	udiv	r3, r1, r3
 800da80:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 800da82:	693b      	ldr	r3, [r7, #16]
 800da84:	4a24      	ldr	r2, [pc, #144]	@ (800db18 <HAL_SAI_Init+0x6e4>)
 800da86:	fba2 2303 	umull	r2, r3, r2, r3
 800da8a:	08da      	lsrs	r2, r3, #3
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 800da90:	6939      	ldr	r1, [r7, #16]
 800da92:	4b21      	ldr	r3, [pc, #132]	@ (800db18 <HAL_SAI_Init+0x6e4>)
 800da94:	fba3 2301 	umull	r2, r3, r3, r1
 800da98:	08da      	lsrs	r2, r3, #3
 800da9a:	4613      	mov	r3, r2
 800da9c:	009b      	lsls	r3, r3, #2
 800da9e:	4413      	add	r3, r2
 800daa0:	005b      	lsls	r3, r3, #1
 800daa2:	1aca      	subs	r2, r1, r3
 800daa4:	2a08      	cmp	r2, #8
 800daa6:	d904      	bls.n	800dab2 <HAL_SAI_Init+0x67e>
    {
      hsai->Init.Mckdiv += 1U;
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800daac:	1c5a      	adds	r2, r3, #1
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dab6:	2b04      	cmp	r3, #4
 800dab8:	d104      	bne.n	800dac4 <HAL_SAI_Init+0x690>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dabe:	085a      	lsrs	r2, r3, #1
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	625a      	str	r2, [r3, #36]	@ 0x24
    }
  }

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dac8:	2b3f      	cmp	r3, #63	@ 0x3f
 800daca:	d904      	bls.n	800dad6 <HAL_SAI_Init+0x6a2>
 800dacc:	f240 2199 	movw	r1, #665	@ 0x299
 800dad0:	4812      	ldr	r0, [pc, #72]	@ (800db1c <HAL_SAI_Init+0x6e8>)
 800dad2:	f7f4 fc77 	bl	80023c4 <assert_failed>

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	685b      	ldr	r3, [r3, #4]
 800dada:	2b00      	cmp	r3, #0
 800dadc:	d003      	beq.n	800dae6 <HAL_SAI_Init+0x6b2>
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	685b      	ldr	r3, [r3, #4]
 800dae2:	2b02      	cmp	r3, #2
 800dae4:	d109      	bne.n	800dafa <HAL_SAI_Init+0x6c6>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800daea:	2b01      	cmp	r3, #1
 800daec:	d101      	bne.n	800daf2 <HAL_SAI_Init+0x6be>
 800daee:	2300      	movs	r3, #0
 800daf0:	e001      	b.n	800daf6 <HAL_SAI_Init+0x6c2>
 800daf2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800daf6:	623b      	str	r3, [r7, #32]
 800daf8:	e014      	b.n	800db24 <HAL_SAI_Init+0x6f0>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dafe:	2b01      	cmp	r3, #1
 800db00:	d10e      	bne.n	800db20 <HAL_SAI_Init+0x6ec>
 800db02:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800db06:	e00c      	b.n	800db22 <HAL_SAI_Init+0x6ee>
 800db08:	40015804 	.word	0x40015804
 800db0c:	40015824 	.word	0x40015824
 800db10:	58005404 	.word	0x58005404
 800db14:	58005424 	.word	0x58005424
 800db18:	cccccccd 	.word	0xcccccccd
 800db1c:	080216a0 	.word	0x080216a0
 800db20:	2300      	movs	r3, #0
 800db22:	623b      	str	r3, [r7, #32]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                            hsai->Init.MckOverSampling);
  }
#else /* SAI_VER_V2_1*/
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	681b      	ldr	r3, [r3, #0]
 800db28:	6819      	ldr	r1, [r3, #0]
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	681a      	ldr	r2, [r3, #0]
 800db2e:	4b5b      	ldr	r3, [pc, #364]	@ (800dc9c <HAL_SAI_Init+0x868>)
 800db30:	400b      	ands	r3, r1
 800db32:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                           SAI_xCR1_MCKEN);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	681b      	ldr	r3, [r3, #0]
 800db38:	6819      	ldr	r1, [r3, #0]
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	685a      	ldr	r2, [r3, #4]
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800db42:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800db48:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800db4e:	431a      	orrs	r2, r3
 800db50:	6a3b      	ldr	r3, [r7, #32]
 800db52:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 800db54:	69fb      	ldr	r3, [r7, #28]
 800db56:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                          ckstr_bits | syncen_bits |                             \
 800db5c:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	695b      	ldr	r3, [r3, #20]
 800db62:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	699b      	ldr	r3, [r3, #24]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800db68:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800db6e:	051b      	lsls	r3, r3, #20
 800db70:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800db76:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	691b      	ldr	r3, [r3, #16]
 800db7c:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	681b      	ldr	r3, [r3, #0]
 800db82:	430a      	orrs	r2, r1
 800db84:	601a      	str	r2, [r3, #0]
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	681b      	ldr	r3, [r3, #0]
 800db8a:	6859      	ldr	r1, [r3, #4]
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	681a      	ldr	r2, [r3, #0]
 800db90:	4b43      	ldr	r3, [pc, #268]	@ (800dca0 <HAL_SAI_Init+0x86c>)
 800db92:	400b      	ands	r3, r1
 800db94:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	681b      	ldr	r3, [r3, #0]
 800db9a:	6859      	ldr	r1, [r3, #4]
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	69da      	ldr	r2, [r3, #28]
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dba4:	431a      	orrs	r2, r3
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dbaa:	431a      	orrs	r2, r3
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	681b      	ldr	r3, [r3, #0]
 800dbb0:	430a      	orrs	r2, r1
 800dbb2:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	681b      	ldr	r3, [r3, #0]
 800dbb8:	6899      	ldr	r1, [r3, #8]
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	681a      	ldr	r2, [r3, #0]
 800dbbe:	4b39      	ldr	r3, [pc, #228]	@ (800dca4 <HAL_SAI_Init+0x870>)
 800dbc0:	400b      	ands	r3, r1
 800dbc2:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	681b      	ldr	r3, [r3, #0]
 800dbc8:	6899      	ldr	r1, [r3, #8]
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dbce:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800dbd4:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
                           hsai->FrameInit.FSOffset |
 800dbda:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                           hsai->FrameInit.FSDefinition |
 800dbe0:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dbe6:	3b01      	subs	r3, #1
 800dbe8:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800dbea:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	681b      	ldr	r3, [r3, #0]
 800dbf0:	430a      	orrs	r2, r1
 800dbf2:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	681b      	ldr	r3, [r3, #0]
 800dbf8:	68d9      	ldr	r1, [r3, #12]
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	681a      	ldr	r2, [r3, #0]
 800dbfe:	f24f 0320 	movw	r3, #61472	@ 0xf020
 800dc02:	400b      	ands	r3, r1
 800dc04:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	681b      	ldr	r3, [r3, #0]
 800dc0a:	68d9      	ldr	r1, [r3, #12]
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800dc14:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800dc1a:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800dc1c:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800dc22:	3b01      	subs	r3, #1
 800dc24:	021b      	lsls	r3, r3, #8
 800dc26:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	681b      	ldr	r3, [r3, #0]
 800dc2c:	430a      	orrs	r2, r1
 800dc2e:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	681b      	ldr	r3, [r3, #0]
 800dc34:	4a1c      	ldr	r2, [pc, #112]	@ (800dca8 <HAL_SAI_Init+0x874>)
 800dc36:	4293      	cmp	r3, r2
 800dc38:	d004      	beq.n	800dc44 <HAL_SAI_Init+0x810>
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	681b      	ldr	r3, [r3, #0]
 800dc3e:	4a1b      	ldr	r2, [pc, #108]	@ (800dcac <HAL_SAI_Init+0x878>)
 800dc40:	4293      	cmp	r3, r2
 800dc42:	d119      	bne.n	800dc78 <HAL_SAI_Init+0x844>
#else
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 800dc44:	69bb      	ldr	r3, [r7, #24]
 800dc46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dc48:	f023 0201 	bic.w	r2, r3, #1
 800dc4c:	69bb      	ldr	r3, [r7, #24]
 800dc4e:	645a      	str	r2, [r3, #68]	@ 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800dc56:	2b01      	cmp	r3, #1
 800dc58:	d10e      	bne.n	800dc78 <HAL_SAI_Init+0x844>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dc62:	3b01      	subs	r3, #1
 800dc64:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800dc66:	431a      	orrs	r2, r3
 800dc68:	69bb      	ldr	r3, [r7, #24]
 800dc6a:	645a      	str	r2, [r3, #68]	@ 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 800dc6c:	69bb      	ldr	r3, [r7, #24]
 800dc6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dc70:	f043 0201 	orr.w	r2, r3, #1
 800dc74:	69bb      	ldr	r3, [r7, #24]
 800dc76:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	2200      	movs	r2, #0
 800dc7c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	2201      	movs	r2, #1
 800dc84:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	2200      	movs	r2, #0
 800dc8c:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

  return HAL_OK;
 800dc90:	2300      	movs	r3, #0
}
 800dc92:	4618      	mov	r0, r3
 800dc94:	3728      	adds	r7, #40	@ 0x28
 800dc96:	46bd      	mov	sp, r7
 800dc98:	bd80      	pop	{r7, pc}
 800dc9a:	bf00      	nop
 800dc9c:	f005c010 	.word	0xf005c010
 800dca0:	ffff1ff0 	.word	0xffff1ff0
 800dca4:	fff88000 	.word	0xfff88000
 800dca8:	40015804 	.word	0x40015804
 800dcac:	58005404 	.word	0x58005404

0800dcb0 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800dcb0:	b480      	push	{r7}
 800dcb2:	b087      	sub	sp, #28
 800dcb4:	af00      	add	r7, sp, #0
 800dcb6:	60f8      	str	r0, [r7, #12]
 800dcb8:	60b9      	str	r1, [r7, #8]
 800dcba:	607a      	str	r2, [r7, #4]
 800dcbc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800dcbe:	2300      	movs	r3, #0
 800dcc0:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800dcc2:	68fb      	ldr	r3, [r7, #12]
 800dcc4:	2200      	movs	r2, #0
 800dcc6:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800dcc8:	68fb      	ldr	r3, [r7, #12]
 800dcca:	2200      	movs	r2, #0
 800dccc:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800dcce:	68fb      	ldr	r3, [r7, #12]
 800dcd0:	685b      	ldr	r3, [r3, #4]
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	d003      	beq.n	800dcde <SAI_InitI2S+0x2e>
 800dcd6:	68fb      	ldr	r3, [r7, #12]
 800dcd8:	685b      	ldr	r3, [r3, #4]
 800dcda:	2b02      	cmp	r3, #2
 800dcdc:	d103      	bne.n	800dce6 <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800dcde:	68fb      	ldr	r3, [r7, #12]
 800dce0:	2200      	movs	r2, #0
 800dce2:	651a      	str	r2, [r3, #80]	@ 0x50
 800dce4:	e002      	b.n	800dcec <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800dce6:	68fb      	ldr	r3, [r7, #12]
 800dce8:	2201      	movs	r2, #1
 800dcea:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 800dcec:	68fb      	ldr	r3, [r7, #12]
 800dcee:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800dcf2:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800dcf4:	68fb      	ldr	r3, [r7, #12]
 800dcf6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800dcfa:	675a      	str	r2, [r3, #116]	@ 0x74
  hsai->SlotInit.FirstBitOffset  = 0;
 800dcfc:	68fb      	ldr	r3, [r7, #12]
 800dcfe:	2200      	movs	r2, #0
 800dd00:	669a      	str	r2, [r3, #104]	@ 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 800dd02:	68fb      	ldr	r3, [r7, #12]
 800dd04:	683a      	ldr	r2, [r7, #0]
 800dd06:	671a      	str	r2, [r3, #112]	@ 0x70

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 800dd08:	683b      	ldr	r3, [r7, #0]
 800dd0a:	f003 0301 	and.w	r3, r3, #1
 800dd0e:	2b00      	cmp	r3, #0
 800dd10:	d001      	beq.n	800dd16 <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 800dd12:	2301      	movs	r3, #1
 800dd14:	e077      	b.n	800de06 <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 800dd16:	68bb      	ldr	r3, [r7, #8]
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	d107      	bne.n	800dd2c <SAI_InitI2S+0x7c>
  {
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800dd1c:	68fb      	ldr	r3, [r7, #12]
 800dd1e:	2200      	movs	r2, #0
 800dd20:	661a      	str	r2, [r3, #96]	@ 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 800dd22:	68fb      	ldr	r3, [r7, #12]
 800dd24:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800dd28:	665a      	str	r2, [r3, #100]	@ 0x64
 800dd2a:	e006      	b.n	800dd3a <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 800dd2c:	68fb      	ldr	r3, [r7, #12]
 800dd2e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800dd32:	661a      	str	r2, [r3, #96]	@ 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 800dd34:	68fb      	ldr	r3, [r7, #12]
 800dd36:	2200      	movs	r2, #0
 800dd38:	665a      	str	r2, [r3, #100]	@ 0x64
  }

  /* Frame definition */
  switch (datasize)
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	2b03      	cmp	r3, #3
 800dd3e:	d84f      	bhi.n	800dde0 <SAI_InitI2S+0x130>
 800dd40:	a201      	add	r2, pc, #4	@ (adr r2, 800dd48 <SAI_InitI2S+0x98>)
 800dd42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd46:	bf00      	nop
 800dd48:	0800dd59 	.word	0x0800dd59
 800dd4c:	0800dd7b 	.word	0x0800dd7b
 800dd50:	0800dd9d 	.word	0x0800dd9d
 800dd54:	0800ddbf 	.word	0x0800ddbf
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800dd58:	68fb      	ldr	r3, [r7, #12]
 800dd5a:	2280      	movs	r2, #128	@ 0x80
 800dd5c:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 800dd5e:	683b      	ldr	r3, [r7, #0]
 800dd60:	085b      	lsrs	r3, r3, #1
 800dd62:	015a      	lsls	r2, r3, #5
 800dd64:	68fb      	ldr	r3, [r7, #12]
 800dd66:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 800dd68:	683b      	ldr	r3, [r7, #0]
 800dd6a:	085b      	lsrs	r3, r3, #1
 800dd6c:	011a      	lsls	r2, r3, #4
 800dd6e:	68fb      	ldr	r3, [r7, #12]
 800dd70:	659a      	str	r2, [r3, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800dd72:	68fb      	ldr	r3, [r7, #12]
 800dd74:	2240      	movs	r2, #64	@ 0x40
 800dd76:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800dd78:	e035      	b.n	800dde6 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800dd7a:	68fb      	ldr	r3, [r7, #12]
 800dd7c:	2280      	movs	r2, #128	@ 0x80
 800dd7e:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800dd80:	683b      	ldr	r3, [r7, #0]
 800dd82:	085b      	lsrs	r3, r3, #1
 800dd84:	019a      	lsls	r2, r3, #6
 800dd86:	68fb      	ldr	r3, [r7, #12]
 800dd88:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800dd8a:	683b      	ldr	r3, [r7, #0]
 800dd8c:	085b      	lsrs	r3, r3, #1
 800dd8e:	015a      	lsls	r2, r3, #5
 800dd90:	68fb      	ldr	r3, [r7, #12]
 800dd92:	659a      	str	r2, [r3, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800dd94:	68fb      	ldr	r3, [r7, #12]
 800dd96:	2280      	movs	r2, #128	@ 0x80
 800dd98:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800dd9a:	e024      	b.n	800dde6 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800dd9c:	68fb      	ldr	r3, [r7, #12]
 800dd9e:	22c0      	movs	r2, #192	@ 0xc0
 800dda0:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800dda2:	683b      	ldr	r3, [r7, #0]
 800dda4:	085b      	lsrs	r3, r3, #1
 800dda6:	019a      	lsls	r2, r3, #6
 800dda8:	68fb      	ldr	r3, [r7, #12]
 800ddaa:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800ddac:	683b      	ldr	r3, [r7, #0]
 800ddae:	085b      	lsrs	r3, r3, #1
 800ddb0:	015a      	lsls	r2, r3, #5
 800ddb2:	68fb      	ldr	r3, [r7, #12]
 800ddb4:	659a      	str	r2, [r3, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800ddb6:	68fb      	ldr	r3, [r7, #12]
 800ddb8:	2280      	movs	r2, #128	@ 0x80
 800ddba:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800ddbc:	e013      	b.n	800dde6 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800ddbe:	68fb      	ldr	r3, [r7, #12]
 800ddc0:	22e0      	movs	r2, #224	@ 0xe0
 800ddc2:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800ddc4:	683b      	ldr	r3, [r7, #0]
 800ddc6:	085b      	lsrs	r3, r3, #1
 800ddc8:	019a      	lsls	r2, r3, #6
 800ddca:	68fb      	ldr	r3, [r7, #12]
 800ddcc:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800ddce:	683b      	ldr	r3, [r7, #0]
 800ddd0:	085b      	lsrs	r3, r3, #1
 800ddd2:	015a      	lsls	r2, r3, #5
 800ddd4:	68fb      	ldr	r3, [r7, #12]
 800ddd6:	659a      	str	r2, [r3, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800ddd8:	68fb      	ldr	r3, [r7, #12]
 800ddda:	2280      	movs	r2, #128	@ 0x80
 800dddc:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800ddde:	e002      	b.n	800dde6 <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 800dde0:	2301      	movs	r3, #1
 800dde2:	75fb      	strb	r3, [r7, #23]
      break;
 800dde4:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800dde6:	68bb      	ldr	r3, [r7, #8]
 800dde8:	2b02      	cmp	r3, #2
 800ddea:	d10b      	bne.n	800de04 <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	2b01      	cmp	r3, #1
 800ddf0:	d102      	bne.n	800ddf8 <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 800ddf2:	68fb      	ldr	r3, [r7, #12]
 800ddf4:	2210      	movs	r2, #16
 800ddf6:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	2b02      	cmp	r3, #2
 800ddfc:	d102      	bne.n	800de04 <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 800ddfe:	68fb      	ldr	r3, [r7, #12]
 800de00:	2208      	movs	r2, #8
 800de02:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }
  return status;
 800de04:	7dfb      	ldrb	r3, [r7, #23]
}
 800de06:	4618      	mov	r0, r3
 800de08:	371c      	adds	r7, #28
 800de0a:	46bd      	mov	sp, r7
 800de0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de10:	4770      	bx	lr
 800de12:	bf00      	nop

0800de14 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800de14:	b480      	push	{r7}
 800de16:	b087      	sub	sp, #28
 800de18:	af00      	add	r7, sp, #0
 800de1a:	60f8      	str	r0, [r7, #12]
 800de1c:	60b9      	str	r1, [r7, #8]
 800de1e:	607a      	str	r2, [r7, #4]
 800de20:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800de22:	2300      	movs	r3, #0
 800de24:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800de26:	68fb      	ldr	r3, [r7, #12]
 800de28:	2200      	movs	r2, #0
 800de2a:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800de2c:	68fb      	ldr	r3, [r7, #12]
 800de2e:	2200      	movs	r2, #0
 800de30:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800de32:	68fb      	ldr	r3, [r7, #12]
 800de34:	685b      	ldr	r3, [r3, #4]
 800de36:	2b00      	cmp	r3, #0
 800de38:	d003      	beq.n	800de42 <SAI_InitPCM+0x2e>
 800de3a:	68fb      	ldr	r3, [r7, #12]
 800de3c:	685b      	ldr	r3, [r3, #4]
 800de3e:	2b02      	cmp	r3, #2
 800de40:	d103      	bne.n	800de4a <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800de42:	68fb      	ldr	r3, [r7, #12]
 800de44:	2201      	movs	r2, #1
 800de46:	651a      	str	r2, [r3, #80]	@ 0x50
 800de48:	e002      	b.n	800de50 <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800de4a:	68fb      	ldr	r3, [r7, #12]
 800de4c:	2200      	movs	r2, #0
 800de4e:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 800de50:	68fb      	ldr	r3, [r7, #12]
 800de52:	2200      	movs	r2, #0
 800de54:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 800de56:	68fb      	ldr	r3, [r7, #12]
 800de58:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800de5c:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 800de5e:	68fb      	ldr	r3, [r7, #12]
 800de60:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800de64:	665a      	str	r2, [r3, #100]	@ 0x64
  hsai->SlotInit.FirstBitOffset  = 0;
 800de66:	68fb      	ldr	r3, [r7, #12]
 800de68:	2200      	movs	r2, #0
 800de6a:	669a      	str	r2, [r3, #104]	@ 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 800de6c:	68fb      	ldr	r3, [r7, #12]
 800de6e:	683a      	ldr	r2, [r7, #0]
 800de70:	671a      	str	r2, [r3, #112]	@ 0x70
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800de72:	68fb      	ldr	r3, [r7, #12]
 800de74:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800de78:	675a      	str	r2, [r3, #116]	@ 0x74

  if (protocol == SAI_PCM_SHORT)
 800de7a:	68bb      	ldr	r3, [r7, #8]
 800de7c:	2b04      	cmp	r3, #4
 800de7e:	d103      	bne.n	800de88 <SAI_InitPCM+0x74>
  {
      hsai->FrameInit.ActiveFrameLength = 1;
 800de80:	68fb      	ldr	r3, [r7, #12]
 800de82:	2201      	movs	r2, #1
 800de84:	659a      	str	r2, [r3, #88]	@ 0x58
 800de86:	e002      	b.n	800de8e <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
      hsai->FrameInit.ActiveFrameLength = 13;
 800de88:	68fb      	ldr	r3, [r7, #12]
 800de8a:	220d      	movs	r2, #13
 800de8c:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  switch (datasize)
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	2b03      	cmp	r3, #3
 800de92:	d837      	bhi.n	800df04 <SAI_InitPCM+0xf0>
 800de94:	a201      	add	r2, pc, #4	@ (adr r2, 800de9c <SAI_InitPCM+0x88>)
 800de96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de9a:	bf00      	nop
 800de9c:	0800dead 	.word	0x0800dead
 800dea0:	0800dec3 	.word	0x0800dec3
 800dea4:	0800ded9 	.word	0x0800ded9
 800dea8:	0800deef 	.word	0x0800deef
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800deac:	68fb      	ldr	r3, [r7, #12]
 800deae:	2280      	movs	r2, #128	@ 0x80
 800deb0:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 16U * nbslot;
 800deb2:	683b      	ldr	r3, [r7, #0]
 800deb4:	011a      	lsls	r2, r3, #4
 800deb6:	68fb      	ldr	r3, [r7, #12]
 800deb8:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800deba:	68fb      	ldr	r3, [r7, #12]
 800debc:	2240      	movs	r2, #64	@ 0x40
 800debe:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800dec0:	e023      	b.n	800df0a <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800dec2:	68fb      	ldr	r3, [r7, #12]
 800dec4:	2280      	movs	r2, #128	@ 0x80
 800dec6:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800dec8:	683b      	ldr	r3, [r7, #0]
 800deca:	015a      	lsls	r2, r3, #5
 800decc:	68fb      	ldr	r3, [r7, #12]
 800dece:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800ded0:	68fb      	ldr	r3, [r7, #12]
 800ded2:	2280      	movs	r2, #128	@ 0x80
 800ded4:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800ded6:	e018      	b.n	800df0a <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800ded8:	68fb      	ldr	r3, [r7, #12]
 800deda:	22c0      	movs	r2, #192	@ 0xc0
 800dedc:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800dede:	683b      	ldr	r3, [r7, #0]
 800dee0:	015a      	lsls	r2, r3, #5
 800dee2:	68fb      	ldr	r3, [r7, #12]
 800dee4:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800dee6:	68fb      	ldr	r3, [r7, #12]
 800dee8:	2280      	movs	r2, #128	@ 0x80
 800deea:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800deec:	e00d      	b.n	800df0a <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800deee:	68fb      	ldr	r3, [r7, #12]
 800def0:	22e0      	movs	r2, #224	@ 0xe0
 800def2:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800def4:	683b      	ldr	r3, [r7, #0]
 800def6:	015a      	lsls	r2, r3, #5
 800def8:	68fb      	ldr	r3, [r7, #12]
 800defa:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800defc:	68fb      	ldr	r3, [r7, #12]
 800defe:	2280      	movs	r2, #128	@ 0x80
 800df00:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800df02:	e002      	b.n	800df0a <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 800df04:	2301      	movs	r3, #1
 800df06:	75fb      	strb	r3, [r7, #23]
      break;
 800df08:	bf00      	nop
  }

  return status;
 800df0a:	7dfb      	ldrb	r3, [r7, #23]
}
 800df0c:	4618      	mov	r0, r3
 800df0e:	371c      	adds	r7, #28
 800df10:	46bd      	mov	sp, r7
 800df12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df16:	4770      	bx	lr

0800df18 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800df18:	b480      	push	{r7}
 800df1a:	b085      	sub	sp, #20
 800df1c:	af00      	add	r7, sp, #0
 800df1e:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800df20:	4b18      	ldr	r3, [pc, #96]	@ (800df84 <SAI_Disable+0x6c>)
 800df22:	681b      	ldr	r3, [r3, #0]
 800df24:	4a18      	ldr	r2, [pc, #96]	@ (800df88 <SAI_Disable+0x70>)
 800df26:	fba2 2303 	umull	r2, r3, r2, r3
 800df2a:	0b1b      	lsrs	r3, r3, #12
 800df2c:	009b      	lsls	r3, r3, #2
 800df2e:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800df30:	2300      	movs	r3, #0
 800df32:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	681b      	ldr	r3, [r3, #0]
 800df38:	681a      	ldr	r2, [r3, #0]
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	681b      	ldr	r3, [r3, #0]
 800df3e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800df42:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 800df44:	68fb      	ldr	r3, [r7, #12]
 800df46:	2b00      	cmp	r3, #0
 800df48:	d10a      	bne.n	800df60 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800df50:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
      status = HAL_TIMEOUT;
 800df5a:	2303      	movs	r3, #3
 800df5c:	72fb      	strb	r3, [r7, #11]
      break;
 800df5e:	e009      	b.n	800df74 <SAI_Disable+0x5c>
    }
    count--;
 800df60:	68fb      	ldr	r3, [r7, #12]
 800df62:	3b01      	subs	r3, #1
 800df64:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	681b      	ldr	r3, [r3, #0]
 800df6a:	681b      	ldr	r3, [r3, #0]
 800df6c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800df70:	2b00      	cmp	r3, #0
 800df72:	d1e7      	bne.n	800df44 <SAI_Disable+0x2c>

  return status;
 800df74:	7afb      	ldrb	r3, [r7, #11]
}
 800df76:	4618      	mov	r0, r3
 800df78:	3714      	adds	r7, #20
 800df7a:	46bd      	mov	sp, r7
 800df7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df80:	4770      	bx	lr
 800df82:	bf00      	nop
 800df84:	24000004 	.word	0x24000004
 800df88:	95cbec1b 	.word	0x95cbec1b

0800df8c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800df8c:	b580      	push	{r7, lr}
 800df8e:	b08a      	sub	sp, #40	@ 0x28
 800df90:	af00      	add	r7, sp, #0
 800df92:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	2b00      	cmp	r3, #0
 800df98:	d101      	bne.n	800df9e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800df9a:	2301      	movs	r3, #1
 800df9c:	e0cb      	b.n	800e136 <HAL_SD_Init+0x1aa>
  }

  /* Check the parameters */
  assert_param(IS_SDMMC_ALL_INSTANCE(hsd->Instance));
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	681b      	ldr	r3, [r3, #0]
 800dfa2:	4a67      	ldr	r2, [pc, #412]	@ (800e140 <HAL_SD_Init+0x1b4>)
 800dfa4:	4293      	cmp	r3, r2
 800dfa6:	d009      	beq.n	800dfbc <HAL_SD_Init+0x30>
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	681b      	ldr	r3, [r3, #0]
 800dfac:	4a65      	ldr	r2, [pc, #404]	@ (800e144 <HAL_SD_Init+0x1b8>)
 800dfae:	4293      	cmp	r3, r2
 800dfb0:	d004      	beq.n	800dfbc <HAL_SD_Init+0x30>
 800dfb2:	f44f 71b0 	mov.w	r1, #352	@ 0x160
 800dfb6:	4864      	ldr	r0, [pc, #400]	@ (800e148 <HAL_SD_Init+0x1bc>)
 800dfb8:	f7f4 fa04 	bl	80023c4 <assert_failed>
  assert_param(IS_SDMMC_CLOCK_EDGE(hsd->Init.ClockEdge));
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	685b      	ldr	r3, [r3, #4]
 800dfc0:	2b00      	cmp	r3, #0
 800dfc2:	d009      	beq.n	800dfd8 <HAL_SD_Init+0x4c>
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	685b      	ldr	r3, [r3, #4]
 800dfc8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800dfcc:	d004      	beq.n	800dfd8 <HAL_SD_Init+0x4c>
 800dfce:	f240 1161 	movw	r1, #353	@ 0x161
 800dfd2:	485d      	ldr	r0, [pc, #372]	@ (800e148 <HAL_SD_Init+0x1bc>)
 800dfd4:	f7f4 f9f6 	bl	80023c4 <assert_failed>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	689b      	ldr	r3, [r3, #8]
 800dfdc:	2b00      	cmp	r3, #0
 800dfde:	d009      	beq.n	800dff4 <HAL_SD_Init+0x68>
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	689b      	ldr	r3, [r3, #8]
 800dfe4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800dfe8:	d004      	beq.n	800dff4 <HAL_SD_Init+0x68>
 800dfea:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800dfee:	4856      	ldr	r0, [pc, #344]	@ (800e148 <HAL_SD_Init+0x1bc>)
 800dff0:	f7f4 f9e8 	bl	80023c4 <assert_failed>
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	68db      	ldr	r3, [r3, #12]
 800dff8:	2b00      	cmp	r3, #0
 800dffa:	d00e      	beq.n	800e01a <HAL_SD_Init+0x8e>
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	68db      	ldr	r3, [r3, #12]
 800e000:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e004:	d009      	beq.n	800e01a <HAL_SD_Init+0x8e>
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	68db      	ldr	r3, [r3, #12]
 800e00a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e00e:	d004      	beq.n	800e01a <HAL_SD_Init+0x8e>
 800e010:	f240 1163 	movw	r1, #355	@ 0x163
 800e014:	484c      	ldr	r0, [pc, #304]	@ (800e148 <HAL_SD_Init+0x1bc>)
 800e016:	f7f4 f9d5 	bl	80023c4 <assert_failed>
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	691b      	ldr	r3, [r3, #16]
 800e01e:	2b00      	cmp	r3, #0
 800e020:	d009      	beq.n	800e036 <HAL_SD_Init+0xaa>
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	691b      	ldr	r3, [r3, #16]
 800e026:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e02a:	d004      	beq.n	800e036 <HAL_SD_Init+0xaa>
 800e02c:	f44f 71b2 	mov.w	r1, #356	@ 0x164
 800e030:	4845      	ldr	r0, [pc, #276]	@ (800e148 <HAL_SD_Init+0x1bc>)
 800e032:	f7f4 f9c7 	bl	80023c4 <assert_failed>
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	695b      	ldr	r3, [r3, #20]
 800e03a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e03e:	d304      	bcc.n	800e04a <HAL_SD_Init+0xbe>
 800e040:	f240 1165 	movw	r1, #357	@ 0x165
 800e044:	4840      	ldr	r0, [pc, #256]	@ (800e148 <HAL_SD_Init+0x1bc>)
 800e046:	f7f4 f9bd 	bl	80023c4 <assert_failed>

  if (hsd->State == HAL_SD_STATE_RESET)
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e050:	b2db      	uxtb	r3, r3
 800e052:	2b00      	cmp	r3, #0
 800e054:	d105      	bne.n	800e062 <HAL_SD_Init+0xd6>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	2200      	movs	r2, #0
 800e05a:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800e05c:	6878      	ldr	r0, [r7, #4]
 800e05e:	f7f4 fd71 	bl	8002b44 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	2204      	movs	r2, #4
 800e066:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800e06a:	6878      	ldr	r0, [r7, #4]
 800e06c:	f000 f86e 	bl	800e14c <HAL_SD_InitCard>
 800e070:	4603      	mov	r3, r0
 800e072:	2b00      	cmp	r3, #0
 800e074:	d001      	beq.n	800e07a <HAL_SD_Init+0xee>
  {
    return HAL_ERROR;
 800e076:	2301      	movs	r3, #1
 800e078:	e05d      	b.n	800e136 <HAL_SD_Init+0x1aa>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800e07a:	f107 0308 	add.w	r3, r7, #8
 800e07e:	4619      	mov	r1, r3
 800e080:	6878      	ldr	r0, [r7, #4]
 800e082:	f000 fdbb 	bl	800ebfc <HAL_SD_GetCardStatus>
 800e086:	4603      	mov	r3, r0
 800e088:	2b00      	cmp	r3, #0
 800e08a:	d001      	beq.n	800e090 <HAL_SD_Init+0x104>
  {
    return HAL_ERROR;
 800e08c:	2301      	movs	r3, #1
 800e08e:	e052      	b.n	800e136 <HAL_SD_Init+0x1aa>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800e090:	7e3b      	ldrb	r3, [r7, #24]
 800e092:	b2db      	uxtb	r3, r3
 800e094:	627b      	str	r3, [r7, #36]	@ 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800e096:	7e7b      	ldrb	r3, [r7, #25]
 800e098:	b2db      	uxtb	r3, r3
 800e09a:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e0a0:	2b01      	cmp	r3, #1
 800e0a2:	d10a      	bne.n	800e0ba <HAL_SD_Init+0x12e>
 800e0a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e0a6:	2b00      	cmp	r3, #0
 800e0a8:	d102      	bne.n	800e0b0 <HAL_SD_Init+0x124>
 800e0aa:	6a3b      	ldr	r3, [r7, #32]
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	d004      	beq.n	800e0ba <HAL_SD_Init+0x12e>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e0b6:	659a      	str	r2, [r3, #88]	@ 0x58
 800e0b8:	e00b      	b.n	800e0d2 <HAL_SD_Init+0x146>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e0be:	2b01      	cmp	r3, #1
 800e0c0:	d104      	bne.n	800e0cc <HAL_SD_Init+0x140>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800e0c8:	659a      	str	r2, [r3, #88]	@ 0x58
 800e0ca:	e002      	b.n	800e0d2 <HAL_SD_Init+0x146>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	2200      	movs	r2, #0
 800e0d0:	659a      	str	r2, [r3, #88]	@ 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	68db      	ldr	r3, [r3, #12]
 800e0d6:	4619      	mov	r1, r3
 800e0d8:	6878      	ldr	r0, [r7, #4]
 800e0da:	f000 fe79 	bl	800edd0 <HAL_SD_ConfigWideBusOperation>
 800e0de:	4603      	mov	r3, r0
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	d001      	beq.n	800e0e8 <HAL_SD_Init+0x15c>
  {
    return HAL_ERROR;
 800e0e4:	2301      	movs	r3, #1
 800e0e6:	e026      	b.n	800e136 <HAL_SD_Init+0x1aa>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800e0e8:	f7f5 fb08 	bl	80036fc <HAL_GetTick>
 800e0ec:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800e0ee:	e011      	b.n	800e114 <HAL_SD_Init+0x188>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 800e0f0:	f7f5 fb04 	bl	80036fc <HAL_GetTick>
 800e0f4:	4602      	mov	r2, r0
 800e0f6:	69fb      	ldr	r3, [r7, #28]
 800e0f8:	1ad3      	subs	r3, r2, r3
 800e0fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e0fe:	d109      	bne.n	800e114 <HAL_SD_Init+0x188>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800e106:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	2201      	movs	r2, #1
 800e10c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_TIMEOUT;
 800e110:	2303      	movs	r3, #3
 800e112:	e010      	b.n	800e136 <HAL_SD_Init+0x1aa>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800e114:	6878      	ldr	r0, [r7, #4]
 800e116:	f000 ff7f 	bl	800f018 <HAL_SD_GetCardState>
 800e11a:	4603      	mov	r3, r0
 800e11c:	2b04      	cmp	r3, #4
 800e11e:	d1e7      	bne.n	800e0f0 <HAL_SD_Init+0x164>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	2200      	movs	r2, #0
 800e124:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	2200      	movs	r2, #0
 800e12a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	2201      	movs	r2, #1
 800e130:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 800e134:	2300      	movs	r3, #0
}
 800e136:	4618      	mov	r0, r3
 800e138:	3728      	adds	r7, #40	@ 0x28
 800e13a:	46bd      	mov	sp, r7
 800e13c:	bd80      	pop	{r7, pc}
 800e13e:	bf00      	nop
 800e140:	52007000 	.word	0x52007000
 800e144:	48022400 	.word	0x48022400
 800e148:	080216d8 	.word	0x080216d8

0800e14c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800e14c:	b590      	push	{r4, r7, lr}
 800e14e:	b08d      	sub	sp, #52	@ 0x34
 800e150:	af02      	add	r7, sp, #8
 800e152:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800e154:	2300      	movs	r3, #0
 800e156:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800e158:	2300      	movs	r3, #0
 800e15a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800e15c:	2300      	movs	r3, #0
 800e15e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800e160:	2300      	movs	r3, #0
 800e162:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800e164:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800e168:	f04f 0100 	mov.w	r1, #0
 800e16c:	f7fd fde0 	bl	800bd30 <HAL_RCCEx_GetPeriphCLKFreq>
 800e170:	6278      	str	r0, [r7, #36]	@ 0x24
  if (sdmmc_clk == 0U)
 800e172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e174:	2b00      	cmp	r3, #0
 800e176:	d109      	bne.n	800e18c <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	2201      	movs	r2, #1
 800e17c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800e186:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800e188:	2301      	movs	r3, #1
 800e18a:	e070      	b.n	800e26e <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800e18c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e18e:	0a1b      	lsrs	r3, r3, #8
 800e190:	4a39      	ldr	r2, [pc, #228]	@ (800e278 <HAL_SD_InitCard+0x12c>)
 800e192:	fba2 2303 	umull	r2, r3, r2, r3
 800e196:	091b      	lsrs	r3, r3, #4
 800e198:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	681c      	ldr	r4, [r3, #0]
 800e19e:	466a      	mov	r2, sp
 800e1a0:	f107 0318 	add.w	r3, r7, #24
 800e1a4:	e893 0003 	ldmia.w	r3, {r0, r1}
 800e1a8:	e882 0003 	stmia.w	r2, {r0, r1}
 800e1ac:	f107 030c 	add.w	r3, r7, #12
 800e1b0:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e1b2:	4620      	mov	r0, r4
 800e1b4:	f004 fffc 	bl	80131b0 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	681b      	ldr	r3, [r3, #0]
 800e1bc:	4618      	mov	r0, r3
 800e1be:	f005 f889 	bl	80132d4 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 800e1c2:	69fb      	ldr	r3, [r7, #28]
 800e1c4:	2b00      	cmp	r3, #0
 800e1c6:	d005      	beq.n	800e1d4 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 800e1c8:	69fb      	ldr	r3, [r7, #28]
 800e1ca:	005b      	lsls	r3, r3, #1
 800e1cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e1ce:	fbb2 f3f3 	udiv	r3, r2, r3
 800e1d2:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (sdmmc_clk != 0U)
 800e1d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e1d6:	2b00      	cmp	r3, #0
 800e1d8:	d007      	beq.n	800e1ea <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 800e1da:	4a28      	ldr	r2, [pc, #160]	@ (800e27c <HAL_SD_InitCard+0x130>)
 800e1dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e1de:	fbb2 f3f3 	udiv	r3, r2, r3
 800e1e2:	3301      	adds	r3, #1
 800e1e4:	4618      	mov	r0, r3
 800e1e6:	f7f5 fa95 	bl	8003714 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800e1ea:	6878      	ldr	r0, [r7, #4]
 800e1ec:	f001 f802 	bl	800f1f4 <SD_PowerON>
 800e1f0:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e1f2:	6a3b      	ldr	r3, [r7, #32]
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	d00b      	beq.n	800e210 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	2201      	movs	r2, #1
 800e1fc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e204:	6a3b      	ldr	r3, [r7, #32]
 800e206:	431a      	orrs	r2, r3
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800e20c:	2301      	movs	r3, #1
 800e20e:	e02e      	b.n	800e26e <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800e210:	6878      	ldr	r0, [r7, #4]
 800e212:	f000 ff21 	bl	800f058 <SD_InitCard>
 800e216:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e218:	6a3b      	ldr	r3, [r7, #32]
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	d00b      	beq.n	800e236 <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	2201      	movs	r2, #1
 800e222:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e22a:	6a3b      	ldr	r3, [r7, #32]
 800e22c:	431a      	orrs	r2, r3
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800e232:	2301      	movs	r3, #1
 800e234:	e01b      	b.n	800e26e <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	681b      	ldr	r3, [r3, #0]
 800e23a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800e23e:	4618      	mov	r0, r3
 800e240:	f005 f9a4 	bl	801358c <SDMMC_CmdBlockLength>
 800e244:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e246:	6a3b      	ldr	r3, [r7, #32]
 800e248:	2b00      	cmp	r3, #0
 800e24a:	d00f      	beq.n	800e26c <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	681b      	ldr	r3, [r3, #0]
 800e250:	4a0b      	ldr	r2, [pc, #44]	@ (800e280 <HAL_SD_InitCard+0x134>)
 800e252:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e258:	6a3b      	ldr	r3, [r7, #32]
 800e25a:	431a      	orrs	r2, r3
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	2201      	movs	r2, #1
 800e264:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 800e268:	2301      	movs	r3, #1
 800e26a:	e000      	b.n	800e26e <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 800e26c:	2300      	movs	r3, #0
}
 800e26e:	4618      	mov	r0, r3
 800e270:	372c      	adds	r7, #44	@ 0x2c
 800e272:	46bd      	mov	sp, r7
 800e274:	bd90      	pop	{r4, r7, pc}
 800e276:	bf00      	nop
 800e278:	014f8b59 	.word	0x014f8b59
 800e27c:	00012110 	.word	0x00012110
 800e280:	1fe00fff 	.word	0x1fe00fff

0800e284 <HAL_SD_ReadBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks,
                                    uint32_t Timeout)
{
 800e284:	b580      	push	{r7, lr}
 800e286:	b092      	sub	sp, #72	@ 0x48
 800e288:	af00      	add	r7, sp, #0
 800e28a:	60f8      	str	r0, [r7, #12]
 800e28c:	60b9      	str	r1, [r7, #8]
 800e28e:	607a      	str	r2, [r7, #4]
 800e290:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800e292:	f7f5 fa33 	bl	80036fc <HAL_GetTick>
 800e296:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 800e29c:	68bb      	ldr	r3, [r7, #8]
 800e29e:	637b      	str	r3, [r7, #52]	@ 0x34

  if (NULL == pData)
 800e2a0:	68bb      	ldr	r3, [r7, #8]
 800e2a2:	2b00      	cmp	r3, #0
 800e2a4:	d107      	bne.n	800e2b6 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800e2a6:	68fb      	ldr	r3, [r7, #12]
 800e2a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e2aa:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800e2ae:	68fb      	ldr	r3, [r7, #12]
 800e2b0:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800e2b2:	2301      	movs	r3, #1
 800e2b4:	e167      	b.n	800e586 <HAL_SD_ReadBlocks+0x302>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800e2b6:	68fb      	ldr	r3, [r7, #12]
 800e2b8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e2bc:	b2db      	uxtb	r3, r3
 800e2be:	2b01      	cmp	r3, #1
 800e2c0:	f040 815a 	bne.w	800e578 <HAL_SD_ReadBlocks+0x2f4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800e2c4:	68fb      	ldr	r3, [r7, #12]
 800e2c6:	2200      	movs	r2, #0
 800e2c8:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800e2ca:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e2cc:	683b      	ldr	r3, [r7, #0]
 800e2ce:	441a      	add	r2, r3
 800e2d0:	68fb      	ldr	r3, [r7, #12]
 800e2d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e2d4:	429a      	cmp	r2, r3
 800e2d6:	d907      	bls.n	800e2e8 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800e2d8:	68fb      	ldr	r3, [r7, #12]
 800e2da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e2dc:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800e2e0:	68fb      	ldr	r3, [r7, #12]
 800e2e2:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 800e2e4:	2301      	movs	r3, #1
 800e2e6:	e14e      	b.n	800e586 <HAL_SD_ReadBlocks+0x302>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800e2e8:	68fb      	ldr	r3, [r7, #12]
 800e2ea:	2203      	movs	r2, #3
 800e2ec:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800e2f0:	68fb      	ldr	r3, [r7, #12]
 800e2f2:	681b      	ldr	r3, [r3, #0]
 800e2f4:	2200      	movs	r2, #0
 800e2f6:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800e2f8:	68fb      	ldr	r3, [r7, #12]
 800e2fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e2fc:	2b01      	cmp	r3, #1
 800e2fe:	d002      	beq.n	800e306 <HAL_SD_ReadBlocks+0x82>
    {
      add *= BLOCKSIZE;
 800e300:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e302:	025b      	lsls	r3, r3, #9
 800e304:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e306:	f04f 33ff 	mov.w	r3, #4294967295
 800e30a:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800e30c:	683b      	ldr	r3, [r7, #0]
 800e30e:	025b      	lsls	r3, r3, #9
 800e310:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800e312:	2390      	movs	r3, #144	@ 0x90
 800e314:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800e316:	2302      	movs	r3, #2
 800e318:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800e31a:	2300      	movs	r3, #0
 800e31c:	627b      	str	r3, [r7, #36]	@ 0x24
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800e31e:	2300      	movs	r3, #0
 800e320:	62bb      	str	r3, [r7, #40]	@ 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800e322:	68fb      	ldr	r3, [r7, #12]
 800e324:	681b      	ldr	r3, [r3, #0]
 800e326:	f107 0214 	add.w	r2, r7, #20
 800e32a:	4611      	mov	r1, r2
 800e32c:	4618      	mov	r0, r3
 800e32e:	f005 f88b 	bl	8013448 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800e332:	68fb      	ldr	r3, [r7, #12]
 800e334:	681b      	ldr	r3, [r3, #0]
 800e336:	68da      	ldr	r2, [r3, #12]
 800e338:	68fb      	ldr	r3, [r7, #12]
 800e33a:	681b      	ldr	r3, [r3, #0]
 800e33c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e340:	60da      	str	r2, [r3, #12]

    /* Read block(s) in polling mode */
    if (NumberOfBlocks > 1U)
 800e342:	683b      	ldr	r3, [r7, #0]
 800e344:	2b01      	cmp	r3, #1
 800e346:	d90a      	bls.n	800e35e <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800e348:	68fb      	ldr	r3, [r7, #12]
 800e34a:	2202      	movs	r2, #2
 800e34c:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800e34e:	68fb      	ldr	r3, [r7, #12]
 800e350:	681b      	ldr	r3, [r3, #0]
 800e352:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800e354:	4618      	mov	r0, r3
 800e356:	f005 f95f 	bl	8013618 <SDMMC_CmdReadMultiBlock>
 800e35a:	6478      	str	r0, [r7, #68]	@ 0x44
 800e35c:	e009      	b.n	800e372 <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800e35e:	68fb      	ldr	r3, [r7, #12]
 800e360:	2201      	movs	r2, #1
 800e362:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800e364:	68fb      	ldr	r3, [r7, #12]
 800e366:	681b      	ldr	r3, [r3, #0]
 800e368:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800e36a:	4618      	mov	r0, r3
 800e36c:	f005 f931 	bl	80135d2 <SDMMC_CmdReadSingleBlock>
 800e370:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800e372:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e374:	2b00      	cmp	r3, #0
 800e376:	d012      	beq.n	800e39e <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e378:	68fb      	ldr	r3, [r7, #12]
 800e37a:	681b      	ldr	r3, [r3, #0]
 800e37c:	4a84      	ldr	r2, [pc, #528]	@ (800e590 <HAL_SD_ReadBlocks+0x30c>)
 800e37e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800e380:	68fb      	ldr	r3, [r7, #12]
 800e382:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e384:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e386:	431a      	orrs	r2, r3
 800e388:	68fb      	ldr	r3, [r7, #12]
 800e38a:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800e38c:	68fb      	ldr	r3, [r7, #12]
 800e38e:	2201      	movs	r2, #1
 800e390:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800e394:	68fb      	ldr	r3, [r7, #12]
 800e396:	2200      	movs	r2, #0
 800e398:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800e39a:	2301      	movs	r3, #1
 800e39c:	e0f3      	b.n	800e586 <HAL_SD_ReadBlocks+0x302>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 800e39e:	69bb      	ldr	r3, [r7, #24]
 800e3a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800e3a2:	e058      	b.n	800e456 <HAL_SD_ReadBlocks+0x1d2>
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= SDMMC_FIFO_SIZE))
 800e3a4:	68fb      	ldr	r3, [r7, #12]
 800e3a6:	681b      	ldr	r3, [r3, #0]
 800e3a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e3aa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800e3ae:	2b00      	cmp	r3, #0
 800e3b0:	d033      	beq.n	800e41a <HAL_SD_ReadBlocks+0x196>
 800e3b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e3b4:	2b1f      	cmp	r3, #31
 800e3b6:	d930      	bls.n	800e41a <HAL_SD_ReadBlocks+0x196>
      {
        /* Read data from SDMMC Rx FIFO */
        for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 800e3b8:	2300      	movs	r3, #0
 800e3ba:	643b      	str	r3, [r7, #64]	@ 0x40
 800e3bc:	e027      	b.n	800e40e <HAL_SD_ReadBlocks+0x18a>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 800e3be:	68fb      	ldr	r3, [r7, #12]
 800e3c0:	681b      	ldr	r3, [r3, #0]
 800e3c2:	4618      	mov	r0, r3
 800e3c4:	f004 ff68 	bl	8013298 <SDMMC_ReadFIFO>
 800e3c8:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800e3ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e3cc:	b2da      	uxtb	r2, r3
 800e3ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e3d0:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800e3d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e3d4:	3301      	adds	r3, #1
 800e3d6:	637b      	str	r3, [r7, #52]	@ 0x34
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800e3d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e3da:	0a1b      	lsrs	r3, r3, #8
 800e3dc:	b2da      	uxtb	r2, r3
 800e3de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e3e0:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800e3e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e3e4:	3301      	adds	r3, #1
 800e3e6:	637b      	str	r3, [r7, #52]	@ 0x34
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800e3e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e3ea:	0c1b      	lsrs	r3, r3, #16
 800e3ec:	b2da      	uxtb	r2, r3
 800e3ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e3f0:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800e3f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e3f4:	3301      	adds	r3, #1
 800e3f6:	637b      	str	r3, [r7, #52]	@ 0x34
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800e3f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e3fa:	0e1b      	lsrs	r3, r3, #24
 800e3fc:	b2da      	uxtb	r2, r3
 800e3fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e400:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800e402:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e404:	3301      	adds	r3, #1
 800e406:	637b      	str	r3, [r7, #52]	@ 0x34
        for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 800e408:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e40a:	3301      	adds	r3, #1
 800e40c:	643b      	str	r3, [r7, #64]	@ 0x40
 800e40e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e410:	2b07      	cmp	r3, #7
 800e412:	d9d4      	bls.n	800e3be <HAL_SD_ReadBlocks+0x13a>
        }
        dataremaining -= SDMMC_FIFO_SIZE;
 800e414:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e416:	3b20      	subs	r3, #32
 800e418:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 800e41a:	f7f5 f96f 	bl	80036fc <HAL_GetTick>
 800e41e:	4602      	mov	r2, r0
 800e420:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e422:	1ad3      	subs	r3, r2, r3
 800e424:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800e426:	429a      	cmp	r2, r3
 800e428:	d902      	bls.n	800e430 <HAL_SD_ReadBlocks+0x1ac>
 800e42a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e42c:	2b00      	cmp	r3, #0
 800e42e:	d112      	bne.n	800e456 <HAL_SD_ReadBlocks+0x1d2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e430:	68fb      	ldr	r3, [r7, #12]
 800e432:	681b      	ldr	r3, [r3, #0]
 800e434:	4a56      	ldr	r2, [pc, #344]	@ (800e590 <HAL_SD_ReadBlocks+0x30c>)
 800e436:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800e438:	68fb      	ldr	r3, [r7, #12]
 800e43a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e43c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800e440:	68fb      	ldr	r3, [r7, #12]
 800e442:	635a      	str	r2, [r3, #52]	@ 0x34
        hsd->State = HAL_SD_STATE_READY;
 800e444:	68fb      	ldr	r3, [r7, #12]
 800e446:	2201      	movs	r2, #1
 800e448:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        hsd->Context = SD_CONTEXT_NONE;
 800e44c:	68fb      	ldr	r3, [r7, #12]
 800e44e:	2200      	movs	r2, #0
 800e450:	62da      	str	r2, [r3, #44]	@ 0x2c
        return HAL_TIMEOUT;
 800e452:	2303      	movs	r3, #3
 800e454:	e097      	b.n	800e586 <HAL_SD_ReadBlocks+0x302>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800e456:	68fb      	ldr	r3, [r7, #12]
 800e458:	681b      	ldr	r3, [r3, #0]
 800e45a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e45c:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 800e460:	2b00      	cmp	r3, #0
 800e462:	d09f      	beq.n	800e3a4 <HAL_SD_ReadBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800e464:	68fb      	ldr	r3, [r7, #12]
 800e466:	681b      	ldr	r3, [r3, #0]
 800e468:	68da      	ldr	r2, [r3, #12]
 800e46a:	68fb      	ldr	r3, [r7, #12]
 800e46c:	681b      	ldr	r3, [r3, #0]
 800e46e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800e472:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock read */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800e474:	68fb      	ldr	r3, [r7, #12]
 800e476:	681b      	ldr	r3, [r3, #0]
 800e478:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e47a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e47e:	2b00      	cmp	r3, #0
 800e480:	d022      	beq.n	800e4c8 <HAL_SD_ReadBlocks+0x244>
 800e482:	683b      	ldr	r3, [r7, #0]
 800e484:	2b01      	cmp	r3, #1
 800e486:	d91f      	bls.n	800e4c8 <HAL_SD_ReadBlocks+0x244>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 800e488:	68fb      	ldr	r3, [r7, #12]
 800e48a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e48c:	2b03      	cmp	r3, #3
 800e48e:	d01b      	beq.n	800e4c8 <HAL_SD_ReadBlocks+0x244>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800e490:	68fb      	ldr	r3, [r7, #12]
 800e492:	681b      	ldr	r3, [r3, #0]
 800e494:	4618      	mov	r0, r3
 800e496:	f005 f929 	bl	80136ec <SDMMC_CmdStopTransfer>
 800e49a:	6478      	str	r0, [r7, #68]	@ 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 800e49c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	d012      	beq.n	800e4c8 <HAL_SD_ReadBlocks+0x244>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e4a2:	68fb      	ldr	r3, [r7, #12]
 800e4a4:	681b      	ldr	r3, [r3, #0]
 800e4a6:	4a3a      	ldr	r2, [pc, #232]	@ (800e590 <HAL_SD_ReadBlocks+0x30c>)
 800e4a8:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 800e4aa:	68fb      	ldr	r3, [r7, #12]
 800e4ac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e4ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e4b0:	431a      	orrs	r2, r3
 800e4b2:	68fb      	ldr	r3, [r7, #12]
 800e4b4:	635a      	str	r2, [r3, #52]	@ 0x34
          hsd->State = HAL_SD_STATE_READY;
 800e4b6:	68fb      	ldr	r3, [r7, #12]
 800e4b8:	2201      	movs	r2, #1
 800e4ba:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          hsd->Context = SD_CONTEXT_NONE;
 800e4be:	68fb      	ldr	r3, [r7, #12]
 800e4c0:	2200      	movs	r2, #0
 800e4c2:	62da      	str	r2, [r3, #44]	@ 0x2c
          return HAL_ERROR;
 800e4c4:	2301      	movs	r3, #1
 800e4c6:	e05e      	b.n	800e586 <HAL_SD_ReadBlocks+0x302>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800e4c8:	68fb      	ldr	r3, [r7, #12]
 800e4ca:	681b      	ldr	r3, [r3, #0]
 800e4cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e4ce:	f003 0308 	and.w	r3, r3, #8
 800e4d2:	2b00      	cmp	r3, #0
 800e4d4:	d012      	beq.n	800e4fc <HAL_SD_ReadBlocks+0x278>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e4d6:	68fb      	ldr	r3, [r7, #12]
 800e4d8:	681b      	ldr	r3, [r3, #0]
 800e4da:	4a2d      	ldr	r2, [pc, #180]	@ (800e590 <HAL_SD_ReadBlocks+0x30c>)
 800e4dc:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800e4de:	68fb      	ldr	r3, [r7, #12]
 800e4e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e4e2:	f043 0208 	orr.w	r2, r3, #8
 800e4e6:	68fb      	ldr	r3, [r7, #12]
 800e4e8:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800e4ea:	68fb      	ldr	r3, [r7, #12]
 800e4ec:	2201      	movs	r2, #1
 800e4ee:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800e4f2:	68fb      	ldr	r3, [r7, #12]
 800e4f4:	2200      	movs	r2, #0
 800e4f6:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800e4f8:	2301      	movs	r3, #1
 800e4fa:	e044      	b.n	800e586 <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800e4fc:	68fb      	ldr	r3, [r7, #12]
 800e4fe:	681b      	ldr	r3, [r3, #0]
 800e500:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e502:	f003 0302 	and.w	r3, r3, #2
 800e506:	2b00      	cmp	r3, #0
 800e508:	d012      	beq.n	800e530 <HAL_SD_ReadBlocks+0x2ac>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e50a:	68fb      	ldr	r3, [r7, #12]
 800e50c:	681b      	ldr	r3, [r3, #0]
 800e50e:	4a20      	ldr	r2, [pc, #128]	@ (800e590 <HAL_SD_ReadBlocks+0x30c>)
 800e510:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800e512:	68fb      	ldr	r3, [r7, #12]
 800e514:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e516:	f043 0202 	orr.w	r2, r3, #2
 800e51a:	68fb      	ldr	r3, [r7, #12]
 800e51c:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800e51e:	68fb      	ldr	r3, [r7, #12]
 800e520:	2201      	movs	r2, #1
 800e522:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800e526:	68fb      	ldr	r3, [r7, #12]
 800e528:	2200      	movs	r2, #0
 800e52a:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800e52c:	2301      	movs	r3, #1
 800e52e:	e02a      	b.n	800e586 <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800e530:	68fb      	ldr	r3, [r7, #12]
 800e532:	681b      	ldr	r3, [r3, #0]
 800e534:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e536:	f003 0320 	and.w	r3, r3, #32
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	d012      	beq.n	800e564 <HAL_SD_ReadBlocks+0x2e0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e53e:	68fb      	ldr	r3, [r7, #12]
 800e540:	681b      	ldr	r3, [r3, #0]
 800e542:	4a13      	ldr	r2, [pc, #76]	@ (800e590 <HAL_SD_ReadBlocks+0x30c>)
 800e544:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800e546:	68fb      	ldr	r3, [r7, #12]
 800e548:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e54a:	f043 0220 	orr.w	r2, r3, #32
 800e54e:	68fb      	ldr	r3, [r7, #12]
 800e550:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800e552:	68fb      	ldr	r3, [r7, #12]
 800e554:	2201      	movs	r2, #1
 800e556:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800e55a:	68fb      	ldr	r3, [r7, #12]
 800e55c:	2200      	movs	r2, #0
 800e55e:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800e560:	2301      	movs	r3, #1
 800e562:	e010      	b.n	800e586 <HAL_SD_ReadBlocks+0x302>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800e564:	68fb      	ldr	r3, [r7, #12]
 800e566:	681b      	ldr	r3, [r3, #0]
 800e568:	4a0a      	ldr	r2, [pc, #40]	@ (800e594 <HAL_SD_ReadBlocks+0x310>)
 800e56a:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 800e56c:	68fb      	ldr	r3, [r7, #12]
 800e56e:	2201      	movs	r2, #1
 800e570:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    return HAL_OK;
 800e574:	2300      	movs	r3, #0
 800e576:	e006      	b.n	800e586 <HAL_SD_ReadBlocks+0x302>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800e578:	68fb      	ldr	r3, [r7, #12]
 800e57a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e57c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800e580:	68fb      	ldr	r3, [r7, #12]
 800e582:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800e584:	2301      	movs	r3, #1
  }
}
 800e586:	4618      	mov	r0, r3
 800e588:	3748      	adds	r7, #72	@ 0x48
 800e58a:	46bd      	mov	sp, r7
 800e58c:	bd80      	pop	{r7, pc}
 800e58e:	bf00      	nop
 800e590:	1fe00fff 	.word	0x1fe00fff
 800e594:	18000f3a 	.word	0x18000f3a

0800e598 <HAL_SD_WriteBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                     uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800e598:	b580      	push	{r7, lr}
 800e59a:	b092      	sub	sp, #72	@ 0x48
 800e59c:	af00      	add	r7, sp, #0
 800e59e:	60f8      	str	r0, [r7, #12]
 800e5a0:	60b9      	str	r1, [r7, #8]
 800e5a2:	607a      	str	r2, [r7, #4]
 800e5a4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800e5a6:	f7f5 f8a9 	bl	80036fc <HAL_GetTick>
 800e5aa:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	63bb      	str	r3, [r7, #56]	@ 0x38
  const uint8_t *tempbuff = pData;
 800e5b0:	68bb      	ldr	r3, [r7, #8]
 800e5b2:	637b      	str	r3, [r7, #52]	@ 0x34

  if (NULL == pData)
 800e5b4:	68bb      	ldr	r3, [r7, #8]
 800e5b6:	2b00      	cmp	r3, #0
 800e5b8:	d107      	bne.n	800e5ca <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800e5ba:	68fb      	ldr	r3, [r7, #12]
 800e5bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e5be:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800e5c2:	68fb      	ldr	r3, [r7, #12]
 800e5c4:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800e5c6:	2301      	movs	r3, #1
 800e5c8:	e16b      	b.n	800e8a2 <HAL_SD_WriteBlocks+0x30a>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800e5ca:	68fb      	ldr	r3, [r7, #12]
 800e5cc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e5d0:	b2db      	uxtb	r3, r3
 800e5d2:	2b01      	cmp	r3, #1
 800e5d4:	f040 815e 	bne.w	800e894 <HAL_SD_WriteBlocks+0x2fc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800e5d8:	68fb      	ldr	r3, [r7, #12]
 800e5da:	2200      	movs	r2, #0
 800e5dc:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800e5de:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e5e0:	683b      	ldr	r3, [r7, #0]
 800e5e2:	441a      	add	r2, r3
 800e5e4:	68fb      	ldr	r3, [r7, #12]
 800e5e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e5e8:	429a      	cmp	r2, r3
 800e5ea:	d907      	bls.n	800e5fc <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800e5ec:	68fb      	ldr	r3, [r7, #12]
 800e5ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e5f0:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800e5f4:	68fb      	ldr	r3, [r7, #12]
 800e5f6:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 800e5f8:	2301      	movs	r3, #1
 800e5fa:	e152      	b.n	800e8a2 <HAL_SD_WriteBlocks+0x30a>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800e5fc:	68fb      	ldr	r3, [r7, #12]
 800e5fe:	2203      	movs	r2, #3
 800e600:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800e604:	68fb      	ldr	r3, [r7, #12]
 800e606:	681b      	ldr	r3, [r3, #0]
 800e608:	2200      	movs	r2, #0
 800e60a:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800e60c:	68fb      	ldr	r3, [r7, #12]
 800e60e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e610:	2b01      	cmp	r3, #1
 800e612:	d002      	beq.n	800e61a <HAL_SD_WriteBlocks+0x82>
    {
      add *= BLOCKSIZE;
 800e614:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e616:	025b      	lsls	r3, r3, #9
 800e618:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e61a:	f04f 33ff 	mov.w	r3, #4294967295
 800e61e:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800e620:	683b      	ldr	r3, [r7, #0]
 800e622:	025b      	lsls	r3, r3, #9
 800e624:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800e626:	2390      	movs	r3, #144	@ 0x90
 800e628:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800e62a:	2300      	movs	r3, #0
 800e62c:	627b      	str	r3, [r7, #36]	@ 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800e62e:	2300      	movs	r3, #0
 800e630:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800e632:	2300      	movs	r3, #0
 800e634:	62fb      	str	r3, [r7, #44]	@ 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800e636:	68fb      	ldr	r3, [r7, #12]
 800e638:	681b      	ldr	r3, [r3, #0]
 800e63a:	f107 0218 	add.w	r2, r7, #24
 800e63e:	4611      	mov	r1, r2
 800e640:	4618      	mov	r0, r3
 800e642:	f004 ff01 	bl	8013448 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800e646:	68fb      	ldr	r3, [r7, #12]
 800e648:	681b      	ldr	r3, [r3, #0]
 800e64a:	68da      	ldr	r2, [r3, #12]
 800e64c:	68fb      	ldr	r3, [r7, #12]
 800e64e:	681b      	ldr	r3, [r3, #0]
 800e650:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e654:	60da      	str	r2, [r3, #12]

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 800e656:	683b      	ldr	r3, [r7, #0]
 800e658:	2b01      	cmp	r3, #1
 800e65a:	d90a      	bls.n	800e672 <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800e65c:	68fb      	ldr	r3, [r7, #12]
 800e65e:	2220      	movs	r2, #32
 800e660:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800e662:	68fb      	ldr	r3, [r7, #12]
 800e664:	681b      	ldr	r3, [r3, #0]
 800e666:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800e668:	4618      	mov	r0, r3
 800e66a:	f005 f81b 	bl	80136a4 <SDMMC_CmdWriteMultiBlock>
 800e66e:	6478      	str	r0, [r7, #68]	@ 0x44
 800e670:	e009      	b.n	800e686 <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800e672:	68fb      	ldr	r3, [r7, #12]
 800e674:	2210      	movs	r2, #16
 800e676:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800e678:	68fb      	ldr	r3, [r7, #12]
 800e67a:	681b      	ldr	r3, [r3, #0]
 800e67c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800e67e:	4618      	mov	r0, r3
 800e680:	f004 ffed 	bl	801365e <SDMMC_CmdWriteSingleBlock>
 800e684:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800e686:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e688:	2b00      	cmp	r3, #0
 800e68a:	d012      	beq.n	800e6b2 <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e68c:	68fb      	ldr	r3, [r7, #12]
 800e68e:	681b      	ldr	r3, [r3, #0]
 800e690:	4a86      	ldr	r2, [pc, #536]	@ (800e8ac <HAL_SD_WriteBlocks+0x314>)
 800e692:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800e694:	68fb      	ldr	r3, [r7, #12]
 800e696:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e698:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e69a:	431a      	orrs	r2, r3
 800e69c:	68fb      	ldr	r3, [r7, #12]
 800e69e:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800e6a0:	68fb      	ldr	r3, [r7, #12]
 800e6a2:	2201      	movs	r2, #1
 800e6a4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800e6a8:	68fb      	ldr	r3, [r7, #12]
 800e6aa:	2200      	movs	r2, #0
 800e6ac:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800e6ae:	2301      	movs	r3, #1
 800e6b0:	e0f7      	b.n	800e8a2 <HAL_SD_WriteBlocks+0x30a>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800e6b2:	69fb      	ldr	r3, [r7, #28]
 800e6b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 800e6b6:	e05c      	b.n	800e772 <HAL_SD_WriteBlocks+0x1da>
                              SDMMC_FLAG_DATAEND))
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= SDMMC_FIFO_SIZE))
 800e6b8:	68fb      	ldr	r3, [r7, #12]
 800e6ba:	681b      	ldr	r3, [r3, #0]
 800e6bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e6be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e6c2:	2b00      	cmp	r3, #0
 800e6c4:	d037      	beq.n	800e736 <HAL_SD_WriteBlocks+0x19e>
 800e6c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e6c8:	2b1f      	cmp	r3, #31
 800e6ca:	d934      	bls.n	800e736 <HAL_SD_WriteBlocks+0x19e>
      {
        /* Write data to SDMMC Tx FIFO */
        for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 800e6cc:	2300      	movs	r3, #0
 800e6ce:	643b      	str	r3, [r7, #64]	@ 0x40
 800e6d0:	e02b      	b.n	800e72a <HAL_SD_WriteBlocks+0x192>
        {
          data = (uint32_t)(*tempbuff);
 800e6d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e6d4:	781b      	ldrb	r3, [r3, #0]
 800e6d6:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800e6d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e6da:	3301      	adds	r3, #1
 800e6dc:	637b      	str	r3, [r7, #52]	@ 0x34
          data |= ((uint32_t)(*tempbuff) << 8U);
 800e6de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e6e0:	781b      	ldrb	r3, [r3, #0]
 800e6e2:	021a      	lsls	r2, r3, #8
 800e6e4:	697b      	ldr	r3, [r7, #20]
 800e6e6:	4313      	orrs	r3, r2
 800e6e8:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800e6ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e6ec:	3301      	adds	r3, #1
 800e6ee:	637b      	str	r3, [r7, #52]	@ 0x34
          data |= ((uint32_t)(*tempbuff) << 16U);
 800e6f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e6f2:	781b      	ldrb	r3, [r3, #0]
 800e6f4:	041a      	lsls	r2, r3, #16
 800e6f6:	697b      	ldr	r3, [r7, #20]
 800e6f8:	4313      	orrs	r3, r2
 800e6fa:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800e6fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e6fe:	3301      	adds	r3, #1
 800e700:	637b      	str	r3, [r7, #52]	@ 0x34
          data |= ((uint32_t)(*tempbuff) << 24U);
 800e702:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e704:	781b      	ldrb	r3, [r3, #0]
 800e706:	061a      	lsls	r2, r3, #24
 800e708:	697b      	ldr	r3, [r7, #20]
 800e70a:	4313      	orrs	r3, r2
 800e70c:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800e70e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e710:	3301      	adds	r3, #1
 800e712:	637b      	str	r3, [r7, #52]	@ 0x34
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800e714:	68fb      	ldr	r3, [r7, #12]
 800e716:	681b      	ldr	r3, [r3, #0]
 800e718:	f107 0214 	add.w	r2, r7, #20
 800e71c:	4611      	mov	r1, r2
 800e71e:	4618      	mov	r0, r3
 800e720:	f004 fdc7 	bl	80132b2 <SDMMC_WriteFIFO>
        for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 800e724:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e726:	3301      	adds	r3, #1
 800e728:	643b      	str	r3, [r7, #64]	@ 0x40
 800e72a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e72c:	2b07      	cmp	r3, #7
 800e72e:	d9d0      	bls.n	800e6d2 <HAL_SD_WriteBlocks+0x13a>
        }
        dataremaining -= SDMMC_FIFO_SIZE;
 800e730:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e732:	3b20      	subs	r3, #32
 800e734:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 800e736:	f7f4 ffe1 	bl	80036fc <HAL_GetTick>
 800e73a:	4602      	mov	r2, r0
 800e73c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e73e:	1ad3      	subs	r3, r2, r3
 800e740:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800e742:	429a      	cmp	r2, r3
 800e744:	d902      	bls.n	800e74c <HAL_SD_WriteBlocks+0x1b4>
 800e746:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e748:	2b00      	cmp	r3, #0
 800e74a:	d112      	bne.n	800e772 <HAL_SD_WriteBlocks+0x1da>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e74c:	68fb      	ldr	r3, [r7, #12]
 800e74e:	681b      	ldr	r3, [r3, #0]
 800e750:	4a56      	ldr	r2, [pc, #344]	@ (800e8ac <HAL_SD_WriteBlocks+0x314>)
 800e752:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 800e754:	68fb      	ldr	r3, [r7, #12]
 800e756:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e758:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e75a:	431a      	orrs	r2, r3
 800e75c:	68fb      	ldr	r3, [r7, #12]
 800e75e:	635a      	str	r2, [r3, #52]	@ 0x34
        hsd->State = HAL_SD_STATE_READY;
 800e760:	68fb      	ldr	r3, [r7, #12]
 800e762:	2201      	movs	r2, #1
 800e764:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        hsd->Context = SD_CONTEXT_NONE;
 800e768:	68fb      	ldr	r3, [r7, #12]
 800e76a:	2200      	movs	r2, #0
 800e76c:	62da      	str	r2, [r3, #44]	@ 0x2c
        return HAL_TIMEOUT;
 800e76e:	2303      	movs	r3, #3
 800e770:	e097      	b.n	800e8a2 <HAL_SD_WriteBlocks+0x30a>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 800e772:	68fb      	ldr	r3, [r7, #12]
 800e774:	681b      	ldr	r3, [r3, #0]
 800e776:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e778:	f403 738d 	and.w	r3, r3, #282	@ 0x11a
 800e77c:	2b00      	cmp	r3, #0
 800e77e:	d09b      	beq.n	800e6b8 <HAL_SD_WriteBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800e780:	68fb      	ldr	r3, [r7, #12]
 800e782:	681b      	ldr	r3, [r3, #0]
 800e784:	68da      	ldr	r2, [r3, #12]
 800e786:	68fb      	ldr	r3, [r7, #12]
 800e788:	681b      	ldr	r3, [r3, #0]
 800e78a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800e78e:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock write */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800e790:	68fb      	ldr	r3, [r7, #12]
 800e792:	681b      	ldr	r3, [r3, #0]
 800e794:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e796:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e79a:	2b00      	cmp	r3, #0
 800e79c:	d022      	beq.n	800e7e4 <HAL_SD_WriteBlocks+0x24c>
 800e79e:	683b      	ldr	r3, [r7, #0]
 800e7a0:	2b01      	cmp	r3, #1
 800e7a2:	d91f      	bls.n	800e7e4 <HAL_SD_WriteBlocks+0x24c>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 800e7a4:	68fb      	ldr	r3, [r7, #12]
 800e7a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e7a8:	2b03      	cmp	r3, #3
 800e7aa:	d01b      	beq.n	800e7e4 <HAL_SD_WriteBlocks+0x24c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800e7ac:	68fb      	ldr	r3, [r7, #12]
 800e7ae:	681b      	ldr	r3, [r3, #0]
 800e7b0:	4618      	mov	r0, r3
 800e7b2:	f004 ff9b 	bl	80136ec <SDMMC_CmdStopTransfer>
 800e7b6:	6478      	str	r0, [r7, #68]	@ 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 800e7b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e7ba:	2b00      	cmp	r3, #0
 800e7bc:	d012      	beq.n	800e7e4 <HAL_SD_WriteBlocks+0x24c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e7be:	68fb      	ldr	r3, [r7, #12]
 800e7c0:	681b      	ldr	r3, [r3, #0]
 800e7c2:	4a3a      	ldr	r2, [pc, #232]	@ (800e8ac <HAL_SD_WriteBlocks+0x314>)
 800e7c4:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 800e7c6:	68fb      	ldr	r3, [r7, #12]
 800e7c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e7ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e7cc:	431a      	orrs	r2, r3
 800e7ce:	68fb      	ldr	r3, [r7, #12]
 800e7d0:	635a      	str	r2, [r3, #52]	@ 0x34
          hsd->State = HAL_SD_STATE_READY;
 800e7d2:	68fb      	ldr	r3, [r7, #12]
 800e7d4:	2201      	movs	r2, #1
 800e7d6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          hsd->Context = SD_CONTEXT_NONE;
 800e7da:	68fb      	ldr	r3, [r7, #12]
 800e7dc:	2200      	movs	r2, #0
 800e7de:	62da      	str	r2, [r3, #44]	@ 0x2c
          return HAL_ERROR;
 800e7e0:	2301      	movs	r3, #1
 800e7e2:	e05e      	b.n	800e8a2 <HAL_SD_WriteBlocks+0x30a>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800e7e4:	68fb      	ldr	r3, [r7, #12]
 800e7e6:	681b      	ldr	r3, [r3, #0]
 800e7e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e7ea:	f003 0308 	and.w	r3, r3, #8
 800e7ee:	2b00      	cmp	r3, #0
 800e7f0:	d012      	beq.n	800e818 <HAL_SD_WriteBlocks+0x280>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e7f2:	68fb      	ldr	r3, [r7, #12]
 800e7f4:	681b      	ldr	r3, [r3, #0]
 800e7f6:	4a2d      	ldr	r2, [pc, #180]	@ (800e8ac <HAL_SD_WriteBlocks+0x314>)
 800e7f8:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800e7fa:	68fb      	ldr	r3, [r7, #12]
 800e7fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e7fe:	f043 0208 	orr.w	r2, r3, #8
 800e802:	68fb      	ldr	r3, [r7, #12]
 800e804:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800e806:	68fb      	ldr	r3, [r7, #12]
 800e808:	2201      	movs	r2, #1
 800e80a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800e80e:	68fb      	ldr	r3, [r7, #12]
 800e810:	2200      	movs	r2, #0
 800e812:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800e814:	2301      	movs	r3, #1
 800e816:	e044      	b.n	800e8a2 <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800e818:	68fb      	ldr	r3, [r7, #12]
 800e81a:	681b      	ldr	r3, [r3, #0]
 800e81c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e81e:	f003 0302 	and.w	r3, r3, #2
 800e822:	2b00      	cmp	r3, #0
 800e824:	d012      	beq.n	800e84c <HAL_SD_WriteBlocks+0x2b4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e826:	68fb      	ldr	r3, [r7, #12]
 800e828:	681b      	ldr	r3, [r3, #0]
 800e82a:	4a20      	ldr	r2, [pc, #128]	@ (800e8ac <HAL_SD_WriteBlocks+0x314>)
 800e82c:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800e82e:	68fb      	ldr	r3, [r7, #12]
 800e830:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e832:	f043 0202 	orr.w	r2, r3, #2
 800e836:	68fb      	ldr	r3, [r7, #12]
 800e838:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800e83a:	68fb      	ldr	r3, [r7, #12]
 800e83c:	2201      	movs	r2, #1
 800e83e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800e842:	68fb      	ldr	r3, [r7, #12]
 800e844:	2200      	movs	r2, #0
 800e846:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800e848:	2301      	movs	r3, #1
 800e84a:	e02a      	b.n	800e8a2 <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 800e84c:	68fb      	ldr	r3, [r7, #12]
 800e84e:	681b      	ldr	r3, [r3, #0]
 800e850:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e852:	f003 0310 	and.w	r3, r3, #16
 800e856:	2b00      	cmp	r3, #0
 800e858:	d012      	beq.n	800e880 <HAL_SD_WriteBlocks+0x2e8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e85a:	68fb      	ldr	r3, [r7, #12]
 800e85c:	681b      	ldr	r3, [r3, #0]
 800e85e:	4a13      	ldr	r2, [pc, #76]	@ (800e8ac <HAL_SD_WriteBlocks+0x314>)
 800e860:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800e862:	68fb      	ldr	r3, [r7, #12]
 800e864:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e866:	f043 0210 	orr.w	r2, r3, #16
 800e86a:	68fb      	ldr	r3, [r7, #12]
 800e86c:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800e86e:	68fb      	ldr	r3, [r7, #12]
 800e870:	2201      	movs	r2, #1
 800e872:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800e876:	68fb      	ldr	r3, [r7, #12]
 800e878:	2200      	movs	r2, #0
 800e87a:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800e87c:	2301      	movs	r3, #1
 800e87e:	e010      	b.n	800e8a2 <HAL_SD_WriteBlocks+0x30a>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800e880:	68fb      	ldr	r3, [r7, #12]
 800e882:	681b      	ldr	r3, [r3, #0]
 800e884:	4a0a      	ldr	r2, [pc, #40]	@ (800e8b0 <HAL_SD_WriteBlocks+0x318>)
 800e886:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 800e888:	68fb      	ldr	r3, [r7, #12]
 800e88a:	2201      	movs	r2, #1
 800e88c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    return HAL_OK;
 800e890:	2300      	movs	r3, #0
 800e892:	e006      	b.n	800e8a2 <HAL_SD_WriteBlocks+0x30a>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800e894:	68fb      	ldr	r3, [r7, #12]
 800e896:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e898:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800e89c:	68fb      	ldr	r3, [r7, #12]
 800e89e:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800e8a0:	2301      	movs	r3, #1
  }
}
 800e8a2:	4618      	mov	r0, r3
 800e8a4:	3748      	adds	r7, #72	@ 0x48
 800e8a6:	46bd      	mov	sp, r7
 800e8a8:	bd80      	pop	{r7, pc}
 800e8aa:	bf00      	nop
 800e8ac:	1fe00fff 	.word	0x1fe00fff
 800e8b0:	18000f3a 	.word	0x18000f3a

0800e8b4 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800e8b4:	b480      	push	{r7}
 800e8b6:	b083      	sub	sp, #12
 800e8b8:	af00      	add	r7, sp, #0
 800e8ba:	6078      	str	r0, [r7, #4]
 800e8bc:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e8c2:	0f9b      	lsrs	r3, r3, #30
 800e8c4:	b2da      	uxtb	r2, r3
 800e8c6:	683b      	ldr	r3, [r7, #0]
 800e8c8:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e8ce:	0e9b      	lsrs	r3, r3, #26
 800e8d0:	b2db      	uxtb	r3, r3
 800e8d2:	f003 030f 	and.w	r3, r3, #15
 800e8d6:	b2da      	uxtb	r2, r3
 800e8d8:	683b      	ldr	r3, [r7, #0]
 800e8da:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e8e0:	0e1b      	lsrs	r3, r3, #24
 800e8e2:	b2db      	uxtb	r3, r3
 800e8e4:	f003 0303 	and.w	r3, r3, #3
 800e8e8:	b2da      	uxtb	r2, r3
 800e8ea:	683b      	ldr	r3, [r7, #0]
 800e8ec:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e8f2:	0c1b      	lsrs	r3, r3, #16
 800e8f4:	b2da      	uxtb	r2, r3
 800e8f6:	683b      	ldr	r3, [r7, #0]
 800e8f8:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e8fe:	0a1b      	lsrs	r3, r3, #8
 800e900:	b2da      	uxtb	r2, r3
 800e902:	683b      	ldr	r3, [r7, #0]
 800e904:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e90a:	b2da      	uxtb	r2, r3
 800e90c:	683b      	ldr	r3, [r7, #0]
 800e90e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e914:	0d1b      	lsrs	r3, r3, #20
 800e916:	b29a      	uxth	r2, r3
 800e918:	683b      	ldr	r3, [r7, #0]
 800e91a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e920:	0c1b      	lsrs	r3, r3, #16
 800e922:	b2db      	uxtb	r3, r3
 800e924:	f003 030f 	and.w	r3, r3, #15
 800e928:	b2da      	uxtb	r2, r3
 800e92a:	683b      	ldr	r3, [r7, #0]
 800e92c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e932:	0bdb      	lsrs	r3, r3, #15
 800e934:	b2db      	uxtb	r3, r3
 800e936:	f003 0301 	and.w	r3, r3, #1
 800e93a:	b2da      	uxtb	r2, r3
 800e93c:	683b      	ldr	r3, [r7, #0]
 800e93e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e944:	0b9b      	lsrs	r3, r3, #14
 800e946:	b2db      	uxtb	r3, r3
 800e948:	f003 0301 	and.w	r3, r3, #1
 800e94c:	b2da      	uxtb	r2, r3
 800e94e:	683b      	ldr	r3, [r7, #0]
 800e950:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e956:	0b5b      	lsrs	r3, r3, #13
 800e958:	b2db      	uxtb	r3, r3
 800e95a:	f003 0301 	and.w	r3, r3, #1
 800e95e:	b2da      	uxtb	r2, r3
 800e960:	683b      	ldr	r3, [r7, #0]
 800e962:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e968:	0b1b      	lsrs	r3, r3, #12
 800e96a:	b2db      	uxtb	r3, r3
 800e96c:	f003 0301 	and.w	r3, r3, #1
 800e970:	b2da      	uxtb	r2, r3
 800e972:	683b      	ldr	r3, [r7, #0]
 800e974:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800e976:	683b      	ldr	r3, [r7, #0]
 800e978:	2200      	movs	r2, #0
 800e97a:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e980:	2b00      	cmp	r3, #0
 800e982:	d163      	bne.n	800ea4c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e988:	009a      	lsls	r2, r3, #2
 800e98a:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800e98e:	4013      	ands	r3, r2
 800e990:	687a      	ldr	r2, [r7, #4]
 800e992:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 800e994:	0f92      	lsrs	r2, r2, #30
 800e996:	431a      	orrs	r2, r3
 800e998:	683b      	ldr	r3, [r7, #0]
 800e99a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e9a0:	0edb      	lsrs	r3, r3, #27
 800e9a2:	b2db      	uxtb	r3, r3
 800e9a4:	f003 0307 	and.w	r3, r3, #7
 800e9a8:	b2da      	uxtb	r2, r3
 800e9aa:	683b      	ldr	r3, [r7, #0]
 800e9ac:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e9b2:	0e1b      	lsrs	r3, r3, #24
 800e9b4:	b2db      	uxtb	r3, r3
 800e9b6:	f003 0307 	and.w	r3, r3, #7
 800e9ba:	b2da      	uxtb	r2, r3
 800e9bc:	683b      	ldr	r3, [r7, #0]
 800e9be:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e9c4:	0d5b      	lsrs	r3, r3, #21
 800e9c6:	b2db      	uxtb	r3, r3
 800e9c8:	f003 0307 	and.w	r3, r3, #7
 800e9cc:	b2da      	uxtb	r2, r3
 800e9ce:	683b      	ldr	r3, [r7, #0]
 800e9d0:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e9d6:	0c9b      	lsrs	r3, r3, #18
 800e9d8:	b2db      	uxtb	r3, r3
 800e9da:	f003 0307 	and.w	r3, r3, #7
 800e9de:	b2da      	uxtb	r2, r3
 800e9e0:	683b      	ldr	r3, [r7, #0]
 800e9e2:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e9e8:	0bdb      	lsrs	r3, r3, #15
 800e9ea:	b2db      	uxtb	r3, r3
 800e9ec:	f003 0307 	and.w	r3, r3, #7
 800e9f0:	b2da      	uxtb	r2, r3
 800e9f2:	683b      	ldr	r3, [r7, #0]
 800e9f4:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800e9f6:	683b      	ldr	r3, [r7, #0]
 800e9f8:	691b      	ldr	r3, [r3, #16]
 800e9fa:	1c5a      	adds	r2, r3, #1
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800ea00:	683b      	ldr	r3, [r7, #0]
 800ea02:	7e1b      	ldrb	r3, [r3, #24]
 800ea04:	b2db      	uxtb	r3, r3
 800ea06:	f003 0307 	and.w	r3, r3, #7
 800ea0a:	3302      	adds	r3, #2
 800ea0c:	2201      	movs	r2, #1
 800ea0e:	fa02 f303 	lsl.w	r3, r2, r3
 800ea12:	687a      	ldr	r2, [r7, #4]
 800ea14:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800ea16:	fb03 f202 	mul.w	r2, r3, r2
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800ea1e:	683b      	ldr	r3, [r7, #0]
 800ea20:	7a1b      	ldrb	r3, [r3, #8]
 800ea22:	b2db      	uxtb	r3, r3
 800ea24:	f003 030f 	and.w	r3, r3, #15
 800ea28:	2201      	movs	r2, #1
 800ea2a:	409a      	lsls	r2, r3
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	64da      	str	r2, [r3, #76]	@ 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / BLOCKSIZE);
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ea34:	687a      	ldr	r2, [r7, #4]
 800ea36:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800ea38:	0a52      	lsrs	r2, r2, #9
 800ea3a:	fb03 f202 	mul.w	r2, r3, r2
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.LogBlockSize = BLOCKSIZE;
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ea48:	655a      	str	r2, [r3, #84]	@ 0x54
 800ea4a:	e031      	b.n	800eab0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ea50:	2b01      	cmp	r3, #1
 800ea52:	d11d      	bne.n	800ea90 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ea58:	041b      	lsls	r3, r3, #16
 800ea5a:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ea62:	0c1b      	lsrs	r3, r3, #16
 800ea64:	431a      	orrs	r2, r3
 800ea66:	683b      	ldr	r3, [r7, #0]
 800ea68:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800ea6a:	683b      	ldr	r3, [r7, #0]
 800ea6c:	691b      	ldr	r3, [r3, #16]
 800ea6e:	3301      	adds	r3, #1
 800ea70:	029a      	lsls	r2, r3, #10
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.BlockSize = BLOCKSIZE;
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ea84:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	655a      	str	r2, [r3, #84]	@ 0x54
 800ea8e:	e00f      	b.n	800eab0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	681b      	ldr	r3, [r3, #0]
 800ea94:	4a58      	ldr	r2, [pc, #352]	@ (800ebf8 <HAL_SD_GetCardCSD+0x344>)
 800ea96:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ea9c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	2201      	movs	r2, #1
 800eaa8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 800eaac:	2301      	movs	r3, #1
 800eaae:	e09d      	b.n	800ebec <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800eab4:	0b9b      	lsrs	r3, r3, #14
 800eab6:	b2db      	uxtb	r3, r3
 800eab8:	f003 0301 	and.w	r3, r3, #1
 800eabc:	b2da      	uxtb	r2, r3
 800eabe:	683b      	ldr	r3, [r7, #0]
 800eac0:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800eac6:	09db      	lsrs	r3, r3, #7
 800eac8:	b2db      	uxtb	r3, r3
 800eaca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800eace:	b2da      	uxtb	r2, r3
 800ead0:	683b      	ldr	r3, [r7, #0]
 800ead2:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ead8:	b2db      	uxtb	r3, r3
 800eada:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800eade:	b2da      	uxtb	r2, r3
 800eae0:	683b      	ldr	r3, [r7, #0]
 800eae2:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800eae8:	0fdb      	lsrs	r3, r3, #31
 800eaea:	b2da      	uxtb	r2, r3
 800eaec:	683b      	ldr	r3, [r7, #0]
 800eaee:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800eaf4:	0f5b      	lsrs	r3, r3, #29
 800eaf6:	b2db      	uxtb	r3, r3
 800eaf8:	f003 0303 	and.w	r3, r3, #3
 800eafc:	b2da      	uxtb	r2, r3
 800eafe:	683b      	ldr	r3, [r7, #0]
 800eb00:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800eb06:	0e9b      	lsrs	r3, r3, #26
 800eb08:	b2db      	uxtb	r3, r3
 800eb0a:	f003 0307 	and.w	r3, r3, #7
 800eb0e:	b2da      	uxtb	r2, r3
 800eb10:	683b      	ldr	r3, [r7, #0]
 800eb12:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800eb18:	0d9b      	lsrs	r3, r3, #22
 800eb1a:	b2db      	uxtb	r3, r3
 800eb1c:	f003 030f 	and.w	r3, r3, #15
 800eb20:	b2da      	uxtb	r2, r3
 800eb22:	683b      	ldr	r3, [r7, #0]
 800eb24:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800eb2a:	0d5b      	lsrs	r3, r3, #21
 800eb2c:	b2db      	uxtb	r3, r3
 800eb2e:	f003 0301 	and.w	r3, r3, #1
 800eb32:	b2da      	uxtb	r2, r3
 800eb34:	683b      	ldr	r3, [r7, #0]
 800eb36:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800eb3a:	683b      	ldr	r3, [r7, #0]
 800eb3c:	2200      	movs	r2, #0
 800eb3e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800eb46:	0c1b      	lsrs	r3, r3, #16
 800eb48:	b2db      	uxtb	r3, r3
 800eb4a:	f003 0301 	and.w	r3, r3, #1
 800eb4e:	b2da      	uxtb	r2, r3
 800eb50:	683b      	ldr	r3, [r7, #0]
 800eb52:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800eb5a:	0bdb      	lsrs	r3, r3, #15
 800eb5c:	b2db      	uxtb	r3, r3
 800eb5e:	f003 0301 	and.w	r3, r3, #1
 800eb62:	b2da      	uxtb	r2, r3
 800eb64:	683b      	ldr	r3, [r7, #0]
 800eb66:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800eb6e:	0b9b      	lsrs	r3, r3, #14
 800eb70:	b2db      	uxtb	r3, r3
 800eb72:	f003 0301 	and.w	r3, r3, #1
 800eb76:	b2da      	uxtb	r2, r3
 800eb78:	683b      	ldr	r3, [r7, #0]
 800eb7a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800eb82:	0b5b      	lsrs	r3, r3, #13
 800eb84:	b2db      	uxtb	r3, r3
 800eb86:	f003 0301 	and.w	r3, r3, #1
 800eb8a:	b2da      	uxtb	r2, r3
 800eb8c:	683b      	ldr	r3, [r7, #0]
 800eb8e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800eb96:	0b1b      	lsrs	r3, r3, #12
 800eb98:	b2db      	uxtb	r3, r3
 800eb9a:	f003 0301 	and.w	r3, r3, #1
 800eb9e:	b2da      	uxtb	r2, r3
 800eba0:	683b      	ldr	r3, [r7, #0]
 800eba2:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ebaa:	0a9b      	lsrs	r3, r3, #10
 800ebac:	b2db      	uxtb	r3, r3
 800ebae:	f003 0303 	and.w	r3, r3, #3
 800ebb2:	b2da      	uxtb	r2, r3
 800ebb4:	683b      	ldr	r3, [r7, #0]
 800ebb6:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ebbe:	0a1b      	lsrs	r3, r3, #8
 800ebc0:	b2db      	uxtb	r3, r3
 800ebc2:	f003 0303 	and.w	r3, r3, #3
 800ebc6:	b2da      	uxtb	r2, r3
 800ebc8:	683b      	ldr	r3, [r7, #0]
 800ebca:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ebd2:	085b      	lsrs	r3, r3, #1
 800ebd4:	b2db      	uxtb	r3, r3
 800ebd6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ebda:	b2da      	uxtb	r2, r3
 800ebdc:	683b      	ldr	r3, [r7, #0]
 800ebde:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 800ebe2:	683b      	ldr	r3, [r7, #0]
 800ebe4:	2201      	movs	r2, #1
 800ebe6:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 800ebea:	2300      	movs	r3, #0
}
 800ebec:	4618      	mov	r0, r3
 800ebee:	370c      	adds	r7, #12
 800ebf0:	46bd      	mov	sp, r7
 800ebf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebf6:	4770      	bx	lr
 800ebf8:	1fe00fff 	.word	0x1fe00fff

0800ebfc <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800ebfc:	b580      	push	{r7, lr}
 800ebfe:	b094      	sub	sp, #80	@ 0x50
 800ec00:	af00      	add	r7, sp, #0
 800ec02:	6078      	str	r0, [r7, #4]
 800ec04:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800ec06:	2300      	movs	r3, #0
 800ec08:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ec12:	b2db      	uxtb	r3, r3
 800ec14:	2b03      	cmp	r3, #3
 800ec16:	d101      	bne.n	800ec1c <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 800ec18:	2301      	movs	r3, #1
 800ec1a:	e0a7      	b.n	800ed6c <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800ec1c:	f107 0308 	add.w	r3, r7, #8
 800ec20:	4619      	mov	r1, r3
 800ec22:	6878      	ldr	r0, [r7, #4]
 800ec24:	f000 fb74 	bl	800f310 <SD_SendSDStatus>
 800ec28:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800ec2a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ec2c:	2b00      	cmp	r3, #0
 800ec2e:	d011      	beq.n	800ec54 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	681b      	ldr	r3, [r3, #0]
 800ec34:	4a4f      	ldr	r2, [pc, #316]	@ (800ed74 <HAL_SD_GetCardStatus+0x178>)
 800ec36:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ec3c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ec3e:	431a      	orrs	r2, r3
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	2201      	movs	r2, #1
 800ec48:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 800ec4c:	2301      	movs	r3, #1
 800ec4e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 800ec52:	e070      	b.n	800ed36 <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800ec54:	68bb      	ldr	r3, [r7, #8]
 800ec56:	099b      	lsrs	r3, r3, #6
 800ec58:	b2db      	uxtb	r3, r3
 800ec5a:	f003 0303 	and.w	r3, r3, #3
 800ec5e:	b2da      	uxtb	r2, r3
 800ec60:	683b      	ldr	r3, [r7, #0]
 800ec62:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800ec64:	68bb      	ldr	r3, [r7, #8]
 800ec66:	095b      	lsrs	r3, r3, #5
 800ec68:	b2db      	uxtb	r3, r3
 800ec6a:	f003 0301 	and.w	r3, r3, #1
 800ec6e:	b2da      	uxtb	r2, r3
 800ec70:	683b      	ldr	r3, [r7, #0]
 800ec72:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800ec74:	68bb      	ldr	r3, [r7, #8]
 800ec76:	0a1b      	lsrs	r3, r3, #8
 800ec78:	b29b      	uxth	r3, r3
 800ec7a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800ec7e:	b29a      	uxth	r2, r3
 800ec80:	68bb      	ldr	r3, [r7, #8]
 800ec82:	0e1b      	lsrs	r3, r3, #24
 800ec84:	b29b      	uxth	r3, r3
 800ec86:	4313      	orrs	r3, r2
 800ec88:	b29a      	uxth	r2, r3
 800ec8a:	683b      	ldr	r3, [r7, #0]
 800ec8c:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800ec8e:	68fb      	ldr	r3, [r7, #12]
 800ec90:	061a      	lsls	r2, r3, #24
 800ec92:	68fb      	ldr	r3, [r7, #12]
 800ec94:	021b      	lsls	r3, r3, #8
 800ec96:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800ec9a:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800ec9c:	68fb      	ldr	r3, [r7, #12]
 800ec9e:	0a1b      	lsrs	r3, r3, #8
 800eca0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800eca4:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800eca6:	68fb      	ldr	r3, [r7, #12]
 800eca8:	0e1b      	lsrs	r3, r3, #24
 800ecaa:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800ecac:	683b      	ldr	r3, [r7, #0]
 800ecae:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800ecb0:	693b      	ldr	r3, [r7, #16]
 800ecb2:	b2da      	uxtb	r2, r3
 800ecb4:	683b      	ldr	r3, [r7, #0]
 800ecb6:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800ecb8:	693b      	ldr	r3, [r7, #16]
 800ecba:	0a1b      	lsrs	r3, r3, #8
 800ecbc:	b2da      	uxtb	r2, r3
 800ecbe:	683b      	ldr	r3, [r7, #0]
 800ecc0:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800ecc2:	693b      	ldr	r3, [r7, #16]
 800ecc4:	0d1b      	lsrs	r3, r3, #20
 800ecc6:	b2db      	uxtb	r3, r3
 800ecc8:	f003 030f 	and.w	r3, r3, #15
 800eccc:	b2da      	uxtb	r2, r3
 800ecce:	683b      	ldr	r3, [r7, #0]
 800ecd0:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800ecd2:	693b      	ldr	r3, [r7, #16]
 800ecd4:	0c1b      	lsrs	r3, r3, #16
 800ecd6:	b29b      	uxth	r3, r3
 800ecd8:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800ecdc:	b29a      	uxth	r2, r3
 800ecde:	697b      	ldr	r3, [r7, #20]
 800ece0:	b29b      	uxth	r3, r3
 800ece2:	b2db      	uxtb	r3, r3
 800ece4:	b29b      	uxth	r3, r3
 800ece6:	4313      	orrs	r3, r2
 800ece8:	b29a      	uxth	r2, r3
 800ecea:	683b      	ldr	r3, [r7, #0]
 800ecec:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800ecee:	697b      	ldr	r3, [r7, #20]
 800ecf0:	0a9b      	lsrs	r3, r3, #10
 800ecf2:	b2db      	uxtb	r3, r3
 800ecf4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ecf8:	b2da      	uxtb	r2, r3
 800ecfa:	683b      	ldr	r3, [r7, #0]
 800ecfc:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800ecfe:	697b      	ldr	r3, [r7, #20]
 800ed00:	0a1b      	lsrs	r3, r3, #8
 800ed02:	b2db      	uxtb	r3, r3
 800ed04:	f003 0303 	and.w	r3, r3, #3
 800ed08:	b2da      	uxtb	r2, r3
 800ed0a:	683b      	ldr	r3, [r7, #0]
 800ed0c:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800ed0e:	697b      	ldr	r3, [r7, #20]
 800ed10:	091b      	lsrs	r3, r3, #4
 800ed12:	b2db      	uxtb	r3, r3
 800ed14:	f003 030f 	and.w	r3, r3, #15
 800ed18:	b2da      	uxtb	r2, r3
 800ed1a:	683b      	ldr	r3, [r7, #0]
 800ed1c:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800ed1e:	697b      	ldr	r3, [r7, #20]
 800ed20:	b2db      	uxtb	r3, r3
 800ed22:	f003 030f 	and.w	r3, r3, #15
 800ed26:	b2da      	uxtb	r2, r3
 800ed28:	683b      	ldr	r3, [r7, #0]
 800ed2a:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800ed2c:	69bb      	ldr	r3, [r7, #24]
 800ed2e:	0e1b      	lsrs	r3, r3, #24
 800ed30:	b2da      	uxtb	r2, r3
 800ed32:	683b      	ldr	r3, [r7, #0]
 800ed34:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	681b      	ldr	r3, [r3, #0]
 800ed3a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800ed3e:	4618      	mov	r0, r3
 800ed40:	f004 fc24 	bl	801358c <SDMMC_CmdBlockLength>
 800ed44:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800ed46:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ed48:	2b00      	cmp	r3, #0
 800ed4a:	d00d      	beq.n	800ed68 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	681b      	ldr	r3, [r3, #0]
 800ed50:	4a08      	ldr	r2, [pc, #32]	@ (800ed74 <HAL_SD_GetCardStatus+0x178>)
 800ed52:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode = errorstate;
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ed58:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	2201      	movs	r2, #1
 800ed5e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 800ed62:	2301      	movs	r3, #1
 800ed64:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  }

  return status;
 800ed68:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 800ed6c:	4618      	mov	r0, r3
 800ed6e:	3750      	adds	r7, #80	@ 0x50
 800ed70:	46bd      	mov	sp, r7
 800ed72:	bd80      	pop	{r7, pc}
 800ed74:	1fe00fff 	.word	0x1fe00fff

0800ed78 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(const SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800ed78:	b480      	push	{r7}
 800ed7a:	b083      	sub	sp, #12
 800ed7c:	af00      	add	r7, sp, #0
 800ed7e:	6078      	str	r0, [r7, #4]
 800ed80:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ed86:	683b      	ldr	r3, [r7, #0]
 800ed88:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ed8e:	683b      	ldr	r3, [r7, #0]
 800ed90:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800ed96:	683b      	ldr	r3, [r7, #0]
 800ed98:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ed9e:	683b      	ldr	r3, [r7, #0]
 800eda0:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800eda6:	683b      	ldr	r3, [r7, #0]
 800eda8:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800edae:	683b      	ldr	r3, [r7, #0]
 800edb0:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800edb6:	683b      	ldr	r3, [r7, #0]
 800edb8:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800edbe:	683b      	ldr	r3, [r7, #0]
 800edc0:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800edc2:	2300      	movs	r3, #0
}
 800edc4:	4618      	mov	r0, r3
 800edc6:	370c      	adds	r7, #12
 800edc8:	46bd      	mov	sp, r7
 800edca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edce:	4770      	bx	lr

0800edd0 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800edd0:	b590      	push	{r4, r7, lr}
 800edd2:	b08d      	sub	sp, #52	@ 0x34
 800edd4:	af02      	add	r7, sp, #8
 800edd6:	6078      	str	r0, [r7, #4]
 800edd8:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;

  HAL_StatusTypeDef status = HAL_OK;
 800edda:	2300      	movs	r3, #0
 800eddc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));
 800ede0:	683b      	ldr	r3, [r7, #0]
 800ede2:	2b00      	cmp	r3, #0
 800ede4:	d00c      	beq.n	800ee00 <HAL_SD_ConfigWideBusOperation+0x30>
 800ede6:	683b      	ldr	r3, [r7, #0]
 800ede8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800edec:	d008      	beq.n	800ee00 <HAL_SD_ConfigWideBusOperation+0x30>
 800edee:	683b      	ldr	r3, [r7, #0]
 800edf0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800edf4:	d004      	beq.n	800ee00 <HAL_SD_ConfigWideBusOperation+0x30>
 800edf6:	f640 1167 	movw	r1, #2407	@ 0x967
 800edfa:	4882      	ldr	r0, [pc, #520]	@ (800f004 <HAL_SD_ConfigWideBusOperation+0x234>)
 800edfc:	f7f3 fae2 	bl	80023c4 <assert_failed>

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	2203      	movs	r2, #3
 800ee04:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ee0c:	2b03      	cmp	r3, #3
 800ee0e:	d02e      	beq.n	800ee6e <HAL_SD_ConfigWideBusOperation+0x9e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800ee10:	683b      	ldr	r3, [r7, #0]
 800ee12:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ee16:	d106      	bne.n	800ee26 <HAL_SD_ConfigWideBusOperation+0x56>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ee1c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	635a      	str	r2, [r3, #52]	@ 0x34
 800ee24:	e029      	b.n	800ee7a <HAL_SD_ConfigWideBusOperation+0xaa>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800ee26:	683b      	ldr	r3, [r7, #0]
 800ee28:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ee2c:	d10a      	bne.n	800ee44 <HAL_SD_ConfigWideBusOperation+0x74>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800ee2e:	6878      	ldr	r0, [r7, #4]
 800ee30:	f000 fb66 	bl	800f500 <SD_WideBus_Enable>
 800ee34:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800ee36:	687b      	ldr	r3, [r7, #4]
 800ee38:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ee3a:	6a3b      	ldr	r3, [r7, #32]
 800ee3c:	431a      	orrs	r2, r3
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	635a      	str	r2, [r3, #52]	@ 0x34
 800ee42:	e01a      	b.n	800ee7a <HAL_SD_ConfigWideBusOperation+0xaa>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800ee44:	683b      	ldr	r3, [r7, #0]
 800ee46:	2b00      	cmp	r3, #0
 800ee48:	d10a      	bne.n	800ee60 <HAL_SD_ConfigWideBusOperation+0x90>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800ee4a:	6878      	ldr	r0, [r7, #4]
 800ee4c:	f000 fba3 	bl	800f596 <SD_WideBus_Disable>
 800ee50:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ee56:	6a3b      	ldr	r3, [r7, #32]
 800ee58:	431a      	orrs	r2, r3
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	635a      	str	r2, [r3, #52]	@ 0x34
 800ee5e:	e00c      	b.n	800ee7a <HAL_SD_ConfigWideBusOperation+0xaa>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ee64:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	635a      	str	r2, [r3, #52]	@ 0x34
 800ee6c:	e005      	b.n	800ee7a <HAL_SD_ConfigWideBusOperation+0xaa>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ee72:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ee7e:	2b00      	cmp	r3, #0
 800ee80:	d007      	beq.n	800ee92 <HAL_SD_ConfigWideBusOperation+0xc2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	681b      	ldr	r3, [r3, #0]
 800ee86:	4a60      	ldr	r2, [pc, #384]	@ (800f008 <HAL_SD_ConfigWideBusOperation+0x238>)
 800ee88:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 800ee8a:	2301      	movs	r3, #1
 800ee8c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800ee90:	e096      	b.n	800efc0 <HAL_SD_ConfigWideBusOperation+0x1f0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800ee92:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800ee96:	f04f 0100 	mov.w	r1, #0
 800ee9a:	f7fc ff49 	bl	800bd30 <HAL_RCCEx_GetPeriphCLKFreq>
 800ee9e:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 800eea0:	69fb      	ldr	r3, [r7, #28]
 800eea2:	2b00      	cmp	r3, #0
 800eea4:	f000 8083 	beq.w	800efae <HAL_SD_ConfigWideBusOperation+0x1de>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	685b      	ldr	r3, [r3, #4]
 800eeac:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	689b      	ldr	r3, [r3, #8]
 800eeb2:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 800eeb4:	683b      	ldr	r3, [r7, #0]
 800eeb6:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	691b      	ldr	r3, [r3, #16]
 800eebc:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	695a      	ldr	r2, [r3, #20]
 800eec2:	69fb      	ldr	r3, [r7, #28]
 800eec4:	4951      	ldr	r1, [pc, #324]	@ (800f00c <HAL_SD_ConfigWideBusOperation+0x23c>)
 800eec6:	fba1 1303 	umull	r1, r3, r1, r3
 800eeca:	0e1b      	lsrs	r3, r3, #24
 800eecc:	429a      	cmp	r2, r3
 800eece:	d303      	bcc.n	800eed8 <HAL_SD_ConfigWideBusOperation+0x108>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	695b      	ldr	r3, [r3, #20]
 800eed4:	61bb      	str	r3, [r7, #24]
 800eed6:	e05a      	b.n	800ef8e <HAL_SD_ConfigWideBusOperation+0x1be>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800eedc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800eee0:	d103      	bne.n	800eeea <HAL_SD_ConfigWideBusOperation+0x11a>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	695b      	ldr	r3, [r3, #20]
 800eee6:	61bb      	str	r3, [r7, #24]
 800eee8:	e051      	b.n	800ef8e <HAL_SD_ConfigWideBusOperation+0x1be>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800eeee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800eef2:	d126      	bne.n	800ef42 <HAL_SD_ConfigWideBusOperation+0x172>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	695b      	ldr	r3, [r3, #20]
 800eef8:	2b00      	cmp	r3, #0
 800eefa:	d10e      	bne.n	800ef1a <HAL_SD_ConfigWideBusOperation+0x14a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800eefc:	69fb      	ldr	r3, [r7, #28]
 800eefe:	4a44      	ldr	r2, [pc, #272]	@ (800f010 <HAL_SD_ConfigWideBusOperation+0x240>)
 800ef00:	4293      	cmp	r3, r2
 800ef02:	d906      	bls.n	800ef12 <HAL_SD_ConfigWideBusOperation+0x142>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800ef04:	69fb      	ldr	r3, [r7, #28]
 800ef06:	4a41      	ldr	r2, [pc, #260]	@ (800f00c <HAL_SD_ConfigWideBusOperation+0x23c>)
 800ef08:	fba2 2303 	umull	r2, r3, r2, r3
 800ef0c:	0e5b      	lsrs	r3, r3, #25
 800ef0e:	61bb      	str	r3, [r7, #24]
 800ef10:	e03d      	b.n	800ef8e <HAL_SD_ConfigWideBusOperation+0x1be>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	695b      	ldr	r3, [r3, #20]
 800ef16:	61bb      	str	r3, [r7, #24]
 800ef18:	e039      	b.n	800ef8e <HAL_SD_ConfigWideBusOperation+0x1be>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	695b      	ldr	r3, [r3, #20]
 800ef1e:	005b      	lsls	r3, r3, #1
 800ef20:	69fa      	ldr	r2, [r7, #28]
 800ef22:	fbb2 f3f3 	udiv	r3, r2, r3
 800ef26:	4a3a      	ldr	r2, [pc, #232]	@ (800f010 <HAL_SD_ConfigWideBusOperation+0x240>)
 800ef28:	4293      	cmp	r3, r2
 800ef2a:	d906      	bls.n	800ef3a <HAL_SD_ConfigWideBusOperation+0x16a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800ef2c:	69fb      	ldr	r3, [r7, #28]
 800ef2e:	4a37      	ldr	r2, [pc, #220]	@ (800f00c <HAL_SD_ConfigWideBusOperation+0x23c>)
 800ef30:	fba2 2303 	umull	r2, r3, r2, r3
 800ef34:	0e5b      	lsrs	r3, r3, #25
 800ef36:	61bb      	str	r3, [r7, #24]
 800ef38:	e029      	b.n	800ef8e <HAL_SD_ConfigWideBusOperation+0x1be>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	695b      	ldr	r3, [r3, #20]
 800ef3e:	61bb      	str	r3, [r7, #24]
 800ef40:	e025      	b.n	800ef8e <HAL_SD_ConfigWideBusOperation+0x1be>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	695b      	ldr	r3, [r3, #20]
 800ef46:	2b00      	cmp	r3, #0
 800ef48:	d10e      	bne.n	800ef68 <HAL_SD_ConfigWideBusOperation+0x198>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800ef4a:	69fb      	ldr	r3, [r7, #28]
 800ef4c:	4a31      	ldr	r2, [pc, #196]	@ (800f014 <HAL_SD_ConfigWideBusOperation+0x244>)
 800ef4e:	4293      	cmp	r3, r2
 800ef50:	d906      	bls.n	800ef60 <HAL_SD_ConfigWideBusOperation+0x190>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800ef52:	69fb      	ldr	r3, [r7, #28]
 800ef54:	4a2d      	ldr	r2, [pc, #180]	@ (800f00c <HAL_SD_ConfigWideBusOperation+0x23c>)
 800ef56:	fba2 2303 	umull	r2, r3, r2, r3
 800ef5a:	0e1b      	lsrs	r3, r3, #24
 800ef5c:	61bb      	str	r3, [r7, #24]
 800ef5e:	e016      	b.n	800ef8e <HAL_SD_ConfigWideBusOperation+0x1be>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	695b      	ldr	r3, [r3, #20]
 800ef64:	61bb      	str	r3, [r7, #24]
 800ef66:	e012      	b.n	800ef8e <HAL_SD_ConfigWideBusOperation+0x1be>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	695b      	ldr	r3, [r3, #20]
 800ef6c:	005b      	lsls	r3, r3, #1
 800ef6e:	69fa      	ldr	r2, [r7, #28]
 800ef70:	fbb2 f3f3 	udiv	r3, r2, r3
 800ef74:	4a27      	ldr	r2, [pc, #156]	@ (800f014 <HAL_SD_ConfigWideBusOperation+0x244>)
 800ef76:	4293      	cmp	r3, r2
 800ef78:	d906      	bls.n	800ef88 <HAL_SD_ConfigWideBusOperation+0x1b8>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800ef7a:	69fb      	ldr	r3, [r7, #28]
 800ef7c:	4a23      	ldr	r2, [pc, #140]	@ (800f00c <HAL_SD_ConfigWideBusOperation+0x23c>)
 800ef7e:	fba2 2303 	umull	r2, r3, r2, r3
 800ef82:	0e1b      	lsrs	r3, r3, #24
 800ef84:	61bb      	str	r3, [r7, #24]
 800ef86:	e002      	b.n	800ef8e <HAL_SD_ConfigWideBusOperation+0x1be>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	695b      	ldr	r3, [r3, #20]
 800ef8c:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	681c      	ldr	r4, [r3, #0]
 800ef92:	466a      	mov	r2, sp
 800ef94:	f107 0314 	add.w	r3, r7, #20
 800ef98:	e893 0003 	ldmia.w	r3, {r0, r1}
 800ef9c:	e882 0003 	stmia.w	r2, {r0, r1}
 800efa0:	f107 0308 	add.w	r3, r7, #8
 800efa4:	cb0e      	ldmia	r3, {r1, r2, r3}
 800efa6:	4620      	mov	r0, r4
 800efa8:	f004 f902 	bl	80131b0 <SDMMC_Init>
 800efac:	e008      	b.n	800efc0 <HAL_SD_ConfigWideBusOperation+0x1f0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800efb2:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	635a      	str	r2, [r3, #52]	@ 0x34
      status = HAL_ERROR;
 800efba:	2301      	movs	r3, #1
 800efbc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	681b      	ldr	r3, [r3, #0]
 800efc4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800efc8:	4618      	mov	r0, r3
 800efca:	f004 fadf 	bl	801358c <SDMMC_CmdBlockLength>
 800efce:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800efd0:	6a3b      	ldr	r3, [r7, #32]
 800efd2:	2b00      	cmp	r3, #0
 800efd4:	d00c      	beq.n	800eff0 <HAL_SD_ConfigWideBusOperation+0x220>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	681b      	ldr	r3, [r3, #0]
 800efda:	4a0b      	ldr	r2, [pc, #44]	@ (800f008 <HAL_SD_ConfigWideBusOperation+0x238>)
 800efdc:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800efe2:	6a3b      	ldr	r3, [r7, #32]
 800efe4:	431a      	orrs	r2, r3
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	635a      	str	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 800efea:	2301      	movs	r3, #1
 800efec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	2201      	movs	r2, #1
 800eff4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return status;
 800eff8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800effc:	4618      	mov	r0, r3
 800effe:	372c      	adds	r7, #44	@ 0x2c
 800f000:	46bd      	mov	sp, r7
 800f002:	bd90      	pop	{r4, r7, pc}
 800f004:	080216d8 	.word	0x080216d8
 800f008:	1fe00fff 	.word	0x1fe00fff
 800f00c:	55e63b89 	.word	0x55e63b89
 800f010:	02faf080 	.word	0x02faf080
 800f014:	017d7840 	.word	0x017d7840

0800f018 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800f018:	b580      	push	{r7, lr}
 800f01a:	b086      	sub	sp, #24
 800f01c:	af00      	add	r7, sp, #0
 800f01e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800f020:	2300      	movs	r3, #0
 800f022:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800f024:	f107 030c 	add.w	r3, r7, #12
 800f028:	4619      	mov	r1, r3
 800f02a:	6878      	ldr	r0, [r7, #4]
 800f02c:	f000 fa40 	bl	800f4b0 <SD_SendStatus>
 800f030:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800f032:	697b      	ldr	r3, [r7, #20]
 800f034:	2b00      	cmp	r3, #0
 800f036:	d005      	beq.n	800f044 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800f03c:	697b      	ldr	r3, [r7, #20]
 800f03e:	431a      	orrs	r2, r3
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800f044:	68fb      	ldr	r3, [r7, #12]
 800f046:	0a5b      	lsrs	r3, r3, #9
 800f048:	f003 030f 	and.w	r3, r3, #15
 800f04c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800f04e:	693b      	ldr	r3, [r7, #16]
}
 800f050:	4618      	mov	r0, r3
 800f052:	3718      	adds	r7, #24
 800f054:	46bd      	mov	sp, r7
 800f056:	bd80      	pop	{r7, pc}

0800f058 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800f058:	b580      	push	{r7, lr}
 800f05a:	b090      	sub	sp, #64	@ 0x40
 800f05c:	af00      	add	r7, sp, #0
 800f05e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 800f060:	2300      	movs	r3, #0
 800f062:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 800f064:	f7f4 fb4a 	bl	80036fc <HAL_GetTick>
 800f068:	63f8      	str	r0, [r7, #60]	@ 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	681b      	ldr	r3, [r3, #0]
 800f06e:	4618      	mov	r0, r3
 800f070:	f004 f941 	bl	80132f6 <SDMMC_GetPowerState>
 800f074:	4603      	mov	r3, r0
 800f076:	2b00      	cmp	r3, #0
 800f078:	d102      	bne.n	800f080 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800f07a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800f07e:	e0b5      	b.n	800f1ec <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f084:	2b03      	cmp	r3, #3
 800f086:	d02e      	beq.n	800f0e6 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	681b      	ldr	r3, [r3, #0]
 800f08c:	4618      	mov	r0, r3
 800f08e:	f004 fc52 	bl	8013936 <SDMMC_CmdSendCID>
 800f092:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800f094:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f096:	2b00      	cmp	r3, #0
 800f098:	d001      	beq.n	800f09e <SD_InitCard+0x46>
    {
      return errorstate;
 800f09a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f09c:	e0a6      	b.n	800f1ec <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	681b      	ldr	r3, [r3, #0]
 800f0a2:	2100      	movs	r1, #0
 800f0a4:	4618      	mov	r0, r3
 800f0a6:	f004 f9ab 	bl	8013400 <SDMMC_GetResponse>
 800f0aa:	4602      	mov	r2, r0
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	681b      	ldr	r3, [r3, #0]
 800f0b4:	2104      	movs	r1, #4
 800f0b6:	4618      	mov	r0, r3
 800f0b8:	f004 f9a2 	bl	8013400 <SDMMC_GetResponse>
 800f0bc:	4602      	mov	r2, r0
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	671a      	str	r2, [r3, #112]	@ 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	681b      	ldr	r3, [r3, #0]
 800f0c6:	2108      	movs	r1, #8
 800f0c8:	4618      	mov	r0, r3
 800f0ca:	f004 f999 	bl	8013400 <SDMMC_GetResponse>
 800f0ce:	4602      	mov	r2, r0
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	681b      	ldr	r3, [r3, #0]
 800f0d8:	210c      	movs	r1, #12
 800f0da:	4618      	mov	r0, r3
 800f0dc:	f004 f990 	bl	8013400 <SDMMC_GetResponse>
 800f0e0:	4602      	mov	r2, r0
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f0ea:	2b03      	cmp	r3, #3
 800f0ec:	d01d      	beq.n	800f12a <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 800f0ee:	e019      	b.n	800f124 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	681b      	ldr	r3, [r3, #0]
 800f0f4:	f107 020a 	add.w	r2, r7, #10
 800f0f8:	4611      	mov	r1, r2
 800f0fa:	4618      	mov	r0, r3
 800f0fc:	f004 fc5a 	bl	80139b4 <SDMMC_CmdSetRelAdd>
 800f100:	63b8      	str	r0, [r7, #56]	@ 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 800f102:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f104:	2b00      	cmp	r3, #0
 800f106:	d001      	beq.n	800f10c <SD_InitCard+0xb4>
      {
        return errorstate;
 800f108:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f10a:	e06f      	b.n	800f1ec <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800f10c:	f7f4 faf6 	bl	80036fc <HAL_GetTick>
 800f110:	4602      	mov	r2, r0
 800f112:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f114:	1ad3      	subs	r3, r2, r3
 800f116:	f241 3287 	movw	r2, #4999	@ 0x1387
 800f11a:	4293      	cmp	r3, r2
 800f11c:	d902      	bls.n	800f124 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 800f11e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800f122:	e063      	b.n	800f1ec <SD_InitCard+0x194>
    while (sd_rca == 0U)
 800f124:	897b      	ldrh	r3, [r7, #10]
 800f126:	2b00      	cmp	r3, #0
 800f128:	d0e2      	beq.n	800f0f0 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f12e:	2b03      	cmp	r3, #3
 800f130:	d036      	beq.n	800f1a0 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800f132:	897b      	ldrh	r3, [r7, #10]
 800f134:	461a      	mov	r2, r3
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	681a      	ldr	r2, [r3, #0]
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f142:	041b      	lsls	r3, r3, #16
 800f144:	4619      	mov	r1, r3
 800f146:	4610      	mov	r0, r2
 800f148:	f004 fc14 	bl	8013974 <SDMMC_CmdSendCSD>
 800f14c:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800f14e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f150:	2b00      	cmp	r3, #0
 800f152:	d001      	beq.n	800f158 <SD_InitCard+0x100>
    {
      return errorstate;
 800f154:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f156:	e049      	b.n	800f1ec <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	681b      	ldr	r3, [r3, #0]
 800f15c:	2100      	movs	r1, #0
 800f15e:	4618      	mov	r0, r3
 800f160:	f004 f94e 	bl	8013400 <SDMMC_GetResponse>
 800f164:	4602      	mov	r2, r0
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	65da      	str	r2, [r3, #92]	@ 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	681b      	ldr	r3, [r3, #0]
 800f16e:	2104      	movs	r1, #4
 800f170:	4618      	mov	r0, r3
 800f172:	f004 f945 	bl	8013400 <SDMMC_GetResponse>
 800f176:	4602      	mov	r2, r0
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	661a      	str	r2, [r3, #96]	@ 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	681b      	ldr	r3, [r3, #0]
 800f180:	2108      	movs	r1, #8
 800f182:	4618      	mov	r0, r3
 800f184:	f004 f93c 	bl	8013400 <SDMMC_GetResponse>
 800f188:	4602      	mov	r2, r0
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	681b      	ldr	r3, [r3, #0]
 800f192:	210c      	movs	r1, #12
 800f194:	4618      	mov	r0, r3
 800f196:	f004 f933 	bl	8013400 <SDMMC_GetResponse>
 800f19a:	4602      	mov	r2, r0
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	681b      	ldr	r3, [r3, #0]
 800f1a4:	2104      	movs	r1, #4
 800f1a6:	4618      	mov	r0, r3
 800f1a8:	f004 f92a 	bl	8013400 <SDMMC_GetResponse>
 800f1ac:	4603      	mov	r3, r0
 800f1ae:	0d1a      	lsrs	r2, r3, #20
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800f1b4:	f107 030c 	add.w	r3, r7, #12
 800f1b8:	4619      	mov	r1, r3
 800f1ba:	6878      	ldr	r0, [r7, #4]
 800f1bc:	f7ff fb7a 	bl	800e8b4 <HAL_SD_GetCardCSD>
 800f1c0:	4603      	mov	r3, r0
 800f1c2:	2b00      	cmp	r3, #0
 800f1c4:	d002      	beq.n	800f1cc <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800f1c6:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800f1ca:	e00f      	b.n	800f1ec <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	681a      	ldr	r2, [r3, #0]
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f1d4:	041b      	lsls	r3, r3, #16
 800f1d6:	4619      	mov	r1, r3
 800f1d8:	4610      	mov	r0, r2
 800f1da:	f004 fac3 	bl	8013764 <SDMMC_CmdSelDesel>
 800f1de:	63b8      	str	r0, [r7, #56]	@ 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 800f1e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f1e2:	2b00      	cmp	r3, #0
 800f1e4:	d001      	beq.n	800f1ea <SD_InitCard+0x192>
  {
    return errorstate;
 800f1e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f1e8:	e000      	b.n	800f1ec <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800f1ea:	2300      	movs	r3, #0
}
 800f1ec:	4618      	mov	r0, r3
 800f1ee:	3740      	adds	r7, #64	@ 0x40
 800f1f0:	46bd      	mov	sp, r7
 800f1f2:	bd80      	pop	{r7, pc}

0800f1f4 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800f1f4:	b580      	push	{r7, lr}
 800f1f6:	b086      	sub	sp, #24
 800f1f8:	af00      	add	r7, sp, #0
 800f1fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800f1fc:	2300      	movs	r3, #0
 800f1fe:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 800f200:	2300      	movs	r3, #0
 800f202:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 800f204:	2300      	movs	r3, #0
 800f206:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	681b      	ldr	r3, [r3, #0]
 800f20c:	4618      	mov	r0, r3
 800f20e:	f004 facc 	bl	80137aa <SDMMC_CmdGoIdleState>
 800f212:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800f214:	68fb      	ldr	r3, [r7, #12]
 800f216:	2b00      	cmp	r3, #0
 800f218:	d001      	beq.n	800f21e <SD_PowerON+0x2a>
  {
    return errorstate;
 800f21a:	68fb      	ldr	r3, [r7, #12]
 800f21c:	e072      	b.n	800f304 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	681b      	ldr	r3, [r3, #0]
 800f222:	4618      	mov	r0, r3
 800f224:	f004 fadf 	bl	80137e6 <SDMMC_CmdOperCond>
 800f228:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800f22a:	68fb      	ldr	r3, [r7, #12]
 800f22c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800f230:	d10d      	bne.n	800f24e <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	2200      	movs	r2, #0
 800f236:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	681b      	ldr	r3, [r3, #0]
 800f23c:	4618      	mov	r0, r3
 800f23e:	f004 fab4 	bl	80137aa <SDMMC_CmdGoIdleState>
 800f242:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800f244:	68fb      	ldr	r3, [r7, #12]
 800f246:	2b00      	cmp	r3, #0
 800f248:	d004      	beq.n	800f254 <SD_PowerON+0x60>
    {
      return errorstate;
 800f24a:	68fb      	ldr	r3, [r7, #12]
 800f24c:	e05a      	b.n	800f304 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	2201      	movs	r2, #1
 800f252:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f258:	2b01      	cmp	r3, #1
 800f25a:	d137      	bne.n	800f2cc <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	681b      	ldr	r3, [r3, #0]
 800f260:	2100      	movs	r1, #0
 800f262:	4618      	mov	r0, r3
 800f264:	f004 fadf 	bl	8013826 <SDMMC_CmdAppCommand>
 800f268:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800f26a:	68fb      	ldr	r3, [r7, #12]
 800f26c:	2b00      	cmp	r3, #0
 800f26e:	d02d      	beq.n	800f2cc <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800f270:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800f274:	e046      	b.n	800f304 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	681b      	ldr	r3, [r3, #0]
 800f27a:	2100      	movs	r1, #0
 800f27c:	4618      	mov	r0, r3
 800f27e:	f004 fad2 	bl	8013826 <SDMMC_CmdAppCommand>
 800f282:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800f284:	68fb      	ldr	r3, [r7, #12]
 800f286:	2b00      	cmp	r3, #0
 800f288:	d001      	beq.n	800f28e <SD_PowerON+0x9a>
    {
      return errorstate;
 800f28a:	68fb      	ldr	r3, [r7, #12]
 800f28c:	e03a      	b.n	800f304 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	681b      	ldr	r3, [r3, #0]
 800f292:	491e      	ldr	r1, [pc, #120]	@ (800f30c <SD_PowerON+0x118>)
 800f294:	4618      	mov	r0, r3
 800f296:	f004 fae9 	bl	801386c <SDMMC_CmdAppOperCommand>
 800f29a:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800f29c:	68fb      	ldr	r3, [r7, #12]
 800f29e:	2b00      	cmp	r3, #0
 800f2a0:	d002      	beq.n	800f2a8 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800f2a2:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800f2a6:	e02d      	b.n	800f304 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	681b      	ldr	r3, [r3, #0]
 800f2ac:	2100      	movs	r1, #0
 800f2ae:	4618      	mov	r0, r3
 800f2b0:	f004 f8a6 	bl	8013400 <SDMMC_GetResponse>
 800f2b4:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800f2b6:	697b      	ldr	r3, [r7, #20]
 800f2b8:	0fdb      	lsrs	r3, r3, #31
 800f2ba:	2b01      	cmp	r3, #1
 800f2bc:	d101      	bne.n	800f2c2 <SD_PowerON+0xce>
 800f2be:	2301      	movs	r3, #1
 800f2c0:	e000      	b.n	800f2c4 <SD_PowerON+0xd0>
 800f2c2:	2300      	movs	r3, #0
 800f2c4:	613b      	str	r3, [r7, #16]

    count++;
 800f2c6:	68bb      	ldr	r3, [r7, #8]
 800f2c8:	3301      	adds	r3, #1
 800f2ca:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800f2cc:	68bb      	ldr	r3, [r7, #8]
 800f2ce:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800f2d2:	4293      	cmp	r3, r2
 800f2d4:	d802      	bhi.n	800f2dc <SD_PowerON+0xe8>
 800f2d6:	693b      	ldr	r3, [r7, #16]
 800f2d8:	2b00      	cmp	r3, #0
 800f2da:	d0cc      	beq.n	800f276 <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800f2dc:	68bb      	ldr	r3, [r7, #8]
 800f2de:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800f2e2:	4293      	cmp	r3, r2
 800f2e4:	d902      	bls.n	800f2ec <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800f2e6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800f2ea:	e00b      	b.n	800f304 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	2200      	movs	r2, #0
 800f2f0:	639a      	str	r2, [r3, #56]	@ 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800f2f2:	697b      	ldr	r3, [r7, #20]
 800f2f4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800f2f8:	2b00      	cmp	r3, #0
 800f2fa:	d002      	beq.n	800f302 <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	2201      	movs	r2, #1
 800f300:	639a      	str	r2, [r3, #56]	@ 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800f302:	2300      	movs	r3, #0
}
 800f304:	4618      	mov	r0, r3
 800f306:	3718      	adds	r7, #24
 800f308:	46bd      	mov	sp, r7
 800f30a:	bd80      	pop	{r7, pc}
 800f30c:	c1100000 	.word	0xc1100000

0800f310 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800f310:	b580      	push	{r7, lr}
 800f312:	b08c      	sub	sp, #48	@ 0x30
 800f314:	af00      	add	r7, sp, #0
 800f316:	6078      	str	r0, [r7, #4]
 800f318:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800f31a:	f7f4 f9ef 	bl	80036fc <HAL_GetTick>
 800f31e:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800f320:	683b      	ldr	r3, [r7, #0]
 800f322:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	681b      	ldr	r3, [r3, #0]
 800f328:	2100      	movs	r1, #0
 800f32a:	4618      	mov	r0, r3
 800f32c:	f004 f868 	bl	8013400 <SDMMC_GetResponse>
 800f330:	4603      	mov	r3, r0
 800f332:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f336:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800f33a:	d102      	bne.n	800f342 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800f33c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800f340:	e0b0      	b.n	800f4a4 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800f342:	687b      	ldr	r3, [r7, #4]
 800f344:	681b      	ldr	r3, [r3, #0]
 800f346:	2140      	movs	r1, #64	@ 0x40
 800f348:	4618      	mov	r0, r3
 800f34a:	f004 f91f 	bl	801358c <SDMMC_CmdBlockLength>
 800f34e:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800f350:	6a3b      	ldr	r3, [r7, #32]
 800f352:	2b00      	cmp	r3, #0
 800f354:	d005      	beq.n	800f362 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800f35e:	6a3b      	ldr	r3, [r7, #32]
 800f360:	e0a0      	b.n	800f4a4 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800f362:	687b      	ldr	r3, [r7, #4]
 800f364:	681a      	ldr	r2, [r3, #0]
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f36a:	041b      	lsls	r3, r3, #16
 800f36c:	4619      	mov	r1, r3
 800f36e:	4610      	mov	r0, r2
 800f370:	f004 fa59 	bl	8013826 <SDMMC_CmdAppCommand>
 800f374:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800f376:	6a3b      	ldr	r3, [r7, #32]
 800f378:	2b00      	cmp	r3, #0
 800f37a:	d005      	beq.n	800f388 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800f384:	6a3b      	ldr	r3, [r7, #32]
 800f386:	e08d      	b.n	800f4a4 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800f388:	f04f 33ff 	mov.w	r3, #4294967295
 800f38c:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800f38e:	2340      	movs	r3, #64	@ 0x40
 800f390:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800f392:	2360      	movs	r3, #96	@ 0x60
 800f394:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800f396:	2302      	movs	r3, #2
 800f398:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800f39a:	2300      	movs	r3, #0
 800f39c:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800f39e:	2301      	movs	r3, #1
 800f3a0:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800f3a2:	687b      	ldr	r3, [r7, #4]
 800f3a4:	681b      	ldr	r3, [r3, #0]
 800f3a6:	f107 0208 	add.w	r2, r7, #8
 800f3aa:	4611      	mov	r1, r2
 800f3ac:	4618      	mov	r0, r3
 800f3ae:	f004 f84b 	bl	8013448 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	681b      	ldr	r3, [r3, #0]
 800f3b6:	4618      	mov	r0, r3
 800f3b8:	f004 fb41 	bl	8013a3e <SDMMC_CmdStatusRegister>
 800f3bc:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800f3be:	6a3b      	ldr	r3, [r7, #32]
 800f3c0:	2b00      	cmp	r3, #0
 800f3c2:	d02b      	beq.n	800f41c <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800f3cc:	6a3b      	ldr	r3, [r7, #32]
 800f3ce:	e069      	b.n	800f4a4 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	681b      	ldr	r3, [r3, #0]
 800f3d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f3d6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800f3da:	2b00      	cmp	r3, #0
 800f3dc:	d013      	beq.n	800f406 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800f3de:	2300      	movs	r3, #0
 800f3e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f3e2:	e00d      	b.n	800f400 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	681b      	ldr	r3, [r3, #0]
 800f3e8:	4618      	mov	r0, r3
 800f3ea:	f003 ff55 	bl	8013298 <SDMMC_ReadFIFO>
 800f3ee:	4602      	mov	r2, r0
 800f3f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f3f2:	601a      	str	r2, [r3, #0]
        pData++;
 800f3f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f3f6:	3304      	adds	r3, #4
 800f3f8:	62bb      	str	r3, [r7, #40]	@ 0x28
      for (count = 0U; count < 8U; count++)
 800f3fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f3fc:	3301      	adds	r3, #1
 800f3fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f400:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f402:	2b07      	cmp	r3, #7
 800f404:	d9ee      	bls.n	800f3e4 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 800f406:	f7f4 f979 	bl	80036fc <HAL_GetTick>
 800f40a:	4602      	mov	r2, r0
 800f40c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f40e:	1ad3      	subs	r3, r2, r3
 800f410:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f414:	d102      	bne.n	800f41c <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800f416:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800f41a:	e043      	b.n	800f4a4 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	681b      	ldr	r3, [r3, #0]
 800f420:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f422:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 800f426:	2b00      	cmp	r3, #0
 800f428:	d0d2      	beq.n	800f3d0 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	681b      	ldr	r3, [r3, #0]
 800f42e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f430:	f003 0308 	and.w	r3, r3, #8
 800f434:	2b00      	cmp	r3, #0
 800f436:	d001      	beq.n	800f43c <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800f438:	2308      	movs	r3, #8
 800f43a:	e033      	b.n	800f4a4 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	681b      	ldr	r3, [r3, #0]
 800f440:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f442:	f003 0302 	and.w	r3, r3, #2
 800f446:	2b00      	cmp	r3, #0
 800f448:	d001      	beq.n	800f44e <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800f44a:	2302      	movs	r3, #2
 800f44c:	e02a      	b.n	800f4a4 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	681b      	ldr	r3, [r3, #0]
 800f452:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f454:	f003 0320 	and.w	r3, r3, #32
 800f458:	2b00      	cmp	r3, #0
 800f45a:	d017      	beq.n	800f48c <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800f45c:	2320      	movs	r3, #32
 800f45e:	e021      	b.n	800f4a4 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	681b      	ldr	r3, [r3, #0]
 800f464:	4618      	mov	r0, r3
 800f466:	f003 ff17 	bl	8013298 <SDMMC_ReadFIFO>
 800f46a:	4602      	mov	r2, r0
 800f46c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f46e:	601a      	str	r2, [r3, #0]
    pData++;
 800f470:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f472:	3304      	adds	r3, #4
 800f474:	62bb      	str	r3, [r7, #40]	@ 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 800f476:	f7f4 f941 	bl	80036fc <HAL_GetTick>
 800f47a:	4602      	mov	r2, r0
 800f47c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f47e:	1ad3      	subs	r3, r2, r3
 800f480:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f484:	d102      	bne.n	800f48c <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800f486:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800f48a:	e00b      	b.n	800f4a4 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	681b      	ldr	r3, [r3, #0]
 800f490:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f492:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800f496:	2b00      	cmp	r3, #0
 800f498:	d1e2      	bne.n	800f460 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	681b      	ldr	r3, [r3, #0]
 800f49e:	4a03      	ldr	r2, [pc, #12]	@ (800f4ac <SD_SendSDStatus+0x19c>)
 800f4a0:	639a      	str	r2, [r3, #56]	@ 0x38

  return HAL_SD_ERROR_NONE;
 800f4a2:	2300      	movs	r3, #0
}
 800f4a4:	4618      	mov	r0, r3
 800f4a6:	3730      	adds	r7, #48	@ 0x30
 800f4a8:	46bd      	mov	sp, r7
 800f4aa:	bd80      	pop	{r7, pc}
 800f4ac:	18000f3a 	.word	0x18000f3a

0800f4b0 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800f4b0:	b580      	push	{r7, lr}
 800f4b2:	b084      	sub	sp, #16
 800f4b4:	af00      	add	r7, sp, #0
 800f4b6:	6078      	str	r0, [r7, #4]
 800f4b8:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800f4ba:	683b      	ldr	r3, [r7, #0]
 800f4bc:	2b00      	cmp	r3, #0
 800f4be:	d102      	bne.n	800f4c6 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800f4c0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800f4c4:	e018      	b.n	800f4f8 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	681a      	ldr	r2, [r3, #0]
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f4ce:	041b      	lsls	r3, r3, #16
 800f4d0:	4619      	mov	r1, r3
 800f4d2:	4610      	mov	r0, r2
 800f4d4:	f004 fa90 	bl	80139f8 <SDMMC_CmdSendStatus>
 800f4d8:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800f4da:	68fb      	ldr	r3, [r7, #12]
 800f4dc:	2b00      	cmp	r3, #0
 800f4de:	d001      	beq.n	800f4e4 <SD_SendStatus+0x34>
  {
    return errorstate;
 800f4e0:	68fb      	ldr	r3, [r7, #12]
 800f4e2:	e009      	b.n	800f4f8 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	681b      	ldr	r3, [r3, #0]
 800f4e8:	2100      	movs	r1, #0
 800f4ea:	4618      	mov	r0, r3
 800f4ec:	f003 ff88 	bl	8013400 <SDMMC_GetResponse>
 800f4f0:	4602      	mov	r2, r0
 800f4f2:	683b      	ldr	r3, [r7, #0]
 800f4f4:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800f4f6:	2300      	movs	r3, #0
}
 800f4f8:	4618      	mov	r0, r3
 800f4fa:	3710      	adds	r7, #16
 800f4fc:	46bd      	mov	sp, r7
 800f4fe:	bd80      	pop	{r7, pc}

0800f500 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800f500:	b580      	push	{r7, lr}
 800f502:	b086      	sub	sp, #24
 800f504:	af00      	add	r7, sp, #0
 800f506:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800f508:	2300      	movs	r3, #0
 800f50a:	60fb      	str	r3, [r7, #12]
 800f50c:	2300      	movs	r3, #0
 800f50e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	681b      	ldr	r3, [r3, #0]
 800f514:	2100      	movs	r1, #0
 800f516:	4618      	mov	r0, r3
 800f518:	f003 ff72 	bl	8013400 <SDMMC_GetResponse>
 800f51c:	4603      	mov	r3, r0
 800f51e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f522:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800f526:	d102      	bne.n	800f52e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800f528:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800f52c:	e02f      	b.n	800f58e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800f52e:	f107 030c 	add.w	r3, r7, #12
 800f532:	4619      	mov	r1, r3
 800f534:	6878      	ldr	r0, [r7, #4]
 800f536:	f000 f879 	bl	800f62c <SD_FindSCR>
 800f53a:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800f53c:	697b      	ldr	r3, [r7, #20]
 800f53e:	2b00      	cmp	r3, #0
 800f540:	d001      	beq.n	800f546 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800f542:	697b      	ldr	r3, [r7, #20]
 800f544:	e023      	b.n	800f58e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800f546:	693b      	ldr	r3, [r7, #16]
 800f548:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800f54c:	2b00      	cmp	r3, #0
 800f54e:	d01c      	beq.n	800f58a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	681a      	ldr	r2, [r3, #0]
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f558:	041b      	lsls	r3, r3, #16
 800f55a:	4619      	mov	r1, r3
 800f55c:	4610      	mov	r0, r2
 800f55e:	f004 f962 	bl	8013826 <SDMMC_CmdAppCommand>
 800f562:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800f564:	697b      	ldr	r3, [r7, #20]
 800f566:	2b00      	cmp	r3, #0
 800f568:	d001      	beq.n	800f56e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800f56a:	697b      	ldr	r3, [r7, #20]
 800f56c:	e00f      	b.n	800f58e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	681b      	ldr	r3, [r3, #0]
 800f572:	2102      	movs	r1, #2
 800f574:	4618      	mov	r0, r3
 800f576:	f004 f999 	bl	80138ac <SDMMC_CmdBusWidth>
 800f57a:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800f57c:	697b      	ldr	r3, [r7, #20]
 800f57e:	2b00      	cmp	r3, #0
 800f580:	d001      	beq.n	800f586 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800f582:	697b      	ldr	r3, [r7, #20]
 800f584:	e003      	b.n	800f58e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800f586:	2300      	movs	r3, #0
 800f588:	e001      	b.n	800f58e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800f58a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800f58e:	4618      	mov	r0, r3
 800f590:	3718      	adds	r7, #24
 800f592:	46bd      	mov	sp, r7
 800f594:	bd80      	pop	{r7, pc}

0800f596 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800f596:	b580      	push	{r7, lr}
 800f598:	b086      	sub	sp, #24
 800f59a:	af00      	add	r7, sp, #0
 800f59c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800f59e:	2300      	movs	r3, #0
 800f5a0:	60fb      	str	r3, [r7, #12]
 800f5a2:	2300      	movs	r3, #0
 800f5a4:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	681b      	ldr	r3, [r3, #0]
 800f5aa:	2100      	movs	r1, #0
 800f5ac:	4618      	mov	r0, r3
 800f5ae:	f003 ff27 	bl	8013400 <SDMMC_GetResponse>
 800f5b2:	4603      	mov	r3, r0
 800f5b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f5b8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800f5bc:	d102      	bne.n	800f5c4 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800f5be:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800f5c2:	e02f      	b.n	800f624 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800f5c4:	f107 030c 	add.w	r3, r7, #12
 800f5c8:	4619      	mov	r1, r3
 800f5ca:	6878      	ldr	r0, [r7, #4]
 800f5cc:	f000 f82e 	bl	800f62c <SD_FindSCR>
 800f5d0:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800f5d2:	697b      	ldr	r3, [r7, #20]
 800f5d4:	2b00      	cmp	r3, #0
 800f5d6:	d001      	beq.n	800f5dc <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800f5d8:	697b      	ldr	r3, [r7, #20]
 800f5da:	e023      	b.n	800f624 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800f5dc:	693b      	ldr	r3, [r7, #16]
 800f5de:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800f5e2:	2b00      	cmp	r3, #0
 800f5e4:	d01c      	beq.n	800f620 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	681a      	ldr	r2, [r3, #0]
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f5ee:	041b      	lsls	r3, r3, #16
 800f5f0:	4619      	mov	r1, r3
 800f5f2:	4610      	mov	r0, r2
 800f5f4:	f004 f917 	bl	8013826 <SDMMC_CmdAppCommand>
 800f5f8:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800f5fa:	697b      	ldr	r3, [r7, #20]
 800f5fc:	2b00      	cmp	r3, #0
 800f5fe:	d001      	beq.n	800f604 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800f600:	697b      	ldr	r3, [r7, #20]
 800f602:	e00f      	b.n	800f624 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	681b      	ldr	r3, [r3, #0]
 800f608:	2100      	movs	r1, #0
 800f60a:	4618      	mov	r0, r3
 800f60c:	f004 f94e 	bl	80138ac <SDMMC_CmdBusWidth>
 800f610:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800f612:	697b      	ldr	r3, [r7, #20]
 800f614:	2b00      	cmp	r3, #0
 800f616:	d001      	beq.n	800f61c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800f618:	697b      	ldr	r3, [r7, #20]
 800f61a:	e003      	b.n	800f624 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800f61c:	2300      	movs	r3, #0
 800f61e:	e001      	b.n	800f624 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800f620:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800f624:	4618      	mov	r0, r3
 800f626:	3718      	adds	r7, #24
 800f628:	46bd      	mov	sp, r7
 800f62a:	bd80      	pop	{r7, pc}

0800f62c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800f62c:	b580      	push	{r7, lr}
 800f62e:	b08e      	sub	sp, #56	@ 0x38
 800f630:	af00      	add	r7, sp, #0
 800f632:	6078      	str	r0, [r7, #4]
 800f634:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800f636:	f7f4 f861 	bl	80036fc <HAL_GetTick>
 800f63a:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 800f63c:	2300      	movs	r3, #0
 800f63e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800f640:	2300      	movs	r3, #0
 800f642:	60bb      	str	r3, [r7, #8]
 800f644:	2300      	movs	r3, #0
 800f646:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800f648:	683b      	ldr	r3, [r7, #0]
 800f64a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	681b      	ldr	r3, [r3, #0]
 800f650:	2108      	movs	r1, #8
 800f652:	4618      	mov	r0, r3
 800f654:	f003 ff9a 	bl	801358c <SDMMC_CmdBlockLength>
 800f658:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800f65a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f65c:	2b00      	cmp	r3, #0
 800f65e:	d001      	beq.n	800f664 <SD_FindSCR+0x38>
  {
    return errorstate;
 800f660:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f662:	e0ad      	b.n	800f7c0 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	681a      	ldr	r2, [r3, #0]
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f66c:	041b      	lsls	r3, r3, #16
 800f66e:	4619      	mov	r1, r3
 800f670:	4610      	mov	r0, r2
 800f672:	f004 f8d8 	bl	8013826 <SDMMC_CmdAppCommand>
 800f676:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800f678:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f67a:	2b00      	cmp	r3, #0
 800f67c:	d001      	beq.n	800f682 <SD_FindSCR+0x56>
  {
    return errorstate;
 800f67e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f680:	e09e      	b.n	800f7c0 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800f682:	f04f 33ff 	mov.w	r3, #4294967295
 800f686:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800f688:	2308      	movs	r3, #8
 800f68a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800f68c:	2330      	movs	r3, #48	@ 0x30
 800f68e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800f690:	2302      	movs	r3, #2
 800f692:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800f694:	2300      	movs	r3, #0
 800f696:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800f698:	2301      	movs	r3, #1
 800f69a:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	681b      	ldr	r3, [r3, #0]
 800f6a0:	f107 0210 	add.w	r2, r7, #16
 800f6a4:	4611      	mov	r1, r2
 800f6a6:	4618      	mov	r0, r3
 800f6a8:	f003 fece 	bl	8013448 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	681b      	ldr	r3, [r3, #0]
 800f6b0:	4618      	mov	r0, r3
 800f6b2:	f004 f91e 	bl	80138f2 <SDMMC_CmdSendSCR>
 800f6b6:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800f6b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f6ba:	2b00      	cmp	r3, #0
 800f6bc:	d027      	beq.n	800f70e <SD_FindSCR+0xe2>
  {
    return errorstate;
 800f6be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f6c0:	e07e      	b.n	800f7c0 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	681b      	ldr	r3, [r3, #0]
 800f6c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f6c8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800f6cc:	2b00      	cmp	r3, #0
 800f6ce:	d113      	bne.n	800f6f8 <SD_FindSCR+0xcc>
 800f6d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f6d2:	2b00      	cmp	r3, #0
 800f6d4:	d110      	bne.n	800f6f8 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	681b      	ldr	r3, [r3, #0]
 800f6da:	4618      	mov	r0, r3
 800f6dc:	f003 fddc 	bl	8013298 <SDMMC_ReadFIFO>
 800f6e0:	4603      	mov	r3, r0
 800f6e2:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	681b      	ldr	r3, [r3, #0]
 800f6e8:	4618      	mov	r0, r3
 800f6ea:	f003 fdd5 	bl	8013298 <SDMMC_ReadFIFO>
 800f6ee:	4603      	mov	r3, r0
 800f6f0:	60fb      	str	r3, [r7, #12]
      index++;
 800f6f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f6f4:	3301      	adds	r3, #1
 800f6f6:	637b      	str	r3, [r7, #52]	@ 0x34
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 800f6f8:	f7f4 f800 	bl	80036fc <HAL_GetTick>
 800f6fc:	4602      	mov	r2, r0
 800f6fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f700:	1ad3      	subs	r3, r2, r3
 800f702:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f706:	d102      	bne.n	800f70e <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800f708:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800f70c:	e058      	b.n	800f7c0 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	681b      	ldr	r3, [r3, #0]
 800f712:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800f714:	f240 532a 	movw	r3, #1322	@ 0x52a
 800f718:	4013      	ands	r3, r2
 800f71a:	2b00      	cmp	r3, #0
 800f71c:	d0d1      	beq.n	800f6c2 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	681b      	ldr	r3, [r3, #0]
 800f722:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f724:	f003 0308 	and.w	r3, r3, #8
 800f728:	2b00      	cmp	r3, #0
 800f72a:	d005      	beq.n	800f738 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	681b      	ldr	r3, [r3, #0]
 800f730:	2208      	movs	r2, #8
 800f732:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800f734:	2308      	movs	r3, #8
 800f736:	e043      	b.n	800f7c0 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	681b      	ldr	r3, [r3, #0]
 800f73c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f73e:	f003 0302 	and.w	r3, r3, #2
 800f742:	2b00      	cmp	r3, #0
 800f744:	d005      	beq.n	800f752 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	681b      	ldr	r3, [r3, #0]
 800f74a:	2202      	movs	r2, #2
 800f74c:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800f74e:	2302      	movs	r3, #2
 800f750:	e036      	b.n	800f7c0 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	681b      	ldr	r3, [r3, #0]
 800f756:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f758:	f003 0320 	and.w	r3, r3, #32
 800f75c:	2b00      	cmp	r3, #0
 800f75e:	d005      	beq.n	800f76c <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	681b      	ldr	r3, [r3, #0]
 800f764:	2220      	movs	r2, #32
 800f766:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800f768:	2320      	movs	r3, #32
 800f76a:	e029      	b.n	800f7c0 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	681b      	ldr	r3, [r3, #0]
 800f770:	4a15      	ldr	r2, [pc, #84]	@ (800f7c8 <SD_FindSCR+0x19c>)
 800f772:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8U) | \
 800f774:	68fb      	ldr	r3, [r7, #12]
 800f776:	061a      	lsls	r2, r3, #24
 800f778:	68fb      	ldr	r3, [r7, #12]
 800f77a:	021b      	lsls	r3, r3, #8
 800f77c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800f780:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24U));
 800f782:	68fb      	ldr	r3, [r7, #12]
 800f784:	0a1b      	lsrs	r3, r3, #8
 800f786:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8U) | \
 800f78a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24U));
 800f78c:	68fb      	ldr	r3, [r7, #12]
 800f78e:	0e1b      	lsrs	r3, r3, #24
 800f790:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8U) | \
 800f792:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f794:	601a      	str	r2, [r3, #0]
    scr++;
 800f796:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f798:	3304      	adds	r3, #4
 800f79a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8U) | \
 800f79c:	68bb      	ldr	r3, [r7, #8]
 800f79e:	061a      	lsls	r2, r3, #24
 800f7a0:	68bb      	ldr	r3, [r7, #8]
 800f7a2:	021b      	lsls	r3, r3, #8
 800f7a4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800f7a8:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24U));
 800f7aa:	68bb      	ldr	r3, [r7, #8]
 800f7ac:	0a1b      	lsrs	r3, r3, #8
 800f7ae:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8U) | \
 800f7b2:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24U));
 800f7b4:	68bb      	ldr	r3, [r7, #8]
 800f7b6:	0e1b      	lsrs	r3, r3, #24
 800f7b8:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8U) | \
 800f7ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f7bc:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800f7be:	2300      	movs	r3, #0
}
 800f7c0:	4618      	mov	r0, r3
 800f7c2:	3738      	adds	r7, #56	@ 0x38
 800f7c4:	46bd      	mov	sp, r7
 800f7c6:	bd80      	pop	{r7, pc}
 800f7c8:	18000f3a 	.word	0x18000f3a

0800f7cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800f7cc:	b580      	push	{r7, lr}
 800f7ce:	b082      	sub	sp, #8
 800f7d0:	af00      	add	r7, sp, #0
 800f7d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	2b00      	cmp	r3, #0
 800f7d8:	d101      	bne.n	800f7de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800f7da:	2301      	movs	r3, #1
 800f7dc:	e109      	b.n	800f9f2 <HAL_TIM_Base_Init+0x226>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	681b      	ldr	r3, [r3, #0]
 800f7e2:	4a86      	ldr	r2, [pc, #536]	@ (800f9fc <HAL_TIM_Base_Init+0x230>)
 800f7e4:	4293      	cmp	r3, r2
 800f7e6:	d04f      	beq.n	800f888 <HAL_TIM_Base_Init+0xbc>
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	681b      	ldr	r3, [r3, #0]
 800f7ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f7f0:	d04a      	beq.n	800f888 <HAL_TIM_Base_Init+0xbc>
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	681b      	ldr	r3, [r3, #0]
 800f7f6:	4a82      	ldr	r2, [pc, #520]	@ (800fa00 <HAL_TIM_Base_Init+0x234>)
 800f7f8:	4293      	cmp	r3, r2
 800f7fa:	d045      	beq.n	800f888 <HAL_TIM_Base_Init+0xbc>
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	681b      	ldr	r3, [r3, #0]
 800f800:	4a80      	ldr	r2, [pc, #512]	@ (800fa04 <HAL_TIM_Base_Init+0x238>)
 800f802:	4293      	cmp	r3, r2
 800f804:	d040      	beq.n	800f888 <HAL_TIM_Base_Init+0xbc>
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	681b      	ldr	r3, [r3, #0]
 800f80a:	4a7f      	ldr	r2, [pc, #508]	@ (800fa08 <HAL_TIM_Base_Init+0x23c>)
 800f80c:	4293      	cmp	r3, r2
 800f80e:	d03b      	beq.n	800f888 <HAL_TIM_Base_Init+0xbc>
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	681b      	ldr	r3, [r3, #0]
 800f814:	4a7d      	ldr	r2, [pc, #500]	@ (800fa0c <HAL_TIM_Base_Init+0x240>)
 800f816:	4293      	cmp	r3, r2
 800f818:	d036      	beq.n	800f888 <HAL_TIM_Base_Init+0xbc>
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	681b      	ldr	r3, [r3, #0]
 800f81e:	4a7c      	ldr	r2, [pc, #496]	@ (800fa10 <HAL_TIM_Base_Init+0x244>)
 800f820:	4293      	cmp	r3, r2
 800f822:	d031      	beq.n	800f888 <HAL_TIM_Base_Init+0xbc>
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	681b      	ldr	r3, [r3, #0]
 800f828:	4a7a      	ldr	r2, [pc, #488]	@ (800fa14 <HAL_TIM_Base_Init+0x248>)
 800f82a:	4293      	cmp	r3, r2
 800f82c:	d02c      	beq.n	800f888 <HAL_TIM_Base_Init+0xbc>
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	681b      	ldr	r3, [r3, #0]
 800f832:	4a79      	ldr	r2, [pc, #484]	@ (800fa18 <HAL_TIM_Base_Init+0x24c>)
 800f834:	4293      	cmp	r3, r2
 800f836:	d027      	beq.n	800f888 <HAL_TIM_Base_Init+0xbc>
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	681b      	ldr	r3, [r3, #0]
 800f83c:	4a77      	ldr	r2, [pc, #476]	@ (800fa1c <HAL_TIM_Base_Init+0x250>)
 800f83e:	4293      	cmp	r3, r2
 800f840:	d022      	beq.n	800f888 <HAL_TIM_Base_Init+0xbc>
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	681b      	ldr	r3, [r3, #0]
 800f846:	4a76      	ldr	r2, [pc, #472]	@ (800fa20 <HAL_TIM_Base_Init+0x254>)
 800f848:	4293      	cmp	r3, r2
 800f84a:	d01d      	beq.n	800f888 <HAL_TIM_Base_Init+0xbc>
 800f84c:	687b      	ldr	r3, [r7, #4]
 800f84e:	681b      	ldr	r3, [r3, #0]
 800f850:	4a74      	ldr	r2, [pc, #464]	@ (800fa24 <HAL_TIM_Base_Init+0x258>)
 800f852:	4293      	cmp	r3, r2
 800f854:	d018      	beq.n	800f888 <HAL_TIM_Base_Init+0xbc>
 800f856:	687b      	ldr	r3, [r7, #4]
 800f858:	681b      	ldr	r3, [r3, #0]
 800f85a:	4a73      	ldr	r2, [pc, #460]	@ (800fa28 <HAL_TIM_Base_Init+0x25c>)
 800f85c:	4293      	cmp	r3, r2
 800f85e:	d013      	beq.n	800f888 <HAL_TIM_Base_Init+0xbc>
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	681b      	ldr	r3, [r3, #0]
 800f864:	4a71      	ldr	r2, [pc, #452]	@ (800fa2c <HAL_TIM_Base_Init+0x260>)
 800f866:	4293      	cmp	r3, r2
 800f868:	d00e      	beq.n	800f888 <HAL_TIM_Base_Init+0xbc>
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	681b      	ldr	r3, [r3, #0]
 800f86e:	4a70      	ldr	r2, [pc, #448]	@ (800fa30 <HAL_TIM_Base_Init+0x264>)
 800f870:	4293      	cmp	r3, r2
 800f872:	d009      	beq.n	800f888 <HAL_TIM_Base_Init+0xbc>
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	681b      	ldr	r3, [r3, #0]
 800f878:	4a6e      	ldr	r2, [pc, #440]	@ (800fa34 <HAL_TIM_Base_Init+0x268>)
 800f87a:	4293      	cmp	r3, r2
 800f87c:	d004      	beq.n	800f888 <HAL_TIM_Base_Init+0xbc>
 800f87e:	f44f 718b 	mov.w	r1, #278	@ 0x116
 800f882:	486d      	ldr	r0, [pc, #436]	@ (800fa38 <HAL_TIM_Base_Init+0x26c>)
 800f884:	f7f2 fd9e 	bl	80023c4 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	689b      	ldr	r3, [r3, #8]
 800f88c:	2b00      	cmp	r3, #0
 800f88e:	d014      	beq.n	800f8ba <HAL_TIM_Base_Init+0xee>
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	689b      	ldr	r3, [r3, #8]
 800f894:	2b10      	cmp	r3, #16
 800f896:	d010      	beq.n	800f8ba <HAL_TIM_Base_Init+0xee>
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	689b      	ldr	r3, [r3, #8]
 800f89c:	2b20      	cmp	r3, #32
 800f89e:	d00c      	beq.n	800f8ba <HAL_TIM_Base_Init+0xee>
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	689b      	ldr	r3, [r3, #8]
 800f8a4:	2b40      	cmp	r3, #64	@ 0x40
 800f8a6:	d008      	beq.n	800f8ba <HAL_TIM_Base_Init+0xee>
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	689b      	ldr	r3, [r3, #8]
 800f8ac:	2b60      	cmp	r3, #96	@ 0x60
 800f8ae:	d004      	beq.n	800f8ba <HAL_TIM_Base_Init+0xee>
 800f8b0:	f240 1117 	movw	r1, #279	@ 0x117
 800f8b4:	4860      	ldr	r0, [pc, #384]	@ (800fa38 <HAL_TIM_Base_Init+0x26c>)
 800f8b6:	f7f2 fd85 	bl	80023c4 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	691b      	ldr	r3, [r3, #16]
 800f8be:	2b00      	cmp	r3, #0
 800f8c0:	d00e      	beq.n	800f8e0 <HAL_TIM_Base_Init+0x114>
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	691b      	ldr	r3, [r3, #16]
 800f8c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f8ca:	d009      	beq.n	800f8e0 <HAL_TIM_Base_Init+0x114>
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	691b      	ldr	r3, [r3, #16]
 800f8d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f8d4:	d004      	beq.n	800f8e0 <HAL_TIM_Base_Init+0x114>
 800f8d6:	f44f 718c 	mov.w	r1, #280	@ 0x118
 800f8da:	4857      	ldr	r0, [pc, #348]	@ (800fa38 <HAL_TIM_Base_Init+0x26c>)
 800f8dc:	f7f2 fd72 	bl	80023c4 <assert_failed>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	681b      	ldr	r3, [r3, #0]
 800f8e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f8e8:	d00e      	beq.n	800f908 <HAL_TIM_Base_Init+0x13c>
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	681b      	ldr	r3, [r3, #0]
 800f8ee:	4a46      	ldr	r2, [pc, #280]	@ (800fa08 <HAL_TIM_Base_Init+0x23c>)
 800f8f0:	4293      	cmp	r3, r2
 800f8f2:	d009      	beq.n	800f908 <HAL_TIM_Base_Init+0x13c>
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	681b      	ldr	r3, [r3, #0]
 800f8f8:	4a4d      	ldr	r2, [pc, #308]	@ (800fa30 <HAL_TIM_Base_Init+0x264>)
 800f8fa:	4293      	cmp	r3, r2
 800f8fc:	d004      	beq.n	800f908 <HAL_TIM_Base_Init+0x13c>
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	681b      	ldr	r3, [r3, #0]
 800f902:	4a4c      	ldr	r2, [pc, #304]	@ (800fa34 <HAL_TIM_Base_Init+0x268>)
 800f904:	4293      	cmp	r3, r2
 800f906:	d107      	bne.n	800f918 <HAL_TIM_Base_Init+0x14c>
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	68db      	ldr	r3, [r3, #12]
 800f90c:	2b00      	cmp	r3, #0
 800f90e:	bf14      	ite	ne
 800f910:	2301      	movne	r3, #1
 800f912:	2300      	moveq	r3, #0
 800f914:	b2db      	uxtb	r3, r3
 800f916:	e00e      	b.n	800f936 <HAL_TIM_Base_Init+0x16a>
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	68db      	ldr	r3, [r3, #12]
 800f91c:	2b00      	cmp	r3, #0
 800f91e:	d006      	beq.n	800f92e <HAL_TIM_Base_Init+0x162>
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	68db      	ldr	r3, [r3, #12]
 800f924:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f928:	d201      	bcs.n	800f92e <HAL_TIM_Base_Init+0x162>
 800f92a:	2301      	movs	r3, #1
 800f92c:	e000      	b.n	800f930 <HAL_TIM_Base_Init+0x164>
 800f92e:	2300      	movs	r3, #0
 800f930:	f003 0301 	and.w	r3, r3, #1
 800f934:	b2db      	uxtb	r3, r3
 800f936:	2b00      	cmp	r3, #0
 800f938:	d104      	bne.n	800f944 <HAL_TIM_Base_Init+0x178>
 800f93a:	f240 1119 	movw	r1, #281	@ 0x119
 800f93e:	483e      	ldr	r0, [pc, #248]	@ (800fa38 <HAL_TIM_Base_Init+0x26c>)
 800f940:	f7f2 fd40 	bl	80023c4 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	699b      	ldr	r3, [r3, #24]
 800f948:	2b00      	cmp	r3, #0
 800f94a:	d008      	beq.n	800f95e <HAL_TIM_Base_Init+0x192>
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	699b      	ldr	r3, [r3, #24]
 800f950:	2b80      	cmp	r3, #128	@ 0x80
 800f952:	d004      	beq.n	800f95e <HAL_TIM_Base_Init+0x192>
 800f954:	f44f 718d 	mov.w	r1, #282	@ 0x11a
 800f958:	4837      	ldr	r0, [pc, #220]	@ (800fa38 <HAL_TIM_Base_Init+0x26c>)
 800f95a:	f7f2 fd33 	bl	80023c4 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800f964:	b2db      	uxtb	r3, r3
 800f966:	2b00      	cmp	r3, #0
 800f968:	d106      	bne.n	800f978 <HAL_TIM_Base_Init+0x1ac>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f96a:	687b      	ldr	r3, [r7, #4]
 800f96c:	2200      	movs	r2, #0
 800f96e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800f972:	6878      	ldr	r0, [r7, #4]
 800f974:	f000 f862 	bl	800fa3c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	2202      	movs	r2, #2
 800f97c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	681a      	ldr	r2, [r3, #0]
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	3304      	adds	r3, #4
 800f988:	4619      	mov	r1, r3
 800f98a:	4610      	mov	r0, r2
 800f98c:	f000 fa76 	bl	800fe7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	2201      	movs	r2, #1
 800f994:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	2201      	movs	r2, #1
 800f99c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	2201      	movs	r2, #1
 800f9a4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	2201      	movs	r2, #1
 800f9ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	2201      	movs	r2, #1
 800f9b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	2201      	movs	r2, #1
 800f9bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	2201      	movs	r2, #1
 800f9c4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f9c8:	687b      	ldr	r3, [r7, #4]
 800f9ca:	2201      	movs	r2, #1
 800f9cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	2201      	movs	r2, #1
 800f9d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	2201      	movs	r2, #1
 800f9dc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	2201      	movs	r2, #1
 800f9e4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	2201      	movs	r2, #1
 800f9ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800f9f0:	2300      	movs	r3, #0
}
 800f9f2:	4618      	mov	r0, r3
 800f9f4:	3708      	adds	r7, #8
 800f9f6:	46bd      	mov	sp, r7
 800f9f8:	bd80      	pop	{r7, pc}
 800f9fa:	bf00      	nop
 800f9fc:	40010000 	.word	0x40010000
 800fa00:	40000400 	.word	0x40000400
 800fa04:	40000800 	.word	0x40000800
 800fa08:	40000c00 	.word	0x40000c00
 800fa0c:	40001000 	.word	0x40001000
 800fa10:	40001400 	.word	0x40001400
 800fa14:	40010400 	.word	0x40010400
 800fa18:	40001800 	.word	0x40001800
 800fa1c:	40001c00 	.word	0x40001c00
 800fa20:	40002000 	.word	0x40002000
 800fa24:	40014000 	.word	0x40014000
 800fa28:	40014400 	.word	0x40014400
 800fa2c:	40014800 	.word	0x40014800
 800fa30:	4000e000 	.word	0x4000e000
 800fa34:	4000e400 	.word	0x4000e400
 800fa38:	08021710 	.word	0x08021710

0800fa3c <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800fa3c:	b480      	push	{r7}
 800fa3e:	b083      	sub	sp, #12
 800fa40:	af00      	add	r7, sp, #0
 800fa42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800fa44:	bf00      	nop
 800fa46:	370c      	adds	r7, #12
 800fa48:	46bd      	mov	sp, r7
 800fa4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa4e:	4770      	bx	lr

0800fa50 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800fa50:	b580      	push	{r7, lr}
 800fa52:	b084      	sub	sp, #16
 800fa54:	af00      	add	r7, sp, #0
 800fa56:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	681b      	ldr	r3, [r3, #0]
 800fa5c:	4a5e      	ldr	r2, [pc, #376]	@ (800fbd8 <HAL_TIM_Base_Start_IT+0x188>)
 800fa5e:	4293      	cmp	r3, r2
 800fa60:	d04f      	beq.n	800fb02 <HAL_TIM_Base_Start_IT+0xb2>
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	681b      	ldr	r3, [r3, #0]
 800fa66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800fa6a:	d04a      	beq.n	800fb02 <HAL_TIM_Base_Start_IT+0xb2>
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	681b      	ldr	r3, [r3, #0]
 800fa70:	4a5a      	ldr	r2, [pc, #360]	@ (800fbdc <HAL_TIM_Base_Start_IT+0x18c>)
 800fa72:	4293      	cmp	r3, r2
 800fa74:	d045      	beq.n	800fb02 <HAL_TIM_Base_Start_IT+0xb2>
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	681b      	ldr	r3, [r3, #0]
 800fa7a:	4a59      	ldr	r2, [pc, #356]	@ (800fbe0 <HAL_TIM_Base_Start_IT+0x190>)
 800fa7c:	4293      	cmp	r3, r2
 800fa7e:	d040      	beq.n	800fb02 <HAL_TIM_Base_Start_IT+0xb2>
 800fa80:	687b      	ldr	r3, [r7, #4]
 800fa82:	681b      	ldr	r3, [r3, #0]
 800fa84:	4a57      	ldr	r2, [pc, #348]	@ (800fbe4 <HAL_TIM_Base_Start_IT+0x194>)
 800fa86:	4293      	cmp	r3, r2
 800fa88:	d03b      	beq.n	800fb02 <HAL_TIM_Base_Start_IT+0xb2>
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	681b      	ldr	r3, [r3, #0]
 800fa8e:	4a56      	ldr	r2, [pc, #344]	@ (800fbe8 <HAL_TIM_Base_Start_IT+0x198>)
 800fa90:	4293      	cmp	r3, r2
 800fa92:	d036      	beq.n	800fb02 <HAL_TIM_Base_Start_IT+0xb2>
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	681b      	ldr	r3, [r3, #0]
 800fa98:	4a54      	ldr	r2, [pc, #336]	@ (800fbec <HAL_TIM_Base_Start_IT+0x19c>)
 800fa9a:	4293      	cmp	r3, r2
 800fa9c:	d031      	beq.n	800fb02 <HAL_TIM_Base_Start_IT+0xb2>
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	681b      	ldr	r3, [r3, #0]
 800faa2:	4a53      	ldr	r2, [pc, #332]	@ (800fbf0 <HAL_TIM_Base_Start_IT+0x1a0>)
 800faa4:	4293      	cmp	r3, r2
 800faa6:	d02c      	beq.n	800fb02 <HAL_TIM_Base_Start_IT+0xb2>
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	681b      	ldr	r3, [r3, #0]
 800faac:	4a51      	ldr	r2, [pc, #324]	@ (800fbf4 <HAL_TIM_Base_Start_IT+0x1a4>)
 800faae:	4293      	cmp	r3, r2
 800fab0:	d027      	beq.n	800fb02 <HAL_TIM_Base_Start_IT+0xb2>
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	681b      	ldr	r3, [r3, #0]
 800fab6:	4a50      	ldr	r2, [pc, #320]	@ (800fbf8 <HAL_TIM_Base_Start_IT+0x1a8>)
 800fab8:	4293      	cmp	r3, r2
 800faba:	d022      	beq.n	800fb02 <HAL_TIM_Base_Start_IT+0xb2>
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	681b      	ldr	r3, [r3, #0]
 800fac0:	4a4e      	ldr	r2, [pc, #312]	@ (800fbfc <HAL_TIM_Base_Start_IT+0x1ac>)
 800fac2:	4293      	cmp	r3, r2
 800fac4:	d01d      	beq.n	800fb02 <HAL_TIM_Base_Start_IT+0xb2>
 800fac6:	687b      	ldr	r3, [r7, #4]
 800fac8:	681b      	ldr	r3, [r3, #0]
 800faca:	4a4d      	ldr	r2, [pc, #308]	@ (800fc00 <HAL_TIM_Base_Start_IT+0x1b0>)
 800facc:	4293      	cmp	r3, r2
 800face:	d018      	beq.n	800fb02 <HAL_TIM_Base_Start_IT+0xb2>
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	681b      	ldr	r3, [r3, #0]
 800fad4:	4a4b      	ldr	r2, [pc, #300]	@ (800fc04 <HAL_TIM_Base_Start_IT+0x1b4>)
 800fad6:	4293      	cmp	r3, r2
 800fad8:	d013      	beq.n	800fb02 <HAL_TIM_Base_Start_IT+0xb2>
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	681b      	ldr	r3, [r3, #0]
 800fade:	4a4a      	ldr	r2, [pc, #296]	@ (800fc08 <HAL_TIM_Base_Start_IT+0x1b8>)
 800fae0:	4293      	cmp	r3, r2
 800fae2:	d00e      	beq.n	800fb02 <HAL_TIM_Base_Start_IT+0xb2>
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	681b      	ldr	r3, [r3, #0]
 800fae8:	4a48      	ldr	r2, [pc, #288]	@ (800fc0c <HAL_TIM_Base_Start_IT+0x1bc>)
 800faea:	4293      	cmp	r3, r2
 800faec:	d009      	beq.n	800fb02 <HAL_TIM_Base_Start_IT+0xb2>
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	681b      	ldr	r3, [r3, #0]
 800faf2:	4a47      	ldr	r2, [pc, #284]	@ (800fc10 <HAL_TIM_Base_Start_IT+0x1c0>)
 800faf4:	4293      	cmp	r3, r2
 800faf6:	d004      	beq.n	800fb02 <HAL_TIM_Base_Start_IT+0xb2>
 800faf8:	f240 11d3 	movw	r1, #467	@ 0x1d3
 800fafc:	4845      	ldr	r0, [pc, #276]	@ (800fc14 <HAL_TIM_Base_Start_IT+0x1c4>)
 800fafe:	f7f2 fc61 	bl	80023c4 <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800fb08:	b2db      	uxtb	r3, r3
 800fb0a:	2b01      	cmp	r3, #1
 800fb0c:	d001      	beq.n	800fb12 <HAL_TIM_Base_Start_IT+0xc2>
  {
    return HAL_ERROR;
 800fb0e:	2301      	movs	r3, #1
 800fb10:	e05e      	b.n	800fbd0 <HAL_TIM_Base_Start_IT+0x180>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	2202      	movs	r2, #2
 800fb16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	681b      	ldr	r3, [r3, #0]
 800fb1e:	68da      	ldr	r2, [r3, #12]
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	681b      	ldr	r3, [r3, #0]
 800fb24:	f042 0201 	orr.w	r2, r2, #1
 800fb28:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	681b      	ldr	r3, [r3, #0]
 800fb2e:	4a2a      	ldr	r2, [pc, #168]	@ (800fbd8 <HAL_TIM_Base_Start_IT+0x188>)
 800fb30:	4293      	cmp	r3, r2
 800fb32:	d02c      	beq.n	800fb8e <HAL_TIM_Base_Start_IT+0x13e>
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	681b      	ldr	r3, [r3, #0]
 800fb38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800fb3c:	d027      	beq.n	800fb8e <HAL_TIM_Base_Start_IT+0x13e>
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	681b      	ldr	r3, [r3, #0]
 800fb42:	4a26      	ldr	r2, [pc, #152]	@ (800fbdc <HAL_TIM_Base_Start_IT+0x18c>)
 800fb44:	4293      	cmp	r3, r2
 800fb46:	d022      	beq.n	800fb8e <HAL_TIM_Base_Start_IT+0x13e>
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	681b      	ldr	r3, [r3, #0]
 800fb4c:	4a24      	ldr	r2, [pc, #144]	@ (800fbe0 <HAL_TIM_Base_Start_IT+0x190>)
 800fb4e:	4293      	cmp	r3, r2
 800fb50:	d01d      	beq.n	800fb8e <HAL_TIM_Base_Start_IT+0x13e>
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	681b      	ldr	r3, [r3, #0]
 800fb56:	4a23      	ldr	r2, [pc, #140]	@ (800fbe4 <HAL_TIM_Base_Start_IT+0x194>)
 800fb58:	4293      	cmp	r3, r2
 800fb5a:	d018      	beq.n	800fb8e <HAL_TIM_Base_Start_IT+0x13e>
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	681b      	ldr	r3, [r3, #0]
 800fb60:	4a23      	ldr	r2, [pc, #140]	@ (800fbf0 <HAL_TIM_Base_Start_IT+0x1a0>)
 800fb62:	4293      	cmp	r3, r2
 800fb64:	d013      	beq.n	800fb8e <HAL_TIM_Base_Start_IT+0x13e>
 800fb66:	687b      	ldr	r3, [r7, #4]
 800fb68:	681b      	ldr	r3, [r3, #0]
 800fb6a:	4a22      	ldr	r2, [pc, #136]	@ (800fbf4 <HAL_TIM_Base_Start_IT+0x1a4>)
 800fb6c:	4293      	cmp	r3, r2
 800fb6e:	d00e      	beq.n	800fb8e <HAL_TIM_Base_Start_IT+0x13e>
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	681b      	ldr	r3, [r3, #0]
 800fb74:	4a22      	ldr	r2, [pc, #136]	@ (800fc00 <HAL_TIM_Base_Start_IT+0x1b0>)
 800fb76:	4293      	cmp	r3, r2
 800fb78:	d009      	beq.n	800fb8e <HAL_TIM_Base_Start_IT+0x13e>
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	681b      	ldr	r3, [r3, #0]
 800fb7e:	4a23      	ldr	r2, [pc, #140]	@ (800fc0c <HAL_TIM_Base_Start_IT+0x1bc>)
 800fb80:	4293      	cmp	r3, r2
 800fb82:	d004      	beq.n	800fb8e <HAL_TIM_Base_Start_IT+0x13e>
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	681b      	ldr	r3, [r3, #0]
 800fb88:	4a21      	ldr	r2, [pc, #132]	@ (800fc10 <HAL_TIM_Base_Start_IT+0x1c0>)
 800fb8a:	4293      	cmp	r3, r2
 800fb8c:	d115      	bne.n	800fbba <HAL_TIM_Base_Start_IT+0x16a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	681b      	ldr	r3, [r3, #0]
 800fb92:	689a      	ldr	r2, [r3, #8]
 800fb94:	4b20      	ldr	r3, [pc, #128]	@ (800fc18 <HAL_TIM_Base_Start_IT+0x1c8>)
 800fb96:	4013      	ands	r3, r2
 800fb98:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fb9a:	68fb      	ldr	r3, [r7, #12]
 800fb9c:	2b06      	cmp	r3, #6
 800fb9e:	d015      	beq.n	800fbcc <HAL_TIM_Base_Start_IT+0x17c>
 800fba0:	68fb      	ldr	r3, [r7, #12]
 800fba2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800fba6:	d011      	beq.n	800fbcc <HAL_TIM_Base_Start_IT+0x17c>
    {
      __HAL_TIM_ENABLE(htim);
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	681b      	ldr	r3, [r3, #0]
 800fbac:	681a      	ldr	r2, [r3, #0]
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	681b      	ldr	r3, [r3, #0]
 800fbb2:	f042 0201 	orr.w	r2, r2, #1
 800fbb6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fbb8:	e008      	b.n	800fbcc <HAL_TIM_Base_Start_IT+0x17c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	681b      	ldr	r3, [r3, #0]
 800fbbe:	681a      	ldr	r2, [r3, #0]
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	681b      	ldr	r3, [r3, #0]
 800fbc4:	f042 0201 	orr.w	r2, r2, #1
 800fbc8:	601a      	str	r2, [r3, #0]
 800fbca:	e000      	b.n	800fbce <HAL_TIM_Base_Start_IT+0x17e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fbcc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800fbce:	2300      	movs	r3, #0
}
 800fbd0:	4618      	mov	r0, r3
 800fbd2:	3710      	adds	r7, #16
 800fbd4:	46bd      	mov	sp, r7
 800fbd6:	bd80      	pop	{r7, pc}
 800fbd8:	40010000 	.word	0x40010000
 800fbdc:	40000400 	.word	0x40000400
 800fbe0:	40000800 	.word	0x40000800
 800fbe4:	40000c00 	.word	0x40000c00
 800fbe8:	40001000 	.word	0x40001000
 800fbec:	40001400 	.word	0x40001400
 800fbf0:	40010400 	.word	0x40010400
 800fbf4:	40001800 	.word	0x40001800
 800fbf8:	40001c00 	.word	0x40001c00
 800fbfc:	40002000 	.word	0x40002000
 800fc00:	40014000 	.word	0x40014000
 800fc04:	40014400 	.word	0x40014400
 800fc08:	40014800 	.word	0x40014800
 800fc0c:	4000e000 	.word	0x4000e000
 800fc10:	4000e400 	.word	0x4000e400
 800fc14:	08021710 	.word	0x08021710
 800fc18:	00010007 	.word	0x00010007

0800fc1c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800fc1c:	b580      	push	{r7, lr}
 800fc1e:	b084      	sub	sp, #16
 800fc20:	af00      	add	r7, sp, #0
 800fc22:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800fc24:	687b      	ldr	r3, [r7, #4]
 800fc26:	681b      	ldr	r3, [r3, #0]
 800fc28:	68db      	ldr	r3, [r3, #12]
 800fc2a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	681b      	ldr	r3, [r3, #0]
 800fc30:	691b      	ldr	r3, [r3, #16]
 800fc32:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800fc34:	68bb      	ldr	r3, [r7, #8]
 800fc36:	f003 0302 	and.w	r3, r3, #2
 800fc3a:	2b00      	cmp	r3, #0
 800fc3c:	d020      	beq.n	800fc80 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800fc3e:	68fb      	ldr	r3, [r7, #12]
 800fc40:	f003 0302 	and.w	r3, r3, #2
 800fc44:	2b00      	cmp	r3, #0
 800fc46:	d01b      	beq.n	800fc80 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800fc48:	687b      	ldr	r3, [r7, #4]
 800fc4a:	681b      	ldr	r3, [r3, #0]
 800fc4c:	f06f 0202 	mvn.w	r2, #2
 800fc50:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	2201      	movs	r2, #1
 800fc56:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	681b      	ldr	r3, [r3, #0]
 800fc5c:	699b      	ldr	r3, [r3, #24]
 800fc5e:	f003 0303 	and.w	r3, r3, #3
 800fc62:	2b00      	cmp	r3, #0
 800fc64:	d003      	beq.n	800fc6e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800fc66:	6878      	ldr	r0, [r7, #4]
 800fc68:	f000 f8e9 	bl	800fe3e <HAL_TIM_IC_CaptureCallback>
 800fc6c:	e005      	b.n	800fc7a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800fc6e:	6878      	ldr	r0, [r7, #4]
 800fc70:	f000 f8db 	bl	800fe2a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fc74:	6878      	ldr	r0, [r7, #4]
 800fc76:	f000 f8ec 	bl	800fe52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	2200      	movs	r2, #0
 800fc7e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800fc80:	68bb      	ldr	r3, [r7, #8]
 800fc82:	f003 0304 	and.w	r3, r3, #4
 800fc86:	2b00      	cmp	r3, #0
 800fc88:	d020      	beq.n	800fccc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800fc8a:	68fb      	ldr	r3, [r7, #12]
 800fc8c:	f003 0304 	and.w	r3, r3, #4
 800fc90:	2b00      	cmp	r3, #0
 800fc92:	d01b      	beq.n	800fccc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800fc94:	687b      	ldr	r3, [r7, #4]
 800fc96:	681b      	ldr	r3, [r3, #0]
 800fc98:	f06f 0204 	mvn.w	r2, #4
 800fc9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	2202      	movs	r2, #2
 800fca2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800fca4:	687b      	ldr	r3, [r7, #4]
 800fca6:	681b      	ldr	r3, [r3, #0]
 800fca8:	699b      	ldr	r3, [r3, #24]
 800fcaa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800fcae:	2b00      	cmp	r3, #0
 800fcb0:	d003      	beq.n	800fcba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800fcb2:	6878      	ldr	r0, [r7, #4]
 800fcb4:	f000 f8c3 	bl	800fe3e <HAL_TIM_IC_CaptureCallback>
 800fcb8:	e005      	b.n	800fcc6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800fcba:	6878      	ldr	r0, [r7, #4]
 800fcbc:	f000 f8b5 	bl	800fe2a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fcc0:	6878      	ldr	r0, [r7, #4]
 800fcc2:	f000 f8c6 	bl	800fe52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	2200      	movs	r2, #0
 800fcca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800fccc:	68bb      	ldr	r3, [r7, #8]
 800fcce:	f003 0308 	and.w	r3, r3, #8
 800fcd2:	2b00      	cmp	r3, #0
 800fcd4:	d020      	beq.n	800fd18 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800fcd6:	68fb      	ldr	r3, [r7, #12]
 800fcd8:	f003 0308 	and.w	r3, r3, #8
 800fcdc:	2b00      	cmp	r3, #0
 800fcde:	d01b      	beq.n	800fd18 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800fce0:	687b      	ldr	r3, [r7, #4]
 800fce2:	681b      	ldr	r3, [r3, #0]
 800fce4:	f06f 0208 	mvn.w	r2, #8
 800fce8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800fcea:	687b      	ldr	r3, [r7, #4]
 800fcec:	2204      	movs	r2, #4
 800fcee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	681b      	ldr	r3, [r3, #0]
 800fcf4:	69db      	ldr	r3, [r3, #28]
 800fcf6:	f003 0303 	and.w	r3, r3, #3
 800fcfa:	2b00      	cmp	r3, #0
 800fcfc:	d003      	beq.n	800fd06 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800fcfe:	6878      	ldr	r0, [r7, #4]
 800fd00:	f000 f89d 	bl	800fe3e <HAL_TIM_IC_CaptureCallback>
 800fd04:	e005      	b.n	800fd12 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800fd06:	6878      	ldr	r0, [r7, #4]
 800fd08:	f000 f88f 	bl	800fe2a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fd0c:	6878      	ldr	r0, [r7, #4]
 800fd0e:	f000 f8a0 	bl	800fe52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	2200      	movs	r2, #0
 800fd16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800fd18:	68bb      	ldr	r3, [r7, #8]
 800fd1a:	f003 0310 	and.w	r3, r3, #16
 800fd1e:	2b00      	cmp	r3, #0
 800fd20:	d020      	beq.n	800fd64 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800fd22:	68fb      	ldr	r3, [r7, #12]
 800fd24:	f003 0310 	and.w	r3, r3, #16
 800fd28:	2b00      	cmp	r3, #0
 800fd2a:	d01b      	beq.n	800fd64 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800fd2c:	687b      	ldr	r3, [r7, #4]
 800fd2e:	681b      	ldr	r3, [r3, #0]
 800fd30:	f06f 0210 	mvn.w	r2, #16
 800fd34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	2208      	movs	r2, #8
 800fd3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800fd3c:	687b      	ldr	r3, [r7, #4]
 800fd3e:	681b      	ldr	r3, [r3, #0]
 800fd40:	69db      	ldr	r3, [r3, #28]
 800fd42:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800fd46:	2b00      	cmp	r3, #0
 800fd48:	d003      	beq.n	800fd52 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800fd4a:	6878      	ldr	r0, [r7, #4]
 800fd4c:	f000 f877 	bl	800fe3e <HAL_TIM_IC_CaptureCallback>
 800fd50:	e005      	b.n	800fd5e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800fd52:	6878      	ldr	r0, [r7, #4]
 800fd54:	f000 f869 	bl	800fe2a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fd58:	6878      	ldr	r0, [r7, #4]
 800fd5a:	f000 f87a 	bl	800fe52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fd5e:	687b      	ldr	r3, [r7, #4]
 800fd60:	2200      	movs	r2, #0
 800fd62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800fd64:	68bb      	ldr	r3, [r7, #8]
 800fd66:	f003 0301 	and.w	r3, r3, #1
 800fd6a:	2b00      	cmp	r3, #0
 800fd6c:	d00c      	beq.n	800fd88 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800fd6e:	68fb      	ldr	r3, [r7, #12]
 800fd70:	f003 0301 	and.w	r3, r3, #1
 800fd74:	2b00      	cmp	r3, #0
 800fd76:	d007      	beq.n	800fd88 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	681b      	ldr	r3, [r3, #0]
 800fd7c:	f06f 0201 	mvn.w	r2, #1
 800fd80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800fd82:	6878      	ldr	r0, [r7, #4]
 800fd84:	f7f2 faf8 	bl	8002378 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800fd88:	68bb      	ldr	r3, [r7, #8]
 800fd8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fd8e:	2b00      	cmp	r3, #0
 800fd90:	d104      	bne.n	800fd9c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800fd92:	68bb      	ldr	r3, [r7, #8]
 800fd94:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800fd98:	2b00      	cmp	r3, #0
 800fd9a:	d00c      	beq.n	800fdb6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800fd9c:	68fb      	ldr	r3, [r7, #12]
 800fd9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fda2:	2b00      	cmp	r3, #0
 800fda4:	d007      	beq.n	800fdb6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800fda6:	687b      	ldr	r3, [r7, #4]
 800fda8:	681b      	ldr	r3, [r3, #0]
 800fdaa:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800fdae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800fdb0:	6878      	ldr	r0, [r7, #4]
 800fdb2:	f000 f919 	bl	800ffe8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800fdb6:	68bb      	ldr	r3, [r7, #8]
 800fdb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800fdbc:	2b00      	cmp	r3, #0
 800fdbe:	d00c      	beq.n	800fdda <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800fdc0:	68fb      	ldr	r3, [r7, #12]
 800fdc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fdc6:	2b00      	cmp	r3, #0
 800fdc8:	d007      	beq.n	800fdda <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800fdca:	687b      	ldr	r3, [r7, #4]
 800fdcc:	681b      	ldr	r3, [r3, #0]
 800fdce:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800fdd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800fdd4:	6878      	ldr	r0, [r7, #4]
 800fdd6:	f000 f911 	bl	800fffc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800fdda:	68bb      	ldr	r3, [r7, #8]
 800fddc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fde0:	2b00      	cmp	r3, #0
 800fde2:	d00c      	beq.n	800fdfe <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800fde4:	68fb      	ldr	r3, [r7, #12]
 800fde6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fdea:	2b00      	cmp	r3, #0
 800fdec:	d007      	beq.n	800fdfe <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800fdee:	687b      	ldr	r3, [r7, #4]
 800fdf0:	681b      	ldr	r3, [r3, #0]
 800fdf2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800fdf6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800fdf8:	6878      	ldr	r0, [r7, #4]
 800fdfa:	f000 f834 	bl	800fe66 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800fdfe:	68bb      	ldr	r3, [r7, #8]
 800fe00:	f003 0320 	and.w	r3, r3, #32
 800fe04:	2b00      	cmp	r3, #0
 800fe06:	d00c      	beq.n	800fe22 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800fe08:	68fb      	ldr	r3, [r7, #12]
 800fe0a:	f003 0320 	and.w	r3, r3, #32
 800fe0e:	2b00      	cmp	r3, #0
 800fe10:	d007      	beq.n	800fe22 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800fe12:	687b      	ldr	r3, [r7, #4]
 800fe14:	681b      	ldr	r3, [r3, #0]
 800fe16:	f06f 0220 	mvn.w	r2, #32
 800fe1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800fe1c:	6878      	ldr	r0, [r7, #4]
 800fe1e:	f000 f8d9 	bl	800ffd4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800fe22:	bf00      	nop
 800fe24:	3710      	adds	r7, #16
 800fe26:	46bd      	mov	sp, r7
 800fe28:	bd80      	pop	{r7, pc}

0800fe2a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800fe2a:	b480      	push	{r7}
 800fe2c:	b083      	sub	sp, #12
 800fe2e:	af00      	add	r7, sp, #0
 800fe30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800fe32:	bf00      	nop
 800fe34:	370c      	adds	r7, #12
 800fe36:	46bd      	mov	sp, r7
 800fe38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe3c:	4770      	bx	lr

0800fe3e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800fe3e:	b480      	push	{r7}
 800fe40:	b083      	sub	sp, #12
 800fe42:	af00      	add	r7, sp, #0
 800fe44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800fe46:	bf00      	nop
 800fe48:	370c      	adds	r7, #12
 800fe4a:	46bd      	mov	sp, r7
 800fe4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe50:	4770      	bx	lr

0800fe52 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800fe52:	b480      	push	{r7}
 800fe54:	b083      	sub	sp, #12
 800fe56:	af00      	add	r7, sp, #0
 800fe58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800fe5a:	bf00      	nop
 800fe5c:	370c      	adds	r7, #12
 800fe5e:	46bd      	mov	sp, r7
 800fe60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe64:	4770      	bx	lr

0800fe66 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800fe66:	b480      	push	{r7}
 800fe68:	b083      	sub	sp, #12
 800fe6a:	af00      	add	r7, sp, #0
 800fe6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800fe6e:	bf00      	nop
 800fe70:	370c      	adds	r7, #12
 800fe72:	46bd      	mov	sp, r7
 800fe74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe78:	4770      	bx	lr
	...

0800fe7c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800fe7c:	b480      	push	{r7}
 800fe7e:	b085      	sub	sp, #20
 800fe80:	af00      	add	r7, sp, #0
 800fe82:	6078      	str	r0, [r7, #4]
 800fe84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800fe86:	687b      	ldr	r3, [r7, #4]
 800fe88:	681b      	ldr	r3, [r3, #0]
 800fe8a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800fe8c:	687b      	ldr	r3, [r7, #4]
 800fe8e:	4a47      	ldr	r2, [pc, #284]	@ (800ffac <TIM_Base_SetConfig+0x130>)
 800fe90:	4293      	cmp	r3, r2
 800fe92:	d013      	beq.n	800febc <TIM_Base_SetConfig+0x40>
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800fe9a:	d00f      	beq.n	800febc <TIM_Base_SetConfig+0x40>
 800fe9c:	687b      	ldr	r3, [r7, #4]
 800fe9e:	4a44      	ldr	r2, [pc, #272]	@ (800ffb0 <TIM_Base_SetConfig+0x134>)
 800fea0:	4293      	cmp	r3, r2
 800fea2:	d00b      	beq.n	800febc <TIM_Base_SetConfig+0x40>
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	4a43      	ldr	r2, [pc, #268]	@ (800ffb4 <TIM_Base_SetConfig+0x138>)
 800fea8:	4293      	cmp	r3, r2
 800feaa:	d007      	beq.n	800febc <TIM_Base_SetConfig+0x40>
 800feac:	687b      	ldr	r3, [r7, #4]
 800feae:	4a42      	ldr	r2, [pc, #264]	@ (800ffb8 <TIM_Base_SetConfig+0x13c>)
 800feb0:	4293      	cmp	r3, r2
 800feb2:	d003      	beq.n	800febc <TIM_Base_SetConfig+0x40>
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	4a41      	ldr	r2, [pc, #260]	@ (800ffbc <TIM_Base_SetConfig+0x140>)
 800feb8:	4293      	cmp	r3, r2
 800feba:	d108      	bne.n	800fece <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800febc:	68fb      	ldr	r3, [r7, #12]
 800febe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800fec2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800fec4:	683b      	ldr	r3, [r7, #0]
 800fec6:	685b      	ldr	r3, [r3, #4]
 800fec8:	68fa      	ldr	r2, [r7, #12]
 800feca:	4313      	orrs	r3, r2
 800fecc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	4a36      	ldr	r2, [pc, #216]	@ (800ffac <TIM_Base_SetConfig+0x130>)
 800fed2:	4293      	cmp	r3, r2
 800fed4:	d027      	beq.n	800ff26 <TIM_Base_SetConfig+0xaa>
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800fedc:	d023      	beq.n	800ff26 <TIM_Base_SetConfig+0xaa>
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	4a33      	ldr	r2, [pc, #204]	@ (800ffb0 <TIM_Base_SetConfig+0x134>)
 800fee2:	4293      	cmp	r3, r2
 800fee4:	d01f      	beq.n	800ff26 <TIM_Base_SetConfig+0xaa>
 800fee6:	687b      	ldr	r3, [r7, #4]
 800fee8:	4a32      	ldr	r2, [pc, #200]	@ (800ffb4 <TIM_Base_SetConfig+0x138>)
 800feea:	4293      	cmp	r3, r2
 800feec:	d01b      	beq.n	800ff26 <TIM_Base_SetConfig+0xaa>
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	4a31      	ldr	r2, [pc, #196]	@ (800ffb8 <TIM_Base_SetConfig+0x13c>)
 800fef2:	4293      	cmp	r3, r2
 800fef4:	d017      	beq.n	800ff26 <TIM_Base_SetConfig+0xaa>
 800fef6:	687b      	ldr	r3, [r7, #4]
 800fef8:	4a30      	ldr	r2, [pc, #192]	@ (800ffbc <TIM_Base_SetConfig+0x140>)
 800fefa:	4293      	cmp	r3, r2
 800fefc:	d013      	beq.n	800ff26 <TIM_Base_SetConfig+0xaa>
 800fefe:	687b      	ldr	r3, [r7, #4]
 800ff00:	4a2f      	ldr	r2, [pc, #188]	@ (800ffc0 <TIM_Base_SetConfig+0x144>)
 800ff02:	4293      	cmp	r3, r2
 800ff04:	d00f      	beq.n	800ff26 <TIM_Base_SetConfig+0xaa>
 800ff06:	687b      	ldr	r3, [r7, #4]
 800ff08:	4a2e      	ldr	r2, [pc, #184]	@ (800ffc4 <TIM_Base_SetConfig+0x148>)
 800ff0a:	4293      	cmp	r3, r2
 800ff0c:	d00b      	beq.n	800ff26 <TIM_Base_SetConfig+0xaa>
 800ff0e:	687b      	ldr	r3, [r7, #4]
 800ff10:	4a2d      	ldr	r2, [pc, #180]	@ (800ffc8 <TIM_Base_SetConfig+0x14c>)
 800ff12:	4293      	cmp	r3, r2
 800ff14:	d007      	beq.n	800ff26 <TIM_Base_SetConfig+0xaa>
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	4a2c      	ldr	r2, [pc, #176]	@ (800ffcc <TIM_Base_SetConfig+0x150>)
 800ff1a:	4293      	cmp	r3, r2
 800ff1c:	d003      	beq.n	800ff26 <TIM_Base_SetConfig+0xaa>
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	4a2b      	ldr	r2, [pc, #172]	@ (800ffd0 <TIM_Base_SetConfig+0x154>)
 800ff22:	4293      	cmp	r3, r2
 800ff24:	d108      	bne.n	800ff38 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ff26:	68fb      	ldr	r3, [r7, #12]
 800ff28:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ff2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ff2e:	683b      	ldr	r3, [r7, #0]
 800ff30:	68db      	ldr	r3, [r3, #12]
 800ff32:	68fa      	ldr	r2, [r7, #12]
 800ff34:	4313      	orrs	r3, r2
 800ff36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ff38:	68fb      	ldr	r3, [r7, #12]
 800ff3a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800ff3e:	683b      	ldr	r3, [r7, #0]
 800ff40:	695b      	ldr	r3, [r3, #20]
 800ff42:	4313      	orrs	r3, r2
 800ff44:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ff46:	683b      	ldr	r3, [r7, #0]
 800ff48:	689a      	ldr	r2, [r3, #8]
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ff4e:	683b      	ldr	r3, [r7, #0]
 800ff50:	681a      	ldr	r2, [r3, #0]
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ff56:	687b      	ldr	r3, [r7, #4]
 800ff58:	4a14      	ldr	r2, [pc, #80]	@ (800ffac <TIM_Base_SetConfig+0x130>)
 800ff5a:	4293      	cmp	r3, r2
 800ff5c:	d00f      	beq.n	800ff7e <TIM_Base_SetConfig+0x102>
 800ff5e:	687b      	ldr	r3, [r7, #4]
 800ff60:	4a16      	ldr	r2, [pc, #88]	@ (800ffbc <TIM_Base_SetConfig+0x140>)
 800ff62:	4293      	cmp	r3, r2
 800ff64:	d00b      	beq.n	800ff7e <TIM_Base_SetConfig+0x102>
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	4a15      	ldr	r2, [pc, #84]	@ (800ffc0 <TIM_Base_SetConfig+0x144>)
 800ff6a:	4293      	cmp	r3, r2
 800ff6c:	d007      	beq.n	800ff7e <TIM_Base_SetConfig+0x102>
 800ff6e:	687b      	ldr	r3, [r7, #4]
 800ff70:	4a14      	ldr	r2, [pc, #80]	@ (800ffc4 <TIM_Base_SetConfig+0x148>)
 800ff72:	4293      	cmp	r3, r2
 800ff74:	d003      	beq.n	800ff7e <TIM_Base_SetConfig+0x102>
 800ff76:	687b      	ldr	r3, [r7, #4]
 800ff78:	4a13      	ldr	r2, [pc, #76]	@ (800ffc8 <TIM_Base_SetConfig+0x14c>)
 800ff7a:	4293      	cmp	r3, r2
 800ff7c:	d103      	bne.n	800ff86 <TIM_Base_SetConfig+0x10a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ff7e:	683b      	ldr	r3, [r7, #0]
 800ff80:	691a      	ldr	r2, [r3, #16]
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	681b      	ldr	r3, [r3, #0]
 800ff8a:	f043 0204 	orr.w	r2, r3, #4
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ff92:	687b      	ldr	r3, [r7, #4]
 800ff94:	2201      	movs	r2, #1
 800ff96:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800ff98:	687b      	ldr	r3, [r7, #4]
 800ff9a:	68fa      	ldr	r2, [r7, #12]
 800ff9c:	601a      	str	r2, [r3, #0]
}
 800ff9e:	bf00      	nop
 800ffa0:	3714      	adds	r7, #20
 800ffa2:	46bd      	mov	sp, r7
 800ffa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffa8:	4770      	bx	lr
 800ffaa:	bf00      	nop
 800ffac:	40010000 	.word	0x40010000
 800ffb0:	40000400 	.word	0x40000400
 800ffb4:	40000800 	.word	0x40000800
 800ffb8:	40000c00 	.word	0x40000c00
 800ffbc:	40010400 	.word	0x40010400
 800ffc0:	40014000 	.word	0x40014000
 800ffc4:	40014400 	.word	0x40014400
 800ffc8:	40014800 	.word	0x40014800
 800ffcc:	4000e000 	.word	0x4000e000
 800ffd0:	4000e400 	.word	0x4000e400

0800ffd4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ffd4:	b480      	push	{r7}
 800ffd6:	b083      	sub	sp, #12
 800ffd8:	af00      	add	r7, sp, #0
 800ffda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ffdc:	bf00      	nop
 800ffde:	370c      	adds	r7, #12
 800ffe0:	46bd      	mov	sp, r7
 800ffe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffe6:	4770      	bx	lr

0800ffe8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ffe8:	b480      	push	{r7}
 800ffea:	b083      	sub	sp, #12
 800ffec:	af00      	add	r7, sp, #0
 800ffee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800fff0:	bf00      	nop
 800fff2:	370c      	adds	r7, #12
 800fff4:	46bd      	mov	sp, r7
 800fff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fffa:	4770      	bx	lr

0800fffc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800fffc:	b480      	push	{r7}
 800fffe:	b083      	sub	sp, #12
 8010000:	af00      	add	r7, sp, #0
 8010002:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8010004:	bf00      	nop
 8010006:	370c      	adds	r7, #12
 8010008:	46bd      	mov	sp, r7
 801000a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801000e:	4770      	bx	lr

08010010 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8010010:	b580      	push	{r7, lr}
 8010012:	b082      	sub	sp, #8
 8010014:	af00      	add	r7, sp, #0
 8010016:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	2b00      	cmp	r3, #0
 801001c:	d101      	bne.n	8010022 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801001e:	2301      	movs	r3, #1
 8010020:	e0bf      	b.n	80101a2 <HAL_UART_Init+0x192>
  }

  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8010022:	687b      	ldr	r3, [r7, #4]
 8010024:	699b      	ldr	r3, [r3, #24]
 8010026:	2b00      	cmp	r3, #0
 8010028:	d03c      	beq.n	80100a4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	681b      	ldr	r3, [r3, #0]
 801002e:	4a5f      	ldr	r2, [pc, #380]	@ (80101ac <HAL_UART_Init+0x19c>)
 8010030:	4293      	cmp	r3, r2
 8010032:	d073      	beq.n	801011c <HAL_UART_Init+0x10c>
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	681b      	ldr	r3, [r3, #0]
 8010038:	4a5d      	ldr	r2, [pc, #372]	@ (80101b0 <HAL_UART_Init+0x1a0>)
 801003a:	4293      	cmp	r3, r2
 801003c:	d06e      	beq.n	801011c <HAL_UART_Init+0x10c>
 801003e:	687b      	ldr	r3, [r7, #4]
 8010040:	681b      	ldr	r3, [r3, #0]
 8010042:	4a5c      	ldr	r2, [pc, #368]	@ (80101b4 <HAL_UART_Init+0x1a4>)
 8010044:	4293      	cmp	r3, r2
 8010046:	d069      	beq.n	801011c <HAL_UART_Init+0x10c>
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	681b      	ldr	r3, [r3, #0]
 801004c:	4a5a      	ldr	r2, [pc, #360]	@ (80101b8 <HAL_UART_Init+0x1a8>)
 801004e:	4293      	cmp	r3, r2
 8010050:	d064      	beq.n	801011c <HAL_UART_Init+0x10c>
 8010052:	687b      	ldr	r3, [r7, #4]
 8010054:	681b      	ldr	r3, [r3, #0]
 8010056:	4a59      	ldr	r2, [pc, #356]	@ (80101bc <HAL_UART_Init+0x1ac>)
 8010058:	4293      	cmp	r3, r2
 801005a:	d05f      	beq.n	801011c <HAL_UART_Init+0x10c>
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	681b      	ldr	r3, [r3, #0]
 8010060:	4a57      	ldr	r2, [pc, #348]	@ (80101c0 <HAL_UART_Init+0x1b0>)
 8010062:	4293      	cmp	r3, r2
 8010064:	d05a      	beq.n	801011c <HAL_UART_Init+0x10c>
 8010066:	687b      	ldr	r3, [r7, #4]
 8010068:	681b      	ldr	r3, [r3, #0]
 801006a:	4a56      	ldr	r2, [pc, #344]	@ (80101c4 <HAL_UART_Init+0x1b4>)
 801006c:	4293      	cmp	r3, r2
 801006e:	d055      	beq.n	801011c <HAL_UART_Init+0x10c>
 8010070:	687b      	ldr	r3, [r7, #4]
 8010072:	681b      	ldr	r3, [r3, #0]
 8010074:	4a54      	ldr	r2, [pc, #336]	@ (80101c8 <HAL_UART_Init+0x1b8>)
 8010076:	4293      	cmp	r3, r2
 8010078:	d050      	beq.n	801011c <HAL_UART_Init+0x10c>
 801007a:	687b      	ldr	r3, [r7, #4]
 801007c:	681b      	ldr	r3, [r3, #0]
 801007e:	4a53      	ldr	r2, [pc, #332]	@ (80101cc <HAL_UART_Init+0x1bc>)
 8010080:	4293      	cmp	r3, r2
 8010082:	d04b      	beq.n	801011c <HAL_UART_Init+0x10c>
 8010084:	687b      	ldr	r3, [r7, #4]
 8010086:	681b      	ldr	r3, [r3, #0]
 8010088:	4a51      	ldr	r2, [pc, #324]	@ (80101d0 <HAL_UART_Init+0x1c0>)
 801008a:	4293      	cmp	r3, r2
 801008c:	d046      	beq.n	801011c <HAL_UART_Init+0x10c>
 801008e:	687b      	ldr	r3, [r7, #4]
 8010090:	681b      	ldr	r3, [r3, #0]
 8010092:	4a50      	ldr	r2, [pc, #320]	@ (80101d4 <HAL_UART_Init+0x1c4>)
 8010094:	4293      	cmp	r3, r2
 8010096:	d041      	beq.n	801011c <HAL_UART_Init+0x10c>
 8010098:	f44f 719f 	mov.w	r1, #318	@ 0x13e
 801009c:	484e      	ldr	r0, [pc, #312]	@ (80101d8 <HAL_UART_Init+0x1c8>)
 801009e:	f7f2 f991 	bl	80023c4 <assert_failed>
 80100a2:	e03b      	b.n	801011c <HAL_UART_Init+0x10c>
  }
  else
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	681b      	ldr	r3, [r3, #0]
 80100a8:	4a40      	ldr	r2, [pc, #256]	@ (80101ac <HAL_UART_Init+0x19c>)
 80100aa:	4293      	cmp	r3, r2
 80100ac:	d036      	beq.n	801011c <HAL_UART_Init+0x10c>
 80100ae:	687b      	ldr	r3, [r7, #4]
 80100b0:	681b      	ldr	r3, [r3, #0]
 80100b2:	4a3f      	ldr	r2, [pc, #252]	@ (80101b0 <HAL_UART_Init+0x1a0>)
 80100b4:	4293      	cmp	r3, r2
 80100b6:	d031      	beq.n	801011c <HAL_UART_Init+0x10c>
 80100b8:	687b      	ldr	r3, [r7, #4]
 80100ba:	681b      	ldr	r3, [r3, #0]
 80100bc:	4a3d      	ldr	r2, [pc, #244]	@ (80101b4 <HAL_UART_Init+0x1a4>)
 80100be:	4293      	cmp	r3, r2
 80100c0:	d02c      	beq.n	801011c <HAL_UART_Init+0x10c>
 80100c2:	687b      	ldr	r3, [r7, #4]
 80100c4:	681b      	ldr	r3, [r3, #0]
 80100c6:	4a3c      	ldr	r2, [pc, #240]	@ (80101b8 <HAL_UART_Init+0x1a8>)
 80100c8:	4293      	cmp	r3, r2
 80100ca:	d027      	beq.n	801011c <HAL_UART_Init+0x10c>
 80100cc:	687b      	ldr	r3, [r7, #4]
 80100ce:	681b      	ldr	r3, [r3, #0]
 80100d0:	4a3a      	ldr	r2, [pc, #232]	@ (80101bc <HAL_UART_Init+0x1ac>)
 80100d2:	4293      	cmp	r3, r2
 80100d4:	d022      	beq.n	801011c <HAL_UART_Init+0x10c>
 80100d6:	687b      	ldr	r3, [r7, #4]
 80100d8:	681b      	ldr	r3, [r3, #0]
 80100da:	4a39      	ldr	r2, [pc, #228]	@ (80101c0 <HAL_UART_Init+0x1b0>)
 80100dc:	4293      	cmp	r3, r2
 80100de:	d01d      	beq.n	801011c <HAL_UART_Init+0x10c>
 80100e0:	687b      	ldr	r3, [r7, #4]
 80100e2:	681b      	ldr	r3, [r3, #0]
 80100e4:	4a37      	ldr	r2, [pc, #220]	@ (80101c4 <HAL_UART_Init+0x1b4>)
 80100e6:	4293      	cmp	r3, r2
 80100e8:	d018      	beq.n	801011c <HAL_UART_Init+0x10c>
 80100ea:	687b      	ldr	r3, [r7, #4]
 80100ec:	681b      	ldr	r3, [r3, #0]
 80100ee:	4a36      	ldr	r2, [pc, #216]	@ (80101c8 <HAL_UART_Init+0x1b8>)
 80100f0:	4293      	cmp	r3, r2
 80100f2:	d013      	beq.n	801011c <HAL_UART_Init+0x10c>
 80100f4:	687b      	ldr	r3, [r7, #4]
 80100f6:	681b      	ldr	r3, [r3, #0]
 80100f8:	4a34      	ldr	r2, [pc, #208]	@ (80101cc <HAL_UART_Init+0x1bc>)
 80100fa:	4293      	cmp	r3, r2
 80100fc:	d00e      	beq.n	801011c <HAL_UART_Init+0x10c>
 80100fe:	687b      	ldr	r3, [r7, #4]
 8010100:	681b      	ldr	r3, [r3, #0]
 8010102:	4a33      	ldr	r2, [pc, #204]	@ (80101d0 <HAL_UART_Init+0x1c0>)
 8010104:	4293      	cmp	r3, r2
 8010106:	d009      	beq.n	801011c <HAL_UART_Init+0x10c>
 8010108:	687b      	ldr	r3, [r7, #4]
 801010a:	681b      	ldr	r3, [r3, #0]
 801010c:	4a31      	ldr	r2, [pc, #196]	@ (80101d4 <HAL_UART_Init+0x1c4>)
 801010e:	4293      	cmp	r3, r2
 8010110:	d004      	beq.n	801011c <HAL_UART_Init+0x10c>
 8010112:	f240 1143 	movw	r1, #323	@ 0x143
 8010116:	4830      	ldr	r0, [pc, #192]	@ (80101d8 <HAL_UART_Init+0x1c8>)
 8010118:	f7f2 f954 	bl	80023c4 <assert_failed>
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 801011c:	687b      	ldr	r3, [r7, #4]
 801011e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010122:	2b00      	cmp	r3, #0
 8010124:	d106      	bne.n	8010134 <HAL_UART_Init+0x124>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8010126:	687b      	ldr	r3, [r7, #4]
 8010128:	2200      	movs	r2, #0
 801012a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801012e:	6878      	ldr	r0, [r7, #4]
 8010130:	f7f3 f96e 	bl	8003410 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8010134:	687b      	ldr	r3, [r7, #4]
 8010136:	2224      	movs	r2, #36	@ 0x24
 8010138:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	681b      	ldr	r3, [r3, #0]
 8010140:	681a      	ldr	r2, [r3, #0]
 8010142:	687b      	ldr	r3, [r7, #4]
 8010144:	681b      	ldr	r3, [r3, #0]
 8010146:	f022 0201 	bic.w	r2, r2, #1
 801014a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010150:	2b00      	cmp	r3, #0
 8010152:	d002      	beq.n	801015a <HAL_UART_Init+0x14a>
  {
    UART_AdvFeatureConfig(huart);
 8010154:	6878      	ldr	r0, [r7, #4]
 8010156:	f001 fc57 	bl	8011a08 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 801015a:	6878      	ldr	r0, [r7, #4]
 801015c:	f000 fd0e 	bl	8010b7c <UART_SetConfig>
 8010160:	4603      	mov	r3, r0
 8010162:	2b01      	cmp	r3, #1
 8010164:	d101      	bne.n	801016a <HAL_UART_Init+0x15a>
  {
    return HAL_ERROR;
 8010166:	2301      	movs	r3, #1
 8010168:	e01b      	b.n	80101a2 <HAL_UART_Init+0x192>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801016a:	687b      	ldr	r3, [r7, #4]
 801016c:	681b      	ldr	r3, [r3, #0]
 801016e:	685a      	ldr	r2, [r3, #4]
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	681b      	ldr	r3, [r3, #0]
 8010174:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8010178:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801017a:	687b      	ldr	r3, [r7, #4]
 801017c:	681b      	ldr	r3, [r3, #0]
 801017e:	689a      	ldr	r2, [r3, #8]
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	681b      	ldr	r3, [r3, #0]
 8010184:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8010188:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 801018a:	687b      	ldr	r3, [r7, #4]
 801018c:	681b      	ldr	r3, [r3, #0]
 801018e:	681a      	ldr	r2, [r3, #0]
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	681b      	ldr	r3, [r3, #0]
 8010194:	f042 0201 	orr.w	r2, r2, #1
 8010198:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 801019a:	6878      	ldr	r0, [r7, #4]
 801019c:	f001 fdb6 	bl	8011d0c <UART_CheckIdleState>
 80101a0:	4603      	mov	r3, r0
}
 80101a2:	4618      	mov	r0, r3
 80101a4:	3708      	adds	r7, #8
 80101a6:	46bd      	mov	sp, r7
 80101a8:	bd80      	pop	{r7, pc}
 80101aa:	bf00      	nop
 80101ac:	40011000 	.word	0x40011000
 80101b0:	40004400 	.word	0x40004400
 80101b4:	40004800 	.word	0x40004800
 80101b8:	40004c00 	.word	0x40004c00
 80101bc:	40005000 	.word	0x40005000
 80101c0:	40011400 	.word	0x40011400
 80101c4:	40007800 	.word	0x40007800
 80101c8:	40007c00 	.word	0x40007c00
 80101cc:	40011800 	.word	0x40011800
 80101d0:	40011c00 	.word	0x40011c00
 80101d4:	58000c00 	.word	0x58000c00
 80101d8:	08021748 	.word	0x08021748

080101dc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80101dc:	b580      	push	{r7, lr}
 80101de:	b08a      	sub	sp, #40	@ 0x28
 80101e0:	af02      	add	r7, sp, #8
 80101e2:	60f8      	str	r0, [r7, #12]
 80101e4:	60b9      	str	r1, [r7, #8]
 80101e6:	603b      	str	r3, [r7, #0]
 80101e8:	4613      	mov	r3, r2
 80101ea:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80101ec:	68fb      	ldr	r3, [r7, #12]
 80101ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80101f2:	2b20      	cmp	r3, #32
 80101f4:	d17b      	bne.n	80102ee <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80101f6:	68bb      	ldr	r3, [r7, #8]
 80101f8:	2b00      	cmp	r3, #0
 80101fa:	d002      	beq.n	8010202 <HAL_UART_Transmit+0x26>
 80101fc:	88fb      	ldrh	r3, [r7, #6]
 80101fe:	2b00      	cmp	r3, #0
 8010200:	d101      	bne.n	8010206 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8010202:	2301      	movs	r3, #1
 8010204:	e074      	b.n	80102f0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010206:	68fb      	ldr	r3, [r7, #12]
 8010208:	2200      	movs	r2, #0
 801020a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801020e:	68fb      	ldr	r3, [r7, #12]
 8010210:	2221      	movs	r2, #33	@ 0x21
 8010212:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8010216:	f7f3 fa71 	bl	80036fc <HAL_GetTick>
 801021a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 801021c:	68fb      	ldr	r3, [r7, #12]
 801021e:	88fa      	ldrh	r2, [r7, #6]
 8010220:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8010224:	68fb      	ldr	r3, [r7, #12]
 8010226:	88fa      	ldrh	r2, [r7, #6]
 8010228:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801022c:	68fb      	ldr	r3, [r7, #12]
 801022e:	689b      	ldr	r3, [r3, #8]
 8010230:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8010234:	d108      	bne.n	8010248 <HAL_UART_Transmit+0x6c>
 8010236:	68fb      	ldr	r3, [r7, #12]
 8010238:	691b      	ldr	r3, [r3, #16]
 801023a:	2b00      	cmp	r3, #0
 801023c:	d104      	bne.n	8010248 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 801023e:	2300      	movs	r3, #0
 8010240:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8010242:	68bb      	ldr	r3, [r7, #8]
 8010244:	61bb      	str	r3, [r7, #24]
 8010246:	e003      	b.n	8010250 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8010248:	68bb      	ldr	r3, [r7, #8]
 801024a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 801024c:	2300      	movs	r3, #0
 801024e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8010250:	e030      	b.n	80102b4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8010252:	683b      	ldr	r3, [r7, #0]
 8010254:	9300      	str	r3, [sp, #0]
 8010256:	697b      	ldr	r3, [r7, #20]
 8010258:	2200      	movs	r2, #0
 801025a:	2180      	movs	r1, #128	@ 0x80
 801025c:	68f8      	ldr	r0, [r7, #12]
 801025e:	f001 fdff 	bl	8011e60 <UART_WaitOnFlagUntilTimeout>
 8010262:	4603      	mov	r3, r0
 8010264:	2b00      	cmp	r3, #0
 8010266:	d005      	beq.n	8010274 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8010268:	68fb      	ldr	r3, [r7, #12]
 801026a:	2220      	movs	r2, #32
 801026c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8010270:	2303      	movs	r3, #3
 8010272:	e03d      	b.n	80102f0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8010274:	69fb      	ldr	r3, [r7, #28]
 8010276:	2b00      	cmp	r3, #0
 8010278:	d10b      	bne.n	8010292 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 801027a:	69bb      	ldr	r3, [r7, #24]
 801027c:	881b      	ldrh	r3, [r3, #0]
 801027e:	461a      	mov	r2, r3
 8010280:	68fb      	ldr	r3, [r7, #12]
 8010282:	681b      	ldr	r3, [r3, #0]
 8010284:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8010288:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 801028a:	69bb      	ldr	r3, [r7, #24]
 801028c:	3302      	adds	r3, #2
 801028e:	61bb      	str	r3, [r7, #24]
 8010290:	e007      	b.n	80102a2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8010292:	69fb      	ldr	r3, [r7, #28]
 8010294:	781a      	ldrb	r2, [r3, #0]
 8010296:	68fb      	ldr	r3, [r7, #12]
 8010298:	681b      	ldr	r3, [r3, #0]
 801029a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 801029c:	69fb      	ldr	r3, [r7, #28]
 801029e:	3301      	adds	r3, #1
 80102a0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80102a2:	68fb      	ldr	r3, [r7, #12]
 80102a4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80102a8:	b29b      	uxth	r3, r3
 80102aa:	3b01      	subs	r3, #1
 80102ac:	b29a      	uxth	r2, r3
 80102ae:	68fb      	ldr	r3, [r7, #12]
 80102b0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80102b4:	68fb      	ldr	r3, [r7, #12]
 80102b6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80102ba:	b29b      	uxth	r3, r3
 80102bc:	2b00      	cmp	r3, #0
 80102be:	d1c8      	bne.n	8010252 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80102c0:	683b      	ldr	r3, [r7, #0]
 80102c2:	9300      	str	r3, [sp, #0]
 80102c4:	697b      	ldr	r3, [r7, #20]
 80102c6:	2200      	movs	r2, #0
 80102c8:	2140      	movs	r1, #64	@ 0x40
 80102ca:	68f8      	ldr	r0, [r7, #12]
 80102cc:	f001 fdc8 	bl	8011e60 <UART_WaitOnFlagUntilTimeout>
 80102d0:	4603      	mov	r3, r0
 80102d2:	2b00      	cmp	r3, #0
 80102d4:	d005      	beq.n	80102e2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80102d6:	68fb      	ldr	r3, [r7, #12]
 80102d8:	2220      	movs	r2, #32
 80102da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80102de:	2303      	movs	r3, #3
 80102e0:	e006      	b.n	80102f0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80102e2:	68fb      	ldr	r3, [r7, #12]
 80102e4:	2220      	movs	r2, #32
 80102e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80102ea:	2300      	movs	r3, #0
 80102ec:	e000      	b.n	80102f0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80102ee:	2302      	movs	r3, #2
  }
}
 80102f0:	4618      	mov	r0, r3
 80102f2:	3720      	adds	r7, #32
 80102f4:	46bd      	mov	sp, r7
 80102f6:	bd80      	pop	{r7, pc}

080102f8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80102f8:	b580      	push	{r7, lr}
 80102fa:	b08a      	sub	sp, #40	@ 0x28
 80102fc:	af00      	add	r7, sp, #0
 80102fe:	60f8      	str	r0, [r7, #12]
 8010300:	60b9      	str	r1, [r7, #8]
 8010302:	4613      	mov	r3, r2
 8010304:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8010306:	68fb      	ldr	r3, [r7, #12]
 8010308:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801030c:	2b20      	cmp	r3, #32
 801030e:	d137      	bne.n	8010380 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8010310:	68bb      	ldr	r3, [r7, #8]
 8010312:	2b00      	cmp	r3, #0
 8010314:	d002      	beq.n	801031c <HAL_UART_Receive_IT+0x24>
 8010316:	88fb      	ldrh	r3, [r7, #6]
 8010318:	2b00      	cmp	r3, #0
 801031a:	d101      	bne.n	8010320 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 801031c:	2301      	movs	r3, #1
 801031e:	e030      	b.n	8010382 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010320:	68fb      	ldr	r3, [r7, #12]
 8010322:	2200      	movs	r2, #0
 8010324:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8010326:	68fb      	ldr	r3, [r7, #12]
 8010328:	681b      	ldr	r3, [r3, #0]
 801032a:	4a18      	ldr	r2, [pc, #96]	@ (801038c <HAL_UART_Receive_IT+0x94>)
 801032c:	4293      	cmp	r3, r2
 801032e:	d01f      	beq.n	8010370 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8010330:	68fb      	ldr	r3, [r7, #12]
 8010332:	681b      	ldr	r3, [r3, #0]
 8010334:	685b      	ldr	r3, [r3, #4]
 8010336:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801033a:	2b00      	cmp	r3, #0
 801033c:	d018      	beq.n	8010370 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801033e:	68fb      	ldr	r3, [r7, #12]
 8010340:	681b      	ldr	r3, [r3, #0]
 8010342:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010344:	697b      	ldr	r3, [r7, #20]
 8010346:	e853 3f00 	ldrex	r3, [r3]
 801034a:	613b      	str	r3, [r7, #16]
   return(result);
 801034c:	693b      	ldr	r3, [r7, #16]
 801034e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8010352:	627b      	str	r3, [r7, #36]	@ 0x24
 8010354:	68fb      	ldr	r3, [r7, #12]
 8010356:	681b      	ldr	r3, [r3, #0]
 8010358:	461a      	mov	r2, r3
 801035a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801035c:	623b      	str	r3, [r7, #32]
 801035e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010360:	69f9      	ldr	r1, [r7, #28]
 8010362:	6a3a      	ldr	r2, [r7, #32]
 8010364:	e841 2300 	strex	r3, r2, [r1]
 8010368:	61bb      	str	r3, [r7, #24]
   return(result);
 801036a:	69bb      	ldr	r3, [r7, #24]
 801036c:	2b00      	cmp	r3, #0
 801036e:	d1e6      	bne.n	801033e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8010370:	88fb      	ldrh	r3, [r7, #6]
 8010372:	461a      	mov	r2, r3
 8010374:	68b9      	ldr	r1, [r7, #8]
 8010376:	68f8      	ldr	r0, [r7, #12]
 8010378:	f001 fde0 	bl	8011f3c <UART_Start_Receive_IT>
 801037c:	4603      	mov	r3, r0
 801037e:	e000      	b.n	8010382 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8010380:	2302      	movs	r3, #2
  }
}
 8010382:	4618      	mov	r0, r3
 8010384:	3728      	adds	r7, #40	@ 0x28
 8010386:	46bd      	mov	sp, r7
 8010388:	bd80      	pop	{r7, pc}
 801038a:	bf00      	nop
 801038c:	58000c00 	.word	0x58000c00

08010390 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8010390:	b580      	push	{r7, lr}
 8010392:	b0ba      	sub	sp, #232	@ 0xe8
 8010394:	af00      	add	r7, sp, #0
 8010396:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	681b      	ldr	r3, [r3, #0]
 801039c:	69db      	ldr	r3, [r3, #28]
 801039e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80103a2:	687b      	ldr	r3, [r7, #4]
 80103a4:	681b      	ldr	r3, [r3, #0]
 80103a6:	681b      	ldr	r3, [r3, #0]
 80103a8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80103ac:	687b      	ldr	r3, [r7, #4]
 80103ae:	681b      	ldr	r3, [r3, #0]
 80103b0:	689b      	ldr	r3, [r3, #8]
 80103b2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80103b6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80103ba:	f640 030f 	movw	r3, #2063	@ 0x80f
 80103be:	4013      	ands	r3, r2
 80103c0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80103c4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80103c8:	2b00      	cmp	r3, #0
 80103ca:	d11b      	bne.n	8010404 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80103cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80103d0:	f003 0320 	and.w	r3, r3, #32
 80103d4:	2b00      	cmp	r3, #0
 80103d6:	d015      	beq.n	8010404 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80103d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80103dc:	f003 0320 	and.w	r3, r3, #32
 80103e0:	2b00      	cmp	r3, #0
 80103e2:	d105      	bne.n	80103f0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80103e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80103e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80103ec:	2b00      	cmp	r3, #0
 80103ee:	d009      	beq.n	8010404 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80103f0:	687b      	ldr	r3, [r7, #4]
 80103f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80103f4:	2b00      	cmp	r3, #0
 80103f6:	f000 8393 	beq.w	8010b20 <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80103fe:	6878      	ldr	r0, [r7, #4]
 8010400:	4798      	blx	r3
      }
      return;
 8010402:	e38d      	b.n	8010b20 <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8010404:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8010408:	2b00      	cmp	r3, #0
 801040a:	f000 8123 	beq.w	8010654 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 801040e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8010412:	4b8d      	ldr	r3, [pc, #564]	@ (8010648 <HAL_UART_IRQHandler+0x2b8>)
 8010414:	4013      	ands	r3, r2
 8010416:	2b00      	cmp	r3, #0
 8010418:	d106      	bne.n	8010428 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 801041a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 801041e:	4b8b      	ldr	r3, [pc, #556]	@ (801064c <HAL_UART_IRQHandler+0x2bc>)
 8010420:	4013      	ands	r3, r2
 8010422:	2b00      	cmp	r3, #0
 8010424:	f000 8116 	beq.w	8010654 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8010428:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801042c:	f003 0301 	and.w	r3, r3, #1
 8010430:	2b00      	cmp	r3, #0
 8010432:	d011      	beq.n	8010458 <HAL_UART_IRQHandler+0xc8>
 8010434:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010438:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801043c:	2b00      	cmp	r3, #0
 801043e:	d00b      	beq.n	8010458 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8010440:	687b      	ldr	r3, [r7, #4]
 8010442:	681b      	ldr	r3, [r3, #0]
 8010444:	2201      	movs	r2, #1
 8010446:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801044e:	f043 0201 	orr.w	r2, r3, #1
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010458:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801045c:	f003 0302 	and.w	r3, r3, #2
 8010460:	2b00      	cmp	r3, #0
 8010462:	d011      	beq.n	8010488 <HAL_UART_IRQHandler+0xf8>
 8010464:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010468:	f003 0301 	and.w	r3, r3, #1
 801046c:	2b00      	cmp	r3, #0
 801046e:	d00b      	beq.n	8010488 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	681b      	ldr	r3, [r3, #0]
 8010474:	2202      	movs	r2, #2
 8010476:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8010478:	687b      	ldr	r3, [r7, #4]
 801047a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801047e:	f043 0204 	orr.w	r2, r3, #4
 8010482:	687b      	ldr	r3, [r7, #4]
 8010484:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010488:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801048c:	f003 0304 	and.w	r3, r3, #4
 8010490:	2b00      	cmp	r3, #0
 8010492:	d011      	beq.n	80104b8 <HAL_UART_IRQHandler+0x128>
 8010494:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010498:	f003 0301 	and.w	r3, r3, #1
 801049c:	2b00      	cmp	r3, #0
 801049e:	d00b      	beq.n	80104b8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	681b      	ldr	r3, [r3, #0]
 80104a4:	2204      	movs	r2, #4
 80104a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80104ae:	f043 0202 	orr.w	r2, r3, #2
 80104b2:	687b      	ldr	r3, [r7, #4]
 80104b4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80104b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80104bc:	f003 0308 	and.w	r3, r3, #8
 80104c0:	2b00      	cmp	r3, #0
 80104c2:	d017      	beq.n	80104f4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80104c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80104c8:	f003 0320 	and.w	r3, r3, #32
 80104cc:	2b00      	cmp	r3, #0
 80104ce:	d105      	bne.n	80104dc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80104d0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80104d4:	4b5c      	ldr	r3, [pc, #368]	@ (8010648 <HAL_UART_IRQHandler+0x2b8>)
 80104d6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80104d8:	2b00      	cmp	r3, #0
 80104da:	d00b      	beq.n	80104f4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80104dc:	687b      	ldr	r3, [r7, #4]
 80104de:	681b      	ldr	r3, [r3, #0]
 80104e0:	2208      	movs	r2, #8
 80104e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80104e4:	687b      	ldr	r3, [r7, #4]
 80104e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80104ea:	f043 0208 	orr.w	r2, r3, #8
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80104f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80104f8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80104fc:	2b00      	cmp	r3, #0
 80104fe:	d012      	beq.n	8010526 <HAL_UART_IRQHandler+0x196>
 8010500:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010504:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8010508:	2b00      	cmp	r3, #0
 801050a:	d00c      	beq.n	8010526 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801050c:	687b      	ldr	r3, [r7, #4]
 801050e:	681b      	ldr	r3, [r3, #0]
 8010510:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8010514:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801051c:	f043 0220 	orr.w	r2, r3, #32
 8010520:	687b      	ldr	r3, [r7, #4]
 8010522:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8010526:	687b      	ldr	r3, [r7, #4]
 8010528:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801052c:	2b00      	cmp	r3, #0
 801052e:	f000 82f9 	beq.w	8010b24 <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8010532:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010536:	f003 0320 	and.w	r3, r3, #32
 801053a:	2b00      	cmp	r3, #0
 801053c:	d013      	beq.n	8010566 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 801053e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010542:	f003 0320 	and.w	r3, r3, #32
 8010546:	2b00      	cmp	r3, #0
 8010548:	d105      	bne.n	8010556 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 801054a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801054e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8010552:	2b00      	cmp	r3, #0
 8010554:	d007      	beq.n	8010566 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8010556:	687b      	ldr	r3, [r7, #4]
 8010558:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801055a:	2b00      	cmp	r3, #0
 801055c:	d003      	beq.n	8010566 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010562:	6878      	ldr	r0, [r7, #4]
 8010564:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801056c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8010570:	687b      	ldr	r3, [r7, #4]
 8010572:	681b      	ldr	r3, [r3, #0]
 8010574:	689b      	ldr	r3, [r3, #8]
 8010576:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801057a:	2b40      	cmp	r3, #64	@ 0x40
 801057c:	d005      	beq.n	801058a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 801057e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8010582:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8010586:	2b00      	cmp	r3, #0
 8010588:	d054      	beq.n	8010634 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 801058a:	6878      	ldr	r0, [r7, #4]
 801058c:	f001 fdf8 	bl	8012180 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010590:	687b      	ldr	r3, [r7, #4]
 8010592:	681b      	ldr	r3, [r3, #0]
 8010594:	689b      	ldr	r3, [r3, #8]
 8010596:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801059a:	2b40      	cmp	r3, #64	@ 0x40
 801059c:	d146      	bne.n	801062c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801059e:	687b      	ldr	r3, [r7, #4]
 80105a0:	681b      	ldr	r3, [r3, #0]
 80105a2:	3308      	adds	r3, #8
 80105a4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80105a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80105ac:	e853 3f00 	ldrex	r3, [r3]
 80105b0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80105b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80105b8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80105bc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80105c0:	687b      	ldr	r3, [r7, #4]
 80105c2:	681b      	ldr	r3, [r3, #0]
 80105c4:	3308      	adds	r3, #8
 80105c6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80105ca:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80105ce:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80105d2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80105d6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80105da:	e841 2300 	strex	r3, r2, [r1]
 80105de:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80105e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80105e6:	2b00      	cmp	r3, #0
 80105e8:	d1d9      	bne.n	801059e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80105ea:	687b      	ldr	r3, [r7, #4]
 80105ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80105f0:	2b00      	cmp	r3, #0
 80105f2:	d017      	beq.n	8010624 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80105f4:	687b      	ldr	r3, [r7, #4]
 80105f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80105fa:	4a15      	ldr	r2, [pc, #84]	@ (8010650 <HAL_UART_IRQHandler+0x2c0>)
 80105fc:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80105fe:	687b      	ldr	r3, [r7, #4]
 8010600:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010604:	4618      	mov	r0, r3
 8010606:	f7f4 fbc3 	bl	8004d90 <HAL_DMA_Abort_IT>
 801060a:	4603      	mov	r3, r0
 801060c:	2b00      	cmp	r3, #0
 801060e:	d019      	beq.n	8010644 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8010610:	687b      	ldr	r3, [r7, #4]
 8010612:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010616:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010618:	687a      	ldr	r2, [r7, #4]
 801061a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 801061e:	4610      	mov	r0, r2
 8010620:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010622:	e00f      	b.n	8010644 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8010624:	6878      	ldr	r0, [r7, #4]
 8010626:	f000 fa93 	bl	8010b50 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801062a:	e00b      	b.n	8010644 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801062c:	6878      	ldr	r0, [r7, #4]
 801062e:	f000 fa8f 	bl	8010b50 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010632:	e007      	b.n	8010644 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8010634:	6878      	ldr	r0, [r7, #4]
 8010636:	f000 fa8b 	bl	8010b50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 801063a:	687b      	ldr	r3, [r7, #4]
 801063c:	2200      	movs	r2, #0
 801063e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8010642:	e26f      	b.n	8010b24 <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010644:	bf00      	nop
    return;
 8010646:	e26d      	b.n	8010b24 <HAL_UART_IRQHandler+0x794>
 8010648:	10000001 	.word	0x10000001
 801064c:	04000120 	.word	0x04000120
 8010650:	0801224d 	.word	0x0801224d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010654:	687b      	ldr	r3, [r7, #4]
 8010656:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010658:	2b01      	cmp	r3, #1
 801065a:	f040 8203 	bne.w	8010a64 <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 801065e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010662:	f003 0310 	and.w	r3, r3, #16
 8010666:	2b00      	cmp	r3, #0
 8010668:	f000 81fc 	beq.w	8010a64 <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 801066c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010670:	f003 0310 	and.w	r3, r3, #16
 8010674:	2b00      	cmp	r3, #0
 8010676:	f000 81f5 	beq.w	8010a64 <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801067a:	687b      	ldr	r3, [r7, #4]
 801067c:	681b      	ldr	r3, [r3, #0]
 801067e:	2210      	movs	r2, #16
 8010680:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010682:	687b      	ldr	r3, [r7, #4]
 8010684:	681b      	ldr	r3, [r3, #0]
 8010686:	689b      	ldr	r3, [r3, #8]
 8010688:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801068c:	2b40      	cmp	r3, #64	@ 0x40
 801068e:	f040 816d 	bne.w	801096c <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8010692:	687b      	ldr	r3, [r7, #4]
 8010694:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010698:	681b      	ldr	r3, [r3, #0]
 801069a:	4aa4      	ldr	r2, [pc, #656]	@ (801092c <HAL_UART_IRQHandler+0x59c>)
 801069c:	4293      	cmp	r3, r2
 801069e:	d068      	beq.n	8010772 <HAL_UART_IRQHandler+0x3e2>
 80106a0:	687b      	ldr	r3, [r7, #4]
 80106a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80106a6:	681b      	ldr	r3, [r3, #0]
 80106a8:	4aa1      	ldr	r2, [pc, #644]	@ (8010930 <HAL_UART_IRQHandler+0x5a0>)
 80106aa:	4293      	cmp	r3, r2
 80106ac:	d061      	beq.n	8010772 <HAL_UART_IRQHandler+0x3e2>
 80106ae:	687b      	ldr	r3, [r7, #4]
 80106b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80106b4:	681b      	ldr	r3, [r3, #0]
 80106b6:	4a9f      	ldr	r2, [pc, #636]	@ (8010934 <HAL_UART_IRQHandler+0x5a4>)
 80106b8:	4293      	cmp	r3, r2
 80106ba:	d05a      	beq.n	8010772 <HAL_UART_IRQHandler+0x3e2>
 80106bc:	687b      	ldr	r3, [r7, #4]
 80106be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80106c2:	681b      	ldr	r3, [r3, #0]
 80106c4:	4a9c      	ldr	r2, [pc, #624]	@ (8010938 <HAL_UART_IRQHandler+0x5a8>)
 80106c6:	4293      	cmp	r3, r2
 80106c8:	d053      	beq.n	8010772 <HAL_UART_IRQHandler+0x3e2>
 80106ca:	687b      	ldr	r3, [r7, #4]
 80106cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80106d0:	681b      	ldr	r3, [r3, #0]
 80106d2:	4a9a      	ldr	r2, [pc, #616]	@ (801093c <HAL_UART_IRQHandler+0x5ac>)
 80106d4:	4293      	cmp	r3, r2
 80106d6:	d04c      	beq.n	8010772 <HAL_UART_IRQHandler+0x3e2>
 80106d8:	687b      	ldr	r3, [r7, #4]
 80106da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80106de:	681b      	ldr	r3, [r3, #0]
 80106e0:	4a97      	ldr	r2, [pc, #604]	@ (8010940 <HAL_UART_IRQHandler+0x5b0>)
 80106e2:	4293      	cmp	r3, r2
 80106e4:	d045      	beq.n	8010772 <HAL_UART_IRQHandler+0x3e2>
 80106e6:	687b      	ldr	r3, [r7, #4]
 80106e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80106ec:	681b      	ldr	r3, [r3, #0]
 80106ee:	4a95      	ldr	r2, [pc, #596]	@ (8010944 <HAL_UART_IRQHandler+0x5b4>)
 80106f0:	4293      	cmp	r3, r2
 80106f2:	d03e      	beq.n	8010772 <HAL_UART_IRQHandler+0x3e2>
 80106f4:	687b      	ldr	r3, [r7, #4]
 80106f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80106fa:	681b      	ldr	r3, [r3, #0]
 80106fc:	4a92      	ldr	r2, [pc, #584]	@ (8010948 <HAL_UART_IRQHandler+0x5b8>)
 80106fe:	4293      	cmp	r3, r2
 8010700:	d037      	beq.n	8010772 <HAL_UART_IRQHandler+0x3e2>
 8010702:	687b      	ldr	r3, [r7, #4]
 8010704:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010708:	681b      	ldr	r3, [r3, #0]
 801070a:	4a90      	ldr	r2, [pc, #576]	@ (801094c <HAL_UART_IRQHandler+0x5bc>)
 801070c:	4293      	cmp	r3, r2
 801070e:	d030      	beq.n	8010772 <HAL_UART_IRQHandler+0x3e2>
 8010710:	687b      	ldr	r3, [r7, #4]
 8010712:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010716:	681b      	ldr	r3, [r3, #0]
 8010718:	4a8d      	ldr	r2, [pc, #564]	@ (8010950 <HAL_UART_IRQHandler+0x5c0>)
 801071a:	4293      	cmp	r3, r2
 801071c:	d029      	beq.n	8010772 <HAL_UART_IRQHandler+0x3e2>
 801071e:	687b      	ldr	r3, [r7, #4]
 8010720:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010724:	681b      	ldr	r3, [r3, #0]
 8010726:	4a8b      	ldr	r2, [pc, #556]	@ (8010954 <HAL_UART_IRQHandler+0x5c4>)
 8010728:	4293      	cmp	r3, r2
 801072a:	d022      	beq.n	8010772 <HAL_UART_IRQHandler+0x3e2>
 801072c:	687b      	ldr	r3, [r7, #4]
 801072e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010732:	681b      	ldr	r3, [r3, #0]
 8010734:	4a88      	ldr	r2, [pc, #544]	@ (8010958 <HAL_UART_IRQHandler+0x5c8>)
 8010736:	4293      	cmp	r3, r2
 8010738:	d01b      	beq.n	8010772 <HAL_UART_IRQHandler+0x3e2>
 801073a:	687b      	ldr	r3, [r7, #4]
 801073c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010740:	681b      	ldr	r3, [r3, #0]
 8010742:	4a86      	ldr	r2, [pc, #536]	@ (801095c <HAL_UART_IRQHandler+0x5cc>)
 8010744:	4293      	cmp	r3, r2
 8010746:	d014      	beq.n	8010772 <HAL_UART_IRQHandler+0x3e2>
 8010748:	687b      	ldr	r3, [r7, #4]
 801074a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801074e:	681b      	ldr	r3, [r3, #0]
 8010750:	4a83      	ldr	r2, [pc, #524]	@ (8010960 <HAL_UART_IRQHandler+0x5d0>)
 8010752:	4293      	cmp	r3, r2
 8010754:	d00d      	beq.n	8010772 <HAL_UART_IRQHandler+0x3e2>
 8010756:	687b      	ldr	r3, [r7, #4]
 8010758:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801075c:	681b      	ldr	r3, [r3, #0]
 801075e:	4a81      	ldr	r2, [pc, #516]	@ (8010964 <HAL_UART_IRQHandler+0x5d4>)
 8010760:	4293      	cmp	r3, r2
 8010762:	d006      	beq.n	8010772 <HAL_UART_IRQHandler+0x3e2>
 8010764:	687b      	ldr	r3, [r7, #4]
 8010766:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801076a:	681b      	ldr	r3, [r3, #0]
 801076c:	4a7e      	ldr	r2, [pc, #504]	@ (8010968 <HAL_UART_IRQHandler+0x5d8>)
 801076e:	4293      	cmp	r3, r2
 8010770:	d106      	bne.n	8010780 <HAL_UART_IRQHandler+0x3f0>
 8010772:	687b      	ldr	r3, [r7, #4]
 8010774:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010778:	681b      	ldr	r3, [r3, #0]
 801077a:	685b      	ldr	r3, [r3, #4]
 801077c:	b29b      	uxth	r3, r3
 801077e:	e005      	b.n	801078c <HAL_UART_IRQHandler+0x3fc>
 8010780:	687b      	ldr	r3, [r7, #4]
 8010782:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010786:	681b      	ldr	r3, [r3, #0]
 8010788:	685b      	ldr	r3, [r3, #4]
 801078a:	b29b      	uxth	r3, r3
 801078c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8010790:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8010794:	2b00      	cmp	r3, #0
 8010796:	f000 80ad 	beq.w	80108f4 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 801079a:	687b      	ldr	r3, [r7, #4]
 801079c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80107a0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80107a4:	429a      	cmp	r2, r3
 80107a6:	f080 80a5 	bcs.w	80108f4 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80107aa:	687b      	ldr	r3, [r7, #4]
 80107ac:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80107b0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80107b4:	687b      	ldr	r3, [r7, #4]
 80107b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80107ba:	69db      	ldr	r3, [r3, #28]
 80107bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80107c0:	f000 8087 	beq.w	80108d2 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80107c4:	687b      	ldr	r3, [r7, #4]
 80107c6:	681b      	ldr	r3, [r3, #0]
 80107c8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80107cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80107d0:	e853 3f00 	ldrex	r3, [r3]
 80107d4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80107d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80107dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80107e0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80107e4:	687b      	ldr	r3, [r7, #4]
 80107e6:	681b      	ldr	r3, [r3, #0]
 80107e8:	461a      	mov	r2, r3
 80107ea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80107ee:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80107f2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80107f6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80107fa:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80107fe:	e841 2300 	strex	r3, r2, [r1]
 8010802:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8010806:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801080a:	2b00      	cmp	r3, #0
 801080c:	d1da      	bne.n	80107c4 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801080e:	687b      	ldr	r3, [r7, #4]
 8010810:	681b      	ldr	r3, [r3, #0]
 8010812:	3308      	adds	r3, #8
 8010814:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010816:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8010818:	e853 3f00 	ldrex	r3, [r3]
 801081c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 801081e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8010820:	f023 0301 	bic.w	r3, r3, #1
 8010824:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8010828:	687b      	ldr	r3, [r7, #4]
 801082a:	681b      	ldr	r3, [r3, #0]
 801082c:	3308      	adds	r3, #8
 801082e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8010832:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8010836:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010838:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 801083a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 801083e:	e841 2300 	strex	r3, r2, [r1]
 8010842:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8010844:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8010846:	2b00      	cmp	r3, #0
 8010848:	d1e1      	bne.n	801080e <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801084a:	687b      	ldr	r3, [r7, #4]
 801084c:	681b      	ldr	r3, [r3, #0]
 801084e:	3308      	adds	r3, #8
 8010850:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010852:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010854:	e853 3f00 	ldrex	r3, [r3]
 8010858:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 801085a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801085c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010860:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8010864:	687b      	ldr	r3, [r7, #4]
 8010866:	681b      	ldr	r3, [r3, #0]
 8010868:	3308      	adds	r3, #8
 801086a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 801086e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8010870:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010872:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8010874:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8010876:	e841 2300 	strex	r3, r2, [r1]
 801087a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 801087c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801087e:	2b00      	cmp	r3, #0
 8010880:	d1e3      	bne.n	801084a <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8010882:	687b      	ldr	r3, [r7, #4]
 8010884:	2220      	movs	r2, #32
 8010886:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801088a:	687b      	ldr	r3, [r7, #4]
 801088c:	2200      	movs	r2, #0
 801088e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010890:	687b      	ldr	r3, [r7, #4]
 8010892:	681b      	ldr	r3, [r3, #0]
 8010894:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010896:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010898:	e853 3f00 	ldrex	r3, [r3]
 801089c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 801089e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80108a0:	f023 0310 	bic.w	r3, r3, #16
 80108a4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	681b      	ldr	r3, [r3, #0]
 80108ac:	461a      	mov	r2, r3
 80108ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80108b2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80108b4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80108b6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80108b8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80108ba:	e841 2300 	strex	r3, r2, [r1]
 80108be:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80108c0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80108c2:	2b00      	cmp	r3, #0
 80108c4:	d1e4      	bne.n	8010890 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80108c6:	687b      	ldr	r3, [r7, #4]
 80108c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80108cc:	4618      	mov	r0, r3
 80108ce:	f7f3 ff41 	bl	8004754 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80108d2:	687b      	ldr	r3, [r7, #4]
 80108d4:	2202      	movs	r2, #2
 80108d6:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80108d8:	687b      	ldr	r3, [r7, #4]
 80108da:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80108de:	687b      	ldr	r3, [r7, #4]
 80108e0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80108e4:	b29b      	uxth	r3, r3
 80108e6:	1ad3      	subs	r3, r2, r3
 80108e8:	b29b      	uxth	r3, r3
 80108ea:	4619      	mov	r1, r3
 80108ec:	6878      	ldr	r0, [r7, #4]
 80108ee:	f000 f939 	bl	8010b64 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80108f2:	e119      	b.n	8010b28 <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80108f4:	687b      	ldr	r3, [r7, #4]
 80108f6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80108fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80108fe:	429a      	cmp	r2, r3
 8010900:	f040 8112 	bne.w	8010b28 <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8010904:	687b      	ldr	r3, [r7, #4]
 8010906:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801090a:	69db      	ldr	r3, [r3, #28]
 801090c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010910:	f040 810a 	bne.w	8010b28 <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8010914:	687b      	ldr	r3, [r7, #4]
 8010916:	2202      	movs	r2, #2
 8010918:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801091a:	687b      	ldr	r3, [r7, #4]
 801091c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8010920:	4619      	mov	r1, r3
 8010922:	6878      	ldr	r0, [r7, #4]
 8010924:	f000 f91e 	bl	8010b64 <HAL_UARTEx_RxEventCallback>
      return;
 8010928:	e0fe      	b.n	8010b28 <HAL_UART_IRQHandler+0x798>
 801092a:	bf00      	nop
 801092c:	40020010 	.word	0x40020010
 8010930:	40020028 	.word	0x40020028
 8010934:	40020040 	.word	0x40020040
 8010938:	40020058 	.word	0x40020058
 801093c:	40020070 	.word	0x40020070
 8010940:	40020088 	.word	0x40020088
 8010944:	400200a0 	.word	0x400200a0
 8010948:	400200b8 	.word	0x400200b8
 801094c:	40020410 	.word	0x40020410
 8010950:	40020428 	.word	0x40020428
 8010954:	40020440 	.word	0x40020440
 8010958:	40020458 	.word	0x40020458
 801095c:	40020470 	.word	0x40020470
 8010960:	40020488 	.word	0x40020488
 8010964:	400204a0 	.word	0x400204a0
 8010968:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 801096c:	687b      	ldr	r3, [r7, #4]
 801096e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8010972:	687b      	ldr	r3, [r7, #4]
 8010974:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8010978:	b29b      	uxth	r3, r3
 801097a:	1ad3      	subs	r3, r2, r3
 801097c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8010986:	b29b      	uxth	r3, r3
 8010988:	2b00      	cmp	r3, #0
 801098a:	f000 80cf 	beq.w	8010b2c <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 801098e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8010992:	2b00      	cmp	r3, #0
 8010994:	f000 80ca 	beq.w	8010b2c <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010998:	687b      	ldr	r3, [r7, #4]
 801099a:	681b      	ldr	r3, [r3, #0]
 801099c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801099e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80109a0:	e853 3f00 	ldrex	r3, [r3]
 80109a4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80109a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80109a8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80109ac:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80109b0:	687b      	ldr	r3, [r7, #4]
 80109b2:	681b      	ldr	r3, [r3, #0]
 80109b4:	461a      	mov	r2, r3
 80109b6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80109ba:	647b      	str	r3, [r7, #68]	@ 0x44
 80109bc:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80109be:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80109c0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80109c2:	e841 2300 	strex	r3, r2, [r1]
 80109c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80109c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80109ca:	2b00      	cmp	r3, #0
 80109cc:	d1e4      	bne.n	8010998 <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80109ce:	687b      	ldr	r3, [r7, #4]
 80109d0:	681b      	ldr	r3, [r3, #0]
 80109d2:	3308      	adds	r3, #8
 80109d4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80109d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80109d8:	e853 3f00 	ldrex	r3, [r3]
 80109dc:	623b      	str	r3, [r7, #32]
   return(result);
 80109de:	6a3a      	ldr	r2, [r7, #32]
 80109e0:	4b55      	ldr	r3, [pc, #340]	@ (8010b38 <HAL_UART_IRQHandler+0x7a8>)
 80109e2:	4013      	ands	r3, r2
 80109e4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80109e8:	687b      	ldr	r3, [r7, #4]
 80109ea:	681b      	ldr	r3, [r3, #0]
 80109ec:	3308      	adds	r3, #8
 80109ee:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80109f2:	633a      	str	r2, [r7, #48]	@ 0x30
 80109f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80109f6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80109f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80109fa:	e841 2300 	strex	r3, r2, [r1]
 80109fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8010a00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010a02:	2b00      	cmp	r3, #0
 8010a04:	d1e3      	bne.n	80109ce <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8010a06:	687b      	ldr	r3, [r7, #4]
 8010a08:	2220      	movs	r2, #32
 8010a0a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010a0e:	687b      	ldr	r3, [r7, #4]
 8010a10:	2200      	movs	r2, #0
 8010a12:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8010a14:	687b      	ldr	r3, [r7, #4]
 8010a16:	2200      	movs	r2, #0
 8010a18:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010a1a:	687b      	ldr	r3, [r7, #4]
 8010a1c:	681b      	ldr	r3, [r3, #0]
 8010a1e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010a20:	693b      	ldr	r3, [r7, #16]
 8010a22:	e853 3f00 	ldrex	r3, [r3]
 8010a26:	60fb      	str	r3, [r7, #12]
   return(result);
 8010a28:	68fb      	ldr	r3, [r7, #12]
 8010a2a:	f023 0310 	bic.w	r3, r3, #16
 8010a2e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8010a32:	687b      	ldr	r3, [r7, #4]
 8010a34:	681b      	ldr	r3, [r3, #0]
 8010a36:	461a      	mov	r2, r3
 8010a38:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8010a3c:	61fb      	str	r3, [r7, #28]
 8010a3e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010a40:	69b9      	ldr	r1, [r7, #24]
 8010a42:	69fa      	ldr	r2, [r7, #28]
 8010a44:	e841 2300 	strex	r3, r2, [r1]
 8010a48:	617b      	str	r3, [r7, #20]
   return(result);
 8010a4a:	697b      	ldr	r3, [r7, #20]
 8010a4c:	2b00      	cmp	r3, #0
 8010a4e:	d1e4      	bne.n	8010a1a <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8010a50:	687b      	ldr	r3, [r7, #4]
 8010a52:	2202      	movs	r2, #2
 8010a54:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8010a56:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8010a5a:	4619      	mov	r1, r3
 8010a5c:	6878      	ldr	r0, [r7, #4]
 8010a5e:	f000 f881 	bl	8010b64 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8010a62:	e063      	b.n	8010b2c <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8010a64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010a68:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8010a6c:	2b00      	cmp	r3, #0
 8010a6e:	d00e      	beq.n	8010a8e <HAL_UART_IRQHandler+0x6fe>
 8010a70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010a74:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8010a78:	2b00      	cmp	r3, #0
 8010a7a:	d008      	beq.n	8010a8e <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8010a7c:	687b      	ldr	r3, [r7, #4]
 8010a7e:	681b      	ldr	r3, [r3, #0]
 8010a80:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8010a84:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8010a86:	6878      	ldr	r0, [r7, #4]
 8010a88:	f002 f93e 	bl	8012d08 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8010a8c:	e051      	b.n	8010b32 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8010a8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010a92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010a96:	2b00      	cmp	r3, #0
 8010a98:	d014      	beq.n	8010ac4 <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8010a9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010a9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010aa2:	2b00      	cmp	r3, #0
 8010aa4:	d105      	bne.n	8010ab2 <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8010aa6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010aaa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8010aae:	2b00      	cmp	r3, #0
 8010ab0:	d008      	beq.n	8010ac4 <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 8010ab2:	687b      	ldr	r3, [r7, #4]
 8010ab4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010ab6:	2b00      	cmp	r3, #0
 8010ab8:	d03a      	beq.n	8010b30 <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 8010aba:	687b      	ldr	r3, [r7, #4]
 8010abc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010abe:	6878      	ldr	r0, [r7, #4]
 8010ac0:	4798      	blx	r3
    }
    return;
 8010ac2:	e035      	b.n	8010b30 <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8010ac4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010ac8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010acc:	2b00      	cmp	r3, #0
 8010ace:	d009      	beq.n	8010ae4 <HAL_UART_IRQHandler+0x754>
 8010ad0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010ad4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010ad8:	2b00      	cmp	r3, #0
 8010ada:	d003      	beq.n	8010ae4 <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 8010adc:	6878      	ldr	r0, [r7, #4]
 8010ade:	f001 fbc7 	bl	8012270 <UART_EndTransmit_IT>
    return;
 8010ae2:	e026      	b.n	8010b32 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8010ae4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010ae8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8010aec:	2b00      	cmp	r3, #0
 8010aee:	d009      	beq.n	8010b04 <HAL_UART_IRQHandler+0x774>
 8010af0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010af4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8010af8:	2b00      	cmp	r3, #0
 8010afa:	d003      	beq.n	8010b04 <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8010afc:	6878      	ldr	r0, [r7, #4]
 8010afe:	f002 f917 	bl	8012d30 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8010b02:	e016      	b.n	8010b32 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8010b04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010b08:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8010b0c:	2b00      	cmp	r3, #0
 8010b0e:	d010      	beq.n	8010b32 <HAL_UART_IRQHandler+0x7a2>
 8010b10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010b14:	2b00      	cmp	r3, #0
 8010b16:	da0c      	bge.n	8010b32 <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8010b18:	6878      	ldr	r0, [r7, #4]
 8010b1a:	f002 f8ff 	bl	8012d1c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8010b1e:	e008      	b.n	8010b32 <HAL_UART_IRQHandler+0x7a2>
      return;
 8010b20:	bf00      	nop
 8010b22:	e006      	b.n	8010b32 <HAL_UART_IRQHandler+0x7a2>
    return;
 8010b24:	bf00      	nop
 8010b26:	e004      	b.n	8010b32 <HAL_UART_IRQHandler+0x7a2>
      return;
 8010b28:	bf00      	nop
 8010b2a:	e002      	b.n	8010b32 <HAL_UART_IRQHandler+0x7a2>
      return;
 8010b2c:	bf00      	nop
 8010b2e:	e000      	b.n	8010b32 <HAL_UART_IRQHandler+0x7a2>
    return;
 8010b30:	bf00      	nop
  }
}
 8010b32:	37e8      	adds	r7, #232	@ 0xe8
 8010b34:	46bd      	mov	sp, r7
 8010b36:	bd80      	pop	{r7, pc}
 8010b38:	effffffe 	.word	0xeffffffe

08010b3c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8010b3c:	b480      	push	{r7}
 8010b3e:	b083      	sub	sp, #12
 8010b40:	af00      	add	r7, sp, #0
 8010b42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8010b44:	bf00      	nop
 8010b46:	370c      	adds	r7, #12
 8010b48:	46bd      	mov	sp, r7
 8010b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b4e:	4770      	bx	lr

08010b50 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8010b50:	b480      	push	{r7}
 8010b52:	b083      	sub	sp, #12
 8010b54:	af00      	add	r7, sp, #0
 8010b56:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8010b58:	bf00      	nop
 8010b5a:	370c      	adds	r7, #12
 8010b5c:	46bd      	mov	sp, r7
 8010b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b62:	4770      	bx	lr

08010b64 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8010b64:	b480      	push	{r7}
 8010b66:	b083      	sub	sp, #12
 8010b68:	af00      	add	r7, sp, #0
 8010b6a:	6078      	str	r0, [r7, #4]
 8010b6c:	460b      	mov	r3, r1
 8010b6e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8010b70:	bf00      	nop
 8010b72:	370c      	adds	r7, #12
 8010b74:	46bd      	mov	sp, r7
 8010b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b7a:	4770      	bx	lr

08010b7c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8010b7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010b80:	b092      	sub	sp, #72	@ 0x48
 8010b82:	af00      	add	r7, sp, #0
 8010b84:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8010b86:	2300      	movs	r3, #0
 8010b88:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  PLL2_ClocksTypeDef pll2_clocks;
  PLL3_ClocksTypeDef pll3_clocks;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8010b8c:	697b      	ldr	r3, [r7, #20]
 8010b8e:	685b      	ldr	r3, [r3, #4]
 8010b90:	4a17      	ldr	r2, [pc, #92]	@ (8010bf0 <UART_SetConfig+0x74>)
 8010b92:	4293      	cmp	r3, r2
 8010b94:	d904      	bls.n	8010ba0 <UART_SetConfig+0x24>
 8010b96:	f640 31e2 	movw	r1, #3042	@ 0xbe2
 8010b9a:	4816      	ldr	r0, [pc, #88]	@ (8010bf4 <UART_SetConfig+0x78>)
 8010b9c:	f7f1 fc12 	bl	80023c4 <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8010ba0:	697b      	ldr	r3, [r7, #20]
 8010ba2:	689b      	ldr	r3, [r3, #8]
 8010ba4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8010ba8:	d00d      	beq.n	8010bc6 <UART_SetConfig+0x4a>
 8010baa:	697b      	ldr	r3, [r7, #20]
 8010bac:	689b      	ldr	r3, [r3, #8]
 8010bae:	2b00      	cmp	r3, #0
 8010bb0:	d009      	beq.n	8010bc6 <UART_SetConfig+0x4a>
 8010bb2:	697b      	ldr	r3, [r7, #20]
 8010bb4:	689b      	ldr	r3, [r3, #8]
 8010bb6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8010bba:	d004      	beq.n	8010bc6 <UART_SetConfig+0x4a>
 8010bbc:	f640 31e3 	movw	r1, #3043	@ 0xbe3
 8010bc0:	480c      	ldr	r0, [pc, #48]	@ (8010bf4 <UART_SetConfig+0x78>)
 8010bc2:	f7f1 fbff 	bl	80023c4 <assert_failed>
  if (UART_INSTANCE_LOWPOWER(huart))
 8010bc6:	697b      	ldr	r3, [r7, #20]
 8010bc8:	681b      	ldr	r3, [r3, #0]
 8010bca:	4a0b      	ldr	r2, [pc, #44]	@ (8010bf8 <UART_SetConfig+0x7c>)
 8010bcc:	4293      	cmp	r3, r2
 8010bce:	d115      	bne.n	8010bfc <UART_SetConfig+0x80>
  {
    assert_param(IS_LPUART_STOPBITS(huart->Init.StopBits));
 8010bd0:	697b      	ldr	r3, [r7, #20]
 8010bd2:	68db      	ldr	r3, [r3, #12]
 8010bd4:	2b00      	cmp	r3, #0
 8010bd6:	d037      	beq.n	8010c48 <UART_SetConfig+0xcc>
 8010bd8:	697b      	ldr	r3, [r7, #20]
 8010bda:	68db      	ldr	r3, [r3, #12]
 8010bdc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8010be0:	d032      	beq.n	8010c48 <UART_SetConfig+0xcc>
 8010be2:	f640 31e6 	movw	r1, #3046	@ 0xbe6
 8010be6:	4803      	ldr	r0, [pc, #12]	@ (8010bf4 <UART_SetConfig+0x78>)
 8010be8:	f7f1 fbec 	bl	80023c4 <assert_failed>
 8010bec:	e02c      	b.n	8010c48 <UART_SetConfig+0xcc>
 8010bee:	bf00      	nop
 8010bf0:	00bebc20 	.word	0x00bebc20
 8010bf4:	08021748 	.word	0x08021748
 8010bf8:	58000c00 	.word	0x58000c00
  }
  else
  {
    assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8010bfc:	697b      	ldr	r3, [r7, #20]
 8010bfe:	68db      	ldr	r3, [r3, #12]
 8010c00:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8010c04:	d012      	beq.n	8010c2c <UART_SetConfig+0xb0>
 8010c06:	697b      	ldr	r3, [r7, #20]
 8010c08:	68db      	ldr	r3, [r3, #12]
 8010c0a:	2b00      	cmp	r3, #0
 8010c0c:	d00e      	beq.n	8010c2c <UART_SetConfig+0xb0>
 8010c0e:	697b      	ldr	r3, [r7, #20]
 8010c10:	68db      	ldr	r3, [r3, #12]
 8010c12:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8010c16:	d009      	beq.n	8010c2c <UART_SetConfig+0xb0>
 8010c18:	697b      	ldr	r3, [r7, #20]
 8010c1a:	68db      	ldr	r3, [r3, #12]
 8010c1c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8010c20:	d004      	beq.n	8010c2c <UART_SetConfig+0xb0>
 8010c22:	f640 31ea 	movw	r1, #3050	@ 0xbea
 8010c26:	48a5      	ldr	r0, [pc, #660]	@ (8010ebc <UART_SetConfig+0x340>)
 8010c28:	f7f1 fbcc 	bl	80023c4 <assert_failed>
    assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 8010c2c:	697b      	ldr	r3, [r7, #20]
 8010c2e:	6a1b      	ldr	r3, [r3, #32]
 8010c30:	2b00      	cmp	r3, #0
 8010c32:	d009      	beq.n	8010c48 <UART_SetConfig+0xcc>
 8010c34:	697b      	ldr	r3, [r7, #20]
 8010c36:	6a1b      	ldr	r3, [r3, #32]
 8010c38:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8010c3c:	d004      	beq.n	8010c48 <UART_SetConfig+0xcc>
 8010c3e:	f640 31eb 	movw	r1, #3051	@ 0xbeb
 8010c42:	489e      	ldr	r0, [pc, #632]	@ (8010ebc <UART_SetConfig+0x340>)
 8010c44:	f7f1 fbbe 	bl	80023c4 <assert_failed>
  }

  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8010c48:	697b      	ldr	r3, [r7, #20]
 8010c4a:	691b      	ldr	r3, [r3, #16]
 8010c4c:	2b00      	cmp	r3, #0
 8010c4e:	d00e      	beq.n	8010c6e <UART_SetConfig+0xf2>
 8010c50:	697b      	ldr	r3, [r7, #20]
 8010c52:	691b      	ldr	r3, [r3, #16]
 8010c54:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8010c58:	d009      	beq.n	8010c6e <UART_SetConfig+0xf2>
 8010c5a:	697b      	ldr	r3, [r7, #20]
 8010c5c:	691b      	ldr	r3, [r3, #16]
 8010c5e:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8010c62:	d004      	beq.n	8010c6e <UART_SetConfig+0xf2>
 8010c64:	f640 31ee 	movw	r1, #3054	@ 0xbee
 8010c68:	4894      	ldr	r0, [pc, #592]	@ (8010ebc <UART_SetConfig+0x340>)
 8010c6a:	f7f1 fbab 	bl	80023c4 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8010c6e:	697b      	ldr	r3, [r7, #20]
 8010c70:	695b      	ldr	r3, [r3, #20]
 8010c72:	f023 030c 	bic.w	r3, r3, #12
 8010c76:	2b00      	cmp	r3, #0
 8010c78:	d103      	bne.n	8010c82 <UART_SetConfig+0x106>
 8010c7a:	697b      	ldr	r3, [r7, #20]
 8010c7c:	695b      	ldr	r3, [r3, #20]
 8010c7e:	2b00      	cmp	r3, #0
 8010c80:	d104      	bne.n	8010c8c <UART_SetConfig+0x110>
 8010c82:	f640 31ef 	movw	r1, #3055	@ 0xbef
 8010c86:	488d      	ldr	r0, [pc, #564]	@ (8010ebc <UART_SetConfig+0x340>)
 8010c88:	f7f1 fb9c 	bl	80023c4 <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8010c8c:	697b      	ldr	r3, [r7, #20]
 8010c8e:	699b      	ldr	r3, [r3, #24]
 8010c90:	2b00      	cmp	r3, #0
 8010c92:	d013      	beq.n	8010cbc <UART_SetConfig+0x140>
 8010c94:	697b      	ldr	r3, [r7, #20]
 8010c96:	699b      	ldr	r3, [r3, #24]
 8010c98:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010c9c:	d00e      	beq.n	8010cbc <UART_SetConfig+0x140>
 8010c9e:	697b      	ldr	r3, [r7, #20]
 8010ca0:	699b      	ldr	r3, [r3, #24]
 8010ca2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010ca6:	d009      	beq.n	8010cbc <UART_SetConfig+0x140>
 8010ca8:	697b      	ldr	r3, [r7, #20]
 8010caa:	699b      	ldr	r3, [r3, #24]
 8010cac:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8010cb0:	d004      	beq.n	8010cbc <UART_SetConfig+0x140>
 8010cb2:	f44f 613f 	mov.w	r1, #3056	@ 0xbf0
 8010cb6:	4881      	ldr	r0, [pc, #516]	@ (8010ebc <UART_SetConfig+0x340>)
 8010cb8:	f7f1 fb84 	bl	80023c4 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8010cbc:	697b      	ldr	r3, [r7, #20]
 8010cbe:	69db      	ldr	r3, [r3, #28]
 8010cc0:	2b00      	cmp	r3, #0
 8010cc2:	d009      	beq.n	8010cd8 <UART_SetConfig+0x15c>
 8010cc4:	697b      	ldr	r3, [r7, #20]
 8010cc6:	69db      	ldr	r3, [r3, #28]
 8010cc8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8010ccc:	d004      	beq.n	8010cd8 <UART_SetConfig+0x15c>
 8010cce:	f640 31f1 	movw	r1, #3057	@ 0xbf1
 8010cd2:	487a      	ldr	r0, [pc, #488]	@ (8010ebc <UART_SetConfig+0x340>)
 8010cd4:	f7f1 fb76 	bl	80023c4 <assert_failed>
  assert_param(IS_UART_PRESCALER(huart->Init.ClockPrescaler));
 8010cd8:	697b      	ldr	r3, [r7, #20]
 8010cda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010cdc:	2b00      	cmp	r3, #0
 8010cde:	d030      	beq.n	8010d42 <UART_SetConfig+0x1c6>
 8010ce0:	697b      	ldr	r3, [r7, #20]
 8010ce2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010ce4:	2b01      	cmp	r3, #1
 8010ce6:	d02c      	beq.n	8010d42 <UART_SetConfig+0x1c6>
 8010ce8:	697b      	ldr	r3, [r7, #20]
 8010cea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010cec:	2b02      	cmp	r3, #2
 8010cee:	d028      	beq.n	8010d42 <UART_SetConfig+0x1c6>
 8010cf0:	697b      	ldr	r3, [r7, #20]
 8010cf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010cf4:	2b03      	cmp	r3, #3
 8010cf6:	d024      	beq.n	8010d42 <UART_SetConfig+0x1c6>
 8010cf8:	697b      	ldr	r3, [r7, #20]
 8010cfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010cfc:	2b04      	cmp	r3, #4
 8010cfe:	d020      	beq.n	8010d42 <UART_SetConfig+0x1c6>
 8010d00:	697b      	ldr	r3, [r7, #20]
 8010d02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010d04:	2b05      	cmp	r3, #5
 8010d06:	d01c      	beq.n	8010d42 <UART_SetConfig+0x1c6>
 8010d08:	697b      	ldr	r3, [r7, #20]
 8010d0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010d0c:	2b06      	cmp	r3, #6
 8010d0e:	d018      	beq.n	8010d42 <UART_SetConfig+0x1c6>
 8010d10:	697b      	ldr	r3, [r7, #20]
 8010d12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010d14:	2b07      	cmp	r3, #7
 8010d16:	d014      	beq.n	8010d42 <UART_SetConfig+0x1c6>
 8010d18:	697b      	ldr	r3, [r7, #20]
 8010d1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010d1c:	2b08      	cmp	r3, #8
 8010d1e:	d010      	beq.n	8010d42 <UART_SetConfig+0x1c6>
 8010d20:	697b      	ldr	r3, [r7, #20]
 8010d22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010d24:	2b09      	cmp	r3, #9
 8010d26:	d00c      	beq.n	8010d42 <UART_SetConfig+0x1c6>
 8010d28:	697b      	ldr	r3, [r7, #20]
 8010d2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010d2c:	2b0a      	cmp	r3, #10
 8010d2e:	d008      	beq.n	8010d42 <UART_SetConfig+0x1c6>
 8010d30:	697b      	ldr	r3, [r7, #20]
 8010d32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010d34:	2b0b      	cmp	r3, #11
 8010d36:	d004      	beq.n	8010d42 <UART_SetConfig+0x1c6>
 8010d38:	f640 31f2 	movw	r1, #3058	@ 0xbf2
 8010d3c:	485f      	ldr	r0, [pc, #380]	@ (8010ebc <UART_SetConfig+0x340>)
 8010d3e:	f7f1 fb41 	bl	80023c4 <assert_failed>
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8010d42:	697b      	ldr	r3, [r7, #20]
 8010d44:	689a      	ldr	r2, [r3, #8]
 8010d46:	697b      	ldr	r3, [r7, #20]
 8010d48:	691b      	ldr	r3, [r3, #16]
 8010d4a:	431a      	orrs	r2, r3
 8010d4c:	697b      	ldr	r3, [r7, #20]
 8010d4e:	695b      	ldr	r3, [r3, #20]
 8010d50:	431a      	orrs	r2, r3
 8010d52:	697b      	ldr	r3, [r7, #20]
 8010d54:	69db      	ldr	r3, [r3, #28]
 8010d56:	4313      	orrs	r3, r2
 8010d58:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8010d5a:	697b      	ldr	r3, [r7, #20]
 8010d5c:	681b      	ldr	r3, [r3, #0]
 8010d5e:	681a      	ldr	r2, [r3, #0]
 8010d60:	4b57      	ldr	r3, [pc, #348]	@ (8010ec0 <UART_SetConfig+0x344>)
 8010d62:	4013      	ands	r3, r2
 8010d64:	697a      	ldr	r2, [r7, #20]
 8010d66:	6812      	ldr	r2, [r2, #0]
 8010d68:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8010d6a:	430b      	orrs	r3, r1
 8010d6c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8010d6e:	697b      	ldr	r3, [r7, #20]
 8010d70:	681b      	ldr	r3, [r3, #0]
 8010d72:	685b      	ldr	r3, [r3, #4]
 8010d74:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8010d78:	697b      	ldr	r3, [r7, #20]
 8010d7a:	68da      	ldr	r2, [r3, #12]
 8010d7c:	697b      	ldr	r3, [r7, #20]
 8010d7e:	681b      	ldr	r3, [r3, #0]
 8010d80:	430a      	orrs	r2, r1
 8010d82:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8010d84:	697b      	ldr	r3, [r7, #20]
 8010d86:	699b      	ldr	r3, [r3, #24]
 8010d88:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8010d8a:	697b      	ldr	r3, [r7, #20]
 8010d8c:	681b      	ldr	r3, [r3, #0]
 8010d8e:	4a4d      	ldr	r2, [pc, #308]	@ (8010ec4 <UART_SetConfig+0x348>)
 8010d90:	4293      	cmp	r3, r2
 8010d92:	d004      	beq.n	8010d9e <UART_SetConfig+0x222>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8010d94:	697b      	ldr	r3, [r7, #20]
 8010d96:	6a1b      	ldr	r3, [r3, #32]
 8010d98:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010d9a:	4313      	orrs	r3, r2
 8010d9c:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8010d9e:	697b      	ldr	r3, [r7, #20]
 8010da0:	681b      	ldr	r3, [r3, #0]
 8010da2:	689a      	ldr	r2, [r3, #8]
 8010da4:	4b48      	ldr	r3, [pc, #288]	@ (8010ec8 <UART_SetConfig+0x34c>)
 8010da6:	4013      	ands	r3, r2
 8010da8:	697a      	ldr	r2, [r7, #20]
 8010daa:	6812      	ldr	r2, [r2, #0]
 8010dac:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8010dae:	430b      	orrs	r3, r1
 8010db0:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8010db2:	697b      	ldr	r3, [r7, #20]
 8010db4:	681b      	ldr	r3, [r3, #0]
 8010db6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010db8:	f023 010f 	bic.w	r1, r3, #15
 8010dbc:	697b      	ldr	r3, [r7, #20]
 8010dbe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010dc0:	697b      	ldr	r3, [r7, #20]
 8010dc2:	681b      	ldr	r3, [r3, #0]
 8010dc4:	430a      	orrs	r2, r1
 8010dc6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8010dc8:	697b      	ldr	r3, [r7, #20]
 8010dca:	681b      	ldr	r3, [r3, #0]
 8010dcc:	4a3f      	ldr	r2, [pc, #252]	@ (8010ecc <UART_SetConfig+0x350>)
 8010dce:	4293      	cmp	r3, r2
 8010dd0:	f040 8084 	bne.w	8010edc <UART_SetConfig+0x360>
 8010dd4:	4b3e      	ldr	r3, [pc, #248]	@ (8010ed0 <UART_SetConfig+0x354>)
 8010dd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010dd8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8010ddc:	2b28      	cmp	r3, #40	@ 0x28
 8010dde:	d879      	bhi.n	8010ed4 <UART_SetConfig+0x358>
 8010de0:	a201      	add	r2, pc, #4	@ (adr r2, 8010de8 <UART_SetConfig+0x26c>)
 8010de2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010de6:	bf00      	nop
 8010de8:	08010e8d 	.word	0x08010e8d
 8010dec:	08010ed5 	.word	0x08010ed5
 8010df0:	08010ed5 	.word	0x08010ed5
 8010df4:	08010ed5 	.word	0x08010ed5
 8010df8:	08010ed5 	.word	0x08010ed5
 8010dfc:	08010ed5 	.word	0x08010ed5
 8010e00:	08010ed5 	.word	0x08010ed5
 8010e04:	08010ed5 	.word	0x08010ed5
 8010e08:	08010e95 	.word	0x08010e95
 8010e0c:	08010ed5 	.word	0x08010ed5
 8010e10:	08010ed5 	.word	0x08010ed5
 8010e14:	08010ed5 	.word	0x08010ed5
 8010e18:	08010ed5 	.word	0x08010ed5
 8010e1c:	08010ed5 	.word	0x08010ed5
 8010e20:	08010ed5 	.word	0x08010ed5
 8010e24:	08010ed5 	.word	0x08010ed5
 8010e28:	08010e9d 	.word	0x08010e9d
 8010e2c:	08010ed5 	.word	0x08010ed5
 8010e30:	08010ed5 	.word	0x08010ed5
 8010e34:	08010ed5 	.word	0x08010ed5
 8010e38:	08010ed5 	.word	0x08010ed5
 8010e3c:	08010ed5 	.word	0x08010ed5
 8010e40:	08010ed5 	.word	0x08010ed5
 8010e44:	08010ed5 	.word	0x08010ed5
 8010e48:	08010ea5 	.word	0x08010ea5
 8010e4c:	08010ed5 	.word	0x08010ed5
 8010e50:	08010ed5 	.word	0x08010ed5
 8010e54:	08010ed5 	.word	0x08010ed5
 8010e58:	08010ed5 	.word	0x08010ed5
 8010e5c:	08010ed5 	.word	0x08010ed5
 8010e60:	08010ed5 	.word	0x08010ed5
 8010e64:	08010ed5 	.word	0x08010ed5
 8010e68:	08010ead 	.word	0x08010ead
 8010e6c:	08010ed5 	.word	0x08010ed5
 8010e70:	08010ed5 	.word	0x08010ed5
 8010e74:	08010ed5 	.word	0x08010ed5
 8010e78:	08010ed5 	.word	0x08010ed5
 8010e7c:	08010ed5 	.word	0x08010ed5
 8010e80:	08010ed5 	.word	0x08010ed5
 8010e84:	08010ed5 	.word	0x08010ed5
 8010e88:	08010eb5 	.word	0x08010eb5
 8010e8c:	2301      	movs	r3, #1
 8010e8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010e92:	e32c      	b.n	80114ee <UART_SetConfig+0x972>
 8010e94:	2304      	movs	r3, #4
 8010e96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010e9a:	e328      	b.n	80114ee <UART_SetConfig+0x972>
 8010e9c:	2308      	movs	r3, #8
 8010e9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010ea2:	e324      	b.n	80114ee <UART_SetConfig+0x972>
 8010ea4:	2310      	movs	r3, #16
 8010ea6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010eaa:	e320      	b.n	80114ee <UART_SetConfig+0x972>
 8010eac:	2320      	movs	r3, #32
 8010eae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010eb2:	e31c      	b.n	80114ee <UART_SetConfig+0x972>
 8010eb4:	2340      	movs	r3, #64	@ 0x40
 8010eb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010eba:	e318      	b.n	80114ee <UART_SetConfig+0x972>
 8010ebc:	08021748 	.word	0x08021748
 8010ec0:	cfff69f3 	.word	0xcfff69f3
 8010ec4:	58000c00 	.word	0x58000c00
 8010ec8:	11fff4ff 	.word	0x11fff4ff
 8010ecc:	40011000 	.word	0x40011000
 8010ed0:	58024400 	.word	0x58024400
 8010ed4:	2380      	movs	r3, #128	@ 0x80
 8010ed6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010eda:	e308      	b.n	80114ee <UART_SetConfig+0x972>
 8010edc:	697b      	ldr	r3, [r7, #20]
 8010ede:	681b      	ldr	r3, [r3, #0]
 8010ee0:	4ac3      	ldr	r2, [pc, #780]	@ (80111f0 <UART_SetConfig+0x674>)
 8010ee2:	4293      	cmp	r3, r2
 8010ee4:	d130      	bne.n	8010f48 <UART_SetConfig+0x3cc>
 8010ee6:	4bc3      	ldr	r3, [pc, #780]	@ (80111f4 <UART_SetConfig+0x678>)
 8010ee8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010eea:	f003 0307 	and.w	r3, r3, #7
 8010eee:	2b05      	cmp	r3, #5
 8010ef0:	d826      	bhi.n	8010f40 <UART_SetConfig+0x3c4>
 8010ef2:	a201      	add	r2, pc, #4	@ (adr r2, 8010ef8 <UART_SetConfig+0x37c>)
 8010ef4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010ef8:	08010f11 	.word	0x08010f11
 8010efc:	08010f19 	.word	0x08010f19
 8010f00:	08010f21 	.word	0x08010f21
 8010f04:	08010f29 	.word	0x08010f29
 8010f08:	08010f31 	.word	0x08010f31
 8010f0c:	08010f39 	.word	0x08010f39
 8010f10:	2300      	movs	r3, #0
 8010f12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010f16:	e2ea      	b.n	80114ee <UART_SetConfig+0x972>
 8010f18:	2304      	movs	r3, #4
 8010f1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010f1e:	e2e6      	b.n	80114ee <UART_SetConfig+0x972>
 8010f20:	2308      	movs	r3, #8
 8010f22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010f26:	e2e2      	b.n	80114ee <UART_SetConfig+0x972>
 8010f28:	2310      	movs	r3, #16
 8010f2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010f2e:	e2de      	b.n	80114ee <UART_SetConfig+0x972>
 8010f30:	2320      	movs	r3, #32
 8010f32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010f36:	e2da      	b.n	80114ee <UART_SetConfig+0x972>
 8010f38:	2340      	movs	r3, #64	@ 0x40
 8010f3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010f3e:	e2d6      	b.n	80114ee <UART_SetConfig+0x972>
 8010f40:	2380      	movs	r3, #128	@ 0x80
 8010f42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010f46:	e2d2      	b.n	80114ee <UART_SetConfig+0x972>
 8010f48:	697b      	ldr	r3, [r7, #20]
 8010f4a:	681b      	ldr	r3, [r3, #0]
 8010f4c:	4aaa      	ldr	r2, [pc, #680]	@ (80111f8 <UART_SetConfig+0x67c>)
 8010f4e:	4293      	cmp	r3, r2
 8010f50:	d130      	bne.n	8010fb4 <UART_SetConfig+0x438>
 8010f52:	4ba8      	ldr	r3, [pc, #672]	@ (80111f4 <UART_SetConfig+0x678>)
 8010f54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010f56:	f003 0307 	and.w	r3, r3, #7
 8010f5a:	2b05      	cmp	r3, #5
 8010f5c:	d826      	bhi.n	8010fac <UART_SetConfig+0x430>
 8010f5e:	a201      	add	r2, pc, #4	@ (adr r2, 8010f64 <UART_SetConfig+0x3e8>)
 8010f60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010f64:	08010f7d 	.word	0x08010f7d
 8010f68:	08010f85 	.word	0x08010f85
 8010f6c:	08010f8d 	.word	0x08010f8d
 8010f70:	08010f95 	.word	0x08010f95
 8010f74:	08010f9d 	.word	0x08010f9d
 8010f78:	08010fa5 	.word	0x08010fa5
 8010f7c:	2300      	movs	r3, #0
 8010f7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010f82:	e2b4      	b.n	80114ee <UART_SetConfig+0x972>
 8010f84:	2304      	movs	r3, #4
 8010f86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010f8a:	e2b0      	b.n	80114ee <UART_SetConfig+0x972>
 8010f8c:	2308      	movs	r3, #8
 8010f8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010f92:	e2ac      	b.n	80114ee <UART_SetConfig+0x972>
 8010f94:	2310      	movs	r3, #16
 8010f96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010f9a:	e2a8      	b.n	80114ee <UART_SetConfig+0x972>
 8010f9c:	2320      	movs	r3, #32
 8010f9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010fa2:	e2a4      	b.n	80114ee <UART_SetConfig+0x972>
 8010fa4:	2340      	movs	r3, #64	@ 0x40
 8010fa6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010faa:	e2a0      	b.n	80114ee <UART_SetConfig+0x972>
 8010fac:	2380      	movs	r3, #128	@ 0x80
 8010fae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010fb2:	e29c      	b.n	80114ee <UART_SetConfig+0x972>
 8010fb4:	697b      	ldr	r3, [r7, #20]
 8010fb6:	681b      	ldr	r3, [r3, #0]
 8010fb8:	4a90      	ldr	r2, [pc, #576]	@ (80111fc <UART_SetConfig+0x680>)
 8010fba:	4293      	cmp	r3, r2
 8010fbc:	d130      	bne.n	8011020 <UART_SetConfig+0x4a4>
 8010fbe:	4b8d      	ldr	r3, [pc, #564]	@ (80111f4 <UART_SetConfig+0x678>)
 8010fc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010fc2:	f003 0307 	and.w	r3, r3, #7
 8010fc6:	2b05      	cmp	r3, #5
 8010fc8:	d826      	bhi.n	8011018 <UART_SetConfig+0x49c>
 8010fca:	a201      	add	r2, pc, #4	@ (adr r2, 8010fd0 <UART_SetConfig+0x454>)
 8010fcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010fd0:	08010fe9 	.word	0x08010fe9
 8010fd4:	08010ff1 	.word	0x08010ff1
 8010fd8:	08010ff9 	.word	0x08010ff9
 8010fdc:	08011001 	.word	0x08011001
 8010fe0:	08011009 	.word	0x08011009
 8010fe4:	08011011 	.word	0x08011011
 8010fe8:	2300      	movs	r3, #0
 8010fea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010fee:	e27e      	b.n	80114ee <UART_SetConfig+0x972>
 8010ff0:	2304      	movs	r3, #4
 8010ff2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010ff6:	e27a      	b.n	80114ee <UART_SetConfig+0x972>
 8010ff8:	2308      	movs	r3, #8
 8010ffa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010ffe:	e276      	b.n	80114ee <UART_SetConfig+0x972>
 8011000:	2310      	movs	r3, #16
 8011002:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011006:	e272      	b.n	80114ee <UART_SetConfig+0x972>
 8011008:	2320      	movs	r3, #32
 801100a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801100e:	e26e      	b.n	80114ee <UART_SetConfig+0x972>
 8011010:	2340      	movs	r3, #64	@ 0x40
 8011012:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011016:	e26a      	b.n	80114ee <UART_SetConfig+0x972>
 8011018:	2380      	movs	r3, #128	@ 0x80
 801101a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801101e:	e266      	b.n	80114ee <UART_SetConfig+0x972>
 8011020:	697b      	ldr	r3, [r7, #20]
 8011022:	681b      	ldr	r3, [r3, #0]
 8011024:	4a76      	ldr	r2, [pc, #472]	@ (8011200 <UART_SetConfig+0x684>)
 8011026:	4293      	cmp	r3, r2
 8011028:	d130      	bne.n	801108c <UART_SetConfig+0x510>
 801102a:	4b72      	ldr	r3, [pc, #456]	@ (80111f4 <UART_SetConfig+0x678>)
 801102c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801102e:	f003 0307 	and.w	r3, r3, #7
 8011032:	2b05      	cmp	r3, #5
 8011034:	d826      	bhi.n	8011084 <UART_SetConfig+0x508>
 8011036:	a201      	add	r2, pc, #4	@ (adr r2, 801103c <UART_SetConfig+0x4c0>)
 8011038:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801103c:	08011055 	.word	0x08011055
 8011040:	0801105d 	.word	0x0801105d
 8011044:	08011065 	.word	0x08011065
 8011048:	0801106d 	.word	0x0801106d
 801104c:	08011075 	.word	0x08011075
 8011050:	0801107d 	.word	0x0801107d
 8011054:	2300      	movs	r3, #0
 8011056:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801105a:	e248      	b.n	80114ee <UART_SetConfig+0x972>
 801105c:	2304      	movs	r3, #4
 801105e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011062:	e244      	b.n	80114ee <UART_SetConfig+0x972>
 8011064:	2308      	movs	r3, #8
 8011066:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801106a:	e240      	b.n	80114ee <UART_SetConfig+0x972>
 801106c:	2310      	movs	r3, #16
 801106e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011072:	e23c      	b.n	80114ee <UART_SetConfig+0x972>
 8011074:	2320      	movs	r3, #32
 8011076:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801107a:	e238      	b.n	80114ee <UART_SetConfig+0x972>
 801107c:	2340      	movs	r3, #64	@ 0x40
 801107e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011082:	e234      	b.n	80114ee <UART_SetConfig+0x972>
 8011084:	2380      	movs	r3, #128	@ 0x80
 8011086:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801108a:	e230      	b.n	80114ee <UART_SetConfig+0x972>
 801108c:	697b      	ldr	r3, [r7, #20]
 801108e:	681b      	ldr	r3, [r3, #0]
 8011090:	4a5c      	ldr	r2, [pc, #368]	@ (8011204 <UART_SetConfig+0x688>)
 8011092:	4293      	cmp	r3, r2
 8011094:	d176      	bne.n	8011184 <UART_SetConfig+0x608>
 8011096:	4b57      	ldr	r3, [pc, #348]	@ (80111f4 <UART_SetConfig+0x678>)
 8011098:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801109a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801109e:	2b28      	cmp	r3, #40	@ 0x28
 80110a0:	d86c      	bhi.n	801117c <UART_SetConfig+0x600>
 80110a2:	a201      	add	r2, pc, #4	@ (adr r2, 80110a8 <UART_SetConfig+0x52c>)
 80110a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80110a8:	0801114d 	.word	0x0801114d
 80110ac:	0801117d 	.word	0x0801117d
 80110b0:	0801117d 	.word	0x0801117d
 80110b4:	0801117d 	.word	0x0801117d
 80110b8:	0801117d 	.word	0x0801117d
 80110bc:	0801117d 	.word	0x0801117d
 80110c0:	0801117d 	.word	0x0801117d
 80110c4:	0801117d 	.word	0x0801117d
 80110c8:	08011155 	.word	0x08011155
 80110cc:	0801117d 	.word	0x0801117d
 80110d0:	0801117d 	.word	0x0801117d
 80110d4:	0801117d 	.word	0x0801117d
 80110d8:	0801117d 	.word	0x0801117d
 80110dc:	0801117d 	.word	0x0801117d
 80110e0:	0801117d 	.word	0x0801117d
 80110e4:	0801117d 	.word	0x0801117d
 80110e8:	0801115d 	.word	0x0801115d
 80110ec:	0801117d 	.word	0x0801117d
 80110f0:	0801117d 	.word	0x0801117d
 80110f4:	0801117d 	.word	0x0801117d
 80110f8:	0801117d 	.word	0x0801117d
 80110fc:	0801117d 	.word	0x0801117d
 8011100:	0801117d 	.word	0x0801117d
 8011104:	0801117d 	.word	0x0801117d
 8011108:	08011165 	.word	0x08011165
 801110c:	0801117d 	.word	0x0801117d
 8011110:	0801117d 	.word	0x0801117d
 8011114:	0801117d 	.word	0x0801117d
 8011118:	0801117d 	.word	0x0801117d
 801111c:	0801117d 	.word	0x0801117d
 8011120:	0801117d 	.word	0x0801117d
 8011124:	0801117d 	.word	0x0801117d
 8011128:	0801116d 	.word	0x0801116d
 801112c:	0801117d 	.word	0x0801117d
 8011130:	0801117d 	.word	0x0801117d
 8011134:	0801117d 	.word	0x0801117d
 8011138:	0801117d 	.word	0x0801117d
 801113c:	0801117d 	.word	0x0801117d
 8011140:	0801117d 	.word	0x0801117d
 8011144:	0801117d 	.word	0x0801117d
 8011148:	08011175 	.word	0x08011175
 801114c:	2301      	movs	r3, #1
 801114e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011152:	e1cc      	b.n	80114ee <UART_SetConfig+0x972>
 8011154:	2304      	movs	r3, #4
 8011156:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801115a:	e1c8      	b.n	80114ee <UART_SetConfig+0x972>
 801115c:	2308      	movs	r3, #8
 801115e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011162:	e1c4      	b.n	80114ee <UART_SetConfig+0x972>
 8011164:	2310      	movs	r3, #16
 8011166:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801116a:	e1c0      	b.n	80114ee <UART_SetConfig+0x972>
 801116c:	2320      	movs	r3, #32
 801116e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011172:	e1bc      	b.n	80114ee <UART_SetConfig+0x972>
 8011174:	2340      	movs	r3, #64	@ 0x40
 8011176:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801117a:	e1b8      	b.n	80114ee <UART_SetConfig+0x972>
 801117c:	2380      	movs	r3, #128	@ 0x80
 801117e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011182:	e1b4      	b.n	80114ee <UART_SetConfig+0x972>
 8011184:	697b      	ldr	r3, [r7, #20]
 8011186:	681b      	ldr	r3, [r3, #0]
 8011188:	4a1f      	ldr	r2, [pc, #124]	@ (8011208 <UART_SetConfig+0x68c>)
 801118a:	4293      	cmp	r3, r2
 801118c:	d13e      	bne.n	801120c <UART_SetConfig+0x690>
 801118e:	4b19      	ldr	r3, [pc, #100]	@ (80111f4 <UART_SetConfig+0x678>)
 8011190:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011192:	f003 0307 	and.w	r3, r3, #7
 8011196:	2b05      	cmp	r3, #5
 8011198:	d826      	bhi.n	80111e8 <UART_SetConfig+0x66c>
 801119a:	a201      	add	r2, pc, #4	@ (adr r2, 80111a0 <UART_SetConfig+0x624>)
 801119c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80111a0:	080111b9 	.word	0x080111b9
 80111a4:	080111c1 	.word	0x080111c1
 80111a8:	080111c9 	.word	0x080111c9
 80111ac:	080111d1 	.word	0x080111d1
 80111b0:	080111d9 	.word	0x080111d9
 80111b4:	080111e1 	.word	0x080111e1
 80111b8:	2300      	movs	r3, #0
 80111ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80111be:	e196      	b.n	80114ee <UART_SetConfig+0x972>
 80111c0:	2304      	movs	r3, #4
 80111c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80111c6:	e192      	b.n	80114ee <UART_SetConfig+0x972>
 80111c8:	2308      	movs	r3, #8
 80111ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80111ce:	e18e      	b.n	80114ee <UART_SetConfig+0x972>
 80111d0:	2310      	movs	r3, #16
 80111d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80111d6:	e18a      	b.n	80114ee <UART_SetConfig+0x972>
 80111d8:	2320      	movs	r3, #32
 80111da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80111de:	e186      	b.n	80114ee <UART_SetConfig+0x972>
 80111e0:	2340      	movs	r3, #64	@ 0x40
 80111e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80111e6:	e182      	b.n	80114ee <UART_SetConfig+0x972>
 80111e8:	2380      	movs	r3, #128	@ 0x80
 80111ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80111ee:	e17e      	b.n	80114ee <UART_SetConfig+0x972>
 80111f0:	40004400 	.word	0x40004400
 80111f4:	58024400 	.word	0x58024400
 80111f8:	40004800 	.word	0x40004800
 80111fc:	40004c00 	.word	0x40004c00
 8011200:	40005000 	.word	0x40005000
 8011204:	40011400 	.word	0x40011400
 8011208:	40007800 	.word	0x40007800
 801120c:	697b      	ldr	r3, [r7, #20]
 801120e:	681b      	ldr	r3, [r3, #0]
 8011210:	4ab0      	ldr	r2, [pc, #704]	@ (80114d4 <UART_SetConfig+0x958>)
 8011212:	4293      	cmp	r3, r2
 8011214:	d130      	bne.n	8011278 <UART_SetConfig+0x6fc>
 8011216:	4bb0      	ldr	r3, [pc, #704]	@ (80114d8 <UART_SetConfig+0x95c>)
 8011218:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801121a:	f003 0307 	and.w	r3, r3, #7
 801121e:	2b05      	cmp	r3, #5
 8011220:	d826      	bhi.n	8011270 <UART_SetConfig+0x6f4>
 8011222:	a201      	add	r2, pc, #4	@ (adr r2, 8011228 <UART_SetConfig+0x6ac>)
 8011224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011228:	08011241 	.word	0x08011241
 801122c:	08011249 	.word	0x08011249
 8011230:	08011251 	.word	0x08011251
 8011234:	08011259 	.word	0x08011259
 8011238:	08011261 	.word	0x08011261
 801123c:	08011269 	.word	0x08011269
 8011240:	2300      	movs	r3, #0
 8011242:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011246:	e152      	b.n	80114ee <UART_SetConfig+0x972>
 8011248:	2304      	movs	r3, #4
 801124a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801124e:	e14e      	b.n	80114ee <UART_SetConfig+0x972>
 8011250:	2308      	movs	r3, #8
 8011252:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011256:	e14a      	b.n	80114ee <UART_SetConfig+0x972>
 8011258:	2310      	movs	r3, #16
 801125a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801125e:	e146      	b.n	80114ee <UART_SetConfig+0x972>
 8011260:	2320      	movs	r3, #32
 8011262:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011266:	e142      	b.n	80114ee <UART_SetConfig+0x972>
 8011268:	2340      	movs	r3, #64	@ 0x40
 801126a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801126e:	e13e      	b.n	80114ee <UART_SetConfig+0x972>
 8011270:	2380      	movs	r3, #128	@ 0x80
 8011272:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011276:	e13a      	b.n	80114ee <UART_SetConfig+0x972>
 8011278:	697b      	ldr	r3, [r7, #20]
 801127a:	681b      	ldr	r3, [r3, #0]
 801127c:	4a97      	ldr	r2, [pc, #604]	@ (80114dc <UART_SetConfig+0x960>)
 801127e:	4293      	cmp	r3, r2
 8011280:	d176      	bne.n	8011370 <UART_SetConfig+0x7f4>
 8011282:	4b95      	ldr	r3, [pc, #596]	@ (80114d8 <UART_SetConfig+0x95c>)
 8011284:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011286:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801128a:	2b28      	cmp	r3, #40	@ 0x28
 801128c:	d86c      	bhi.n	8011368 <UART_SetConfig+0x7ec>
 801128e:	a201      	add	r2, pc, #4	@ (adr r2, 8011294 <UART_SetConfig+0x718>)
 8011290:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011294:	08011339 	.word	0x08011339
 8011298:	08011369 	.word	0x08011369
 801129c:	08011369 	.word	0x08011369
 80112a0:	08011369 	.word	0x08011369
 80112a4:	08011369 	.word	0x08011369
 80112a8:	08011369 	.word	0x08011369
 80112ac:	08011369 	.word	0x08011369
 80112b0:	08011369 	.word	0x08011369
 80112b4:	08011341 	.word	0x08011341
 80112b8:	08011369 	.word	0x08011369
 80112bc:	08011369 	.word	0x08011369
 80112c0:	08011369 	.word	0x08011369
 80112c4:	08011369 	.word	0x08011369
 80112c8:	08011369 	.word	0x08011369
 80112cc:	08011369 	.word	0x08011369
 80112d0:	08011369 	.word	0x08011369
 80112d4:	08011349 	.word	0x08011349
 80112d8:	08011369 	.word	0x08011369
 80112dc:	08011369 	.word	0x08011369
 80112e0:	08011369 	.word	0x08011369
 80112e4:	08011369 	.word	0x08011369
 80112e8:	08011369 	.word	0x08011369
 80112ec:	08011369 	.word	0x08011369
 80112f0:	08011369 	.word	0x08011369
 80112f4:	08011351 	.word	0x08011351
 80112f8:	08011369 	.word	0x08011369
 80112fc:	08011369 	.word	0x08011369
 8011300:	08011369 	.word	0x08011369
 8011304:	08011369 	.word	0x08011369
 8011308:	08011369 	.word	0x08011369
 801130c:	08011369 	.word	0x08011369
 8011310:	08011369 	.word	0x08011369
 8011314:	08011359 	.word	0x08011359
 8011318:	08011369 	.word	0x08011369
 801131c:	08011369 	.word	0x08011369
 8011320:	08011369 	.word	0x08011369
 8011324:	08011369 	.word	0x08011369
 8011328:	08011369 	.word	0x08011369
 801132c:	08011369 	.word	0x08011369
 8011330:	08011369 	.word	0x08011369
 8011334:	08011361 	.word	0x08011361
 8011338:	2301      	movs	r3, #1
 801133a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801133e:	e0d6      	b.n	80114ee <UART_SetConfig+0x972>
 8011340:	2304      	movs	r3, #4
 8011342:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011346:	e0d2      	b.n	80114ee <UART_SetConfig+0x972>
 8011348:	2308      	movs	r3, #8
 801134a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801134e:	e0ce      	b.n	80114ee <UART_SetConfig+0x972>
 8011350:	2310      	movs	r3, #16
 8011352:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011356:	e0ca      	b.n	80114ee <UART_SetConfig+0x972>
 8011358:	2320      	movs	r3, #32
 801135a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801135e:	e0c6      	b.n	80114ee <UART_SetConfig+0x972>
 8011360:	2340      	movs	r3, #64	@ 0x40
 8011362:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011366:	e0c2      	b.n	80114ee <UART_SetConfig+0x972>
 8011368:	2380      	movs	r3, #128	@ 0x80
 801136a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801136e:	e0be      	b.n	80114ee <UART_SetConfig+0x972>
 8011370:	697b      	ldr	r3, [r7, #20]
 8011372:	681b      	ldr	r3, [r3, #0]
 8011374:	4a5a      	ldr	r2, [pc, #360]	@ (80114e0 <UART_SetConfig+0x964>)
 8011376:	4293      	cmp	r3, r2
 8011378:	d176      	bne.n	8011468 <UART_SetConfig+0x8ec>
 801137a:	4b57      	ldr	r3, [pc, #348]	@ (80114d8 <UART_SetConfig+0x95c>)
 801137c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801137e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8011382:	2b28      	cmp	r3, #40	@ 0x28
 8011384:	d86c      	bhi.n	8011460 <UART_SetConfig+0x8e4>
 8011386:	a201      	add	r2, pc, #4	@ (adr r2, 801138c <UART_SetConfig+0x810>)
 8011388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801138c:	08011431 	.word	0x08011431
 8011390:	08011461 	.word	0x08011461
 8011394:	08011461 	.word	0x08011461
 8011398:	08011461 	.word	0x08011461
 801139c:	08011461 	.word	0x08011461
 80113a0:	08011461 	.word	0x08011461
 80113a4:	08011461 	.word	0x08011461
 80113a8:	08011461 	.word	0x08011461
 80113ac:	08011439 	.word	0x08011439
 80113b0:	08011461 	.word	0x08011461
 80113b4:	08011461 	.word	0x08011461
 80113b8:	08011461 	.word	0x08011461
 80113bc:	08011461 	.word	0x08011461
 80113c0:	08011461 	.word	0x08011461
 80113c4:	08011461 	.word	0x08011461
 80113c8:	08011461 	.word	0x08011461
 80113cc:	08011441 	.word	0x08011441
 80113d0:	08011461 	.word	0x08011461
 80113d4:	08011461 	.word	0x08011461
 80113d8:	08011461 	.word	0x08011461
 80113dc:	08011461 	.word	0x08011461
 80113e0:	08011461 	.word	0x08011461
 80113e4:	08011461 	.word	0x08011461
 80113e8:	08011461 	.word	0x08011461
 80113ec:	08011449 	.word	0x08011449
 80113f0:	08011461 	.word	0x08011461
 80113f4:	08011461 	.word	0x08011461
 80113f8:	08011461 	.word	0x08011461
 80113fc:	08011461 	.word	0x08011461
 8011400:	08011461 	.word	0x08011461
 8011404:	08011461 	.word	0x08011461
 8011408:	08011461 	.word	0x08011461
 801140c:	08011451 	.word	0x08011451
 8011410:	08011461 	.word	0x08011461
 8011414:	08011461 	.word	0x08011461
 8011418:	08011461 	.word	0x08011461
 801141c:	08011461 	.word	0x08011461
 8011420:	08011461 	.word	0x08011461
 8011424:	08011461 	.word	0x08011461
 8011428:	08011461 	.word	0x08011461
 801142c:	08011459 	.word	0x08011459
 8011430:	2301      	movs	r3, #1
 8011432:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011436:	e05a      	b.n	80114ee <UART_SetConfig+0x972>
 8011438:	2304      	movs	r3, #4
 801143a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801143e:	e056      	b.n	80114ee <UART_SetConfig+0x972>
 8011440:	2308      	movs	r3, #8
 8011442:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011446:	e052      	b.n	80114ee <UART_SetConfig+0x972>
 8011448:	2310      	movs	r3, #16
 801144a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801144e:	e04e      	b.n	80114ee <UART_SetConfig+0x972>
 8011450:	2320      	movs	r3, #32
 8011452:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011456:	e04a      	b.n	80114ee <UART_SetConfig+0x972>
 8011458:	2340      	movs	r3, #64	@ 0x40
 801145a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801145e:	e046      	b.n	80114ee <UART_SetConfig+0x972>
 8011460:	2380      	movs	r3, #128	@ 0x80
 8011462:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011466:	e042      	b.n	80114ee <UART_SetConfig+0x972>
 8011468:	697b      	ldr	r3, [r7, #20]
 801146a:	681b      	ldr	r3, [r3, #0]
 801146c:	4a1d      	ldr	r2, [pc, #116]	@ (80114e4 <UART_SetConfig+0x968>)
 801146e:	4293      	cmp	r3, r2
 8011470:	d13a      	bne.n	80114e8 <UART_SetConfig+0x96c>
 8011472:	4b19      	ldr	r3, [pc, #100]	@ (80114d8 <UART_SetConfig+0x95c>)
 8011474:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011476:	f003 0307 	and.w	r3, r3, #7
 801147a:	2b05      	cmp	r3, #5
 801147c:	d826      	bhi.n	80114cc <UART_SetConfig+0x950>
 801147e:	a201      	add	r2, pc, #4	@ (adr r2, 8011484 <UART_SetConfig+0x908>)
 8011480:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011484:	0801149d 	.word	0x0801149d
 8011488:	080114a5 	.word	0x080114a5
 801148c:	080114ad 	.word	0x080114ad
 8011490:	080114b5 	.word	0x080114b5
 8011494:	080114bd 	.word	0x080114bd
 8011498:	080114c5 	.word	0x080114c5
 801149c:	2302      	movs	r3, #2
 801149e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80114a2:	e024      	b.n	80114ee <UART_SetConfig+0x972>
 80114a4:	2304      	movs	r3, #4
 80114a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80114aa:	e020      	b.n	80114ee <UART_SetConfig+0x972>
 80114ac:	2308      	movs	r3, #8
 80114ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80114b2:	e01c      	b.n	80114ee <UART_SetConfig+0x972>
 80114b4:	2310      	movs	r3, #16
 80114b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80114ba:	e018      	b.n	80114ee <UART_SetConfig+0x972>
 80114bc:	2320      	movs	r3, #32
 80114be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80114c2:	e014      	b.n	80114ee <UART_SetConfig+0x972>
 80114c4:	2340      	movs	r3, #64	@ 0x40
 80114c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80114ca:	e010      	b.n	80114ee <UART_SetConfig+0x972>
 80114cc:	2380      	movs	r3, #128	@ 0x80
 80114ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80114d2:	e00c      	b.n	80114ee <UART_SetConfig+0x972>
 80114d4:	40007c00 	.word	0x40007c00
 80114d8:	58024400 	.word	0x58024400
 80114dc:	40011800 	.word	0x40011800
 80114e0:	40011c00 	.word	0x40011c00
 80114e4:	58000c00 	.word	0x58000c00
 80114e8:	2380      	movs	r3, #128	@ 0x80
 80114ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80114ee:	697b      	ldr	r3, [r7, #20]
 80114f0:	681b      	ldr	r3, [r3, #0]
 80114f2:	4abd      	ldr	r2, [pc, #756]	@ (80117e8 <UART_SetConfig+0xc6c>)
 80114f4:	4293      	cmp	r3, r2
 80114f6:	f040 80eb 	bne.w	80116d0 <UART_SetConfig+0xb54>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80114fa:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80114fe:	2b20      	cmp	r3, #32
 8011500:	dc46      	bgt.n	8011590 <UART_SetConfig+0xa14>
 8011502:	2b02      	cmp	r3, #2
 8011504:	db75      	blt.n	80115f2 <UART_SetConfig+0xa76>
 8011506:	3b02      	subs	r3, #2
 8011508:	2b1e      	cmp	r3, #30
 801150a:	d872      	bhi.n	80115f2 <UART_SetConfig+0xa76>
 801150c:	a201      	add	r2, pc, #4	@ (adr r2, 8011514 <UART_SetConfig+0x998>)
 801150e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011512:	bf00      	nop
 8011514:	08011597 	.word	0x08011597
 8011518:	080115f3 	.word	0x080115f3
 801151c:	0801159f 	.word	0x0801159f
 8011520:	080115f3 	.word	0x080115f3
 8011524:	080115f3 	.word	0x080115f3
 8011528:	080115f3 	.word	0x080115f3
 801152c:	080115af 	.word	0x080115af
 8011530:	080115f3 	.word	0x080115f3
 8011534:	080115f3 	.word	0x080115f3
 8011538:	080115f3 	.word	0x080115f3
 801153c:	080115f3 	.word	0x080115f3
 8011540:	080115f3 	.word	0x080115f3
 8011544:	080115f3 	.word	0x080115f3
 8011548:	080115f3 	.word	0x080115f3
 801154c:	080115bf 	.word	0x080115bf
 8011550:	080115f3 	.word	0x080115f3
 8011554:	080115f3 	.word	0x080115f3
 8011558:	080115f3 	.word	0x080115f3
 801155c:	080115f3 	.word	0x080115f3
 8011560:	080115f3 	.word	0x080115f3
 8011564:	080115f3 	.word	0x080115f3
 8011568:	080115f3 	.word	0x080115f3
 801156c:	080115f3 	.word	0x080115f3
 8011570:	080115f3 	.word	0x080115f3
 8011574:	080115f3 	.word	0x080115f3
 8011578:	080115f3 	.word	0x080115f3
 801157c:	080115f3 	.word	0x080115f3
 8011580:	080115f3 	.word	0x080115f3
 8011584:	080115f3 	.word	0x080115f3
 8011588:	080115f3 	.word	0x080115f3
 801158c:	080115e5 	.word	0x080115e5
 8011590:	2b40      	cmp	r3, #64	@ 0x40
 8011592:	d02a      	beq.n	80115ea <UART_SetConfig+0xa6e>
 8011594:	e02d      	b.n	80115f2 <UART_SetConfig+0xa76>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8011596:	f7fb f89d 	bl	800c6d4 <HAL_RCCEx_GetD3PCLK1Freq>
 801159a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 801159c:	e02f      	b.n	80115fe <UART_SetConfig+0xa82>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801159e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80115a2:	4618      	mov	r0, r3
 80115a4:	f7fb f8ac 	bl	800c700 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80115a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80115aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80115ac:	e027      	b.n	80115fe <UART_SetConfig+0xa82>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80115ae:	f107 0318 	add.w	r3, r7, #24
 80115b2:	4618      	mov	r0, r3
 80115b4:	f7fb f9f8 	bl	800c9a8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80115b8:	69fb      	ldr	r3, [r7, #28]
 80115ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80115bc:	e01f      	b.n	80115fe <UART_SetConfig+0xa82>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80115be:	4b8b      	ldr	r3, [pc, #556]	@ (80117ec <UART_SetConfig+0xc70>)
 80115c0:	681b      	ldr	r3, [r3, #0]
 80115c2:	f003 0320 	and.w	r3, r3, #32
 80115c6:	2b00      	cmp	r3, #0
 80115c8:	d009      	beq.n	80115de <UART_SetConfig+0xa62>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80115ca:	4b88      	ldr	r3, [pc, #544]	@ (80117ec <UART_SetConfig+0xc70>)
 80115cc:	681b      	ldr	r3, [r3, #0]
 80115ce:	08db      	lsrs	r3, r3, #3
 80115d0:	f003 0303 	and.w	r3, r3, #3
 80115d4:	4a86      	ldr	r2, [pc, #536]	@ (80117f0 <UART_SetConfig+0xc74>)
 80115d6:	fa22 f303 	lsr.w	r3, r2, r3
 80115da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80115dc:	e00f      	b.n	80115fe <UART_SetConfig+0xa82>
          pclk = (uint32_t) HSI_VALUE;
 80115de:	4b84      	ldr	r3, [pc, #528]	@ (80117f0 <UART_SetConfig+0xc74>)
 80115e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80115e2:	e00c      	b.n	80115fe <UART_SetConfig+0xa82>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80115e4:	4b83      	ldr	r3, [pc, #524]	@ (80117f4 <UART_SetConfig+0xc78>)
 80115e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80115e8:	e009      	b.n	80115fe <UART_SetConfig+0xa82>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80115ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80115ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80115f0:	e005      	b.n	80115fe <UART_SetConfig+0xa82>
      default:
        pclk = 0U;
 80115f2:	2300      	movs	r3, #0
 80115f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80115f6:	2301      	movs	r3, #1
 80115f8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80115fc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80115fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011600:	2b00      	cmp	r3, #0
 8011602:	f000 81e3 	beq.w	80119cc <UART_SetConfig+0xe50>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8011606:	697b      	ldr	r3, [r7, #20]
 8011608:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801160a:	4a7b      	ldr	r2, [pc, #492]	@ (80117f8 <UART_SetConfig+0xc7c>)
 801160c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011610:	461a      	mov	r2, r3
 8011612:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011614:	fbb3 f3f2 	udiv	r3, r3, r2
 8011618:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801161a:	697b      	ldr	r3, [r7, #20]
 801161c:	685a      	ldr	r2, [r3, #4]
 801161e:	4613      	mov	r3, r2
 8011620:	005b      	lsls	r3, r3, #1
 8011622:	4413      	add	r3, r2
 8011624:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011626:	429a      	cmp	r2, r3
 8011628:	d305      	bcc.n	8011636 <UART_SetConfig+0xaba>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 801162a:	697b      	ldr	r3, [r7, #20]
 801162c:	685b      	ldr	r3, [r3, #4]
 801162e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8011630:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011632:	429a      	cmp	r2, r3
 8011634:	d903      	bls.n	801163e <UART_SetConfig+0xac2>
      {
        ret = HAL_ERROR;
 8011636:	2301      	movs	r3, #1
 8011638:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 801163c:	e1c6      	b.n	80119cc <UART_SetConfig+0xe50>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801163e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011640:	2200      	movs	r2, #0
 8011642:	60bb      	str	r3, [r7, #8]
 8011644:	60fa      	str	r2, [r7, #12]
 8011646:	697b      	ldr	r3, [r7, #20]
 8011648:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801164a:	4a6b      	ldr	r2, [pc, #428]	@ (80117f8 <UART_SetConfig+0xc7c>)
 801164c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011650:	b29b      	uxth	r3, r3
 8011652:	2200      	movs	r2, #0
 8011654:	603b      	str	r3, [r7, #0]
 8011656:	607a      	str	r2, [r7, #4]
 8011658:	e9d7 2300 	ldrd	r2, r3, [r7]
 801165c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8011660:	f7ee febe 	bl	80003e0 <__aeabi_uldivmod>
 8011664:	4602      	mov	r2, r0
 8011666:	460b      	mov	r3, r1
 8011668:	4610      	mov	r0, r2
 801166a:	4619      	mov	r1, r3
 801166c:	f04f 0200 	mov.w	r2, #0
 8011670:	f04f 0300 	mov.w	r3, #0
 8011674:	020b      	lsls	r3, r1, #8
 8011676:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 801167a:	0202      	lsls	r2, r0, #8
 801167c:	6979      	ldr	r1, [r7, #20]
 801167e:	6849      	ldr	r1, [r1, #4]
 8011680:	0849      	lsrs	r1, r1, #1
 8011682:	2000      	movs	r0, #0
 8011684:	460c      	mov	r4, r1
 8011686:	4605      	mov	r5, r0
 8011688:	eb12 0804 	adds.w	r8, r2, r4
 801168c:	eb43 0905 	adc.w	r9, r3, r5
 8011690:	697b      	ldr	r3, [r7, #20]
 8011692:	685b      	ldr	r3, [r3, #4]
 8011694:	2200      	movs	r2, #0
 8011696:	469a      	mov	sl, r3
 8011698:	4693      	mov	fp, r2
 801169a:	4652      	mov	r2, sl
 801169c:	465b      	mov	r3, fp
 801169e:	4640      	mov	r0, r8
 80116a0:	4649      	mov	r1, r9
 80116a2:	f7ee fe9d 	bl	80003e0 <__aeabi_uldivmod>
 80116a6:	4602      	mov	r2, r0
 80116a8:	460b      	mov	r3, r1
 80116aa:	4613      	mov	r3, r2
 80116ac:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80116ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80116b0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80116b4:	d308      	bcc.n	80116c8 <UART_SetConfig+0xb4c>
 80116b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80116b8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80116bc:	d204      	bcs.n	80116c8 <UART_SetConfig+0xb4c>
        {
          huart->Instance->BRR = usartdiv;
 80116be:	697b      	ldr	r3, [r7, #20]
 80116c0:	681b      	ldr	r3, [r3, #0]
 80116c2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80116c4:	60da      	str	r2, [r3, #12]
 80116c6:	e181      	b.n	80119cc <UART_SetConfig+0xe50>
        }
        else
        {
          ret = HAL_ERROR;
 80116c8:	2301      	movs	r3, #1
 80116ca:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80116ce:	e17d      	b.n	80119cc <UART_SetConfig+0xe50>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80116d0:	697b      	ldr	r3, [r7, #20]
 80116d2:	69db      	ldr	r3, [r3, #28]
 80116d4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80116d8:	f040 80cb 	bne.w	8011872 <UART_SetConfig+0xcf6>
  {
    switch (clocksource)
 80116dc:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80116e0:	2b20      	cmp	r3, #32
 80116e2:	dc4b      	bgt.n	801177c <UART_SetConfig+0xc00>
 80116e4:	2b00      	cmp	r3, #0
 80116e6:	f2c0 8089 	blt.w	80117fc <UART_SetConfig+0xc80>
 80116ea:	2b20      	cmp	r3, #32
 80116ec:	f200 8086 	bhi.w	80117fc <UART_SetConfig+0xc80>
 80116f0:	a201      	add	r2, pc, #4	@ (adr r2, 80116f8 <UART_SetConfig+0xb7c>)
 80116f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80116f6:	bf00      	nop
 80116f8:	08011783 	.word	0x08011783
 80116fc:	0801178b 	.word	0x0801178b
 8011700:	080117fd 	.word	0x080117fd
 8011704:	080117fd 	.word	0x080117fd
 8011708:	08011793 	.word	0x08011793
 801170c:	080117fd 	.word	0x080117fd
 8011710:	080117fd 	.word	0x080117fd
 8011714:	080117fd 	.word	0x080117fd
 8011718:	080117a3 	.word	0x080117a3
 801171c:	080117fd 	.word	0x080117fd
 8011720:	080117fd 	.word	0x080117fd
 8011724:	080117fd 	.word	0x080117fd
 8011728:	080117fd 	.word	0x080117fd
 801172c:	080117fd 	.word	0x080117fd
 8011730:	080117fd 	.word	0x080117fd
 8011734:	080117fd 	.word	0x080117fd
 8011738:	080117b3 	.word	0x080117b3
 801173c:	080117fd 	.word	0x080117fd
 8011740:	080117fd 	.word	0x080117fd
 8011744:	080117fd 	.word	0x080117fd
 8011748:	080117fd 	.word	0x080117fd
 801174c:	080117fd 	.word	0x080117fd
 8011750:	080117fd 	.word	0x080117fd
 8011754:	080117fd 	.word	0x080117fd
 8011758:	080117fd 	.word	0x080117fd
 801175c:	080117fd 	.word	0x080117fd
 8011760:	080117fd 	.word	0x080117fd
 8011764:	080117fd 	.word	0x080117fd
 8011768:	080117fd 	.word	0x080117fd
 801176c:	080117fd 	.word	0x080117fd
 8011770:	080117fd 	.word	0x080117fd
 8011774:	080117fd 	.word	0x080117fd
 8011778:	080117d9 	.word	0x080117d9
 801177c:	2b40      	cmp	r3, #64	@ 0x40
 801177e:	d02e      	beq.n	80117de <UART_SetConfig+0xc62>
 8011780:	e03c      	b.n	80117fc <UART_SetConfig+0xc80>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8011782:	f7f8 fdb5 	bl	800a2f0 <HAL_RCC_GetPCLK1Freq>
 8011786:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8011788:	e03e      	b.n	8011808 <UART_SetConfig+0xc8c>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801178a:	f7f8 fdc7 	bl	800a31c <HAL_RCC_GetPCLK2Freq>
 801178e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8011790:	e03a      	b.n	8011808 <UART_SetConfig+0xc8c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011792:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8011796:	4618      	mov	r0, r3
 8011798:	f7fa ffb2 	bl	800c700 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 801179c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801179e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80117a0:	e032      	b.n	8011808 <UART_SetConfig+0xc8c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80117a2:	f107 0318 	add.w	r3, r7, #24
 80117a6:	4618      	mov	r0, r3
 80117a8:	f7fb f8fe 	bl	800c9a8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80117ac:	69fb      	ldr	r3, [r7, #28]
 80117ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80117b0:	e02a      	b.n	8011808 <UART_SetConfig+0xc8c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80117b2:	4b0e      	ldr	r3, [pc, #56]	@ (80117ec <UART_SetConfig+0xc70>)
 80117b4:	681b      	ldr	r3, [r3, #0]
 80117b6:	f003 0320 	and.w	r3, r3, #32
 80117ba:	2b00      	cmp	r3, #0
 80117bc:	d009      	beq.n	80117d2 <UART_SetConfig+0xc56>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80117be:	4b0b      	ldr	r3, [pc, #44]	@ (80117ec <UART_SetConfig+0xc70>)
 80117c0:	681b      	ldr	r3, [r3, #0]
 80117c2:	08db      	lsrs	r3, r3, #3
 80117c4:	f003 0303 	and.w	r3, r3, #3
 80117c8:	4a09      	ldr	r2, [pc, #36]	@ (80117f0 <UART_SetConfig+0xc74>)
 80117ca:	fa22 f303 	lsr.w	r3, r2, r3
 80117ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80117d0:	e01a      	b.n	8011808 <UART_SetConfig+0xc8c>
          pclk = (uint32_t) HSI_VALUE;
 80117d2:	4b07      	ldr	r3, [pc, #28]	@ (80117f0 <UART_SetConfig+0xc74>)
 80117d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80117d6:	e017      	b.n	8011808 <UART_SetConfig+0xc8c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80117d8:	4b06      	ldr	r3, [pc, #24]	@ (80117f4 <UART_SetConfig+0xc78>)
 80117da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80117dc:	e014      	b.n	8011808 <UART_SetConfig+0xc8c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80117de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80117e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80117e4:	e010      	b.n	8011808 <UART_SetConfig+0xc8c>
 80117e6:	bf00      	nop
 80117e8:	58000c00 	.word	0x58000c00
 80117ec:	58024400 	.word	0x58024400
 80117f0:	03d09000 	.word	0x03d09000
 80117f4:	003d0900 	.word	0x003d0900
 80117f8:	08022f2c 	.word	0x08022f2c
      default:
        pclk = 0U;
 80117fc:	2300      	movs	r3, #0
 80117fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8011800:	2301      	movs	r3, #1
 8011802:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8011806:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8011808:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801180a:	2b00      	cmp	r3, #0
 801180c:	f000 80de 	beq.w	80119cc <UART_SetConfig+0xe50>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011810:	697b      	ldr	r3, [r7, #20]
 8011812:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011814:	4a78      	ldr	r2, [pc, #480]	@ (80119f8 <UART_SetConfig+0xe7c>)
 8011816:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801181a:	461a      	mov	r2, r3
 801181c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801181e:	fbb3 f3f2 	udiv	r3, r3, r2
 8011822:	005a      	lsls	r2, r3, #1
 8011824:	697b      	ldr	r3, [r7, #20]
 8011826:	685b      	ldr	r3, [r3, #4]
 8011828:	085b      	lsrs	r3, r3, #1
 801182a:	441a      	add	r2, r3
 801182c:	697b      	ldr	r3, [r7, #20]
 801182e:	685b      	ldr	r3, [r3, #4]
 8011830:	fbb2 f3f3 	udiv	r3, r2, r3
 8011834:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011836:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011838:	2b0f      	cmp	r3, #15
 801183a:	d916      	bls.n	801186a <UART_SetConfig+0xcee>
 801183c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801183e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8011842:	d212      	bcs.n	801186a <UART_SetConfig+0xcee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8011844:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011846:	b29b      	uxth	r3, r3
 8011848:	f023 030f 	bic.w	r3, r3, #15
 801184c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 801184e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011850:	085b      	lsrs	r3, r3, #1
 8011852:	b29b      	uxth	r3, r3
 8011854:	f003 0307 	and.w	r3, r3, #7
 8011858:	b29a      	uxth	r2, r3
 801185a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 801185c:	4313      	orrs	r3, r2
 801185e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8011860:	697b      	ldr	r3, [r7, #20]
 8011862:	681b      	ldr	r3, [r3, #0]
 8011864:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8011866:	60da      	str	r2, [r3, #12]
 8011868:	e0b0      	b.n	80119cc <UART_SetConfig+0xe50>
      }
      else
      {
        ret = HAL_ERROR;
 801186a:	2301      	movs	r3, #1
 801186c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8011870:	e0ac      	b.n	80119cc <UART_SetConfig+0xe50>
      }
    }
  }
  else
  {
    switch (clocksource)
 8011872:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8011876:	2b20      	cmp	r3, #32
 8011878:	dc48      	bgt.n	801190c <UART_SetConfig+0xd90>
 801187a:	2b00      	cmp	r3, #0
 801187c:	db7b      	blt.n	8011976 <UART_SetConfig+0xdfa>
 801187e:	2b20      	cmp	r3, #32
 8011880:	d879      	bhi.n	8011976 <UART_SetConfig+0xdfa>
 8011882:	a201      	add	r2, pc, #4	@ (adr r2, 8011888 <UART_SetConfig+0xd0c>)
 8011884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011888:	08011913 	.word	0x08011913
 801188c:	0801191b 	.word	0x0801191b
 8011890:	08011977 	.word	0x08011977
 8011894:	08011977 	.word	0x08011977
 8011898:	08011923 	.word	0x08011923
 801189c:	08011977 	.word	0x08011977
 80118a0:	08011977 	.word	0x08011977
 80118a4:	08011977 	.word	0x08011977
 80118a8:	08011933 	.word	0x08011933
 80118ac:	08011977 	.word	0x08011977
 80118b0:	08011977 	.word	0x08011977
 80118b4:	08011977 	.word	0x08011977
 80118b8:	08011977 	.word	0x08011977
 80118bc:	08011977 	.word	0x08011977
 80118c0:	08011977 	.word	0x08011977
 80118c4:	08011977 	.word	0x08011977
 80118c8:	08011943 	.word	0x08011943
 80118cc:	08011977 	.word	0x08011977
 80118d0:	08011977 	.word	0x08011977
 80118d4:	08011977 	.word	0x08011977
 80118d8:	08011977 	.word	0x08011977
 80118dc:	08011977 	.word	0x08011977
 80118e0:	08011977 	.word	0x08011977
 80118e4:	08011977 	.word	0x08011977
 80118e8:	08011977 	.word	0x08011977
 80118ec:	08011977 	.word	0x08011977
 80118f0:	08011977 	.word	0x08011977
 80118f4:	08011977 	.word	0x08011977
 80118f8:	08011977 	.word	0x08011977
 80118fc:	08011977 	.word	0x08011977
 8011900:	08011977 	.word	0x08011977
 8011904:	08011977 	.word	0x08011977
 8011908:	08011969 	.word	0x08011969
 801190c:	2b40      	cmp	r3, #64	@ 0x40
 801190e:	d02e      	beq.n	801196e <UART_SetConfig+0xdf2>
 8011910:	e031      	b.n	8011976 <UART_SetConfig+0xdfa>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8011912:	f7f8 fced 	bl	800a2f0 <HAL_RCC_GetPCLK1Freq>
 8011916:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8011918:	e033      	b.n	8011982 <UART_SetConfig+0xe06>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801191a:	f7f8 fcff 	bl	800a31c <HAL_RCC_GetPCLK2Freq>
 801191e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8011920:	e02f      	b.n	8011982 <UART_SetConfig+0xe06>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011922:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8011926:	4618      	mov	r0, r3
 8011928:	f7fa feea 	bl	800c700 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 801192c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801192e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011930:	e027      	b.n	8011982 <UART_SetConfig+0xe06>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011932:	f107 0318 	add.w	r3, r7, #24
 8011936:	4618      	mov	r0, r3
 8011938:	f7fb f836 	bl	800c9a8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 801193c:	69fb      	ldr	r3, [r7, #28]
 801193e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011940:	e01f      	b.n	8011982 <UART_SetConfig+0xe06>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011942:	4b2e      	ldr	r3, [pc, #184]	@ (80119fc <UART_SetConfig+0xe80>)
 8011944:	681b      	ldr	r3, [r3, #0]
 8011946:	f003 0320 	and.w	r3, r3, #32
 801194a:	2b00      	cmp	r3, #0
 801194c:	d009      	beq.n	8011962 <UART_SetConfig+0xde6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801194e:	4b2b      	ldr	r3, [pc, #172]	@ (80119fc <UART_SetConfig+0xe80>)
 8011950:	681b      	ldr	r3, [r3, #0]
 8011952:	08db      	lsrs	r3, r3, #3
 8011954:	f003 0303 	and.w	r3, r3, #3
 8011958:	4a29      	ldr	r2, [pc, #164]	@ (8011a00 <UART_SetConfig+0xe84>)
 801195a:	fa22 f303 	lsr.w	r3, r2, r3
 801195e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8011960:	e00f      	b.n	8011982 <UART_SetConfig+0xe06>
          pclk = (uint32_t) HSI_VALUE;
 8011962:	4b27      	ldr	r3, [pc, #156]	@ (8011a00 <UART_SetConfig+0xe84>)
 8011964:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011966:	e00c      	b.n	8011982 <UART_SetConfig+0xe06>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8011968:	4b26      	ldr	r3, [pc, #152]	@ (8011a04 <UART_SetConfig+0xe88>)
 801196a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801196c:	e009      	b.n	8011982 <UART_SetConfig+0xe06>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801196e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8011972:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011974:	e005      	b.n	8011982 <UART_SetConfig+0xe06>
      default:
        pclk = 0U;
 8011976:	2300      	movs	r3, #0
 8011978:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 801197a:	2301      	movs	r3, #1
 801197c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8011980:	bf00      	nop
    }

    if (pclk != 0U)
 8011982:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011984:	2b00      	cmp	r3, #0
 8011986:	d021      	beq.n	80119cc <UART_SetConfig+0xe50>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011988:	697b      	ldr	r3, [r7, #20]
 801198a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801198c:	4a1a      	ldr	r2, [pc, #104]	@ (80119f8 <UART_SetConfig+0xe7c>)
 801198e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011992:	461a      	mov	r2, r3
 8011994:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011996:	fbb3 f2f2 	udiv	r2, r3, r2
 801199a:	697b      	ldr	r3, [r7, #20]
 801199c:	685b      	ldr	r3, [r3, #4]
 801199e:	085b      	lsrs	r3, r3, #1
 80119a0:	441a      	add	r2, r3
 80119a2:	697b      	ldr	r3, [r7, #20]
 80119a4:	685b      	ldr	r3, [r3, #4]
 80119a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80119aa:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80119ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80119ae:	2b0f      	cmp	r3, #15
 80119b0:	d909      	bls.n	80119c6 <UART_SetConfig+0xe4a>
 80119b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80119b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80119b8:	d205      	bcs.n	80119c6 <UART_SetConfig+0xe4a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80119ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80119bc:	b29a      	uxth	r2, r3
 80119be:	697b      	ldr	r3, [r7, #20]
 80119c0:	681b      	ldr	r3, [r3, #0]
 80119c2:	60da      	str	r2, [r3, #12]
 80119c4:	e002      	b.n	80119cc <UART_SetConfig+0xe50>
      }
      else
      {
        ret = HAL_ERROR;
 80119c6:	2301      	movs	r3, #1
 80119c8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80119cc:	697b      	ldr	r3, [r7, #20]
 80119ce:	2201      	movs	r2, #1
 80119d0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80119d4:	697b      	ldr	r3, [r7, #20]
 80119d6:	2201      	movs	r2, #1
 80119d8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80119dc:	697b      	ldr	r3, [r7, #20]
 80119de:	2200      	movs	r2, #0
 80119e0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80119e2:	697b      	ldr	r3, [r7, #20]
 80119e4:	2200      	movs	r2, #0
 80119e6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80119e8:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 80119ec:	4618      	mov	r0, r3
 80119ee:	3748      	adds	r7, #72	@ 0x48
 80119f0:	46bd      	mov	sp, r7
 80119f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80119f6:	bf00      	nop
 80119f8:	08022f2c 	.word	0x08022f2c
 80119fc:	58024400 	.word	0x58024400
 8011a00:	03d09000 	.word	0x03d09000
 8011a04:	003d0900 	.word	0x003d0900

08011a08 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8011a08:	b580      	push	{r7, lr}
 8011a0a:	b082      	sub	sp, #8
 8011a0c:	af00      	add	r7, sp, #0
 8011a0e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 8011a10:	687b      	ldr	r3, [r7, #4]
 8011a12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011a14:	2bff      	cmp	r3, #255	@ 0xff
 8011a16:	d904      	bls.n	8011a22 <UART_AdvFeatureConfig+0x1a>
 8011a18:	f44f 614e 	mov.w	r1, #3296	@ 0xce0
 8011a1c:	4884      	ldr	r0, [pc, #528]	@ (8011c30 <UART_AdvFeatureConfig+0x228>)
 8011a1e:	f7f0 fcd1 	bl	80023c4 <assert_failed>

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8011a22:	687b      	ldr	r3, [r7, #4]
 8011a24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011a26:	f003 0308 	and.w	r3, r3, #8
 8011a2a:	2b00      	cmp	r3, #0
 8011a2c:	d018      	beq.n	8011a60 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 8011a2e:	687b      	ldr	r3, [r7, #4]
 8011a30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011a32:	2b00      	cmp	r3, #0
 8011a34:	d009      	beq.n	8011a4a <UART_AdvFeatureConfig+0x42>
 8011a36:	687b      	ldr	r3, [r7, #4]
 8011a38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011a3a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8011a3e:	d004      	beq.n	8011a4a <UART_AdvFeatureConfig+0x42>
 8011a40:	f640 41e5 	movw	r1, #3301	@ 0xce5
 8011a44:	487a      	ldr	r0, [pc, #488]	@ (8011c30 <UART_AdvFeatureConfig+0x228>)
 8011a46:	f7f0 fcbd 	bl	80023c4 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8011a4a:	687b      	ldr	r3, [r7, #4]
 8011a4c:	681b      	ldr	r3, [r3, #0]
 8011a4e:	685b      	ldr	r3, [r3, #4]
 8011a50:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8011a54:	687b      	ldr	r3, [r7, #4]
 8011a56:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8011a58:	687b      	ldr	r3, [r7, #4]
 8011a5a:	681b      	ldr	r3, [r3, #0]
 8011a5c:	430a      	orrs	r2, r1
 8011a5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8011a60:	687b      	ldr	r3, [r7, #4]
 8011a62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011a64:	f003 0301 	and.w	r3, r3, #1
 8011a68:	2b00      	cmp	r3, #0
 8011a6a:	d018      	beq.n	8011a9e <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 8011a6c:	687b      	ldr	r3, [r7, #4]
 8011a6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011a70:	2b00      	cmp	r3, #0
 8011a72:	d009      	beq.n	8011a88 <UART_AdvFeatureConfig+0x80>
 8011a74:	687b      	ldr	r3, [r7, #4]
 8011a76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011a78:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8011a7c:	d004      	beq.n	8011a88 <UART_AdvFeatureConfig+0x80>
 8011a7e:	f640 41ec 	movw	r1, #3308	@ 0xcec
 8011a82:	486b      	ldr	r0, [pc, #428]	@ (8011c30 <UART_AdvFeatureConfig+0x228>)
 8011a84:	f7f0 fc9e 	bl	80023c4 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8011a88:	687b      	ldr	r3, [r7, #4]
 8011a8a:	681b      	ldr	r3, [r3, #0]
 8011a8c:	685b      	ldr	r3, [r3, #4]
 8011a8e:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8011a92:	687b      	ldr	r3, [r7, #4]
 8011a94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011a96:	687b      	ldr	r3, [r7, #4]
 8011a98:	681b      	ldr	r3, [r3, #0]
 8011a9a:	430a      	orrs	r2, r1
 8011a9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8011a9e:	687b      	ldr	r3, [r7, #4]
 8011aa0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011aa2:	f003 0302 	and.w	r3, r3, #2
 8011aa6:	2b00      	cmp	r3, #0
 8011aa8:	d018      	beq.n	8011adc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 8011aaa:	687b      	ldr	r3, [r7, #4]
 8011aac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011aae:	2b00      	cmp	r3, #0
 8011ab0:	d009      	beq.n	8011ac6 <UART_AdvFeatureConfig+0xbe>
 8011ab2:	687b      	ldr	r3, [r7, #4]
 8011ab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011ab6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8011aba:	d004      	beq.n	8011ac6 <UART_AdvFeatureConfig+0xbe>
 8011abc:	f640 41f3 	movw	r1, #3315	@ 0xcf3
 8011ac0:	485b      	ldr	r0, [pc, #364]	@ (8011c30 <UART_AdvFeatureConfig+0x228>)
 8011ac2:	f7f0 fc7f 	bl	80023c4 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8011ac6:	687b      	ldr	r3, [r7, #4]
 8011ac8:	681b      	ldr	r3, [r3, #0]
 8011aca:	685b      	ldr	r3, [r3, #4]
 8011acc:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8011ad0:	687b      	ldr	r3, [r7, #4]
 8011ad2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8011ad4:	687b      	ldr	r3, [r7, #4]
 8011ad6:	681b      	ldr	r3, [r3, #0]
 8011ad8:	430a      	orrs	r2, r1
 8011ada:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8011adc:	687b      	ldr	r3, [r7, #4]
 8011ade:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011ae0:	f003 0304 	and.w	r3, r3, #4
 8011ae4:	2b00      	cmp	r3, #0
 8011ae6:	d018      	beq.n	8011b1a <UART_AdvFeatureConfig+0x112>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 8011ae8:	687b      	ldr	r3, [r7, #4]
 8011aea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011aec:	2b00      	cmp	r3, #0
 8011aee:	d009      	beq.n	8011b04 <UART_AdvFeatureConfig+0xfc>
 8011af0:	687b      	ldr	r3, [r7, #4]
 8011af2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011af4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8011af8:	d004      	beq.n	8011b04 <UART_AdvFeatureConfig+0xfc>
 8011afa:	f640 41fa 	movw	r1, #3322	@ 0xcfa
 8011afe:	484c      	ldr	r0, [pc, #304]	@ (8011c30 <UART_AdvFeatureConfig+0x228>)
 8011b00:	f7f0 fc60 	bl	80023c4 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8011b04:	687b      	ldr	r3, [r7, #4]
 8011b06:	681b      	ldr	r3, [r3, #0]
 8011b08:	685b      	ldr	r3, [r3, #4]
 8011b0a:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8011b0e:	687b      	ldr	r3, [r7, #4]
 8011b10:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8011b12:	687b      	ldr	r3, [r7, #4]
 8011b14:	681b      	ldr	r3, [r3, #0]
 8011b16:	430a      	orrs	r2, r1
 8011b18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8011b1a:	687b      	ldr	r3, [r7, #4]
 8011b1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011b1e:	f003 0310 	and.w	r3, r3, #16
 8011b22:	2b00      	cmp	r3, #0
 8011b24:	d018      	beq.n	8011b58 <UART_AdvFeatureConfig+0x150>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 8011b26:	687b      	ldr	r3, [r7, #4]
 8011b28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011b2a:	2b00      	cmp	r3, #0
 8011b2c:	d009      	beq.n	8011b42 <UART_AdvFeatureConfig+0x13a>
 8011b2e:	687b      	ldr	r3, [r7, #4]
 8011b30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011b32:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8011b36:	d004      	beq.n	8011b42 <UART_AdvFeatureConfig+0x13a>
 8011b38:	f640 5101 	movw	r1, #3329	@ 0xd01
 8011b3c:	483c      	ldr	r0, [pc, #240]	@ (8011c30 <UART_AdvFeatureConfig+0x228>)
 8011b3e:	f7f0 fc41 	bl	80023c4 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8011b42:	687b      	ldr	r3, [r7, #4]
 8011b44:	681b      	ldr	r3, [r3, #0]
 8011b46:	689b      	ldr	r3, [r3, #8]
 8011b48:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8011b4c:	687b      	ldr	r3, [r7, #4]
 8011b4e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8011b50:	687b      	ldr	r3, [r7, #4]
 8011b52:	681b      	ldr	r3, [r3, #0]
 8011b54:	430a      	orrs	r2, r1
 8011b56:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8011b58:	687b      	ldr	r3, [r7, #4]
 8011b5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011b5c:	f003 0320 	and.w	r3, r3, #32
 8011b60:	2b00      	cmp	r3, #0
 8011b62:	d018      	beq.n	8011b96 <UART_AdvFeatureConfig+0x18e>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 8011b64:	687b      	ldr	r3, [r7, #4]
 8011b66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011b68:	2b00      	cmp	r3, #0
 8011b6a:	d009      	beq.n	8011b80 <UART_AdvFeatureConfig+0x178>
 8011b6c:	687b      	ldr	r3, [r7, #4]
 8011b6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011b70:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8011b74:	d004      	beq.n	8011b80 <UART_AdvFeatureConfig+0x178>
 8011b76:	f640 5108 	movw	r1, #3336	@ 0xd08
 8011b7a:	482d      	ldr	r0, [pc, #180]	@ (8011c30 <UART_AdvFeatureConfig+0x228>)
 8011b7c:	f7f0 fc22 	bl	80023c4 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8011b80:	687b      	ldr	r3, [r7, #4]
 8011b82:	681b      	ldr	r3, [r3, #0]
 8011b84:	689b      	ldr	r3, [r3, #8]
 8011b86:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8011b8a:	687b      	ldr	r3, [r7, #4]
 8011b8c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8011b8e:	687b      	ldr	r3, [r7, #4]
 8011b90:	681b      	ldr	r3, [r3, #0]
 8011b92:	430a      	orrs	r2, r1
 8011b94:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8011b96:	687b      	ldr	r3, [r7, #4]
 8011b98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011b9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011b9e:	2b00      	cmp	r3, #0
 8011ba0:	f000 808f 	beq.w	8011cc2 <UART_AdvFeatureConfig+0x2ba>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 8011ba4:	687b      	ldr	r3, [r7, #4]
 8011ba6:	681b      	ldr	r3, [r3, #0]
 8011ba8:	4a22      	ldr	r2, [pc, #136]	@ (8011c34 <UART_AdvFeatureConfig+0x22c>)
 8011baa:	4293      	cmp	r3, r2
 8011bac:	d031      	beq.n	8011c12 <UART_AdvFeatureConfig+0x20a>
 8011bae:	687b      	ldr	r3, [r7, #4]
 8011bb0:	681b      	ldr	r3, [r3, #0]
 8011bb2:	4a21      	ldr	r2, [pc, #132]	@ (8011c38 <UART_AdvFeatureConfig+0x230>)
 8011bb4:	4293      	cmp	r3, r2
 8011bb6:	d02c      	beq.n	8011c12 <UART_AdvFeatureConfig+0x20a>
 8011bb8:	687b      	ldr	r3, [r7, #4]
 8011bba:	681b      	ldr	r3, [r3, #0]
 8011bbc:	4a1f      	ldr	r2, [pc, #124]	@ (8011c3c <UART_AdvFeatureConfig+0x234>)
 8011bbe:	4293      	cmp	r3, r2
 8011bc0:	d027      	beq.n	8011c12 <UART_AdvFeatureConfig+0x20a>
 8011bc2:	687b      	ldr	r3, [r7, #4]
 8011bc4:	681b      	ldr	r3, [r3, #0]
 8011bc6:	4a1e      	ldr	r2, [pc, #120]	@ (8011c40 <UART_AdvFeatureConfig+0x238>)
 8011bc8:	4293      	cmp	r3, r2
 8011bca:	d022      	beq.n	8011c12 <UART_AdvFeatureConfig+0x20a>
 8011bcc:	687b      	ldr	r3, [r7, #4]
 8011bce:	681b      	ldr	r3, [r3, #0]
 8011bd0:	4a1c      	ldr	r2, [pc, #112]	@ (8011c44 <UART_AdvFeatureConfig+0x23c>)
 8011bd2:	4293      	cmp	r3, r2
 8011bd4:	d01d      	beq.n	8011c12 <UART_AdvFeatureConfig+0x20a>
 8011bd6:	687b      	ldr	r3, [r7, #4]
 8011bd8:	681b      	ldr	r3, [r3, #0]
 8011bda:	4a1b      	ldr	r2, [pc, #108]	@ (8011c48 <UART_AdvFeatureConfig+0x240>)
 8011bdc:	4293      	cmp	r3, r2
 8011bde:	d018      	beq.n	8011c12 <UART_AdvFeatureConfig+0x20a>
 8011be0:	687b      	ldr	r3, [r7, #4]
 8011be2:	681b      	ldr	r3, [r3, #0]
 8011be4:	4a19      	ldr	r2, [pc, #100]	@ (8011c4c <UART_AdvFeatureConfig+0x244>)
 8011be6:	4293      	cmp	r3, r2
 8011be8:	d013      	beq.n	8011c12 <UART_AdvFeatureConfig+0x20a>
 8011bea:	687b      	ldr	r3, [r7, #4]
 8011bec:	681b      	ldr	r3, [r3, #0]
 8011bee:	4a18      	ldr	r2, [pc, #96]	@ (8011c50 <UART_AdvFeatureConfig+0x248>)
 8011bf0:	4293      	cmp	r3, r2
 8011bf2:	d00e      	beq.n	8011c12 <UART_AdvFeatureConfig+0x20a>
 8011bf4:	687b      	ldr	r3, [r7, #4]
 8011bf6:	681b      	ldr	r3, [r3, #0]
 8011bf8:	4a16      	ldr	r2, [pc, #88]	@ (8011c54 <UART_AdvFeatureConfig+0x24c>)
 8011bfa:	4293      	cmp	r3, r2
 8011bfc:	d009      	beq.n	8011c12 <UART_AdvFeatureConfig+0x20a>
 8011bfe:	687b      	ldr	r3, [r7, #4]
 8011c00:	681b      	ldr	r3, [r3, #0]
 8011c02:	4a15      	ldr	r2, [pc, #84]	@ (8011c58 <UART_AdvFeatureConfig+0x250>)
 8011c04:	4293      	cmp	r3, r2
 8011c06:	d004      	beq.n	8011c12 <UART_AdvFeatureConfig+0x20a>
 8011c08:	f640 510f 	movw	r1, #3343	@ 0xd0f
 8011c0c:	4808      	ldr	r0, [pc, #32]	@ (8011c30 <UART_AdvFeatureConfig+0x228>)
 8011c0e:	f7f0 fbd9 	bl	80023c4 <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 8011c12:	687b      	ldr	r3, [r7, #4]
 8011c14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011c16:	2b00      	cmp	r3, #0
 8011c18:	d020      	beq.n	8011c5c <UART_AdvFeatureConfig+0x254>
 8011c1a:	687b      	ldr	r3, [r7, #4]
 8011c1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011c1e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8011c22:	d01b      	beq.n	8011c5c <UART_AdvFeatureConfig+0x254>
 8011c24:	f44f 6151 	mov.w	r1, #3344	@ 0xd10
 8011c28:	4801      	ldr	r0, [pc, #4]	@ (8011c30 <UART_AdvFeatureConfig+0x228>)
 8011c2a:	f7f0 fbcb 	bl	80023c4 <assert_failed>
 8011c2e:	e015      	b.n	8011c5c <UART_AdvFeatureConfig+0x254>
 8011c30:	08021748 	.word	0x08021748
 8011c34:	40011000 	.word	0x40011000
 8011c38:	40004400 	.word	0x40004400
 8011c3c:	40004800 	.word	0x40004800
 8011c40:	40004c00 	.word	0x40004c00
 8011c44:	40005000 	.word	0x40005000
 8011c48:	40011400 	.word	0x40011400
 8011c4c:	40007800 	.word	0x40007800
 8011c50:	40007c00 	.word	0x40007c00
 8011c54:	40011800 	.word	0x40011800
 8011c58:	40011c00 	.word	0x40011c00
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8011c5c:	687b      	ldr	r3, [r7, #4]
 8011c5e:	681b      	ldr	r3, [r3, #0]
 8011c60:	685b      	ldr	r3, [r3, #4]
 8011c62:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8011c66:	687b      	ldr	r3, [r7, #4]
 8011c68:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8011c6a:	687b      	ldr	r3, [r7, #4]
 8011c6c:	681b      	ldr	r3, [r3, #0]
 8011c6e:	430a      	orrs	r2, r1
 8011c70:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8011c72:	687b      	ldr	r3, [r7, #4]
 8011c74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011c76:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8011c7a:	d122      	bne.n	8011cc2 <UART_AdvFeatureConfig+0x2ba>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 8011c7c:	687b      	ldr	r3, [r7, #4]
 8011c7e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8011c80:	2b00      	cmp	r3, #0
 8011c82:	d013      	beq.n	8011cac <UART_AdvFeatureConfig+0x2a4>
 8011c84:	687b      	ldr	r3, [r7, #4]
 8011c86:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8011c88:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8011c8c:	d00e      	beq.n	8011cac <UART_AdvFeatureConfig+0x2a4>
 8011c8e:	687b      	ldr	r3, [r7, #4]
 8011c90:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8011c92:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8011c96:	d009      	beq.n	8011cac <UART_AdvFeatureConfig+0x2a4>
 8011c98:	687b      	ldr	r3, [r7, #4]
 8011c9a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8011c9c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8011ca0:	d004      	beq.n	8011cac <UART_AdvFeatureConfig+0x2a4>
 8011ca2:	f640 5115 	movw	r1, #3349	@ 0xd15
 8011ca6:	4818      	ldr	r0, [pc, #96]	@ (8011d08 <UART_AdvFeatureConfig+0x300>)
 8011ca8:	f7f0 fb8c 	bl	80023c4 <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8011cac:	687b      	ldr	r3, [r7, #4]
 8011cae:	681b      	ldr	r3, [r3, #0]
 8011cb0:	685b      	ldr	r3, [r3, #4]
 8011cb2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8011cb6:	687b      	ldr	r3, [r7, #4]
 8011cb8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8011cba:	687b      	ldr	r3, [r7, #4]
 8011cbc:	681b      	ldr	r3, [r3, #0]
 8011cbe:	430a      	orrs	r2, r1
 8011cc0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8011cc2:	687b      	ldr	r3, [r7, #4]
 8011cc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011cc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011cca:	2b00      	cmp	r3, #0
 8011ccc:	d018      	beq.n	8011d00 <UART_AdvFeatureConfig+0x2f8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 8011cce:	687b      	ldr	r3, [r7, #4]
 8011cd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011cd2:	2b00      	cmp	r3, #0
 8011cd4:	d009      	beq.n	8011cea <UART_AdvFeatureConfig+0x2e2>
 8011cd6:	687b      	ldr	r3, [r7, #4]
 8011cd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011cda:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8011cde:	d004      	beq.n	8011cea <UART_AdvFeatureConfig+0x2e2>
 8011ce0:	f640 511d 	movw	r1, #3357	@ 0xd1d
 8011ce4:	4808      	ldr	r0, [pc, #32]	@ (8011d08 <UART_AdvFeatureConfig+0x300>)
 8011ce6:	f7f0 fb6d 	bl	80023c4 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8011cea:	687b      	ldr	r3, [r7, #4]
 8011cec:	681b      	ldr	r3, [r3, #0]
 8011cee:	685b      	ldr	r3, [r3, #4]
 8011cf0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8011cf4:	687b      	ldr	r3, [r7, #4]
 8011cf6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8011cf8:	687b      	ldr	r3, [r7, #4]
 8011cfa:	681b      	ldr	r3, [r3, #0]
 8011cfc:	430a      	orrs	r2, r1
 8011cfe:	605a      	str	r2, [r3, #4]
  }
}
 8011d00:	bf00      	nop
 8011d02:	3708      	adds	r7, #8
 8011d04:	46bd      	mov	sp, r7
 8011d06:	bd80      	pop	{r7, pc}
 8011d08:	08021748 	.word	0x08021748

08011d0c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8011d0c:	b580      	push	{r7, lr}
 8011d0e:	b098      	sub	sp, #96	@ 0x60
 8011d10:	af02      	add	r7, sp, #8
 8011d12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011d14:	687b      	ldr	r3, [r7, #4]
 8011d16:	2200      	movs	r2, #0
 8011d18:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8011d1c:	f7f1 fcee 	bl	80036fc <HAL_GetTick>
 8011d20:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8011d22:	687b      	ldr	r3, [r7, #4]
 8011d24:	681b      	ldr	r3, [r3, #0]
 8011d26:	681b      	ldr	r3, [r3, #0]
 8011d28:	f003 0308 	and.w	r3, r3, #8
 8011d2c:	2b08      	cmp	r3, #8
 8011d2e:	d12f      	bne.n	8011d90 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011d30:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8011d34:	9300      	str	r3, [sp, #0]
 8011d36:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011d38:	2200      	movs	r2, #0
 8011d3a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8011d3e:	6878      	ldr	r0, [r7, #4]
 8011d40:	f000 f88e 	bl	8011e60 <UART_WaitOnFlagUntilTimeout>
 8011d44:	4603      	mov	r3, r0
 8011d46:	2b00      	cmp	r3, #0
 8011d48:	d022      	beq.n	8011d90 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8011d4a:	687b      	ldr	r3, [r7, #4]
 8011d4c:	681b      	ldr	r3, [r3, #0]
 8011d4e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011d50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011d52:	e853 3f00 	ldrex	r3, [r3]
 8011d56:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8011d58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011d5a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8011d5e:	653b      	str	r3, [r7, #80]	@ 0x50
 8011d60:	687b      	ldr	r3, [r7, #4]
 8011d62:	681b      	ldr	r3, [r3, #0]
 8011d64:	461a      	mov	r2, r3
 8011d66:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011d68:	647b      	str	r3, [r7, #68]	@ 0x44
 8011d6a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011d6c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8011d6e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8011d70:	e841 2300 	strex	r3, r2, [r1]
 8011d74:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8011d76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011d78:	2b00      	cmp	r3, #0
 8011d7a:	d1e6      	bne.n	8011d4a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8011d7c:	687b      	ldr	r3, [r7, #4]
 8011d7e:	2220      	movs	r2, #32
 8011d80:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8011d84:	687b      	ldr	r3, [r7, #4]
 8011d86:	2200      	movs	r2, #0
 8011d88:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011d8c:	2303      	movs	r3, #3
 8011d8e:	e063      	b.n	8011e58 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8011d90:	687b      	ldr	r3, [r7, #4]
 8011d92:	681b      	ldr	r3, [r3, #0]
 8011d94:	681b      	ldr	r3, [r3, #0]
 8011d96:	f003 0304 	and.w	r3, r3, #4
 8011d9a:	2b04      	cmp	r3, #4
 8011d9c:	d149      	bne.n	8011e32 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011d9e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8011da2:	9300      	str	r3, [sp, #0]
 8011da4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011da6:	2200      	movs	r2, #0
 8011da8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8011dac:	6878      	ldr	r0, [r7, #4]
 8011dae:	f000 f857 	bl	8011e60 <UART_WaitOnFlagUntilTimeout>
 8011db2:	4603      	mov	r3, r0
 8011db4:	2b00      	cmp	r3, #0
 8011db6:	d03c      	beq.n	8011e32 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011db8:	687b      	ldr	r3, [r7, #4]
 8011dba:	681b      	ldr	r3, [r3, #0]
 8011dbc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011dc0:	e853 3f00 	ldrex	r3, [r3]
 8011dc4:	623b      	str	r3, [r7, #32]
   return(result);
 8011dc6:	6a3b      	ldr	r3, [r7, #32]
 8011dc8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8011dcc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8011dce:	687b      	ldr	r3, [r7, #4]
 8011dd0:	681b      	ldr	r3, [r3, #0]
 8011dd2:	461a      	mov	r2, r3
 8011dd4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011dd6:	633b      	str	r3, [r7, #48]	@ 0x30
 8011dd8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011dda:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8011ddc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011dde:	e841 2300 	strex	r3, r2, [r1]
 8011de2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8011de4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011de6:	2b00      	cmp	r3, #0
 8011de8:	d1e6      	bne.n	8011db8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011dea:	687b      	ldr	r3, [r7, #4]
 8011dec:	681b      	ldr	r3, [r3, #0]
 8011dee:	3308      	adds	r3, #8
 8011df0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011df2:	693b      	ldr	r3, [r7, #16]
 8011df4:	e853 3f00 	ldrex	r3, [r3]
 8011df8:	60fb      	str	r3, [r7, #12]
   return(result);
 8011dfa:	68fb      	ldr	r3, [r7, #12]
 8011dfc:	f023 0301 	bic.w	r3, r3, #1
 8011e00:	64bb      	str	r3, [r7, #72]	@ 0x48
 8011e02:	687b      	ldr	r3, [r7, #4]
 8011e04:	681b      	ldr	r3, [r3, #0]
 8011e06:	3308      	adds	r3, #8
 8011e08:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8011e0a:	61fa      	str	r2, [r7, #28]
 8011e0c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011e0e:	69b9      	ldr	r1, [r7, #24]
 8011e10:	69fa      	ldr	r2, [r7, #28]
 8011e12:	e841 2300 	strex	r3, r2, [r1]
 8011e16:	617b      	str	r3, [r7, #20]
   return(result);
 8011e18:	697b      	ldr	r3, [r7, #20]
 8011e1a:	2b00      	cmp	r3, #0
 8011e1c:	d1e5      	bne.n	8011dea <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8011e1e:	687b      	ldr	r3, [r7, #4]
 8011e20:	2220      	movs	r2, #32
 8011e22:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8011e26:	687b      	ldr	r3, [r7, #4]
 8011e28:	2200      	movs	r2, #0
 8011e2a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011e2e:	2303      	movs	r3, #3
 8011e30:	e012      	b.n	8011e58 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8011e32:	687b      	ldr	r3, [r7, #4]
 8011e34:	2220      	movs	r2, #32
 8011e36:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8011e3a:	687b      	ldr	r3, [r7, #4]
 8011e3c:	2220      	movs	r2, #32
 8011e3e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011e42:	687b      	ldr	r3, [r7, #4]
 8011e44:	2200      	movs	r2, #0
 8011e46:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011e48:	687b      	ldr	r3, [r7, #4]
 8011e4a:	2200      	movs	r2, #0
 8011e4c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8011e4e:	687b      	ldr	r3, [r7, #4]
 8011e50:	2200      	movs	r2, #0
 8011e52:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8011e56:	2300      	movs	r3, #0
}
 8011e58:	4618      	mov	r0, r3
 8011e5a:	3758      	adds	r7, #88	@ 0x58
 8011e5c:	46bd      	mov	sp, r7
 8011e5e:	bd80      	pop	{r7, pc}

08011e60 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8011e60:	b580      	push	{r7, lr}
 8011e62:	b084      	sub	sp, #16
 8011e64:	af00      	add	r7, sp, #0
 8011e66:	60f8      	str	r0, [r7, #12]
 8011e68:	60b9      	str	r1, [r7, #8]
 8011e6a:	603b      	str	r3, [r7, #0]
 8011e6c:	4613      	mov	r3, r2
 8011e6e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011e70:	e04f      	b.n	8011f12 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8011e72:	69bb      	ldr	r3, [r7, #24]
 8011e74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011e78:	d04b      	beq.n	8011f12 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011e7a:	f7f1 fc3f 	bl	80036fc <HAL_GetTick>
 8011e7e:	4602      	mov	r2, r0
 8011e80:	683b      	ldr	r3, [r7, #0]
 8011e82:	1ad3      	subs	r3, r2, r3
 8011e84:	69ba      	ldr	r2, [r7, #24]
 8011e86:	429a      	cmp	r2, r3
 8011e88:	d302      	bcc.n	8011e90 <UART_WaitOnFlagUntilTimeout+0x30>
 8011e8a:	69bb      	ldr	r3, [r7, #24]
 8011e8c:	2b00      	cmp	r3, #0
 8011e8e:	d101      	bne.n	8011e94 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8011e90:	2303      	movs	r3, #3
 8011e92:	e04e      	b.n	8011f32 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8011e94:	68fb      	ldr	r3, [r7, #12]
 8011e96:	681b      	ldr	r3, [r3, #0]
 8011e98:	681b      	ldr	r3, [r3, #0]
 8011e9a:	f003 0304 	and.w	r3, r3, #4
 8011e9e:	2b00      	cmp	r3, #0
 8011ea0:	d037      	beq.n	8011f12 <UART_WaitOnFlagUntilTimeout+0xb2>
 8011ea2:	68bb      	ldr	r3, [r7, #8]
 8011ea4:	2b80      	cmp	r3, #128	@ 0x80
 8011ea6:	d034      	beq.n	8011f12 <UART_WaitOnFlagUntilTimeout+0xb2>
 8011ea8:	68bb      	ldr	r3, [r7, #8]
 8011eaa:	2b40      	cmp	r3, #64	@ 0x40
 8011eac:	d031      	beq.n	8011f12 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8011eae:	68fb      	ldr	r3, [r7, #12]
 8011eb0:	681b      	ldr	r3, [r3, #0]
 8011eb2:	69db      	ldr	r3, [r3, #28]
 8011eb4:	f003 0308 	and.w	r3, r3, #8
 8011eb8:	2b08      	cmp	r3, #8
 8011eba:	d110      	bne.n	8011ede <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8011ebc:	68fb      	ldr	r3, [r7, #12]
 8011ebe:	681b      	ldr	r3, [r3, #0]
 8011ec0:	2208      	movs	r2, #8
 8011ec2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8011ec4:	68f8      	ldr	r0, [r7, #12]
 8011ec6:	f000 f95b 	bl	8012180 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8011eca:	68fb      	ldr	r3, [r7, #12]
 8011ecc:	2208      	movs	r2, #8
 8011ece:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8011ed2:	68fb      	ldr	r3, [r7, #12]
 8011ed4:	2200      	movs	r2, #0
 8011ed6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8011eda:	2301      	movs	r3, #1
 8011edc:	e029      	b.n	8011f32 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8011ede:	68fb      	ldr	r3, [r7, #12]
 8011ee0:	681b      	ldr	r3, [r3, #0]
 8011ee2:	69db      	ldr	r3, [r3, #28]
 8011ee4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8011ee8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8011eec:	d111      	bne.n	8011f12 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8011eee:	68fb      	ldr	r3, [r7, #12]
 8011ef0:	681b      	ldr	r3, [r3, #0]
 8011ef2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8011ef6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8011ef8:	68f8      	ldr	r0, [r7, #12]
 8011efa:	f000 f941 	bl	8012180 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8011efe:	68fb      	ldr	r3, [r7, #12]
 8011f00:	2220      	movs	r2, #32
 8011f02:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8011f06:	68fb      	ldr	r3, [r7, #12]
 8011f08:	2200      	movs	r2, #0
 8011f0a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8011f0e:	2303      	movs	r3, #3
 8011f10:	e00f      	b.n	8011f32 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011f12:	68fb      	ldr	r3, [r7, #12]
 8011f14:	681b      	ldr	r3, [r3, #0]
 8011f16:	69da      	ldr	r2, [r3, #28]
 8011f18:	68bb      	ldr	r3, [r7, #8]
 8011f1a:	4013      	ands	r3, r2
 8011f1c:	68ba      	ldr	r2, [r7, #8]
 8011f1e:	429a      	cmp	r2, r3
 8011f20:	bf0c      	ite	eq
 8011f22:	2301      	moveq	r3, #1
 8011f24:	2300      	movne	r3, #0
 8011f26:	b2db      	uxtb	r3, r3
 8011f28:	461a      	mov	r2, r3
 8011f2a:	79fb      	ldrb	r3, [r7, #7]
 8011f2c:	429a      	cmp	r2, r3
 8011f2e:	d0a0      	beq.n	8011e72 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8011f30:	2300      	movs	r3, #0
}
 8011f32:	4618      	mov	r0, r3
 8011f34:	3710      	adds	r7, #16
 8011f36:	46bd      	mov	sp, r7
 8011f38:	bd80      	pop	{r7, pc}
	...

08011f3c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8011f3c:	b480      	push	{r7}
 8011f3e:	b0a3      	sub	sp, #140	@ 0x8c
 8011f40:	af00      	add	r7, sp, #0
 8011f42:	60f8      	str	r0, [r7, #12]
 8011f44:	60b9      	str	r1, [r7, #8]
 8011f46:	4613      	mov	r3, r2
 8011f48:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8011f4a:	68fb      	ldr	r3, [r7, #12]
 8011f4c:	68ba      	ldr	r2, [r7, #8]
 8011f4e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8011f50:	68fb      	ldr	r3, [r7, #12]
 8011f52:	88fa      	ldrh	r2, [r7, #6]
 8011f54:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8011f58:	68fb      	ldr	r3, [r7, #12]
 8011f5a:	88fa      	ldrh	r2, [r7, #6]
 8011f5c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8011f60:	68fb      	ldr	r3, [r7, #12]
 8011f62:	2200      	movs	r2, #0
 8011f64:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8011f66:	68fb      	ldr	r3, [r7, #12]
 8011f68:	689b      	ldr	r3, [r3, #8]
 8011f6a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8011f6e:	d10e      	bne.n	8011f8e <UART_Start_Receive_IT+0x52>
 8011f70:	68fb      	ldr	r3, [r7, #12]
 8011f72:	691b      	ldr	r3, [r3, #16]
 8011f74:	2b00      	cmp	r3, #0
 8011f76:	d105      	bne.n	8011f84 <UART_Start_Receive_IT+0x48>
 8011f78:	68fb      	ldr	r3, [r7, #12]
 8011f7a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8011f7e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8011f82:	e02d      	b.n	8011fe0 <UART_Start_Receive_IT+0xa4>
 8011f84:	68fb      	ldr	r3, [r7, #12]
 8011f86:	22ff      	movs	r2, #255	@ 0xff
 8011f88:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8011f8c:	e028      	b.n	8011fe0 <UART_Start_Receive_IT+0xa4>
 8011f8e:	68fb      	ldr	r3, [r7, #12]
 8011f90:	689b      	ldr	r3, [r3, #8]
 8011f92:	2b00      	cmp	r3, #0
 8011f94:	d10d      	bne.n	8011fb2 <UART_Start_Receive_IT+0x76>
 8011f96:	68fb      	ldr	r3, [r7, #12]
 8011f98:	691b      	ldr	r3, [r3, #16]
 8011f9a:	2b00      	cmp	r3, #0
 8011f9c:	d104      	bne.n	8011fa8 <UART_Start_Receive_IT+0x6c>
 8011f9e:	68fb      	ldr	r3, [r7, #12]
 8011fa0:	22ff      	movs	r2, #255	@ 0xff
 8011fa2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8011fa6:	e01b      	b.n	8011fe0 <UART_Start_Receive_IT+0xa4>
 8011fa8:	68fb      	ldr	r3, [r7, #12]
 8011faa:	227f      	movs	r2, #127	@ 0x7f
 8011fac:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8011fb0:	e016      	b.n	8011fe0 <UART_Start_Receive_IT+0xa4>
 8011fb2:	68fb      	ldr	r3, [r7, #12]
 8011fb4:	689b      	ldr	r3, [r3, #8]
 8011fb6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8011fba:	d10d      	bne.n	8011fd8 <UART_Start_Receive_IT+0x9c>
 8011fbc:	68fb      	ldr	r3, [r7, #12]
 8011fbe:	691b      	ldr	r3, [r3, #16]
 8011fc0:	2b00      	cmp	r3, #0
 8011fc2:	d104      	bne.n	8011fce <UART_Start_Receive_IT+0x92>
 8011fc4:	68fb      	ldr	r3, [r7, #12]
 8011fc6:	227f      	movs	r2, #127	@ 0x7f
 8011fc8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8011fcc:	e008      	b.n	8011fe0 <UART_Start_Receive_IT+0xa4>
 8011fce:	68fb      	ldr	r3, [r7, #12]
 8011fd0:	223f      	movs	r2, #63	@ 0x3f
 8011fd2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8011fd6:	e003      	b.n	8011fe0 <UART_Start_Receive_IT+0xa4>
 8011fd8:	68fb      	ldr	r3, [r7, #12]
 8011fda:	2200      	movs	r2, #0
 8011fdc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011fe0:	68fb      	ldr	r3, [r7, #12]
 8011fe2:	2200      	movs	r2, #0
 8011fe4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8011fe8:	68fb      	ldr	r3, [r7, #12]
 8011fea:	2222      	movs	r2, #34	@ 0x22
 8011fec:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011ff0:	68fb      	ldr	r3, [r7, #12]
 8011ff2:	681b      	ldr	r3, [r3, #0]
 8011ff4:	3308      	adds	r3, #8
 8011ff6:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011ff8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011ffa:	e853 3f00 	ldrex	r3, [r3]
 8011ffe:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8012000:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8012002:	f043 0301 	orr.w	r3, r3, #1
 8012006:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 801200a:	68fb      	ldr	r3, [r7, #12]
 801200c:	681b      	ldr	r3, [r3, #0]
 801200e:	3308      	adds	r3, #8
 8012010:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8012014:	673a      	str	r2, [r7, #112]	@ 0x70
 8012016:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012018:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 801201a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 801201c:	e841 2300 	strex	r3, r2, [r1]
 8012020:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8012022:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8012024:	2b00      	cmp	r3, #0
 8012026:	d1e3      	bne.n	8011ff0 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8012028:	68fb      	ldr	r3, [r7, #12]
 801202a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801202c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8012030:	d14f      	bne.n	80120d2 <UART_Start_Receive_IT+0x196>
 8012032:	68fb      	ldr	r3, [r7, #12]
 8012034:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8012038:	88fa      	ldrh	r2, [r7, #6]
 801203a:	429a      	cmp	r2, r3
 801203c:	d349      	bcc.n	80120d2 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801203e:	68fb      	ldr	r3, [r7, #12]
 8012040:	689b      	ldr	r3, [r3, #8]
 8012042:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8012046:	d107      	bne.n	8012058 <UART_Start_Receive_IT+0x11c>
 8012048:	68fb      	ldr	r3, [r7, #12]
 801204a:	691b      	ldr	r3, [r3, #16]
 801204c:	2b00      	cmp	r3, #0
 801204e:	d103      	bne.n	8012058 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8012050:	68fb      	ldr	r3, [r7, #12]
 8012052:	4a47      	ldr	r2, [pc, #284]	@ (8012170 <UART_Start_Receive_IT+0x234>)
 8012054:	675a      	str	r2, [r3, #116]	@ 0x74
 8012056:	e002      	b.n	801205e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8012058:	68fb      	ldr	r3, [r7, #12]
 801205a:	4a46      	ldr	r2, [pc, #280]	@ (8012174 <UART_Start_Receive_IT+0x238>)
 801205c:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 801205e:	68fb      	ldr	r3, [r7, #12]
 8012060:	691b      	ldr	r3, [r3, #16]
 8012062:	2b00      	cmp	r3, #0
 8012064:	d01a      	beq.n	801209c <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8012066:	68fb      	ldr	r3, [r7, #12]
 8012068:	681b      	ldr	r3, [r3, #0]
 801206a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801206c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801206e:	e853 3f00 	ldrex	r3, [r3]
 8012072:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8012074:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012076:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801207a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 801207e:	68fb      	ldr	r3, [r7, #12]
 8012080:	681b      	ldr	r3, [r3, #0]
 8012082:	461a      	mov	r2, r3
 8012084:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8012088:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801208a:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801208c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 801208e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8012090:	e841 2300 	strex	r3, r2, [r1]
 8012094:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8012096:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012098:	2b00      	cmp	r3, #0
 801209a:	d1e4      	bne.n	8012066 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 801209c:	68fb      	ldr	r3, [r7, #12]
 801209e:	681b      	ldr	r3, [r3, #0]
 80120a0:	3308      	adds	r3, #8
 80120a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80120a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80120a6:	e853 3f00 	ldrex	r3, [r3]
 80120aa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80120ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80120ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80120b2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80120b4:	68fb      	ldr	r3, [r7, #12]
 80120b6:	681b      	ldr	r3, [r3, #0]
 80120b8:	3308      	adds	r3, #8
 80120ba:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80120bc:	64ba      	str	r2, [r7, #72]	@ 0x48
 80120be:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80120c0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80120c2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80120c4:	e841 2300 	strex	r3, r2, [r1]
 80120c8:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80120ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80120cc:	2b00      	cmp	r3, #0
 80120ce:	d1e5      	bne.n	801209c <UART_Start_Receive_IT+0x160>
 80120d0:	e046      	b.n	8012160 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80120d2:	68fb      	ldr	r3, [r7, #12]
 80120d4:	689b      	ldr	r3, [r3, #8]
 80120d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80120da:	d107      	bne.n	80120ec <UART_Start_Receive_IT+0x1b0>
 80120dc:	68fb      	ldr	r3, [r7, #12]
 80120de:	691b      	ldr	r3, [r3, #16]
 80120e0:	2b00      	cmp	r3, #0
 80120e2:	d103      	bne.n	80120ec <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80120e4:	68fb      	ldr	r3, [r7, #12]
 80120e6:	4a24      	ldr	r2, [pc, #144]	@ (8012178 <UART_Start_Receive_IT+0x23c>)
 80120e8:	675a      	str	r2, [r3, #116]	@ 0x74
 80120ea:	e002      	b.n	80120f2 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80120ec:	68fb      	ldr	r3, [r7, #12]
 80120ee:	4a23      	ldr	r2, [pc, #140]	@ (801217c <UART_Start_Receive_IT+0x240>)
 80120f0:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80120f2:	68fb      	ldr	r3, [r7, #12]
 80120f4:	691b      	ldr	r3, [r3, #16]
 80120f6:	2b00      	cmp	r3, #0
 80120f8:	d019      	beq.n	801212e <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80120fa:	68fb      	ldr	r3, [r7, #12]
 80120fc:	681b      	ldr	r3, [r3, #0]
 80120fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012100:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012102:	e853 3f00 	ldrex	r3, [r3]
 8012106:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8012108:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801210a:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 801210e:	677b      	str	r3, [r7, #116]	@ 0x74
 8012110:	68fb      	ldr	r3, [r7, #12]
 8012112:	681b      	ldr	r3, [r3, #0]
 8012114:	461a      	mov	r2, r3
 8012116:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8012118:	637b      	str	r3, [r7, #52]	@ 0x34
 801211a:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801211c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801211e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8012120:	e841 2300 	strex	r3, r2, [r1]
 8012124:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8012126:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012128:	2b00      	cmp	r3, #0
 801212a:	d1e6      	bne.n	80120fa <UART_Start_Receive_IT+0x1be>
 801212c:	e018      	b.n	8012160 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 801212e:	68fb      	ldr	r3, [r7, #12]
 8012130:	681b      	ldr	r3, [r3, #0]
 8012132:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012134:	697b      	ldr	r3, [r7, #20]
 8012136:	e853 3f00 	ldrex	r3, [r3]
 801213a:	613b      	str	r3, [r7, #16]
   return(result);
 801213c:	693b      	ldr	r3, [r7, #16]
 801213e:	f043 0320 	orr.w	r3, r3, #32
 8012142:	67bb      	str	r3, [r7, #120]	@ 0x78
 8012144:	68fb      	ldr	r3, [r7, #12]
 8012146:	681b      	ldr	r3, [r3, #0]
 8012148:	461a      	mov	r2, r3
 801214a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801214c:	623b      	str	r3, [r7, #32]
 801214e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012150:	69f9      	ldr	r1, [r7, #28]
 8012152:	6a3a      	ldr	r2, [r7, #32]
 8012154:	e841 2300 	strex	r3, r2, [r1]
 8012158:	61bb      	str	r3, [r7, #24]
   return(result);
 801215a:	69bb      	ldr	r3, [r7, #24]
 801215c:	2b00      	cmp	r3, #0
 801215e:	d1e6      	bne.n	801212e <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8012160:	2300      	movs	r3, #0
}
 8012162:	4618      	mov	r0, r3
 8012164:	378c      	adds	r7, #140	@ 0x8c
 8012166:	46bd      	mov	sp, r7
 8012168:	f85d 7b04 	ldr.w	r7, [sp], #4
 801216c:	4770      	bx	lr
 801216e:	bf00      	nop
 8012170:	0801299d 	.word	0x0801299d
 8012174:	08012639 	.word	0x08012639
 8012178:	08012481 	.word	0x08012481
 801217c:	080122c9 	.word	0x080122c9

08012180 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8012180:	b480      	push	{r7}
 8012182:	b095      	sub	sp, #84	@ 0x54
 8012184:	af00      	add	r7, sp, #0
 8012186:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8012188:	687b      	ldr	r3, [r7, #4]
 801218a:	681b      	ldr	r3, [r3, #0]
 801218c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801218e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012190:	e853 3f00 	ldrex	r3, [r3]
 8012194:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8012196:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012198:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801219c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801219e:	687b      	ldr	r3, [r7, #4]
 80121a0:	681b      	ldr	r3, [r3, #0]
 80121a2:	461a      	mov	r2, r3
 80121a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80121a6:	643b      	str	r3, [r7, #64]	@ 0x40
 80121a8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80121aa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80121ac:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80121ae:	e841 2300 	strex	r3, r2, [r1]
 80121b2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80121b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80121b6:	2b00      	cmp	r3, #0
 80121b8:	d1e6      	bne.n	8012188 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80121ba:	687b      	ldr	r3, [r7, #4]
 80121bc:	681b      	ldr	r3, [r3, #0]
 80121be:	3308      	adds	r3, #8
 80121c0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80121c2:	6a3b      	ldr	r3, [r7, #32]
 80121c4:	e853 3f00 	ldrex	r3, [r3]
 80121c8:	61fb      	str	r3, [r7, #28]
   return(result);
 80121ca:	69fa      	ldr	r2, [r7, #28]
 80121cc:	4b1e      	ldr	r3, [pc, #120]	@ (8012248 <UART_EndRxTransfer+0xc8>)
 80121ce:	4013      	ands	r3, r2
 80121d0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80121d2:	687b      	ldr	r3, [r7, #4]
 80121d4:	681b      	ldr	r3, [r3, #0]
 80121d6:	3308      	adds	r3, #8
 80121d8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80121da:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80121dc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80121de:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80121e0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80121e2:	e841 2300 	strex	r3, r2, [r1]
 80121e6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80121e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80121ea:	2b00      	cmp	r3, #0
 80121ec:	d1e5      	bne.n	80121ba <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80121ee:	687b      	ldr	r3, [r7, #4]
 80121f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80121f2:	2b01      	cmp	r3, #1
 80121f4:	d118      	bne.n	8012228 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80121f6:	687b      	ldr	r3, [r7, #4]
 80121f8:	681b      	ldr	r3, [r3, #0]
 80121fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80121fc:	68fb      	ldr	r3, [r7, #12]
 80121fe:	e853 3f00 	ldrex	r3, [r3]
 8012202:	60bb      	str	r3, [r7, #8]
   return(result);
 8012204:	68bb      	ldr	r3, [r7, #8]
 8012206:	f023 0310 	bic.w	r3, r3, #16
 801220a:	647b      	str	r3, [r7, #68]	@ 0x44
 801220c:	687b      	ldr	r3, [r7, #4]
 801220e:	681b      	ldr	r3, [r3, #0]
 8012210:	461a      	mov	r2, r3
 8012212:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012214:	61bb      	str	r3, [r7, #24]
 8012216:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012218:	6979      	ldr	r1, [r7, #20]
 801221a:	69ba      	ldr	r2, [r7, #24]
 801221c:	e841 2300 	strex	r3, r2, [r1]
 8012220:	613b      	str	r3, [r7, #16]
   return(result);
 8012222:	693b      	ldr	r3, [r7, #16]
 8012224:	2b00      	cmp	r3, #0
 8012226:	d1e6      	bne.n	80121f6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8012228:	687b      	ldr	r3, [r7, #4]
 801222a:	2220      	movs	r2, #32
 801222c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012230:	687b      	ldr	r3, [r7, #4]
 8012232:	2200      	movs	r2, #0
 8012234:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8012236:	687b      	ldr	r3, [r7, #4]
 8012238:	2200      	movs	r2, #0
 801223a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 801223c:	bf00      	nop
 801223e:	3754      	adds	r7, #84	@ 0x54
 8012240:	46bd      	mov	sp, r7
 8012242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012246:	4770      	bx	lr
 8012248:	effffffe 	.word	0xeffffffe

0801224c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801224c:	b580      	push	{r7, lr}
 801224e:	b084      	sub	sp, #16
 8012250:	af00      	add	r7, sp, #0
 8012252:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8012254:	687b      	ldr	r3, [r7, #4]
 8012256:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012258:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 801225a:	68fb      	ldr	r3, [r7, #12]
 801225c:	2200      	movs	r2, #0
 801225e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8012262:	68f8      	ldr	r0, [r7, #12]
 8012264:	f7fe fc74 	bl	8010b50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8012268:	bf00      	nop
 801226a:	3710      	adds	r7, #16
 801226c:	46bd      	mov	sp, r7
 801226e:	bd80      	pop	{r7, pc}

08012270 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8012270:	b580      	push	{r7, lr}
 8012272:	b088      	sub	sp, #32
 8012274:	af00      	add	r7, sp, #0
 8012276:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8012278:	687b      	ldr	r3, [r7, #4]
 801227a:	681b      	ldr	r3, [r3, #0]
 801227c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801227e:	68fb      	ldr	r3, [r7, #12]
 8012280:	e853 3f00 	ldrex	r3, [r3]
 8012284:	60bb      	str	r3, [r7, #8]
   return(result);
 8012286:	68bb      	ldr	r3, [r7, #8]
 8012288:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801228c:	61fb      	str	r3, [r7, #28]
 801228e:	687b      	ldr	r3, [r7, #4]
 8012290:	681b      	ldr	r3, [r3, #0]
 8012292:	461a      	mov	r2, r3
 8012294:	69fb      	ldr	r3, [r7, #28]
 8012296:	61bb      	str	r3, [r7, #24]
 8012298:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801229a:	6979      	ldr	r1, [r7, #20]
 801229c:	69ba      	ldr	r2, [r7, #24]
 801229e:	e841 2300 	strex	r3, r2, [r1]
 80122a2:	613b      	str	r3, [r7, #16]
   return(result);
 80122a4:	693b      	ldr	r3, [r7, #16]
 80122a6:	2b00      	cmp	r3, #0
 80122a8:	d1e6      	bne.n	8012278 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80122aa:	687b      	ldr	r3, [r7, #4]
 80122ac:	2220      	movs	r2, #32
 80122ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80122b2:	687b      	ldr	r3, [r7, #4]
 80122b4:	2200      	movs	r2, #0
 80122b6:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80122b8:	6878      	ldr	r0, [r7, #4]
 80122ba:	f7fe fc3f 	bl	8010b3c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80122be:	bf00      	nop
 80122c0:	3720      	adds	r7, #32
 80122c2:	46bd      	mov	sp, r7
 80122c4:	bd80      	pop	{r7, pc}
	...

080122c8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80122c8:	b580      	push	{r7, lr}
 80122ca:	b09c      	sub	sp, #112	@ 0x70
 80122cc:	af00      	add	r7, sp, #0
 80122ce:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80122d0:	687b      	ldr	r3, [r7, #4]
 80122d2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80122d6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80122da:	687b      	ldr	r3, [r7, #4]
 80122dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80122e0:	2b22      	cmp	r3, #34	@ 0x22
 80122e2:	f040 80be 	bne.w	8012462 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80122e6:	687b      	ldr	r3, [r7, #4]
 80122e8:	681b      	ldr	r3, [r3, #0]
 80122ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80122ec:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80122f0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80122f4:	b2d9      	uxtb	r1, r3
 80122f6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80122fa:	b2da      	uxtb	r2, r3
 80122fc:	687b      	ldr	r3, [r7, #4]
 80122fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012300:	400a      	ands	r2, r1
 8012302:	b2d2      	uxtb	r2, r2
 8012304:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8012306:	687b      	ldr	r3, [r7, #4]
 8012308:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801230a:	1c5a      	adds	r2, r3, #1
 801230c:	687b      	ldr	r3, [r7, #4]
 801230e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8012310:	687b      	ldr	r3, [r7, #4]
 8012312:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8012316:	b29b      	uxth	r3, r3
 8012318:	3b01      	subs	r3, #1
 801231a:	b29a      	uxth	r2, r3
 801231c:	687b      	ldr	r3, [r7, #4]
 801231e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8012322:	687b      	ldr	r3, [r7, #4]
 8012324:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8012328:	b29b      	uxth	r3, r3
 801232a:	2b00      	cmp	r3, #0
 801232c:	f040 80a1 	bne.w	8012472 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8012330:	687b      	ldr	r3, [r7, #4]
 8012332:	681b      	ldr	r3, [r3, #0]
 8012334:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012336:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012338:	e853 3f00 	ldrex	r3, [r3]
 801233c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 801233e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8012340:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8012344:	66bb      	str	r3, [r7, #104]	@ 0x68
 8012346:	687b      	ldr	r3, [r7, #4]
 8012348:	681b      	ldr	r3, [r3, #0]
 801234a:	461a      	mov	r2, r3
 801234c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801234e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8012350:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012352:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8012354:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8012356:	e841 2300 	strex	r3, r2, [r1]
 801235a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 801235c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801235e:	2b00      	cmp	r3, #0
 8012360:	d1e6      	bne.n	8012330 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012362:	687b      	ldr	r3, [r7, #4]
 8012364:	681b      	ldr	r3, [r3, #0]
 8012366:	3308      	adds	r3, #8
 8012368:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801236a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801236c:	e853 3f00 	ldrex	r3, [r3]
 8012370:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8012372:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012374:	f023 0301 	bic.w	r3, r3, #1
 8012378:	667b      	str	r3, [r7, #100]	@ 0x64
 801237a:	687b      	ldr	r3, [r7, #4]
 801237c:	681b      	ldr	r3, [r3, #0]
 801237e:	3308      	adds	r3, #8
 8012380:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8012382:	647a      	str	r2, [r7, #68]	@ 0x44
 8012384:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012386:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8012388:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801238a:	e841 2300 	strex	r3, r2, [r1]
 801238e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8012390:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012392:	2b00      	cmp	r3, #0
 8012394:	d1e5      	bne.n	8012362 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8012396:	687b      	ldr	r3, [r7, #4]
 8012398:	2220      	movs	r2, #32
 801239a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801239e:	687b      	ldr	r3, [r7, #4]
 80123a0:	2200      	movs	r2, #0
 80123a2:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80123a4:	687b      	ldr	r3, [r7, #4]
 80123a6:	2200      	movs	r2, #0
 80123a8:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80123aa:	687b      	ldr	r3, [r7, #4]
 80123ac:	681b      	ldr	r3, [r3, #0]
 80123ae:	4a33      	ldr	r2, [pc, #204]	@ (801247c <UART_RxISR_8BIT+0x1b4>)
 80123b0:	4293      	cmp	r3, r2
 80123b2:	d01f      	beq.n	80123f4 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80123b4:	687b      	ldr	r3, [r7, #4]
 80123b6:	681b      	ldr	r3, [r3, #0]
 80123b8:	685b      	ldr	r3, [r3, #4]
 80123ba:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80123be:	2b00      	cmp	r3, #0
 80123c0:	d018      	beq.n	80123f4 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80123c2:	687b      	ldr	r3, [r7, #4]
 80123c4:	681b      	ldr	r3, [r3, #0]
 80123c6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80123c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80123ca:	e853 3f00 	ldrex	r3, [r3]
 80123ce:	623b      	str	r3, [r7, #32]
   return(result);
 80123d0:	6a3b      	ldr	r3, [r7, #32]
 80123d2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80123d6:	663b      	str	r3, [r7, #96]	@ 0x60
 80123d8:	687b      	ldr	r3, [r7, #4]
 80123da:	681b      	ldr	r3, [r3, #0]
 80123dc:	461a      	mov	r2, r3
 80123de:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80123e0:	633b      	str	r3, [r7, #48]	@ 0x30
 80123e2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80123e4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80123e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80123e8:	e841 2300 	strex	r3, r2, [r1]
 80123ec:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80123ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80123f0:	2b00      	cmp	r3, #0
 80123f2:	d1e6      	bne.n	80123c2 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80123f4:	687b      	ldr	r3, [r7, #4]
 80123f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80123f8:	2b01      	cmp	r3, #1
 80123fa:	d12e      	bne.n	801245a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80123fc:	687b      	ldr	r3, [r7, #4]
 80123fe:	2200      	movs	r2, #0
 8012400:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012402:	687b      	ldr	r3, [r7, #4]
 8012404:	681b      	ldr	r3, [r3, #0]
 8012406:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012408:	693b      	ldr	r3, [r7, #16]
 801240a:	e853 3f00 	ldrex	r3, [r3]
 801240e:	60fb      	str	r3, [r7, #12]
   return(result);
 8012410:	68fb      	ldr	r3, [r7, #12]
 8012412:	f023 0310 	bic.w	r3, r3, #16
 8012416:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8012418:	687b      	ldr	r3, [r7, #4]
 801241a:	681b      	ldr	r3, [r3, #0]
 801241c:	461a      	mov	r2, r3
 801241e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012420:	61fb      	str	r3, [r7, #28]
 8012422:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012424:	69b9      	ldr	r1, [r7, #24]
 8012426:	69fa      	ldr	r2, [r7, #28]
 8012428:	e841 2300 	strex	r3, r2, [r1]
 801242c:	617b      	str	r3, [r7, #20]
   return(result);
 801242e:	697b      	ldr	r3, [r7, #20]
 8012430:	2b00      	cmp	r3, #0
 8012432:	d1e6      	bne.n	8012402 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8012434:	687b      	ldr	r3, [r7, #4]
 8012436:	681b      	ldr	r3, [r3, #0]
 8012438:	69db      	ldr	r3, [r3, #28]
 801243a:	f003 0310 	and.w	r3, r3, #16
 801243e:	2b10      	cmp	r3, #16
 8012440:	d103      	bne.n	801244a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8012442:	687b      	ldr	r3, [r7, #4]
 8012444:	681b      	ldr	r3, [r3, #0]
 8012446:	2210      	movs	r2, #16
 8012448:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801244a:	687b      	ldr	r3, [r7, #4]
 801244c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8012450:	4619      	mov	r1, r3
 8012452:	6878      	ldr	r0, [r7, #4]
 8012454:	f7fe fb86 	bl	8010b64 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8012458:	e00b      	b.n	8012472 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 801245a:	6878      	ldr	r0, [r7, #4]
 801245c:	f00c f8f2 	bl	801e644 <HAL_UART_RxCpltCallback>
}
 8012460:	e007      	b.n	8012472 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8012462:	687b      	ldr	r3, [r7, #4]
 8012464:	681b      	ldr	r3, [r3, #0]
 8012466:	699a      	ldr	r2, [r3, #24]
 8012468:	687b      	ldr	r3, [r7, #4]
 801246a:	681b      	ldr	r3, [r3, #0]
 801246c:	f042 0208 	orr.w	r2, r2, #8
 8012470:	619a      	str	r2, [r3, #24]
}
 8012472:	bf00      	nop
 8012474:	3770      	adds	r7, #112	@ 0x70
 8012476:	46bd      	mov	sp, r7
 8012478:	bd80      	pop	{r7, pc}
 801247a:	bf00      	nop
 801247c:	58000c00 	.word	0x58000c00

08012480 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8012480:	b580      	push	{r7, lr}
 8012482:	b09c      	sub	sp, #112	@ 0x70
 8012484:	af00      	add	r7, sp, #0
 8012486:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8012488:	687b      	ldr	r3, [r7, #4]
 801248a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801248e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8012492:	687b      	ldr	r3, [r7, #4]
 8012494:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8012498:	2b22      	cmp	r3, #34	@ 0x22
 801249a:	f040 80be 	bne.w	801261a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801249e:	687b      	ldr	r3, [r7, #4]
 80124a0:	681b      	ldr	r3, [r3, #0]
 80124a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80124a4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80124a8:	687b      	ldr	r3, [r7, #4]
 80124aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80124ac:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80124ae:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 80124b2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80124b6:	4013      	ands	r3, r2
 80124b8:	b29a      	uxth	r2, r3
 80124ba:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80124bc:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80124be:	687b      	ldr	r3, [r7, #4]
 80124c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80124c2:	1c9a      	adds	r2, r3, #2
 80124c4:	687b      	ldr	r3, [r7, #4]
 80124c6:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80124c8:	687b      	ldr	r3, [r7, #4]
 80124ca:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80124ce:	b29b      	uxth	r3, r3
 80124d0:	3b01      	subs	r3, #1
 80124d2:	b29a      	uxth	r2, r3
 80124d4:	687b      	ldr	r3, [r7, #4]
 80124d6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 80124da:	687b      	ldr	r3, [r7, #4]
 80124dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80124e0:	b29b      	uxth	r3, r3
 80124e2:	2b00      	cmp	r3, #0
 80124e4:	f040 80a1 	bne.w	801262a <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80124e8:	687b      	ldr	r3, [r7, #4]
 80124ea:	681b      	ldr	r3, [r3, #0]
 80124ec:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80124ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80124f0:	e853 3f00 	ldrex	r3, [r3]
 80124f4:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80124f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80124f8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80124fc:	667b      	str	r3, [r7, #100]	@ 0x64
 80124fe:	687b      	ldr	r3, [r7, #4]
 8012500:	681b      	ldr	r3, [r3, #0]
 8012502:	461a      	mov	r2, r3
 8012504:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8012506:	657b      	str	r3, [r7, #84]	@ 0x54
 8012508:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801250a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801250c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801250e:	e841 2300 	strex	r3, r2, [r1]
 8012512:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8012514:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012516:	2b00      	cmp	r3, #0
 8012518:	d1e6      	bne.n	80124e8 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801251a:	687b      	ldr	r3, [r7, #4]
 801251c:	681b      	ldr	r3, [r3, #0]
 801251e:	3308      	adds	r3, #8
 8012520:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012522:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012524:	e853 3f00 	ldrex	r3, [r3]
 8012528:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 801252a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801252c:	f023 0301 	bic.w	r3, r3, #1
 8012530:	663b      	str	r3, [r7, #96]	@ 0x60
 8012532:	687b      	ldr	r3, [r7, #4]
 8012534:	681b      	ldr	r3, [r3, #0]
 8012536:	3308      	adds	r3, #8
 8012538:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 801253a:	643a      	str	r2, [r7, #64]	@ 0x40
 801253c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801253e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8012540:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8012542:	e841 2300 	strex	r3, r2, [r1]
 8012546:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8012548:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801254a:	2b00      	cmp	r3, #0
 801254c:	d1e5      	bne.n	801251a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801254e:	687b      	ldr	r3, [r7, #4]
 8012550:	2220      	movs	r2, #32
 8012552:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8012556:	687b      	ldr	r3, [r7, #4]
 8012558:	2200      	movs	r2, #0
 801255a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 801255c:	687b      	ldr	r3, [r7, #4]
 801255e:	2200      	movs	r2, #0
 8012560:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8012562:	687b      	ldr	r3, [r7, #4]
 8012564:	681b      	ldr	r3, [r3, #0]
 8012566:	4a33      	ldr	r2, [pc, #204]	@ (8012634 <UART_RxISR_16BIT+0x1b4>)
 8012568:	4293      	cmp	r3, r2
 801256a:	d01f      	beq.n	80125ac <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801256c:	687b      	ldr	r3, [r7, #4]
 801256e:	681b      	ldr	r3, [r3, #0]
 8012570:	685b      	ldr	r3, [r3, #4]
 8012572:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8012576:	2b00      	cmp	r3, #0
 8012578:	d018      	beq.n	80125ac <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801257a:	687b      	ldr	r3, [r7, #4]
 801257c:	681b      	ldr	r3, [r3, #0]
 801257e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012580:	6a3b      	ldr	r3, [r7, #32]
 8012582:	e853 3f00 	ldrex	r3, [r3]
 8012586:	61fb      	str	r3, [r7, #28]
   return(result);
 8012588:	69fb      	ldr	r3, [r7, #28]
 801258a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 801258e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8012590:	687b      	ldr	r3, [r7, #4]
 8012592:	681b      	ldr	r3, [r3, #0]
 8012594:	461a      	mov	r2, r3
 8012596:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012598:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801259a:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801259c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801259e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80125a0:	e841 2300 	strex	r3, r2, [r1]
 80125a4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80125a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80125a8:	2b00      	cmp	r3, #0
 80125aa:	d1e6      	bne.n	801257a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80125ac:	687b      	ldr	r3, [r7, #4]
 80125ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80125b0:	2b01      	cmp	r3, #1
 80125b2:	d12e      	bne.n	8012612 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80125b4:	687b      	ldr	r3, [r7, #4]
 80125b6:	2200      	movs	r2, #0
 80125b8:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80125ba:	687b      	ldr	r3, [r7, #4]
 80125bc:	681b      	ldr	r3, [r3, #0]
 80125be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80125c0:	68fb      	ldr	r3, [r7, #12]
 80125c2:	e853 3f00 	ldrex	r3, [r3]
 80125c6:	60bb      	str	r3, [r7, #8]
   return(result);
 80125c8:	68bb      	ldr	r3, [r7, #8]
 80125ca:	f023 0310 	bic.w	r3, r3, #16
 80125ce:	65bb      	str	r3, [r7, #88]	@ 0x58
 80125d0:	687b      	ldr	r3, [r7, #4]
 80125d2:	681b      	ldr	r3, [r3, #0]
 80125d4:	461a      	mov	r2, r3
 80125d6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80125d8:	61bb      	str	r3, [r7, #24]
 80125da:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80125dc:	6979      	ldr	r1, [r7, #20]
 80125de:	69ba      	ldr	r2, [r7, #24]
 80125e0:	e841 2300 	strex	r3, r2, [r1]
 80125e4:	613b      	str	r3, [r7, #16]
   return(result);
 80125e6:	693b      	ldr	r3, [r7, #16]
 80125e8:	2b00      	cmp	r3, #0
 80125ea:	d1e6      	bne.n	80125ba <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80125ec:	687b      	ldr	r3, [r7, #4]
 80125ee:	681b      	ldr	r3, [r3, #0]
 80125f0:	69db      	ldr	r3, [r3, #28]
 80125f2:	f003 0310 	and.w	r3, r3, #16
 80125f6:	2b10      	cmp	r3, #16
 80125f8:	d103      	bne.n	8012602 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80125fa:	687b      	ldr	r3, [r7, #4]
 80125fc:	681b      	ldr	r3, [r3, #0]
 80125fe:	2210      	movs	r2, #16
 8012600:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8012602:	687b      	ldr	r3, [r7, #4]
 8012604:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8012608:	4619      	mov	r1, r3
 801260a:	6878      	ldr	r0, [r7, #4]
 801260c:	f7fe faaa 	bl	8010b64 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8012610:	e00b      	b.n	801262a <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8012612:	6878      	ldr	r0, [r7, #4]
 8012614:	f00c f816 	bl	801e644 <HAL_UART_RxCpltCallback>
}
 8012618:	e007      	b.n	801262a <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801261a:	687b      	ldr	r3, [r7, #4]
 801261c:	681b      	ldr	r3, [r3, #0]
 801261e:	699a      	ldr	r2, [r3, #24]
 8012620:	687b      	ldr	r3, [r7, #4]
 8012622:	681b      	ldr	r3, [r3, #0]
 8012624:	f042 0208 	orr.w	r2, r2, #8
 8012628:	619a      	str	r2, [r3, #24]
}
 801262a:	bf00      	nop
 801262c:	3770      	adds	r7, #112	@ 0x70
 801262e:	46bd      	mov	sp, r7
 8012630:	bd80      	pop	{r7, pc}
 8012632:	bf00      	nop
 8012634:	58000c00 	.word	0x58000c00

08012638 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8012638:	b580      	push	{r7, lr}
 801263a:	b0ac      	sub	sp, #176	@ 0xb0
 801263c:	af00      	add	r7, sp, #0
 801263e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8012640:	687b      	ldr	r3, [r7, #4]
 8012642:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8012646:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 801264a:	687b      	ldr	r3, [r7, #4]
 801264c:	681b      	ldr	r3, [r3, #0]
 801264e:	69db      	ldr	r3, [r3, #28]
 8012650:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8012654:	687b      	ldr	r3, [r7, #4]
 8012656:	681b      	ldr	r3, [r3, #0]
 8012658:	681b      	ldr	r3, [r3, #0]
 801265a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 801265e:	687b      	ldr	r3, [r7, #4]
 8012660:	681b      	ldr	r3, [r3, #0]
 8012662:	689b      	ldr	r3, [r3, #8]
 8012664:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8012668:	687b      	ldr	r3, [r7, #4]
 801266a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801266e:	2b22      	cmp	r3, #34	@ 0x22
 8012670:	f040 8181 	bne.w	8012976 <UART_RxISR_8BIT_FIFOEN+0x33e>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8012674:	687b      	ldr	r3, [r7, #4]
 8012676:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 801267a:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801267e:	e124      	b.n	80128ca <UART_RxISR_8BIT_FIFOEN+0x292>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8012680:	687b      	ldr	r3, [r7, #4]
 8012682:	681b      	ldr	r3, [r3, #0]
 8012684:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012686:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 801268a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 801268e:	b2d9      	uxtb	r1, r3
 8012690:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8012694:	b2da      	uxtb	r2, r3
 8012696:	687b      	ldr	r3, [r7, #4]
 8012698:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801269a:	400a      	ands	r2, r1
 801269c:	b2d2      	uxtb	r2, r2
 801269e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80126a0:	687b      	ldr	r3, [r7, #4]
 80126a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80126a4:	1c5a      	adds	r2, r3, #1
 80126a6:	687b      	ldr	r3, [r7, #4]
 80126a8:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80126aa:	687b      	ldr	r3, [r7, #4]
 80126ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80126b0:	b29b      	uxth	r3, r3
 80126b2:	3b01      	subs	r3, #1
 80126b4:	b29a      	uxth	r2, r3
 80126b6:	687b      	ldr	r3, [r7, #4]
 80126b8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80126bc:	687b      	ldr	r3, [r7, #4]
 80126be:	681b      	ldr	r3, [r3, #0]
 80126c0:	69db      	ldr	r3, [r3, #28]
 80126c2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80126c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80126ca:	f003 0307 	and.w	r3, r3, #7
 80126ce:	2b00      	cmp	r3, #0
 80126d0:	d053      	beq.n	801277a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80126d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80126d6:	f003 0301 	and.w	r3, r3, #1
 80126da:	2b00      	cmp	r3, #0
 80126dc:	d011      	beq.n	8012702 <UART_RxISR_8BIT_FIFOEN+0xca>
 80126de:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80126e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80126e6:	2b00      	cmp	r3, #0
 80126e8:	d00b      	beq.n	8012702 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80126ea:	687b      	ldr	r3, [r7, #4]
 80126ec:	681b      	ldr	r3, [r3, #0]
 80126ee:	2201      	movs	r2, #1
 80126f0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80126f2:	687b      	ldr	r3, [r7, #4]
 80126f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80126f8:	f043 0201 	orr.w	r2, r3, #1
 80126fc:	687b      	ldr	r3, [r7, #4]
 80126fe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8012702:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012706:	f003 0302 	and.w	r3, r3, #2
 801270a:	2b00      	cmp	r3, #0
 801270c:	d011      	beq.n	8012732 <UART_RxISR_8BIT_FIFOEN+0xfa>
 801270e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8012712:	f003 0301 	and.w	r3, r3, #1
 8012716:	2b00      	cmp	r3, #0
 8012718:	d00b      	beq.n	8012732 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801271a:	687b      	ldr	r3, [r7, #4]
 801271c:	681b      	ldr	r3, [r3, #0]
 801271e:	2202      	movs	r2, #2
 8012720:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8012722:	687b      	ldr	r3, [r7, #4]
 8012724:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012728:	f043 0204 	orr.w	r2, r3, #4
 801272c:	687b      	ldr	r3, [r7, #4]
 801272e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8012732:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012736:	f003 0304 	and.w	r3, r3, #4
 801273a:	2b00      	cmp	r3, #0
 801273c:	d011      	beq.n	8012762 <UART_RxISR_8BIT_FIFOEN+0x12a>
 801273e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8012742:	f003 0301 	and.w	r3, r3, #1
 8012746:	2b00      	cmp	r3, #0
 8012748:	d00b      	beq.n	8012762 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801274a:	687b      	ldr	r3, [r7, #4]
 801274c:	681b      	ldr	r3, [r3, #0]
 801274e:	2204      	movs	r2, #4
 8012750:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8012752:	687b      	ldr	r3, [r7, #4]
 8012754:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012758:	f043 0202 	orr.w	r2, r3, #2
 801275c:	687b      	ldr	r3, [r7, #4]
 801275e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8012762:	687b      	ldr	r3, [r7, #4]
 8012764:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012768:	2b00      	cmp	r3, #0
 801276a:	d006      	beq.n	801277a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801276c:	6878      	ldr	r0, [r7, #4]
 801276e:	f7fe f9ef 	bl	8010b50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012772:	687b      	ldr	r3, [r7, #4]
 8012774:	2200      	movs	r2, #0
 8012776:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 801277a:	687b      	ldr	r3, [r7, #4]
 801277c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8012780:	b29b      	uxth	r3, r3
 8012782:	2b00      	cmp	r3, #0
 8012784:	f040 80a1 	bne.w	80128ca <UART_RxISR_8BIT_FIFOEN+0x292>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8012788:	687b      	ldr	r3, [r7, #4]
 801278a:	681b      	ldr	r3, [r3, #0]
 801278c:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801278e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8012790:	e853 3f00 	ldrex	r3, [r3]
 8012794:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8012796:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012798:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801279c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80127a0:	687b      	ldr	r3, [r7, #4]
 80127a2:	681b      	ldr	r3, [r3, #0]
 80127a4:	461a      	mov	r2, r3
 80127a6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80127aa:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80127ac:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80127ae:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 80127b0:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80127b2:	e841 2300 	strex	r3, r2, [r1]
 80127b6:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 80127b8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80127ba:	2b00      	cmp	r3, #0
 80127bc:	d1e4      	bne.n	8012788 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80127be:	687b      	ldr	r3, [r7, #4]
 80127c0:	681b      	ldr	r3, [r3, #0]
 80127c2:	3308      	adds	r3, #8
 80127c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80127c6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80127c8:	e853 3f00 	ldrex	r3, [r3]
 80127cc:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 80127ce:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80127d0:	4b6f      	ldr	r3, [pc, #444]	@ (8012990 <UART_RxISR_8BIT_FIFOEN+0x358>)
 80127d2:	4013      	ands	r3, r2
 80127d4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80127d8:	687b      	ldr	r3, [r7, #4]
 80127da:	681b      	ldr	r3, [r3, #0]
 80127dc:	3308      	adds	r3, #8
 80127de:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80127e2:	66ba      	str	r2, [r7, #104]	@ 0x68
 80127e4:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80127e6:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 80127e8:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80127ea:	e841 2300 	strex	r3, r2, [r1]
 80127ee:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80127f0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80127f2:	2b00      	cmp	r3, #0
 80127f4:	d1e3      	bne.n	80127be <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80127f6:	687b      	ldr	r3, [r7, #4]
 80127f8:	2220      	movs	r2, #32
 80127fa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80127fe:	687b      	ldr	r3, [r7, #4]
 8012800:	2200      	movs	r2, #0
 8012802:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8012804:	687b      	ldr	r3, [r7, #4]
 8012806:	2200      	movs	r2, #0
 8012808:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801280a:	687b      	ldr	r3, [r7, #4]
 801280c:	681b      	ldr	r3, [r3, #0]
 801280e:	4a61      	ldr	r2, [pc, #388]	@ (8012994 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8012810:	4293      	cmp	r3, r2
 8012812:	d021      	beq.n	8012858 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8012814:	687b      	ldr	r3, [r7, #4]
 8012816:	681b      	ldr	r3, [r3, #0]
 8012818:	685b      	ldr	r3, [r3, #4]
 801281a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801281e:	2b00      	cmp	r3, #0
 8012820:	d01a      	beq.n	8012858 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8012822:	687b      	ldr	r3, [r7, #4]
 8012824:	681b      	ldr	r3, [r3, #0]
 8012826:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012828:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801282a:	e853 3f00 	ldrex	r3, [r3]
 801282e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8012830:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012832:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8012836:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 801283a:	687b      	ldr	r3, [r7, #4]
 801283c:	681b      	ldr	r3, [r3, #0]
 801283e:	461a      	mov	r2, r3
 8012840:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8012844:	657b      	str	r3, [r7, #84]	@ 0x54
 8012846:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012848:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801284a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801284c:	e841 2300 	strex	r3, r2, [r1]
 8012850:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8012852:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012854:	2b00      	cmp	r3, #0
 8012856:	d1e4      	bne.n	8012822 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012858:	687b      	ldr	r3, [r7, #4]
 801285a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801285c:	2b01      	cmp	r3, #1
 801285e:	d130      	bne.n	80128c2 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012860:	687b      	ldr	r3, [r7, #4]
 8012862:	2200      	movs	r2, #0
 8012864:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012866:	687b      	ldr	r3, [r7, #4]
 8012868:	681b      	ldr	r3, [r3, #0]
 801286a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801286c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801286e:	e853 3f00 	ldrex	r3, [r3]
 8012872:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8012874:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012876:	f023 0310 	bic.w	r3, r3, #16
 801287a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 801287e:	687b      	ldr	r3, [r7, #4]
 8012880:	681b      	ldr	r3, [r3, #0]
 8012882:	461a      	mov	r2, r3
 8012884:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8012888:	643b      	str	r3, [r7, #64]	@ 0x40
 801288a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801288c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801288e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8012890:	e841 2300 	strex	r3, r2, [r1]
 8012894:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8012896:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012898:	2b00      	cmp	r3, #0
 801289a:	d1e4      	bne.n	8012866 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801289c:	687b      	ldr	r3, [r7, #4]
 801289e:	681b      	ldr	r3, [r3, #0]
 80128a0:	69db      	ldr	r3, [r3, #28]
 80128a2:	f003 0310 	and.w	r3, r3, #16
 80128a6:	2b10      	cmp	r3, #16
 80128a8:	d103      	bne.n	80128b2 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80128aa:	687b      	ldr	r3, [r7, #4]
 80128ac:	681b      	ldr	r3, [r3, #0]
 80128ae:	2210      	movs	r2, #16
 80128b0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80128b2:	687b      	ldr	r3, [r7, #4]
 80128b4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80128b8:	4619      	mov	r1, r3
 80128ba:	6878      	ldr	r0, [r7, #4]
 80128bc:	f7fe f952 	bl	8010b64 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 80128c0:	e00e      	b.n	80128e0 <UART_RxISR_8BIT_FIFOEN+0x2a8>
          HAL_UART_RxCpltCallback(huart);
 80128c2:	6878      	ldr	r0, [r7, #4]
 80128c4:	f00b febe 	bl	801e644 <HAL_UART_RxCpltCallback>
        break;
 80128c8:	e00a      	b.n	80128e0 <UART_RxISR_8BIT_FIFOEN+0x2a8>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80128ca:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 80128ce:	2b00      	cmp	r3, #0
 80128d0:	d006      	beq.n	80128e0 <UART_RxISR_8BIT_FIFOEN+0x2a8>
 80128d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80128d6:	f003 0320 	and.w	r3, r3, #32
 80128da:	2b00      	cmp	r3, #0
 80128dc:	f47f aed0 	bne.w	8012680 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80128e0:	687b      	ldr	r3, [r7, #4]
 80128e2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80128e6:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80128ea:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80128ee:	2b00      	cmp	r3, #0
 80128f0:	d049      	beq.n	8012986 <UART_RxISR_8BIT_FIFOEN+0x34e>
 80128f2:	687b      	ldr	r3, [r7, #4]
 80128f4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80128f8:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 80128fc:	429a      	cmp	r2, r3
 80128fe:	d242      	bcs.n	8012986 <UART_RxISR_8BIT_FIFOEN+0x34e>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8012900:	687b      	ldr	r3, [r7, #4]
 8012902:	681b      	ldr	r3, [r3, #0]
 8012904:	3308      	adds	r3, #8
 8012906:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012908:	6a3b      	ldr	r3, [r7, #32]
 801290a:	e853 3f00 	ldrex	r3, [r3]
 801290e:	61fb      	str	r3, [r7, #28]
   return(result);
 8012910:	69fb      	ldr	r3, [r7, #28]
 8012912:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8012916:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 801291a:	687b      	ldr	r3, [r7, #4]
 801291c:	681b      	ldr	r3, [r3, #0]
 801291e:	3308      	adds	r3, #8
 8012920:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8012924:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8012926:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012928:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801292a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801292c:	e841 2300 	strex	r3, r2, [r1]
 8012930:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8012932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012934:	2b00      	cmp	r3, #0
 8012936:	d1e3      	bne.n	8012900 <UART_RxISR_8BIT_FIFOEN+0x2c8>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8012938:	687b      	ldr	r3, [r7, #4]
 801293a:	4a17      	ldr	r2, [pc, #92]	@ (8012998 <UART_RxISR_8BIT_FIFOEN+0x360>)
 801293c:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 801293e:	687b      	ldr	r3, [r7, #4]
 8012940:	681b      	ldr	r3, [r3, #0]
 8012942:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012944:	68fb      	ldr	r3, [r7, #12]
 8012946:	e853 3f00 	ldrex	r3, [r3]
 801294a:	60bb      	str	r3, [r7, #8]
   return(result);
 801294c:	68bb      	ldr	r3, [r7, #8]
 801294e:	f043 0320 	orr.w	r3, r3, #32
 8012952:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8012956:	687b      	ldr	r3, [r7, #4]
 8012958:	681b      	ldr	r3, [r3, #0]
 801295a:	461a      	mov	r2, r3
 801295c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8012960:	61bb      	str	r3, [r7, #24]
 8012962:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012964:	6979      	ldr	r1, [r7, #20]
 8012966:	69ba      	ldr	r2, [r7, #24]
 8012968:	e841 2300 	strex	r3, r2, [r1]
 801296c:	613b      	str	r3, [r7, #16]
   return(result);
 801296e:	693b      	ldr	r3, [r7, #16]
 8012970:	2b00      	cmp	r3, #0
 8012972:	d1e4      	bne.n	801293e <UART_RxISR_8BIT_FIFOEN+0x306>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8012974:	e007      	b.n	8012986 <UART_RxISR_8BIT_FIFOEN+0x34e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8012976:	687b      	ldr	r3, [r7, #4]
 8012978:	681b      	ldr	r3, [r3, #0]
 801297a:	699a      	ldr	r2, [r3, #24]
 801297c:	687b      	ldr	r3, [r7, #4]
 801297e:	681b      	ldr	r3, [r3, #0]
 8012980:	f042 0208 	orr.w	r2, r2, #8
 8012984:	619a      	str	r2, [r3, #24]
}
 8012986:	bf00      	nop
 8012988:	37b0      	adds	r7, #176	@ 0xb0
 801298a:	46bd      	mov	sp, r7
 801298c:	bd80      	pop	{r7, pc}
 801298e:	bf00      	nop
 8012990:	effffffe 	.word	0xeffffffe
 8012994:	58000c00 	.word	0x58000c00
 8012998:	080122c9 	.word	0x080122c9

0801299c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 801299c:	b580      	push	{r7, lr}
 801299e:	b0ae      	sub	sp, #184	@ 0xb8
 80129a0:	af00      	add	r7, sp, #0
 80129a2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80129a4:	687b      	ldr	r3, [r7, #4]
 80129a6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80129aa:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80129ae:	687b      	ldr	r3, [r7, #4]
 80129b0:	681b      	ldr	r3, [r3, #0]
 80129b2:	69db      	ldr	r3, [r3, #28]
 80129b4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80129b8:	687b      	ldr	r3, [r7, #4]
 80129ba:	681b      	ldr	r3, [r3, #0]
 80129bc:	681b      	ldr	r3, [r3, #0]
 80129be:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80129c2:	687b      	ldr	r3, [r7, #4]
 80129c4:	681b      	ldr	r3, [r3, #0]
 80129c6:	689b      	ldr	r3, [r3, #8]
 80129c8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80129cc:	687b      	ldr	r3, [r7, #4]
 80129ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80129d2:	2b22      	cmp	r3, #34	@ 0x22
 80129d4:	f040 8185 	bne.w	8012ce2 <UART_RxISR_16BIT_FIFOEN+0x346>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80129d8:	687b      	ldr	r3, [r7, #4]
 80129da:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80129de:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80129e2:	e128      	b.n	8012c36 <UART_RxISR_16BIT_FIFOEN+0x29a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80129e4:	687b      	ldr	r3, [r7, #4]
 80129e6:	681b      	ldr	r3, [r3, #0]
 80129e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80129ea:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80129ee:	687b      	ldr	r3, [r7, #4]
 80129f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80129f2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 80129f6:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 80129fa:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 80129fe:	4013      	ands	r3, r2
 8012a00:	b29a      	uxth	r2, r3
 8012a02:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8012a06:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8012a08:	687b      	ldr	r3, [r7, #4]
 8012a0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012a0c:	1c9a      	adds	r2, r3, #2
 8012a0e:	687b      	ldr	r3, [r7, #4]
 8012a10:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8012a12:	687b      	ldr	r3, [r7, #4]
 8012a14:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8012a18:	b29b      	uxth	r3, r3
 8012a1a:	3b01      	subs	r3, #1
 8012a1c:	b29a      	uxth	r2, r3
 8012a1e:	687b      	ldr	r3, [r7, #4]
 8012a20:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8012a24:	687b      	ldr	r3, [r7, #4]
 8012a26:	681b      	ldr	r3, [r3, #0]
 8012a28:	69db      	ldr	r3, [r3, #28]
 8012a2a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8012a2e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8012a32:	f003 0307 	and.w	r3, r3, #7
 8012a36:	2b00      	cmp	r3, #0
 8012a38:	d053      	beq.n	8012ae2 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8012a3a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8012a3e:	f003 0301 	and.w	r3, r3, #1
 8012a42:	2b00      	cmp	r3, #0
 8012a44:	d011      	beq.n	8012a6a <UART_RxISR_16BIT_FIFOEN+0xce>
 8012a46:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012a4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8012a4e:	2b00      	cmp	r3, #0
 8012a50:	d00b      	beq.n	8012a6a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8012a52:	687b      	ldr	r3, [r7, #4]
 8012a54:	681b      	ldr	r3, [r3, #0]
 8012a56:	2201      	movs	r2, #1
 8012a58:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8012a5a:	687b      	ldr	r3, [r7, #4]
 8012a5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012a60:	f043 0201 	orr.w	r2, r3, #1
 8012a64:	687b      	ldr	r3, [r7, #4]
 8012a66:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8012a6a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8012a6e:	f003 0302 	and.w	r3, r3, #2
 8012a72:	2b00      	cmp	r3, #0
 8012a74:	d011      	beq.n	8012a9a <UART_RxISR_16BIT_FIFOEN+0xfe>
 8012a76:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8012a7a:	f003 0301 	and.w	r3, r3, #1
 8012a7e:	2b00      	cmp	r3, #0
 8012a80:	d00b      	beq.n	8012a9a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8012a82:	687b      	ldr	r3, [r7, #4]
 8012a84:	681b      	ldr	r3, [r3, #0]
 8012a86:	2202      	movs	r2, #2
 8012a88:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8012a8a:	687b      	ldr	r3, [r7, #4]
 8012a8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012a90:	f043 0204 	orr.w	r2, r3, #4
 8012a94:	687b      	ldr	r3, [r7, #4]
 8012a96:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8012a9a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8012a9e:	f003 0304 	and.w	r3, r3, #4
 8012aa2:	2b00      	cmp	r3, #0
 8012aa4:	d011      	beq.n	8012aca <UART_RxISR_16BIT_FIFOEN+0x12e>
 8012aa6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8012aaa:	f003 0301 	and.w	r3, r3, #1
 8012aae:	2b00      	cmp	r3, #0
 8012ab0:	d00b      	beq.n	8012aca <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8012ab2:	687b      	ldr	r3, [r7, #4]
 8012ab4:	681b      	ldr	r3, [r3, #0]
 8012ab6:	2204      	movs	r2, #4
 8012ab8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8012aba:	687b      	ldr	r3, [r7, #4]
 8012abc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012ac0:	f043 0202 	orr.w	r2, r3, #2
 8012ac4:	687b      	ldr	r3, [r7, #4]
 8012ac6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8012aca:	687b      	ldr	r3, [r7, #4]
 8012acc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012ad0:	2b00      	cmp	r3, #0
 8012ad2:	d006      	beq.n	8012ae2 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8012ad4:	6878      	ldr	r0, [r7, #4]
 8012ad6:	f7fe f83b 	bl	8010b50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012ada:	687b      	ldr	r3, [r7, #4]
 8012adc:	2200      	movs	r2, #0
 8012ade:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8012ae2:	687b      	ldr	r3, [r7, #4]
 8012ae4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8012ae8:	b29b      	uxth	r3, r3
 8012aea:	2b00      	cmp	r3, #0
 8012aec:	f040 80a3 	bne.w	8012c36 <UART_RxISR_16BIT_FIFOEN+0x29a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8012af0:	687b      	ldr	r3, [r7, #4]
 8012af2:	681b      	ldr	r3, [r3, #0]
 8012af4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012af6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8012af8:	e853 3f00 	ldrex	r3, [r3]
 8012afc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8012afe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8012b00:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8012b04:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8012b08:	687b      	ldr	r3, [r7, #4]
 8012b0a:	681b      	ldr	r3, [r3, #0]
 8012b0c:	461a      	mov	r2, r3
 8012b0e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8012b12:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8012b16:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012b18:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8012b1a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8012b1e:	e841 2300 	strex	r3, r2, [r1]
 8012b22:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8012b24:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8012b26:	2b00      	cmp	r3, #0
 8012b28:	d1e2      	bne.n	8012af0 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8012b2a:	687b      	ldr	r3, [r7, #4]
 8012b2c:	681b      	ldr	r3, [r3, #0]
 8012b2e:	3308      	adds	r3, #8
 8012b30:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012b32:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8012b34:	e853 3f00 	ldrex	r3, [r3]
 8012b38:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8012b3a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8012b3c:	4b6f      	ldr	r3, [pc, #444]	@ (8012cfc <UART_RxISR_16BIT_FIFOEN+0x360>)
 8012b3e:	4013      	ands	r3, r2
 8012b40:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8012b44:	687b      	ldr	r3, [r7, #4]
 8012b46:	681b      	ldr	r3, [r3, #0]
 8012b48:	3308      	adds	r3, #8
 8012b4a:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8012b4e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8012b50:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012b52:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8012b54:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8012b56:	e841 2300 	strex	r3, r2, [r1]
 8012b5a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8012b5c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8012b5e:	2b00      	cmp	r3, #0
 8012b60:	d1e3      	bne.n	8012b2a <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8012b62:	687b      	ldr	r3, [r7, #4]
 8012b64:	2220      	movs	r2, #32
 8012b66:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8012b6a:	687b      	ldr	r3, [r7, #4]
 8012b6c:	2200      	movs	r2, #0
 8012b6e:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8012b70:	687b      	ldr	r3, [r7, #4]
 8012b72:	2200      	movs	r2, #0
 8012b74:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8012b76:	687b      	ldr	r3, [r7, #4]
 8012b78:	681b      	ldr	r3, [r3, #0]
 8012b7a:	4a61      	ldr	r2, [pc, #388]	@ (8012d00 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8012b7c:	4293      	cmp	r3, r2
 8012b7e:	d021      	beq.n	8012bc4 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8012b80:	687b      	ldr	r3, [r7, #4]
 8012b82:	681b      	ldr	r3, [r3, #0]
 8012b84:	685b      	ldr	r3, [r3, #4]
 8012b86:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8012b8a:	2b00      	cmp	r3, #0
 8012b8c:	d01a      	beq.n	8012bc4 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8012b8e:	687b      	ldr	r3, [r7, #4]
 8012b90:	681b      	ldr	r3, [r3, #0]
 8012b92:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012b94:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012b96:	e853 3f00 	ldrex	r3, [r3]
 8012b9a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8012b9c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8012b9e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8012ba2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8012ba6:	687b      	ldr	r3, [r7, #4]
 8012ba8:	681b      	ldr	r3, [r3, #0]
 8012baa:	461a      	mov	r2, r3
 8012bac:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8012bb0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8012bb2:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012bb4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8012bb6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8012bb8:	e841 2300 	strex	r3, r2, [r1]
 8012bbc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8012bbe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012bc0:	2b00      	cmp	r3, #0
 8012bc2:	d1e4      	bne.n	8012b8e <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012bc4:	687b      	ldr	r3, [r7, #4]
 8012bc6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012bc8:	2b01      	cmp	r3, #1
 8012bca:	d130      	bne.n	8012c2e <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012bcc:	687b      	ldr	r3, [r7, #4]
 8012bce:	2200      	movs	r2, #0
 8012bd0:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012bd2:	687b      	ldr	r3, [r7, #4]
 8012bd4:	681b      	ldr	r3, [r3, #0]
 8012bd6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012bd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012bda:	e853 3f00 	ldrex	r3, [r3]
 8012bde:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8012be0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012be2:	f023 0310 	bic.w	r3, r3, #16
 8012be6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8012bea:	687b      	ldr	r3, [r7, #4]
 8012bec:	681b      	ldr	r3, [r3, #0]
 8012bee:	461a      	mov	r2, r3
 8012bf0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8012bf4:	647b      	str	r3, [r7, #68]	@ 0x44
 8012bf6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012bf8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8012bfa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8012bfc:	e841 2300 	strex	r3, r2, [r1]
 8012c00:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8012c02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012c04:	2b00      	cmp	r3, #0
 8012c06:	d1e4      	bne.n	8012bd2 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8012c08:	687b      	ldr	r3, [r7, #4]
 8012c0a:	681b      	ldr	r3, [r3, #0]
 8012c0c:	69db      	ldr	r3, [r3, #28]
 8012c0e:	f003 0310 	and.w	r3, r3, #16
 8012c12:	2b10      	cmp	r3, #16
 8012c14:	d103      	bne.n	8012c1e <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8012c16:	687b      	ldr	r3, [r7, #4]
 8012c18:	681b      	ldr	r3, [r3, #0]
 8012c1a:	2210      	movs	r2, #16
 8012c1c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8012c1e:	687b      	ldr	r3, [r7, #4]
 8012c20:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8012c24:	4619      	mov	r1, r3
 8012c26:	6878      	ldr	r0, [r7, #4]
 8012c28:	f7fd ff9c 	bl	8010b64 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8012c2c:	e00e      	b.n	8012c4c <UART_RxISR_16BIT_FIFOEN+0x2b0>
          HAL_UART_RxCpltCallback(huart);
 8012c2e:	6878      	ldr	r0, [r7, #4]
 8012c30:	f00b fd08 	bl	801e644 <HAL_UART_RxCpltCallback>
        break;
 8012c34:	e00a      	b.n	8012c4c <UART_RxISR_16BIT_FIFOEN+0x2b0>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8012c36:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8012c3a:	2b00      	cmp	r3, #0
 8012c3c:	d006      	beq.n	8012c4c <UART_RxISR_16BIT_FIFOEN+0x2b0>
 8012c3e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8012c42:	f003 0320 	and.w	r3, r3, #32
 8012c46:	2b00      	cmp	r3, #0
 8012c48:	f47f aecc 	bne.w	80129e4 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8012c4c:	687b      	ldr	r3, [r7, #4]
 8012c4e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8012c52:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8012c56:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8012c5a:	2b00      	cmp	r3, #0
 8012c5c:	d049      	beq.n	8012cf2 <UART_RxISR_16BIT_FIFOEN+0x356>
 8012c5e:	687b      	ldr	r3, [r7, #4]
 8012c60:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8012c64:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8012c68:	429a      	cmp	r2, r3
 8012c6a:	d242      	bcs.n	8012cf2 <UART_RxISR_16BIT_FIFOEN+0x356>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8012c6c:	687b      	ldr	r3, [r7, #4]
 8012c6e:	681b      	ldr	r3, [r3, #0]
 8012c70:	3308      	adds	r3, #8
 8012c72:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012c74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012c76:	e853 3f00 	ldrex	r3, [r3]
 8012c7a:	623b      	str	r3, [r7, #32]
   return(result);
 8012c7c:	6a3b      	ldr	r3, [r7, #32]
 8012c7e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8012c82:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8012c86:	687b      	ldr	r3, [r7, #4]
 8012c88:	681b      	ldr	r3, [r3, #0]
 8012c8a:	3308      	adds	r3, #8
 8012c8c:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8012c90:	633a      	str	r2, [r7, #48]	@ 0x30
 8012c92:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012c94:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8012c96:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012c98:	e841 2300 	strex	r3, r2, [r1]
 8012c9c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8012c9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012ca0:	2b00      	cmp	r3, #0
 8012ca2:	d1e3      	bne.n	8012c6c <UART_RxISR_16BIT_FIFOEN+0x2d0>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8012ca4:	687b      	ldr	r3, [r7, #4]
 8012ca6:	4a17      	ldr	r2, [pc, #92]	@ (8012d04 <UART_RxISR_16BIT_FIFOEN+0x368>)
 8012ca8:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8012caa:	687b      	ldr	r3, [r7, #4]
 8012cac:	681b      	ldr	r3, [r3, #0]
 8012cae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012cb0:	693b      	ldr	r3, [r7, #16]
 8012cb2:	e853 3f00 	ldrex	r3, [r3]
 8012cb6:	60fb      	str	r3, [r7, #12]
   return(result);
 8012cb8:	68fb      	ldr	r3, [r7, #12]
 8012cba:	f043 0320 	orr.w	r3, r3, #32
 8012cbe:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8012cc2:	687b      	ldr	r3, [r7, #4]
 8012cc4:	681b      	ldr	r3, [r3, #0]
 8012cc6:	461a      	mov	r2, r3
 8012cc8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8012ccc:	61fb      	str	r3, [r7, #28]
 8012cce:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012cd0:	69b9      	ldr	r1, [r7, #24]
 8012cd2:	69fa      	ldr	r2, [r7, #28]
 8012cd4:	e841 2300 	strex	r3, r2, [r1]
 8012cd8:	617b      	str	r3, [r7, #20]
   return(result);
 8012cda:	697b      	ldr	r3, [r7, #20]
 8012cdc:	2b00      	cmp	r3, #0
 8012cde:	d1e4      	bne.n	8012caa <UART_RxISR_16BIT_FIFOEN+0x30e>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8012ce0:	e007      	b.n	8012cf2 <UART_RxISR_16BIT_FIFOEN+0x356>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8012ce2:	687b      	ldr	r3, [r7, #4]
 8012ce4:	681b      	ldr	r3, [r3, #0]
 8012ce6:	699a      	ldr	r2, [r3, #24]
 8012ce8:	687b      	ldr	r3, [r7, #4]
 8012cea:	681b      	ldr	r3, [r3, #0]
 8012cec:	f042 0208 	orr.w	r2, r2, #8
 8012cf0:	619a      	str	r2, [r3, #24]
}
 8012cf2:	bf00      	nop
 8012cf4:	37b8      	adds	r7, #184	@ 0xb8
 8012cf6:	46bd      	mov	sp, r7
 8012cf8:	bd80      	pop	{r7, pc}
 8012cfa:	bf00      	nop
 8012cfc:	effffffe 	.word	0xeffffffe
 8012d00:	58000c00 	.word	0x58000c00
 8012d04:	08012481 	.word	0x08012481

08012d08 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8012d08:	b480      	push	{r7}
 8012d0a:	b083      	sub	sp, #12
 8012d0c:	af00      	add	r7, sp, #0
 8012d0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8012d10:	bf00      	nop
 8012d12:	370c      	adds	r7, #12
 8012d14:	46bd      	mov	sp, r7
 8012d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d1a:	4770      	bx	lr

08012d1c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8012d1c:	b480      	push	{r7}
 8012d1e:	b083      	sub	sp, #12
 8012d20:	af00      	add	r7, sp, #0
 8012d22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8012d24:	bf00      	nop
 8012d26:	370c      	adds	r7, #12
 8012d28:	46bd      	mov	sp, r7
 8012d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d2e:	4770      	bx	lr

08012d30 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8012d30:	b480      	push	{r7}
 8012d32:	b083      	sub	sp, #12
 8012d34:	af00      	add	r7, sp, #0
 8012d36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8012d38:	bf00      	nop
 8012d3a:	370c      	adds	r7, #12
 8012d3c:	46bd      	mov	sp, r7
 8012d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d42:	4770      	bx	lr

08012d44 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8012d44:	b580      	push	{r7, lr}
 8012d46:	b084      	sub	sp, #16
 8012d48:	af00      	add	r7, sp, #0
 8012d4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1;

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
 8012d4c:	687b      	ldr	r3, [r7, #4]
 8012d4e:	681b      	ldr	r3, [r3, #0]
 8012d50:	4a36      	ldr	r2, [pc, #216]	@ (8012e2c <HAL_UARTEx_DisableFifoMode+0xe8>)
 8012d52:	4293      	cmp	r3, r2
 8012d54:	d036      	beq.n	8012dc4 <HAL_UARTEx_DisableFifoMode+0x80>
 8012d56:	687b      	ldr	r3, [r7, #4]
 8012d58:	681b      	ldr	r3, [r3, #0]
 8012d5a:	4a35      	ldr	r2, [pc, #212]	@ (8012e30 <HAL_UARTEx_DisableFifoMode+0xec>)
 8012d5c:	4293      	cmp	r3, r2
 8012d5e:	d031      	beq.n	8012dc4 <HAL_UARTEx_DisableFifoMode+0x80>
 8012d60:	687b      	ldr	r3, [r7, #4]
 8012d62:	681b      	ldr	r3, [r3, #0]
 8012d64:	4a33      	ldr	r2, [pc, #204]	@ (8012e34 <HAL_UARTEx_DisableFifoMode+0xf0>)
 8012d66:	4293      	cmp	r3, r2
 8012d68:	d02c      	beq.n	8012dc4 <HAL_UARTEx_DisableFifoMode+0x80>
 8012d6a:	687b      	ldr	r3, [r7, #4]
 8012d6c:	681b      	ldr	r3, [r3, #0]
 8012d6e:	4a32      	ldr	r2, [pc, #200]	@ (8012e38 <HAL_UARTEx_DisableFifoMode+0xf4>)
 8012d70:	4293      	cmp	r3, r2
 8012d72:	d027      	beq.n	8012dc4 <HAL_UARTEx_DisableFifoMode+0x80>
 8012d74:	687b      	ldr	r3, [r7, #4]
 8012d76:	681b      	ldr	r3, [r3, #0]
 8012d78:	4a30      	ldr	r2, [pc, #192]	@ (8012e3c <HAL_UARTEx_DisableFifoMode+0xf8>)
 8012d7a:	4293      	cmp	r3, r2
 8012d7c:	d022      	beq.n	8012dc4 <HAL_UARTEx_DisableFifoMode+0x80>
 8012d7e:	687b      	ldr	r3, [r7, #4]
 8012d80:	681b      	ldr	r3, [r3, #0]
 8012d82:	4a2f      	ldr	r2, [pc, #188]	@ (8012e40 <HAL_UARTEx_DisableFifoMode+0xfc>)
 8012d84:	4293      	cmp	r3, r2
 8012d86:	d01d      	beq.n	8012dc4 <HAL_UARTEx_DisableFifoMode+0x80>
 8012d88:	687b      	ldr	r3, [r7, #4]
 8012d8a:	681b      	ldr	r3, [r3, #0]
 8012d8c:	4a2d      	ldr	r2, [pc, #180]	@ (8012e44 <HAL_UARTEx_DisableFifoMode+0x100>)
 8012d8e:	4293      	cmp	r3, r2
 8012d90:	d018      	beq.n	8012dc4 <HAL_UARTEx_DisableFifoMode+0x80>
 8012d92:	687b      	ldr	r3, [r7, #4]
 8012d94:	681b      	ldr	r3, [r3, #0]
 8012d96:	4a2c      	ldr	r2, [pc, #176]	@ (8012e48 <HAL_UARTEx_DisableFifoMode+0x104>)
 8012d98:	4293      	cmp	r3, r2
 8012d9a:	d013      	beq.n	8012dc4 <HAL_UARTEx_DisableFifoMode+0x80>
 8012d9c:	687b      	ldr	r3, [r7, #4]
 8012d9e:	681b      	ldr	r3, [r3, #0]
 8012da0:	4a2a      	ldr	r2, [pc, #168]	@ (8012e4c <HAL_UARTEx_DisableFifoMode+0x108>)
 8012da2:	4293      	cmp	r3, r2
 8012da4:	d00e      	beq.n	8012dc4 <HAL_UARTEx_DisableFifoMode+0x80>
 8012da6:	687b      	ldr	r3, [r7, #4]
 8012da8:	681b      	ldr	r3, [r3, #0]
 8012daa:	4a29      	ldr	r2, [pc, #164]	@ (8012e50 <HAL_UARTEx_DisableFifoMode+0x10c>)
 8012dac:	4293      	cmp	r3, r2
 8012dae:	d009      	beq.n	8012dc4 <HAL_UARTEx_DisableFifoMode+0x80>
 8012db0:	687b      	ldr	r3, [r7, #4]
 8012db2:	681b      	ldr	r3, [r3, #0]
 8012db4:	4a27      	ldr	r2, [pc, #156]	@ (8012e54 <HAL_UARTEx_DisableFifoMode+0x110>)
 8012db6:	4293      	cmp	r3, r2
 8012db8:	d004      	beq.n	8012dc4 <HAL_UARTEx_DisableFifoMode+0x80>
 8012dba:	f240 2136 	movw	r1, #566	@ 0x236
 8012dbe:	4826      	ldr	r0, [pc, #152]	@ (8012e58 <HAL_UARTEx_DisableFifoMode+0x114>)
 8012dc0:	f7ef fb00 	bl	80023c4 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(huart);
 8012dc4:	687b      	ldr	r3, [r7, #4]
 8012dc6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8012dca:	2b01      	cmp	r3, #1
 8012dcc:	d101      	bne.n	8012dd2 <HAL_UARTEx_DisableFifoMode+0x8e>
 8012dce:	2302      	movs	r3, #2
 8012dd0:	e027      	b.n	8012e22 <HAL_UARTEx_DisableFifoMode+0xde>
 8012dd2:	687b      	ldr	r3, [r7, #4]
 8012dd4:	2201      	movs	r2, #1
 8012dd6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012dda:	687b      	ldr	r3, [r7, #4]
 8012ddc:	2224      	movs	r2, #36	@ 0x24
 8012dde:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012de2:	687b      	ldr	r3, [r7, #4]
 8012de4:	681b      	ldr	r3, [r3, #0]
 8012de6:	681b      	ldr	r3, [r3, #0]
 8012de8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012dea:	687b      	ldr	r3, [r7, #4]
 8012dec:	681b      	ldr	r3, [r3, #0]
 8012dee:	681a      	ldr	r2, [r3, #0]
 8012df0:	687b      	ldr	r3, [r7, #4]
 8012df2:	681b      	ldr	r3, [r3, #0]
 8012df4:	f022 0201 	bic.w	r2, r2, #1
 8012df8:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8012dfa:	68fb      	ldr	r3, [r7, #12]
 8012dfc:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8012e00:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8012e02:	687b      	ldr	r3, [r7, #4]
 8012e04:	2200      	movs	r2, #0
 8012e06:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012e08:	687b      	ldr	r3, [r7, #4]
 8012e0a:	681b      	ldr	r3, [r3, #0]
 8012e0c:	68fa      	ldr	r2, [r7, #12]
 8012e0e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012e10:	687b      	ldr	r3, [r7, #4]
 8012e12:	2220      	movs	r2, #32
 8012e14:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012e18:	687b      	ldr	r3, [r7, #4]
 8012e1a:	2200      	movs	r2, #0
 8012e1c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8012e20:	2300      	movs	r3, #0
}
 8012e22:	4618      	mov	r0, r3
 8012e24:	3710      	adds	r7, #16
 8012e26:	46bd      	mov	sp, r7
 8012e28:	bd80      	pop	{r7, pc}
 8012e2a:	bf00      	nop
 8012e2c:	40011000 	.word	0x40011000
 8012e30:	40004400 	.word	0x40004400
 8012e34:	40004800 	.word	0x40004800
 8012e38:	40004c00 	.word	0x40004c00
 8012e3c:	40005000 	.word	0x40005000
 8012e40:	40011400 	.word	0x40011400
 8012e44:	40007800 	.word	0x40007800
 8012e48:	40007c00 	.word	0x40007c00
 8012e4c:	40011800 	.word	0x40011800
 8012e50:	40011c00 	.word	0x40011c00
 8012e54:	58000c00 	.word	0x58000c00
 8012e58:	08021784 	.word	0x08021784

08012e5c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8012e5c:	b580      	push	{r7, lr}
 8012e5e:	b084      	sub	sp, #16
 8012e60:	af00      	add	r7, sp, #0
 8012e62:	6078      	str	r0, [r7, #4]
 8012e64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
 8012e66:	687b      	ldr	r3, [r7, #4]
 8012e68:	681b      	ldr	r3, [r3, #0]
 8012e6a:	4a47      	ldr	r2, [pc, #284]	@ (8012f88 <HAL_UARTEx_SetTxFifoThreshold+0x12c>)
 8012e6c:	4293      	cmp	r3, r2
 8012e6e:	d036      	beq.n	8012ede <HAL_UARTEx_SetTxFifoThreshold+0x82>
 8012e70:	687b      	ldr	r3, [r7, #4]
 8012e72:	681b      	ldr	r3, [r3, #0]
 8012e74:	4a45      	ldr	r2, [pc, #276]	@ (8012f8c <HAL_UARTEx_SetTxFifoThreshold+0x130>)
 8012e76:	4293      	cmp	r3, r2
 8012e78:	d031      	beq.n	8012ede <HAL_UARTEx_SetTxFifoThreshold+0x82>
 8012e7a:	687b      	ldr	r3, [r7, #4]
 8012e7c:	681b      	ldr	r3, [r3, #0]
 8012e7e:	4a44      	ldr	r2, [pc, #272]	@ (8012f90 <HAL_UARTEx_SetTxFifoThreshold+0x134>)
 8012e80:	4293      	cmp	r3, r2
 8012e82:	d02c      	beq.n	8012ede <HAL_UARTEx_SetTxFifoThreshold+0x82>
 8012e84:	687b      	ldr	r3, [r7, #4]
 8012e86:	681b      	ldr	r3, [r3, #0]
 8012e88:	4a42      	ldr	r2, [pc, #264]	@ (8012f94 <HAL_UARTEx_SetTxFifoThreshold+0x138>)
 8012e8a:	4293      	cmp	r3, r2
 8012e8c:	d027      	beq.n	8012ede <HAL_UARTEx_SetTxFifoThreshold+0x82>
 8012e8e:	687b      	ldr	r3, [r7, #4]
 8012e90:	681b      	ldr	r3, [r3, #0]
 8012e92:	4a41      	ldr	r2, [pc, #260]	@ (8012f98 <HAL_UARTEx_SetTxFifoThreshold+0x13c>)
 8012e94:	4293      	cmp	r3, r2
 8012e96:	d022      	beq.n	8012ede <HAL_UARTEx_SetTxFifoThreshold+0x82>
 8012e98:	687b      	ldr	r3, [r7, #4]
 8012e9a:	681b      	ldr	r3, [r3, #0]
 8012e9c:	4a3f      	ldr	r2, [pc, #252]	@ (8012f9c <HAL_UARTEx_SetTxFifoThreshold+0x140>)
 8012e9e:	4293      	cmp	r3, r2
 8012ea0:	d01d      	beq.n	8012ede <HAL_UARTEx_SetTxFifoThreshold+0x82>
 8012ea2:	687b      	ldr	r3, [r7, #4]
 8012ea4:	681b      	ldr	r3, [r3, #0]
 8012ea6:	4a3e      	ldr	r2, [pc, #248]	@ (8012fa0 <HAL_UARTEx_SetTxFifoThreshold+0x144>)
 8012ea8:	4293      	cmp	r3, r2
 8012eaa:	d018      	beq.n	8012ede <HAL_UARTEx_SetTxFifoThreshold+0x82>
 8012eac:	687b      	ldr	r3, [r7, #4]
 8012eae:	681b      	ldr	r3, [r3, #0]
 8012eb0:	4a3c      	ldr	r2, [pc, #240]	@ (8012fa4 <HAL_UARTEx_SetTxFifoThreshold+0x148>)
 8012eb2:	4293      	cmp	r3, r2
 8012eb4:	d013      	beq.n	8012ede <HAL_UARTEx_SetTxFifoThreshold+0x82>
 8012eb6:	687b      	ldr	r3, [r7, #4]
 8012eb8:	681b      	ldr	r3, [r3, #0]
 8012eba:	4a3b      	ldr	r2, [pc, #236]	@ (8012fa8 <HAL_UARTEx_SetTxFifoThreshold+0x14c>)
 8012ebc:	4293      	cmp	r3, r2
 8012ebe:	d00e      	beq.n	8012ede <HAL_UARTEx_SetTxFifoThreshold+0x82>
 8012ec0:	687b      	ldr	r3, [r7, #4]
 8012ec2:	681b      	ldr	r3, [r3, #0]
 8012ec4:	4a39      	ldr	r2, [pc, #228]	@ (8012fac <HAL_UARTEx_SetTxFifoThreshold+0x150>)
 8012ec6:	4293      	cmp	r3, r2
 8012ec8:	d009      	beq.n	8012ede <HAL_UARTEx_SetTxFifoThreshold+0x82>
 8012eca:	687b      	ldr	r3, [r7, #4]
 8012ecc:	681b      	ldr	r3, [r3, #0]
 8012ece:	4a38      	ldr	r2, [pc, #224]	@ (8012fb0 <HAL_UARTEx_SetTxFifoThreshold+0x154>)
 8012ed0:	4293      	cmp	r3, r2
 8012ed2:	d004      	beq.n	8012ede <HAL_UARTEx_SetTxFifoThreshold+0x82>
 8012ed4:	f44f 7119 	mov.w	r1, #612	@ 0x264
 8012ed8:	4836      	ldr	r0, [pc, #216]	@ (8012fb4 <HAL_UARTEx_SetTxFifoThreshold+0x158>)
 8012eda:	f7ef fa73 	bl	80023c4 <assert_failed>
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));
 8012ede:	683b      	ldr	r3, [r7, #0]
 8012ee0:	2b00      	cmp	r3, #0
 8012ee2:	d018      	beq.n	8012f16 <HAL_UARTEx_SetTxFifoThreshold+0xba>
 8012ee4:	683b      	ldr	r3, [r7, #0]
 8012ee6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8012eea:	d014      	beq.n	8012f16 <HAL_UARTEx_SetTxFifoThreshold+0xba>
 8012eec:	683b      	ldr	r3, [r7, #0]
 8012eee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012ef2:	d010      	beq.n	8012f16 <HAL_UARTEx_SetTxFifoThreshold+0xba>
 8012ef4:	683b      	ldr	r3, [r7, #0]
 8012ef6:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8012efa:	d00c      	beq.n	8012f16 <HAL_UARTEx_SetTxFifoThreshold+0xba>
 8012efc:	683b      	ldr	r3, [r7, #0]
 8012efe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8012f02:	d008      	beq.n	8012f16 <HAL_UARTEx_SetTxFifoThreshold+0xba>
 8012f04:	683b      	ldr	r3, [r7, #0]
 8012f06:	f1b3 4f20 	cmp.w	r3, #2684354560	@ 0xa0000000
 8012f0a:	d004      	beq.n	8012f16 <HAL_UARTEx_SetTxFifoThreshold+0xba>
 8012f0c:	f240 2165 	movw	r1, #613	@ 0x265
 8012f10:	4828      	ldr	r0, [pc, #160]	@ (8012fb4 <HAL_UARTEx_SetTxFifoThreshold+0x158>)
 8012f12:	f7ef fa57 	bl	80023c4 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(huart);
 8012f16:	687b      	ldr	r3, [r7, #4]
 8012f18:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8012f1c:	2b01      	cmp	r3, #1
 8012f1e:	d101      	bne.n	8012f24 <HAL_UARTEx_SetTxFifoThreshold+0xc8>
 8012f20:	2302      	movs	r3, #2
 8012f22:	e02d      	b.n	8012f80 <HAL_UARTEx_SetTxFifoThreshold+0x124>
 8012f24:	687b      	ldr	r3, [r7, #4]
 8012f26:	2201      	movs	r2, #1
 8012f28:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012f2c:	687b      	ldr	r3, [r7, #4]
 8012f2e:	2224      	movs	r2, #36	@ 0x24
 8012f30:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012f34:	687b      	ldr	r3, [r7, #4]
 8012f36:	681b      	ldr	r3, [r3, #0]
 8012f38:	681b      	ldr	r3, [r3, #0]
 8012f3a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012f3c:	687b      	ldr	r3, [r7, #4]
 8012f3e:	681b      	ldr	r3, [r3, #0]
 8012f40:	681a      	ldr	r2, [r3, #0]
 8012f42:	687b      	ldr	r3, [r7, #4]
 8012f44:	681b      	ldr	r3, [r3, #0]
 8012f46:	f022 0201 	bic.w	r2, r2, #1
 8012f4a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8012f4c:	687b      	ldr	r3, [r7, #4]
 8012f4e:	681b      	ldr	r3, [r3, #0]
 8012f50:	689b      	ldr	r3, [r3, #8]
 8012f52:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8012f56:	687b      	ldr	r3, [r7, #4]
 8012f58:	681b      	ldr	r3, [r3, #0]
 8012f5a:	683a      	ldr	r2, [r7, #0]
 8012f5c:	430a      	orrs	r2, r1
 8012f5e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8012f60:	6878      	ldr	r0, [r7, #4]
 8012f62:	f000 f8d7 	bl	8013114 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012f66:	687b      	ldr	r3, [r7, #4]
 8012f68:	681b      	ldr	r3, [r3, #0]
 8012f6a:	68fa      	ldr	r2, [r7, #12]
 8012f6c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012f6e:	687b      	ldr	r3, [r7, #4]
 8012f70:	2220      	movs	r2, #32
 8012f72:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012f76:	687b      	ldr	r3, [r7, #4]
 8012f78:	2200      	movs	r2, #0
 8012f7a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8012f7e:	2300      	movs	r3, #0
}
 8012f80:	4618      	mov	r0, r3
 8012f82:	3710      	adds	r7, #16
 8012f84:	46bd      	mov	sp, r7
 8012f86:	bd80      	pop	{r7, pc}
 8012f88:	40011000 	.word	0x40011000
 8012f8c:	40004400 	.word	0x40004400
 8012f90:	40004800 	.word	0x40004800
 8012f94:	40004c00 	.word	0x40004c00
 8012f98:	40005000 	.word	0x40005000
 8012f9c:	40011400 	.word	0x40011400
 8012fa0:	40007800 	.word	0x40007800
 8012fa4:	40007c00 	.word	0x40007c00
 8012fa8:	40011800 	.word	0x40011800
 8012fac:	40011c00 	.word	0x40011c00
 8012fb0:	58000c00 	.word	0x58000c00
 8012fb4:	08021784 	.word	0x08021784

08012fb8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8012fb8:	b580      	push	{r7, lr}
 8012fba:	b084      	sub	sp, #16
 8012fbc:	af00      	add	r7, sp, #0
 8012fbe:	6078      	str	r0, [r7, #4]
 8012fc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;

  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
 8012fc2:	687b      	ldr	r3, [r7, #4]
 8012fc4:	681b      	ldr	r3, [r3, #0]
 8012fc6:	4a47      	ldr	r2, [pc, #284]	@ (80130e4 <HAL_UARTEx_SetRxFifoThreshold+0x12c>)
 8012fc8:	4293      	cmp	r3, r2
 8012fca:	d036      	beq.n	801303a <HAL_UARTEx_SetRxFifoThreshold+0x82>
 8012fcc:	687b      	ldr	r3, [r7, #4]
 8012fce:	681b      	ldr	r3, [r3, #0]
 8012fd0:	4a45      	ldr	r2, [pc, #276]	@ (80130e8 <HAL_UARTEx_SetRxFifoThreshold+0x130>)
 8012fd2:	4293      	cmp	r3, r2
 8012fd4:	d031      	beq.n	801303a <HAL_UARTEx_SetRxFifoThreshold+0x82>
 8012fd6:	687b      	ldr	r3, [r7, #4]
 8012fd8:	681b      	ldr	r3, [r3, #0]
 8012fda:	4a44      	ldr	r2, [pc, #272]	@ (80130ec <HAL_UARTEx_SetRxFifoThreshold+0x134>)
 8012fdc:	4293      	cmp	r3, r2
 8012fde:	d02c      	beq.n	801303a <HAL_UARTEx_SetRxFifoThreshold+0x82>
 8012fe0:	687b      	ldr	r3, [r7, #4]
 8012fe2:	681b      	ldr	r3, [r3, #0]
 8012fe4:	4a42      	ldr	r2, [pc, #264]	@ (80130f0 <HAL_UARTEx_SetRxFifoThreshold+0x138>)
 8012fe6:	4293      	cmp	r3, r2
 8012fe8:	d027      	beq.n	801303a <HAL_UARTEx_SetRxFifoThreshold+0x82>
 8012fea:	687b      	ldr	r3, [r7, #4]
 8012fec:	681b      	ldr	r3, [r3, #0]
 8012fee:	4a41      	ldr	r2, [pc, #260]	@ (80130f4 <HAL_UARTEx_SetRxFifoThreshold+0x13c>)
 8012ff0:	4293      	cmp	r3, r2
 8012ff2:	d022      	beq.n	801303a <HAL_UARTEx_SetRxFifoThreshold+0x82>
 8012ff4:	687b      	ldr	r3, [r7, #4]
 8012ff6:	681b      	ldr	r3, [r3, #0]
 8012ff8:	4a3f      	ldr	r2, [pc, #252]	@ (80130f8 <HAL_UARTEx_SetRxFifoThreshold+0x140>)
 8012ffa:	4293      	cmp	r3, r2
 8012ffc:	d01d      	beq.n	801303a <HAL_UARTEx_SetRxFifoThreshold+0x82>
 8012ffe:	687b      	ldr	r3, [r7, #4]
 8013000:	681b      	ldr	r3, [r3, #0]
 8013002:	4a3e      	ldr	r2, [pc, #248]	@ (80130fc <HAL_UARTEx_SetRxFifoThreshold+0x144>)
 8013004:	4293      	cmp	r3, r2
 8013006:	d018      	beq.n	801303a <HAL_UARTEx_SetRxFifoThreshold+0x82>
 8013008:	687b      	ldr	r3, [r7, #4]
 801300a:	681b      	ldr	r3, [r3, #0]
 801300c:	4a3c      	ldr	r2, [pc, #240]	@ (8013100 <HAL_UARTEx_SetRxFifoThreshold+0x148>)
 801300e:	4293      	cmp	r3, r2
 8013010:	d013      	beq.n	801303a <HAL_UARTEx_SetRxFifoThreshold+0x82>
 8013012:	687b      	ldr	r3, [r7, #4]
 8013014:	681b      	ldr	r3, [r3, #0]
 8013016:	4a3b      	ldr	r2, [pc, #236]	@ (8013104 <HAL_UARTEx_SetRxFifoThreshold+0x14c>)
 8013018:	4293      	cmp	r3, r2
 801301a:	d00e      	beq.n	801303a <HAL_UARTEx_SetRxFifoThreshold+0x82>
 801301c:	687b      	ldr	r3, [r7, #4]
 801301e:	681b      	ldr	r3, [r3, #0]
 8013020:	4a39      	ldr	r2, [pc, #228]	@ (8013108 <HAL_UARTEx_SetRxFifoThreshold+0x150>)
 8013022:	4293      	cmp	r3, r2
 8013024:	d009      	beq.n	801303a <HAL_UARTEx_SetRxFifoThreshold+0x82>
 8013026:	687b      	ldr	r3, [r7, #4]
 8013028:	681b      	ldr	r3, [r3, #0]
 801302a:	4a38      	ldr	r2, [pc, #224]	@ (801310c <HAL_UARTEx_SetRxFifoThreshold+0x154>)
 801302c:	4293      	cmp	r3, r2
 801302e:	d004      	beq.n	801303a <HAL_UARTEx_SetRxFifoThreshold+0x82>
 8013030:	f240 2195 	movw	r1, #661	@ 0x295
 8013034:	4836      	ldr	r0, [pc, #216]	@ (8013110 <HAL_UARTEx_SetRxFifoThreshold+0x158>)
 8013036:	f7ef f9c5 	bl	80023c4 <assert_failed>
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));
 801303a:	683b      	ldr	r3, [r7, #0]
 801303c:	2b00      	cmp	r3, #0
 801303e:	d018      	beq.n	8013072 <HAL_UARTEx_SetRxFifoThreshold+0xba>
 8013040:	683b      	ldr	r3, [r7, #0]
 8013042:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8013046:	d014      	beq.n	8013072 <HAL_UARTEx_SetRxFifoThreshold+0xba>
 8013048:	683b      	ldr	r3, [r7, #0]
 801304a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 801304e:	d010      	beq.n	8013072 <HAL_UARTEx_SetRxFifoThreshold+0xba>
 8013050:	683b      	ldr	r3, [r7, #0]
 8013052:	f1b3 6fc0 	cmp.w	r3, #100663296	@ 0x6000000
 8013056:	d00c      	beq.n	8013072 <HAL_UARTEx_SetRxFifoThreshold+0xba>
 8013058:	683b      	ldr	r3, [r7, #0]
 801305a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 801305e:	d008      	beq.n	8013072 <HAL_UARTEx_SetRxFifoThreshold+0xba>
 8013060:	683b      	ldr	r3, [r7, #0]
 8013062:	f1b3 6f20 	cmp.w	r3, #167772160	@ 0xa000000
 8013066:	d004      	beq.n	8013072 <HAL_UARTEx_SetRxFifoThreshold+0xba>
 8013068:	f240 2196 	movw	r1, #662	@ 0x296
 801306c:	4828      	ldr	r0, [pc, #160]	@ (8013110 <HAL_UARTEx_SetRxFifoThreshold+0x158>)
 801306e:	f7ef f9a9 	bl	80023c4 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(huart);
 8013072:	687b      	ldr	r3, [r7, #4]
 8013074:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8013078:	2b01      	cmp	r3, #1
 801307a:	d101      	bne.n	8013080 <HAL_UARTEx_SetRxFifoThreshold+0xc8>
 801307c:	2302      	movs	r3, #2
 801307e:	e02d      	b.n	80130dc <HAL_UARTEx_SetRxFifoThreshold+0x124>
 8013080:	687b      	ldr	r3, [r7, #4]
 8013082:	2201      	movs	r2, #1
 8013084:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8013088:	687b      	ldr	r3, [r7, #4]
 801308a:	2224      	movs	r2, #36	@ 0x24
 801308c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8013090:	687b      	ldr	r3, [r7, #4]
 8013092:	681b      	ldr	r3, [r3, #0]
 8013094:	681b      	ldr	r3, [r3, #0]
 8013096:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8013098:	687b      	ldr	r3, [r7, #4]
 801309a:	681b      	ldr	r3, [r3, #0]
 801309c:	681a      	ldr	r2, [r3, #0]
 801309e:	687b      	ldr	r3, [r7, #4]
 80130a0:	681b      	ldr	r3, [r3, #0]
 80130a2:	f022 0201 	bic.w	r2, r2, #1
 80130a6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80130a8:	687b      	ldr	r3, [r7, #4]
 80130aa:	681b      	ldr	r3, [r3, #0]
 80130ac:	689b      	ldr	r3, [r3, #8]
 80130ae:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80130b2:	687b      	ldr	r3, [r7, #4]
 80130b4:	681b      	ldr	r3, [r3, #0]
 80130b6:	683a      	ldr	r2, [r7, #0]
 80130b8:	430a      	orrs	r2, r1
 80130ba:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80130bc:	6878      	ldr	r0, [r7, #4]
 80130be:	f000 f829 	bl	8013114 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80130c2:	687b      	ldr	r3, [r7, #4]
 80130c4:	681b      	ldr	r3, [r3, #0]
 80130c6:	68fa      	ldr	r2, [r7, #12]
 80130c8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80130ca:	687b      	ldr	r3, [r7, #4]
 80130cc:	2220      	movs	r2, #32
 80130ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80130d2:	687b      	ldr	r3, [r7, #4]
 80130d4:	2200      	movs	r2, #0
 80130d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80130da:	2300      	movs	r3, #0
}
 80130dc:	4618      	mov	r0, r3
 80130de:	3710      	adds	r7, #16
 80130e0:	46bd      	mov	sp, r7
 80130e2:	bd80      	pop	{r7, pc}
 80130e4:	40011000 	.word	0x40011000
 80130e8:	40004400 	.word	0x40004400
 80130ec:	40004800 	.word	0x40004800
 80130f0:	40004c00 	.word	0x40004c00
 80130f4:	40005000 	.word	0x40005000
 80130f8:	40011400 	.word	0x40011400
 80130fc:	40007800 	.word	0x40007800
 8013100:	40007c00 	.word	0x40007c00
 8013104:	40011800 	.word	0x40011800
 8013108:	40011c00 	.word	0x40011c00
 801310c:	58000c00 	.word	0x58000c00
 8013110:	08021784 	.word	0x08021784

08013114 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8013114:	b480      	push	{r7}
 8013116:	b085      	sub	sp, #20
 8013118:	af00      	add	r7, sp, #0
 801311a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 801311c:	687b      	ldr	r3, [r7, #4]
 801311e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8013120:	2b00      	cmp	r3, #0
 8013122:	d108      	bne.n	8013136 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8013124:	687b      	ldr	r3, [r7, #4]
 8013126:	2201      	movs	r2, #1
 8013128:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 801312c:	687b      	ldr	r3, [r7, #4]
 801312e:	2201      	movs	r2, #1
 8013130:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8013134:	e031      	b.n	801319a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8013136:	2310      	movs	r3, #16
 8013138:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801313a:	2310      	movs	r3, #16
 801313c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801313e:	687b      	ldr	r3, [r7, #4]
 8013140:	681b      	ldr	r3, [r3, #0]
 8013142:	689b      	ldr	r3, [r3, #8]
 8013144:	0e5b      	lsrs	r3, r3, #25
 8013146:	b2db      	uxtb	r3, r3
 8013148:	f003 0307 	and.w	r3, r3, #7
 801314c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 801314e:	687b      	ldr	r3, [r7, #4]
 8013150:	681b      	ldr	r3, [r3, #0]
 8013152:	689b      	ldr	r3, [r3, #8]
 8013154:	0f5b      	lsrs	r3, r3, #29
 8013156:	b2db      	uxtb	r3, r3
 8013158:	f003 0307 	and.w	r3, r3, #7
 801315c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801315e:	7bbb      	ldrb	r3, [r7, #14]
 8013160:	7b3a      	ldrb	r2, [r7, #12]
 8013162:	4911      	ldr	r1, [pc, #68]	@ (80131a8 <UARTEx_SetNbDataToProcess+0x94>)
 8013164:	5c8a      	ldrb	r2, [r1, r2]
 8013166:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 801316a:	7b3a      	ldrb	r2, [r7, #12]
 801316c:	490f      	ldr	r1, [pc, #60]	@ (80131ac <UARTEx_SetNbDataToProcess+0x98>)
 801316e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8013170:	fb93 f3f2 	sdiv	r3, r3, r2
 8013174:	b29a      	uxth	r2, r3
 8013176:	687b      	ldr	r3, [r7, #4]
 8013178:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801317c:	7bfb      	ldrb	r3, [r7, #15]
 801317e:	7b7a      	ldrb	r2, [r7, #13]
 8013180:	4909      	ldr	r1, [pc, #36]	@ (80131a8 <UARTEx_SetNbDataToProcess+0x94>)
 8013182:	5c8a      	ldrb	r2, [r1, r2]
 8013184:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8013188:	7b7a      	ldrb	r2, [r7, #13]
 801318a:	4908      	ldr	r1, [pc, #32]	@ (80131ac <UARTEx_SetNbDataToProcess+0x98>)
 801318c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801318e:	fb93 f3f2 	sdiv	r3, r3, r2
 8013192:	b29a      	uxth	r2, r3
 8013194:	687b      	ldr	r3, [r7, #4]
 8013196:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 801319a:	bf00      	nop
 801319c:	3714      	adds	r7, #20
 801319e:	46bd      	mov	sp, r7
 80131a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131a4:	4770      	bx	lr
 80131a6:	bf00      	nop
 80131a8:	08022f44 	.word	0x08022f44
 80131ac:	08022f4c 	.word	0x08022f4c

080131b0 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 80131b0:	b084      	sub	sp, #16
 80131b2:	b580      	push	{r7, lr}
 80131b4:	b084      	sub	sp, #16
 80131b6:	af00      	add	r7, sp, #0
 80131b8:	6078      	str	r0, [r7, #4]
 80131ba:	f107 001c 	add.w	r0, r7, #28
 80131be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80131c2:	2300      	movs	r3, #0
 80131c4:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_SDMMC_ALL_INSTANCE(SDMMCx));
 80131c6:	687b      	ldr	r3, [r7, #4]
 80131c8:	4a2f      	ldr	r2, [pc, #188]	@ (8013288 <SDMMC_Init+0xd8>)
 80131ca:	4293      	cmp	r3, r2
 80131cc:	d007      	beq.n	80131de <SDMMC_Init+0x2e>
 80131ce:	687b      	ldr	r3, [r7, #4]
 80131d0:	4a2e      	ldr	r2, [pc, #184]	@ (801328c <SDMMC_Init+0xdc>)
 80131d2:	4293      	cmp	r3, r2
 80131d4:	d003      	beq.n	80131de <SDMMC_Init+0x2e>
 80131d6:	21ce      	movs	r1, #206	@ 0xce
 80131d8:	482d      	ldr	r0, [pc, #180]	@ (8013290 <SDMMC_Init+0xe0>)
 80131da:	f7ef f8f3 	bl	80023c4 <assert_failed>
  assert_param(IS_SDMMC_CLOCK_EDGE(Init.ClockEdge));
 80131de:	69fb      	ldr	r3, [r7, #28]
 80131e0:	2b00      	cmp	r3, #0
 80131e2:	d007      	beq.n	80131f4 <SDMMC_Init+0x44>
 80131e4:	69fb      	ldr	r3, [r7, #28]
 80131e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80131ea:	d003      	beq.n	80131f4 <SDMMC_Init+0x44>
 80131ec:	21cf      	movs	r1, #207	@ 0xcf
 80131ee:	4828      	ldr	r0, [pc, #160]	@ (8013290 <SDMMC_Init+0xe0>)
 80131f0:	f7ef f8e8 	bl	80023c4 <assert_failed>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(Init.ClockPowerSave));
 80131f4:	6a3b      	ldr	r3, [r7, #32]
 80131f6:	2b00      	cmp	r3, #0
 80131f8:	d007      	beq.n	801320a <SDMMC_Init+0x5a>
 80131fa:	6a3b      	ldr	r3, [r7, #32]
 80131fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8013200:	d003      	beq.n	801320a <SDMMC_Init+0x5a>
 8013202:	21d0      	movs	r1, #208	@ 0xd0
 8013204:	4822      	ldr	r0, [pc, #136]	@ (8013290 <SDMMC_Init+0xe0>)
 8013206:	f7ef f8dd 	bl	80023c4 <assert_failed>
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
 801320a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801320c:	2b00      	cmp	r3, #0
 801320e:	d00b      	beq.n	8013228 <SDMMC_Init+0x78>
 8013210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013212:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8013216:	d007      	beq.n	8013228 <SDMMC_Init+0x78>
 8013218:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801321a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801321e:	d003      	beq.n	8013228 <SDMMC_Init+0x78>
 8013220:	21d1      	movs	r1, #209	@ 0xd1
 8013222:	481b      	ldr	r0, [pc, #108]	@ (8013290 <SDMMC_Init+0xe0>)
 8013224:	f7ef f8ce 	bl	80023c4 <assert_failed>
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
 8013228:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801322a:	2b00      	cmp	r3, #0
 801322c:	d007      	beq.n	801323e <SDMMC_Init+0x8e>
 801322e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013230:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8013234:	d003      	beq.n	801323e <SDMMC_Init+0x8e>
 8013236:	21d2      	movs	r1, #210	@ 0xd2
 8013238:	4815      	ldr	r0, [pc, #84]	@ (8013290 <SDMMC_Init+0xe0>)
 801323a:	f7ef f8c3 	bl	80023c4 <assert_failed>
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
 801323e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013240:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8013244:	d303      	bcc.n	801324e <SDMMC_Init+0x9e>
 8013246:	21d3      	movs	r1, #211	@ 0xd3
 8013248:	4811      	ldr	r0, [pc, #68]	@ (8013290 <SDMMC_Init+0xe0>)
 801324a:	f7ef f8bb 	bl	80023c4 <assert_failed>

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 801324e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 8013250:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 8013252:	431a      	orrs	r2, r3
             Init.BusWide             | \
 8013254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockPowerSave      | \
 8013256:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 8013258:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.BusWide             | \
 801325a:	431a      	orrs	r2, r3
             Init.ClockDiv
 801325c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.HardwareFlowControl | \
 801325e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 8013260:	68fa      	ldr	r2, [r7, #12]
 8013262:	4313      	orrs	r3, r2
 8013264:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8013266:	687b      	ldr	r3, [r7, #4]
 8013268:	685a      	ldr	r2, [r3, #4]
 801326a:	4b0a      	ldr	r3, [pc, #40]	@ (8013294 <SDMMC_Init+0xe4>)
 801326c:	4013      	ands	r3, r2
 801326e:	68fa      	ldr	r2, [r7, #12]
 8013270:	431a      	orrs	r2, r3
 8013272:	687b      	ldr	r3, [r7, #4]
 8013274:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8013276:	2300      	movs	r3, #0
}
 8013278:	4618      	mov	r0, r3
 801327a:	3710      	adds	r7, #16
 801327c:	46bd      	mov	sp, r7
 801327e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8013282:	b004      	add	sp, #16
 8013284:	4770      	bx	lr
 8013286:	bf00      	nop
 8013288:	52007000 	.word	0x52007000
 801328c:	48022400 	.word	0x48022400
 8013290:	080217c0 	.word	0x080217c0
 8013294:	ffc02c00 	.word	0xffc02c00

08013298 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(const SDMMC_TypeDef *SDMMCx)
{
 8013298:	b480      	push	{r7}
 801329a:	b083      	sub	sp, #12
 801329c:	af00      	add	r7, sp, #0
 801329e:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 80132a0:	687b      	ldr	r3, [r7, #4]
 80132a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 80132a6:	4618      	mov	r0, r3
 80132a8:	370c      	adds	r7, #12
 80132aa:	46bd      	mov	sp, r7
 80132ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132b0:	4770      	bx	lr

080132b2 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 80132b2:	b480      	push	{r7}
 80132b4:	b083      	sub	sp, #12
 80132b6:	af00      	add	r7, sp, #0
 80132b8:	6078      	str	r0, [r7, #4]
 80132ba:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 80132bc:	683b      	ldr	r3, [r7, #0]
 80132be:	681a      	ldr	r2, [r3, #0]
 80132c0:	687b      	ldr	r3, [r7, #4]
 80132c2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 80132c6:	2300      	movs	r3, #0
}
 80132c8:	4618      	mov	r0, r3
 80132ca:	370c      	adds	r7, #12
 80132cc:	46bd      	mov	sp, r7
 80132ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132d2:	4770      	bx	lr

080132d4 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 80132d4:	b480      	push	{r7}
 80132d6:	b083      	sub	sp, #12
 80132d8:	af00      	add	r7, sp, #0
 80132da:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 80132dc:	687b      	ldr	r3, [r7, #4]
 80132de:	681b      	ldr	r3, [r3, #0]
 80132e0:	f043 0203 	orr.w	r2, r3, #3
 80132e4:	687b      	ldr	r3, [r7, #4]
 80132e6:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80132e8:	2300      	movs	r3, #0
}
 80132ea:	4618      	mov	r0, r3
 80132ec:	370c      	adds	r7, #12
 80132ee:	46bd      	mov	sp, r7
 80132f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132f4:	4770      	bx	lr

080132f6 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(const SDMMC_TypeDef *SDMMCx)
{
 80132f6:	b480      	push	{r7}
 80132f8:	b083      	sub	sp, #12
 80132fa:	af00      	add	r7, sp, #0
 80132fc:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 80132fe:	687b      	ldr	r3, [r7, #4]
 8013300:	681b      	ldr	r3, [r3, #0]
 8013302:	f003 0303 	and.w	r3, r3, #3
}
 8013306:	4618      	mov	r0, r3
 8013308:	370c      	adds	r7, #12
 801330a:	46bd      	mov	sp, r7
 801330c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013310:	4770      	bx	lr
	...

08013314 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, const SDMMC_CmdInitTypeDef *Command)
{
 8013314:	b580      	push	{r7, lr}
 8013316:	b084      	sub	sp, #16
 8013318:	af00      	add	r7, sp, #0
 801331a:	6078      	str	r0, [r7, #4]
 801331c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 801331e:	2300      	movs	r3, #0
 8013320:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_SDMMC_CMD_INDEX(Command->CmdIndex));
 8013322:	683b      	ldr	r3, [r7, #0]
 8013324:	685b      	ldr	r3, [r3, #4]
 8013326:	2b3f      	cmp	r3, #63	@ 0x3f
 8013328:	d904      	bls.n	8013334 <SDMMC_SendCommand+0x20>
 801332a:	f240 1165 	movw	r1, #357	@ 0x165
 801332e:	482b      	ldr	r0, [pc, #172]	@ (80133dc <SDMMC_SendCommand+0xc8>)
 8013330:	f7ef f848 	bl	80023c4 <assert_failed>
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
 8013334:	683b      	ldr	r3, [r7, #0]
 8013336:	689b      	ldr	r3, [r3, #8]
 8013338:	2b00      	cmp	r3, #0
 801333a:	d00e      	beq.n	801335a <SDMMC_SendCommand+0x46>
 801333c:	683b      	ldr	r3, [r7, #0]
 801333e:	689b      	ldr	r3, [r3, #8]
 8013340:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8013344:	d009      	beq.n	801335a <SDMMC_SendCommand+0x46>
 8013346:	683b      	ldr	r3, [r7, #0]
 8013348:	689b      	ldr	r3, [r3, #8]
 801334a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801334e:	d004      	beq.n	801335a <SDMMC_SendCommand+0x46>
 8013350:	f44f 71b3 	mov.w	r1, #358	@ 0x166
 8013354:	4821      	ldr	r0, [pc, #132]	@ (80133dc <SDMMC_SendCommand+0xc8>)
 8013356:	f7ef f835 	bl	80023c4 <assert_failed>
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
 801335a:	683b      	ldr	r3, [r7, #0]
 801335c:	68db      	ldr	r3, [r3, #12]
 801335e:	2b00      	cmp	r3, #0
 8013360:	d00e      	beq.n	8013380 <SDMMC_SendCommand+0x6c>
 8013362:	683b      	ldr	r3, [r7, #0]
 8013364:	68db      	ldr	r3, [r3, #12]
 8013366:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801336a:	d009      	beq.n	8013380 <SDMMC_SendCommand+0x6c>
 801336c:	683b      	ldr	r3, [r7, #0]
 801336e:	68db      	ldr	r3, [r3, #12]
 8013370:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8013374:	d004      	beq.n	8013380 <SDMMC_SendCommand+0x6c>
 8013376:	f240 1167 	movw	r1, #359	@ 0x167
 801337a:	4818      	ldr	r0, [pc, #96]	@ (80133dc <SDMMC_SendCommand+0xc8>)
 801337c:	f7ef f822 	bl	80023c4 <assert_failed>
  assert_param(IS_SDMMC_CPSM(Command->CPSM));
 8013380:	683b      	ldr	r3, [r7, #0]
 8013382:	691b      	ldr	r3, [r3, #16]
 8013384:	2b00      	cmp	r3, #0
 8013386:	d009      	beq.n	801339c <SDMMC_SendCommand+0x88>
 8013388:	683b      	ldr	r3, [r7, #0]
 801338a:	691b      	ldr	r3, [r3, #16]
 801338c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8013390:	d004      	beq.n	801339c <SDMMC_SendCommand+0x88>
 8013392:	f44f 71b4 	mov.w	r1, #360	@ 0x168
 8013396:	4811      	ldr	r0, [pc, #68]	@ (80133dc <SDMMC_SendCommand+0xc8>)
 8013398:	f7ef f814 	bl	80023c4 <assert_failed>

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 801339c:	683b      	ldr	r3, [r7, #0]
 801339e:	681a      	ldr	r2, [r3, #0]
 80133a0:	687b      	ldr	r3, [r7, #4]
 80133a2:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 80133a4:	683b      	ldr	r3, [r7, #0]
 80133a6:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 80133a8:	683b      	ldr	r3, [r7, #0]
 80133aa:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 80133ac:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 80133ae:	683b      	ldr	r3, [r7, #0]
 80133b0:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 80133b2:	431a      	orrs	r2, r3
                       Command->CPSM);
 80133b4:	683b      	ldr	r3, [r7, #0]
 80133b6:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 80133b8:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 80133ba:	68fa      	ldr	r2, [r7, #12]
 80133bc:	4313      	orrs	r3, r2
 80133be:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80133c0:	687b      	ldr	r3, [r7, #4]
 80133c2:	68da      	ldr	r2, [r3, #12]
 80133c4:	4b06      	ldr	r3, [pc, #24]	@ (80133e0 <SDMMC_SendCommand+0xcc>)
 80133c6:	4013      	ands	r3, r2
 80133c8:	68fa      	ldr	r2, [r7, #12]
 80133ca:	431a      	orrs	r2, r3
 80133cc:	687b      	ldr	r3, [r7, #4]
 80133ce:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80133d0:	2300      	movs	r3, #0
}
 80133d2:	4618      	mov	r0, r3
 80133d4:	3710      	adds	r7, #16
 80133d6:	46bd      	mov	sp, r7
 80133d8:	bd80      	pop	{r7, pc}
 80133da:	bf00      	nop
 80133dc:	080217c0 	.word	0x080217c0
 80133e0:	fffee0c0 	.word	0xfffee0c0

080133e4 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(const SDMMC_TypeDef *SDMMCx)
{
 80133e4:	b480      	push	{r7}
 80133e6:	b083      	sub	sp, #12
 80133e8:	af00      	add	r7, sp, #0
 80133ea:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 80133ec:	687b      	ldr	r3, [r7, #4]
 80133ee:	691b      	ldr	r3, [r3, #16]
 80133f0:	b2db      	uxtb	r3, r3
}
 80133f2:	4618      	mov	r0, r3
 80133f4:	370c      	adds	r7, #12
 80133f6:	46bd      	mov	sp, r7
 80133f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133fc:	4770      	bx	lr
	...

08013400 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(const SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8013400:	b580      	push	{r7, lr}
 8013402:	b084      	sub	sp, #16
 8013404:	af00      	add	r7, sp, #0
 8013406:	6078      	str	r0, [r7, #4]
 8013408:	6039      	str	r1, [r7, #0]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
 801340a:	683b      	ldr	r3, [r7, #0]
 801340c:	2b00      	cmp	r3, #0
 801340e:	d00d      	beq.n	801342c <SDMMC_GetResponse+0x2c>
 8013410:	683b      	ldr	r3, [r7, #0]
 8013412:	2b04      	cmp	r3, #4
 8013414:	d00a      	beq.n	801342c <SDMMC_GetResponse+0x2c>
 8013416:	683b      	ldr	r3, [r7, #0]
 8013418:	2b08      	cmp	r3, #8
 801341a:	d007      	beq.n	801342c <SDMMC_GetResponse+0x2c>
 801341c:	683b      	ldr	r3, [r7, #0]
 801341e:	2b0c      	cmp	r3, #12
 8013420:	d004      	beq.n	801342c <SDMMC_GetResponse+0x2c>
 8013422:	f44f 71ca 	mov.w	r1, #404	@ 0x194
 8013426:	4807      	ldr	r0, [pc, #28]	@ (8013444 <SDMMC_GetResponse+0x44>)
 8013428:	f7ee ffcc 	bl	80023c4 <assert_failed>

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 801342c:	687b      	ldr	r3, [r7, #4]
 801342e:	3314      	adds	r3, #20
 8013430:	461a      	mov	r2, r3
 8013432:	683b      	ldr	r3, [r7, #0]
 8013434:	4413      	add	r3, r2
 8013436:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8013438:	68fb      	ldr	r3, [r7, #12]
 801343a:	681b      	ldr	r3, [r3, #0]
}
 801343c:	4618      	mov	r0, r3
 801343e:	3710      	adds	r7, #16
 8013440:	46bd      	mov	sp, r7
 8013442:	bd80      	pop	{r7, pc}
 8013444:	080217c0 	.word	0x080217c0

08013448 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, const SDMMC_DataInitTypeDef *Data)
{
 8013448:	b580      	push	{r7, lr}
 801344a:	b084      	sub	sp, #16
 801344c:	af00      	add	r7, sp, #0
 801344e:	6078      	str	r0, [r7, #4]
 8013450:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8013452:	2300      	movs	r3, #0
 8013454:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_SDMMC_DATA_LENGTH(Data->DataLength));
 8013456:	683b      	ldr	r3, [r7, #0]
 8013458:	685b      	ldr	r3, [r3, #4]
 801345a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801345e:	d304      	bcc.n	801346a <SDMMC_ConfigData+0x22>
 8013460:	f240 11a9 	movw	r1, #425	@ 0x1a9
 8013464:	4848      	ldr	r0, [pc, #288]	@ (8013588 <SDMMC_ConfigData+0x140>)
 8013466:	f7ee ffad 	bl	80023c4 <assert_failed>
  assert_param(IS_SDMMC_BLOCK_SIZE(Data->DataBlockSize));
 801346a:	683b      	ldr	r3, [r7, #0]
 801346c:	689b      	ldr	r3, [r3, #8]
 801346e:	2b00      	cmp	r3, #0
 8013470:	d03c      	beq.n	80134ec <SDMMC_ConfigData+0xa4>
 8013472:	683b      	ldr	r3, [r7, #0]
 8013474:	689b      	ldr	r3, [r3, #8]
 8013476:	2b10      	cmp	r3, #16
 8013478:	d038      	beq.n	80134ec <SDMMC_ConfigData+0xa4>
 801347a:	683b      	ldr	r3, [r7, #0]
 801347c:	689b      	ldr	r3, [r3, #8]
 801347e:	2b20      	cmp	r3, #32
 8013480:	d034      	beq.n	80134ec <SDMMC_ConfigData+0xa4>
 8013482:	683b      	ldr	r3, [r7, #0]
 8013484:	689b      	ldr	r3, [r3, #8]
 8013486:	2b30      	cmp	r3, #48	@ 0x30
 8013488:	d030      	beq.n	80134ec <SDMMC_ConfigData+0xa4>
 801348a:	683b      	ldr	r3, [r7, #0]
 801348c:	689b      	ldr	r3, [r3, #8]
 801348e:	2b40      	cmp	r3, #64	@ 0x40
 8013490:	d02c      	beq.n	80134ec <SDMMC_ConfigData+0xa4>
 8013492:	683b      	ldr	r3, [r7, #0]
 8013494:	689b      	ldr	r3, [r3, #8]
 8013496:	2b50      	cmp	r3, #80	@ 0x50
 8013498:	d028      	beq.n	80134ec <SDMMC_ConfigData+0xa4>
 801349a:	683b      	ldr	r3, [r7, #0]
 801349c:	689b      	ldr	r3, [r3, #8]
 801349e:	2b60      	cmp	r3, #96	@ 0x60
 80134a0:	d024      	beq.n	80134ec <SDMMC_ConfigData+0xa4>
 80134a2:	683b      	ldr	r3, [r7, #0]
 80134a4:	689b      	ldr	r3, [r3, #8]
 80134a6:	2b70      	cmp	r3, #112	@ 0x70
 80134a8:	d020      	beq.n	80134ec <SDMMC_ConfigData+0xa4>
 80134aa:	683b      	ldr	r3, [r7, #0]
 80134ac:	689b      	ldr	r3, [r3, #8]
 80134ae:	2b80      	cmp	r3, #128	@ 0x80
 80134b0:	d01c      	beq.n	80134ec <SDMMC_ConfigData+0xa4>
 80134b2:	683b      	ldr	r3, [r7, #0]
 80134b4:	689b      	ldr	r3, [r3, #8]
 80134b6:	2b90      	cmp	r3, #144	@ 0x90
 80134b8:	d018      	beq.n	80134ec <SDMMC_ConfigData+0xa4>
 80134ba:	683b      	ldr	r3, [r7, #0]
 80134bc:	689b      	ldr	r3, [r3, #8]
 80134be:	2ba0      	cmp	r3, #160	@ 0xa0
 80134c0:	d014      	beq.n	80134ec <SDMMC_ConfigData+0xa4>
 80134c2:	683b      	ldr	r3, [r7, #0]
 80134c4:	689b      	ldr	r3, [r3, #8]
 80134c6:	2bb0      	cmp	r3, #176	@ 0xb0
 80134c8:	d010      	beq.n	80134ec <SDMMC_ConfigData+0xa4>
 80134ca:	683b      	ldr	r3, [r7, #0]
 80134cc:	689b      	ldr	r3, [r3, #8]
 80134ce:	2bc0      	cmp	r3, #192	@ 0xc0
 80134d0:	d00c      	beq.n	80134ec <SDMMC_ConfigData+0xa4>
 80134d2:	683b      	ldr	r3, [r7, #0]
 80134d4:	689b      	ldr	r3, [r3, #8]
 80134d6:	2bd0      	cmp	r3, #208	@ 0xd0
 80134d8:	d008      	beq.n	80134ec <SDMMC_ConfigData+0xa4>
 80134da:	683b      	ldr	r3, [r7, #0]
 80134dc:	689b      	ldr	r3, [r3, #8]
 80134de:	2be0      	cmp	r3, #224	@ 0xe0
 80134e0:	d004      	beq.n	80134ec <SDMMC_ConfigData+0xa4>
 80134e2:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 80134e6:	4828      	ldr	r0, [pc, #160]	@ (8013588 <SDMMC_ConfigData+0x140>)
 80134e8:	f7ee ff6c 	bl	80023c4 <assert_failed>
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
 80134ec:	683b      	ldr	r3, [r7, #0]
 80134ee:	68db      	ldr	r3, [r3, #12]
 80134f0:	2b00      	cmp	r3, #0
 80134f2:	d008      	beq.n	8013506 <SDMMC_ConfigData+0xbe>
 80134f4:	683b      	ldr	r3, [r7, #0]
 80134f6:	68db      	ldr	r3, [r3, #12]
 80134f8:	2b02      	cmp	r3, #2
 80134fa:	d004      	beq.n	8013506 <SDMMC_ConfigData+0xbe>
 80134fc:	f240 11ab 	movw	r1, #427	@ 0x1ab
 8013500:	4821      	ldr	r0, [pc, #132]	@ (8013588 <SDMMC_ConfigData+0x140>)
 8013502:	f7ee ff5f 	bl	80023c4 <assert_failed>
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
 8013506:	683b      	ldr	r3, [r7, #0]
 8013508:	691b      	ldr	r3, [r3, #16]
 801350a:	2b00      	cmp	r3, #0
 801350c:	d00c      	beq.n	8013528 <SDMMC_ConfigData+0xe0>
 801350e:	683b      	ldr	r3, [r7, #0]
 8013510:	691b      	ldr	r3, [r3, #16]
 8013512:	2b04      	cmp	r3, #4
 8013514:	d008      	beq.n	8013528 <SDMMC_ConfigData+0xe0>
 8013516:	683b      	ldr	r3, [r7, #0]
 8013518:	691b      	ldr	r3, [r3, #16]
 801351a:	2b08      	cmp	r3, #8
 801351c:	d004      	beq.n	8013528 <SDMMC_ConfigData+0xe0>
 801351e:	f44f 71d6 	mov.w	r1, #428	@ 0x1ac
 8013522:	4819      	ldr	r0, [pc, #100]	@ (8013588 <SDMMC_ConfigData+0x140>)
 8013524:	f7ee ff4e 	bl	80023c4 <assert_failed>
  assert_param(IS_SDMMC_DPSM(Data->DPSM));
 8013528:	683b      	ldr	r3, [r7, #0]
 801352a:	695b      	ldr	r3, [r3, #20]
 801352c:	2b00      	cmp	r3, #0
 801352e:	d008      	beq.n	8013542 <SDMMC_ConfigData+0xfa>
 8013530:	683b      	ldr	r3, [r7, #0]
 8013532:	695b      	ldr	r3, [r3, #20]
 8013534:	2b01      	cmp	r3, #1
 8013536:	d004      	beq.n	8013542 <SDMMC_ConfigData+0xfa>
 8013538:	f240 11ad 	movw	r1, #429	@ 0x1ad
 801353c:	4812      	ldr	r0, [pc, #72]	@ (8013588 <SDMMC_ConfigData+0x140>)
 801353e:	f7ee ff41 	bl	80023c4 <assert_failed>

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8013542:	683b      	ldr	r3, [r7, #0]
 8013544:	681a      	ldr	r2, [r3, #0]
 8013546:	687b      	ldr	r3, [r7, #4]
 8013548:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 801354a:	683b      	ldr	r3, [r7, #0]
 801354c:	685a      	ldr	r2, [r3, #4]
 801354e:	687b      	ldr	r3, [r7, #4]
 8013550:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8013552:	683b      	ldr	r3, [r7, #0]
 8013554:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 8013556:	683b      	ldr	r3, [r7, #0]
 8013558:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 801355a:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 801355c:	683b      	ldr	r3, [r7, #0]
 801355e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 8013560:	431a      	orrs	r2, r3
                       Data->DPSM);
 8013562:	683b      	ldr	r3, [r7, #0]
 8013564:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 8013566:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8013568:	68fa      	ldr	r2, [r7, #12]
 801356a:	4313      	orrs	r3, r2
 801356c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 801356e:	687b      	ldr	r3, [r7, #4]
 8013570:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013572:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8013576:	68fb      	ldr	r3, [r7, #12]
 8013578:	431a      	orrs	r2, r3
 801357a:	687b      	ldr	r3, [r7, #4]
 801357c:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 801357e:	2300      	movs	r3, #0

}
 8013580:	4618      	mov	r0, r3
 8013582:	3710      	adds	r7, #16
 8013584:	46bd      	mov	sp, r7
 8013586:	bd80      	pop	{r7, pc}
 8013588:	080217c0 	.word	0x080217c0

0801358c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 801358c:	b580      	push	{r7, lr}
 801358e:	b088      	sub	sp, #32
 8013590:	af00      	add	r7, sp, #0
 8013592:	6078      	str	r0, [r7, #4]
 8013594:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8013596:	683b      	ldr	r3, [r7, #0]
 8013598:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 801359a:	2310      	movs	r3, #16
 801359c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801359e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80135a2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80135a4:	2300      	movs	r3, #0
 80135a6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80135a8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80135ac:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80135ae:	f107 0308 	add.w	r3, r7, #8
 80135b2:	4619      	mov	r1, r3
 80135b4:	6878      	ldr	r0, [r7, #4]
 80135b6:	f7ff fead 	bl	8013314 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 80135ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80135be:	2110      	movs	r1, #16
 80135c0:	6878      	ldr	r0, [r7, #4]
 80135c2:	f000 fa5f 	bl	8013a84 <SDMMC_GetCmdResp1>
 80135c6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80135c8:	69fb      	ldr	r3, [r7, #28]
}
 80135ca:	4618      	mov	r0, r3
 80135cc:	3720      	adds	r7, #32
 80135ce:	46bd      	mov	sp, r7
 80135d0:	bd80      	pop	{r7, pc}

080135d2 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80135d2:	b580      	push	{r7, lr}
 80135d4:	b088      	sub	sp, #32
 80135d6:	af00      	add	r7, sp, #0
 80135d8:	6078      	str	r0, [r7, #4]
 80135da:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80135dc:	683b      	ldr	r3, [r7, #0]
 80135de:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80135e0:	2311      	movs	r3, #17
 80135e2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80135e4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80135e8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80135ea:	2300      	movs	r3, #0
 80135ec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80135ee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80135f2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80135f4:	f107 0308 	add.w	r3, r7, #8
 80135f8:	4619      	mov	r1, r3
 80135fa:	6878      	ldr	r0, [r7, #4]
 80135fc:	f7ff fe8a 	bl	8013314 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8013600:	f241 3288 	movw	r2, #5000	@ 0x1388
 8013604:	2111      	movs	r1, #17
 8013606:	6878      	ldr	r0, [r7, #4]
 8013608:	f000 fa3c 	bl	8013a84 <SDMMC_GetCmdResp1>
 801360c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801360e:	69fb      	ldr	r3, [r7, #28]
}
 8013610:	4618      	mov	r0, r3
 8013612:	3720      	adds	r7, #32
 8013614:	46bd      	mov	sp, r7
 8013616:	bd80      	pop	{r7, pc}

08013618 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8013618:	b580      	push	{r7, lr}
 801361a:	b088      	sub	sp, #32
 801361c:	af00      	add	r7, sp, #0
 801361e:	6078      	str	r0, [r7, #4]
 8013620:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8013622:	683b      	ldr	r3, [r7, #0]
 8013624:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8013626:	2312      	movs	r3, #18
 8013628:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801362a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801362e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013630:	2300      	movs	r3, #0
 8013632:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013634:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8013638:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801363a:	f107 0308 	add.w	r3, r7, #8
 801363e:	4619      	mov	r1, r3
 8013640:	6878      	ldr	r0, [r7, #4]
 8013642:	f7ff fe67 	bl	8013314 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8013646:	f241 3288 	movw	r2, #5000	@ 0x1388
 801364a:	2112      	movs	r1, #18
 801364c:	6878      	ldr	r0, [r7, #4]
 801364e:	f000 fa19 	bl	8013a84 <SDMMC_GetCmdResp1>
 8013652:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013654:	69fb      	ldr	r3, [r7, #28]
}
 8013656:	4618      	mov	r0, r3
 8013658:	3720      	adds	r7, #32
 801365a:	46bd      	mov	sp, r7
 801365c:	bd80      	pop	{r7, pc}

0801365e <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 801365e:	b580      	push	{r7, lr}
 8013660:	b088      	sub	sp, #32
 8013662:	af00      	add	r7, sp, #0
 8013664:	6078      	str	r0, [r7, #4]
 8013666:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8013668:	683b      	ldr	r3, [r7, #0]
 801366a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 801366c:	2318      	movs	r3, #24
 801366e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8013670:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8013674:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013676:	2300      	movs	r3, #0
 8013678:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801367a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801367e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013680:	f107 0308 	add.w	r3, r7, #8
 8013684:	4619      	mov	r1, r3
 8013686:	6878      	ldr	r0, [r7, #4]
 8013688:	f7ff fe44 	bl	8013314 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 801368c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8013690:	2118      	movs	r1, #24
 8013692:	6878      	ldr	r0, [r7, #4]
 8013694:	f000 f9f6 	bl	8013a84 <SDMMC_GetCmdResp1>
 8013698:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801369a:	69fb      	ldr	r3, [r7, #28]
}
 801369c:	4618      	mov	r0, r3
 801369e:	3720      	adds	r7, #32
 80136a0:	46bd      	mov	sp, r7
 80136a2:	bd80      	pop	{r7, pc}

080136a4 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80136a4:	b580      	push	{r7, lr}
 80136a6:	b088      	sub	sp, #32
 80136a8:	af00      	add	r7, sp, #0
 80136aa:	6078      	str	r0, [r7, #4]
 80136ac:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80136ae:	683b      	ldr	r3, [r7, #0]
 80136b0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80136b2:	2319      	movs	r3, #25
 80136b4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80136b6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80136ba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80136bc:	2300      	movs	r3, #0
 80136be:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80136c0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80136c4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80136c6:	f107 0308 	add.w	r3, r7, #8
 80136ca:	4619      	mov	r1, r3
 80136cc:	6878      	ldr	r0, [r7, #4]
 80136ce:	f7ff fe21 	bl	8013314 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80136d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80136d6:	2119      	movs	r1, #25
 80136d8:	6878      	ldr	r0, [r7, #4]
 80136da:	f000 f9d3 	bl	8013a84 <SDMMC_GetCmdResp1>
 80136de:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80136e0:	69fb      	ldr	r3, [r7, #28]
}
 80136e2:	4618      	mov	r0, r3
 80136e4:	3720      	adds	r7, #32
 80136e6:	46bd      	mov	sp, r7
 80136e8:	bd80      	pop	{r7, pc}
	...

080136ec <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 80136ec:	b580      	push	{r7, lr}
 80136ee:	b088      	sub	sp, #32
 80136f0:	af00      	add	r7, sp, #0
 80136f2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80136f4:	2300      	movs	r3, #0
 80136f6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80136f8:	230c      	movs	r3, #12
 80136fa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80136fc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8013700:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013702:	2300      	movs	r3, #0
 8013704:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013706:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801370a:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 801370c:	687b      	ldr	r3, [r7, #4]
 801370e:	68db      	ldr	r3, [r3, #12]
 8013710:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8013714:	687b      	ldr	r3, [r7, #4]
 8013716:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8013718:	687b      	ldr	r3, [r7, #4]
 801371a:	68db      	ldr	r3, [r3, #12]
 801371c:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8013720:	687b      	ldr	r3, [r7, #4]
 8013722:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013724:	f107 0308 	add.w	r3, r7, #8
 8013728:	4619      	mov	r1, r3
 801372a:	6878      	ldr	r0, [r7, #4]
 801372c:	f7ff fdf2 	bl	8013314 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8013730:	4a0b      	ldr	r2, [pc, #44]	@ (8013760 <SDMMC_CmdStopTransfer+0x74>)
 8013732:	210c      	movs	r1, #12
 8013734:	6878      	ldr	r0, [r7, #4]
 8013736:	f000 f9a5 	bl	8013a84 <SDMMC_GetCmdResp1>
 801373a:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 801373c:	687b      	ldr	r3, [r7, #4]
 801373e:	68db      	ldr	r3, [r3, #12]
 8013740:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8013744:	687b      	ldr	r3, [r7, #4]
 8013746:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8013748:	69fb      	ldr	r3, [r7, #28]
 801374a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801374e:	d101      	bne.n	8013754 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 8013750:	2300      	movs	r3, #0
 8013752:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 8013754:	69fb      	ldr	r3, [r7, #28]
}
 8013756:	4618      	mov	r0, r3
 8013758:	3720      	adds	r7, #32
 801375a:	46bd      	mov	sp, r7
 801375c:	bd80      	pop	{r7, pc}
 801375e:	bf00      	nop
 8013760:	05f5e100 	.word	0x05f5e100

08013764 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 8013764:	b580      	push	{r7, lr}
 8013766:	b088      	sub	sp, #32
 8013768:	af00      	add	r7, sp, #0
 801376a:	6078      	str	r0, [r7, #4]
 801376c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 801376e:	683b      	ldr	r3, [r7, #0]
 8013770:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8013772:	2307      	movs	r3, #7
 8013774:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8013776:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801377a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801377c:	2300      	movs	r3, #0
 801377e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013780:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8013784:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013786:	f107 0308 	add.w	r3, r7, #8
 801378a:	4619      	mov	r1, r3
 801378c:	6878      	ldr	r0, [r7, #4]
 801378e:	f7ff fdc1 	bl	8013314 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8013792:	f241 3288 	movw	r2, #5000	@ 0x1388
 8013796:	2107      	movs	r1, #7
 8013798:	6878      	ldr	r0, [r7, #4]
 801379a:	f000 f973 	bl	8013a84 <SDMMC_GetCmdResp1>
 801379e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80137a0:	69fb      	ldr	r3, [r7, #28]
}
 80137a2:	4618      	mov	r0, r3
 80137a4:	3720      	adds	r7, #32
 80137a6:	46bd      	mov	sp, r7
 80137a8:	bd80      	pop	{r7, pc}

080137aa <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 80137aa:	b580      	push	{r7, lr}
 80137ac:	b088      	sub	sp, #32
 80137ae:	af00      	add	r7, sp, #0
 80137b0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 80137b2:	2300      	movs	r3, #0
 80137b4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80137b6:	2300      	movs	r3, #0
 80137b8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 80137ba:	2300      	movs	r3, #0
 80137bc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80137be:	2300      	movs	r3, #0
 80137c0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80137c2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80137c6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80137c8:	f107 0308 	add.w	r3, r7, #8
 80137cc:	4619      	mov	r1, r3
 80137ce:	6878      	ldr	r0, [r7, #4]
 80137d0:	f7ff fda0 	bl	8013314 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 80137d4:	6878      	ldr	r0, [r7, #4]
 80137d6:	f000 fb97 	bl	8013f08 <SDMMC_GetCmdError>
 80137da:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80137dc:	69fb      	ldr	r3, [r7, #28]
}
 80137de:	4618      	mov	r0, r3
 80137e0:	3720      	adds	r7, #32
 80137e2:	46bd      	mov	sp, r7
 80137e4:	bd80      	pop	{r7, pc}

080137e6 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 80137e6:	b580      	push	{r7, lr}
 80137e8:	b088      	sub	sp, #32
 80137ea:	af00      	add	r7, sp, #0
 80137ec:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80137ee:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 80137f2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80137f4:	2308      	movs	r3, #8
 80137f6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80137f8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80137fc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80137fe:	2300      	movs	r3, #0
 8013800:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013802:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8013806:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013808:	f107 0308 	add.w	r3, r7, #8
 801380c:	4619      	mov	r1, r3
 801380e:	6878      	ldr	r0, [r7, #4]
 8013810:	f7ff fd80 	bl	8013314 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8013814:	6878      	ldr	r0, [r7, #4]
 8013816:	f000 fb29 	bl	8013e6c <SDMMC_GetCmdResp7>
 801381a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801381c:	69fb      	ldr	r3, [r7, #28]
}
 801381e:	4618      	mov	r0, r3
 8013820:	3720      	adds	r7, #32
 8013822:	46bd      	mov	sp, r7
 8013824:	bd80      	pop	{r7, pc}

08013826 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8013826:	b580      	push	{r7, lr}
 8013828:	b088      	sub	sp, #32
 801382a:	af00      	add	r7, sp, #0
 801382c:	6078      	str	r0, [r7, #4]
 801382e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8013830:	683b      	ldr	r3, [r7, #0]
 8013832:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8013834:	2337      	movs	r3, #55	@ 0x37
 8013836:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8013838:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801383c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801383e:	2300      	movs	r3, #0
 8013840:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013842:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8013846:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013848:	f107 0308 	add.w	r3, r7, #8
 801384c:	4619      	mov	r1, r3
 801384e:	6878      	ldr	r0, [r7, #4]
 8013850:	f7ff fd60 	bl	8013314 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8013854:	f241 3288 	movw	r2, #5000	@ 0x1388
 8013858:	2137      	movs	r1, #55	@ 0x37
 801385a:	6878      	ldr	r0, [r7, #4]
 801385c:	f000 f912 	bl	8013a84 <SDMMC_GetCmdResp1>
 8013860:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013862:	69fb      	ldr	r3, [r7, #28]
}
 8013864:	4618      	mov	r0, r3
 8013866:	3720      	adds	r7, #32
 8013868:	46bd      	mov	sp, r7
 801386a:	bd80      	pop	{r7, pc}

0801386c <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 801386c:	b580      	push	{r7, lr}
 801386e:	b088      	sub	sp, #32
 8013870:	af00      	add	r7, sp, #0
 8013872:	6078      	str	r0, [r7, #4]
 8013874:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8013876:	683b      	ldr	r3, [r7, #0]
 8013878:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 801387a:	2329      	movs	r3, #41	@ 0x29
 801387c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801387e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8013882:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013884:	2300      	movs	r3, #0
 8013886:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013888:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801388c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801388e:	f107 0308 	add.w	r3, r7, #8
 8013892:	4619      	mov	r1, r3
 8013894:	6878      	ldr	r0, [r7, #4]
 8013896:	f7ff fd3d 	bl	8013314 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 801389a:	6878      	ldr	r0, [r7, #4]
 801389c:	f000 fa2e 	bl	8013cfc <SDMMC_GetCmdResp3>
 80138a0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80138a2:	69fb      	ldr	r3, [r7, #28]
}
 80138a4:	4618      	mov	r0, r3
 80138a6:	3720      	adds	r7, #32
 80138a8:	46bd      	mov	sp, r7
 80138aa:	bd80      	pop	{r7, pc}

080138ac <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 80138ac:	b580      	push	{r7, lr}
 80138ae:	b088      	sub	sp, #32
 80138b0:	af00      	add	r7, sp, #0
 80138b2:	6078      	str	r0, [r7, #4]
 80138b4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80138b6:	683b      	ldr	r3, [r7, #0]
 80138b8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80138ba:	2306      	movs	r3, #6
 80138bc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80138be:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80138c2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80138c4:	2300      	movs	r3, #0
 80138c6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80138c8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80138cc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80138ce:	f107 0308 	add.w	r3, r7, #8
 80138d2:	4619      	mov	r1, r3
 80138d4:	6878      	ldr	r0, [r7, #4]
 80138d6:	f7ff fd1d 	bl	8013314 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 80138da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80138de:	2106      	movs	r1, #6
 80138e0:	6878      	ldr	r0, [r7, #4]
 80138e2:	f000 f8cf 	bl	8013a84 <SDMMC_GetCmdResp1>
 80138e6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80138e8:	69fb      	ldr	r3, [r7, #28]
}
 80138ea:	4618      	mov	r0, r3
 80138ec:	3720      	adds	r7, #32
 80138ee:	46bd      	mov	sp, r7
 80138f0:	bd80      	pop	{r7, pc}

080138f2 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 80138f2:	b580      	push	{r7, lr}
 80138f4:	b088      	sub	sp, #32
 80138f6:	af00      	add	r7, sp, #0
 80138f8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80138fa:	2300      	movs	r3, #0
 80138fc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80138fe:	2333      	movs	r3, #51	@ 0x33
 8013900:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8013902:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8013906:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013908:	2300      	movs	r3, #0
 801390a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801390c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8013910:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013912:	f107 0308 	add.w	r3, r7, #8
 8013916:	4619      	mov	r1, r3
 8013918:	6878      	ldr	r0, [r7, #4]
 801391a:	f7ff fcfb 	bl	8013314 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 801391e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8013922:	2133      	movs	r1, #51	@ 0x33
 8013924:	6878      	ldr	r0, [r7, #4]
 8013926:	f000 f8ad 	bl	8013a84 <SDMMC_GetCmdResp1>
 801392a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801392c:	69fb      	ldr	r3, [r7, #28]
}
 801392e:	4618      	mov	r0, r3
 8013930:	3720      	adds	r7, #32
 8013932:	46bd      	mov	sp, r7
 8013934:	bd80      	pop	{r7, pc}

08013936 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8013936:	b580      	push	{r7, lr}
 8013938:	b088      	sub	sp, #32
 801393a:	af00      	add	r7, sp, #0
 801393c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 801393e:	2300      	movs	r3, #0
 8013940:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8013942:	2302      	movs	r3, #2
 8013944:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8013946:	f44f 7340 	mov.w	r3, #768	@ 0x300
 801394a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801394c:	2300      	movs	r3, #0
 801394e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013950:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8013954:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013956:	f107 0308 	add.w	r3, r7, #8
 801395a:	4619      	mov	r1, r3
 801395c:	6878      	ldr	r0, [r7, #4]
 801395e:	f7ff fcd9 	bl	8013314 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8013962:	6878      	ldr	r0, [r7, #4]
 8013964:	f000 f980 	bl	8013c68 <SDMMC_GetCmdResp2>
 8013968:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801396a:	69fb      	ldr	r3, [r7, #28]
}
 801396c:	4618      	mov	r0, r3
 801396e:	3720      	adds	r7, #32
 8013970:	46bd      	mov	sp, r7
 8013972:	bd80      	pop	{r7, pc}

08013974 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8013974:	b580      	push	{r7, lr}
 8013976:	b088      	sub	sp, #32
 8013978:	af00      	add	r7, sp, #0
 801397a:	6078      	str	r0, [r7, #4]
 801397c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 801397e:	683b      	ldr	r3, [r7, #0]
 8013980:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8013982:	2309      	movs	r3, #9
 8013984:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8013986:	f44f 7340 	mov.w	r3, #768	@ 0x300
 801398a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801398c:	2300      	movs	r3, #0
 801398e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013990:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8013994:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013996:	f107 0308 	add.w	r3, r7, #8
 801399a:	4619      	mov	r1, r3
 801399c:	6878      	ldr	r0, [r7, #4]
 801399e:	f7ff fcb9 	bl	8013314 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80139a2:	6878      	ldr	r0, [r7, #4]
 80139a4:	f000 f960 	bl	8013c68 <SDMMC_GetCmdResp2>
 80139a8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80139aa:	69fb      	ldr	r3, [r7, #28]
}
 80139ac:	4618      	mov	r0, r3
 80139ae:	3720      	adds	r7, #32
 80139b0:	46bd      	mov	sp, r7
 80139b2:	bd80      	pop	{r7, pc}

080139b4 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 80139b4:	b580      	push	{r7, lr}
 80139b6:	b088      	sub	sp, #32
 80139b8:	af00      	add	r7, sp, #0
 80139ba:	6078      	str	r0, [r7, #4]
 80139bc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80139be:	2300      	movs	r3, #0
 80139c0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80139c2:	2303      	movs	r3, #3
 80139c4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80139c6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80139ca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80139cc:	2300      	movs	r3, #0
 80139ce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80139d0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80139d4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80139d6:	f107 0308 	add.w	r3, r7, #8
 80139da:	4619      	mov	r1, r3
 80139dc:	6878      	ldr	r0, [r7, #4]
 80139de:	f7ff fc99 	bl	8013314 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80139e2:	683a      	ldr	r2, [r7, #0]
 80139e4:	2103      	movs	r1, #3
 80139e6:	6878      	ldr	r0, [r7, #4]
 80139e8:	f000 f9c8 	bl	8013d7c <SDMMC_GetCmdResp6>
 80139ec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80139ee:	69fb      	ldr	r3, [r7, #28]
}
 80139f0:	4618      	mov	r0, r3
 80139f2:	3720      	adds	r7, #32
 80139f4:	46bd      	mov	sp, r7
 80139f6:	bd80      	pop	{r7, pc}

080139f8 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80139f8:	b580      	push	{r7, lr}
 80139fa:	b088      	sub	sp, #32
 80139fc:	af00      	add	r7, sp, #0
 80139fe:	6078      	str	r0, [r7, #4]
 8013a00:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8013a02:	683b      	ldr	r3, [r7, #0]
 8013a04:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8013a06:	230d      	movs	r3, #13
 8013a08:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8013a0a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8013a0e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013a10:	2300      	movs	r3, #0
 8013a12:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013a14:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8013a18:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013a1a:	f107 0308 	add.w	r3, r7, #8
 8013a1e:	4619      	mov	r1, r3
 8013a20:	6878      	ldr	r0, [r7, #4]
 8013a22:	f7ff fc77 	bl	8013314 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8013a26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8013a2a:	210d      	movs	r1, #13
 8013a2c:	6878      	ldr	r0, [r7, #4]
 8013a2e:	f000 f829 	bl	8013a84 <SDMMC_GetCmdResp1>
 8013a32:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013a34:	69fb      	ldr	r3, [r7, #28]
}
 8013a36:	4618      	mov	r0, r3
 8013a38:	3720      	adds	r7, #32
 8013a3a:	46bd      	mov	sp, r7
 8013a3c:	bd80      	pop	{r7, pc}

08013a3e <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 8013a3e:	b580      	push	{r7, lr}
 8013a40:	b088      	sub	sp, #32
 8013a42:	af00      	add	r7, sp, #0
 8013a44:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8013a46:	2300      	movs	r3, #0
 8013a48:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 8013a4a:	230d      	movs	r3, #13
 8013a4c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8013a4e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8013a52:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013a54:	2300      	movs	r3, #0
 8013a56:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013a58:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8013a5c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013a5e:	f107 0308 	add.w	r3, r7, #8
 8013a62:	4619      	mov	r1, r3
 8013a64:	6878      	ldr	r0, [r7, #4]
 8013a66:	f7ff fc55 	bl	8013314 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 8013a6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8013a6e:	210d      	movs	r1, #13
 8013a70:	6878      	ldr	r0, [r7, #4]
 8013a72:	f000 f807 	bl	8013a84 <SDMMC_GetCmdResp1>
 8013a76:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013a78:	69fb      	ldr	r3, [r7, #28]
}
 8013a7a:	4618      	mov	r0, r3
 8013a7c:	3720      	adds	r7, #32
 8013a7e:	46bd      	mov	sp, r7
 8013a80:	bd80      	pop	{r7, pc}
	...

08013a84 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8013a84:	b580      	push	{r7, lr}
 8013a86:	b088      	sub	sp, #32
 8013a88:	af00      	add	r7, sp, #0
 8013a8a:	60f8      	str	r0, [r7, #12]
 8013a8c:	460b      	mov	r3, r1
 8013a8e:	607a      	str	r2, [r7, #4]
 8013a90:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8013a92:	4b70      	ldr	r3, [pc, #448]	@ (8013c54 <SDMMC_GetCmdResp1+0x1d0>)
 8013a94:	681b      	ldr	r3, [r3, #0]
 8013a96:	4a70      	ldr	r2, [pc, #448]	@ (8013c58 <SDMMC_GetCmdResp1+0x1d4>)
 8013a98:	fba2 2303 	umull	r2, r3, r2, r3
 8013a9c:	0a5a      	lsrs	r2, r3, #9
 8013a9e:	687b      	ldr	r3, [r7, #4]
 8013aa0:	fb02 f303 	mul.w	r3, r2, r3
 8013aa4:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8013aa6:	69fb      	ldr	r3, [r7, #28]
 8013aa8:	1e5a      	subs	r2, r3, #1
 8013aaa:	61fa      	str	r2, [r7, #28]
 8013aac:	2b00      	cmp	r3, #0
 8013aae:	d102      	bne.n	8013ab6 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8013ab0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8013ab4:	e0c9      	b.n	8013c4a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8013ab6:	68fb      	ldr	r3, [r7, #12]
 8013ab8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013aba:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8013abc:	69ba      	ldr	r2, [r7, #24]
 8013abe:	4b67      	ldr	r3, [pc, #412]	@ (8013c5c <SDMMC_GetCmdResp1+0x1d8>)
 8013ac0:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8013ac2:	2b00      	cmp	r3, #0
 8013ac4:	d0ef      	beq.n	8013aa6 <SDMMC_GetCmdResp1+0x22>
 8013ac6:	69bb      	ldr	r3, [r7, #24]
 8013ac8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8013acc:	2b00      	cmp	r3, #0
 8013ace:	d1ea      	bne.n	8013aa6 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8013ad0:	68fb      	ldr	r3, [r7, #12]
 8013ad2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013ad4:	f003 0304 	and.w	r3, r3, #4
 8013ad8:	2b00      	cmp	r3, #0
 8013ada:	d004      	beq.n	8013ae6 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8013adc:	68fb      	ldr	r3, [r7, #12]
 8013ade:	2204      	movs	r2, #4
 8013ae0:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8013ae2:	2304      	movs	r3, #4
 8013ae4:	e0b1      	b.n	8013c4a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8013ae6:	68fb      	ldr	r3, [r7, #12]
 8013ae8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013aea:	f003 0301 	and.w	r3, r3, #1
 8013aee:	2b00      	cmp	r3, #0
 8013af0:	d004      	beq.n	8013afc <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8013af2:	68fb      	ldr	r3, [r7, #12]
 8013af4:	2201      	movs	r2, #1
 8013af6:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8013af8:	2301      	movs	r3, #1
 8013afa:	e0a6      	b.n	8013c4a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8013afc:	68fb      	ldr	r3, [r7, #12]
 8013afe:	4a58      	ldr	r2, [pc, #352]	@ (8013c60 <SDMMC_GetCmdResp1+0x1dc>)
 8013b00:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8013b02:	68f8      	ldr	r0, [r7, #12]
 8013b04:	f7ff fc6e 	bl	80133e4 <SDMMC_GetCommandResponse>
 8013b08:	4603      	mov	r3, r0
 8013b0a:	461a      	mov	r2, r3
 8013b0c:	7afb      	ldrb	r3, [r7, #11]
 8013b0e:	4293      	cmp	r3, r2
 8013b10:	d001      	beq.n	8013b16 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8013b12:	2301      	movs	r3, #1
 8013b14:	e099      	b.n	8013c4a <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8013b16:	2100      	movs	r1, #0
 8013b18:	68f8      	ldr	r0, [r7, #12]
 8013b1a:	f7ff fc71 	bl	8013400 <SDMMC_GetResponse>
 8013b1e:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8013b20:	697a      	ldr	r2, [r7, #20]
 8013b22:	4b50      	ldr	r3, [pc, #320]	@ (8013c64 <SDMMC_GetCmdResp1+0x1e0>)
 8013b24:	4013      	ands	r3, r2
 8013b26:	2b00      	cmp	r3, #0
 8013b28:	d101      	bne.n	8013b2e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8013b2a:	2300      	movs	r3, #0
 8013b2c:	e08d      	b.n	8013c4a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8013b2e:	697b      	ldr	r3, [r7, #20]
 8013b30:	2b00      	cmp	r3, #0
 8013b32:	da02      	bge.n	8013b3a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8013b34:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8013b38:	e087      	b.n	8013c4a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8013b3a:	697b      	ldr	r3, [r7, #20]
 8013b3c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8013b40:	2b00      	cmp	r3, #0
 8013b42:	d001      	beq.n	8013b48 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8013b44:	2340      	movs	r3, #64	@ 0x40
 8013b46:	e080      	b.n	8013c4a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8013b48:	697b      	ldr	r3, [r7, #20]
 8013b4a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8013b4e:	2b00      	cmp	r3, #0
 8013b50:	d001      	beq.n	8013b56 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8013b52:	2380      	movs	r3, #128	@ 0x80
 8013b54:	e079      	b.n	8013c4a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8013b56:	697b      	ldr	r3, [r7, #20]
 8013b58:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8013b5c:	2b00      	cmp	r3, #0
 8013b5e:	d002      	beq.n	8013b66 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8013b60:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8013b64:	e071      	b.n	8013c4a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8013b66:	697b      	ldr	r3, [r7, #20]
 8013b68:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8013b6c:	2b00      	cmp	r3, #0
 8013b6e:	d002      	beq.n	8013b76 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8013b70:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8013b74:	e069      	b.n	8013c4a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8013b76:	697b      	ldr	r3, [r7, #20]
 8013b78:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8013b7c:	2b00      	cmp	r3, #0
 8013b7e:	d002      	beq.n	8013b86 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8013b80:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8013b84:	e061      	b.n	8013c4a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8013b86:	697b      	ldr	r3, [r7, #20]
 8013b88:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8013b8c:	2b00      	cmp	r3, #0
 8013b8e:	d002      	beq.n	8013b96 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8013b90:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8013b94:	e059      	b.n	8013c4a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8013b96:	697b      	ldr	r3, [r7, #20]
 8013b98:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8013b9c:	2b00      	cmp	r3, #0
 8013b9e:	d002      	beq.n	8013ba6 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8013ba0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8013ba4:	e051      	b.n	8013c4a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8013ba6:	697b      	ldr	r3, [r7, #20]
 8013ba8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8013bac:	2b00      	cmp	r3, #0
 8013bae:	d002      	beq.n	8013bb6 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8013bb0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8013bb4:	e049      	b.n	8013c4a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8013bb6:	697b      	ldr	r3, [r7, #20]
 8013bb8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8013bbc:	2b00      	cmp	r3, #0
 8013bbe:	d002      	beq.n	8013bc6 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8013bc0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8013bc4:	e041      	b.n	8013c4a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8013bc6:	697b      	ldr	r3, [r7, #20]
 8013bc8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8013bcc:	2b00      	cmp	r3, #0
 8013bce:	d002      	beq.n	8013bd6 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8013bd0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8013bd4:	e039      	b.n	8013c4a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8013bd6:	697b      	ldr	r3, [r7, #20]
 8013bd8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8013bdc:	2b00      	cmp	r3, #0
 8013bde:	d002      	beq.n	8013be6 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8013be0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8013be4:	e031      	b.n	8013c4a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8013be6:	697b      	ldr	r3, [r7, #20]
 8013be8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8013bec:	2b00      	cmp	r3, #0
 8013bee:	d002      	beq.n	8013bf6 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8013bf0:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8013bf4:	e029      	b.n	8013c4a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8013bf6:	697b      	ldr	r3, [r7, #20]
 8013bf8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8013bfc:	2b00      	cmp	r3, #0
 8013bfe:	d002      	beq.n	8013c06 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8013c00:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8013c04:	e021      	b.n	8013c4a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8013c06:	697b      	ldr	r3, [r7, #20]
 8013c08:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8013c0c:	2b00      	cmp	r3, #0
 8013c0e:	d002      	beq.n	8013c16 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8013c10:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8013c14:	e019      	b.n	8013c4a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8013c16:	697b      	ldr	r3, [r7, #20]
 8013c18:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8013c1c:	2b00      	cmp	r3, #0
 8013c1e:	d002      	beq.n	8013c26 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8013c20:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8013c24:	e011      	b.n	8013c4a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8013c26:	697b      	ldr	r3, [r7, #20]
 8013c28:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8013c2c:	2b00      	cmp	r3, #0
 8013c2e:	d002      	beq.n	8013c36 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8013c30:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8013c34:	e009      	b.n	8013c4a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8013c36:	697b      	ldr	r3, [r7, #20]
 8013c38:	f003 0308 	and.w	r3, r3, #8
 8013c3c:	2b00      	cmp	r3, #0
 8013c3e:	d002      	beq.n	8013c46 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8013c40:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8013c44:	e001      	b.n	8013c4a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8013c46:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8013c4a:	4618      	mov	r0, r3
 8013c4c:	3720      	adds	r7, #32
 8013c4e:	46bd      	mov	sp, r7
 8013c50:	bd80      	pop	{r7, pc}
 8013c52:	bf00      	nop
 8013c54:	24000004 	.word	0x24000004
 8013c58:	10624dd3 	.word	0x10624dd3
 8013c5c:	00200045 	.word	0x00200045
 8013c60:	002000c5 	.word	0x002000c5
 8013c64:	fdffe008 	.word	0xfdffe008

08013c68 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8013c68:	b480      	push	{r7}
 8013c6a:	b085      	sub	sp, #20
 8013c6c:	af00      	add	r7, sp, #0
 8013c6e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8013c70:	4b1f      	ldr	r3, [pc, #124]	@ (8013cf0 <SDMMC_GetCmdResp2+0x88>)
 8013c72:	681b      	ldr	r3, [r3, #0]
 8013c74:	4a1f      	ldr	r2, [pc, #124]	@ (8013cf4 <SDMMC_GetCmdResp2+0x8c>)
 8013c76:	fba2 2303 	umull	r2, r3, r2, r3
 8013c7a:	0a5b      	lsrs	r3, r3, #9
 8013c7c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8013c80:	fb02 f303 	mul.w	r3, r2, r3
 8013c84:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8013c86:	68fb      	ldr	r3, [r7, #12]
 8013c88:	1e5a      	subs	r2, r3, #1
 8013c8a:	60fa      	str	r2, [r7, #12]
 8013c8c:	2b00      	cmp	r3, #0
 8013c8e:	d102      	bne.n	8013c96 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8013c90:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8013c94:	e026      	b.n	8013ce4 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8013c96:	687b      	ldr	r3, [r7, #4]
 8013c98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013c9a:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8013c9c:	68bb      	ldr	r3, [r7, #8]
 8013c9e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8013ca2:	2b00      	cmp	r3, #0
 8013ca4:	d0ef      	beq.n	8013c86 <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8013ca6:	68bb      	ldr	r3, [r7, #8]
 8013ca8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8013cac:	2b00      	cmp	r3, #0
 8013cae:	d1ea      	bne.n	8013c86 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8013cb0:	687b      	ldr	r3, [r7, #4]
 8013cb2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013cb4:	f003 0304 	and.w	r3, r3, #4
 8013cb8:	2b00      	cmp	r3, #0
 8013cba:	d004      	beq.n	8013cc6 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8013cbc:	687b      	ldr	r3, [r7, #4]
 8013cbe:	2204      	movs	r2, #4
 8013cc0:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8013cc2:	2304      	movs	r3, #4
 8013cc4:	e00e      	b.n	8013ce4 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8013cc6:	687b      	ldr	r3, [r7, #4]
 8013cc8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013cca:	f003 0301 	and.w	r3, r3, #1
 8013cce:	2b00      	cmp	r3, #0
 8013cd0:	d004      	beq.n	8013cdc <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8013cd2:	687b      	ldr	r3, [r7, #4]
 8013cd4:	2201      	movs	r2, #1
 8013cd6:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8013cd8:	2301      	movs	r3, #1
 8013cda:	e003      	b.n	8013ce4 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8013cdc:	687b      	ldr	r3, [r7, #4]
 8013cde:	4a06      	ldr	r2, [pc, #24]	@ (8013cf8 <SDMMC_GetCmdResp2+0x90>)
 8013ce0:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8013ce2:	2300      	movs	r3, #0
}
 8013ce4:	4618      	mov	r0, r3
 8013ce6:	3714      	adds	r7, #20
 8013ce8:	46bd      	mov	sp, r7
 8013cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cee:	4770      	bx	lr
 8013cf0:	24000004 	.word	0x24000004
 8013cf4:	10624dd3 	.word	0x10624dd3
 8013cf8:	002000c5 	.word	0x002000c5

08013cfc <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8013cfc:	b480      	push	{r7}
 8013cfe:	b085      	sub	sp, #20
 8013d00:	af00      	add	r7, sp, #0
 8013d02:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8013d04:	4b1a      	ldr	r3, [pc, #104]	@ (8013d70 <SDMMC_GetCmdResp3+0x74>)
 8013d06:	681b      	ldr	r3, [r3, #0]
 8013d08:	4a1a      	ldr	r2, [pc, #104]	@ (8013d74 <SDMMC_GetCmdResp3+0x78>)
 8013d0a:	fba2 2303 	umull	r2, r3, r2, r3
 8013d0e:	0a5b      	lsrs	r3, r3, #9
 8013d10:	f241 3288 	movw	r2, #5000	@ 0x1388
 8013d14:	fb02 f303 	mul.w	r3, r2, r3
 8013d18:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8013d1a:	68fb      	ldr	r3, [r7, #12]
 8013d1c:	1e5a      	subs	r2, r3, #1
 8013d1e:	60fa      	str	r2, [r7, #12]
 8013d20:	2b00      	cmp	r3, #0
 8013d22:	d102      	bne.n	8013d2a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8013d24:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8013d28:	e01b      	b.n	8013d62 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8013d2a:	687b      	ldr	r3, [r7, #4]
 8013d2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013d2e:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8013d30:	68bb      	ldr	r3, [r7, #8]
 8013d32:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8013d36:	2b00      	cmp	r3, #0
 8013d38:	d0ef      	beq.n	8013d1a <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8013d3a:	68bb      	ldr	r3, [r7, #8]
 8013d3c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8013d40:	2b00      	cmp	r3, #0
 8013d42:	d1ea      	bne.n	8013d1a <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8013d44:	687b      	ldr	r3, [r7, #4]
 8013d46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013d48:	f003 0304 	and.w	r3, r3, #4
 8013d4c:	2b00      	cmp	r3, #0
 8013d4e:	d004      	beq.n	8013d5a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8013d50:	687b      	ldr	r3, [r7, #4]
 8013d52:	2204      	movs	r2, #4
 8013d54:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8013d56:	2304      	movs	r3, #4
 8013d58:	e003      	b.n	8013d62 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8013d5a:	687b      	ldr	r3, [r7, #4]
 8013d5c:	4a06      	ldr	r2, [pc, #24]	@ (8013d78 <SDMMC_GetCmdResp3+0x7c>)
 8013d5e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8013d60:	2300      	movs	r3, #0
}
 8013d62:	4618      	mov	r0, r3
 8013d64:	3714      	adds	r7, #20
 8013d66:	46bd      	mov	sp, r7
 8013d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d6c:	4770      	bx	lr
 8013d6e:	bf00      	nop
 8013d70:	24000004 	.word	0x24000004
 8013d74:	10624dd3 	.word	0x10624dd3
 8013d78:	002000c5 	.word	0x002000c5

08013d7c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8013d7c:	b580      	push	{r7, lr}
 8013d7e:	b088      	sub	sp, #32
 8013d80:	af00      	add	r7, sp, #0
 8013d82:	60f8      	str	r0, [r7, #12]
 8013d84:	460b      	mov	r3, r1
 8013d86:	607a      	str	r2, [r7, #4]
 8013d88:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8013d8a:	4b35      	ldr	r3, [pc, #212]	@ (8013e60 <SDMMC_GetCmdResp6+0xe4>)
 8013d8c:	681b      	ldr	r3, [r3, #0]
 8013d8e:	4a35      	ldr	r2, [pc, #212]	@ (8013e64 <SDMMC_GetCmdResp6+0xe8>)
 8013d90:	fba2 2303 	umull	r2, r3, r2, r3
 8013d94:	0a5b      	lsrs	r3, r3, #9
 8013d96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8013d9a:	fb02 f303 	mul.w	r3, r2, r3
 8013d9e:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8013da0:	69fb      	ldr	r3, [r7, #28]
 8013da2:	1e5a      	subs	r2, r3, #1
 8013da4:	61fa      	str	r2, [r7, #28]
 8013da6:	2b00      	cmp	r3, #0
 8013da8:	d102      	bne.n	8013db0 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8013daa:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8013dae:	e052      	b.n	8013e56 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8013db0:	68fb      	ldr	r3, [r7, #12]
 8013db2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013db4:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8013db6:	69bb      	ldr	r3, [r7, #24]
 8013db8:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8013dbc:	2b00      	cmp	r3, #0
 8013dbe:	d0ef      	beq.n	8013da0 <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8013dc0:	69bb      	ldr	r3, [r7, #24]
 8013dc2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8013dc6:	2b00      	cmp	r3, #0
 8013dc8:	d1ea      	bne.n	8013da0 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8013dca:	68fb      	ldr	r3, [r7, #12]
 8013dcc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013dce:	f003 0304 	and.w	r3, r3, #4
 8013dd2:	2b00      	cmp	r3, #0
 8013dd4:	d004      	beq.n	8013de0 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8013dd6:	68fb      	ldr	r3, [r7, #12]
 8013dd8:	2204      	movs	r2, #4
 8013dda:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8013ddc:	2304      	movs	r3, #4
 8013dde:	e03a      	b.n	8013e56 <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8013de0:	68fb      	ldr	r3, [r7, #12]
 8013de2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013de4:	f003 0301 	and.w	r3, r3, #1
 8013de8:	2b00      	cmp	r3, #0
 8013dea:	d004      	beq.n	8013df6 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8013dec:	68fb      	ldr	r3, [r7, #12]
 8013dee:	2201      	movs	r2, #1
 8013df0:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8013df2:	2301      	movs	r3, #1
 8013df4:	e02f      	b.n	8013e56 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8013df6:	68f8      	ldr	r0, [r7, #12]
 8013df8:	f7ff faf4 	bl	80133e4 <SDMMC_GetCommandResponse>
 8013dfc:	4603      	mov	r3, r0
 8013dfe:	461a      	mov	r2, r3
 8013e00:	7afb      	ldrb	r3, [r7, #11]
 8013e02:	4293      	cmp	r3, r2
 8013e04:	d001      	beq.n	8013e0a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8013e06:	2301      	movs	r3, #1
 8013e08:	e025      	b.n	8013e56 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8013e0a:	68fb      	ldr	r3, [r7, #12]
 8013e0c:	4a16      	ldr	r2, [pc, #88]	@ (8013e68 <SDMMC_GetCmdResp6+0xec>)
 8013e0e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8013e10:	2100      	movs	r1, #0
 8013e12:	68f8      	ldr	r0, [r7, #12]
 8013e14:	f7ff faf4 	bl	8013400 <SDMMC_GetResponse>
 8013e18:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 8013e1a:	697b      	ldr	r3, [r7, #20]
 8013e1c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8013e20:	2b00      	cmp	r3, #0
 8013e22:	d106      	bne.n	8013e32 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 8013e24:	697b      	ldr	r3, [r7, #20]
 8013e26:	0c1b      	lsrs	r3, r3, #16
 8013e28:	b29a      	uxth	r2, r3
 8013e2a:	687b      	ldr	r3, [r7, #4]
 8013e2c:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8013e2e:	2300      	movs	r3, #0
 8013e30:	e011      	b.n	8013e56 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8013e32:	697b      	ldr	r3, [r7, #20]
 8013e34:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8013e38:	2b00      	cmp	r3, #0
 8013e3a:	d002      	beq.n	8013e42 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8013e3c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8013e40:	e009      	b.n	8013e56 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8013e42:	697b      	ldr	r3, [r7, #20]
 8013e44:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8013e48:	2b00      	cmp	r3, #0
 8013e4a:	d002      	beq.n	8013e52 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8013e4c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8013e50:	e001      	b.n	8013e56 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8013e52:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8013e56:	4618      	mov	r0, r3
 8013e58:	3720      	adds	r7, #32
 8013e5a:	46bd      	mov	sp, r7
 8013e5c:	bd80      	pop	{r7, pc}
 8013e5e:	bf00      	nop
 8013e60:	24000004 	.word	0x24000004
 8013e64:	10624dd3 	.word	0x10624dd3
 8013e68:	002000c5 	.word	0x002000c5

08013e6c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8013e6c:	b480      	push	{r7}
 8013e6e:	b085      	sub	sp, #20
 8013e70:	af00      	add	r7, sp, #0
 8013e72:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8013e74:	4b22      	ldr	r3, [pc, #136]	@ (8013f00 <SDMMC_GetCmdResp7+0x94>)
 8013e76:	681b      	ldr	r3, [r3, #0]
 8013e78:	4a22      	ldr	r2, [pc, #136]	@ (8013f04 <SDMMC_GetCmdResp7+0x98>)
 8013e7a:	fba2 2303 	umull	r2, r3, r2, r3
 8013e7e:	0a5b      	lsrs	r3, r3, #9
 8013e80:	f241 3288 	movw	r2, #5000	@ 0x1388
 8013e84:	fb02 f303 	mul.w	r3, r2, r3
 8013e88:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8013e8a:	68fb      	ldr	r3, [r7, #12]
 8013e8c:	1e5a      	subs	r2, r3, #1
 8013e8e:	60fa      	str	r2, [r7, #12]
 8013e90:	2b00      	cmp	r3, #0
 8013e92:	d102      	bne.n	8013e9a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8013e94:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8013e98:	e02c      	b.n	8013ef4 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8013e9a:	687b      	ldr	r3, [r7, #4]
 8013e9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013e9e:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8013ea0:	68bb      	ldr	r3, [r7, #8]
 8013ea2:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8013ea6:	2b00      	cmp	r3, #0
 8013ea8:	d0ef      	beq.n	8013e8a <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8013eaa:	68bb      	ldr	r3, [r7, #8]
 8013eac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8013eb0:	2b00      	cmp	r3, #0
 8013eb2:	d1ea      	bne.n	8013e8a <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8013eb4:	687b      	ldr	r3, [r7, #4]
 8013eb6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013eb8:	f003 0304 	and.w	r3, r3, #4
 8013ebc:	2b00      	cmp	r3, #0
 8013ebe:	d004      	beq.n	8013eca <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8013ec0:	687b      	ldr	r3, [r7, #4]
 8013ec2:	2204      	movs	r2, #4
 8013ec4:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8013ec6:	2304      	movs	r3, #4
 8013ec8:	e014      	b.n	8013ef4 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8013eca:	687b      	ldr	r3, [r7, #4]
 8013ecc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013ece:	f003 0301 	and.w	r3, r3, #1
 8013ed2:	2b00      	cmp	r3, #0
 8013ed4:	d004      	beq.n	8013ee0 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8013ed6:	687b      	ldr	r3, [r7, #4]
 8013ed8:	2201      	movs	r2, #1
 8013eda:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8013edc:	2301      	movs	r3, #1
 8013ede:	e009      	b.n	8013ef4 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8013ee0:	687b      	ldr	r3, [r7, #4]
 8013ee2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013ee4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8013ee8:	2b00      	cmp	r3, #0
 8013eea:	d002      	beq.n	8013ef2 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8013eec:	687b      	ldr	r3, [r7, #4]
 8013eee:	2240      	movs	r2, #64	@ 0x40
 8013ef0:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8013ef2:	2300      	movs	r3, #0

}
 8013ef4:	4618      	mov	r0, r3
 8013ef6:	3714      	adds	r7, #20
 8013ef8:	46bd      	mov	sp, r7
 8013efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013efe:	4770      	bx	lr
 8013f00:	24000004 	.word	0x24000004
 8013f04:	10624dd3 	.word	0x10624dd3

08013f08 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8013f08:	b480      	push	{r7}
 8013f0a:	b085      	sub	sp, #20
 8013f0c:	af00      	add	r7, sp, #0
 8013f0e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8013f10:	4b11      	ldr	r3, [pc, #68]	@ (8013f58 <SDMMC_GetCmdError+0x50>)
 8013f12:	681b      	ldr	r3, [r3, #0]
 8013f14:	4a11      	ldr	r2, [pc, #68]	@ (8013f5c <SDMMC_GetCmdError+0x54>)
 8013f16:	fba2 2303 	umull	r2, r3, r2, r3
 8013f1a:	0a5b      	lsrs	r3, r3, #9
 8013f1c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8013f20:	fb02 f303 	mul.w	r3, r2, r3
 8013f24:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8013f26:	68fb      	ldr	r3, [r7, #12]
 8013f28:	1e5a      	subs	r2, r3, #1
 8013f2a:	60fa      	str	r2, [r7, #12]
 8013f2c:	2b00      	cmp	r3, #0
 8013f2e:	d102      	bne.n	8013f36 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8013f30:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8013f34:	e009      	b.n	8013f4a <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8013f36:	687b      	ldr	r3, [r7, #4]
 8013f38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013f3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8013f3e:	2b00      	cmp	r3, #0
 8013f40:	d0f1      	beq.n	8013f26 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8013f42:	687b      	ldr	r3, [r7, #4]
 8013f44:	4a06      	ldr	r2, [pc, #24]	@ (8013f60 <SDMMC_GetCmdError+0x58>)
 8013f46:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 8013f48:	2300      	movs	r3, #0
}
 8013f4a:	4618      	mov	r0, r3
 8013f4c:	3714      	adds	r7, #20
 8013f4e:	46bd      	mov	sp, r7
 8013f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f54:	4770      	bx	lr
 8013f56:	bf00      	nop
 8013f58:	24000004 	.word	0x24000004
 8013f5c:	10624dd3 	.word	0x10624dd3
 8013f60:	002000c5 	.word	0x002000c5

08013f64 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8013f64:	b480      	push	{r7}
 8013f66:	b087      	sub	sp, #28
 8013f68:	af00      	add	r7, sp, #0
 8013f6a:	60f8      	str	r0, [r7, #12]
 8013f6c:	60b9      	str	r1, [r7, #8]
 8013f6e:	4613      	mov	r3, r2
 8013f70:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8013f72:	79fb      	ldrb	r3, [r7, #7]
 8013f74:	2b02      	cmp	r3, #2
 8013f76:	d165      	bne.n	8014044 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8013f78:	68bb      	ldr	r3, [r7, #8]
 8013f7a:	4a41      	ldr	r2, [pc, #260]	@ (8014080 <USB_SetTurnaroundTime+0x11c>)
 8013f7c:	4293      	cmp	r3, r2
 8013f7e:	d906      	bls.n	8013f8e <USB_SetTurnaroundTime+0x2a>
 8013f80:	68bb      	ldr	r3, [r7, #8]
 8013f82:	4a40      	ldr	r2, [pc, #256]	@ (8014084 <USB_SetTurnaroundTime+0x120>)
 8013f84:	4293      	cmp	r3, r2
 8013f86:	d202      	bcs.n	8013f8e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8013f88:	230f      	movs	r3, #15
 8013f8a:	617b      	str	r3, [r7, #20]
 8013f8c:	e062      	b.n	8014054 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8013f8e:	68bb      	ldr	r3, [r7, #8]
 8013f90:	4a3c      	ldr	r2, [pc, #240]	@ (8014084 <USB_SetTurnaroundTime+0x120>)
 8013f92:	4293      	cmp	r3, r2
 8013f94:	d306      	bcc.n	8013fa4 <USB_SetTurnaroundTime+0x40>
 8013f96:	68bb      	ldr	r3, [r7, #8]
 8013f98:	4a3b      	ldr	r2, [pc, #236]	@ (8014088 <USB_SetTurnaroundTime+0x124>)
 8013f9a:	4293      	cmp	r3, r2
 8013f9c:	d202      	bcs.n	8013fa4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8013f9e:	230e      	movs	r3, #14
 8013fa0:	617b      	str	r3, [r7, #20]
 8013fa2:	e057      	b.n	8014054 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8013fa4:	68bb      	ldr	r3, [r7, #8]
 8013fa6:	4a38      	ldr	r2, [pc, #224]	@ (8014088 <USB_SetTurnaroundTime+0x124>)
 8013fa8:	4293      	cmp	r3, r2
 8013faa:	d306      	bcc.n	8013fba <USB_SetTurnaroundTime+0x56>
 8013fac:	68bb      	ldr	r3, [r7, #8]
 8013fae:	4a37      	ldr	r2, [pc, #220]	@ (801408c <USB_SetTurnaroundTime+0x128>)
 8013fb0:	4293      	cmp	r3, r2
 8013fb2:	d202      	bcs.n	8013fba <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8013fb4:	230d      	movs	r3, #13
 8013fb6:	617b      	str	r3, [r7, #20]
 8013fb8:	e04c      	b.n	8014054 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8013fba:	68bb      	ldr	r3, [r7, #8]
 8013fbc:	4a33      	ldr	r2, [pc, #204]	@ (801408c <USB_SetTurnaroundTime+0x128>)
 8013fbe:	4293      	cmp	r3, r2
 8013fc0:	d306      	bcc.n	8013fd0 <USB_SetTurnaroundTime+0x6c>
 8013fc2:	68bb      	ldr	r3, [r7, #8]
 8013fc4:	4a32      	ldr	r2, [pc, #200]	@ (8014090 <USB_SetTurnaroundTime+0x12c>)
 8013fc6:	4293      	cmp	r3, r2
 8013fc8:	d802      	bhi.n	8013fd0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8013fca:	230c      	movs	r3, #12
 8013fcc:	617b      	str	r3, [r7, #20]
 8013fce:	e041      	b.n	8014054 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8013fd0:	68bb      	ldr	r3, [r7, #8]
 8013fd2:	4a2f      	ldr	r2, [pc, #188]	@ (8014090 <USB_SetTurnaroundTime+0x12c>)
 8013fd4:	4293      	cmp	r3, r2
 8013fd6:	d906      	bls.n	8013fe6 <USB_SetTurnaroundTime+0x82>
 8013fd8:	68bb      	ldr	r3, [r7, #8]
 8013fda:	4a2e      	ldr	r2, [pc, #184]	@ (8014094 <USB_SetTurnaroundTime+0x130>)
 8013fdc:	4293      	cmp	r3, r2
 8013fde:	d802      	bhi.n	8013fe6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8013fe0:	230b      	movs	r3, #11
 8013fe2:	617b      	str	r3, [r7, #20]
 8013fe4:	e036      	b.n	8014054 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8013fe6:	68bb      	ldr	r3, [r7, #8]
 8013fe8:	4a2a      	ldr	r2, [pc, #168]	@ (8014094 <USB_SetTurnaroundTime+0x130>)
 8013fea:	4293      	cmp	r3, r2
 8013fec:	d906      	bls.n	8013ffc <USB_SetTurnaroundTime+0x98>
 8013fee:	68bb      	ldr	r3, [r7, #8]
 8013ff0:	4a29      	ldr	r2, [pc, #164]	@ (8014098 <USB_SetTurnaroundTime+0x134>)
 8013ff2:	4293      	cmp	r3, r2
 8013ff4:	d802      	bhi.n	8013ffc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8013ff6:	230a      	movs	r3, #10
 8013ff8:	617b      	str	r3, [r7, #20]
 8013ffa:	e02b      	b.n	8014054 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8013ffc:	68bb      	ldr	r3, [r7, #8]
 8013ffe:	4a26      	ldr	r2, [pc, #152]	@ (8014098 <USB_SetTurnaroundTime+0x134>)
 8014000:	4293      	cmp	r3, r2
 8014002:	d906      	bls.n	8014012 <USB_SetTurnaroundTime+0xae>
 8014004:	68bb      	ldr	r3, [r7, #8]
 8014006:	4a25      	ldr	r2, [pc, #148]	@ (801409c <USB_SetTurnaroundTime+0x138>)
 8014008:	4293      	cmp	r3, r2
 801400a:	d202      	bcs.n	8014012 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 801400c:	2309      	movs	r3, #9
 801400e:	617b      	str	r3, [r7, #20]
 8014010:	e020      	b.n	8014054 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8014012:	68bb      	ldr	r3, [r7, #8]
 8014014:	4a21      	ldr	r2, [pc, #132]	@ (801409c <USB_SetTurnaroundTime+0x138>)
 8014016:	4293      	cmp	r3, r2
 8014018:	d306      	bcc.n	8014028 <USB_SetTurnaroundTime+0xc4>
 801401a:	68bb      	ldr	r3, [r7, #8]
 801401c:	4a20      	ldr	r2, [pc, #128]	@ (80140a0 <USB_SetTurnaroundTime+0x13c>)
 801401e:	4293      	cmp	r3, r2
 8014020:	d802      	bhi.n	8014028 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8014022:	2308      	movs	r3, #8
 8014024:	617b      	str	r3, [r7, #20]
 8014026:	e015      	b.n	8014054 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8014028:	68bb      	ldr	r3, [r7, #8]
 801402a:	4a1d      	ldr	r2, [pc, #116]	@ (80140a0 <USB_SetTurnaroundTime+0x13c>)
 801402c:	4293      	cmp	r3, r2
 801402e:	d906      	bls.n	801403e <USB_SetTurnaroundTime+0xda>
 8014030:	68bb      	ldr	r3, [r7, #8]
 8014032:	4a1c      	ldr	r2, [pc, #112]	@ (80140a4 <USB_SetTurnaroundTime+0x140>)
 8014034:	4293      	cmp	r3, r2
 8014036:	d202      	bcs.n	801403e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8014038:	2307      	movs	r3, #7
 801403a:	617b      	str	r3, [r7, #20]
 801403c:	e00a      	b.n	8014054 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 801403e:	2306      	movs	r3, #6
 8014040:	617b      	str	r3, [r7, #20]
 8014042:	e007      	b.n	8014054 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8014044:	79fb      	ldrb	r3, [r7, #7]
 8014046:	2b00      	cmp	r3, #0
 8014048:	d102      	bne.n	8014050 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 801404a:	2309      	movs	r3, #9
 801404c:	617b      	str	r3, [r7, #20]
 801404e:	e001      	b.n	8014054 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8014050:	2309      	movs	r3, #9
 8014052:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8014054:	68fb      	ldr	r3, [r7, #12]
 8014056:	68db      	ldr	r3, [r3, #12]
 8014058:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 801405c:	68fb      	ldr	r3, [r7, #12]
 801405e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8014060:	68fb      	ldr	r3, [r7, #12]
 8014062:	68da      	ldr	r2, [r3, #12]
 8014064:	697b      	ldr	r3, [r7, #20]
 8014066:	029b      	lsls	r3, r3, #10
 8014068:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 801406c:	431a      	orrs	r2, r3
 801406e:	68fb      	ldr	r3, [r7, #12]
 8014070:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8014072:	2300      	movs	r3, #0
}
 8014074:	4618      	mov	r0, r3
 8014076:	371c      	adds	r7, #28
 8014078:	46bd      	mov	sp, r7
 801407a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801407e:	4770      	bx	lr
 8014080:	00d8acbf 	.word	0x00d8acbf
 8014084:	00e4e1c0 	.word	0x00e4e1c0
 8014088:	00f42400 	.word	0x00f42400
 801408c:	01067380 	.word	0x01067380
 8014090:	011a499f 	.word	0x011a499f
 8014094:	01312cff 	.word	0x01312cff
 8014098:	014ca43f 	.word	0x014ca43f
 801409c:	016e3600 	.word	0x016e3600
 80140a0:	01a6ab1f 	.word	0x01a6ab1f
 80140a4:	01e84800 	.word	0x01e84800

080140a8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80140a8:	b480      	push	{r7}
 80140aa:	b085      	sub	sp, #20
 80140ac:	af00      	add	r7, sp, #0
 80140ae:	6078      	str	r0, [r7, #4]
 80140b0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80140b2:	2300      	movs	r3, #0
 80140b4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80140b6:	68fb      	ldr	r3, [r7, #12]
 80140b8:	3301      	adds	r3, #1
 80140ba:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80140bc:	68fb      	ldr	r3, [r7, #12]
 80140be:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80140c2:	d901      	bls.n	80140c8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80140c4:	2303      	movs	r3, #3
 80140c6:	e01b      	b.n	8014100 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80140c8:	687b      	ldr	r3, [r7, #4]
 80140ca:	691b      	ldr	r3, [r3, #16]
 80140cc:	2b00      	cmp	r3, #0
 80140ce:	daf2      	bge.n	80140b6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80140d0:	2300      	movs	r3, #0
 80140d2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80140d4:	683b      	ldr	r3, [r7, #0]
 80140d6:	019b      	lsls	r3, r3, #6
 80140d8:	f043 0220 	orr.w	r2, r3, #32
 80140dc:	687b      	ldr	r3, [r7, #4]
 80140de:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80140e0:	68fb      	ldr	r3, [r7, #12]
 80140e2:	3301      	adds	r3, #1
 80140e4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80140e6:	68fb      	ldr	r3, [r7, #12]
 80140e8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80140ec:	d901      	bls.n	80140f2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80140ee:	2303      	movs	r3, #3
 80140f0:	e006      	b.n	8014100 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80140f2:	687b      	ldr	r3, [r7, #4]
 80140f4:	691b      	ldr	r3, [r3, #16]
 80140f6:	f003 0320 	and.w	r3, r3, #32
 80140fa:	2b20      	cmp	r3, #32
 80140fc:	d0f0      	beq.n	80140e0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80140fe:	2300      	movs	r3, #0
}
 8014100:	4618      	mov	r0, r3
 8014102:	3714      	adds	r7, #20
 8014104:	46bd      	mov	sp, r7
 8014106:	f85d 7b04 	ldr.w	r7, [sp], #4
 801410a:	4770      	bx	lr

0801410c <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 801410c:	b480      	push	{r7}
 801410e:	b087      	sub	sp, #28
 8014110:	af00      	add	r7, sp, #0
 8014112:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014114:	687b      	ldr	r3, [r7, #4]
 8014116:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8014118:	693b      	ldr	r3, [r7, #16]
 801411a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801411e:	689b      	ldr	r3, [r3, #8]
 8014120:	f003 0306 	and.w	r3, r3, #6
 8014124:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8014126:	68fb      	ldr	r3, [r7, #12]
 8014128:	2b00      	cmp	r3, #0
 801412a:	d102      	bne.n	8014132 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 801412c:	2300      	movs	r3, #0
 801412e:	75fb      	strb	r3, [r7, #23]
 8014130:	e00a      	b.n	8014148 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8014132:	68fb      	ldr	r3, [r7, #12]
 8014134:	2b02      	cmp	r3, #2
 8014136:	d002      	beq.n	801413e <USB_GetDevSpeed+0x32>
 8014138:	68fb      	ldr	r3, [r7, #12]
 801413a:	2b06      	cmp	r3, #6
 801413c:	d102      	bne.n	8014144 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 801413e:	2302      	movs	r3, #2
 8014140:	75fb      	strb	r3, [r7, #23]
 8014142:	e001      	b.n	8014148 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8014144:	230f      	movs	r3, #15
 8014146:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8014148:	7dfb      	ldrb	r3, [r7, #23]
}
 801414a:	4618      	mov	r0, r3
 801414c:	371c      	adds	r7, #28
 801414e:	46bd      	mov	sp, r7
 8014150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014154:	4770      	bx	lr
	...

08014158 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8014158:	b480      	push	{r7}
 801415a:	b085      	sub	sp, #20
 801415c:	af00      	add	r7, sp, #0
 801415e:	6078      	str	r0, [r7, #4]
 8014160:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014162:	687b      	ldr	r3, [r7, #4]
 8014164:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8014166:	683b      	ldr	r3, [r7, #0]
 8014168:	781b      	ldrb	r3, [r3, #0]
 801416a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 801416c:	683b      	ldr	r3, [r7, #0]
 801416e:	785b      	ldrb	r3, [r3, #1]
 8014170:	2b01      	cmp	r3, #1
 8014172:	d139      	bne.n	80141e8 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8014174:	68fb      	ldr	r3, [r7, #12]
 8014176:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801417a:	69da      	ldr	r2, [r3, #28]
 801417c:	683b      	ldr	r3, [r7, #0]
 801417e:	781b      	ldrb	r3, [r3, #0]
 8014180:	f003 030f 	and.w	r3, r3, #15
 8014184:	2101      	movs	r1, #1
 8014186:	fa01 f303 	lsl.w	r3, r1, r3
 801418a:	b29b      	uxth	r3, r3
 801418c:	68f9      	ldr	r1, [r7, #12]
 801418e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8014192:	4313      	orrs	r3, r2
 8014194:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8014196:	68bb      	ldr	r3, [r7, #8]
 8014198:	015a      	lsls	r2, r3, #5
 801419a:	68fb      	ldr	r3, [r7, #12]
 801419c:	4413      	add	r3, r2
 801419e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80141a2:	681b      	ldr	r3, [r3, #0]
 80141a4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80141a8:	2b00      	cmp	r3, #0
 80141aa:	d153      	bne.n	8014254 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80141ac:	68bb      	ldr	r3, [r7, #8]
 80141ae:	015a      	lsls	r2, r3, #5
 80141b0:	68fb      	ldr	r3, [r7, #12]
 80141b2:	4413      	add	r3, r2
 80141b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80141b8:	681a      	ldr	r2, [r3, #0]
 80141ba:	683b      	ldr	r3, [r7, #0]
 80141bc:	689b      	ldr	r3, [r3, #8]
 80141be:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80141c2:	683b      	ldr	r3, [r7, #0]
 80141c4:	791b      	ldrb	r3, [r3, #4]
 80141c6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80141c8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80141ca:	68bb      	ldr	r3, [r7, #8]
 80141cc:	059b      	lsls	r3, r3, #22
 80141ce:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80141d0:	431a      	orrs	r2, r3
 80141d2:	68bb      	ldr	r3, [r7, #8]
 80141d4:	0159      	lsls	r1, r3, #5
 80141d6:	68fb      	ldr	r3, [r7, #12]
 80141d8:	440b      	add	r3, r1
 80141da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80141de:	4619      	mov	r1, r3
 80141e0:	4b20      	ldr	r3, [pc, #128]	@ (8014264 <USB_ActivateEndpoint+0x10c>)
 80141e2:	4313      	orrs	r3, r2
 80141e4:	600b      	str	r3, [r1, #0]
 80141e6:	e035      	b.n	8014254 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80141e8:	68fb      	ldr	r3, [r7, #12]
 80141ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80141ee:	69da      	ldr	r2, [r3, #28]
 80141f0:	683b      	ldr	r3, [r7, #0]
 80141f2:	781b      	ldrb	r3, [r3, #0]
 80141f4:	f003 030f 	and.w	r3, r3, #15
 80141f8:	2101      	movs	r1, #1
 80141fa:	fa01 f303 	lsl.w	r3, r1, r3
 80141fe:	041b      	lsls	r3, r3, #16
 8014200:	68f9      	ldr	r1, [r7, #12]
 8014202:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8014206:	4313      	orrs	r3, r2
 8014208:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 801420a:	68bb      	ldr	r3, [r7, #8]
 801420c:	015a      	lsls	r2, r3, #5
 801420e:	68fb      	ldr	r3, [r7, #12]
 8014210:	4413      	add	r3, r2
 8014212:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014216:	681b      	ldr	r3, [r3, #0]
 8014218:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 801421c:	2b00      	cmp	r3, #0
 801421e:	d119      	bne.n	8014254 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8014220:	68bb      	ldr	r3, [r7, #8]
 8014222:	015a      	lsls	r2, r3, #5
 8014224:	68fb      	ldr	r3, [r7, #12]
 8014226:	4413      	add	r3, r2
 8014228:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801422c:	681a      	ldr	r2, [r3, #0]
 801422e:	683b      	ldr	r3, [r7, #0]
 8014230:	689b      	ldr	r3, [r3, #8]
 8014232:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8014236:	683b      	ldr	r3, [r7, #0]
 8014238:	791b      	ldrb	r3, [r3, #4]
 801423a:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 801423c:	430b      	orrs	r3, r1
 801423e:	431a      	orrs	r2, r3
 8014240:	68bb      	ldr	r3, [r7, #8]
 8014242:	0159      	lsls	r1, r3, #5
 8014244:	68fb      	ldr	r3, [r7, #12]
 8014246:	440b      	add	r3, r1
 8014248:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801424c:	4619      	mov	r1, r3
 801424e:	4b05      	ldr	r3, [pc, #20]	@ (8014264 <USB_ActivateEndpoint+0x10c>)
 8014250:	4313      	orrs	r3, r2
 8014252:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8014254:	2300      	movs	r3, #0
}
 8014256:	4618      	mov	r0, r3
 8014258:	3714      	adds	r7, #20
 801425a:	46bd      	mov	sp, r7
 801425c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014260:	4770      	bx	lr
 8014262:	bf00      	nop
 8014264:	10008000 	.word	0x10008000

08014268 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8014268:	b580      	push	{r7, lr}
 801426a:	b08a      	sub	sp, #40	@ 0x28
 801426c:	af02      	add	r7, sp, #8
 801426e:	60f8      	str	r0, [r7, #12]
 8014270:	60b9      	str	r1, [r7, #8]
 8014272:	4613      	mov	r3, r2
 8014274:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014276:	68fb      	ldr	r3, [r7, #12]
 8014278:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 801427a:	68bb      	ldr	r3, [r7, #8]
 801427c:	781b      	ldrb	r3, [r3, #0]
 801427e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8014280:	68bb      	ldr	r3, [r7, #8]
 8014282:	785b      	ldrb	r3, [r3, #1]
 8014284:	2b01      	cmp	r3, #1
 8014286:	f040 8185 	bne.w	8014594 <USB_EPStartXfer+0x32c>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 801428a:	68bb      	ldr	r3, [r7, #8]
 801428c:	691b      	ldr	r3, [r3, #16]
 801428e:	2b00      	cmp	r3, #0
 8014290:	d132      	bne.n	80142f8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8014292:	69bb      	ldr	r3, [r7, #24]
 8014294:	015a      	lsls	r2, r3, #5
 8014296:	69fb      	ldr	r3, [r7, #28]
 8014298:	4413      	add	r3, r2
 801429a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801429e:	691a      	ldr	r2, [r3, #16]
 80142a0:	69bb      	ldr	r3, [r7, #24]
 80142a2:	0159      	lsls	r1, r3, #5
 80142a4:	69fb      	ldr	r3, [r7, #28]
 80142a6:	440b      	add	r3, r1
 80142a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80142ac:	4619      	mov	r1, r3
 80142ae:	4ba7      	ldr	r3, [pc, #668]	@ (801454c <USB_EPStartXfer+0x2e4>)
 80142b0:	4013      	ands	r3, r2
 80142b2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80142b4:	69bb      	ldr	r3, [r7, #24]
 80142b6:	015a      	lsls	r2, r3, #5
 80142b8:	69fb      	ldr	r3, [r7, #28]
 80142ba:	4413      	add	r3, r2
 80142bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80142c0:	691b      	ldr	r3, [r3, #16]
 80142c2:	69ba      	ldr	r2, [r7, #24]
 80142c4:	0151      	lsls	r1, r2, #5
 80142c6:	69fa      	ldr	r2, [r7, #28]
 80142c8:	440a      	add	r2, r1
 80142ca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80142ce:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80142d2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80142d4:	69bb      	ldr	r3, [r7, #24]
 80142d6:	015a      	lsls	r2, r3, #5
 80142d8:	69fb      	ldr	r3, [r7, #28]
 80142da:	4413      	add	r3, r2
 80142dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80142e0:	691a      	ldr	r2, [r3, #16]
 80142e2:	69bb      	ldr	r3, [r7, #24]
 80142e4:	0159      	lsls	r1, r3, #5
 80142e6:	69fb      	ldr	r3, [r7, #28]
 80142e8:	440b      	add	r3, r1
 80142ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80142ee:	4619      	mov	r1, r3
 80142f0:	4b97      	ldr	r3, [pc, #604]	@ (8014550 <USB_EPStartXfer+0x2e8>)
 80142f2:	4013      	ands	r3, r2
 80142f4:	610b      	str	r3, [r1, #16]
 80142f6:	e097      	b.n	8014428 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80142f8:	69bb      	ldr	r3, [r7, #24]
 80142fa:	015a      	lsls	r2, r3, #5
 80142fc:	69fb      	ldr	r3, [r7, #28]
 80142fe:	4413      	add	r3, r2
 8014300:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014304:	691a      	ldr	r2, [r3, #16]
 8014306:	69bb      	ldr	r3, [r7, #24]
 8014308:	0159      	lsls	r1, r3, #5
 801430a:	69fb      	ldr	r3, [r7, #28]
 801430c:	440b      	add	r3, r1
 801430e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014312:	4619      	mov	r1, r3
 8014314:	4b8e      	ldr	r3, [pc, #568]	@ (8014550 <USB_EPStartXfer+0x2e8>)
 8014316:	4013      	ands	r3, r2
 8014318:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801431a:	69bb      	ldr	r3, [r7, #24]
 801431c:	015a      	lsls	r2, r3, #5
 801431e:	69fb      	ldr	r3, [r7, #28]
 8014320:	4413      	add	r3, r2
 8014322:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014326:	691a      	ldr	r2, [r3, #16]
 8014328:	69bb      	ldr	r3, [r7, #24]
 801432a:	0159      	lsls	r1, r3, #5
 801432c:	69fb      	ldr	r3, [r7, #28]
 801432e:	440b      	add	r3, r1
 8014330:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014334:	4619      	mov	r1, r3
 8014336:	4b85      	ldr	r3, [pc, #532]	@ (801454c <USB_EPStartXfer+0x2e4>)
 8014338:	4013      	ands	r3, r2
 801433a:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 801433c:	69bb      	ldr	r3, [r7, #24]
 801433e:	2b00      	cmp	r3, #0
 8014340:	d11a      	bne.n	8014378 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8014342:	68bb      	ldr	r3, [r7, #8]
 8014344:	691a      	ldr	r2, [r3, #16]
 8014346:	68bb      	ldr	r3, [r7, #8]
 8014348:	689b      	ldr	r3, [r3, #8]
 801434a:	429a      	cmp	r2, r3
 801434c:	d903      	bls.n	8014356 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 801434e:	68bb      	ldr	r3, [r7, #8]
 8014350:	689a      	ldr	r2, [r3, #8]
 8014352:	68bb      	ldr	r3, [r7, #8]
 8014354:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8014356:	69bb      	ldr	r3, [r7, #24]
 8014358:	015a      	lsls	r2, r3, #5
 801435a:	69fb      	ldr	r3, [r7, #28]
 801435c:	4413      	add	r3, r2
 801435e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014362:	691b      	ldr	r3, [r3, #16]
 8014364:	69ba      	ldr	r2, [r7, #24]
 8014366:	0151      	lsls	r1, r2, #5
 8014368:	69fa      	ldr	r2, [r7, #28]
 801436a:	440a      	add	r2, r1
 801436c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014370:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8014374:	6113      	str	r3, [r2, #16]
 8014376:	e044      	b.n	8014402 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8014378:	68bb      	ldr	r3, [r7, #8]
 801437a:	691a      	ldr	r2, [r3, #16]
 801437c:	68bb      	ldr	r3, [r7, #8]
 801437e:	689b      	ldr	r3, [r3, #8]
 8014380:	4413      	add	r3, r2
 8014382:	1e5a      	subs	r2, r3, #1
 8014384:	68bb      	ldr	r3, [r7, #8]
 8014386:	689b      	ldr	r3, [r3, #8]
 8014388:	fbb2 f3f3 	udiv	r3, r2, r3
 801438c:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 801438e:	69bb      	ldr	r3, [r7, #24]
 8014390:	015a      	lsls	r2, r3, #5
 8014392:	69fb      	ldr	r3, [r7, #28]
 8014394:	4413      	add	r3, r2
 8014396:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801439a:	691a      	ldr	r2, [r3, #16]
 801439c:	8afb      	ldrh	r3, [r7, #22]
 801439e:	04d9      	lsls	r1, r3, #19
 80143a0:	4b6c      	ldr	r3, [pc, #432]	@ (8014554 <USB_EPStartXfer+0x2ec>)
 80143a2:	400b      	ands	r3, r1
 80143a4:	69b9      	ldr	r1, [r7, #24]
 80143a6:	0148      	lsls	r0, r1, #5
 80143a8:	69f9      	ldr	r1, [r7, #28]
 80143aa:	4401      	add	r1, r0
 80143ac:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80143b0:	4313      	orrs	r3, r2
 80143b2:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 80143b4:	68bb      	ldr	r3, [r7, #8]
 80143b6:	791b      	ldrb	r3, [r3, #4]
 80143b8:	2b01      	cmp	r3, #1
 80143ba:	d122      	bne.n	8014402 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80143bc:	69bb      	ldr	r3, [r7, #24]
 80143be:	015a      	lsls	r2, r3, #5
 80143c0:	69fb      	ldr	r3, [r7, #28]
 80143c2:	4413      	add	r3, r2
 80143c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80143c8:	691b      	ldr	r3, [r3, #16]
 80143ca:	69ba      	ldr	r2, [r7, #24]
 80143cc:	0151      	lsls	r1, r2, #5
 80143ce:	69fa      	ldr	r2, [r7, #28]
 80143d0:	440a      	add	r2, r1
 80143d2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80143d6:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80143da:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 80143dc:	69bb      	ldr	r3, [r7, #24]
 80143de:	015a      	lsls	r2, r3, #5
 80143e0:	69fb      	ldr	r3, [r7, #28]
 80143e2:	4413      	add	r3, r2
 80143e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80143e8:	691a      	ldr	r2, [r3, #16]
 80143ea:	8afb      	ldrh	r3, [r7, #22]
 80143ec:	075b      	lsls	r3, r3, #29
 80143ee:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 80143f2:	69b9      	ldr	r1, [r7, #24]
 80143f4:	0148      	lsls	r0, r1, #5
 80143f6:	69f9      	ldr	r1, [r7, #28]
 80143f8:	4401      	add	r1, r0
 80143fa:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80143fe:	4313      	orrs	r3, r2
 8014400:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8014402:	69bb      	ldr	r3, [r7, #24]
 8014404:	015a      	lsls	r2, r3, #5
 8014406:	69fb      	ldr	r3, [r7, #28]
 8014408:	4413      	add	r3, r2
 801440a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801440e:	691a      	ldr	r2, [r3, #16]
 8014410:	68bb      	ldr	r3, [r7, #8]
 8014412:	691b      	ldr	r3, [r3, #16]
 8014414:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8014418:	69b9      	ldr	r1, [r7, #24]
 801441a:	0148      	lsls	r0, r1, #5
 801441c:	69f9      	ldr	r1, [r7, #28]
 801441e:	4401      	add	r1, r0
 8014420:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8014424:	4313      	orrs	r3, r2
 8014426:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8014428:	79fb      	ldrb	r3, [r7, #7]
 801442a:	2b01      	cmp	r3, #1
 801442c:	d14b      	bne.n	80144c6 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 801442e:	68bb      	ldr	r3, [r7, #8]
 8014430:	69db      	ldr	r3, [r3, #28]
 8014432:	2b00      	cmp	r3, #0
 8014434:	d009      	beq.n	801444a <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8014436:	69bb      	ldr	r3, [r7, #24]
 8014438:	015a      	lsls	r2, r3, #5
 801443a:	69fb      	ldr	r3, [r7, #28]
 801443c:	4413      	add	r3, r2
 801443e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014442:	461a      	mov	r2, r3
 8014444:	68bb      	ldr	r3, [r7, #8]
 8014446:	69db      	ldr	r3, [r3, #28]
 8014448:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 801444a:	68bb      	ldr	r3, [r7, #8]
 801444c:	791b      	ldrb	r3, [r3, #4]
 801444e:	2b01      	cmp	r3, #1
 8014450:	d128      	bne.n	80144a4 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8014452:	69fb      	ldr	r3, [r7, #28]
 8014454:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014458:	689b      	ldr	r3, [r3, #8]
 801445a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801445e:	2b00      	cmp	r3, #0
 8014460:	d110      	bne.n	8014484 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8014462:	69bb      	ldr	r3, [r7, #24]
 8014464:	015a      	lsls	r2, r3, #5
 8014466:	69fb      	ldr	r3, [r7, #28]
 8014468:	4413      	add	r3, r2
 801446a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801446e:	681b      	ldr	r3, [r3, #0]
 8014470:	69ba      	ldr	r2, [r7, #24]
 8014472:	0151      	lsls	r1, r2, #5
 8014474:	69fa      	ldr	r2, [r7, #28]
 8014476:	440a      	add	r2, r1
 8014478:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801447c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8014480:	6013      	str	r3, [r2, #0]
 8014482:	e00f      	b.n	80144a4 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8014484:	69bb      	ldr	r3, [r7, #24]
 8014486:	015a      	lsls	r2, r3, #5
 8014488:	69fb      	ldr	r3, [r7, #28]
 801448a:	4413      	add	r3, r2
 801448c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014490:	681b      	ldr	r3, [r3, #0]
 8014492:	69ba      	ldr	r2, [r7, #24]
 8014494:	0151      	lsls	r1, r2, #5
 8014496:	69fa      	ldr	r2, [r7, #28]
 8014498:	440a      	add	r2, r1
 801449a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801449e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80144a2:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80144a4:	69bb      	ldr	r3, [r7, #24]
 80144a6:	015a      	lsls	r2, r3, #5
 80144a8:	69fb      	ldr	r3, [r7, #28]
 80144aa:	4413      	add	r3, r2
 80144ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80144b0:	681b      	ldr	r3, [r3, #0]
 80144b2:	69ba      	ldr	r2, [r7, #24]
 80144b4:	0151      	lsls	r1, r2, #5
 80144b6:	69fa      	ldr	r2, [r7, #28]
 80144b8:	440a      	add	r2, r1
 80144ba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80144be:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80144c2:	6013      	str	r3, [r2, #0]
 80144c4:	e169      	b.n	801479a <USB_EPStartXfer+0x532>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80144c6:	69bb      	ldr	r3, [r7, #24]
 80144c8:	015a      	lsls	r2, r3, #5
 80144ca:	69fb      	ldr	r3, [r7, #28]
 80144cc:	4413      	add	r3, r2
 80144ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80144d2:	681b      	ldr	r3, [r3, #0]
 80144d4:	69ba      	ldr	r2, [r7, #24]
 80144d6:	0151      	lsls	r1, r2, #5
 80144d8:	69fa      	ldr	r2, [r7, #28]
 80144da:	440a      	add	r2, r1
 80144dc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80144e0:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80144e4:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80144e6:	68bb      	ldr	r3, [r7, #8]
 80144e8:	791b      	ldrb	r3, [r3, #4]
 80144ea:	2b01      	cmp	r3, #1
 80144ec:	d015      	beq.n	801451a <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80144ee:	68bb      	ldr	r3, [r7, #8]
 80144f0:	691b      	ldr	r3, [r3, #16]
 80144f2:	2b00      	cmp	r3, #0
 80144f4:	f000 8151 	beq.w	801479a <USB_EPStartXfer+0x532>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80144f8:	69fb      	ldr	r3, [r7, #28]
 80144fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80144fe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8014500:	68bb      	ldr	r3, [r7, #8]
 8014502:	781b      	ldrb	r3, [r3, #0]
 8014504:	f003 030f 	and.w	r3, r3, #15
 8014508:	2101      	movs	r1, #1
 801450a:	fa01 f303 	lsl.w	r3, r1, r3
 801450e:	69f9      	ldr	r1, [r7, #28]
 8014510:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8014514:	4313      	orrs	r3, r2
 8014516:	634b      	str	r3, [r1, #52]	@ 0x34
 8014518:	e13f      	b.n	801479a <USB_EPStartXfer+0x532>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801451a:	69fb      	ldr	r3, [r7, #28]
 801451c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014520:	689b      	ldr	r3, [r3, #8]
 8014522:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8014526:	2b00      	cmp	r3, #0
 8014528:	d116      	bne.n	8014558 <USB_EPStartXfer+0x2f0>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 801452a:	69bb      	ldr	r3, [r7, #24]
 801452c:	015a      	lsls	r2, r3, #5
 801452e:	69fb      	ldr	r3, [r7, #28]
 8014530:	4413      	add	r3, r2
 8014532:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014536:	681b      	ldr	r3, [r3, #0]
 8014538:	69ba      	ldr	r2, [r7, #24]
 801453a:	0151      	lsls	r1, r2, #5
 801453c:	69fa      	ldr	r2, [r7, #28]
 801453e:	440a      	add	r2, r1
 8014540:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014544:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8014548:	6013      	str	r3, [r2, #0]
 801454a:	e015      	b.n	8014578 <USB_EPStartXfer+0x310>
 801454c:	e007ffff 	.word	0xe007ffff
 8014550:	fff80000 	.word	0xfff80000
 8014554:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8014558:	69bb      	ldr	r3, [r7, #24]
 801455a:	015a      	lsls	r2, r3, #5
 801455c:	69fb      	ldr	r3, [r7, #28]
 801455e:	4413      	add	r3, r2
 8014560:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014564:	681b      	ldr	r3, [r3, #0]
 8014566:	69ba      	ldr	r2, [r7, #24]
 8014568:	0151      	lsls	r1, r2, #5
 801456a:	69fa      	ldr	r2, [r7, #28]
 801456c:	440a      	add	r2, r1
 801456e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014572:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8014576:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8014578:	68bb      	ldr	r3, [r7, #8]
 801457a:	68d9      	ldr	r1, [r3, #12]
 801457c:	68bb      	ldr	r3, [r7, #8]
 801457e:	781a      	ldrb	r2, [r3, #0]
 8014580:	68bb      	ldr	r3, [r7, #8]
 8014582:	691b      	ldr	r3, [r3, #16]
 8014584:	b298      	uxth	r0, r3
 8014586:	79fb      	ldrb	r3, [r7, #7]
 8014588:	9300      	str	r3, [sp, #0]
 801458a:	4603      	mov	r3, r0
 801458c:	68f8      	ldr	r0, [r7, #12]
 801458e:	f000 f9b9 	bl	8014904 <USB_WritePacket>
 8014592:	e102      	b.n	801479a <USB_EPStartXfer+0x532>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8014594:	69bb      	ldr	r3, [r7, #24]
 8014596:	015a      	lsls	r2, r3, #5
 8014598:	69fb      	ldr	r3, [r7, #28]
 801459a:	4413      	add	r3, r2
 801459c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80145a0:	691a      	ldr	r2, [r3, #16]
 80145a2:	69bb      	ldr	r3, [r7, #24]
 80145a4:	0159      	lsls	r1, r3, #5
 80145a6:	69fb      	ldr	r3, [r7, #28]
 80145a8:	440b      	add	r3, r1
 80145aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80145ae:	4619      	mov	r1, r3
 80145b0:	4b7c      	ldr	r3, [pc, #496]	@ (80147a4 <USB_EPStartXfer+0x53c>)
 80145b2:	4013      	ands	r3, r2
 80145b4:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80145b6:	69bb      	ldr	r3, [r7, #24]
 80145b8:	015a      	lsls	r2, r3, #5
 80145ba:	69fb      	ldr	r3, [r7, #28]
 80145bc:	4413      	add	r3, r2
 80145be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80145c2:	691a      	ldr	r2, [r3, #16]
 80145c4:	69bb      	ldr	r3, [r7, #24]
 80145c6:	0159      	lsls	r1, r3, #5
 80145c8:	69fb      	ldr	r3, [r7, #28]
 80145ca:	440b      	add	r3, r1
 80145cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80145d0:	4619      	mov	r1, r3
 80145d2:	4b75      	ldr	r3, [pc, #468]	@ (80147a8 <USB_EPStartXfer+0x540>)
 80145d4:	4013      	ands	r3, r2
 80145d6:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 80145d8:	69bb      	ldr	r3, [r7, #24]
 80145da:	2b00      	cmp	r3, #0
 80145dc:	d12f      	bne.n	801463e <USB_EPStartXfer+0x3d6>
    {
      if (ep->xfer_len > 0U)
 80145de:	68bb      	ldr	r3, [r7, #8]
 80145e0:	691b      	ldr	r3, [r3, #16]
 80145e2:	2b00      	cmp	r3, #0
 80145e4:	d003      	beq.n	80145ee <USB_EPStartXfer+0x386>
      {
        ep->xfer_len = ep->maxpacket;
 80145e6:	68bb      	ldr	r3, [r7, #8]
 80145e8:	689a      	ldr	r2, [r3, #8]
 80145ea:	68bb      	ldr	r3, [r7, #8]
 80145ec:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80145ee:	68bb      	ldr	r3, [r7, #8]
 80145f0:	689a      	ldr	r2, [r3, #8]
 80145f2:	68bb      	ldr	r3, [r7, #8]
 80145f4:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80145f6:	69bb      	ldr	r3, [r7, #24]
 80145f8:	015a      	lsls	r2, r3, #5
 80145fa:	69fb      	ldr	r3, [r7, #28]
 80145fc:	4413      	add	r3, r2
 80145fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014602:	691a      	ldr	r2, [r3, #16]
 8014604:	68bb      	ldr	r3, [r7, #8]
 8014606:	6a1b      	ldr	r3, [r3, #32]
 8014608:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801460c:	69b9      	ldr	r1, [r7, #24]
 801460e:	0148      	lsls	r0, r1, #5
 8014610:	69f9      	ldr	r1, [r7, #28]
 8014612:	4401      	add	r1, r0
 8014614:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8014618:	4313      	orrs	r3, r2
 801461a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801461c:	69bb      	ldr	r3, [r7, #24]
 801461e:	015a      	lsls	r2, r3, #5
 8014620:	69fb      	ldr	r3, [r7, #28]
 8014622:	4413      	add	r3, r2
 8014624:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014628:	691b      	ldr	r3, [r3, #16]
 801462a:	69ba      	ldr	r2, [r7, #24]
 801462c:	0151      	lsls	r1, r2, #5
 801462e:	69fa      	ldr	r2, [r7, #28]
 8014630:	440a      	add	r2, r1
 8014632:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8014636:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801463a:	6113      	str	r3, [r2, #16]
 801463c:	e05f      	b.n	80146fe <USB_EPStartXfer+0x496>
    }
    else
    {
      if (ep->xfer_len == 0U)
 801463e:	68bb      	ldr	r3, [r7, #8]
 8014640:	691b      	ldr	r3, [r3, #16]
 8014642:	2b00      	cmp	r3, #0
 8014644:	d123      	bne.n	801468e <USB_EPStartXfer+0x426>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8014646:	69bb      	ldr	r3, [r7, #24]
 8014648:	015a      	lsls	r2, r3, #5
 801464a:	69fb      	ldr	r3, [r7, #28]
 801464c:	4413      	add	r3, r2
 801464e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014652:	691a      	ldr	r2, [r3, #16]
 8014654:	68bb      	ldr	r3, [r7, #8]
 8014656:	689b      	ldr	r3, [r3, #8]
 8014658:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801465c:	69b9      	ldr	r1, [r7, #24]
 801465e:	0148      	lsls	r0, r1, #5
 8014660:	69f9      	ldr	r1, [r7, #28]
 8014662:	4401      	add	r1, r0
 8014664:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8014668:	4313      	orrs	r3, r2
 801466a:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801466c:	69bb      	ldr	r3, [r7, #24]
 801466e:	015a      	lsls	r2, r3, #5
 8014670:	69fb      	ldr	r3, [r7, #28]
 8014672:	4413      	add	r3, r2
 8014674:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014678:	691b      	ldr	r3, [r3, #16]
 801467a:	69ba      	ldr	r2, [r7, #24]
 801467c:	0151      	lsls	r1, r2, #5
 801467e:	69fa      	ldr	r2, [r7, #28]
 8014680:	440a      	add	r2, r1
 8014682:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8014686:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801468a:	6113      	str	r3, [r2, #16]
 801468c:	e037      	b.n	80146fe <USB_EPStartXfer+0x496>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 801468e:	68bb      	ldr	r3, [r7, #8]
 8014690:	691a      	ldr	r2, [r3, #16]
 8014692:	68bb      	ldr	r3, [r7, #8]
 8014694:	689b      	ldr	r3, [r3, #8]
 8014696:	4413      	add	r3, r2
 8014698:	1e5a      	subs	r2, r3, #1
 801469a:	68bb      	ldr	r3, [r7, #8]
 801469c:	689b      	ldr	r3, [r3, #8]
 801469e:	fbb2 f3f3 	udiv	r3, r2, r3
 80146a2:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80146a4:	68bb      	ldr	r3, [r7, #8]
 80146a6:	689b      	ldr	r3, [r3, #8]
 80146a8:	8afa      	ldrh	r2, [r7, #22]
 80146aa:	fb03 f202 	mul.w	r2, r3, r2
 80146ae:	68bb      	ldr	r3, [r7, #8]
 80146b0:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80146b2:	69bb      	ldr	r3, [r7, #24]
 80146b4:	015a      	lsls	r2, r3, #5
 80146b6:	69fb      	ldr	r3, [r7, #28]
 80146b8:	4413      	add	r3, r2
 80146ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80146be:	691a      	ldr	r2, [r3, #16]
 80146c0:	8afb      	ldrh	r3, [r7, #22]
 80146c2:	04d9      	lsls	r1, r3, #19
 80146c4:	4b39      	ldr	r3, [pc, #228]	@ (80147ac <USB_EPStartXfer+0x544>)
 80146c6:	400b      	ands	r3, r1
 80146c8:	69b9      	ldr	r1, [r7, #24]
 80146ca:	0148      	lsls	r0, r1, #5
 80146cc:	69f9      	ldr	r1, [r7, #28]
 80146ce:	4401      	add	r1, r0
 80146d0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80146d4:	4313      	orrs	r3, r2
 80146d6:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80146d8:	69bb      	ldr	r3, [r7, #24]
 80146da:	015a      	lsls	r2, r3, #5
 80146dc:	69fb      	ldr	r3, [r7, #28]
 80146de:	4413      	add	r3, r2
 80146e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80146e4:	691a      	ldr	r2, [r3, #16]
 80146e6:	68bb      	ldr	r3, [r7, #8]
 80146e8:	6a1b      	ldr	r3, [r3, #32]
 80146ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80146ee:	69b9      	ldr	r1, [r7, #24]
 80146f0:	0148      	lsls	r0, r1, #5
 80146f2:	69f9      	ldr	r1, [r7, #28]
 80146f4:	4401      	add	r1, r0
 80146f6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80146fa:	4313      	orrs	r3, r2
 80146fc:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80146fe:	79fb      	ldrb	r3, [r7, #7]
 8014700:	2b01      	cmp	r3, #1
 8014702:	d10d      	bne.n	8014720 <USB_EPStartXfer+0x4b8>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8014704:	68bb      	ldr	r3, [r7, #8]
 8014706:	68db      	ldr	r3, [r3, #12]
 8014708:	2b00      	cmp	r3, #0
 801470a:	d009      	beq.n	8014720 <USB_EPStartXfer+0x4b8>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 801470c:	68bb      	ldr	r3, [r7, #8]
 801470e:	68d9      	ldr	r1, [r3, #12]
 8014710:	69bb      	ldr	r3, [r7, #24]
 8014712:	015a      	lsls	r2, r3, #5
 8014714:	69fb      	ldr	r3, [r7, #28]
 8014716:	4413      	add	r3, r2
 8014718:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801471c:	460a      	mov	r2, r1
 801471e:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8014720:	68bb      	ldr	r3, [r7, #8]
 8014722:	791b      	ldrb	r3, [r3, #4]
 8014724:	2b01      	cmp	r3, #1
 8014726:	d128      	bne.n	801477a <USB_EPStartXfer+0x512>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8014728:	69fb      	ldr	r3, [r7, #28]
 801472a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801472e:	689b      	ldr	r3, [r3, #8]
 8014730:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8014734:	2b00      	cmp	r3, #0
 8014736:	d110      	bne.n	801475a <USB_EPStartXfer+0x4f2>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8014738:	69bb      	ldr	r3, [r7, #24]
 801473a:	015a      	lsls	r2, r3, #5
 801473c:	69fb      	ldr	r3, [r7, #28]
 801473e:	4413      	add	r3, r2
 8014740:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014744:	681b      	ldr	r3, [r3, #0]
 8014746:	69ba      	ldr	r2, [r7, #24]
 8014748:	0151      	lsls	r1, r2, #5
 801474a:	69fa      	ldr	r2, [r7, #28]
 801474c:	440a      	add	r2, r1
 801474e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8014752:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8014756:	6013      	str	r3, [r2, #0]
 8014758:	e00f      	b.n	801477a <USB_EPStartXfer+0x512>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 801475a:	69bb      	ldr	r3, [r7, #24]
 801475c:	015a      	lsls	r2, r3, #5
 801475e:	69fb      	ldr	r3, [r7, #28]
 8014760:	4413      	add	r3, r2
 8014762:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014766:	681b      	ldr	r3, [r3, #0]
 8014768:	69ba      	ldr	r2, [r7, #24]
 801476a:	0151      	lsls	r1, r2, #5
 801476c:	69fa      	ldr	r2, [r7, #28]
 801476e:	440a      	add	r2, r1
 8014770:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8014774:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8014778:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 801477a:	69bb      	ldr	r3, [r7, #24]
 801477c:	015a      	lsls	r2, r3, #5
 801477e:	69fb      	ldr	r3, [r7, #28]
 8014780:	4413      	add	r3, r2
 8014782:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014786:	681b      	ldr	r3, [r3, #0]
 8014788:	69ba      	ldr	r2, [r7, #24]
 801478a:	0151      	lsls	r1, r2, #5
 801478c:	69fa      	ldr	r2, [r7, #28]
 801478e:	440a      	add	r2, r1
 8014790:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8014794:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8014798:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801479a:	2300      	movs	r3, #0
}
 801479c:	4618      	mov	r0, r3
 801479e:	3720      	adds	r7, #32
 80147a0:	46bd      	mov	sp, r7
 80147a2:	bd80      	pop	{r7, pc}
 80147a4:	fff80000 	.word	0xfff80000
 80147a8:	e007ffff 	.word	0xe007ffff
 80147ac:	1ff80000 	.word	0x1ff80000

080147b0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80147b0:	b480      	push	{r7}
 80147b2:	b087      	sub	sp, #28
 80147b4:	af00      	add	r7, sp, #0
 80147b6:	6078      	str	r0, [r7, #4]
 80147b8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80147ba:	2300      	movs	r3, #0
 80147bc:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80147be:	2300      	movs	r3, #0
 80147c0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80147c2:	687b      	ldr	r3, [r7, #4]
 80147c4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80147c6:	683b      	ldr	r3, [r7, #0]
 80147c8:	785b      	ldrb	r3, [r3, #1]
 80147ca:	2b01      	cmp	r3, #1
 80147cc:	d14a      	bne.n	8014864 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80147ce:	683b      	ldr	r3, [r7, #0]
 80147d0:	781b      	ldrb	r3, [r3, #0]
 80147d2:	015a      	lsls	r2, r3, #5
 80147d4:	693b      	ldr	r3, [r7, #16]
 80147d6:	4413      	add	r3, r2
 80147d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80147dc:	681b      	ldr	r3, [r3, #0]
 80147de:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80147e2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80147e6:	f040 8086 	bne.w	80148f6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80147ea:	683b      	ldr	r3, [r7, #0]
 80147ec:	781b      	ldrb	r3, [r3, #0]
 80147ee:	015a      	lsls	r2, r3, #5
 80147f0:	693b      	ldr	r3, [r7, #16]
 80147f2:	4413      	add	r3, r2
 80147f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80147f8:	681b      	ldr	r3, [r3, #0]
 80147fa:	683a      	ldr	r2, [r7, #0]
 80147fc:	7812      	ldrb	r2, [r2, #0]
 80147fe:	0151      	lsls	r1, r2, #5
 8014800:	693a      	ldr	r2, [r7, #16]
 8014802:	440a      	add	r2, r1
 8014804:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014808:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 801480c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 801480e:	683b      	ldr	r3, [r7, #0]
 8014810:	781b      	ldrb	r3, [r3, #0]
 8014812:	015a      	lsls	r2, r3, #5
 8014814:	693b      	ldr	r3, [r7, #16]
 8014816:	4413      	add	r3, r2
 8014818:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801481c:	681b      	ldr	r3, [r3, #0]
 801481e:	683a      	ldr	r2, [r7, #0]
 8014820:	7812      	ldrb	r2, [r2, #0]
 8014822:	0151      	lsls	r1, r2, #5
 8014824:	693a      	ldr	r2, [r7, #16]
 8014826:	440a      	add	r2, r1
 8014828:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801482c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8014830:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8014832:	68fb      	ldr	r3, [r7, #12]
 8014834:	3301      	adds	r3, #1
 8014836:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8014838:	68fb      	ldr	r3, [r7, #12]
 801483a:	f242 7210 	movw	r2, #10000	@ 0x2710
 801483e:	4293      	cmp	r3, r2
 8014840:	d902      	bls.n	8014848 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8014842:	2301      	movs	r3, #1
 8014844:	75fb      	strb	r3, [r7, #23]
          break;
 8014846:	e056      	b.n	80148f6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8014848:	683b      	ldr	r3, [r7, #0]
 801484a:	781b      	ldrb	r3, [r3, #0]
 801484c:	015a      	lsls	r2, r3, #5
 801484e:	693b      	ldr	r3, [r7, #16]
 8014850:	4413      	add	r3, r2
 8014852:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014856:	681b      	ldr	r3, [r3, #0]
 8014858:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 801485c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8014860:	d0e7      	beq.n	8014832 <USB_EPStopXfer+0x82>
 8014862:	e048      	b.n	80148f6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8014864:	683b      	ldr	r3, [r7, #0]
 8014866:	781b      	ldrb	r3, [r3, #0]
 8014868:	015a      	lsls	r2, r3, #5
 801486a:	693b      	ldr	r3, [r7, #16]
 801486c:	4413      	add	r3, r2
 801486e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014872:	681b      	ldr	r3, [r3, #0]
 8014874:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8014878:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 801487c:	d13b      	bne.n	80148f6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 801487e:	683b      	ldr	r3, [r7, #0]
 8014880:	781b      	ldrb	r3, [r3, #0]
 8014882:	015a      	lsls	r2, r3, #5
 8014884:	693b      	ldr	r3, [r7, #16]
 8014886:	4413      	add	r3, r2
 8014888:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801488c:	681b      	ldr	r3, [r3, #0]
 801488e:	683a      	ldr	r2, [r7, #0]
 8014890:	7812      	ldrb	r2, [r2, #0]
 8014892:	0151      	lsls	r1, r2, #5
 8014894:	693a      	ldr	r2, [r7, #16]
 8014896:	440a      	add	r2, r1
 8014898:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801489c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80148a0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80148a2:	683b      	ldr	r3, [r7, #0]
 80148a4:	781b      	ldrb	r3, [r3, #0]
 80148a6:	015a      	lsls	r2, r3, #5
 80148a8:	693b      	ldr	r3, [r7, #16]
 80148aa:	4413      	add	r3, r2
 80148ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80148b0:	681b      	ldr	r3, [r3, #0]
 80148b2:	683a      	ldr	r2, [r7, #0]
 80148b4:	7812      	ldrb	r2, [r2, #0]
 80148b6:	0151      	lsls	r1, r2, #5
 80148b8:	693a      	ldr	r2, [r7, #16]
 80148ba:	440a      	add	r2, r1
 80148bc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80148c0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80148c4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80148c6:	68fb      	ldr	r3, [r7, #12]
 80148c8:	3301      	adds	r3, #1
 80148ca:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80148cc:	68fb      	ldr	r3, [r7, #12]
 80148ce:	f242 7210 	movw	r2, #10000	@ 0x2710
 80148d2:	4293      	cmp	r3, r2
 80148d4:	d902      	bls.n	80148dc <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80148d6:	2301      	movs	r3, #1
 80148d8:	75fb      	strb	r3, [r7, #23]
          break;
 80148da:	e00c      	b.n	80148f6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80148dc:	683b      	ldr	r3, [r7, #0]
 80148de:	781b      	ldrb	r3, [r3, #0]
 80148e0:	015a      	lsls	r2, r3, #5
 80148e2:	693b      	ldr	r3, [r7, #16]
 80148e4:	4413      	add	r3, r2
 80148e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80148ea:	681b      	ldr	r3, [r3, #0]
 80148ec:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80148f0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80148f4:	d0e7      	beq.n	80148c6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80148f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80148f8:	4618      	mov	r0, r3
 80148fa:	371c      	adds	r7, #28
 80148fc:	46bd      	mov	sp, r7
 80148fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014902:	4770      	bx	lr

08014904 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8014904:	b480      	push	{r7}
 8014906:	b089      	sub	sp, #36	@ 0x24
 8014908:	af00      	add	r7, sp, #0
 801490a:	60f8      	str	r0, [r7, #12]
 801490c:	60b9      	str	r1, [r7, #8]
 801490e:	4611      	mov	r1, r2
 8014910:	461a      	mov	r2, r3
 8014912:	460b      	mov	r3, r1
 8014914:	71fb      	strb	r3, [r7, #7]
 8014916:	4613      	mov	r3, r2
 8014918:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801491a:	68fb      	ldr	r3, [r7, #12]
 801491c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 801491e:	68bb      	ldr	r3, [r7, #8]
 8014920:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8014922:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8014926:	2b00      	cmp	r3, #0
 8014928:	d123      	bne.n	8014972 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 801492a:	88bb      	ldrh	r3, [r7, #4]
 801492c:	3303      	adds	r3, #3
 801492e:	089b      	lsrs	r3, r3, #2
 8014930:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8014932:	2300      	movs	r3, #0
 8014934:	61bb      	str	r3, [r7, #24]
 8014936:	e018      	b.n	801496a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8014938:	79fb      	ldrb	r3, [r7, #7]
 801493a:	031a      	lsls	r2, r3, #12
 801493c:	697b      	ldr	r3, [r7, #20]
 801493e:	4413      	add	r3, r2
 8014940:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8014944:	461a      	mov	r2, r3
 8014946:	69fb      	ldr	r3, [r7, #28]
 8014948:	681b      	ldr	r3, [r3, #0]
 801494a:	6013      	str	r3, [r2, #0]
      pSrc++;
 801494c:	69fb      	ldr	r3, [r7, #28]
 801494e:	3301      	adds	r3, #1
 8014950:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8014952:	69fb      	ldr	r3, [r7, #28]
 8014954:	3301      	adds	r3, #1
 8014956:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8014958:	69fb      	ldr	r3, [r7, #28]
 801495a:	3301      	adds	r3, #1
 801495c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 801495e:	69fb      	ldr	r3, [r7, #28]
 8014960:	3301      	adds	r3, #1
 8014962:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8014964:	69bb      	ldr	r3, [r7, #24]
 8014966:	3301      	adds	r3, #1
 8014968:	61bb      	str	r3, [r7, #24]
 801496a:	69ba      	ldr	r2, [r7, #24]
 801496c:	693b      	ldr	r3, [r7, #16]
 801496e:	429a      	cmp	r2, r3
 8014970:	d3e2      	bcc.n	8014938 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8014972:	2300      	movs	r3, #0
}
 8014974:	4618      	mov	r0, r3
 8014976:	3724      	adds	r7, #36	@ 0x24
 8014978:	46bd      	mov	sp, r7
 801497a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801497e:	4770      	bx	lr

08014980 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8014980:	b480      	push	{r7}
 8014982:	b08b      	sub	sp, #44	@ 0x2c
 8014984:	af00      	add	r7, sp, #0
 8014986:	60f8      	str	r0, [r7, #12]
 8014988:	60b9      	str	r1, [r7, #8]
 801498a:	4613      	mov	r3, r2
 801498c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801498e:	68fb      	ldr	r3, [r7, #12]
 8014990:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8014992:	68bb      	ldr	r3, [r7, #8]
 8014994:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8014996:	88fb      	ldrh	r3, [r7, #6]
 8014998:	089b      	lsrs	r3, r3, #2
 801499a:	b29b      	uxth	r3, r3
 801499c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 801499e:	88fb      	ldrh	r3, [r7, #6]
 80149a0:	f003 0303 	and.w	r3, r3, #3
 80149a4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80149a6:	2300      	movs	r3, #0
 80149a8:	623b      	str	r3, [r7, #32]
 80149aa:	e014      	b.n	80149d6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80149ac:	69bb      	ldr	r3, [r7, #24]
 80149ae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80149b2:	681a      	ldr	r2, [r3, #0]
 80149b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80149b6:	601a      	str	r2, [r3, #0]
    pDest++;
 80149b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80149ba:	3301      	adds	r3, #1
 80149bc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80149be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80149c0:	3301      	adds	r3, #1
 80149c2:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80149c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80149c6:	3301      	adds	r3, #1
 80149c8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80149ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80149cc:	3301      	adds	r3, #1
 80149ce:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80149d0:	6a3b      	ldr	r3, [r7, #32]
 80149d2:	3301      	adds	r3, #1
 80149d4:	623b      	str	r3, [r7, #32]
 80149d6:	6a3a      	ldr	r2, [r7, #32]
 80149d8:	697b      	ldr	r3, [r7, #20]
 80149da:	429a      	cmp	r2, r3
 80149dc:	d3e6      	bcc.n	80149ac <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80149de:	8bfb      	ldrh	r3, [r7, #30]
 80149e0:	2b00      	cmp	r3, #0
 80149e2:	d01e      	beq.n	8014a22 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80149e4:	2300      	movs	r3, #0
 80149e6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80149e8:	69bb      	ldr	r3, [r7, #24]
 80149ea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80149ee:	461a      	mov	r2, r3
 80149f0:	f107 0310 	add.w	r3, r7, #16
 80149f4:	6812      	ldr	r2, [r2, #0]
 80149f6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80149f8:	693a      	ldr	r2, [r7, #16]
 80149fa:	6a3b      	ldr	r3, [r7, #32]
 80149fc:	b2db      	uxtb	r3, r3
 80149fe:	00db      	lsls	r3, r3, #3
 8014a00:	fa22 f303 	lsr.w	r3, r2, r3
 8014a04:	b2da      	uxtb	r2, r3
 8014a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014a08:	701a      	strb	r2, [r3, #0]
      i++;
 8014a0a:	6a3b      	ldr	r3, [r7, #32]
 8014a0c:	3301      	adds	r3, #1
 8014a0e:	623b      	str	r3, [r7, #32]
      pDest++;
 8014a10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014a12:	3301      	adds	r3, #1
 8014a14:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8014a16:	8bfb      	ldrh	r3, [r7, #30]
 8014a18:	3b01      	subs	r3, #1
 8014a1a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8014a1c:	8bfb      	ldrh	r3, [r7, #30]
 8014a1e:	2b00      	cmp	r3, #0
 8014a20:	d1ea      	bne.n	80149f8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8014a22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8014a24:	4618      	mov	r0, r3
 8014a26:	372c      	adds	r7, #44	@ 0x2c
 8014a28:	46bd      	mov	sp, r7
 8014a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a2e:	4770      	bx	lr

08014a30 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8014a30:	b480      	push	{r7}
 8014a32:	b085      	sub	sp, #20
 8014a34:	af00      	add	r7, sp, #0
 8014a36:	6078      	str	r0, [r7, #4]
 8014a38:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014a3a:	687b      	ldr	r3, [r7, #4]
 8014a3c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8014a3e:	683b      	ldr	r3, [r7, #0]
 8014a40:	781b      	ldrb	r3, [r3, #0]
 8014a42:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8014a44:	683b      	ldr	r3, [r7, #0]
 8014a46:	785b      	ldrb	r3, [r3, #1]
 8014a48:	2b01      	cmp	r3, #1
 8014a4a:	d12c      	bne.n	8014aa6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8014a4c:	68bb      	ldr	r3, [r7, #8]
 8014a4e:	015a      	lsls	r2, r3, #5
 8014a50:	68fb      	ldr	r3, [r7, #12]
 8014a52:	4413      	add	r3, r2
 8014a54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014a58:	681b      	ldr	r3, [r3, #0]
 8014a5a:	2b00      	cmp	r3, #0
 8014a5c:	db12      	blt.n	8014a84 <USB_EPSetStall+0x54>
 8014a5e:	68bb      	ldr	r3, [r7, #8]
 8014a60:	2b00      	cmp	r3, #0
 8014a62:	d00f      	beq.n	8014a84 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8014a64:	68bb      	ldr	r3, [r7, #8]
 8014a66:	015a      	lsls	r2, r3, #5
 8014a68:	68fb      	ldr	r3, [r7, #12]
 8014a6a:	4413      	add	r3, r2
 8014a6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014a70:	681b      	ldr	r3, [r3, #0]
 8014a72:	68ba      	ldr	r2, [r7, #8]
 8014a74:	0151      	lsls	r1, r2, #5
 8014a76:	68fa      	ldr	r2, [r7, #12]
 8014a78:	440a      	add	r2, r1
 8014a7a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014a7e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8014a82:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8014a84:	68bb      	ldr	r3, [r7, #8]
 8014a86:	015a      	lsls	r2, r3, #5
 8014a88:	68fb      	ldr	r3, [r7, #12]
 8014a8a:	4413      	add	r3, r2
 8014a8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014a90:	681b      	ldr	r3, [r3, #0]
 8014a92:	68ba      	ldr	r2, [r7, #8]
 8014a94:	0151      	lsls	r1, r2, #5
 8014a96:	68fa      	ldr	r2, [r7, #12]
 8014a98:	440a      	add	r2, r1
 8014a9a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014a9e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8014aa2:	6013      	str	r3, [r2, #0]
 8014aa4:	e02b      	b.n	8014afe <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8014aa6:	68bb      	ldr	r3, [r7, #8]
 8014aa8:	015a      	lsls	r2, r3, #5
 8014aaa:	68fb      	ldr	r3, [r7, #12]
 8014aac:	4413      	add	r3, r2
 8014aae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014ab2:	681b      	ldr	r3, [r3, #0]
 8014ab4:	2b00      	cmp	r3, #0
 8014ab6:	db12      	blt.n	8014ade <USB_EPSetStall+0xae>
 8014ab8:	68bb      	ldr	r3, [r7, #8]
 8014aba:	2b00      	cmp	r3, #0
 8014abc:	d00f      	beq.n	8014ade <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8014abe:	68bb      	ldr	r3, [r7, #8]
 8014ac0:	015a      	lsls	r2, r3, #5
 8014ac2:	68fb      	ldr	r3, [r7, #12]
 8014ac4:	4413      	add	r3, r2
 8014ac6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014aca:	681b      	ldr	r3, [r3, #0]
 8014acc:	68ba      	ldr	r2, [r7, #8]
 8014ace:	0151      	lsls	r1, r2, #5
 8014ad0:	68fa      	ldr	r2, [r7, #12]
 8014ad2:	440a      	add	r2, r1
 8014ad4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8014ad8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8014adc:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8014ade:	68bb      	ldr	r3, [r7, #8]
 8014ae0:	015a      	lsls	r2, r3, #5
 8014ae2:	68fb      	ldr	r3, [r7, #12]
 8014ae4:	4413      	add	r3, r2
 8014ae6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014aea:	681b      	ldr	r3, [r3, #0]
 8014aec:	68ba      	ldr	r2, [r7, #8]
 8014aee:	0151      	lsls	r1, r2, #5
 8014af0:	68fa      	ldr	r2, [r7, #12]
 8014af2:	440a      	add	r2, r1
 8014af4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8014af8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8014afc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8014afe:	2300      	movs	r3, #0
}
 8014b00:	4618      	mov	r0, r3
 8014b02:	3714      	adds	r7, #20
 8014b04:	46bd      	mov	sp, r7
 8014b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b0a:	4770      	bx	lr

08014b0c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8014b0c:	b480      	push	{r7}
 8014b0e:	b085      	sub	sp, #20
 8014b10:	af00      	add	r7, sp, #0
 8014b12:	6078      	str	r0, [r7, #4]
 8014b14:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014b16:	687b      	ldr	r3, [r7, #4]
 8014b18:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8014b1a:	683b      	ldr	r3, [r7, #0]
 8014b1c:	781b      	ldrb	r3, [r3, #0]
 8014b1e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8014b20:	683b      	ldr	r3, [r7, #0]
 8014b22:	785b      	ldrb	r3, [r3, #1]
 8014b24:	2b01      	cmp	r3, #1
 8014b26:	d128      	bne.n	8014b7a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8014b28:	68bb      	ldr	r3, [r7, #8]
 8014b2a:	015a      	lsls	r2, r3, #5
 8014b2c:	68fb      	ldr	r3, [r7, #12]
 8014b2e:	4413      	add	r3, r2
 8014b30:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014b34:	681b      	ldr	r3, [r3, #0]
 8014b36:	68ba      	ldr	r2, [r7, #8]
 8014b38:	0151      	lsls	r1, r2, #5
 8014b3a:	68fa      	ldr	r2, [r7, #12]
 8014b3c:	440a      	add	r2, r1
 8014b3e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014b42:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8014b46:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8014b48:	683b      	ldr	r3, [r7, #0]
 8014b4a:	791b      	ldrb	r3, [r3, #4]
 8014b4c:	2b03      	cmp	r3, #3
 8014b4e:	d003      	beq.n	8014b58 <USB_EPClearStall+0x4c>
 8014b50:	683b      	ldr	r3, [r7, #0]
 8014b52:	791b      	ldrb	r3, [r3, #4]
 8014b54:	2b02      	cmp	r3, #2
 8014b56:	d138      	bne.n	8014bca <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8014b58:	68bb      	ldr	r3, [r7, #8]
 8014b5a:	015a      	lsls	r2, r3, #5
 8014b5c:	68fb      	ldr	r3, [r7, #12]
 8014b5e:	4413      	add	r3, r2
 8014b60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014b64:	681b      	ldr	r3, [r3, #0]
 8014b66:	68ba      	ldr	r2, [r7, #8]
 8014b68:	0151      	lsls	r1, r2, #5
 8014b6a:	68fa      	ldr	r2, [r7, #12]
 8014b6c:	440a      	add	r2, r1
 8014b6e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014b72:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8014b76:	6013      	str	r3, [r2, #0]
 8014b78:	e027      	b.n	8014bca <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8014b7a:	68bb      	ldr	r3, [r7, #8]
 8014b7c:	015a      	lsls	r2, r3, #5
 8014b7e:	68fb      	ldr	r3, [r7, #12]
 8014b80:	4413      	add	r3, r2
 8014b82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014b86:	681b      	ldr	r3, [r3, #0]
 8014b88:	68ba      	ldr	r2, [r7, #8]
 8014b8a:	0151      	lsls	r1, r2, #5
 8014b8c:	68fa      	ldr	r2, [r7, #12]
 8014b8e:	440a      	add	r2, r1
 8014b90:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8014b94:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8014b98:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8014b9a:	683b      	ldr	r3, [r7, #0]
 8014b9c:	791b      	ldrb	r3, [r3, #4]
 8014b9e:	2b03      	cmp	r3, #3
 8014ba0:	d003      	beq.n	8014baa <USB_EPClearStall+0x9e>
 8014ba2:	683b      	ldr	r3, [r7, #0]
 8014ba4:	791b      	ldrb	r3, [r3, #4]
 8014ba6:	2b02      	cmp	r3, #2
 8014ba8:	d10f      	bne.n	8014bca <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8014baa:	68bb      	ldr	r3, [r7, #8]
 8014bac:	015a      	lsls	r2, r3, #5
 8014bae:	68fb      	ldr	r3, [r7, #12]
 8014bb0:	4413      	add	r3, r2
 8014bb2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014bb6:	681b      	ldr	r3, [r3, #0]
 8014bb8:	68ba      	ldr	r2, [r7, #8]
 8014bba:	0151      	lsls	r1, r2, #5
 8014bbc:	68fa      	ldr	r2, [r7, #12]
 8014bbe:	440a      	add	r2, r1
 8014bc0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8014bc4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8014bc8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8014bca:	2300      	movs	r3, #0
}
 8014bcc:	4618      	mov	r0, r3
 8014bce:	3714      	adds	r7, #20
 8014bd0:	46bd      	mov	sp, r7
 8014bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bd6:	4770      	bx	lr

08014bd8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8014bd8:	b480      	push	{r7}
 8014bda:	b085      	sub	sp, #20
 8014bdc:	af00      	add	r7, sp, #0
 8014bde:	6078      	str	r0, [r7, #4]
 8014be0:	460b      	mov	r3, r1
 8014be2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014be4:	687b      	ldr	r3, [r7, #4]
 8014be6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8014be8:	68fb      	ldr	r3, [r7, #12]
 8014bea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014bee:	681b      	ldr	r3, [r3, #0]
 8014bf0:	68fa      	ldr	r2, [r7, #12]
 8014bf2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8014bf6:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8014bfa:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8014bfc:	68fb      	ldr	r3, [r7, #12]
 8014bfe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014c02:	681a      	ldr	r2, [r3, #0]
 8014c04:	78fb      	ldrb	r3, [r7, #3]
 8014c06:	011b      	lsls	r3, r3, #4
 8014c08:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8014c0c:	68f9      	ldr	r1, [r7, #12]
 8014c0e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8014c12:	4313      	orrs	r3, r2
 8014c14:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8014c16:	2300      	movs	r3, #0
}
 8014c18:	4618      	mov	r0, r3
 8014c1a:	3714      	adds	r7, #20
 8014c1c:	46bd      	mov	sp, r7
 8014c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c22:	4770      	bx	lr

08014c24 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8014c24:	b480      	push	{r7}
 8014c26:	b085      	sub	sp, #20
 8014c28:	af00      	add	r7, sp, #0
 8014c2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8014c2c:	687b      	ldr	r3, [r7, #4]
 8014c2e:	695b      	ldr	r3, [r3, #20]
 8014c30:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8014c32:	687b      	ldr	r3, [r7, #4]
 8014c34:	699b      	ldr	r3, [r3, #24]
 8014c36:	68fa      	ldr	r2, [r7, #12]
 8014c38:	4013      	ands	r3, r2
 8014c3a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8014c3c:	68fb      	ldr	r3, [r7, #12]
}
 8014c3e:	4618      	mov	r0, r3
 8014c40:	3714      	adds	r7, #20
 8014c42:	46bd      	mov	sp, r7
 8014c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c48:	4770      	bx	lr

08014c4a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8014c4a:	b480      	push	{r7}
 8014c4c:	b085      	sub	sp, #20
 8014c4e:	af00      	add	r7, sp, #0
 8014c50:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014c52:	687b      	ldr	r3, [r7, #4]
 8014c54:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8014c56:	68fb      	ldr	r3, [r7, #12]
 8014c58:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014c5c:	699b      	ldr	r3, [r3, #24]
 8014c5e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8014c60:	68fb      	ldr	r3, [r7, #12]
 8014c62:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014c66:	69db      	ldr	r3, [r3, #28]
 8014c68:	68ba      	ldr	r2, [r7, #8]
 8014c6a:	4013      	ands	r3, r2
 8014c6c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8014c6e:	68bb      	ldr	r3, [r7, #8]
 8014c70:	0c1b      	lsrs	r3, r3, #16
}
 8014c72:	4618      	mov	r0, r3
 8014c74:	3714      	adds	r7, #20
 8014c76:	46bd      	mov	sp, r7
 8014c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c7c:	4770      	bx	lr

08014c7e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8014c7e:	b480      	push	{r7}
 8014c80:	b085      	sub	sp, #20
 8014c82:	af00      	add	r7, sp, #0
 8014c84:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014c86:	687b      	ldr	r3, [r7, #4]
 8014c88:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8014c8a:	68fb      	ldr	r3, [r7, #12]
 8014c8c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014c90:	699b      	ldr	r3, [r3, #24]
 8014c92:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8014c94:	68fb      	ldr	r3, [r7, #12]
 8014c96:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014c9a:	69db      	ldr	r3, [r3, #28]
 8014c9c:	68ba      	ldr	r2, [r7, #8]
 8014c9e:	4013      	ands	r3, r2
 8014ca0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8014ca2:	68bb      	ldr	r3, [r7, #8]
 8014ca4:	b29b      	uxth	r3, r3
}
 8014ca6:	4618      	mov	r0, r3
 8014ca8:	3714      	adds	r7, #20
 8014caa:	46bd      	mov	sp, r7
 8014cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cb0:	4770      	bx	lr

08014cb2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8014cb2:	b480      	push	{r7}
 8014cb4:	b085      	sub	sp, #20
 8014cb6:	af00      	add	r7, sp, #0
 8014cb8:	6078      	str	r0, [r7, #4]
 8014cba:	460b      	mov	r3, r1
 8014cbc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014cbe:	687b      	ldr	r3, [r7, #4]
 8014cc0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8014cc2:	78fb      	ldrb	r3, [r7, #3]
 8014cc4:	015a      	lsls	r2, r3, #5
 8014cc6:	68fb      	ldr	r3, [r7, #12]
 8014cc8:	4413      	add	r3, r2
 8014cca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014cce:	689b      	ldr	r3, [r3, #8]
 8014cd0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8014cd2:	68fb      	ldr	r3, [r7, #12]
 8014cd4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014cd8:	695b      	ldr	r3, [r3, #20]
 8014cda:	68ba      	ldr	r2, [r7, #8]
 8014cdc:	4013      	ands	r3, r2
 8014cde:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8014ce0:	68bb      	ldr	r3, [r7, #8]
}
 8014ce2:	4618      	mov	r0, r3
 8014ce4:	3714      	adds	r7, #20
 8014ce6:	46bd      	mov	sp, r7
 8014ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cec:	4770      	bx	lr

08014cee <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8014cee:	b480      	push	{r7}
 8014cf0:	b087      	sub	sp, #28
 8014cf2:	af00      	add	r7, sp, #0
 8014cf4:	6078      	str	r0, [r7, #4]
 8014cf6:	460b      	mov	r3, r1
 8014cf8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014cfa:	687b      	ldr	r3, [r7, #4]
 8014cfc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8014cfe:	697b      	ldr	r3, [r7, #20]
 8014d00:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014d04:	691b      	ldr	r3, [r3, #16]
 8014d06:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8014d08:	697b      	ldr	r3, [r7, #20]
 8014d0a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014d0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014d10:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8014d12:	78fb      	ldrb	r3, [r7, #3]
 8014d14:	f003 030f 	and.w	r3, r3, #15
 8014d18:	68fa      	ldr	r2, [r7, #12]
 8014d1a:	fa22 f303 	lsr.w	r3, r2, r3
 8014d1e:	01db      	lsls	r3, r3, #7
 8014d20:	b2db      	uxtb	r3, r3
 8014d22:	693a      	ldr	r2, [r7, #16]
 8014d24:	4313      	orrs	r3, r2
 8014d26:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8014d28:	78fb      	ldrb	r3, [r7, #3]
 8014d2a:	015a      	lsls	r2, r3, #5
 8014d2c:	697b      	ldr	r3, [r7, #20]
 8014d2e:	4413      	add	r3, r2
 8014d30:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014d34:	689b      	ldr	r3, [r3, #8]
 8014d36:	693a      	ldr	r2, [r7, #16]
 8014d38:	4013      	ands	r3, r2
 8014d3a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8014d3c:	68bb      	ldr	r3, [r7, #8]
}
 8014d3e:	4618      	mov	r0, r3
 8014d40:	371c      	adds	r7, #28
 8014d42:	46bd      	mov	sp, r7
 8014d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d48:	4770      	bx	lr

08014d4a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8014d4a:	b480      	push	{r7}
 8014d4c:	b083      	sub	sp, #12
 8014d4e:	af00      	add	r7, sp, #0
 8014d50:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8014d52:	687b      	ldr	r3, [r7, #4]
 8014d54:	695b      	ldr	r3, [r3, #20]
 8014d56:	f003 0301 	and.w	r3, r3, #1
}
 8014d5a:	4618      	mov	r0, r3
 8014d5c:	370c      	adds	r7, #12
 8014d5e:	46bd      	mov	sp, r7
 8014d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d64:	4770      	bx	lr
	...

08014d68 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8014d68:	b480      	push	{r7}
 8014d6a:	b085      	sub	sp, #20
 8014d6c:	af00      	add	r7, sp, #0
 8014d6e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014d70:	687b      	ldr	r3, [r7, #4]
 8014d72:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8014d74:	68fb      	ldr	r3, [r7, #12]
 8014d76:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014d7a:	681a      	ldr	r2, [r3, #0]
 8014d7c:	68fb      	ldr	r3, [r7, #12]
 8014d7e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014d82:	4619      	mov	r1, r3
 8014d84:	4b09      	ldr	r3, [pc, #36]	@ (8014dac <USB_ActivateSetup+0x44>)
 8014d86:	4013      	ands	r3, r2
 8014d88:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8014d8a:	68fb      	ldr	r3, [r7, #12]
 8014d8c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014d90:	685b      	ldr	r3, [r3, #4]
 8014d92:	68fa      	ldr	r2, [r7, #12]
 8014d94:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8014d98:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8014d9c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8014d9e:	2300      	movs	r3, #0
}
 8014da0:	4618      	mov	r0, r3
 8014da2:	3714      	adds	r7, #20
 8014da4:	46bd      	mov	sp, r7
 8014da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014daa:	4770      	bx	lr
 8014dac:	fffff800 	.word	0xfffff800

08014db0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8014db0:	b480      	push	{r7}
 8014db2:	b087      	sub	sp, #28
 8014db4:	af00      	add	r7, sp, #0
 8014db6:	60f8      	str	r0, [r7, #12]
 8014db8:	460b      	mov	r3, r1
 8014dba:	607a      	str	r2, [r7, #4]
 8014dbc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014dbe:	68fb      	ldr	r3, [r7, #12]
 8014dc0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8014dc2:	68fb      	ldr	r3, [r7, #12]
 8014dc4:	333c      	adds	r3, #60	@ 0x3c
 8014dc6:	3304      	adds	r3, #4
 8014dc8:	681b      	ldr	r3, [r3, #0]
 8014dca:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8014dcc:	693b      	ldr	r3, [r7, #16]
 8014dce:	4a26      	ldr	r2, [pc, #152]	@ (8014e68 <USB_EP0_OutStart+0xb8>)
 8014dd0:	4293      	cmp	r3, r2
 8014dd2:	d90a      	bls.n	8014dea <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8014dd4:	697b      	ldr	r3, [r7, #20]
 8014dd6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014dda:	681b      	ldr	r3, [r3, #0]
 8014ddc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8014de0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8014de4:	d101      	bne.n	8014dea <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8014de6:	2300      	movs	r3, #0
 8014de8:	e037      	b.n	8014e5a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8014dea:	697b      	ldr	r3, [r7, #20]
 8014dec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014df0:	461a      	mov	r2, r3
 8014df2:	2300      	movs	r3, #0
 8014df4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8014df6:	697b      	ldr	r3, [r7, #20]
 8014df8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014dfc:	691b      	ldr	r3, [r3, #16]
 8014dfe:	697a      	ldr	r2, [r7, #20]
 8014e00:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8014e04:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8014e08:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8014e0a:	697b      	ldr	r3, [r7, #20]
 8014e0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014e10:	691b      	ldr	r3, [r3, #16]
 8014e12:	697a      	ldr	r2, [r7, #20]
 8014e14:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8014e18:	f043 0318 	orr.w	r3, r3, #24
 8014e1c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8014e1e:	697b      	ldr	r3, [r7, #20]
 8014e20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014e24:	691b      	ldr	r3, [r3, #16]
 8014e26:	697a      	ldr	r2, [r7, #20]
 8014e28:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8014e2c:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8014e30:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8014e32:	7afb      	ldrb	r3, [r7, #11]
 8014e34:	2b01      	cmp	r3, #1
 8014e36:	d10f      	bne.n	8014e58 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8014e38:	697b      	ldr	r3, [r7, #20]
 8014e3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014e3e:	461a      	mov	r2, r3
 8014e40:	687b      	ldr	r3, [r7, #4]
 8014e42:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8014e44:	697b      	ldr	r3, [r7, #20]
 8014e46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014e4a:	681b      	ldr	r3, [r3, #0]
 8014e4c:	697a      	ldr	r2, [r7, #20]
 8014e4e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8014e52:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8014e56:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8014e58:	2300      	movs	r3, #0
}
 8014e5a:	4618      	mov	r0, r3
 8014e5c:	371c      	adds	r7, #28
 8014e5e:	46bd      	mov	sp, r7
 8014e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e64:	4770      	bx	lr
 8014e66:	bf00      	nop
 8014e68:	4f54300a 	.word	0x4f54300a

08014e6c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8014e6c:	b580      	push	{r7, lr}
 8014e6e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8014e70:	4904      	ldr	r1, [pc, #16]	@ (8014e84 <MX_FATFS_Init+0x18>)
 8014e72:	4805      	ldr	r0, [pc, #20]	@ (8014e88 <MX_FATFS_Init+0x1c>)
 8014e74:	f001 fb20 	bl	80164b8 <FATFS_LinkDriver>
 8014e78:	4603      	mov	r3, r0
 8014e7a:	461a      	mov	r2, r3
 8014e7c:	4b03      	ldr	r3, [pc, #12]	@ (8014e8c <MX_FATFS_Init+0x20>)
 8014e7e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8014e80:	bf00      	nop
 8014e82:	bd80      	pop	{r7, pc}
 8014e84:	240004b8 	.word	0x240004b8
 8014e88:	24000014 	.word	0x24000014
 8014e8c:	240004b4 	.word	0x240004b4

08014e90 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8014e90:	b580      	push	{r7, lr}
 8014e92:	b082      	sub	sp, #8
 8014e94:	af00      	add	r7, sp, #0
 8014e96:	4603      	mov	r3, r0
 8014e98:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
  /* HAL_SD_Init() is called in main.c, we just need to check the status */
  return USER_status(pdrv);
 8014e9a:	79fb      	ldrb	r3, [r7, #7]
 8014e9c:	4618      	mov	r0, r3
 8014e9e:	f000 f805 	bl	8014eac <USER_status>
 8014ea2:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8014ea4:	4618      	mov	r0, r3
 8014ea6:	3708      	adds	r7, #8
 8014ea8:	46bd      	mov	sp, r7
 8014eaa:	bd80      	pop	{r7, pc}

08014eac <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8014eac:	b580      	push	{r7, lr}
 8014eae:	b082      	sub	sp, #8
 8014eb0:	af00      	add	r7, sp, #0
 8014eb2:	4603      	mov	r3, r0
 8014eb4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
  if (pdrv != 0) return STA_NOINIT; /* We only support one drive */
 8014eb6:	79fb      	ldrb	r3, [r7, #7]
 8014eb8:	2b00      	cmp	r3, #0
 8014eba:	d001      	beq.n	8014ec0 <USER_status+0x14>
 8014ebc:	2301      	movs	r3, #1
 8014ebe:	e013      	b.n	8014ee8 <USER_status+0x3c>

  Stat = STA_NOINIT;
 8014ec0:	4b0b      	ldr	r3, [pc, #44]	@ (8014ef0 <USER_status+0x44>)
 8014ec2:	2201      	movs	r2, #1
 8014ec4:	701a      	strb	r2, [r3, #0]
  if (HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER)
 8014ec6:	480b      	ldr	r0, [pc, #44]	@ (8014ef4 <USER_status+0x48>)
 8014ec8:	f7fa f8a6 	bl	800f018 <HAL_SD_GetCardState>
 8014ecc:	4603      	mov	r3, r0
 8014ece:	2b04      	cmp	r3, #4
 8014ed0:	d107      	bne.n	8014ee2 <USER_status+0x36>
  {
    Stat &= ~STA_NOINIT;
 8014ed2:	4b07      	ldr	r3, [pc, #28]	@ (8014ef0 <USER_status+0x44>)
 8014ed4:	781b      	ldrb	r3, [r3, #0]
 8014ed6:	b2db      	uxtb	r3, r3
 8014ed8:	f023 0301 	bic.w	r3, r3, #1
 8014edc:	b2da      	uxtb	r2, r3
 8014ede:	4b04      	ldr	r3, [pc, #16]	@ (8014ef0 <USER_status+0x44>)
 8014ee0:	701a      	strb	r2, [r3, #0]
  }
  return Stat;
 8014ee2:	4b03      	ldr	r3, [pc, #12]	@ (8014ef0 <USER_status+0x44>)
 8014ee4:	781b      	ldrb	r3, [r3, #0]
 8014ee6:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8014ee8:	4618      	mov	r0, r3
 8014eea:	3708      	adds	r7, #8
 8014eec:	46bd      	mov	sp, r7
 8014eee:	bd80      	pop	{r7, pc}
 8014ef0:	24000011 	.word	0x24000011
 8014ef4:	24000344 	.word	0x24000344

08014ef8 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8014ef8:	b580      	push	{r7, lr}
 8014efa:	b088      	sub	sp, #32
 8014efc:	af02      	add	r7, sp, #8
 8014efe:	60b9      	str	r1, [r7, #8]
 8014f00:	607a      	str	r2, [r7, #4]
 8014f02:	603b      	str	r3, [r7, #0]
 8014f04:	4603      	mov	r3, r0
 8014f06:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
  DRESULT res = RES_ERROR;
 8014f08:	2301      	movs	r3, #1
 8014f0a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef hal_res;

  if (pdrv != 0) return RES_PARERR;
 8014f0c:	7bfb      	ldrb	r3, [r7, #15]
 8014f0e:	2b00      	cmp	r3, #0
 8014f10:	d001      	beq.n	8014f16 <USER_read+0x1e>
 8014f12:	2304      	movs	r3, #4
 8014f14:	e013      	b.n	8014f3e <USER_read+0x46>

  // INFO_PRINTF("USER_read: sector=%lu, count=%u", sector, count);
  hal_res = HAL_SD_ReadBlocks(&hsd1, (uint8_t *)buff, sector, count, HAL_MAX_DELAY);
 8014f16:	f04f 33ff 	mov.w	r3, #4294967295
 8014f1a:	9300      	str	r3, [sp, #0]
 8014f1c:	683b      	ldr	r3, [r7, #0]
 8014f1e:	687a      	ldr	r2, [r7, #4]
 8014f20:	68b9      	ldr	r1, [r7, #8]
 8014f22:	4809      	ldr	r0, [pc, #36]	@ (8014f48 <USER_read+0x50>)
 8014f24:	f7f9 f9ae 	bl	800e284 <HAL_SD_ReadBlocks>
 8014f28:	4603      	mov	r3, r0
 8014f2a:	75bb      	strb	r3, [r7, #22]
  if (hal_res == HAL_OK)
 8014f2c:	7dbb      	ldrb	r3, [r7, #22]
 8014f2e:	2b00      	cmp	r3, #0
 8014f30:	d102      	bne.n	8014f38 <USER_read+0x40>
  {
    res = RES_OK;
 8014f32:	2300      	movs	r3, #0
 8014f34:	75fb      	strb	r3, [r7, #23]
 8014f36:	e001      	b.n	8014f3c <USER_read+0x44>
  }
  else
  {
    // ERROR_PRINTF("USER_read failed! HAL_SD_ReadBlocks returned %d", hal_res);
    res = RES_ERROR;
 8014f38:	2301      	movs	r3, #1
 8014f3a:	75fb      	strb	r3, [r7, #23]
  }
  return res;
 8014f3c:	7dfb      	ldrb	r3, [r7, #23]
  /* USER CODE END READ */
}
 8014f3e:	4618      	mov	r0, r3
 8014f40:	3718      	adds	r7, #24
 8014f42:	46bd      	mov	sp, r7
 8014f44:	bd80      	pop	{r7, pc}
 8014f46:	bf00      	nop
 8014f48:	24000344 	.word	0x24000344

08014f4c <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8014f4c:	b580      	push	{r7, lr}
 8014f4e:	b088      	sub	sp, #32
 8014f50:	af02      	add	r7, sp, #8
 8014f52:	60b9      	str	r1, [r7, #8]
 8014f54:	607a      	str	r2, [r7, #4]
 8014f56:	603b      	str	r3, [r7, #0]
 8014f58:	4603      	mov	r3, r0
 8014f5a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  DRESULT res = RES_ERROR;
 8014f5c:	2301      	movs	r3, #1
 8014f5e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef hal_res;

  if (pdrv != 0) return RES_PARERR;
 8014f60:	7bfb      	ldrb	r3, [r7, #15]
 8014f62:	2b00      	cmp	r3, #0
 8014f64:	d001      	beq.n	8014f6a <USER_write+0x1e>
 8014f66:	2304      	movs	r3, #4
 8014f68:	e013      	b.n	8014f92 <USER_write+0x46>

  // INFO_PRINTF("USER_write: sector=%lu, count=%u", sector, count);
  hal_res = HAL_SD_WriteBlocks(&hsd1, (const uint8_t *)buff, sector, count, HAL_MAX_DELAY);
 8014f6a:	f04f 33ff 	mov.w	r3, #4294967295
 8014f6e:	9300      	str	r3, [sp, #0]
 8014f70:	683b      	ldr	r3, [r7, #0]
 8014f72:	687a      	ldr	r2, [r7, #4]
 8014f74:	68b9      	ldr	r1, [r7, #8]
 8014f76:	4809      	ldr	r0, [pc, #36]	@ (8014f9c <USER_write+0x50>)
 8014f78:	f7f9 fb0e 	bl	800e598 <HAL_SD_WriteBlocks>
 8014f7c:	4603      	mov	r3, r0
 8014f7e:	75bb      	strb	r3, [r7, #22]
  if (hal_res == HAL_OK)
 8014f80:	7dbb      	ldrb	r3, [r7, #22]
 8014f82:	2b00      	cmp	r3, #0
 8014f84:	d102      	bne.n	8014f8c <USER_write+0x40>
  {
    res = RES_OK;
 8014f86:	2300      	movs	r3, #0
 8014f88:	75fb      	strb	r3, [r7, #23]
 8014f8a:	e001      	b.n	8014f90 <USER_write+0x44>
  }
  else
  {
    // ERROR_PRINTF("USER_write failed! HAL_SD_WriteBlocks returned %d. SD Error Code: 0x%lX", hal_res, hsd1.ErrorCode);
    res = RES_ERROR;
 8014f8c:	2301      	movs	r3, #1
 8014f8e:	75fb      	strb	r3, [r7, #23]
  }
  return res;
 8014f90:	7dfb      	ldrb	r3, [r7, #23]
  /* USER CODE END WRITE */
}
 8014f92:	4618      	mov	r0, r3
 8014f94:	3718      	adds	r7, #24
 8014f96:	46bd      	mov	sp, r7
 8014f98:	bd80      	pop	{r7, pc}
 8014f9a:	bf00      	nop
 8014f9c:	24000344 	.word	0x24000344

08014fa0 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8014fa0:	b580      	push	{r7, lr}
 8014fa2:	b08c      	sub	sp, #48	@ 0x30
 8014fa4:	af00      	add	r7, sp, #0
 8014fa6:	4603      	mov	r3, r0
 8014fa8:	603a      	str	r2, [r7, #0]
 8014faa:	71fb      	strb	r3, [r7, #7]
 8014fac:	460b      	mov	r3, r1
 8014fae:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
  DRESULT res = RES_ERROR;
 8014fb0:	2301      	movs	r3, #1
 8014fb2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  HAL_SD_CardInfoTypeDef CardInfo;

  if (pdrv != 0) return RES_PARERR;
 8014fb6:	79fb      	ldrb	r3, [r7, #7]
 8014fb8:	2b00      	cmp	r3, #0
 8014fba:	d001      	beq.n	8014fc0 <USER_ioctl+0x20>
 8014fbc:	2304      	movs	r3, #4
 8014fbe:	e049      	b.n	8015054 <USER_ioctl+0xb4>
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8014fc0:	4b26      	ldr	r3, [pc, #152]	@ (801505c <USER_ioctl+0xbc>)
 8014fc2:	781b      	ldrb	r3, [r3, #0]
 8014fc4:	b2db      	uxtb	r3, r3
 8014fc6:	f003 0301 	and.w	r3, r3, #1
 8014fca:	2b00      	cmp	r3, #0
 8014fcc:	d001      	beq.n	8014fd2 <USER_ioctl+0x32>
 8014fce:	2303      	movs	r3, #3
 8014fd0:	e040      	b.n	8015054 <USER_ioctl+0xb4>

  switch (cmd)
 8014fd2:	79bb      	ldrb	r3, [r7, #6]
 8014fd4:	2b03      	cmp	r3, #3
 8014fd6:	d838      	bhi.n	801504a <USER_ioctl+0xaa>
 8014fd8:	a201      	add	r2, pc, #4	@ (adr r2, 8014fe0 <USER_ioctl+0x40>)
 8014fda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014fde:	bf00      	nop
 8014fe0:	08014ff1 	.word	0x08014ff1
 8014fe4:	08014ff9 	.word	0x08014ff9
 8014fe8:	08015013 	.word	0x08015013
 8014fec:	0801502f 	.word	0x0801502f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8014ff0:	2300      	movs	r3, #0
 8014ff2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8014ff6:	e02b      	b.n	8015050 <USER_ioctl+0xb0>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    HAL_SD_GetCardInfo(&hsd1, &CardInfo);
 8014ff8:	f107 0308 	add.w	r3, r7, #8
 8014ffc:	4619      	mov	r1, r3
 8014ffe:	4818      	ldr	r0, [pc, #96]	@ (8015060 <USER_ioctl+0xc0>)
 8015000:	f7f9 feba 	bl	800ed78 <HAL_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8015004:	6a3a      	ldr	r2, [r7, #32]
 8015006:	683b      	ldr	r3, [r7, #0]
 8015008:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 801500a:	2300      	movs	r3, #0
 801500c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8015010:	e01e      	b.n	8015050 <USER_ioctl+0xb0>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    HAL_SD_GetCardInfo(&hsd1, &CardInfo);
 8015012:	f107 0308 	add.w	r3, r7, #8
 8015016:	4619      	mov	r1, r3
 8015018:	4811      	ldr	r0, [pc, #68]	@ (8015060 <USER_ioctl+0xc0>)
 801501a:	f7f9 fead 	bl	800ed78 <HAL_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 801501e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015020:	b29a      	uxth	r2, r3
 8015022:	683b      	ldr	r3, [r7, #0]
 8015024:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8015026:	2300      	movs	r3, #0
 8015028:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 801502c:	e010      	b.n	8015050 <USER_ioctl+0xb0>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    HAL_SD_GetCardInfo(&hsd1, &CardInfo);
 801502e:	f107 0308 	add.w	r3, r7, #8
 8015032:	4619      	mov	r1, r3
 8015034:	480a      	ldr	r0, [pc, #40]	@ (8015060 <USER_ioctl+0xc0>)
 8015036:	f7f9 fe9f 	bl	800ed78 <HAL_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / 512;
 801503a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801503c:	0a5a      	lsrs	r2, r3, #9
 801503e:	683b      	ldr	r3, [r7, #0]
 8015040:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8015042:	2300      	movs	r3, #0
 8015044:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8015048:	e002      	b.n	8015050 <USER_ioctl+0xb0>

  default:
    res = RES_PARERR;
 801504a:	2304      	movs	r3, #4
 801504c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 8015050:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
  /* USER CODE END IOCTL */
}
 8015054:	4618      	mov	r0, r3
 8015056:	3730      	adds	r7, #48	@ 0x30
 8015058:	46bd      	mov	sp, r7
 801505a:	bd80      	pop	{r7, pc}
 801505c:	24000011 	.word	0x24000011
 8015060:	24000344 	.word	0x24000344

08015064 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8015064:	b480      	push	{r7}
 8015066:	b083      	sub	sp, #12
 8015068:	af00      	add	r7, sp, #0
 801506a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801506c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 801506e:	4618      	mov	r0, r3
 8015070:	370c      	adds	r7, #12
 8015072:	46bd      	mov	sp, r7
 8015074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015078:	4770      	bx	lr

0801507a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801507a:	b580      	push	{r7, lr}
 801507c:	b084      	sub	sp, #16
 801507e:	af00      	add	r7, sp, #0
 8015080:	6078      	str	r0, [r7, #4]
 8015082:	460b      	mov	r3, r1
 8015084:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8015086:	2300      	movs	r3, #0
 8015088:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 801508a:	687b      	ldr	r3, [r7, #4]
 801508c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8015090:	2b00      	cmp	r3, #0
 8015092:	d009      	beq.n	80150a8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8015094:	687b      	ldr	r3, [r7, #4]
 8015096:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801509a:	681b      	ldr	r3, [r3, #0]
 801509c:	78fa      	ldrb	r2, [r7, #3]
 801509e:	4611      	mov	r1, r2
 80150a0:	6878      	ldr	r0, [r7, #4]
 80150a2:	4798      	blx	r3
 80150a4:	4603      	mov	r3, r0
 80150a6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80150a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80150aa:	4618      	mov	r0, r3
 80150ac:	3710      	adds	r7, #16
 80150ae:	46bd      	mov	sp, r7
 80150b0:	bd80      	pop	{r7, pc}

080150b2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80150b2:	b580      	push	{r7, lr}
 80150b4:	b084      	sub	sp, #16
 80150b6:	af00      	add	r7, sp, #0
 80150b8:	6078      	str	r0, [r7, #4]
 80150ba:	460b      	mov	r3, r1
 80150bc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80150be:	2300      	movs	r3, #0
 80150c0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80150c2:	687b      	ldr	r3, [r7, #4]
 80150c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80150c8:	685b      	ldr	r3, [r3, #4]
 80150ca:	78fa      	ldrb	r2, [r7, #3]
 80150cc:	4611      	mov	r1, r2
 80150ce:	6878      	ldr	r0, [r7, #4]
 80150d0:	4798      	blx	r3
 80150d2:	4603      	mov	r3, r0
 80150d4:	2b00      	cmp	r3, #0
 80150d6:	d001      	beq.n	80150dc <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80150d8:	2303      	movs	r3, #3
 80150da:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80150dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80150de:	4618      	mov	r0, r3
 80150e0:	3710      	adds	r7, #16
 80150e2:	46bd      	mov	sp, r7
 80150e4:	bd80      	pop	{r7, pc}

080150e6 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80150e6:	b580      	push	{r7, lr}
 80150e8:	b084      	sub	sp, #16
 80150ea:	af00      	add	r7, sp, #0
 80150ec:	6078      	str	r0, [r7, #4]
 80150ee:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80150f0:	687b      	ldr	r3, [r7, #4]
 80150f2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80150f6:	6839      	ldr	r1, [r7, #0]
 80150f8:	4618      	mov	r0, r3
 80150fa:	f001 f8e2 	bl	80162c2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80150fe:	687b      	ldr	r3, [r7, #4]
 8015100:	2201      	movs	r2, #1
 8015102:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8015106:	687b      	ldr	r3, [r7, #4]
 8015108:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 801510c:	461a      	mov	r2, r3
 801510e:	687b      	ldr	r3, [r7, #4]
 8015110:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8015114:	687b      	ldr	r3, [r7, #4]
 8015116:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 801511a:	f003 031f 	and.w	r3, r3, #31
 801511e:	2b02      	cmp	r3, #2
 8015120:	d01a      	beq.n	8015158 <USBD_LL_SetupStage+0x72>
 8015122:	2b02      	cmp	r3, #2
 8015124:	d822      	bhi.n	801516c <USBD_LL_SetupStage+0x86>
 8015126:	2b00      	cmp	r3, #0
 8015128:	d002      	beq.n	8015130 <USBD_LL_SetupStage+0x4a>
 801512a:	2b01      	cmp	r3, #1
 801512c:	d00a      	beq.n	8015144 <USBD_LL_SetupStage+0x5e>
 801512e:	e01d      	b.n	801516c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8015130:	687b      	ldr	r3, [r7, #4]
 8015132:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8015136:	4619      	mov	r1, r3
 8015138:	6878      	ldr	r0, [r7, #4]
 801513a:	f000 fb0f 	bl	801575c <USBD_StdDevReq>
 801513e:	4603      	mov	r3, r0
 8015140:	73fb      	strb	r3, [r7, #15]
      break;
 8015142:	e020      	b.n	8015186 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8015144:	687b      	ldr	r3, [r7, #4]
 8015146:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 801514a:	4619      	mov	r1, r3
 801514c:	6878      	ldr	r0, [r7, #4]
 801514e:	f000 fb77 	bl	8015840 <USBD_StdItfReq>
 8015152:	4603      	mov	r3, r0
 8015154:	73fb      	strb	r3, [r7, #15]
      break;
 8015156:	e016      	b.n	8015186 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8015158:	687b      	ldr	r3, [r7, #4]
 801515a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 801515e:	4619      	mov	r1, r3
 8015160:	6878      	ldr	r0, [r7, #4]
 8015162:	f000 fbd9 	bl	8015918 <USBD_StdEPReq>
 8015166:	4603      	mov	r3, r0
 8015168:	73fb      	strb	r3, [r7, #15]
      break;
 801516a:	e00c      	b.n	8015186 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 801516c:	687b      	ldr	r3, [r7, #4]
 801516e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8015172:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8015176:	b2db      	uxtb	r3, r3
 8015178:	4619      	mov	r1, r3
 801517a:	6878      	ldr	r0, [r7, #4]
 801517c:	f009 fc8e 	bl	801ea9c <USBD_LL_StallEP>
 8015180:	4603      	mov	r3, r0
 8015182:	73fb      	strb	r3, [r7, #15]
      break;
 8015184:	bf00      	nop
  }

  return ret;
 8015186:	7bfb      	ldrb	r3, [r7, #15]
}
 8015188:	4618      	mov	r0, r3
 801518a:	3710      	adds	r7, #16
 801518c:	46bd      	mov	sp, r7
 801518e:	bd80      	pop	{r7, pc}

08015190 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8015190:	b580      	push	{r7, lr}
 8015192:	b086      	sub	sp, #24
 8015194:	af00      	add	r7, sp, #0
 8015196:	60f8      	str	r0, [r7, #12]
 8015198:	460b      	mov	r3, r1
 801519a:	607a      	str	r2, [r7, #4]
 801519c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 801519e:	2300      	movs	r3, #0
 80151a0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80151a2:	7afb      	ldrb	r3, [r7, #11]
 80151a4:	2b00      	cmp	r3, #0
 80151a6:	d16e      	bne.n	8015286 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80151a8:	68fb      	ldr	r3, [r7, #12]
 80151aa:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80151ae:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80151b0:	68fb      	ldr	r3, [r7, #12]
 80151b2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80151b6:	2b03      	cmp	r3, #3
 80151b8:	f040 8098 	bne.w	80152ec <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80151bc:	693b      	ldr	r3, [r7, #16]
 80151be:	689a      	ldr	r2, [r3, #8]
 80151c0:	693b      	ldr	r3, [r7, #16]
 80151c2:	68db      	ldr	r3, [r3, #12]
 80151c4:	429a      	cmp	r2, r3
 80151c6:	d913      	bls.n	80151f0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80151c8:	693b      	ldr	r3, [r7, #16]
 80151ca:	689a      	ldr	r2, [r3, #8]
 80151cc:	693b      	ldr	r3, [r7, #16]
 80151ce:	68db      	ldr	r3, [r3, #12]
 80151d0:	1ad2      	subs	r2, r2, r3
 80151d2:	693b      	ldr	r3, [r7, #16]
 80151d4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80151d6:	693b      	ldr	r3, [r7, #16]
 80151d8:	68da      	ldr	r2, [r3, #12]
 80151da:	693b      	ldr	r3, [r7, #16]
 80151dc:	689b      	ldr	r3, [r3, #8]
 80151de:	4293      	cmp	r3, r2
 80151e0:	bf28      	it	cs
 80151e2:	4613      	movcs	r3, r2
 80151e4:	461a      	mov	r2, r3
 80151e6:	6879      	ldr	r1, [r7, #4]
 80151e8:	68f8      	ldr	r0, [r7, #12]
 80151ea:	f001 f8e1 	bl	80163b0 <USBD_CtlContinueRx>
 80151ee:	e07d      	b.n	80152ec <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80151f0:	68fb      	ldr	r3, [r7, #12]
 80151f2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80151f6:	f003 031f 	and.w	r3, r3, #31
 80151fa:	2b02      	cmp	r3, #2
 80151fc:	d014      	beq.n	8015228 <USBD_LL_DataOutStage+0x98>
 80151fe:	2b02      	cmp	r3, #2
 8015200:	d81d      	bhi.n	801523e <USBD_LL_DataOutStage+0xae>
 8015202:	2b00      	cmp	r3, #0
 8015204:	d002      	beq.n	801520c <USBD_LL_DataOutStage+0x7c>
 8015206:	2b01      	cmp	r3, #1
 8015208:	d003      	beq.n	8015212 <USBD_LL_DataOutStage+0x82>
 801520a:	e018      	b.n	801523e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 801520c:	2300      	movs	r3, #0
 801520e:	75bb      	strb	r3, [r7, #22]
            break;
 8015210:	e018      	b.n	8015244 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8015212:	68fb      	ldr	r3, [r7, #12]
 8015214:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8015218:	b2db      	uxtb	r3, r3
 801521a:	4619      	mov	r1, r3
 801521c:	68f8      	ldr	r0, [r7, #12]
 801521e:	f000 fa64 	bl	80156ea <USBD_CoreFindIF>
 8015222:	4603      	mov	r3, r0
 8015224:	75bb      	strb	r3, [r7, #22]
            break;
 8015226:	e00d      	b.n	8015244 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8015228:	68fb      	ldr	r3, [r7, #12]
 801522a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 801522e:	b2db      	uxtb	r3, r3
 8015230:	4619      	mov	r1, r3
 8015232:	68f8      	ldr	r0, [r7, #12]
 8015234:	f000 fa66 	bl	8015704 <USBD_CoreFindEP>
 8015238:	4603      	mov	r3, r0
 801523a:	75bb      	strb	r3, [r7, #22]
            break;
 801523c:	e002      	b.n	8015244 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 801523e:	2300      	movs	r3, #0
 8015240:	75bb      	strb	r3, [r7, #22]
            break;
 8015242:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8015244:	7dbb      	ldrb	r3, [r7, #22]
 8015246:	2b00      	cmp	r3, #0
 8015248:	d119      	bne.n	801527e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801524a:	68fb      	ldr	r3, [r7, #12]
 801524c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8015250:	b2db      	uxtb	r3, r3
 8015252:	2b03      	cmp	r3, #3
 8015254:	d113      	bne.n	801527e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8015256:	7dba      	ldrb	r2, [r7, #22]
 8015258:	68fb      	ldr	r3, [r7, #12]
 801525a:	32ae      	adds	r2, #174	@ 0xae
 801525c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015260:	691b      	ldr	r3, [r3, #16]
 8015262:	2b00      	cmp	r3, #0
 8015264:	d00b      	beq.n	801527e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8015266:	7dba      	ldrb	r2, [r7, #22]
 8015268:	68fb      	ldr	r3, [r7, #12]
 801526a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 801526e:	7dba      	ldrb	r2, [r7, #22]
 8015270:	68fb      	ldr	r3, [r7, #12]
 8015272:	32ae      	adds	r2, #174	@ 0xae
 8015274:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015278:	691b      	ldr	r3, [r3, #16]
 801527a:	68f8      	ldr	r0, [r7, #12]
 801527c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 801527e:	68f8      	ldr	r0, [r7, #12]
 8015280:	f001 f8a7 	bl	80163d2 <USBD_CtlSendStatus>
 8015284:	e032      	b.n	80152ec <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8015286:	7afb      	ldrb	r3, [r7, #11]
 8015288:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801528c:	b2db      	uxtb	r3, r3
 801528e:	4619      	mov	r1, r3
 8015290:	68f8      	ldr	r0, [r7, #12]
 8015292:	f000 fa37 	bl	8015704 <USBD_CoreFindEP>
 8015296:	4603      	mov	r3, r0
 8015298:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801529a:	7dbb      	ldrb	r3, [r7, #22]
 801529c:	2bff      	cmp	r3, #255	@ 0xff
 801529e:	d025      	beq.n	80152ec <USBD_LL_DataOutStage+0x15c>
 80152a0:	7dbb      	ldrb	r3, [r7, #22]
 80152a2:	2b00      	cmp	r3, #0
 80152a4:	d122      	bne.n	80152ec <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80152a6:	68fb      	ldr	r3, [r7, #12]
 80152a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80152ac:	b2db      	uxtb	r3, r3
 80152ae:	2b03      	cmp	r3, #3
 80152b0:	d117      	bne.n	80152e2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80152b2:	7dba      	ldrb	r2, [r7, #22]
 80152b4:	68fb      	ldr	r3, [r7, #12]
 80152b6:	32ae      	adds	r2, #174	@ 0xae
 80152b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80152bc:	699b      	ldr	r3, [r3, #24]
 80152be:	2b00      	cmp	r3, #0
 80152c0:	d00f      	beq.n	80152e2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80152c2:	7dba      	ldrb	r2, [r7, #22]
 80152c4:	68fb      	ldr	r3, [r7, #12]
 80152c6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80152ca:	7dba      	ldrb	r2, [r7, #22]
 80152cc:	68fb      	ldr	r3, [r7, #12]
 80152ce:	32ae      	adds	r2, #174	@ 0xae
 80152d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80152d4:	699b      	ldr	r3, [r3, #24]
 80152d6:	7afa      	ldrb	r2, [r7, #11]
 80152d8:	4611      	mov	r1, r2
 80152da:	68f8      	ldr	r0, [r7, #12]
 80152dc:	4798      	blx	r3
 80152de:	4603      	mov	r3, r0
 80152e0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80152e2:	7dfb      	ldrb	r3, [r7, #23]
 80152e4:	2b00      	cmp	r3, #0
 80152e6:	d001      	beq.n	80152ec <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80152e8:	7dfb      	ldrb	r3, [r7, #23]
 80152ea:	e000      	b.n	80152ee <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80152ec:	2300      	movs	r3, #0
}
 80152ee:	4618      	mov	r0, r3
 80152f0:	3718      	adds	r7, #24
 80152f2:	46bd      	mov	sp, r7
 80152f4:	bd80      	pop	{r7, pc}

080152f6 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80152f6:	b580      	push	{r7, lr}
 80152f8:	b086      	sub	sp, #24
 80152fa:	af00      	add	r7, sp, #0
 80152fc:	60f8      	str	r0, [r7, #12]
 80152fe:	460b      	mov	r3, r1
 8015300:	607a      	str	r2, [r7, #4]
 8015302:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8015304:	7afb      	ldrb	r3, [r7, #11]
 8015306:	2b00      	cmp	r3, #0
 8015308:	d16f      	bne.n	80153ea <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 801530a:	68fb      	ldr	r3, [r7, #12]
 801530c:	3314      	adds	r3, #20
 801530e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8015310:	68fb      	ldr	r3, [r7, #12]
 8015312:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8015316:	2b02      	cmp	r3, #2
 8015318:	d15a      	bne.n	80153d0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 801531a:	693b      	ldr	r3, [r7, #16]
 801531c:	689a      	ldr	r2, [r3, #8]
 801531e:	693b      	ldr	r3, [r7, #16]
 8015320:	68db      	ldr	r3, [r3, #12]
 8015322:	429a      	cmp	r2, r3
 8015324:	d914      	bls.n	8015350 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8015326:	693b      	ldr	r3, [r7, #16]
 8015328:	689a      	ldr	r2, [r3, #8]
 801532a:	693b      	ldr	r3, [r7, #16]
 801532c:	68db      	ldr	r3, [r3, #12]
 801532e:	1ad2      	subs	r2, r2, r3
 8015330:	693b      	ldr	r3, [r7, #16]
 8015332:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8015334:	693b      	ldr	r3, [r7, #16]
 8015336:	689b      	ldr	r3, [r3, #8]
 8015338:	461a      	mov	r2, r3
 801533a:	6879      	ldr	r1, [r7, #4]
 801533c:	68f8      	ldr	r0, [r7, #12]
 801533e:	f001 f826 	bl	801638e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8015342:	2300      	movs	r3, #0
 8015344:	2200      	movs	r2, #0
 8015346:	2100      	movs	r1, #0
 8015348:	68f8      	ldr	r0, [r7, #12]
 801534a:	f009 fc51 	bl	801ebf0 <USBD_LL_PrepareReceive>
 801534e:	e03f      	b.n	80153d0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8015350:	693b      	ldr	r3, [r7, #16]
 8015352:	68da      	ldr	r2, [r3, #12]
 8015354:	693b      	ldr	r3, [r7, #16]
 8015356:	689b      	ldr	r3, [r3, #8]
 8015358:	429a      	cmp	r2, r3
 801535a:	d11c      	bne.n	8015396 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 801535c:	693b      	ldr	r3, [r7, #16]
 801535e:	685a      	ldr	r2, [r3, #4]
 8015360:	693b      	ldr	r3, [r7, #16]
 8015362:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8015364:	429a      	cmp	r2, r3
 8015366:	d316      	bcc.n	8015396 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8015368:	693b      	ldr	r3, [r7, #16]
 801536a:	685a      	ldr	r2, [r3, #4]
 801536c:	68fb      	ldr	r3, [r7, #12]
 801536e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8015372:	429a      	cmp	r2, r3
 8015374:	d20f      	bcs.n	8015396 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8015376:	2200      	movs	r2, #0
 8015378:	2100      	movs	r1, #0
 801537a:	68f8      	ldr	r0, [r7, #12]
 801537c:	f001 f807 	bl	801638e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8015380:	68fb      	ldr	r3, [r7, #12]
 8015382:	2200      	movs	r2, #0
 8015384:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8015388:	2300      	movs	r3, #0
 801538a:	2200      	movs	r2, #0
 801538c:	2100      	movs	r1, #0
 801538e:	68f8      	ldr	r0, [r7, #12]
 8015390:	f009 fc2e 	bl	801ebf0 <USBD_LL_PrepareReceive>
 8015394:	e01c      	b.n	80153d0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015396:	68fb      	ldr	r3, [r7, #12]
 8015398:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801539c:	b2db      	uxtb	r3, r3
 801539e:	2b03      	cmp	r3, #3
 80153a0:	d10f      	bne.n	80153c2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80153a2:	68fb      	ldr	r3, [r7, #12]
 80153a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80153a8:	68db      	ldr	r3, [r3, #12]
 80153aa:	2b00      	cmp	r3, #0
 80153ac:	d009      	beq.n	80153c2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80153ae:	68fb      	ldr	r3, [r7, #12]
 80153b0:	2200      	movs	r2, #0
 80153b2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80153b6:	68fb      	ldr	r3, [r7, #12]
 80153b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80153bc:	68db      	ldr	r3, [r3, #12]
 80153be:	68f8      	ldr	r0, [r7, #12]
 80153c0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80153c2:	2180      	movs	r1, #128	@ 0x80
 80153c4:	68f8      	ldr	r0, [r7, #12]
 80153c6:	f009 fb69 	bl	801ea9c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80153ca:	68f8      	ldr	r0, [r7, #12]
 80153cc:	f001 f814 	bl	80163f8 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80153d0:	68fb      	ldr	r3, [r7, #12]
 80153d2:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80153d6:	2b00      	cmp	r3, #0
 80153d8:	d03a      	beq.n	8015450 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80153da:	68f8      	ldr	r0, [r7, #12]
 80153dc:	f7ff fe42 	bl	8015064 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80153e0:	68fb      	ldr	r3, [r7, #12]
 80153e2:	2200      	movs	r2, #0
 80153e4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80153e8:	e032      	b.n	8015450 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80153ea:	7afb      	ldrb	r3, [r7, #11]
 80153ec:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80153f0:	b2db      	uxtb	r3, r3
 80153f2:	4619      	mov	r1, r3
 80153f4:	68f8      	ldr	r0, [r7, #12]
 80153f6:	f000 f985 	bl	8015704 <USBD_CoreFindEP>
 80153fa:	4603      	mov	r3, r0
 80153fc:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80153fe:	7dfb      	ldrb	r3, [r7, #23]
 8015400:	2bff      	cmp	r3, #255	@ 0xff
 8015402:	d025      	beq.n	8015450 <USBD_LL_DataInStage+0x15a>
 8015404:	7dfb      	ldrb	r3, [r7, #23]
 8015406:	2b00      	cmp	r3, #0
 8015408:	d122      	bne.n	8015450 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801540a:	68fb      	ldr	r3, [r7, #12]
 801540c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8015410:	b2db      	uxtb	r3, r3
 8015412:	2b03      	cmp	r3, #3
 8015414:	d11c      	bne.n	8015450 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8015416:	7dfa      	ldrb	r2, [r7, #23]
 8015418:	68fb      	ldr	r3, [r7, #12]
 801541a:	32ae      	adds	r2, #174	@ 0xae
 801541c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015420:	695b      	ldr	r3, [r3, #20]
 8015422:	2b00      	cmp	r3, #0
 8015424:	d014      	beq.n	8015450 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8015426:	7dfa      	ldrb	r2, [r7, #23]
 8015428:	68fb      	ldr	r3, [r7, #12]
 801542a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 801542e:	7dfa      	ldrb	r2, [r7, #23]
 8015430:	68fb      	ldr	r3, [r7, #12]
 8015432:	32ae      	adds	r2, #174	@ 0xae
 8015434:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015438:	695b      	ldr	r3, [r3, #20]
 801543a:	7afa      	ldrb	r2, [r7, #11]
 801543c:	4611      	mov	r1, r2
 801543e:	68f8      	ldr	r0, [r7, #12]
 8015440:	4798      	blx	r3
 8015442:	4603      	mov	r3, r0
 8015444:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8015446:	7dbb      	ldrb	r3, [r7, #22]
 8015448:	2b00      	cmp	r3, #0
 801544a:	d001      	beq.n	8015450 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 801544c:	7dbb      	ldrb	r3, [r7, #22]
 801544e:	e000      	b.n	8015452 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8015450:	2300      	movs	r3, #0
}
 8015452:	4618      	mov	r0, r3
 8015454:	3718      	adds	r7, #24
 8015456:	46bd      	mov	sp, r7
 8015458:	bd80      	pop	{r7, pc}

0801545a <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 801545a:	b580      	push	{r7, lr}
 801545c:	b084      	sub	sp, #16
 801545e:	af00      	add	r7, sp, #0
 8015460:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8015462:	2300      	movs	r3, #0
 8015464:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8015466:	687b      	ldr	r3, [r7, #4]
 8015468:	2201      	movs	r2, #1
 801546a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 801546e:	687b      	ldr	r3, [r7, #4]
 8015470:	2200      	movs	r2, #0
 8015472:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8015476:	687b      	ldr	r3, [r7, #4]
 8015478:	2200      	movs	r2, #0
 801547a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 801547c:	687b      	ldr	r3, [r7, #4]
 801547e:	2200      	movs	r2, #0
 8015480:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8015484:	687b      	ldr	r3, [r7, #4]
 8015486:	2200      	movs	r2, #0
 8015488:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 801548c:	687b      	ldr	r3, [r7, #4]
 801548e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8015492:	2b00      	cmp	r3, #0
 8015494:	d014      	beq.n	80154c0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8015496:	687b      	ldr	r3, [r7, #4]
 8015498:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801549c:	685b      	ldr	r3, [r3, #4]
 801549e:	2b00      	cmp	r3, #0
 80154a0:	d00e      	beq.n	80154c0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80154a2:	687b      	ldr	r3, [r7, #4]
 80154a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80154a8:	685b      	ldr	r3, [r3, #4]
 80154aa:	687a      	ldr	r2, [r7, #4]
 80154ac:	6852      	ldr	r2, [r2, #4]
 80154ae:	b2d2      	uxtb	r2, r2
 80154b0:	4611      	mov	r1, r2
 80154b2:	6878      	ldr	r0, [r7, #4]
 80154b4:	4798      	blx	r3
 80154b6:	4603      	mov	r3, r0
 80154b8:	2b00      	cmp	r3, #0
 80154ba:	d001      	beq.n	80154c0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80154bc:	2303      	movs	r3, #3
 80154be:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80154c0:	2340      	movs	r3, #64	@ 0x40
 80154c2:	2200      	movs	r2, #0
 80154c4:	2100      	movs	r1, #0
 80154c6:	6878      	ldr	r0, [r7, #4]
 80154c8:	f009 fac2 	bl	801ea50 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80154cc:	687b      	ldr	r3, [r7, #4]
 80154ce:	2201      	movs	r2, #1
 80154d0:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80154d4:	687b      	ldr	r3, [r7, #4]
 80154d6:	2240      	movs	r2, #64	@ 0x40
 80154d8:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80154dc:	2340      	movs	r3, #64	@ 0x40
 80154de:	2200      	movs	r2, #0
 80154e0:	2180      	movs	r1, #128	@ 0x80
 80154e2:	6878      	ldr	r0, [r7, #4]
 80154e4:	f009 fab4 	bl	801ea50 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80154e8:	687b      	ldr	r3, [r7, #4]
 80154ea:	2201      	movs	r2, #1
 80154ec:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80154ee:	687b      	ldr	r3, [r7, #4]
 80154f0:	2240      	movs	r2, #64	@ 0x40
 80154f2:	621a      	str	r2, [r3, #32]

  return ret;
 80154f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80154f6:	4618      	mov	r0, r3
 80154f8:	3710      	adds	r7, #16
 80154fa:	46bd      	mov	sp, r7
 80154fc:	bd80      	pop	{r7, pc}

080154fe <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80154fe:	b480      	push	{r7}
 8015500:	b083      	sub	sp, #12
 8015502:	af00      	add	r7, sp, #0
 8015504:	6078      	str	r0, [r7, #4]
 8015506:	460b      	mov	r3, r1
 8015508:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 801550a:	687b      	ldr	r3, [r7, #4]
 801550c:	78fa      	ldrb	r2, [r7, #3]
 801550e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8015510:	2300      	movs	r3, #0
}
 8015512:	4618      	mov	r0, r3
 8015514:	370c      	adds	r7, #12
 8015516:	46bd      	mov	sp, r7
 8015518:	f85d 7b04 	ldr.w	r7, [sp], #4
 801551c:	4770      	bx	lr

0801551e <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 801551e:	b480      	push	{r7}
 8015520:	b083      	sub	sp, #12
 8015522:	af00      	add	r7, sp, #0
 8015524:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8015526:	687b      	ldr	r3, [r7, #4]
 8015528:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801552c:	b2db      	uxtb	r3, r3
 801552e:	2b04      	cmp	r3, #4
 8015530:	d006      	beq.n	8015540 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8015532:	687b      	ldr	r3, [r7, #4]
 8015534:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8015538:	b2da      	uxtb	r2, r3
 801553a:	687b      	ldr	r3, [r7, #4]
 801553c:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8015540:	687b      	ldr	r3, [r7, #4]
 8015542:	2204      	movs	r2, #4
 8015544:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8015548:	2300      	movs	r3, #0
}
 801554a:	4618      	mov	r0, r3
 801554c:	370c      	adds	r7, #12
 801554e:	46bd      	mov	sp, r7
 8015550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015554:	4770      	bx	lr

08015556 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8015556:	b480      	push	{r7}
 8015558:	b083      	sub	sp, #12
 801555a:	af00      	add	r7, sp, #0
 801555c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 801555e:	687b      	ldr	r3, [r7, #4]
 8015560:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8015564:	b2db      	uxtb	r3, r3
 8015566:	2b04      	cmp	r3, #4
 8015568:	d106      	bne.n	8015578 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 801556a:	687b      	ldr	r3, [r7, #4]
 801556c:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8015570:	b2da      	uxtb	r2, r3
 8015572:	687b      	ldr	r3, [r7, #4]
 8015574:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8015578:	2300      	movs	r3, #0
}
 801557a:	4618      	mov	r0, r3
 801557c:	370c      	adds	r7, #12
 801557e:	46bd      	mov	sp, r7
 8015580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015584:	4770      	bx	lr

08015586 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8015586:	b580      	push	{r7, lr}
 8015588:	b082      	sub	sp, #8
 801558a:	af00      	add	r7, sp, #0
 801558c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801558e:	687b      	ldr	r3, [r7, #4]
 8015590:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8015594:	b2db      	uxtb	r3, r3
 8015596:	2b03      	cmp	r3, #3
 8015598:	d110      	bne.n	80155bc <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 801559a:	687b      	ldr	r3, [r7, #4]
 801559c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80155a0:	2b00      	cmp	r3, #0
 80155a2:	d00b      	beq.n	80155bc <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80155a4:	687b      	ldr	r3, [r7, #4]
 80155a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80155aa:	69db      	ldr	r3, [r3, #28]
 80155ac:	2b00      	cmp	r3, #0
 80155ae:	d005      	beq.n	80155bc <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80155b0:	687b      	ldr	r3, [r7, #4]
 80155b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80155b6:	69db      	ldr	r3, [r3, #28]
 80155b8:	6878      	ldr	r0, [r7, #4]
 80155ba:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80155bc:	2300      	movs	r3, #0
}
 80155be:	4618      	mov	r0, r3
 80155c0:	3708      	adds	r7, #8
 80155c2:	46bd      	mov	sp, r7
 80155c4:	bd80      	pop	{r7, pc}

080155c6 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80155c6:	b580      	push	{r7, lr}
 80155c8:	b082      	sub	sp, #8
 80155ca:	af00      	add	r7, sp, #0
 80155cc:	6078      	str	r0, [r7, #4]
 80155ce:	460b      	mov	r3, r1
 80155d0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80155d2:	687b      	ldr	r3, [r7, #4]
 80155d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80155d8:	687b      	ldr	r3, [r7, #4]
 80155da:	32ae      	adds	r2, #174	@ 0xae
 80155dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80155e0:	2b00      	cmp	r3, #0
 80155e2:	d101      	bne.n	80155e8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80155e4:	2303      	movs	r3, #3
 80155e6:	e01c      	b.n	8015622 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80155e8:	687b      	ldr	r3, [r7, #4]
 80155ea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80155ee:	b2db      	uxtb	r3, r3
 80155f0:	2b03      	cmp	r3, #3
 80155f2:	d115      	bne.n	8015620 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80155f4:	687b      	ldr	r3, [r7, #4]
 80155f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80155fa:	687b      	ldr	r3, [r7, #4]
 80155fc:	32ae      	adds	r2, #174	@ 0xae
 80155fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015602:	6a1b      	ldr	r3, [r3, #32]
 8015604:	2b00      	cmp	r3, #0
 8015606:	d00b      	beq.n	8015620 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8015608:	687b      	ldr	r3, [r7, #4]
 801560a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801560e:	687b      	ldr	r3, [r7, #4]
 8015610:	32ae      	adds	r2, #174	@ 0xae
 8015612:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015616:	6a1b      	ldr	r3, [r3, #32]
 8015618:	78fa      	ldrb	r2, [r7, #3]
 801561a:	4611      	mov	r1, r2
 801561c:	6878      	ldr	r0, [r7, #4]
 801561e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8015620:	2300      	movs	r3, #0
}
 8015622:	4618      	mov	r0, r3
 8015624:	3708      	adds	r7, #8
 8015626:	46bd      	mov	sp, r7
 8015628:	bd80      	pop	{r7, pc}

0801562a <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 801562a:	b580      	push	{r7, lr}
 801562c:	b082      	sub	sp, #8
 801562e:	af00      	add	r7, sp, #0
 8015630:	6078      	str	r0, [r7, #4]
 8015632:	460b      	mov	r3, r1
 8015634:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8015636:	687b      	ldr	r3, [r7, #4]
 8015638:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801563c:	687b      	ldr	r3, [r7, #4]
 801563e:	32ae      	adds	r2, #174	@ 0xae
 8015640:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015644:	2b00      	cmp	r3, #0
 8015646:	d101      	bne.n	801564c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8015648:	2303      	movs	r3, #3
 801564a:	e01c      	b.n	8015686 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801564c:	687b      	ldr	r3, [r7, #4]
 801564e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8015652:	b2db      	uxtb	r3, r3
 8015654:	2b03      	cmp	r3, #3
 8015656:	d115      	bne.n	8015684 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8015658:	687b      	ldr	r3, [r7, #4]
 801565a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801565e:	687b      	ldr	r3, [r7, #4]
 8015660:	32ae      	adds	r2, #174	@ 0xae
 8015662:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015666:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015668:	2b00      	cmp	r3, #0
 801566a:	d00b      	beq.n	8015684 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 801566c:	687b      	ldr	r3, [r7, #4]
 801566e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015672:	687b      	ldr	r3, [r7, #4]
 8015674:	32ae      	adds	r2, #174	@ 0xae
 8015676:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801567a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801567c:	78fa      	ldrb	r2, [r7, #3]
 801567e:	4611      	mov	r1, r2
 8015680:	6878      	ldr	r0, [r7, #4]
 8015682:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8015684:	2300      	movs	r3, #0
}
 8015686:	4618      	mov	r0, r3
 8015688:	3708      	adds	r7, #8
 801568a:	46bd      	mov	sp, r7
 801568c:	bd80      	pop	{r7, pc}

0801568e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 801568e:	b480      	push	{r7}
 8015690:	b083      	sub	sp, #12
 8015692:	af00      	add	r7, sp, #0
 8015694:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8015696:	2300      	movs	r3, #0
}
 8015698:	4618      	mov	r0, r3
 801569a:	370c      	adds	r7, #12
 801569c:	46bd      	mov	sp, r7
 801569e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156a2:	4770      	bx	lr

080156a4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80156a4:	b580      	push	{r7, lr}
 80156a6:	b084      	sub	sp, #16
 80156a8:	af00      	add	r7, sp, #0
 80156aa:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80156ac:	2300      	movs	r3, #0
 80156ae:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80156b0:	687b      	ldr	r3, [r7, #4]
 80156b2:	2201      	movs	r2, #1
 80156b4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80156b8:	687b      	ldr	r3, [r7, #4]
 80156ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80156be:	2b00      	cmp	r3, #0
 80156c0:	d00e      	beq.n	80156e0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80156c2:	687b      	ldr	r3, [r7, #4]
 80156c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80156c8:	685b      	ldr	r3, [r3, #4]
 80156ca:	687a      	ldr	r2, [r7, #4]
 80156cc:	6852      	ldr	r2, [r2, #4]
 80156ce:	b2d2      	uxtb	r2, r2
 80156d0:	4611      	mov	r1, r2
 80156d2:	6878      	ldr	r0, [r7, #4]
 80156d4:	4798      	blx	r3
 80156d6:	4603      	mov	r3, r0
 80156d8:	2b00      	cmp	r3, #0
 80156da:	d001      	beq.n	80156e0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80156dc:	2303      	movs	r3, #3
 80156de:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80156e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80156e2:	4618      	mov	r0, r3
 80156e4:	3710      	adds	r7, #16
 80156e6:	46bd      	mov	sp, r7
 80156e8:	bd80      	pop	{r7, pc}

080156ea <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80156ea:	b480      	push	{r7}
 80156ec:	b083      	sub	sp, #12
 80156ee:	af00      	add	r7, sp, #0
 80156f0:	6078      	str	r0, [r7, #4]
 80156f2:	460b      	mov	r3, r1
 80156f4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80156f6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80156f8:	4618      	mov	r0, r3
 80156fa:	370c      	adds	r7, #12
 80156fc:	46bd      	mov	sp, r7
 80156fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015702:	4770      	bx	lr

08015704 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8015704:	b480      	push	{r7}
 8015706:	b083      	sub	sp, #12
 8015708:	af00      	add	r7, sp, #0
 801570a:	6078      	str	r0, [r7, #4]
 801570c:	460b      	mov	r3, r1
 801570e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8015710:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8015712:	4618      	mov	r0, r3
 8015714:	370c      	adds	r7, #12
 8015716:	46bd      	mov	sp, r7
 8015718:	f85d 7b04 	ldr.w	r7, [sp], #4
 801571c:	4770      	bx	lr

0801571e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 801571e:	b480      	push	{r7}
 8015720:	b087      	sub	sp, #28
 8015722:	af00      	add	r7, sp, #0
 8015724:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8015726:	687b      	ldr	r3, [r7, #4]
 8015728:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 801572a:	697b      	ldr	r3, [r7, #20]
 801572c:	781b      	ldrb	r3, [r3, #0]
 801572e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8015730:	697b      	ldr	r3, [r7, #20]
 8015732:	3301      	adds	r3, #1
 8015734:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8015736:	697b      	ldr	r3, [r7, #20]
 8015738:	781b      	ldrb	r3, [r3, #0]
 801573a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 801573c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8015740:	021b      	lsls	r3, r3, #8
 8015742:	b21a      	sxth	r2, r3
 8015744:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8015748:	4313      	orrs	r3, r2
 801574a:	b21b      	sxth	r3, r3
 801574c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 801574e:	89fb      	ldrh	r3, [r7, #14]
}
 8015750:	4618      	mov	r0, r3
 8015752:	371c      	adds	r7, #28
 8015754:	46bd      	mov	sp, r7
 8015756:	f85d 7b04 	ldr.w	r7, [sp], #4
 801575a:	4770      	bx	lr

0801575c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801575c:	b580      	push	{r7, lr}
 801575e:	b084      	sub	sp, #16
 8015760:	af00      	add	r7, sp, #0
 8015762:	6078      	str	r0, [r7, #4]
 8015764:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8015766:	2300      	movs	r3, #0
 8015768:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801576a:	683b      	ldr	r3, [r7, #0]
 801576c:	781b      	ldrb	r3, [r3, #0]
 801576e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8015772:	2b40      	cmp	r3, #64	@ 0x40
 8015774:	d005      	beq.n	8015782 <USBD_StdDevReq+0x26>
 8015776:	2b40      	cmp	r3, #64	@ 0x40
 8015778:	d857      	bhi.n	801582a <USBD_StdDevReq+0xce>
 801577a:	2b00      	cmp	r3, #0
 801577c:	d00f      	beq.n	801579e <USBD_StdDevReq+0x42>
 801577e:	2b20      	cmp	r3, #32
 8015780:	d153      	bne.n	801582a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8015782:	687b      	ldr	r3, [r7, #4]
 8015784:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015788:	687b      	ldr	r3, [r7, #4]
 801578a:	32ae      	adds	r2, #174	@ 0xae
 801578c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015790:	689b      	ldr	r3, [r3, #8]
 8015792:	6839      	ldr	r1, [r7, #0]
 8015794:	6878      	ldr	r0, [r7, #4]
 8015796:	4798      	blx	r3
 8015798:	4603      	mov	r3, r0
 801579a:	73fb      	strb	r3, [r7, #15]
      break;
 801579c:	e04a      	b.n	8015834 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801579e:	683b      	ldr	r3, [r7, #0]
 80157a0:	785b      	ldrb	r3, [r3, #1]
 80157a2:	2b09      	cmp	r3, #9
 80157a4:	d83b      	bhi.n	801581e <USBD_StdDevReq+0xc2>
 80157a6:	a201      	add	r2, pc, #4	@ (adr r2, 80157ac <USBD_StdDevReq+0x50>)
 80157a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80157ac:	08015801 	.word	0x08015801
 80157b0:	08015815 	.word	0x08015815
 80157b4:	0801581f 	.word	0x0801581f
 80157b8:	0801580b 	.word	0x0801580b
 80157bc:	0801581f 	.word	0x0801581f
 80157c0:	080157df 	.word	0x080157df
 80157c4:	080157d5 	.word	0x080157d5
 80157c8:	0801581f 	.word	0x0801581f
 80157cc:	080157f7 	.word	0x080157f7
 80157d0:	080157e9 	.word	0x080157e9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80157d4:	6839      	ldr	r1, [r7, #0]
 80157d6:	6878      	ldr	r0, [r7, #4]
 80157d8:	f000 fa3c 	bl	8015c54 <USBD_GetDescriptor>
          break;
 80157dc:	e024      	b.n	8015828 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80157de:	6839      	ldr	r1, [r7, #0]
 80157e0:	6878      	ldr	r0, [r7, #4]
 80157e2:	f000 fbcb 	bl	8015f7c <USBD_SetAddress>
          break;
 80157e6:	e01f      	b.n	8015828 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80157e8:	6839      	ldr	r1, [r7, #0]
 80157ea:	6878      	ldr	r0, [r7, #4]
 80157ec:	f000 fc0a 	bl	8016004 <USBD_SetConfig>
 80157f0:	4603      	mov	r3, r0
 80157f2:	73fb      	strb	r3, [r7, #15]
          break;
 80157f4:	e018      	b.n	8015828 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80157f6:	6839      	ldr	r1, [r7, #0]
 80157f8:	6878      	ldr	r0, [r7, #4]
 80157fa:	f000 fcad 	bl	8016158 <USBD_GetConfig>
          break;
 80157fe:	e013      	b.n	8015828 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8015800:	6839      	ldr	r1, [r7, #0]
 8015802:	6878      	ldr	r0, [r7, #4]
 8015804:	f000 fcde 	bl	80161c4 <USBD_GetStatus>
          break;
 8015808:	e00e      	b.n	8015828 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 801580a:	6839      	ldr	r1, [r7, #0]
 801580c:	6878      	ldr	r0, [r7, #4]
 801580e:	f000 fd0d 	bl	801622c <USBD_SetFeature>
          break;
 8015812:	e009      	b.n	8015828 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8015814:	6839      	ldr	r1, [r7, #0]
 8015816:	6878      	ldr	r0, [r7, #4]
 8015818:	f000 fd31 	bl	801627e <USBD_ClrFeature>
          break;
 801581c:	e004      	b.n	8015828 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 801581e:	6839      	ldr	r1, [r7, #0]
 8015820:	6878      	ldr	r0, [r7, #4]
 8015822:	f000 fd88 	bl	8016336 <USBD_CtlError>
          break;
 8015826:	bf00      	nop
      }
      break;
 8015828:	e004      	b.n	8015834 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 801582a:	6839      	ldr	r1, [r7, #0]
 801582c:	6878      	ldr	r0, [r7, #4]
 801582e:	f000 fd82 	bl	8016336 <USBD_CtlError>
      break;
 8015832:	bf00      	nop
  }

  return ret;
 8015834:	7bfb      	ldrb	r3, [r7, #15]
}
 8015836:	4618      	mov	r0, r3
 8015838:	3710      	adds	r7, #16
 801583a:	46bd      	mov	sp, r7
 801583c:	bd80      	pop	{r7, pc}
 801583e:	bf00      	nop

08015840 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015840:	b580      	push	{r7, lr}
 8015842:	b084      	sub	sp, #16
 8015844:	af00      	add	r7, sp, #0
 8015846:	6078      	str	r0, [r7, #4]
 8015848:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801584a:	2300      	movs	r3, #0
 801584c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801584e:	683b      	ldr	r3, [r7, #0]
 8015850:	781b      	ldrb	r3, [r3, #0]
 8015852:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8015856:	2b40      	cmp	r3, #64	@ 0x40
 8015858:	d005      	beq.n	8015866 <USBD_StdItfReq+0x26>
 801585a:	2b40      	cmp	r3, #64	@ 0x40
 801585c:	d852      	bhi.n	8015904 <USBD_StdItfReq+0xc4>
 801585e:	2b00      	cmp	r3, #0
 8015860:	d001      	beq.n	8015866 <USBD_StdItfReq+0x26>
 8015862:	2b20      	cmp	r3, #32
 8015864:	d14e      	bne.n	8015904 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8015866:	687b      	ldr	r3, [r7, #4]
 8015868:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801586c:	b2db      	uxtb	r3, r3
 801586e:	3b01      	subs	r3, #1
 8015870:	2b02      	cmp	r3, #2
 8015872:	d840      	bhi.n	80158f6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8015874:	683b      	ldr	r3, [r7, #0]
 8015876:	889b      	ldrh	r3, [r3, #4]
 8015878:	b2db      	uxtb	r3, r3
 801587a:	2b01      	cmp	r3, #1
 801587c:	d836      	bhi.n	80158ec <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 801587e:	683b      	ldr	r3, [r7, #0]
 8015880:	889b      	ldrh	r3, [r3, #4]
 8015882:	b2db      	uxtb	r3, r3
 8015884:	4619      	mov	r1, r3
 8015886:	6878      	ldr	r0, [r7, #4]
 8015888:	f7ff ff2f 	bl	80156ea <USBD_CoreFindIF>
 801588c:	4603      	mov	r3, r0
 801588e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8015890:	7bbb      	ldrb	r3, [r7, #14]
 8015892:	2bff      	cmp	r3, #255	@ 0xff
 8015894:	d01d      	beq.n	80158d2 <USBD_StdItfReq+0x92>
 8015896:	7bbb      	ldrb	r3, [r7, #14]
 8015898:	2b00      	cmp	r3, #0
 801589a:	d11a      	bne.n	80158d2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 801589c:	7bba      	ldrb	r2, [r7, #14]
 801589e:	687b      	ldr	r3, [r7, #4]
 80158a0:	32ae      	adds	r2, #174	@ 0xae
 80158a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80158a6:	689b      	ldr	r3, [r3, #8]
 80158a8:	2b00      	cmp	r3, #0
 80158aa:	d00f      	beq.n	80158cc <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80158ac:	7bba      	ldrb	r2, [r7, #14]
 80158ae:	687b      	ldr	r3, [r7, #4]
 80158b0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80158b4:	7bba      	ldrb	r2, [r7, #14]
 80158b6:	687b      	ldr	r3, [r7, #4]
 80158b8:	32ae      	adds	r2, #174	@ 0xae
 80158ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80158be:	689b      	ldr	r3, [r3, #8]
 80158c0:	6839      	ldr	r1, [r7, #0]
 80158c2:	6878      	ldr	r0, [r7, #4]
 80158c4:	4798      	blx	r3
 80158c6:	4603      	mov	r3, r0
 80158c8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80158ca:	e004      	b.n	80158d6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80158cc:	2303      	movs	r3, #3
 80158ce:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80158d0:	e001      	b.n	80158d6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80158d2:	2303      	movs	r3, #3
 80158d4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80158d6:	683b      	ldr	r3, [r7, #0]
 80158d8:	88db      	ldrh	r3, [r3, #6]
 80158da:	2b00      	cmp	r3, #0
 80158dc:	d110      	bne.n	8015900 <USBD_StdItfReq+0xc0>
 80158de:	7bfb      	ldrb	r3, [r7, #15]
 80158e0:	2b00      	cmp	r3, #0
 80158e2:	d10d      	bne.n	8015900 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80158e4:	6878      	ldr	r0, [r7, #4]
 80158e6:	f000 fd74 	bl	80163d2 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80158ea:	e009      	b.n	8015900 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80158ec:	6839      	ldr	r1, [r7, #0]
 80158ee:	6878      	ldr	r0, [r7, #4]
 80158f0:	f000 fd21 	bl	8016336 <USBD_CtlError>
          break;
 80158f4:	e004      	b.n	8015900 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80158f6:	6839      	ldr	r1, [r7, #0]
 80158f8:	6878      	ldr	r0, [r7, #4]
 80158fa:	f000 fd1c 	bl	8016336 <USBD_CtlError>
          break;
 80158fe:	e000      	b.n	8015902 <USBD_StdItfReq+0xc2>
          break;
 8015900:	bf00      	nop
      }
      break;
 8015902:	e004      	b.n	801590e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8015904:	6839      	ldr	r1, [r7, #0]
 8015906:	6878      	ldr	r0, [r7, #4]
 8015908:	f000 fd15 	bl	8016336 <USBD_CtlError>
      break;
 801590c:	bf00      	nop
  }

  return ret;
 801590e:	7bfb      	ldrb	r3, [r7, #15]
}
 8015910:	4618      	mov	r0, r3
 8015912:	3710      	adds	r7, #16
 8015914:	46bd      	mov	sp, r7
 8015916:	bd80      	pop	{r7, pc}

08015918 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015918:	b580      	push	{r7, lr}
 801591a:	b084      	sub	sp, #16
 801591c:	af00      	add	r7, sp, #0
 801591e:	6078      	str	r0, [r7, #4]
 8015920:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8015922:	2300      	movs	r3, #0
 8015924:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8015926:	683b      	ldr	r3, [r7, #0]
 8015928:	889b      	ldrh	r3, [r3, #4]
 801592a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801592c:	683b      	ldr	r3, [r7, #0]
 801592e:	781b      	ldrb	r3, [r3, #0]
 8015930:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8015934:	2b40      	cmp	r3, #64	@ 0x40
 8015936:	d007      	beq.n	8015948 <USBD_StdEPReq+0x30>
 8015938:	2b40      	cmp	r3, #64	@ 0x40
 801593a:	f200 817f 	bhi.w	8015c3c <USBD_StdEPReq+0x324>
 801593e:	2b00      	cmp	r3, #0
 8015940:	d02a      	beq.n	8015998 <USBD_StdEPReq+0x80>
 8015942:	2b20      	cmp	r3, #32
 8015944:	f040 817a 	bne.w	8015c3c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8015948:	7bbb      	ldrb	r3, [r7, #14]
 801594a:	4619      	mov	r1, r3
 801594c:	6878      	ldr	r0, [r7, #4]
 801594e:	f7ff fed9 	bl	8015704 <USBD_CoreFindEP>
 8015952:	4603      	mov	r3, r0
 8015954:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8015956:	7b7b      	ldrb	r3, [r7, #13]
 8015958:	2bff      	cmp	r3, #255	@ 0xff
 801595a:	f000 8174 	beq.w	8015c46 <USBD_StdEPReq+0x32e>
 801595e:	7b7b      	ldrb	r3, [r7, #13]
 8015960:	2b00      	cmp	r3, #0
 8015962:	f040 8170 	bne.w	8015c46 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8015966:	7b7a      	ldrb	r2, [r7, #13]
 8015968:	687b      	ldr	r3, [r7, #4]
 801596a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 801596e:	7b7a      	ldrb	r2, [r7, #13]
 8015970:	687b      	ldr	r3, [r7, #4]
 8015972:	32ae      	adds	r2, #174	@ 0xae
 8015974:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015978:	689b      	ldr	r3, [r3, #8]
 801597a:	2b00      	cmp	r3, #0
 801597c:	f000 8163 	beq.w	8015c46 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8015980:	7b7a      	ldrb	r2, [r7, #13]
 8015982:	687b      	ldr	r3, [r7, #4]
 8015984:	32ae      	adds	r2, #174	@ 0xae
 8015986:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801598a:	689b      	ldr	r3, [r3, #8]
 801598c:	6839      	ldr	r1, [r7, #0]
 801598e:	6878      	ldr	r0, [r7, #4]
 8015990:	4798      	blx	r3
 8015992:	4603      	mov	r3, r0
 8015994:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8015996:	e156      	b.n	8015c46 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8015998:	683b      	ldr	r3, [r7, #0]
 801599a:	785b      	ldrb	r3, [r3, #1]
 801599c:	2b03      	cmp	r3, #3
 801599e:	d008      	beq.n	80159b2 <USBD_StdEPReq+0x9a>
 80159a0:	2b03      	cmp	r3, #3
 80159a2:	f300 8145 	bgt.w	8015c30 <USBD_StdEPReq+0x318>
 80159a6:	2b00      	cmp	r3, #0
 80159a8:	f000 809b 	beq.w	8015ae2 <USBD_StdEPReq+0x1ca>
 80159ac:	2b01      	cmp	r3, #1
 80159ae:	d03c      	beq.n	8015a2a <USBD_StdEPReq+0x112>
 80159b0:	e13e      	b.n	8015c30 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80159b2:	687b      	ldr	r3, [r7, #4]
 80159b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80159b8:	b2db      	uxtb	r3, r3
 80159ba:	2b02      	cmp	r3, #2
 80159bc:	d002      	beq.n	80159c4 <USBD_StdEPReq+0xac>
 80159be:	2b03      	cmp	r3, #3
 80159c0:	d016      	beq.n	80159f0 <USBD_StdEPReq+0xd8>
 80159c2:	e02c      	b.n	8015a1e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80159c4:	7bbb      	ldrb	r3, [r7, #14]
 80159c6:	2b00      	cmp	r3, #0
 80159c8:	d00d      	beq.n	80159e6 <USBD_StdEPReq+0xce>
 80159ca:	7bbb      	ldrb	r3, [r7, #14]
 80159cc:	2b80      	cmp	r3, #128	@ 0x80
 80159ce:	d00a      	beq.n	80159e6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80159d0:	7bbb      	ldrb	r3, [r7, #14]
 80159d2:	4619      	mov	r1, r3
 80159d4:	6878      	ldr	r0, [r7, #4]
 80159d6:	f009 f861 	bl	801ea9c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80159da:	2180      	movs	r1, #128	@ 0x80
 80159dc:	6878      	ldr	r0, [r7, #4]
 80159de:	f009 f85d 	bl	801ea9c <USBD_LL_StallEP>
 80159e2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80159e4:	e020      	b.n	8015a28 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80159e6:	6839      	ldr	r1, [r7, #0]
 80159e8:	6878      	ldr	r0, [r7, #4]
 80159ea:	f000 fca4 	bl	8016336 <USBD_CtlError>
              break;
 80159ee:	e01b      	b.n	8015a28 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80159f0:	683b      	ldr	r3, [r7, #0]
 80159f2:	885b      	ldrh	r3, [r3, #2]
 80159f4:	2b00      	cmp	r3, #0
 80159f6:	d10e      	bne.n	8015a16 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80159f8:	7bbb      	ldrb	r3, [r7, #14]
 80159fa:	2b00      	cmp	r3, #0
 80159fc:	d00b      	beq.n	8015a16 <USBD_StdEPReq+0xfe>
 80159fe:	7bbb      	ldrb	r3, [r7, #14]
 8015a00:	2b80      	cmp	r3, #128	@ 0x80
 8015a02:	d008      	beq.n	8015a16 <USBD_StdEPReq+0xfe>
 8015a04:	683b      	ldr	r3, [r7, #0]
 8015a06:	88db      	ldrh	r3, [r3, #6]
 8015a08:	2b00      	cmp	r3, #0
 8015a0a:	d104      	bne.n	8015a16 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8015a0c:	7bbb      	ldrb	r3, [r7, #14]
 8015a0e:	4619      	mov	r1, r3
 8015a10:	6878      	ldr	r0, [r7, #4]
 8015a12:	f009 f843 	bl	801ea9c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8015a16:	6878      	ldr	r0, [r7, #4]
 8015a18:	f000 fcdb 	bl	80163d2 <USBD_CtlSendStatus>

              break;
 8015a1c:	e004      	b.n	8015a28 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8015a1e:	6839      	ldr	r1, [r7, #0]
 8015a20:	6878      	ldr	r0, [r7, #4]
 8015a22:	f000 fc88 	bl	8016336 <USBD_CtlError>
              break;
 8015a26:	bf00      	nop
          }
          break;
 8015a28:	e107      	b.n	8015c3a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8015a2a:	687b      	ldr	r3, [r7, #4]
 8015a2c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8015a30:	b2db      	uxtb	r3, r3
 8015a32:	2b02      	cmp	r3, #2
 8015a34:	d002      	beq.n	8015a3c <USBD_StdEPReq+0x124>
 8015a36:	2b03      	cmp	r3, #3
 8015a38:	d016      	beq.n	8015a68 <USBD_StdEPReq+0x150>
 8015a3a:	e04b      	b.n	8015ad4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8015a3c:	7bbb      	ldrb	r3, [r7, #14]
 8015a3e:	2b00      	cmp	r3, #0
 8015a40:	d00d      	beq.n	8015a5e <USBD_StdEPReq+0x146>
 8015a42:	7bbb      	ldrb	r3, [r7, #14]
 8015a44:	2b80      	cmp	r3, #128	@ 0x80
 8015a46:	d00a      	beq.n	8015a5e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8015a48:	7bbb      	ldrb	r3, [r7, #14]
 8015a4a:	4619      	mov	r1, r3
 8015a4c:	6878      	ldr	r0, [r7, #4]
 8015a4e:	f009 f825 	bl	801ea9c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8015a52:	2180      	movs	r1, #128	@ 0x80
 8015a54:	6878      	ldr	r0, [r7, #4]
 8015a56:	f009 f821 	bl	801ea9c <USBD_LL_StallEP>
 8015a5a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8015a5c:	e040      	b.n	8015ae0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8015a5e:	6839      	ldr	r1, [r7, #0]
 8015a60:	6878      	ldr	r0, [r7, #4]
 8015a62:	f000 fc68 	bl	8016336 <USBD_CtlError>
              break;
 8015a66:	e03b      	b.n	8015ae0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8015a68:	683b      	ldr	r3, [r7, #0]
 8015a6a:	885b      	ldrh	r3, [r3, #2]
 8015a6c:	2b00      	cmp	r3, #0
 8015a6e:	d136      	bne.n	8015ade <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8015a70:	7bbb      	ldrb	r3, [r7, #14]
 8015a72:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8015a76:	2b00      	cmp	r3, #0
 8015a78:	d004      	beq.n	8015a84 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8015a7a:	7bbb      	ldrb	r3, [r7, #14]
 8015a7c:	4619      	mov	r1, r3
 8015a7e:	6878      	ldr	r0, [r7, #4]
 8015a80:	f009 f82b 	bl	801eada <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8015a84:	6878      	ldr	r0, [r7, #4]
 8015a86:	f000 fca4 	bl	80163d2 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8015a8a:	7bbb      	ldrb	r3, [r7, #14]
 8015a8c:	4619      	mov	r1, r3
 8015a8e:	6878      	ldr	r0, [r7, #4]
 8015a90:	f7ff fe38 	bl	8015704 <USBD_CoreFindEP>
 8015a94:	4603      	mov	r3, r0
 8015a96:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8015a98:	7b7b      	ldrb	r3, [r7, #13]
 8015a9a:	2bff      	cmp	r3, #255	@ 0xff
 8015a9c:	d01f      	beq.n	8015ade <USBD_StdEPReq+0x1c6>
 8015a9e:	7b7b      	ldrb	r3, [r7, #13]
 8015aa0:	2b00      	cmp	r3, #0
 8015aa2:	d11c      	bne.n	8015ade <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8015aa4:	7b7a      	ldrb	r2, [r7, #13]
 8015aa6:	687b      	ldr	r3, [r7, #4]
 8015aa8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8015aac:	7b7a      	ldrb	r2, [r7, #13]
 8015aae:	687b      	ldr	r3, [r7, #4]
 8015ab0:	32ae      	adds	r2, #174	@ 0xae
 8015ab2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015ab6:	689b      	ldr	r3, [r3, #8]
 8015ab8:	2b00      	cmp	r3, #0
 8015aba:	d010      	beq.n	8015ade <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8015abc:	7b7a      	ldrb	r2, [r7, #13]
 8015abe:	687b      	ldr	r3, [r7, #4]
 8015ac0:	32ae      	adds	r2, #174	@ 0xae
 8015ac2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015ac6:	689b      	ldr	r3, [r3, #8]
 8015ac8:	6839      	ldr	r1, [r7, #0]
 8015aca:	6878      	ldr	r0, [r7, #4]
 8015acc:	4798      	blx	r3
 8015ace:	4603      	mov	r3, r0
 8015ad0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8015ad2:	e004      	b.n	8015ade <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8015ad4:	6839      	ldr	r1, [r7, #0]
 8015ad6:	6878      	ldr	r0, [r7, #4]
 8015ad8:	f000 fc2d 	bl	8016336 <USBD_CtlError>
              break;
 8015adc:	e000      	b.n	8015ae0 <USBD_StdEPReq+0x1c8>
              break;
 8015ade:	bf00      	nop
          }
          break;
 8015ae0:	e0ab      	b.n	8015c3a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8015ae2:	687b      	ldr	r3, [r7, #4]
 8015ae4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8015ae8:	b2db      	uxtb	r3, r3
 8015aea:	2b02      	cmp	r3, #2
 8015aec:	d002      	beq.n	8015af4 <USBD_StdEPReq+0x1dc>
 8015aee:	2b03      	cmp	r3, #3
 8015af0:	d032      	beq.n	8015b58 <USBD_StdEPReq+0x240>
 8015af2:	e097      	b.n	8015c24 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8015af4:	7bbb      	ldrb	r3, [r7, #14]
 8015af6:	2b00      	cmp	r3, #0
 8015af8:	d007      	beq.n	8015b0a <USBD_StdEPReq+0x1f2>
 8015afa:	7bbb      	ldrb	r3, [r7, #14]
 8015afc:	2b80      	cmp	r3, #128	@ 0x80
 8015afe:	d004      	beq.n	8015b0a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8015b00:	6839      	ldr	r1, [r7, #0]
 8015b02:	6878      	ldr	r0, [r7, #4]
 8015b04:	f000 fc17 	bl	8016336 <USBD_CtlError>
                break;
 8015b08:	e091      	b.n	8015c2e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015b0a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015b0e:	2b00      	cmp	r3, #0
 8015b10:	da0b      	bge.n	8015b2a <USBD_StdEPReq+0x212>
 8015b12:	7bbb      	ldrb	r3, [r7, #14]
 8015b14:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8015b18:	4613      	mov	r3, r2
 8015b1a:	009b      	lsls	r3, r3, #2
 8015b1c:	4413      	add	r3, r2
 8015b1e:	009b      	lsls	r3, r3, #2
 8015b20:	3310      	adds	r3, #16
 8015b22:	687a      	ldr	r2, [r7, #4]
 8015b24:	4413      	add	r3, r2
 8015b26:	3304      	adds	r3, #4
 8015b28:	e00b      	b.n	8015b42 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8015b2a:	7bbb      	ldrb	r3, [r7, #14]
 8015b2c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015b30:	4613      	mov	r3, r2
 8015b32:	009b      	lsls	r3, r3, #2
 8015b34:	4413      	add	r3, r2
 8015b36:	009b      	lsls	r3, r3, #2
 8015b38:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8015b3c:	687a      	ldr	r2, [r7, #4]
 8015b3e:	4413      	add	r3, r2
 8015b40:	3304      	adds	r3, #4
 8015b42:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8015b44:	68bb      	ldr	r3, [r7, #8]
 8015b46:	2200      	movs	r2, #0
 8015b48:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8015b4a:	68bb      	ldr	r3, [r7, #8]
 8015b4c:	2202      	movs	r2, #2
 8015b4e:	4619      	mov	r1, r3
 8015b50:	6878      	ldr	r0, [r7, #4]
 8015b52:	f000 fc01 	bl	8016358 <USBD_CtlSendData>
              break;
 8015b56:	e06a      	b.n	8015c2e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8015b58:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015b5c:	2b00      	cmp	r3, #0
 8015b5e:	da11      	bge.n	8015b84 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8015b60:	7bbb      	ldrb	r3, [r7, #14]
 8015b62:	f003 020f 	and.w	r2, r3, #15
 8015b66:	6879      	ldr	r1, [r7, #4]
 8015b68:	4613      	mov	r3, r2
 8015b6a:	009b      	lsls	r3, r3, #2
 8015b6c:	4413      	add	r3, r2
 8015b6e:	009b      	lsls	r3, r3, #2
 8015b70:	440b      	add	r3, r1
 8015b72:	3324      	adds	r3, #36	@ 0x24
 8015b74:	881b      	ldrh	r3, [r3, #0]
 8015b76:	2b00      	cmp	r3, #0
 8015b78:	d117      	bne.n	8015baa <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8015b7a:	6839      	ldr	r1, [r7, #0]
 8015b7c:	6878      	ldr	r0, [r7, #4]
 8015b7e:	f000 fbda 	bl	8016336 <USBD_CtlError>
                  break;
 8015b82:	e054      	b.n	8015c2e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8015b84:	7bbb      	ldrb	r3, [r7, #14]
 8015b86:	f003 020f 	and.w	r2, r3, #15
 8015b8a:	6879      	ldr	r1, [r7, #4]
 8015b8c:	4613      	mov	r3, r2
 8015b8e:	009b      	lsls	r3, r3, #2
 8015b90:	4413      	add	r3, r2
 8015b92:	009b      	lsls	r3, r3, #2
 8015b94:	440b      	add	r3, r1
 8015b96:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8015b9a:	881b      	ldrh	r3, [r3, #0]
 8015b9c:	2b00      	cmp	r3, #0
 8015b9e:	d104      	bne.n	8015baa <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8015ba0:	6839      	ldr	r1, [r7, #0]
 8015ba2:	6878      	ldr	r0, [r7, #4]
 8015ba4:	f000 fbc7 	bl	8016336 <USBD_CtlError>
                  break;
 8015ba8:	e041      	b.n	8015c2e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015baa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015bae:	2b00      	cmp	r3, #0
 8015bb0:	da0b      	bge.n	8015bca <USBD_StdEPReq+0x2b2>
 8015bb2:	7bbb      	ldrb	r3, [r7, #14]
 8015bb4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8015bb8:	4613      	mov	r3, r2
 8015bba:	009b      	lsls	r3, r3, #2
 8015bbc:	4413      	add	r3, r2
 8015bbe:	009b      	lsls	r3, r3, #2
 8015bc0:	3310      	adds	r3, #16
 8015bc2:	687a      	ldr	r2, [r7, #4]
 8015bc4:	4413      	add	r3, r2
 8015bc6:	3304      	adds	r3, #4
 8015bc8:	e00b      	b.n	8015be2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8015bca:	7bbb      	ldrb	r3, [r7, #14]
 8015bcc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015bd0:	4613      	mov	r3, r2
 8015bd2:	009b      	lsls	r3, r3, #2
 8015bd4:	4413      	add	r3, r2
 8015bd6:	009b      	lsls	r3, r3, #2
 8015bd8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8015bdc:	687a      	ldr	r2, [r7, #4]
 8015bde:	4413      	add	r3, r2
 8015be0:	3304      	adds	r3, #4
 8015be2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8015be4:	7bbb      	ldrb	r3, [r7, #14]
 8015be6:	2b00      	cmp	r3, #0
 8015be8:	d002      	beq.n	8015bf0 <USBD_StdEPReq+0x2d8>
 8015bea:	7bbb      	ldrb	r3, [r7, #14]
 8015bec:	2b80      	cmp	r3, #128	@ 0x80
 8015bee:	d103      	bne.n	8015bf8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8015bf0:	68bb      	ldr	r3, [r7, #8]
 8015bf2:	2200      	movs	r2, #0
 8015bf4:	601a      	str	r2, [r3, #0]
 8015bf6:	e00e      	b.n	8015c16 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8015bf8:	7bbb      	ldrb	r3, [r7, #14]
 8015bfa:	4619      	mov	r1, r3
 8015bfc:	6878      	ldr	r0, [r7, #4]
 8015bfe:	f008 ff8b 	bl	801eb18 <USBD_LL_IsStallEP>
 8015c02:	4603      	mov	r3, r0
 8015c04:	2b00      	cmp	r3, #0
 8015c06:	d003      	beq.n	8015c10 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8015c08:	68bb      	ldr	r3, [r7, #8]
 8015c0a:	2201      	movs	r2, #1
 8015c0c:	601a      	str	r2, [r3, #0]
 8015c0e:	e002      	b.n	8015c16 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8015c10:	68bb      	ldr	r3, [r7, #8]
 8015c12:	2200      	movs	r2, #0
 8015c14:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8015c16:	68bb      	ldr	r3, [r7, #8]
 8015c18:	2202      	movs	r2, #2
 8015c1a:	4619      	mov	r1, r3
 8015c1c:	6878      	ldr	r0, [r7, #4]
 8015c1e:	f000 fb9b 	bl	8016358 <USBD_CtlSendData>
              break;
 8015c22:	e004      	b.n	8015c2e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8015c24:	6839      	ldr	r1, [r7, #0]
 8015c26:	6878      	ldr	r0, [r7, #4]
 8015c28:	f000 fb85 	bl	8016336 <USBD_CtlError>
              break;
 8015c2c:	bf00      	nop
          }
          break;
 8015c2e:	e004      	b.n	8015c3a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8015c30:	6839      	ldr	r1, [r7, #0]
 8015c32:	6878      	ldr	r0, [r7, #4]
 8015c34:	f000 fb7f 	bl	8016336 <USBD_CtlError>
          break;
 8015c38:	bf00      	nop
      }
      break;
 8015c3a:	e005      	b.n	8015c48 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8015c3c:	6839      	ldr	r1, [r7, #0]
 8015c3e:	6878      	ldr	r0, [r7, #4]
 8015c40:	f000 fb79 	bl	8016336 <USBD_CtlError>
      break;
 8015c44:	e000      	b.n	8015c48 <USBD_StdEPReq+0x330>
      break;
 8015c46:	bf00      	nop
  }

  return ret;
 8015c48:	7bfb      	ldrb	r3, [r7, #15]
}
 8015c4a:	4618      	mov	r0, r3
 8015c4c:	3710      	adds	r7, #16
 8015c4e:	46bd      	mov	sp, r7
 8015c50:	bd80      	pop	{r7, pc}
	...

08015c54 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015c54:	b580      	push	{r7, lr}
 8015c56:	b084      	sub	sp, #16
 8015c58:	af00      	add	r7, sp, #0
 8015c5a:	6078      	str	r0, [r7, #4]
 8015c5c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8015c5e:	2300      	movs	r3, #0
 8015c60:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8015c62:	2300      	movs	r3, #0
 8015c64:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8015c66:	2300      	movs	r3, #0
 8015c68:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8015c6a:	683b      	ldr	r3, [r7, #0]
 8015c6c:	885b      	ldrh	r3, [r3, #2]
 8015c6e:	0a1b      	lsrs	r3, r3, #8
 8015c70:	b29b      	uxth	r3, r3
 8015c72:	3b01      	subs	r3, #1
 8015c74:	2b0e      	cmp	r3, #14
 8015c76:	f200 8152 	bhi.w	8015f1e <USBD_GetDescriptor+0x2ca>
 8015c7a:	a201      	add	r2, pc, #4	@ (adr r2, 8015c80 <USBD_GetDescriptor+0x2c>)
 8015c7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015c80:	08015cf1 	.word	0x08015cf1
 8015c84:	08015d09 	.word	0x08015d09
 8015c88:	08015d49 	.word	0x08015d49
 8015c8c:	08015f1f 	.word	0x08015f1f
 8015c90:	08015f1f 	.word	0x08015f1f
 8015c94:	08015ebf 	.word	0x08015ebf
 8015c98:	08015eeb 	.word	0x08015eeb
 8015c9c:	08015f1f 	.word	0x08015f1f
 8015ca0:	08015f1f 	.word	0x08015f1f
 8015ca4:	08015f1f 	.word	0x08015f1f
 8015ca8:	08015f1f 	.word	0x08015f1f
 8015cac:	08015f1f 	.word	0x08015f1f
 8015cb0:	08015f1f 	.word	0x08015f1f
 8015cb4:	08015f1f 	.word	0x08015f1f
 8015cb8:	08015cbd 	.word	0x08015cbd
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8015cbc:	687b      	ldr	r3, [r7, #4]
 8015cbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8015cc2:	69db      	ldr	r3, [r3, #28]
 8015cc4:	2b00      	cmp	r3, #0
 8015cc6:	d00b      	beq.n	8015ce0 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8015cc8:	687b      	ldr	r3, [r7, #4]
 8015cca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8015cce:	69db      	ldr	r3, [r3, #28]
 8015cd0:	687a      	ldr	r2, [r7, #4]
 8015cd2:	7c12      	ldrb	r2, [r2, #16]
 8015cd4:	f107 0108 	add.w	r1, r7, #8
 8015cd8:	4610      	mov	r0, r2
 8015cda:	4798      	blx	r3
 8015cdc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8015cde:	e126      	b.n	8015f2e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8015ce0:	6839      	ldr	r1, [r7, #0]
 8015ce2:	6878      	ldr	r0, [r7, #4]
 8015ce4:	f000 fb27 	bl	8016336 <USBD_CtlError>
        err++;
 8015ce8:	7afb      	ldrb	r3, [r7, #11]
 8015cea:	3301      	adds	r3, #1
 8015cec:	72fb      	strb	r3, [r7, #11]
      break;
 8015cee:	e11e      	b.n	8015f2e <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8015cf0:	687b      	ldr	r3, [r7, #4]
 8015cf2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8015cf6:	681b      	ldr	r3, [r3, #0]
 8015cf8:	687a      	ldr	r2, [r7, #4]
 8015cfa:	7c12      	ldrb	r2, [r2, #16]
 8015cfc:	f107 0108 	add.w	r1, r7, #8
 8015d00:	4610      	mov	r0, r2
 8015d02:	4798      	blx	r3
 8015d04:	60f8      	str	r0, [r7, #12]
      break;
 8015d06:	e112      	b.n	8015f2e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015d08:	687b      	ldr	r3, [r7, #4]
 8015d0a:	7c1b      	ldrb	r3, [r3, #16]
 8015d0c:	2b00      	cmp	r3, #0
 8015d0e:	d10d      	bne.n	8015d2c <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8015d10:	687b      	ldr	r3, [r7, #4]
 8015d12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8015d16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015d18:	f107 0208 	add.w	r2, r7, #8
 8015d1c:	4610      	mov	r0, r2
 8015d1e:	4798      	blx	r3
 8015d20:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8015d22:	68fb      	ldr	r3, [r7, #12]
 8015d24:	3301      	adds	r3, #1
 8015d26:	2202      	movs	r2, #2
 8015d28:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8015d2a:	e100      	b.n	8015f2e <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8015d2c:	687b      	ldr	r3, [r7, #4]
 8015d2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8015d32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015d34:	f107 0208 	add.w	r2, r7, #8
 8015d38:	4610      	mov	r0, r2
 8015d3a:	4798      	blx	r3
 8015d3c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8015d3e:	68fb      	ldr	r3, [r7, #12]
 8015d40:	3301      	adds	r3, #1
 8015d42:	2202      	movs	r2, #2
 8015d44:	701a      	strb	r2, [r3, #0]
      break;
 8015d46:	e0f2      	b.n	8015f2e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8015d48:	683b      	ldr	r3, [r7, #0]
 8015d4a:	885b      	ldrh	r3, [r3, #2]
 8015d4c:	b2db      	uxtb	r3, r3
 8015d4e:	2b05      	cmp	r3, #5
 8015d50:	f200 80ac 	bhi.w	8015eac <USBD_GetDescriptor+0x258>
 8015d54:	a201      	add	r2, pc, #4	@ (adr r2, 8015d5c <USBD_GetDescriptor+0x108>)
 8015d56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015d5a:	bf00      	nop
 8015d5c:	08015d75 	.word	0x08015d75
 8015d60:	08015da9 	.word	0x08015da9
 8015d64:	08015ddd 	.word	0x08015ddd
 8015d68:	08015e11 	.word	0x08015e11
 8015d6c:	08015e45 	.word	0x08015e45
 8015d70:	08015e79 	.word	0x08015e79
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8015d74:	687b      	ldr	r3, [r7, #4]
 8015d76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8015d7a:	685b      	ldr	r3, [r3, #4]
 8015d7c:	2b00      	cmp	r3, #0
 8015d7e:	d00b      	beq.n	8015d98 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8015d80:	687b      	ldr	r3, [r7, #4]
 8015d82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8015d86:	685b      	ldr	r3, [r3, #4]
 8015d88:	687a      	ldr	r2, [r7, #4]
 8015d8a:	7c12      	ldrb	r2, [r2, #16]
 8015d8c:	f107 0108 	add.w	r1, r7, #8
 8015d90:	4610      	mov	r0, r2
 8015d92:	4798      	blx	r3
 8015d94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015d96:	e091      	b.n	8015ebc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8015d98:	6839      	ldr	r1, [r7, #0]
 8015d9a:	6878      	ldr	r0, [r7, #4]
 8015d9c:	f000 facb 	bl	8016336 <USBD_CtlError>
            err++;
 8015da0:	7afb      	ldrb	r3, [r7, #11]
 8015da2:	3301      	adds	r3, #1
 8015da4:	72fb      	strb	r3, [r7, #11]
          break;
 8015da6:	e089      	b.n	8015ebc <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8015da8:	687b      	ldr	r3, [r7, #4]
 8015daa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8015dae:	689b      	ldr	r3, [r3, #8]
 8015db0:	2b00      	cmp	r3, #0
 8015db2:	d00b      	beq.n	8015dcc <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8015db4:	687b      	ldr	r3, [r7, #4]
 8015db6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8015dba:	689b      	ldr	r3, [r3, #8]
 8015dbc:	687a      	ldr	r2, [r7, #4]
 8015dbe:	7c12      	ldrb	r2, [r2, #16]
 8015dc0:	f107 0108 	add.w	r1, r7, #8
 8015dc4:	4610      	mov	r0, r2
 8015dc6:	4798      	blx	r3
 8015dc8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015dca:	e077      	b.n	8015ebc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8015dcc:	6839      	ldr	r1, [r7, #0]
 8015dce:	6878      	ldr	r0, [r7, #4]
 8015dd0:	f000 fab1 	bl	8016336 <USBD_CtlError>
            err++;
 8015dd4:	7afb      	ldrb	r3, [r7, #11]
 8015dd6:	3301      	adds	r3, #1
 8015dd8:	72fb      	strb	r3, [r7, #11]
          break;
 8015dda:	e06f      	b.n	8015ebc <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8015ddc:	687b      	ldr	r3, [r7, #4]
 8015dde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8015de2:	68db      	ldr	r3, [r3, #12]
 8015de4:	2b00      	cmp	r3, #0
 8015de6:	d00b      	beq.n	8015e00 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8015de8:	687b      	ldr	r3, [r7, #4]
 8015dea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8015dee:	68db      	ldr	r3, [r3, #12]
 8015df0:	687a      	ldr	r2, [r7, #4]
 8015df2:	7c12      	ldrb	r2, [r2, #16]
 8015df4:	f107 0108 	add.w	r1, r7, #8
 8015df8:	4610      	mov	r0, r2
 8015dfa:	4798      	blx	r3
 8015dfc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015dfe:	e05d      	b.n	8015ebc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8015e00:	6839      	ldr	r1, [r7, #0]
 8015e02:	6878      	ldr	r0, [r7, #4]
 8015e04:	f000 fa97 	bl	8016336 <USBD_CtlError>
            err++;
 8015e08:	7afb      	ldrb	r3, [r7, #11]
 8015e0a:	3301      	adds	r3, #1
 8015e0c:	72fb      	strb	r3, [r7, #11]
          break;
 8015e0e:	e055      	b.n	8015ebc <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8015e10:	687b      	ldr	r3, [r7, #4]
 8015e12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8015e16:	691b      	ldr	r3, [r3, #16]
 8015e18:	2b00      	cmp	r3, #0
 8015e1a:	d00b      	beq.n	8015e34 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8015e1c:	687b      	ldr	r3, [r7, #4]
 8015e1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8015e22:	691b      	ldr	r3, [r3, #16]
 8015e24:	687a      	ldr	r2, [r7, #4]
 8015e26:	7c12      	ldrb	r2, [r2, #16]
 8015e28:	f107 0108 	add.w	r1, r7, #8
 8015e2c:	4610      	mov	r0, r2
 8015e2e:	4798      	blx	r3
 8015e30:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015e32:	e043      	b.n	8015ebc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8015e34:	6839      	ldr	r1, [r7, #0]
 8015e36:	6878      	ldr	r0, [r7, #4]
 8015e38:	f000 fa7d 	bl	8016336 <USBD_CtlError>
            err++;
 8015e3c:	7afb      	ldrb	r3, [r7, #11]
 8015e3e:	3301      	adds	r3, #1
 8015e40:	72fb      	strb	r3, [r7, #11]
          break;
 8015e42:	e03b      	b.n	8015ebc <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8015e44:	687b      	ldr	r3, [r7, #4]
 8015e46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8015e4a:	695b      	ldr	r3, [r3, #20]
 8015e4c:	2b00      	cmp	r3, #0
 8015e4e:	d00b      	beq.n	8015e68 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8015e50:	687b      	ldr	r3, [r7, #4]
 8015e52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8015e56:	695b      	ldr	r3, [r3, #20]
 8015e58:	687a      	ldr	r2, [r7, #4]
 8015e5a:	7c12      	ldrb	r2, [r2, #16]
 8015e5c:	f107 0108 	add.w	r1, r7, #8
 8015e60:	4610      	mov	r0, r2
 8015e62:	4798      	blx	r3
 8015e64:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015e66:	e029      	b.n	8015ebc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8015e68:	6839      	ldr	r1, [r7, #0]
 8015e6a:	6878      	ldr	r0, [r7, #4]
 8015e6c:	f000 fa63 	bl	8016336 <USBD_CtlError>
            err++;
 8015e70:	7afb      	ldrb	r3, [r7, #11]
 8015e72:	3301      	adds	r3, #1
 8015e74:	72fb      	strb	r3, [r7, #11]
          break;
 8015e76:	e021      	b.n	8015ebc <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8015e78:	687b      	ldr	r3, [r7, #4]
 8015e7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8015e7e:	699b      	ldr	r3, [r3, #24]
 8015e80:	2b00      	cmp	r3, #0
 8015e82:	d00b      	beq.n	8015e9c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8015e84:	687b      	ldr	r3, [r7, #4]
 8015e86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8015e8a:	699b      	ldr	r3, [r3, #24]
 8015e8c:	687a      	ldr	r2, [r7, #4]
 8015e8e:	7c12      	ldrb	r2, [r2, #16]
 8015e90:	f107 0108 	add.w	r1, r7, #8
 8015e94:	4610      	mov	r0, r2
 8015e96:	4798      	blx	r3
 8015e98:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015e9a:	e00f      	b.n	8015ebc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8015e9c:	6839      	ldr	r1, [r7, #0]
 8015e9e:	6878      	ldr	r0, [r7, #4]
 8015ea0:	f000 fa49 	bl	8016336 <USBD_CtlError>
            err++;
 8015ea4:	7afb      	ldrb	r3, [r7, #11]
 8015ea6:	3301      	adds	r3, #1
 8015ea8:	72fb      	strb	r3, [r7, #11]
          break;
 8015eaa:	e007      	b.n	8015ebc <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8015eac:	6839      	ldr	r1, [r7, #0]
 8015eae:	6878      	ldr	r0, [r7, #4]
 8015eb0:	f000 fa41 	bl	8016336 <USBD_CtlError>
          err++;
 8015eb4:	7afb      	ldrb	r3, [r7, #11]
 8015eb6:	3301      	adds	r3, #1
 8015eb8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8015eba:	bf00      	nop
      }
      break;
 8015ebc:	e037      	b.n	8015f2e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015ebe:	687b      	ldr	r3, [r7, #4]
 8015ec0:	7c1b      	ldrb	r3, [r3, #16]
 8015ec2:	2b00      	cmp	r3, #0
 8015ec4:	d109      	bne.n	8015eda <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8015ec6:	687b      	ldr	r3, [r7, #4]
 8015ec8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8015ecc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015ece:	f107 0208 	add.w	r2, r7, #8
 8015ed2:	4610      	mov	r0, r2
 8015ed4:	4798      	blx	r3
 8015ed6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8015ed8:	e029      	b.n	8015f2e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8015eda:	6839      	ldr	r1, [r7, #0]
 8015edc:	6878      	ldr	r0, [r7, #4]
 8015ede:	f000 fa2a 	bl	8016336 <USBD_CtlError>
        err++;
 8015ee2:	7afb      	ldrb	r3, [r7, #11]
 8015ee4:	3301      	adds	r3, #1
 8015ee6:	72fb      	strb	r3, [r7, #11]
      break;
 8015ee8:	e021      	b.n	8015f2e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015eea:	687b      	ldr	r3, [r7, #4]
 8015eec:	7c1b      	ldrb	r3, [r3, #16]
 8015eee:	2b00      	cmp	r3, #0
 8015ef0:	d10d      	bne.n	8015f0e <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8015ef2:	687b      	ldr	r3, [r7, #4]
 8015ef4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8015ef8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015efa:	f107 0208 	add.w	r2, r7, #8
 8015efe:	4610      	mov	r0, r2
 8015f00:	4798      	blx	r3
 8015f02:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8015f04:	68fb      	ldr	r3, [r7, #12]
 8015f06:	3301      	adds	r3, #1
 8015f08:	2207      	movs	r2, #7
 8015f0a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8015f0c:	e00f      	b.n	8015f2e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8015f0e:	6839      	ldr	r1, [r7, #0]
 8015f10:	6878      	ldr	r0, [r7, #4]
 8015f12:	f000 fa10 	bl	8016336 <USBD_CtlError>
        err++;
 8015f16:	7afb      	ldrb	r3, [r7, #11]
 8015f18:	3301      	adds	r3, #1
 8015f1a:	72fb      	strb	r3, [r7, #11]
      break;
 8015f1c:	e007      	b.n	8015f2e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8015f1e:	6839      	ldr	r1, [r7, #0]
 8015f20:	6878      	ldr	r0, [r7, #4]
 8015f22:	f000 fa08 	bl	8016336 <USBD_CtlError>
      err++;
 8015f26:	7afb      	ldrb	r3, [r7, #11]
 8015f28:	3301      	adds	r3, #1
 8015f2a:	72fb      	strb	r3, [r7, #11]
      break;
 8015f2c:	bf00      	nop
  }

  if (err != 0U)
 8015f2e:	7afb      	ldrb	r3, [r7, #11]
 8015f30:	2b00      	cmp	r3, #0
 8015f32:	d11e      	bne.n	8015f72 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8015f34:	683b      	ldr	r3, [r7, #0]
 8015f36:	88db      	ldrh	r3, [r3, #6]
 8015f38:	2b00      	cmp	r3, #0
 8015f3a:	d016      	beq.n	8015f6a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8015f3c:	893b      	ldrh	r3, [r7, #8]
 8015f3e:	2b00      	cmp	r3, #0
 8015f40:	d00e      	beq.n	8015f60 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8015f42:	683b      	ldr	r3, [r7, #0]
 8015f44:	88da      	ldrh	r2, [r3, #6]
 8015f46:	893b      	ldrh	r3, [r7, #8]
 8015f48:	4293      	cmp	r3, r2
 8015f4a:	bf28      	it	cs
 8015f4c:	4613      	movcs	r3, r2
 8015f4e:	b29b      	uxth	r3, r3
 8015f50:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8015f52:	893b      	ldrh	r3, [r7, #8]
 8015f54:	461a      	mov	r2, r3
 8015f56:	68f9      	ldr	r1, [r7, #12]
 8015f58:	6878      	ldr	r0, [r7, #4]
 8015f5a:	f000 f9fd 	bl	8016358 <USBD_CtlSendData>
 8015f5e:	e009      	b.n	8015f74 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8015f60:	6839      	ldr	r1, [r7, #0]
 8015f62:	6878      	ldr	r0, [r7, #4]
 8015f64:	f000 f9e7 	bl	8016336 <USBD_CtlError>
 8015f68:	e004      	b.n	8015f74 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8015f6a:	6878      	ldr	r0, [r7, #4]
 8015f6c:	f000 fa31 	bl	80163d2 <USBD_CtlSendStatus>
 8015f70:	e000      	b.n	8015f74 <USBD_GetDescriptor+0x320>
    return;
 8015f72:	bf00      	nop
  }
}
 8015f74:	3710      	adds	r7, #16
 8015f76:	46bd      	mov	sp, r7
 8015f78:	bd80      	pop	{r7, pc}
 8015f7a:	bf00      	nop

08015f7c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015f7c:	b580      	push	{r7, lr}
 8015f7e:	b084      	sub	sp, #16
 8015f80:	af00      	add	r7, sp, #0
 8015f82:	6078      	str	r0, [r7, #4]
 8015f84:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8015f86:	683b      	ldr	r3, [r7, #0]
 8015f88:	889b      	ldrh	r3, [r3, #4]
 8015f8a:	2b00      	cmp	r3, #0
 8015f8c:	d131      	bne.n	8015ff2 <USBD_SetAddress+0x76>
 8015f8e:	683b      	ldr	r3, [r7, #0]
 8015f90:	88db      	ldrh	r3, [r3, #6]
 8015f92:	2b00      	cmp	r3, #0
 8015f94:	d12d      	bne.n	8015ff2 <USBD_SetAddress+0x76>
 8015f96:	683b      	ldr	r3, [r7, #0]
 8015f98:	885b      	ldrh	r3, [r3, #2]
 8015f9a:	2b7f      	cmp	r3, #127	@ 0x7f
 8015f9c:	d829      	bhi.n	8015ff2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8015f9e:	683b      	ldr	r3, [r7, #0]
 8015fa0:	885b      	ldrh	r3, [r3, #2]
 8015fa2:	b2db      	uxtb	r3, r3
 8015fa4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8015fa8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015faa:	687b      	ldr	r3, [r7, #4]
 8015fac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8015fb0:	b2db      	uxtb	r3, r3
 8015fb2:	2b03      	cmp	r3, #3
 8015fb4:	d104      	bne.n	8015fc0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8015fb6:	6839      	ldr	r1, [r7, #0]
 8015fb8:	6878      	ldr	r0, [r7, #4]
 8015fba:	f000 f9bc 	bl	8016336 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015fbe:	e01d      	b.n	8015ffc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8015fc0:	687b      	ldr	r3, [r7, #4]
 8015fc2:	7bfa      	ldrb	r2, [r7, #15]
 8015fc4:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8015fc8:	7bfb      	ldrb	r3, [r7, #15]
 8015fca:	4619      	mov	r1, r3
 8015fcc:	6878      	ldr	r0, [r7, #4]
 8015fce:	f008 fdcf 	bl	801eb70 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8015fd2:	6878      	ldr	r0, [r7, #4]
 8015fd4:	f000 f9fd 	bl	80163d2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8015fd8:	7bfb      	ldrb	r3, [r7, #15]
 8015fda:	2b00      	cmp	r3, #0
 8015fdc:	d004      	beq.n	8015fe8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8015fde:	687b      	ldr	r3, [r7, #4]
 8015fe0:	2202      	movs	r2, #2
 8015fe2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015fe6:	e009      	b.n	8015ffc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8015fe8:	687b      	ldr	r3, [r7, #4]
 8015fea:	2201      	movs	r2, #1
 8015fec:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015ff0:	e004      	b.n	8015ffc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8015ff2:	6839      	ldr	r1, [r7, #0]
 8015ff4:	6878      	ldr	r0, [r7, #4]
 8015ff6:	f000 f99e 	bl	8016336 <USBD_CtlError>
  }
}
 8015ffa:	bf00      	nop
 8015ffc:	bf00      	nop
 8015ffe:	3710      	adds	r7, #16
 8016000:	46bd      	mov	sp, r7
 8016002:	bd80      	pop	{r7, pc}

08016004 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016004:	b580      	push	{r7, lr}
 8016006:	b084      	sub	sp, #16
 8016008:	af00      	add	r7, sp, #0
 801600a:	6078      	str	r0, [r7, #4]
 801600c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801600e:	2300      	movs	r3, #0
 8016010:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8016012:	683b      	ldr	r3, [r7, #0]
 8016014:	885b      	ldrh	r3, [r3, #2]
 8016016:	b2da      	uxtb	r2, r3
 8016018:	4b4e      	ldr	r3, [pc, #312]	@ (8016154 <USBD_SetConfig+0x150>)
 801601a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 801601c:	4b4d      	ldr	r3, [pc, #308]	@ (8016154 <USBD_SetConfig+0x150>)
 801601e:	781b      	ldrb	r3, [r3, #0]
 8016020:	2b01      	cmp	r3, #1
 8016022:	d905      	bls.n	8016030 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8016024:	6839      	ldr	r1, [r7, #0]
 8016026:	6878      	ldr	r0, [r7, #4]
 8016028:	f000 f985 	bl	8016336 <USBD_CtlError>
    return USBD_FAIL;
 801602c:	2303      	movs	r3, #3
 801602e:	e08c      	b.n	801614a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8016030:	687b      	ldr	r3, [r7, #4]
 8016032:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016036:	b2db      	uxtb	r3, r3
 8016038:	2b02      	cmp	r3, #2
 801603a:	d002      	beq.n	8016042 <USBD_SetConfig+0x3e>
 801603c:	2b03      	cmp	r3, #3
 801603e:	d029      	beq.n	8016094 <USBD_SetConfig+0x90>
 8016040:	e075      	b.n	801612e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8016042:	4b44      	ldr	r3, [pc, #272]	@ (8016154 <USBD_SetConfig+0x150>)
 8016044:	781b      	ldrb	r3, [r3, #0]
 8016046:	2b00      	cmp	r3, #0
 8016048:	d020      	beq.n	801608c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 801604a:	4b42      	ldr	r3, [pc, #264]	@ (8016154 <USBD_SetConfig+0x150>)
 801604c:	781b      	ldrb	r3, [r3, #0]
 801604e:	461a      	mov	r2, r3
 8016050:	687b      	ldr	r3, [r7, #4]
 8016052:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8016054:	4b3f      	ldr	r3, [pc, #252]	@ (8016154 <USBD_SetConfig+0x150>)
 8016056:	781b      	ldrb	r3, [r3, #0]
 8016058:	4619      	mov	r1, r3
 801605a:	6878      	ldr	r0, [r7, #4]
 801605c:	f7ff f80d 	bl	801507a <USBD_SetClassConfig>
 8016060:	4603      	mov	r3, r0
 8016062:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8016064:	7bfb      	ldrb	r3, [r7, #15]
 8016066:	2b00      	cmp	r3, #0
 8016068:	d008      	beq.n	801607c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 801606a:	6839      	ldr	r1, [r7, #0]
 801606c:	6878      	ldr	r0, [r7, #4]
 801606e:	f000 f962 	bl	8016336 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8016072:	687b      	ldr	r3, [r7, #4]
 8016074:	2202      	movs	r2, #2
 8016076:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801607a:	e065      	b.n	8016148 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 801607c:	6878      	ldr	r0, [r7, #4]
 801607e:	f000 f9a8 	bl	80163d2 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8016082:	687b      	ldr	r3, [r7, #4]
 8016084:	2203      	movs	r2, #3
 8016086:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 801608a:	e05d      	b.n	8016148 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 801608c:	6878      	ldr	r0, [r7, #4]
 801608e:	f000 f9a0 	bl	80163d2 <USBD_CtlSendStatus>
      break;
 8016092:	e059      	b.n	8016148 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8016094:	4b2f      	ldr	r3, [pc, #188]	@ (8016154 <USBD_SetConfig+0x150>)
 8016096:	781b      	ldrb	r3, [r3, #0]
 8016098:	2b00      	cmp	r3, #0
 801609a:	d112      	bne.n	80160c2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801609c:	687b      	ldr	r3, [r7, #4]
 801609e:	2202      	movs	r2, #2
 80160a0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 80160a4:	4b2b      	ldr	r3, [pc, #172]	@ (8016154 <USBD_SetConfig+0x150>)
 80160a6:	781b      	ldrb	r3, [r3, #0]
 80160a8:	461a      	mov	r2, r3
 80160aa:	687b      	ldr	r3, [r7, #4]
 80160ac:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80160ae:	4b29      	ldr	r3, [pc, #164]	@ (8016154 <USBD_SetConfig+0x150>)
 80160b0:	781b      	ldrb	r3, [r3, #0]
 80160b2:	4619      	mov	r1, r3
 80160b4:	6878      	ldr	r0, [r7, #4]
 80160b6:	f7fe fffc 	bl	80150b2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80160ba:	6878      	ldr	r0, [r7, #4]
 80160bc:	f000 f989 	bl	80163d2 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80160c0:	e042      	b.n	8016148 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80160c2:	4b24      	ldr	r3, [pc, #144]	@ (8016154 <USBD_SetConfig+0x150>)
 80160c4:	781b      	ldrb	r3, [r3, #0]
 80160c6:	461a      	mov	r2, r3
 80160c8:	687b      	ldr	r3, [r7, #4]
 80160ca:	685b      	ldr	r3, [r3, #4]
 80160cc:	429a      	cmp	r2, r3
 80160ce:	d02a      	beq.n	8016126 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80160d0:	687b      	ldr	r3, [r7, #4]
 80160d2:	685b      	ldr	r3, [r3, #4]
 80160d4:	b2db      	uxtb	r3, r3
 80160d6:	4619      	mov	r1, r3
 80160d8:	6878      	ldr	r0, [r7, #4]
 80160da:	f7fe ffea 	bl	80150b2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80160de:	4b1d      	ldr	r3, [pc, #116]	@ (8016154 <USBD_SetConfig+0x150>)
 80160e0:	781b      	ldrb	r3, [r3, #0]
 80160e2:	461a      	mov	r2, r3
 80160e4:	687b      	ldr	r3, [r7, #4]
 80160e6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80160e8:	4b1a      	ldr	r3, [pc, #104]	@ (8016154 <USBD_SetConfig+0x150>)
 80160ea:	781b      	ldrb	r3, [r3, #0]
 80160ec:	4619      	mov	r1, r3
 80160ee:	6878      	ldr	r0, [r7, #4]
 80160f0:	f7fe ffc3 	bl	801507a <USBD_SetClassConfig>
 80160f4:	4603      	mov	r3, r0
 80160f6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80160f8:	7bfb      	ldrb	r3, [r7, #15]
 80160fa:	2b00      	cmp	r3, #0
 80160fc:	d00f      	beq.n	801611e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80160fe:	6839      	ldr	r1, [r7, #0]
 8016100:	6878      	ldr	r0, [r7, #4]
 8016102:	f000 f918 	bl	8016336 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8016106:	687b      	ldr	r3, [r7, #4]
 8016108:	685b      	ldr	r3, [r3, #4]
 801610a:	b2db      	uxtb	r3, r3
 801610c:	4619      	mov	r1, r3
 801610e:	6878      	ldr	r0, [r7, #4]
 8016110:	f7fe ffcf 	bl	80150b2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8016114:	687b      	ldr	r3, [r7, #4]
 8016116:	2202      	movs	r2, #2
 8016118:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 801611c:	e014      	b.n	8016148 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 801611e:	6878      	ldr	r0, [r7, #4]
 8016120:	f000 f957 	bl	80163d2 <USBD_CtlSendStatus>
      break;
 8016124:	e010      	b.n	8016148 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8016126:	6878      	ldr	r0, [r7, #4]
 8016128:	f000 f953 	bl	80163d2 <USBD_CtlSendStatus>
      break;
 801612c:	e00c      	b.n	8016148 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 801612e:	6839      	ldr	r1, [r7, #0]
 8016130:	6878      	ldr	r0, [r7, #4]
 8016132:	f000 f900 	bl	8016336 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8016136:	4b07      	ldr	r3, [pc, #28]	@ (8016154 <USBD_SetConfig+0x150>)
 8016138:	781b      	ldrb	r3, [r3, #0]
 801613a:	4619      	mov	r1, r3
 801613c:	6878      	ldr	r0, [r7, #4]
 801613e:	f7fe ffb8 	bl	80150b2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8016142:	2303      	movs	r3, #3
 8016144:	73fb      	strb	r3, [r7, #15]
      break;
 8016146:	bf00      	nop
  }

  return ret;
 8016148:	7bfb      	ldrb	r3, [r7, #15]
}
 801614a:	4618      	mov	r0, r3
 801614c:	3710      	adds	r7, #16
 801614e:	46bd      	mov	sp, r7
 8016150:	bd80      	pop	{r7, pc}
 8016152:	bf00      	nop
 8016154:	240004bc 	.word	0x240004bc

08016158 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016158:	b580      	push	{r7, lr}
 801615a:	b082      	sub	sp, #8
 801615c:	af00      	add	r7, sp, #0
 801615e:	6078      	str	r0, [r7, #4]
 8016160:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8016162:	683b      	ldr	r3, [r7, #0]
 8016164:	88db      	ldrh	r3, [r3, #6]
 8016166:	2b01      	cmp	r3, #1
 8016168:	d004      	beq.n	8016174 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 801616a:	6839      	ldr	r1, [r7, #0]
 801616c:	6878      	ldr	r0, [r7, #4]
 801616e:	f000 f8e2 	bl	8016336 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8016172:	e023      	b.n	80161bc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8016174:	687b      	ldr	r3, [r7, #4]
 8016176:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801617a:	b2db      	uxtb	r3, r3
 801617c:	2b02      	cmp	r3, #2
 801617e:	dc02      	bgt.n	8016186 <USBD_GetConfig+0x2e>
 8016180:	2b00      	cmp	r3, #0
 8016182:	dc03      	bgt.n	801618c <USBD_GetConfig+0x34>
 8016184:	e015      	b.n	80161b2 <USBD_GetConfig+0x5a>
 8016186:	2b03      	cmp	r3, #3
 8016188:	d00b      	beq.n	80161a2 <USBD_GetConfig+0x4a>
 801618a:	e012      	b.n	80161b2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 801618c:	687b      	ldr	r3, [r7, #4]
 801618e:	2200      	movs	r2, #0
 8016190:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8016192:	687b      	ldr	r3, [r7, #4]
 8016194:	3308      	adds	r3, #8
 8016196:	2201      	movs	r2, #1
 8016198:	4619      	mov	r1, r3
 801619a:	6878      	ldr	r0, [r7, #4]
 801619c:	f000 f8dc 	bl	8016358 <USBD_CtlSendData>
        break;
 80161a0:	e00c      	b.n	80161bc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80161a2:	687b      	ldr	r3, [r7, #4]
 80161a4:	3304      	adds	r3, #4
 80161a6:	2201      	movs	r2, #1
 80161a8:	4619      	mov	r1, r3
 80161aa:	6878      	ldr	r0, [r7, #4]
 80161ac:	f000 f8d4 	bl	8016358 <USBD_CtlSendData>
        break;
 80161b0:	e004      	b.n	80161bc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80161b2:	6839      	ldr	r1, [r7, #0]
 80161b4:	6878      	ldr	r0, [r7, #4]
 80161b6:	f000 f8be 	bl	8016336 <USBD_CtlError>
        break;
 80161ba:	bf00      	nop
}
 80161bc:	bf00      	nop
 80161be:	3708      	adds	r7, #8
 80161c0:	46bd      	mov	sp, r7
 80161c2:	bd80      	pop	{r7, pc}

080161c4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80161c4:	b580      	push	{r7, lr}
 80161c6:	b082      	sub	sp, #8
 80161c8:	af00      	add	r7, sp, #0
 80161ca:	6078      	str	r0, [r7, #4]
 80161cc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80161ce:	687b      	ldr	r3, [r7, #4]
 80161d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80161d4:	b2db      	uxtb	r3, r3
 80161d6:	3b01      	subs	r3, #1
 80161d8:	2b02      	cmp	r3, #2
 80161da:	d81e      	bhi.n	801621a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80161dc:	683b      	ldr	r3, [r7, #0]
 80161de:	88db      	ldrh	r3, [r3, #6]
 80161e0:	2b02      	cmp	r3, #2
 80161e2:	d004      	beq.n	80161ee <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80161e4:	6839      	ldr	r1, [r7, #0]
 80161e6:	6878      	ldr	r0, [r7, #4]
 80161e8:	f000 f8a5 	bl	8016336 <USBD_CtlError>
        break;
 80161ec:	e01a      	b.n	8016224 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80161ee:	687b      	ldr	r3, [r7, #4]
 80161f0:	2201      	movs	r2, #1
 80161f2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80161f4:	687b      	ldr	r3, [r7, #4]
 80161f6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80161fa:	2b00      	cmp	r3, #0
 80161fc:	d005      	beq.n	801620a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80161fe:	687b      	ldr	r3, [r7, #4]
 8016200:	68db      	ldr	r3, [r3, #12]
 8016202:	f043 0202 	orr.w	r2, r3, #2
 8016206:	687b      	ldr	r3, [r7, #4]
 8016208:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 801620a:	687b      	ldr	r3, [r7, #4]
 801620c:	330c      	adds	r3, #12
 801620e:	2202      	movs	r2, #2
 8016210:	4619      	mov	r1, r3
 8016212:	6878      	ldr	r0, [r7, #4]
 8016214:	f000 f8a0 	bl	8016358 <USBD_CtlSendData>
      break;
 8016218:	e004      	b.n	8016224 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 801621a:	6839      	ldr	r1, [r7, #0]
 801621c:	6878      	ldr	r0, [r7, #4]
 801621e:	f000 f88a 	bl	8016336 <USBD_CtlError>
      break;
 8016222:	bf00      	nop
  }
}
 8016224:	bf00      	nop
 8016226:	3708      	adds	r7, #8
 8016228:	46bd      	mov	sp, r7
 801622a:	bd80      	pop	{r7, pc}

0801622c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801622c:	b580      	push	{r7, lr}
 801622e:	b082      	sub	sp, #8
 8016230:	af00      	add	r7, sp, #0
 8016232:	6078      	str	r0, [r7, #4]
 8016234:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8016236:	683b      	ldr	r3, [r7, #0]
 8016238:	885b      	ldrh	r3, [r3, #2]
 801623a:	2b01      	cmp	r3, #1
 801623c:	d107      	bne.n	801624e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 801623e:	687b      	ldr	r3, [r7, #4]
 8016240:	2201      	movs	r2, #1
 8016242:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8016246:	6878      	ldr	r0, [r7, #4]
 8016248:	f000 f8c3 	bl	80163d2 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 801624c:	e013      	b.n	8016276 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 801624e:	683b      	ldr	r3, [r7, #0]
 8016250:	885b      	ldrh	r3, [r3, #2]
 8016252:	2b02      	cmp	r3, #2
 8016254:	d10b      	bne.n	801626e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8016256:	683b      	ldr	r3, [r7, #0]
 8016258:	889b      	ldrh	r3, [r3, #4]
 801625a:	0a1b      	lsrs	r3, r3, #8
 801625c:	b29b      	uxth	r3, r3
 801625e:	b2da      	uxtb	r2, r3
 8016260:	687b      	ldr	r3, [r7, #4]
 8016262:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8016266:	6878      	ldr	r0, [r7, #4]
 8016268:	f000 f8b3 	bl	80163d2 <USBD_CtlSendStatus>
}
 801626c:	e003      	b.n	8016276 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 801626e:	6839      	ldr	r1, [r7, #0]
 8016270:	6878      	ldr	r0, [r7, #4]
 8016272:	f000 f860 	bl	8016336 <USBD_CtlError>
}
 8016276:	bf00      	nop
 8016278:	3708      	adds	r7, #8
 801627a:	46bd      	mov	sp, r7
 801627c:	bd80      	pop	{r7, pc}

0801627e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801627e:	b580      	push	{r7, lr}
 8016280:	b082      	sub	sp, #8
 8016282:	af00      	add	r7, sp, #0
 8016284:	6078      	str	r0, [r7, #4]
 8016286:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8016288:	687b      	ldr	r3, [r7, #4]
 801628a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801628e:	b2db      	uxtb	r3, r3
 8016290:	3b01      	subs	r3, #1
 8016292:	2b02      	cmp	r3, #2
 8016294:	d80b      	bhi.n	80162ae <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8016296:	683b      	ldr	r3, [r7, #0]
 8016298:	885b      	ldrh	r3, [r3, #2]
 801629a:	2b01      	cmp	r3, #1
 801629c:	d10c      	bne.n	80162b8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 801629e:	687b      	ldr	r3, [r7, #4]
 80162a0:	2200      	movs	r2, #0
 80162a2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80162a6:	6878      	ldr	r0, [r7, #4]
 80162a8:	f000 f893 	bl	80163d2 <USBD_CtlSendStatus>
      }
      break;
 80162ac:	e004      	b.n	80162b8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80162ae:	6839      	ldr	r1, [r7, #0]
 80162b0:	6878      	ldr	r0, [r7, #4]
 80162b2:	f000 f840 	bl	8016336 <USBD_CtlError>
      break;
 80162b6:	e000      	b.n	80162ba <USBD_ClrFeature+0x3c>
      break;
 80162b8:	bf00      	nop
  }
}
 80162ba:	bf00      	nop
 80162bc:	3708      	adds	r7, #8
 80162be:	46bd      	mov	sp, r7
 80162c0:	bd80      	pop	{r7, pc}

080162c2 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80162c2:	b580      	push	{r7, lr}
 80162c4:	b084      	sub	sp, #16
 80162c6:	af00      	add	r7, sp, #0
 80162c8:	6078      	str	r0, [r7, #4]
 80162ca:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80162cc:	683b      	ldr	r3, [r7, #0]
 80162ce:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80162d0:	68fb      	ldr	r3, [r7, #12]
 80162d2:	781a      	ldrb	r2, [r3, #0]
 80162d4:	687b      	ldr	r3, [r7, #4]
 80162d6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80162d8:	68fb      	ldr	r3, [r7, #12]
 80162da:	3301      	adds	r3, #1
 80162dc:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80162de:	68fb      	ldr	r3, [r7, #12]
 80162e0:	781a      	ldrb	r2, [r3, #0]
 80162e2:	687b      	ldr	r3, [r7, #4]
 80162e4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80162e6:	68fb      	ldr	r3, [r7, #12]
 80162e8:	3301      	adds	r3, #1
 80162ea:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80162ec:	68f8      	ldr	r0, [r7, #12]
 80162ee:	f7ff fa16 	bl	801571e <SWAPBYTE>
 80162f2:	4603      	mov	r3, r0
 80162f4:	461a      	mov	r2, r3
 80162f6:	687b      	ldr	r3, [r7, #4]
 80162f8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80162fa:	68fb      	ldr	r3, [r7, #12]
 80162fc:	3301      	adds	r3, #1
 80162fe:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8016300:	68fb      	ldr	r3, [r7, #12]
 8016302:	3301      	adds	r3, #1
 8016304:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8016306:	68f8      	ldr	r0, [r7, #12]
 8016308:	f7ff fa09 	bl	801571e <SWAPBYTE>
 801630c:	4603      	mov	r3, r0
 801630e:	461a      	mov	r2, r3
 8016310:	687b      	ldr	r3, [r7, #4]
 8016312:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8016314:	68fb      	ldr	r3, [r7, #12]
 8016316:	3301      	adds	r3, #1
 8016318:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801631a:	68fb      	ldr	r3, [r7, #12]
 801631c:	3301      	adds	r3, #1
 801631e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8016320:	68f8      	ldr	r0, [r7, #12]
 8016322:	f7ff f9fc 	bl	801571e <SWAPBYTE>
 8016326:	4603      	mov	r3, r0
 8016328:	461a      	mov	r2, r3
 801632a:	687b      	ldr	r3, [r7, #4]
 801632c:	80da      	strh	r2, [r3, #6]
}
 801632e:	bf00      	nop
 8016330:	3710      	adds	r7, #16
 8016332:	46bd      	mov	sp, r7
 8016334:	bd80      	pop	{r7, pc}

08016336 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016336:	b580      	push	{r7, lr}
 8016338:	b082      	sub	sp, #8
 801633a:	af00      	add	r7, sp, #0
 801633c:	6078      	str	r0, [r7, #4]
 801633e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8016340:	2180      	movs	r1, #128	@ 0x80
 8016342:	6878      	ldr	r0, [r7, #4]
 8016344:	f008 fbaa 	bl	801ea9c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8016348:	2100      	movs	r1, #0
 801634a:	6878      	ldr	r0, [r7, #4]
 801634c:	f008 fba6 	bl	801ea9c <USBD_LL_StallEP>
}
 8016350:	bf00      	nop
 8016352:	3708      	adds	r7, #8
 8016354:	46bd      	mov	sp, r7
 8016356:	bd80      	pop	{r7, pc}

08016358 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8016358:	b580      	push	{r7, lr}
 801635a:	b084      	sub	sp, #16
 801635c:	af00      	add	r7, sp, #0
 801635e:	60f8      	str	r0, [r7, #12]
 8016360:	60b9      	str	r1, [r7, #8]
 8016362:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8016364:	68fb      	ldr	r3, [r7, #12]
 8016366:	2202      	movs	r2, #2
 8016368:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 801636c:	68fb      	ldr	r3, [r7, #12]
 801636e:	687a      	ldr	r2, [r7, #4]
 8016370:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8016372:	68fb      	ldr	r3, [r7, #12]
 8016374:	687a      	ldr	r2, [r7, #4]
 8016376:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8016378:	687b      	ldr	r3, [r7, #4]
 801637a:	68ba      	ldr	r2, [r7, #8]
 801637c:	2100      	movs	r1, #0
 801637e:	68f8      	ldr	r0, [r7, #12]
 8016380:	f008 fc15 	bl	801ebae <USBD_LL_Transmit>

  return USBD_OK;
 8016384:	2300      	movs	r3, #0
}
 8016386:	4618      	mov	r0, r3
 8016388:	3710      	adds	r7, #16
 801638a:	46bd      	mov	sp, r7
 801638c:	bd80      	pop	{r7, pc}

0801638e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 801638e:	b580      	push	{r7, lr}
 8016390:	b084      	sub	sp, #16
 8016392:	af00      	add	r7, sp, #0
 8016394:	60f8      	str	r0, [r7, #12]
 8016396:	60b9      	str	r1, [r7, #8]
 8016398:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801639a:	687b      	ldr	r3, [r7, #4]
 801639c:	68ba      	ldr	r2, [r7, #8]
 801639e:	2100      	movs	r1, #0
 80163a0:	68f8      	ldr	r0, [r7, #12]
 80163a2:	f008 fc04 	bl	801ebae <USBD_LL_Transmit>

  return USBD_OK;
 80163a6:	2300      	movs	r3, #0
}
 80163a8:	4618      	mov	r0, r3
 80163aa:	3710      	adds	r7, #16
 80163ac:	46bd      	mov	sp, r7
 80163ae:	bd80      	pop	{r7, pc}

080163b0 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80163b0:	b580      	push	{r7, lr}
 80163b2:	b084      	sub	sp, #16
 80163b4:	af00      	add	r7, sp, #0
 80163b6:	60f8      	str	r0, [r7, #12]
 80163b8:	60b9      	str	r1, [r7, #8]
 80163ba:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80163bc:	687b      	ldr	r3, [r7, #4]
 80163be:	68ba      	ldr	r2, [r7, #8]
 80163c0:	2100      	movs	r1, #0
 80163c2:	68f8      	ldr	r0, [r7, #12]
 80163c4:	f008 fc14 	bl	801ebf0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80163c8:	2300      	movs	r3, #0
}
 80163ca:	4618      	mov	r0, r3
 80163cc:	3710      	adds	r7, #16
 80163ce:	46bd      	mov	sp, r7
 80163d0:	bd80      	pop	{r7, pc}

080163d2 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80163d2:	b580      	push	{r7, lr}
 80163d4:	b082      	sub	sp, #8
 80163d6:	af00      	add	r7, sp, #0
 80163d8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80163da:	687b      	ldr	r3, [r7, #4]
 80163dc:	2204      	movs	r2, #4
 80163de:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80163e2:	2300      	movs	r3, #0
 80163e4:	2200      	movs	r2, #0
 80163e6:	2100      	movs	r1, #0
 80163e8:	6878      	ldr	r0, [r7, #4]
 80163ea:	f008 fbe0 	bl	801ebae <USBD_LL_Transmit>

  return USBD_OK;
 80163ee:	2300      	movs	r3, #0
}
 80163f0:	4618      	mov	r0, r3
 80163f2:	3708      	adds	r7, #8
 80163f4:	46bd      	mov	sp, r7
 80163f6:	bd80      	pop	{r7, pc}

080163f8 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80163f8:	b580      	push	{r7, lr}
 80163fa:	b082      	sub	sp, #8
 80163fc:	af00      	add	r7, sp, #0
 80163fe:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8016400:	687b      	ldr	r3, [r7, #4]
 8016402:	2205      	movs	r2, #5
 8016404:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8016408:	2300      	movs	r3, #0
 801640a:	2200      	movs	r2, #0
 801640c:	2100      	movs	r1, #0
 801640e:	6878      	ldr	r0, [r7, #4]
 8016410:	f008 fbee 	bl	801ebf0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8016414:	2300      	movs	r3, #0
}
 8016416:	4618      	mov	r0, r3
 8016418:	3708      	adds	r7, #8
 801641a:	46bd      	mov	sp, r7
 801641c:	bd80      	pop	{r7, pc}
	...

08016420 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8016420:	b480      	push	{r7}
 8016422:	b087      	sub	sp, #28
 8016424:	af00      	add	r7, sp, #0
 8016426:	60f8      	str	r0, [r7, #12]
 8016428:	60b9      	str	r1, [r7, #8]
 801642a:	4613      	mov	r3, r2
 801642c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801642e:	2301      	movs	r3, #1
 8016430:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8016432:	2300      	movs	r3, #0
 8016434:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8016436:	4b1f      	ldr	r3, [pc, #124]	@ (80164b4 <FATFS_LinkDriverEx+0x94>)
 8016438:	7a5b      	ldrb	r3, [r3, #9]
 801643a:	b2db      	uxtb	r3, r3
 801643c:	2b00      	cmp	r3, #0
 801643e:	d131      	bne.n	80164a4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8016440:	4b1c      	ldr	r3, [pc, #112]	@ (80164b4 <FATFS_LinkDriverEx+0x94>)
 8016442:	7a5b      	ldrb	r3, [r3, #9]
 8016444:	b2db      	uxtb	r3, r3
 8016446:	461a      	mov	r2, r3
 8016448:	4b1a      	ldr	r3, [pc, #104]	@ (80164b4 <FATFS_LinkDriverEx+0x94>)
 801644a:	2100      	movs	r1, #0
 801644c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801644e:	4b19      	ldr	r3, [pc, #100]	@ (80164b4 <FATFS_LinkDriverEx+0x94>)
 8016450:	7a5b      	ldrb	r3, [r3, #9]
 8016452:	b2db      	uxtb	r3, r3
 8016454:	4a17      	ldr	r2, [pc, #92]	@ (80164b4 <FATFS_LinkDriverEx+0x94>)
 8016456:	009b      	lsls	r3, r3, #2
 8016458:	4413      	add	r3, r2
 801645a:	68fa      	ldr	r2, [r7, #12]
 801645c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801645e:	4b15      	ldr	r3, [pc, #84]	@ (80164b4 <FATFS_LinkDriverEx+0x94>)
 8016460:	7a5b      	ldrb	r3, [r3, #9]
 8016462:	b2db      	uxtb	r3, r3
 8016464:	461a      	mov	r2, r3
 8016466:	4b13      	ldr	r3, [pc, #76]	@ (80164b4 <FATFS_LinkDriverEx+0x94>)
 8016468:	4413      	add	r3, r2
 801646a:	79fa      	ldrb	r2, [r7, #7]
 801646c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801646e:	4b11      	ldr	r3, [pc, #68]	@ (80164b4 <FATFS_LinkDriverEx+0x94>)
 8016470:	7a5b      	ldrb	r3, [r3, #9]
 8016472:	b2db      	uxtb	r3, r3
 8016474:	1c5a      	adds	r2, r3, #1
 8016476:	b2d1      	uxtb	r1, r2
 8016478:	4a0e      	ldr	r2, [pc, #56]	@ (80164b4 <FATFS_LinkDriverEx+0x94>)
 801647a:	7251      	strb	r1, [r2, #9]
 801647c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801647e:	7dbb      	ldrb	r3, [r7, #22]
 8016480:	3330      	adds	r3, #48	@ 0x30
 8016482:	b2da      	uxtb	r2, r3
 8016484:	68bb      	ldr	r3, [r7, #8]
 8016486:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8016488:	68bb      	ldr	r3, [r7, #8]
 801648a:	3301      	adds	r3, #1
 801648c:	223a      	movs	r2, #58	@ 0x3a
 801648e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8016490:	68bb      	ldr	r3, [r7, #8]
 8016492:	3302      	adds	r3, #2
 8016494:	222f      	movs	r2, #47	@ 0x2f
 8016496:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8016498:	68bb      	ldr	r3, [r7, #8]
 801649a:	3303      	adds	r3, #3
 801649c:	2200      	movs	r2, #0
 801649e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80164a0:	2300      	movs	r3, #0
 80164a2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80164a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80164a6:	4618      	mov	r0, r3
 80164a8:	371c      	adds	r7, #28
 80164aa:	46bd      	mov	sp, r7
 80164ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164b0:	4770      	bx	lr
 80164b2:	bf00      	nop
 80164b4:	240004c0 	.word	0x240004c0

080164b8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80164b8:	b580      	push	{r7, lr}
 80164ba:	b082      	sub	sp, #8
 80164bc:	af00      	add	r7, sp, #0
 80164be:	6078      	str	r0, [r7, #4]
 80164c0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80164c2:	2200      	movs	r2, #0
 80164c4:	6839      	ldr	r1, [r7, #0]
 80164c6:	6878      	ldr	r0, [r7, #4]
 80164c8:	f7ff ffaa 	bl	8016420 <FATFS_LinkDriverEx>
 80164cc:	4603      	mov	r3, r0
}
 80164ce:	4618      	mov	r0, r3
 80164d0:	3708      	adds	r7, #8
 80164d2:	46bd      	mov	sp, r7
 80164d4:	bd80      	pop	{r7, pc}
	...

080164d8 <__NVIC_SetPriority>:
{
 80164d8:	b480      	push	{r7}
 80164da:	b083      	sub	sp, #12
 80164dc:	af00      	add	r7, sp, #0
 80164de:	4603      	mov	r3, r0
 80164e0:	6039      	str	r1, [r7, #0]
 80164e2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80164e4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80164e8:	2b00      	cmp	r3, #0
 80164ea:	db0a      	blt.n	8016502 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80164ec:	683b      	ldr	r3, [r7, #0]
 80164ee:	b2da      	uxtb	r2, r3
 80164f0:	490c      	ldr	r1, [pc, #48]	@ (8016524 <__NVIC_SetPriority+0x4c>)
 80164f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80164f6:	0112      	lsls	r2, r2, #4
 80164f8:	b2d2      	uxtb	r2, r2
 80164fa:	440b      	add	r3, r1
 80164fc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8016500:	e00a      	b.n	8016518 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8016502:	683b      	ldr	r3, [r7, #0]
 8016504:	b2da      	uxtb	r2, r3
 8016506:	4908      	ldr	r1, [pc, #32]	@ (8016528 <__NVIC_SetPriority+0x50>)
 8016508:	88fb      	ldrh	r3, [r7, #6]
 801650a:	f003 030f 	and.w	r3, r3, #15
 801650e:	3b04      	subs	r3, #4
 8016510:	0112      	lsls	r2, r2, #4
 8016512:	b2d2      	uxtb	r2, r2
 8016514:	440b      	add	r3, r1
 8016516:	761a      	strb	r2, [r3, #24]
}
 8016518:	bf00      	nop
 801651a:	370c      	adds	r7, #12
 801651c:	46bd      	mov	sp, r7
 801651e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016522:	4770      	bx	lr
 8016524:	e000e100 	.word	0xe000e100
 8016528:	e000ed00 	.word	0xe000ed00

0801652c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 801652c:	b580      	push	{r7, lr}
 801652e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8016530:	4b05      	ldr	r3, [pc, #20]	@ (8016548 <SysTick_Handler+0x1c>)
 8016532:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8016534:	f002 fa80 	bl	8018a38 <xTaskGetSchedulerState>
 8016538:	4603      	mov	r3, r0
 801653a:	2b01      	cmp	r3, #1
 801653c:	d001      	beq.n	8016542 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 801653e:	f003 fa3b 	bl	80199b8 <xPortSysTickHandler>
  }
}
 8016542:	bf00      	nop
 8016544:	bd80      	pop	{r7, pc}
 8016546:	bf00      	nop
 8016548:	e000e010 	.word	0xe000e010

0801654c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 801654c:	b580      	push	{r7, lr}
 801654e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8016550:	2100      	movs	r1, #0
 8016552:	f06f 0004 	mvn.w	r0, #4
 8016556:	f7ff ffbf 	bl	80164d8 <__NVIC_SetPriority>
#endif
}
 801655a:	bf00      	nop
 801655c:	bd80      	pop	{r7, pc}
	...

08016560 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8016560:	b480      	push	{r7}
 8016562:	b083      	sub	sp, #12
 8016564:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016566:	f3ef 8305 	mrs	r3, IPSR
 801656a:	603b      	str	r3, [r7, #0]
  return(result);
 801656c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 801656e:	2b00      	cmp	r3, #0
 8016570:	d003      	beq.n	801657a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8016572:	f06f 0305 	mvn.w	r3, #5
 8016576:	607b      	str	r3, [r7, #4]
 8016578:	e00c      	b.n	8016594 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 801657a:	4b0a      	ldr	r3, [pc, #40]	@ (80165a4 <osKernelInitialize+0x44>)
 801657c:	681b      	ldr	r3, [r3, #0]
 801657e:	2b00      	cmp	r3, #0
 8016580:	d105      	bne.n	801658e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8016582:	4b08      	ldr	r3, [pc, #32]	@ (80165a4 <osKernelInitialize+0x44>)
 8016584:	2201      	movs	r2, #1
 8016586:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8016588:	2300      	movs	r3, #0
 801658a:	607b      	str	r3, [r7, #4]
 801658c:	e002      	b.n	8016594 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 801658e:	f04f 33ff 	mov.w	r3, #4294967295
 8016592:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8016594:	687b      	ldr	r3, [r7, #4]
}
 8016596:	4618      	mov	r0, r3
 8016598:	370c      	adds	r7, #12
 801659a:	46bd      	mov	sp, r7
 801659c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165a0:	4770      	bx	lr
 80165a2:	bf00      	nop
 80165a4:	240004cc 	.word	0x240004cc

080165a8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80165a8:	b580      	push	{r7, lr}
 80165aa:	b082      	sub	sp, #8
 80165ac:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80165ae:	f3ef 8305 	mrs	r3, IPSR
 80165b2:	603b      	str	r3, [r7, #0]
  return(result);
 80165b4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80165b6:	2b00      	cmp	r3, #0
 80165b8:	d003      	beq.n	80165c2 <osKernelStart+0x1a>
    stat = osErrorISR;
 80165ba:	f06f 0305 	mvn.w	r3, #5
 80165be:	607b      	str	r3, [r7, #4]
 80165c0:	e010      	b.n	80165e4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80165c2:	4b0b      	ldr	r3, [pc, #44]	@ (80165f0 <osKernelStart+0x48>)
 80165c4:	681b      	ldr	r3, [r3, #0]
 80165c6:	2b01      	cmp	r3, #1
 80165c8:	d109      	bne.n	80165de <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80165ca:	f7ff ffbf 	bl	801654c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80165ce:	4b08      	ldr	r3, [pc, #32]	@ (80165f0 <osKernelStart+0x48>)
 80165d0:	2202      	movs	r2, #2
 80165d2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80165d4:	f001 fb02 	bl	8017bdc <vTaskStartScheduler>
      stat = osOK;
 80165d8:	2300      	movs	r3, #0
 80165da:	607b      	str	r3, [r7, #4]
 80165dc:	e002      	b.n	80165e4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80165de:	f04f 33ff 	mov.w	r3, #4294967295
 80165e2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80165e4:	687b      	ldr	r3, [r7, #4]
}
 80165e6:	4618      	mov	r0, r3
 80165e8:	3708      	adds	r7, #8
 80165ea:	46bd      	mov	sp, r7
 80165ec:	bd80      	pop	{r7, pc}
 80165ee:	bf00      	nop
 80165f0:	240004cc 	.word	0x240004cc

080165f4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80165f4:	b580      	push	{r7, lr}
 80165f6:	b08e      	sub	sp, #56	@ 0x38
 80165f8:	af04      	add	r7, sp, #16
 80165fa:	60f8      	str	r0, [r7, #12]
 80165fc:	60b9      	str	r1, [r7, #8]
 80165fe:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8016600:	2300      	movs	r3, #0
 8016602:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016604:	f3ef 8305 	mrs	r3, IPSR
 8016608:	617b      	str	r3, [r7, #20]
  return(result);
 801660a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 801660c:	2b00      	cmp	r3, #0
 801660e:	d17e      	bne.n	801670e <osThreadNew+0x11a>
 8016610:	68fb      	ldr	r3, [r7, #12]
 8016612:	2b00      	cmp	r3, #0
 8016614:	d07b      	beq.n	801670e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8016616:	2380      	movs	r3, #128	@ 0x80
 8016618:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 801661a:	2318      	movs	r3, #24
 801661c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 801661e:	2300      	movs	r3, #0
 8016620:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8016622:	f04f 33ff 	mov.w	r3, #4294967295
 8016626:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8016628:	687b      	ldr	r3, [r7, #4]
 801662a:	2b00      	cmp	r3, #0
 801662c:	d045      	beq.n	80166ba <osThreadNew+0xc6>
      if (attr->name != NULL) {
 801662e:	687b      	ldr	r3, [r7, #4]
 8016630:	681b      	ldr	r3, [r3, #0]
 8016632:	2b00      	cmp	r3, #0
 8016634:	d002      	beq.n	801663c <osThreadNew+0x48>
        name = attr->name;
 8016636:	687b      	ldr	r3, [r7, #4]
 8016638:	681b      	ldr	r3, [r3, #0]
 801663a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 801663c:	687b      	ldr	r3, [r7, #4]
 801663e:	699b      	ldr	r3, [r3, #24]
 8016640:	2b00      	cmp	r3, #0
 8016642:	d002      	beq.n	801664a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8016644:	687b      	ldr	r3, [r7, #4]
 8016646:	699b      	ldr	r3, [r3, #24]
 8016648:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 801664a:	69fb      	ldr	r3, [r7, #28]
 801664c:	2b00      	cmp	r3, #0
 801664e:	d008      	beq.n	8016662 <osThreadNew+0x6e>
 8016650:	69fb      	ldr	r3, [r7, #28]
 8016652:	2b38      	cmp	r3, #56	@ 0x38
 8016654:	d805      	bhi.n	8016662 <osThreadNew+0x6e>
 8016656:	687b      	ldr	r3, [r7, #4]
 8016658:	685b      	ldr	r3, [r3, #4]
 801665a:	f003 0301 	and.w	r3, r3, #1
 801665e:	2b00      	cmp	r3, #0
 8016660:	d001      	beq.n	8016666 <osThreadNew+0x72>
        return (NULL);
 8016662:	2300      	movs	r3, #0
 8016664:	e054      	b.n	8016710 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8016666:	687b      	ldr	r3, [r7, #4]
 8016668:	695b      	ldr	r3, [r3, #20]
 801666a:	2b00      	cmp	r3, #0
 801666c:	d003      	beq.n	8016676 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 801666e:	687b      	ldr	r3, [r7, #4]
 8016670:	695b      	ldr	r3, [r3, #20]
 8016672:	089b      	lsrs	r3, r3, #2
 8016674:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8016676:	687b      	ldr	r3, [r7, #4]
 8016678:	689b      	ldr	r3, [r3, #8]
 801667a:	2b00      	cmp	r3, #0
 801667c:	d00e      	beq.n	801669c <osThreadNew+0xa8>
 801667e:	687b      	ldr	r3, [r7, #4]
 8016680:	68db      	ldr	r3, [r3, #12]
 8016682:	2baf      	cmp	r3, #175	@ 0xaf
 8016684:	d90a      	bls.n	801669c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8016686:	687b      	ldr	r3, [r7, #4]
 8016688:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 801668a:	2b00      	cmp	r3, #0
 801668c:	d006      	beq.n	801669c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 801668e:	687b      	ldr	r3, [r7, #4]
 8016690:	695b      	ldr	r3, [r3, #20]
 8016692:	2b00      	cmp	r3, #0
 8016694:	d002      	beq.n	801669c <osThreadNew+0xa8>
        mem = 1;
 8016696:	2301      	movs	r3, #1
 8016698:	61bb      	str	r3, [r7, #24]
 801669a:	e010      	b.n	80166be <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 801669c:	687b      	ldr	r3, [r7, #4]
 801669e:	689b      	ldr	r3, [r3, #8]
 80166a0:	2b00      	cmp	r3, #0
 80166a2:	d10c      	bne.n	80166be <osThreadNew+0xca>
 80166a4:	687b      	ldr	r3, [r7, #4]
 80166a6:	68db      	ldr	r3, [r3, #12]
 80166a8:	2b00      	cmp	r3, #0
 80166aa:	d108      	bne.n	80166be <osThreadNew+0xca>
 80166ac:	687b      	ldr	r3, [r7, #4]
 80166ae:	691b      	ldr	r3, [r3, #16]
 80166b0:	2b00      	cmp	r3, #0
 80166b2:	d104      	bne.n	80166be <osThreadNew+0xca>
          mem = 0;
 80166b4:	2300      	movs	r3, #0
 80166b6:	61bb      	str	r3, [r7, #24]
 80166b8:	e001      	b.n	80166be <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80166ba:	2300      	movs	r3, #0
 80166bc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80166be:	69bb      	ldr	r3, [r7, #24]
 80166c0:	2b01      	cmp	r3, #1
 80166c2:	d110      	bne.n	80166e6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80166c4:	687b      	ldr	r3, [r7, #4]
 80166c6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80166c8:	687a      	ldr	r2, [r7, #4]
 80166ca:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80166cc:	9202      	str	r2, [sp, #8]
 80166ce:	9301      	str	r3, [sp, #4]
 80166d0:	69fb      	ldr	r3, [r7, #28]
 80166d2:	9300      	str	r3, [sp, #0]
 80166d4:	68bb      	ldr	r3, [r7, #8]
 80166d6:	6a3a      	ldr	r2, [r7, #32]
 80166d8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80166da:	68f8      	ldr	r0, [r7, #12]
 80166dc:	f001 f81c 	bl	8017718 <xTaskCreateStatic>
 80166e0:	4603      	mov	r3, r0
 80166e2:	613b      	str	r3, [r7, #16]
 80166e4:	e013      	b.n	801670e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80166e6:	69bb      	ldr	r3, [r7, #24]
 80166e8:	2b00      	cmp	r3, #0
 80166ea:	d110      	bne.n	801670e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80166ec:	6a3b      	ldr	r3, [r7, #32]
 80166ee:	b29a      	uxth	r2, r3
 80166f0:	f107 0310 	add.w	r3, r7, #16
 80166f4:	9301      	str	r3, [sp, #4]
 80166f6:	69fb      	ldr	r3, [r7, #28]
 80166f8:	9300      	str	r3, [sp, #0]
 80166fa:	68bb      	ldr	r3, [r7, #8]
 80166fc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80166fe:	68f8      	ldr	r0, [r7, #12]
 8016700:	f001 f86a 	bl	80177d8 <xTaskCreate>
 8016704:	4603      	mov	r3, r0
 8016706:	2b01      	cmp	r3, #1
 8016708:	d001      	beq.n	801670e <osThreadNew+0x11a>
            hTask = NULL;
 801670a:	2300      	movs	r3, #0
 801670c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 801670e:	693b      	ldr	r3, [r7, #16]
}
 8016710:	4618      	mov	r0, r3
 8016712:	3728      	adds	r7, #40	@ 0x28
 8016714:	46bd      	mov	sp, r7
 8016716:	bd80      	pop	{r7, pc}

08016718 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8016718:	b580      	push	{r7, lr}
 801671a:	b084      	sub	sp, #16
 801671c:	af00      	add	r7, sp, #0
 801671e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016720:	f3ef 8305 	mrs	r3, IPSR
 8016724:	60bb      	str	r3, [r7, #8]
  return(result);
 8016726:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8016728:	2b00      	cmp	r3, #0
 801672a:	d003      	beq.n	8016734 <osDelay+0x1c>
    stat = osErrorISR;
 801672c:	f06f 0305 	mvn.w	r3, #5
 8016730:	60fb      	str	r3, [r7, #12]
 8016732:	e007      	b.n	8016744 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8016734:	2300      	movs	r3, #0
 8016736:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8016738:	687b      	ldr	r3, [r7, #4]
 801673a:	2b00      	cmp	r3, #0
 801673c:	d002      	beq.n	8016744 <osDelay+0x2c>
      vTaskDelay(ticks);
 801673e:	6878      	ldr	r0, [r7, #4]
 8016740:	f001 f9ae 	bl	8017aa0 <vTaskDelay>
    }
  }

  return (stat);
 8016744:	68fb      	ldr	r3, [r7, #12]
}
 8016746:	4618      	mov	r0, r3
 8016748:	3710      	adds	r7, #16
 801674a:	46bd      	mov	sp, r7
 801674c:	bd80      	pop	{r7, pc}
	...

08016750 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8016750:	b480      	push	{r7}
 8016752:	b085      	sub	sp, #20
 8016754:	af00      	add	r7, sp, #0
 8016756:	60f8      	str	r0, [r7, #12]
 8016758:	60b9      	str	r1, [r7, #8]
 801675a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 801675c:	68fb      	ldr	r3, [r7, #12]
 801675e:	4a07      	ldr	r2, [pc, #28]	@ (801677c <vApplicationGetIdleTaskMemory+0x2c>)
 8016760:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8016762:	68bb      	ldr	r3, [r7, #8]
 8016764:	4a06      	ldr	r2, [pc, #24]	@ (8016780 <vApplicationGetIdleTaskMemory+0x30>)
 8016766:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8016768:	687b      	ldr	r3, [r7, #4]
 801676a:	2280      	movs	r2, #128	@ 0x80
 801676c:	601a      	str	r2, [r3, #0]
}
 801676e:	bf00      	nop
 8016770:	3714      	adds	r7, #20
 8016772:	46bd      	mov	sp, r7
 8016774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016778:	4770      	bx	lr
 801677a:	bf00      	nop
 801677c:	240004d0 	.word	0x240004d0
 8016780:	24000580 	.word	0x24000580

08016784 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8016784:	b480      	push	{r7}
 8016786:	b085      	sub	sp, #20
 8016788:	af00      	add	r7, sp, #0
 801678a:	60f8      	str	r0, [r7, #12]
 801678c:	60b9      	str	r1, [r7, #8]
 801678e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8016790:	68fb      	ldr	r3, [r7, #12]
 8016792:	4a07      	ldr	r2, [pc, #28]	@ (80167b0 <vApplicationGetTimerTaskMemory+0x2c>)
 8016794:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8016796:	68bb      	ldr	r3, [r7, #8]
 8016798:	4a06      	ldr	r2, [pc, #24]	@ (80167b4 <vApplicationGetTimerTaskMemory+0x30>)
 801679a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 801679c:	687b      	ldr	r3, [r7, #4]
 801679e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80167a2:	601a      	str	r2, [r3, #0]
}
 80167a4:	bf00      	nop
 80167a6:	3714      	adds	r7, #20
 80167a8:	46bd      	mov	sp, r7
 80167aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167ae:	4770      	bx	lr
 80167b0:	24000780 	.word	0x24000780
 80167b4:	24000830 	.word	0x24000830

080167b8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80167b8:	b480      	push	{r7}
 80167ba:	b083      	sub	sp, #12
 80167bc:	af00      	add	r7, sp, #0
 80167be:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80167c0:	687b      	ldr	r3, [r7, #4]
 80167c2:	f103 0208 	add.w	r2, r3, #8
 80167c6:	687b      	ldr	r3, [r7, #4]
 80167c8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80167ca:	687b      	ldr	r3, [r7, #4]
 80167cc:	f04f 32ff 	mov.w	r2, #4294967295
 80167d0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80167d2:	687b      	ldr	r3, [r7, #4]
 80167d4:	f103 0208 	add.w	r2, r3, #8
 80167d8:	687b      	ldr	r3, [r7, #4]
 80167da:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80167dc:	687b      	ldr	r3, [r7, #4]
 80167de:	f103 0208 	add.w	r2, r3, #8
 80167e2:	687b      	ldr	r3, [r7, #4]
 80167e4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80167e6:	687b      	ldr	r3, [r7, #4]
 80167e8:	2200      	movs	r2, #0
 80167ea:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80167ec:	bf00      	nop
 80167ee:	370c      	adds	r7, #12
 80167f0:	46bd      	mov	sp, r7
 80167f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167f6:	4770      	bx	lr

080167f8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80167f8:	b480      	push	{r7}
 80167fa:	b083      	sub	sp, #12
 80167fc:	af00      	add	r7, sp, #0
 80167fe:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8016800:	687b      	ldr	r3, [r7, #4]
 8016802:	2200      	movs	r2, #0
 8016804:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8016806:	bf00      	nop
 8016808:	370c      	adds	r7, #12
 801680a:	46bd      	mov	sp, r7
 801680c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016810:	4770      	bx	lr

08016812 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8016812:	b480      	push	{r7}
 8016814:	b085      	sub	sp, #20
 8016816:	af00      	add	r7, sp, #0
 8016818:	6078      	str	r0, [r7, #4]
 801681a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 801681c:	687b      	ldr	r3, [r7, #4]
 801681e:	685b      	ldr	r3, [r3, #4]
 8016820:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8016822:	683b      	ldr	r3, [r7, #0]
 8016824:	68fa      	ldr	r2, [r7, #12]
 8016826:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8016828:	68fb      	ldr	r3, [r7, #12]
 801682a:	689a      	ldr	r2, [r3, #8]
 801682c:	683b      	ldr	r3, [r7, #0]
 801682e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8016830:	68fb      	ldr	r3, [r7, #12]
 8016832:	689b      	ldr	r3, [r3, #8]
 8016834:	683a      	ldr	r2, [r7, #0]
 8016836:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8016838:	68fb      	ldr	r3, [r7, #12]
 801683a:	683a      	ldr	r2, [r7, #0]
 801683c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 801683e:	683b      	ldr	r3, [r7, #0]
 8016840:	687a      	ldr	r2, [r7, #4]
 8016842:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8016844:	687b      	ldr	r3, [r7, #4]
 8016846:	681b      	ldr	r3, [r3, #0]
 8016848:	1c5a      	adds	r2, r3, #1
 801684a:	687b      	ldr	r3, [r7, #4]
 801684c:	601a      	str	r2, [r3, #0]
}
 801684e:	bf00      	nop
 8016850:	3714      	adds	r7, #20
 8016852:	46bd      	mov	sp, r7
 8016854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016858:	4770      	bx	lr

0801685a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801685a:	b480      	push	{r7}
 801685c:	b085      	sub	sp, #20
 801685e:	af00      	add	r7, sp, #0
 8016860:	6078      	str	r0, [r7, #4]
 8016862:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8016864:	683b      	ldr	r3, [r7, #0]
 8016866:	681b      	ldr	r3, [r3, #0]
 8016868:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 801686a:	68bb      	ldr	r3, [r7, #8]
 801686c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016870:	d103      	bne.n	801687a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8016872:	687b      	ldr	r3, [r7, #4]
 8016874:	691b      	ldr	r3, [r3, #16]
 8016876:	60fb      	str	r3, [r7, #12]
 8016878:	e00c      	b.n	8016894 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 801687a:	687b      	ldr	r3, [r7, #4]
 801687c:	3308      	adds	r3, #8
 801687e:	60fb      	str	r3, [r7, #12]
 8016880:	e002      	b.n	8016888 <vListInsert+0x2e>
 8016882:	68fb      	ldr	r3, [r7, #12]
 8016884:	685b      	ldr	r3, [r3, #4]
 8016886:	60fb      	str	r3, [r7, #12]
 8016888:	68fb      	ldr	r3, [r7, #12]
 801688a:	685b      	ldr	r3, [r3, #4]
 801688c:	681b      	ldr	r3, [r3, #0]
 801688e:	68ba      	ldr	r2, [r7, #8]
 8016890:	429a      	cmp	r2, r3
 8016892:	d2f6      	bcs.n	8016882 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8016894:	68fb      	ldr	r3, [r7, #12]
 8016896:	685a      	ldr	r2, [r3, #4]
 8016898:	683b      	ldr	r3, [r7, #0]
 801689a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 801689c:	683b      	ldr	r3, [r7, #0]
 801689e:	685b      	ldr	r3, [r3, #4]
 80168a0:	683a      	ldr	r2, [r7, #0]
 80168a2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80168a4:	683b      	ldr	r3, [r7, #0]
 80168a6:	68fa      	ldr	r2, [r7, #12]
 80168a8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80168aa:	68fb      	ldr	r3, [r7, #12]
 80168ac:	683a      	ldr	r2, [r7, #0]
 80168ae:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80168b0:	683b      	ldr	r3, [r7, #0]
 80168b2:	687a      	ldr	r2, [r7, #4]
 80168b4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80168b6:	687b      	ldr	r3, [r7, #4]
 80168b8:	681b      	ldr	r3, [r3, #0]
 80168ba:	1c5a      	adds	r2, r3, #1
 80168bc:	687b      	ldr	r3, [r7, #4]
 80168be:	601a      	str	r2, [r3, #0]
}
 80168c0:	bf00      	nop
 80168c2:	3714      	adds	r7, #20
 80168c4:	46bd      	mov	sp, r7
 80168c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168ca:	4770      	bx	lr

080168cc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80168cc:	b480      	push	{r7}
 80168ce:	b085      	sub	sp, #20
 80168d0:	af00      	add	r7, sp, #0
 80168d2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80168d4:	687b      	ldr	r3, [r7, #4]
 80168d6:	691b      	ldr	r3, [r3, #16]
 80168d8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80168da:	687b      	ldr	r3, [r7, #4]
 80168dc:	685b      	ldr	r3, [r3, #4]
 80168de:	687a      	ldr	r2, [r7, #4]
 80168e0:	6892      	ldr	r2, [r2, #8]
 80168e2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80168e4:	687b      	ldr	r3, [r7, #4]
 80168e6:	689b      	ldr	r3, [r3, #8]
 80168e8:	687a      	ldr	r2, [r7, #4]
 80168ea:	6852      	ldr	r2, [r2, #4]
 80168ec:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80168ee:	68fb      	ldr	r3, [r7, #12]
 80168f0:	685b      	ldr	r3, [r3, #4]
 80168f2:	687a      	ldr	r2, [r7, #4]
 80168f4:	429a      	cmp	r2, r3
 80168f6:	d103      	bne.n	8016900 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80168f8:	687b      	ldr	r3, [r7, #4]
 80168fa:	689a      	ldr	r2, [r3, #8]
 80168fc:	68fb      	ldr	r3, [r7, #12]
 80168fe:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8016900:	687b      	ldr	r3, [r7, #4]
 8016902:	2200      	movs	r2, #0
 8016904:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8016906:	68fb      	ldr	r3, [r7, #12]
 8016908:	681b      	ldr	r3, [r3, #0]
 801690a:	1e5a      	subs	r2, r3, #1
 801690c:	68fb      	ldr	r3, [r7, #12]
 801690e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8016910:	68fb      	ldr	r3, [r7, #12]
 8016912:	681b      	ldr	r3, [r3, #0]
}
 8016914:	4618      	mov	r0, r3
 8016916:	3714      	adds	r7, #20
 8016918:	46bd      	mov	sp, r7
 801691a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801691e:	4770      	bx	lr

08016920 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8016920:	b580      	push	{r7, lr}
 8016922:	b084      	sub	sp, #16
 8016924:	af00      	add	r7, sp, #0
 8016926:	6078      	str	r0, [r7, #4]
 8016928:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 801692a:	687b      	ldr	r3, [r7, #4]
 801692c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801692e:	68fb      	ldr	r3, [r7, #12]
 8016930:	2b00      	cmp	r3, #0
 8016932:	d10b      	bne.n	801694c <xQueueGenericReset+0x2c>
	__asm volatile
 8016934:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016938:	f383 8811 	msr	BASEPRI, r3
 801693c:	f3bf 8f6f 	isb	sy
 8016940:	f3bf 8f4f 	dsb	sy
 8016944:	60bb      	str	r3, [r7, #8]
}
 8016946:	bf00      	nop
 8016948:	bf00      	nop
 801694a:	e7fd      	b.n	8016948 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 801694c:	f002 ffa4 	bl	8019898 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8016950:	68fb      	ldr	r3, [r7, #12]
 8016952:	681a      	ldr	r2, [r3, #0]
 8016954:	68fb      	ldr	r3, [r7, #12]
 8016956:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8016958:	68f9      	ldr	r1, [r7, #12]
 801695a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 801695c:	fb01 f303 	mul.w	r3, r1, r3
 8016960:	441a      	add	r2, r3
 8016962:	68fb      	ldr	r3, [r7, #12]
 8016964:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8016966:	68fb      	ldr	r3, [r7, #12]
 8016968:	2200      	movs	r2, #0
 801696a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 801696c:	68fb      	ldr	r3, [r7, #12]
 801696e:	681a      	ldr	r2, [r3, #0]
 8016970:	68fb      	ldr	r3, [r7, #12]
 8016972:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8016974:	68fb      	ldr	r3, [r7, #12]
 8016976:	681a      	ldr	r2, [r3, #0]
 8016978:	68fb      	ldr	r3, [r7, #12]
 801697a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801697c:	3b01      	subs	r3, #1
 801697e:	68f9      	ldr	r1, [r7, #12]
 8016980:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8016982:	fb01 f303 	mul.w	r3, r1, r3
 8016986:	441a      	add	r2, r3
 8016988:	68fb      	ldr	r3, [r7, #12]
 801698a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 801698c:	68fb      	ldr	r3, [r7, #12]
 801698e:	22ff      	movs	r2, #255	@ 0xff
 8016990:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8016994:	68fb      	ldr	r3, [r7, #12]
 8016996:	22ff      	movs	r2, #255	@ 0xff
 8016998:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 801699c:	683b      	ldr	r3, [r7, #0]
 801699e:	2b00      	cmp	r3, #0
 80169a0:	d114      	bne.n	80169cc <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80169a2:	68fb      	ldr	r3, [r7, #12]
 80169a4:	691b      	ldr	r3, [r3, #16]
 80169a6:	2b00      	cmp	r3, #0
 80169a8:	d01a      	beq.n	80169e0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80169aa:	68fb      	ldr	r3, [r7, #12]
 80169ac:	3310      	adds	r3, #16
 80169ae:	4618      	mov	r0, r3
 80169b0:	f001 fd2e 	bl	8018410 <xTaskRemoveFromEventList>
 80169b4:	4603      	mov	r3, r0
 80169b6:	2b00      	cmp	r3, #0
 80169b8:	d012      	beq.n	80169e0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80169ba:	4b0d      	ldr	r3, [pc, #52]	@ (80169f0 <xQueueGenericReset+0xd0>)
 80169bc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80169c0:	601a      	str	r2, [r3, #0]
 80169c2:	f3bf 8f4f 	dsb	sy
 80169c6:	f3bf 8f6f 	isb	sy
 80169ca:	e009      	b.n	80169e0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80169cc:	68fb      	ldr	r3, [r7, #12]
 80169ce:	3310      	adds	r3, #16
 80169d0:	4618      	mov	r0, r3
 80169d2:	f7ff fef1 	bl	80167b8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80169d6:	68fb      	ldr	r3, [r7, #12]
 80169d8:	3324      	adds	r3, #36	@ 0x24
 80169da:	4618      	mov	r0, r3
 80169dc:	f7ff feec 	bl	80167b8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80169e0:	f002 ff8c 	bl	80198fc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80169e4:	2301      	movs	r3, #1
}
 80169e6:	4618      	mov	r0, r3
 80169e8:	3710      	adds	r7, #16
 80169ea:	46bd      	mov	sp, r7
 80169ec:	bd80      	pop	{r7, pc}
 80169ee:	bf00      	nop
 80169f0:	e000ed04 	.word	0xe000ed04

080169f4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80169f4:	b580      	push	{r7, lr}
 80169f6:	b08e      	sub	sp, #56	@ 0x38
 80169f8:	af02      	add	r7, sp, #8
 80169fa:	60f8      	str	r0, [r7, #12]
 80169fc:	60b9      	str	r1, [r7, #8]
 80169fe:	607a      	str	r2, [r7, #4]
 8016a00:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8016a02:	68fb      	ldr	r3, [r7, #12]
 8016a04:	2b00      	cmp	r3, #0
 8016a06:	d10b      	bne.n	8016a20 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8016a08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016a0c:	f383 8811 	msr	BASEPRI, r3
 8016a10:	f3bf 8f6f 	isb	sy
 8016a14:	f3bf 8f4f 	dsb	sy
 8016a18:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8016a1a:	bf00      	nop
 8016a1c:	bf00      	nop
 8016a1e:	e7fd      	b.n	8016a1c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8016a20:	683b      	ldr	r3, [r7, #0]
 8016a22:	2b00      	cmp	r3, #0
 8016a24:	d10b      	bne.n	8016a3e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8016a26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016a2a:	f383 8811 	msr	BASEPRI, r3
 8016a2e:	f3bf 8f6f 	isb	sy
 8016a32:	f3bf 8f4f 	dsb	sy
 8016a36:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8016a38:	bf00      	nop
 8016a3a:	bf00      	nop
 8016a3c:	e7fd      	b.n	8016a3a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8016a3e:	687b      	ldr	r3, [r7, #4]
 8016a40:	2b00      	cmp	r3, #0
 8016a42:	d002      	beq.n	8016a4a <xQueueGenericCreateStatic+0x56>
 8016a44:	68bb      	ldr	r3, [r7, #8]
 8016a46:	2b00      	cmp	r3, #0
 8016a48:	d001      	beq.n	8016a4e <xQueueGenericCreateStatic+0x5a>
 8016a4a:	2301      	movs	r3, #1
 8016a4c:	e000      	b.n	8016a50 <xQueueGenericCreateStatic+0x5c>
 8016a4e:	2300      	movs	r3, #0
 8016a50:	2b00      	cmp	r3, #0
 8016a52:	d10b      	bne.n	8016a6c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8016a54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016a58:	f383 8811 	msr	BASEPRI, r3
 8016a5c:	f3bf 8f6f 	isb	sy
 8016a60:	f3bf 8f4f 	dsb	sy
 8016a64:	623b      	str	r3, [r7, #32]
}
 8016a66:	bf00      	nop
 8016a68:	bf00      	nop
 8016a6a:	e7fd      	b.n	8016a68 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8016a6c:	687b      	ldr	r3, [r7, #4]
 8016a6e:	2b00      	cmp	r3, #0
 8016a70:	d102      	bne.n	8016a78 <xQueueGenericCreateStatic+0x84>
 8016a72:	68bb      	ldr	r3, [r7, #8]
 8016a74:	2b00      	cmp	r3, #0
 8016a76:	d101      	bne.n	8016a7c <xQueueGenericCreateStatic+0x88>
 8016a78:	2301      	movs	r3, #1
 8016a7a:	e000      	b.n	8016a7e <xQueueGenericCreateStatic+0x8a>
 8016a7c:	2300      	movs	r3, #0
 8016a7e:	2b00      	cmp	r3, #0
 8016a80:	d10b      	bne.n	8016a9a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8016a82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016a86:	f383 8811 	msr	BASEPRI, r3
 8016a8a:	f3bf 8f6f 	isb	sy
 8016a8e:	f3bf 8f4f 	dsb	sy
 8016a92:	61fb      	str	r3, [r7, #28]
}
 8016a94:	bf00      	nop
 8016a96:	bf00      	nop
 8016a98:	e7fd      	b.n	8016a96 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8016a9a:	2350      	movs	r3, #80	@ 0x50
 8016a9c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8016a9e:	697b      	ldr	r3, [r7, #20]
 8016aa0:	2b50      	cmp	r3, #80	@ 0x50
 8016aa2:	d00b      	beq.n	8016abc <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8016aa4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016aa8:	f383 8811 	msr	BASEPRI, r3
 8016aac:	f3bf 8f6f 	isb	sy
 8016ab0:	f3bf 8f4f 	dsb	sy
 8016ab4:	61bb      	str	r3, [r7, #24]
}
 8016ab6:	bf00      	nop
 8016ab8:	bf00      	nop
 8016aba:	e7fd      	b.n	8016ab8 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8016abc:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8016abe:	683b      	ldr	r3, [r7, #0]
 8016ac0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8016ac2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016ac4:	2b00      	cmp	r3, #0
 8016ac6:	d00d      	beq.n	8016ae4 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8016ac8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016aca:	2201      	movs	r2, #1
 8016acc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8016ad0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8016ad4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016ad6:	9300      	str	r3, [sp, #0]
 8016ad8:	4613      	mov	r3, r2
 8016ada:	687a      	ldr	r2, [r7, #4]
 8016adc:	68b9      	ldr	r1, [r7, #8]
 8016ade:	68f8      	ldr	r0, [r7, #12]
 8016ae0:	f000 f840 	bl	8016b64 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8016ae4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8016ae6:	4618      	mov	r0, r3
 8016ae8:	3730      	adds	r7, #48	@ 0x30
 8016aea:	46bd      	mov	sp, r7
 8016aec:	bd80      	pop	{r7, pc}

08016aee <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8016aee:	b580      	push	{r7, lr}
 8016af0:	b08a      	sub	sp, #40	@ 0x28
 8016af2:	af02      	add	r7, sp, #8
 8016af4:	60f8      	str	r0, [r7, #12]
 8016af6:	60b9      	str	r1, [r7, #8]
 8016af8:	4613      	mov	r3, r2
 8016afa:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8016afc:	68fb      	ldr	r3, [r7, #12]
 8016afe:	2b00      	cmp	r3, #0
 8016b00:	d10b      	bne.n	8016b1a <xQueueGenericCreate+0x2c>
	__asm volatile
 8016b02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016b06:	f383 8811 	msr	BASEPRI, r3
 8016b0a:	f3bf 8f6f 	isb	sy
 8016b0e:	f3bf 8f4f 	dsb	sy
 8016b12:	613b      	str	r3, [r7, #16]
}
 8016b14:	bf00      	nop
 8016b16:	bf00      	nop
 8016b18:	e7fd      	b.n	8016b16 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016b1a:	68fb      	ldr	r3, [r7, #12]
 8016b1c:	68ba      	ldr	r2, [r7, #8]
 8016b1e:	fb02 f303 	mul.w	r3, r2, r3
 8016b22:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8016b24:	69fb      	ldr	r3, [r7, #28]
 8016b26:	3350      	adds	r3, #80	@ 0x50
 8016b28:	4618      	mov	r0, r3
 8016b2a:	f003 f8bb 	bl	8019ca4 <pvPortMalloc>
 8016b2e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8016b30:	69bb      	ldr	r3, [r7, #24]
 8016b32:	2b00      	cmp	r3, #0
 8016b34:	d011      	beq.n	8016b5a <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8016b36:	69bb      	ldr	r3, [r7, #24]
 8016b38:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8016b3a:	697b      	ldr	r3, [r7, #20]
 8016b3c:	3350      	adds	r3, #80	@ 0x50
 8016b3e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8016b40:	69bb      	ldr	r3, [r7, #24]
 8016b42:	2200      	movs	r2, #0
 8016b44:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8016b48:	79fa      	ldrb	r2, [r7, #7]
 8016b4a:	69bb      	ldr	r3, [r7, #24]
 8016b4c:	9300      	str	r3, [sp, #0]
 8016b4e:	4613      	mov	r3, r2
 8016b50:	697a      	ldr	r2, [r7, #20]
 8016b52:	68b9      	ldr	r1, [r7, #8]
 8016b54:	68f8      	ldr	r0, [r7, #12]
 8016b56:	f000 f805 	bl	8016b64 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8016b5a:	69bb      	ldr	r3, [r7, #24]
	}
 8016b5c:	4618      	mov	r0, r3
 8016b5e:	3720      	adds	r7, #32
 8016b60:	46bd      	mov	sp, r7
 8016b62:	bd80      	pop	{r7, pc}

08016b64 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8016b64:	b580      	push	{r7, lr}
 8016b66:	b084      	sub	sp, #16
 8016b68:	af00      	add	r7, sp, #0
 8016b6a:	60f8      	str	r0, [r7, #12]
 8016b6c:	60b9      	str	r1, [r7, #8]
 8016b6e:	607a      	str	r2, [r7, #4]
 8016b70:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8016b72:	68bb      	ldr	r3, [r7, #8]
 8016b74:	2b00      	cmp	r3, #0
 8016b76:	d103      	bne.n	8016b80 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8016b78:	69bb      	ldr	r3, [r7, #24]
 8016b7a:	69ba      	ldr	r2, [r7, #24]
 8016b7c:	601a      	str	r2, [r3, #0]
 8016b7e:	e002      	b.n	8016b86 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8016b80:	69bb      	ldr	r3, [r7, #24]
 8016b82:	687a      	ldr	r2, [r7, #4]
 8016b84:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8016b86:	69bb      	ldr	r3, [r7, #24]
 8016b88:	68fa      	ldr	r2, [r7, #12]
 8016b8a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8016b8c:	69bb      	ldr	r3, [r7, #24]
 8016b8e:	68ba      	ldr	r2, [r7, #8]
 8016b90:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8016b92:	2101      	movs	r1, #1
 8016b94:	69b8      	ldr	r0, [r7, #24]
 8016b96:	f7ff fec3 	bl	8016920 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8016b9a:	69bb      	ldr	r3, [r7, #24]
 8016b9c:	78fa      	ldrb	r2, [r7, #3]
 8016b9e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8016ba2:	bf00      	nop
 8016ba4:	3710      	adds	r7, #16
 8016ba6:	46bd      	mov	sp, r7
 8016ba8:	bd80      	pop	{r7, pc}

08016baa <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8016baa:	b580      	push	{r7, lr}
 8016bac:	b082      	sub	sp, #8
 8016bae:	af00      	add	r7, sp, #0
 8016bb0:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8016bb2:	687b      	ldr	r3, [r7, #4]
 8016bb4:	2b00      	cmp	r3, #0
 8016bb6:	d00e      	beq.n	8016bd6 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8016bb8:	687b      	ldr	r3, [r7, #4]
 8016bba:	2200      	movs	r2, #0
 8016bbc:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8016bbe:	687b      	ldr	r3, [r7, #4]
 8016bc0:	2200      	movs	r2, #0
 8016bc2:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8016bc4:	687b      	ldr	r3, [r7, #4]
 8016bc6:	2200      	movs	r2, #0
 8016bc8:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8016bca:	2300      	movs	r3, #0
 8016bcc:	2200      	movs	r2, #0
 8016bce:	2100      	movs	r1, #0
 8016bd0:	6878      	ldr	r0, [r7, #4]
 8016bd2:	f000 f889 	bl	8016ce8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8016bd6:	bf00      	nop
 8016bd8:	3708      	adds	r7, #8
 8016bda:	46bd      	mov	sp, r7
 8016bdc:	bd80      	pop	{r7, pc}

08016bde <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8016bde:	b580      	push	{r7, lr}
 8016be0:	b086      	sub	sp, #24
 8016be2:	af00      	add	r7, sp, #0
 8016be4:	4603      	mov	r3, r0
 8016be6:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8016be8:	2301      	movs	r3, #1
 8016bea:	617b      	str	r3, [r7, #20]
 8016bec:	2300      	movs	r3, #0
 8016bee:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8016bf0:	79fb      	ldrb	r3, [r7, #7]
 8016bf2:	461a      	mov	r2, r3
 8016bf4:	6939      	ldr	r1, [r7, #16]
 8016bf6:	6978      	ldr	r0, [r7, #20]
 8016bf8:	f7ff ff79 	bl	8016aee <xQueueGenericCreate>
 8016bfc:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8016bfe:	68f8      	ldr	r0, [r7, #12]
 8016c00:	f7ff ffd3 	bl	8016baa <prvInitialiseMutex>

		return xNewQueue;
 8016c04:	68fb      	ldr	r3, [r7, #12]
	}
 8016c06:	4618      	mov	r0, r3
 8016c08:	3718      	adds	r7, #24
 8016c0a:	46bd      	mov	sp, r7
 8016c0c:	bd80      	pop	{r7, pc}

08016c0e <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8016c0e:	b590      	push	{r4, r7, lr}
 8016c10:	b087      	sub	sp, #28
 8016c12:	af00      	add	r7, sp, #0
 8016c14:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8016c16:	687b      	ldr	r3, [r7, #4]
 8016c18:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8016c1a:	693b      	ldr	r3, [r7, #16]
 8016c1c:	2b00      	cmp	r3, #0
 8016c1e:	d10b      	bne.n	8016c38 <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 8016c20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016c24:	f383 8811 	msr	BASEPRI, r3
 8016c28:	f3bf 8f6f 	isb	sy
 8016c2c:	f3bf 8f4f 	dsb	sy
 8016c30:	60fb      	str	r3, [r7, #12]
}
 8016c32:	bf00      	nop
 8016c34:	bf00      	nop
 8016c36:	e7fd      	b.n	8016c34 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8016c38:	693b      	ldr	r3, [r7, #16]
 8016c3a:	689c      	ldr	r4, [r3, #8]
 8016c3c:	f001 feec 	bl	8018a18 <xTaskGetCurrentTaskHandle>
 8016c40:	4603      	mov	r3, r0
 8016c42:	429c      	cmp	r4, r3
 8016c44:	d111      	bne.n	8016c6a <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8016c46:	693b      	ldr	r3, [r7, #16]
 8016c48:	68db      	ldr	r3, [r3, #12]
 8016c4a:	1e5a      	subs	r2, r3, #1
 8016c4c:	693b      	ldr	r3, [r7, #16]
 8016c4e:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8016c50:	693b      	ldr	r3, [r7, #16]
 8016c52:	68db      	ldr	r3, [r3, #12]
 8016c54:	2b00      	cmp	r3, #0
 8016c56:	d105      	bne.n	8016c64 <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8016c58:	2300      	movs	r3, #0
 8016c5a:	2200      	movs	r2, #0
 8016c5c:	2100      	movs	r1, #0
 8016c5e:	6938      	ldr	r0, [r7, #16]
 8016c60:	f000 f842 	bl	8016ce8 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8016c64:	2301      	movs	r3, #1
 8016c66:	617b      	str	r3, [r7, #20]
 8016c68:	e001      	b.n	8016c6e <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8016c6a:	2300      	movs	r3, #0
 8016c6c:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8016c6e:	697b      	ldr	r3, [r7, #20]
	}
 8016c70:	4618      	mov	r0, r3
 8016c72:	371c      	adds	r7, #28
 8016c74:	46bd      	mov	sp, r7
 8016c76:	bd90      	pop	{r4, r7, pc}

08016c78 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8016c78:	b590      	push	{r4, r7, lr}
 8016c7a:	b087      	sub	sp, #28
 8016c7c:	af00      	add	r7, sp, #0
 8016c7e:	6078      	str	r0, [r7, #4]
 8016c80:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8016c82:	687b      	ldr	r3, [r7, #4]
 8016c84:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8016c86:	693b      	ldr	r3, [r7, #16]
 8016c88:	2b00      	cmp	r3, #0
 8016c8a:	d10b      	bne.n	8016ca4 <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 8016c8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016c90:	f383 8811 	msr	BASEPRI, r3
 8016c94:	f3bf 8f6f 	isb	sy
 8016c98:	f3bf 8f4f 	dsb	sy
 8016c9c:	60fb      	str	r3, [r7, #12]
}
 8016c9e:	bf00      	nop
 8016ca0:	bf00      	nop
 8016ca2:	e7fd      	b.n	8016ca0 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8016ca4:	693b      	ldr	r3, [r7, #16]
 8016ca6:	689c      	ldr	r4, [r3, #8]
 8016ca8:	f001 feb6 	bl	8018a18 <xTaskGetCurrentTaskHandle>
 8016cac:	4603      	mov	r3, r0
 8016cae:	429c      	cmp	r4, r3
 8016cb0:	d107      	bne.n	8016cc2 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8016cb2:	693b      	ldr	r3, [r7, #16]
 8016cb4:	68db      	ldr	r3, [r3, #12]
 8016cb6:	1c5a      	adds	r2, r3, #1
 8016cb8:	693b      	ldr	r3, [r7, #16]
 8016cba:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8016cbc:	2301      	movs	r3, #1
 8016cbe:	617b      	str	r3, [r7, #20]
 8016cc0:	e00c      	b.n	8016cdc <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8016cc2:	6839      	ldr	r1, [r7, #0]
 8016cc4:	6938      	ldr	r0, [r7, #16]
 8016cc6:	f000 fa91 	bl	80171ec <xQueueSemaphoreTake>
 8016cca:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8016ccc:	697b      	ldr	r3, [r7, #20]
 8016cce:	2b00      	cmp	r3, #0
 8016cd0:	d004      	beq.n	8016cdc <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8016cd2:	693b      	ldr	r3, [r7, #16]
 8016cd4:	68db      	ldr	r3, [r3, #12]
 8016cd6:	1c5a      	adds	r2, r3, #1
 8016cd8:	693b      	ldr	r3, [r7, #16]
 8016cda:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8016cdc:	697b      	ldr	r3, [r7, #20]
	}
 8016cde:	4618      	mov	r0, r3
 8016ce0:	371c      	adds	r7, #28
 8016ce2:	46bd      	mov	sp, r7
 8016ce4:	bd90      	pop	{r4, r7, pc}
	...

08016ce8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8016ce8:	b580      	push	{r7, lr}
 8016cea:	b08e      	sub	sp, #56	@ 0x38
 8016cec:	af00      	add	r7, sp, #0
 8016cee:	60f8      	str	r0, [r7, #12]
 8016cf0:	60b9      	str	r1, [r7, #8]
 8016cf2:	607a      	str	r2, [r7, #4]
 8016cf4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8016cf6:	2300      	movs	r3, #0
 8016cf8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8016cfa:	68fb      	ldr	r3, [r7, #12]
 8016cfc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8016cfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016d00:	2b00      	cmp	r3, #0
 8016d02:	d10b      	bne.n	8016d1c <xQueueGenericSend+0x34>
	__asm volatile
 8016d04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016d08:	f383 8811 	msr	BASEPRI, r3
 8016d0c:	f3bf 8f6f 	isb	sy
 8016d10:	f3bf 8f4f 	dsb	sy
 8016d14:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8016d16:	bf00      	nop
 8016d18:	bf00      	nop
 8016d1a:	e7fd      	b.n	8016d18 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8016d1c:	68bb      	ldr	r3, [r7, #8]
 8016d1e:	2b00      	cmp	r3, #0
 8016d20:	d103      	bne.n	8016d2a <xQueueGenericSend+0x42>
 8016d22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016d24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8016d26:	2b00      	cmp	r3, #0
 8016d28:	d101      	bne.n	8016d2e <xQueueGenericSend+0x46>
 8016d2a:	2301      	movs	r3, #1
 8016d2c:	e000      	b.n	8016d30 <xQueueGenericSend+0x48>
 8016d2e:	2300      	movs	r3, #0
 8016d30:	2b00      	cmp	r3, #0
 8016d32:	d10b      	bne.n	8016d4c <xQueueGenericSend+0x64>
	__asm volatile
 8016d34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016d38:	f383 8811 	msr	BASEPRI, r3
 8016d3c:	f3bf 8f6f 	isb	sy
 8016d40:	f3bf 8f4f 	dsb	sy
 8016d44:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8016d46:	bf00      	nop
 8016d48:	bf00      	nop
 8016d4a:	e7fd      	b.n	8016d48 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8016d4c:	683b      	ldr	r3, [r7, #0]
 8016d4e:	2b02      	cmp	r3, #2
 8016d50:	d103      	bne.n	8016d5a <xQueueGenericSend+0x72>
 8016d52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016d54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8016d56:	2b01      	cmp	r3, #1
 8016d58:	d101      	bne.n	8016d5e <xQueueGenericSend+0x76>
 8016d5a:	2301      	movs	r3, #1
 8016d5c:	e000      	b.n	8016d60 <xQueueGenericSend+0x78>
 8016d5e:	2300      	movs	r3, #0
 8016d60:	2b00      	cmp	r3, #0
 8016d62:	d10b      	bne.n	8016d7c <xQueueGenericSend+0x94>
	__asm volatile
 8016d64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016d68:	f383 8811 	msr	BASEPRI, r3
 8016d6c:	f3bf 8f6f 	isb	sy
 8016d70:	f3bf 8f4f 	dsb	sy
 8016d74:	623b      	str	r3, [r7, #32]
}
 8016d76:	bf00      	nop
 8016d78:	bf00      	nop
 8016d7a:	e7fd      	b.n	8016d78 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8016d7c:	f001 fe5c 	bl	8018a38 <xTaskGetSchedulerState>
 8016d80:	4603      	mov	r3, r0
 8016d82:	2b00      	cmp	r3, #0
 8016d84:	d102      	bne.n	8016d8c <xQueueGenericSend+0xa4>
 8016d86:	687b      	ldr	r3, [r7, #4]
 8016d88:	2b00      	cmp	r3, #0
 8016d8a:	d101      	bne.n	8016d90 <xQueueGenericSend+0xa8>
 8016d8c:	2301      	movs	r3, #1
 8016d8e:	e000      	b.n	8016d92 <xQueueGenericSend+0xaa>
 8016d90:	2300      	movs	r3, #0
 8016d92:	2b00      	cmp	r3, #0
 8016d94:	d10b      	bne.n	8016dae <xQueueGenericSend+0xc6>
	__asm volatile
 8016d96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016d9a:	f383 8811 	msr	BASEPRI, r3
 8016d9e:	f3bf 8f6f 	isb	sy
 8016da2:	f3bf 8f4f 	dsb	sy
 8016da6:	61fb      	str	r3, [r7, #28]
}
 8016da8:	bf00      	nop
 8016daa:	bf00      	nop
 8016dac:	e7fd      	b.n	8016daa <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8016dae:	f002 fd73 	bl	8019898 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8016db2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016db4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8016db6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016db8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8016dba:	429a      	cmp	r2, r3
 8016dbc:	d302      	bcc.n	8016dc4 <xQueueGenericSend+0xdc>
 8016dbe:	683b      	ldr	r3, [r7, #0]
 8016dc0:	2b02      	cmp	r3, #2
 8016dc2:	d129      	bne.n	8016e18 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8016dc4:	683a      	ldr	r2, [r7, #0]
 8016dc6:	68b9      	ldr	r1, [r7, #8]
 8016dc8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8016dca:	f000 fb37 	bl	801743c <prvCopyDataToQueue>
 8016dce:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8016dd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016dd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016dd4:	2b00      	cmp	r3, #0
 8016dd6:	d010      	beq.n	8016dfa <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8016dd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016dda:	3324      	adds	r3, #36	@ 0x24
 8016ddc:	4618      	mov	r0, r3
 8016dde:	f001 fb17 	bl	8018410 <xTaskRemoveFromEventList>
 8016de2:	4603      	mov	r3, r0
 8016de4:	2b00      	cmp	r3, #0
 8016de6:	d013      	beq.n	8016e10 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8016de8:	4b3f      	ldr	r3, [pc, #252]	@ (8016ee8 <xQueueGenericSend+0x200>)
 8016dea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8016dee:	601a      	str	r2, [r3, #0]
 8016df0:	f3bf 8f4f 	dsb	sy
 8016df4:	f3bf 8f6f 	isb	sy
 8016df8:	e00a      	b.n	8016e10 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8016dfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016dfc:	2b00      	cmp	r3, #0
 8016dfe:	d007      	beq.n	8016e10 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8016e00:	4b39      	ldr	r3, [pc, #228]	@ (8016ee8 <xQueueGenericSend+0x200>)
 8016e02:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8016e06:	601a      	str	r2, [r3, #0]
 8016e08:	f3bf 8f4f 	dsb	sy
 8016e0c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8016e10:	f002 fd74 	bl	80198fc <vPortExitCritical>
				return pdPASS;
 8016e14:	2301      	movs	r3, #1
 8016e16:	e063      	b.n	8016ee0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8016e18:	687b      	ldr	r3, [r7, #4]
 8016e1a:	2b00      	cmp	r3, #0
 8016e1c:	d103      	bne.n	8016e26 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8016e1e:	f002 fd6d 	bl	80198fc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8016e22:	2300      	movs	r3, #0
 8016e24:	e05c      	b.n	8016ee0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8016e26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016e28:	2b00      	cmp	r3, #0
 8016e2a:	d106      	bne.n	8016e3a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8016e2c:	f107 0314 	add.w	r3, r7, #20
 8016e30:	4618      	mov	r0, r3
 8016e32:	f001 fb53 	bl	80184dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8016e36:	2301      	movs	r3, #1
 8016e38:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8016e3a:	f002 fd5f 	bl	80198fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8016e3e:	f000 ff3f 	bl	8017cc0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8016e42:	f002 fd29 	bl	8019898 <vPortEnterCritical>
 8016e46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016e48:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8016e4c:	b25b      	sxtb	r3, r3
 8016e4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016e52:	d103      	bne.n	8016e5c <xQueueGenericSend+0x174>
 8016e54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016e56:	2200      	movs	r2, #0
 8016e58:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8016e5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016e5e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8016e62:	b25b      	sxtb	r3, r3
 8016e64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016e68:	d103      	bne.n	8016e72 <xQueueGenericSend+0x18a>
 8016e6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016e6c:	2200      	movs	r2, #0
 8016e6e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8016e72:	f002 fd43 	bl	80198fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8016e76:	1d3a      	adds	r2, r7, #4
 8016e78:	f107 0314 	add.w	r3, r7, #20
 8016e7c:	4611      	mov	r1, r2
 8016e7e:	4618      	mov	r0, r3
 8016e80:	f001 fb42 	bl	8018508 <xTaskCheckForTimeOut>
 8016e84:	4603      	mov	r3, r0
 8016e86:	2b00      	cmp	r3, #0
 8016e88:	d124      	bne.n	8016ed4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8016e8a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8016e8c:	f000 fbce 	bl	801762c <prvIsQueueFull>
 8016e90:	4603      	mov	r3, r0
 8016e92:	2b00      	cmp	r3, #0
 8016e94:	d018      	beq.n	8016ec8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8016e96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016e98:	3310      	adds	r3, #16
 8016e9a:	687a      	ldr	r2, [r7, #4]
 8016e9c:	4611      	mov	r1, r2
 8016e9e:	4618      	mov	r0, r3
 8016ea0:	f001 fa64 	bl	801836c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8016ea4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8016ea6:	f000 fb59 	bl	801755c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8016eaa:	f000 ff4f 	bl	8017d4c <xTaskResumeAll>
 8016eae:	4603      	mov	r3, r0
 8016eb0:	2b00      	cmp	r3, #0
 8016eb2:	f47f af7c 	bne.w	8016dae <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8016eb6:	4b0c      	ldr	r3, [pc, #48]	@ (8016ee8 <xQueueGenericSend+0x200>)
 8016eb8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8016ebc:	601a      	str	r2, [r3, #0]
 8016ebe:	f3bf 8f4f 	dsb	sy
 8016ec2:	f3bf 8f6f 	isb	sy
 8016ec6:	e772      	b.n	8016dae <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8016ec8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8016eca:	f000 fb47 	bl	801755c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8016ece:	f000 ff3d 	bl	8017d4c <xTaskResumeAll>
 8016ed2:	e76c      	b.n	8016dae <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8016ed4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8016ed6:	f000 fb41 	bl	801755c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8016eda:	f000 ff37 	bl	8017d4c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8016ede:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8016ee0:	4618      	mov	r0, r3
 8016ee2:	3738      	adds	r7, #56	@ 0x38
 8016ee4:	46bd      	mov	sp, r7
 8016ee6:	bd80      	pop	{r7, pc}
 8016ee8:	e000ed04 	.word	0xe000ed04

08016eec <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8016eec:	b580      	push	{r7, lr}
 8016eee:	b090      	sub	sp, #64	@ 0x40
 8016ef0:	af00      	add	r7, sp, #0
 8016ef2:	60f8      	str	r0, [r7, #12]
 8016ef4:	60b9      	str	r1, [r7, #8]
 8016ef6:	607a      	str	r2, [r7, #4]
 8016ef8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8016efa:	68fb      	ldr	r3, [r7, #12]
 8016efc:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8016efe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016f00:	2b00      	cmp	r3, #0
 8016f02:	d10b      	bne.n	8016f1c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8016f04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016f08:	f383 8811 	msr	BASEPRI, r3
 8016f0c:	f3bf 8f6f 	isb	sy
 8016f10:	f3bf 8f4f 	dsb	sy
 8016f14:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8016f16:	bf00      	nop
 8016f18:	bf00      	nop
 8016f1a:	e7fd      	b.n	8016f18 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8016f1c:	68bb      	ldr	r3, [r7, #8]
 8016f1e:	2b00      	cmp	r3, #0
 8016f20:	d103      	bne.n	8016f2a <xQueueGenericSendFromISR+0x3e>
 8016f22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016f24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8016f26:	2b00      	cmp	r3, #0
 8016f28:	d101      	bne.n	8016f2e <xQueueGenericSendFromISR+0x42>
 8016f2a:	2301      	movs	r3, #1
 8016f2c:	e000      	b.n	8016f30 <xQueueGenericSendFromISR+0x44>
 8016f2e:	2300      	movs	r3, #0
 8016f30:	2b00      	cmp	r3, #0
 8016f32:	d10b      	bne.n	8016f4c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8016f34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016f38:	f383 8811 	msr	BASEPRI, r3
 8016f3c:	f3bf 8f6f 	isb	sy
 8016f40:	f3bf 8f4f 	dsb	sy
 8016f44:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8016f46:	bf00      	nop
 8016f48:	bf00      	nop
 8016f4a:	e7fd      	b.n	8016f48 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8016f4c:	683b      	ldr	r3, [r7, #0]
 8016f4e:	2b02      	cmp	r3, #2
 8016f50:	d103      	bne.n	8016f5a <xQueueGenericSendFromISR+0x6e>
 8016f52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016f54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8016f56:	2b01      	cmp	r3, #1
 8016f58:	d101      	bne.n	8016f5e <xQueueGenericSendFromISR+0x72>
 8016f5a:	2301      	movs	r3, #1
 8016f5c:	e000      	b.n	8016f60 <xQueueGenericSendFromISR+0x74>
 8016f5e:	2300      	movs	r3, #0
 8016f60:	2b00      	cmp	r3, #0
 8016f62:	d10b      	bne.n	8016f7c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8016f64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016f68:	f383 8811 	msr	BASEPRI, r3
 8016f6c:	f3bf 8f6f 	isb	sy
 8016f70:	f3bf 8f4f 	dsb	sy
 8016f74:	623b      	str	r3, [r7, #32]
}
 8016f76:	bf00      	nop
 8016f78:	bf00      	nop
 8016f7a:	e7fd      	b.n	8016f78 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8016f7c:	f002 fe50 	bl	8019c20 <vPortValidateInterruptPriority>
	__asm volatile
 8016f80:	f3ef 8211 	mrs	r2, BASEPRI
 8016f84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016f88:	f383 8811 	msr	BASEPRI, r3
 8016f8c:	f3bf 8f6f 	isb	sy
 8016f90:	f3bf 8f4f 	dsb	sy
 8016f94:	61fa      	str	r2, [r7, #28]
 8016f96:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8016f98:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8016f9a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8016f9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016f9e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8016fa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016fa2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8016fa4:	429a      	cmp	r2, r3
 8016fa6:	d302      	bcc.n	8016fae <xQueueGenericSendFromISR+0xc2>
 8016fa8:	683b      	ldr	r3, [r7, #0]
 8016faa:	2b02      	cmp	r3, #2
 8016fac:	d12f      	bne.n	801700e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8016fae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016fb0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8016fb4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8016fb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016fba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016fbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8016fbe:	683a      	ldr	r2, [r7, #0]
 8016fc0:	68b9      	ldr	r1, [r7, #8]
 8016fc2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8016fc4:	f000 fa3a 	bl	801743c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8016fc8:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8016fcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016fd0:	d112      	bne.n	8016ff8 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8016fd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016fd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016fd6:	2b00      	cmp	r3, #0
 8016fd8:	d016      	beq.n	8017008 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8016fda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016fdc:	3324      	adds	r3, #36	@ 0x24
 8016fde:	4618      	mov	r0, r3
 8016fe0:	f001 fa16 	bl	8018410 <xTaskRemoveFromEventList>
 8016fe4:	4603      	mov	r3, r0
 8016fe6:	2b00      	cmp	r3, #0
 8016fe8:	d00e      	beq.n	8017008 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8016fea:	687b      	ldr	r3, [r7, #4]
 8016fec:	2b00      	cmp	r3, #0
 8016fee:	d00b      	beq.n	8017008 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8016ff0:	687b      	ldr	r3, [r7, #4]
 8016ff2:	2201      	movs	r2, #1
 8016ff4:	601a      	str	r2, [r3, #0]
 8016ff6:	e007      	b.n	8017008 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8016ff8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8016ffc:	3301      	adds	r3, #1
 8016ffe:	b2db      	uxtb	r3, r3
 8017000:	b25a      	sxtb	r2, r3
 8017002:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017004:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8017008:	2301      	movs	r3, #1
 801700a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 801700c:	e001      	b.n	8017012 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801700e:	2300      	movs	r3, #0
 8017010:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8017012:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017014:	617b      	str	r3, [r7, #20]
	__asm volatile
 8017016:	697b      	ldr	r3, [r7, #20]
 8017018:	f383 8811 	msr	BASEPRI, r3
}
 801701c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801701e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8017020:	4618      	mov	r0, r3
 8017022:	3740      	adds	r7, #64	@ 0x40
 8017024:	46bd      	mov	sp, r7
 8017026:	bd80      	pop	{r7, pc}

08017028 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8017028:	b580      	push	{r7, lr}
 801702a:	b08c      	sub	sp, #48	@ 0x30
 801702c:	af00      	add	r7, sp, #0
 801702e:	60f8      	str	r0, [r7, #12]
 8017030:	60b9      	str	r1, [r7, #8]
 8017032:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8017034:	2300      	movs	r3, #0
 8017036:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8017038:	68fb      	ldr	r3, [r7, #12]
 801703a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801703c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801703e:	2b00      	cmp	r3, #0
 8017040:	d10b      	bne.n	801705a <xQueueReceive+0x32>
	__asm volatile
 8017042:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017046:	f383 8811 	msr	BASEPRI, r3
 801704a:	f3bf 8f6f 	isb	sy
 801704e:	f3bf 8f4f 	dsb	sy
 8017052:	623b      	str	r3, [r7, #32]
}
 8017054:	bf00      	nop
 8017056:	bf00      	nop
 8017058:	e7fd      	b.n	8017056 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801705a:	68bb      	ldr	r3, [r7, #8]
 801705c:	2b00      	cmp	r3, #0
 801705e:	d103      	bne.n	8017068 <xQueueReceive+0x40>
 8017060:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017062:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8017064:	2b00      	cmp	r3, #0
 8017066:	d101      	bne.n	801706c <xQueueReceive+0x44>
 8017068:	2301      	movs	r3, #1
 801706a:	e000      	b.n	801706e <xQueueReceive+0x46>
 801706c:	2300      	movs	r3, #0
 801706e:	2b00      	cmp	r3, #0
 8017070:	d10b      	bne.n	801708a <xQueueReceive+0x62>
	__asm volatile
 8017072:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017076:	f383 8811 	msr	BASEPRI, r3
 801707a:	f3bf 8f6f 	isb	sy
 801707e:	f3bf 8f4f 	dsb	sy
 8017082:	61fb      	str	r3, [r7, #28]
}
 8017084:	bf00      	nop
 8017086:	bf00      	nop
 8017088:	e7fd      	b.n	8017086 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801708a:	f001 fcd5 	bl	8018a38 <xTaskGetSchedulerState>
 801708e:	4603      	mov	r3, r0
 8017090:	2b00      	cmp	r3, #0
 8017092:	d102      	bne.n	801709a <xQueueReceive+0x72>
 8017094:	687b      	ldr	r3, [r7, #4]
 8017096:	2b00      	cmp	r3, #0
 8017098:	d101      	bne.n	801709e <xQueueReceive+0x76>
 801709a:	2301      	movs	r3, #1
 801709c:	e000      	b.n	80170a0 <xQueueReceive+0x78>
 801709e:	2300      	movs	r3, #0
 80170a0:	2b00      	cmp	r3, #0
 80170a2:	d10b      	bne.n	80170bc <xQueueReceive+0x94>
	__asm volatile
 80170a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80170a8:	f383 8811 	msr	BASEPRI, r3
 80170ac:	f3bf 8f6f 	isb	sy
 80170b0:	f3bf 8f4f 	dsb	sy
 80170b4:	61bb      	str	r3, [r7, #24]
}
 80170b6:	bf00      	nop
 80170b8:	bf00      	nop
 80170ba:	e7fd      	b.n	80170b8 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80170bc:	f002 fbec 	bl	8019898 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80170c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80170c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80170c4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80170c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80170c8:	2b00      	cmp	r3, #0
 80170ca:	d01f      	beq.n	801710c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80170cc:	68b9      	ldr	r1, [r7, #8]
 80170ce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80170d0:	f000 fa1e 	bl	8017510 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80170d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80170d6:	1e5a      	subs	r2, r3, #1
 80170d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80170da:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80170dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80170de:	691b      	ldr	r3, [r3, #16]
 80170e0:	2b00      	cmp	r3, #0
 80170e2:	d00f      	beq.n	8017104 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80170e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80170e6:	3310      	adds	r3, #16
 80170e8:	4618      	mov	r0, r3
 80170ea:	f001 f991 	bl	8018410 <xTaskRemoveFromEventList>
 80170ee:	4603      	mov	r3, r0
 80170f0:	2b00      	cmp	r3, #0
 80170f2:	d007      	beq.n	8017104 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80170f4:	4b3c      	ldr	r3, [pc, #240]	@ (80171e8 <xQueueReceive+0x1c0>)
 80170f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80170fa:	601a      	str	r2, [r3, #0]
 80170fc:	f3bf 8f4f 	dsb	sy
 8017100:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8017104:	f002 fbfa 	bl	80198fc <vPortExitCritical>
				return pdPASS;
 8017108:	2301      	movs	r3, #1
 801710a:	e069      	b.n	80171e0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801710c:	687b      	ldr	r3, [r7, #4]
 801710e:	2b00      	cmp	r3, #0
 8017110:	d103      	bne.n	801711a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8017112:	f002 fbf3 	bl	80198fc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8017116:	2300      	movs	r3, #0
 8017118:	e062      	b.n	80171e0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 801711a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801711c:	2b00      	cmp	r3, #0
 801711e:	d106      	bne.n	801712e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8017120:	f107 0310 	add.w	r3, r7, #16
 8017124:	4618      	mov	r0, r3
 8017126:	f001 f9d9 	bl	80184dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801712a:	2301      	movs	r3, #1
 801712c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801712e:	f002 fbe5 	bl	80198fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8017132:	f000 fdc5 	bl	8017cc0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8017136:	f002 fbaf 	bl	8019898 <vPortEnterCritical>
 801713a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801713c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8017140:	b25b      	sxtb	r3, r3
 8017142:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017146:	d103      	bne.n	8017150 <xQueueReceive+0x128>
 8017148:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801714a:	2200      	movs	r2, #0
 801714c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8017150:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017152:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8017156:	b25b      	sxtb	r3, r3
 8017158:	f1b3 3fff 	cmp.w	r3, #4294967295
 801715c:	d103      	bne.n	8017166 <xQueueReceive+0x13e>
 801715e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017160:	2200      	movs	r2, #0
 8017162:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8017166:	f002 fbc9 	bl	80198fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801716a:	1d3a      	adds	r2, r7, #4
 801716c:	f107 0310 	add.w	r3, r7, #16
 8017170:	4611      	mov	r1, r2
 8017172:	4618      	mov	r0, r3
 8017174:	f001 f9c8 	bl	8018508 <xTaskCheckForTimeOut>
 8017178:	4603      	mov	r3, r0
 801717a:	2b00      	cmp	r3, #0
 801717c:	d123      	bne.n	80171c6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801717e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8017180:	f000 fa3e 	bl	8017600 <prvIsQueueEmpty>
 8017184:	4603      	mov	r3, r0
 8017186:	2b00      	cmp	r3, #0
 8017188:	d017      	beq.n	80171ba <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801718a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801718c:	3324      	adds	r3, #36	@ 0x24
 801718e:	687a      	ldr	r2, [r7, #4]
 8017190:	4611      	mov	r1, r2
 8017192:	4618      	mov	r0, r3
 8017194:	f001 f8ea 	bl	801836c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8017198:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801719a:	f000 f9df 	bl	801755c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801719e:	f000 fdd5 	bl	8017d4c <xTaskResumeAll>
 80171a2:	4603      	mov	r3, r0
 80171a4:	2b00      	cmp	r3, #0
 80171a6:	d189      	bne.n	80170bc <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80171a8:	4b0f      	ldr	r3, [pc, #60]	@ (80171e8 <xQueueReceive+0x1c0>)
 80171aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80171ae:	601a      	str	r2, [r3, #0]
 80171b0:	f3bf 8f4f 	dsb	sy
 80171b4:	f3bf 8f6f 	isb	sy
 80171b8:	e780      	b.n	80170bc <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80171ba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80171bc:	f000 f9ce 	bl	801755c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80171c0:	f000 fdc4 	bl	8017d4c <xTaskResumeAll>
 80171c4:	e77a      	b.n	80170bc <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80171c6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80171c8:	f000 f9c8 	bl	801755c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80171cc:	f000 fdbe 	bl	8017d4c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80171d0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80171d2:	f000 fa15 	bl	8017600 <prvIsQueueEmpty>
 80171d6:	4603      	mov	r3, r0
 80171d8:	2b00      	cmp	r3, #0
 80171da:	f43f af6f 	beq.w	80170bc <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80171de:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80171e0:	4618      	mov	r0, r3
 80171e2:	3730      	adds	r7, #48	@ 0x30
 80171e4:	46bd      	mov	sp, r7
 80171e6:	bd80      	pop	{r7, pc}
 80171e8:	e000ed04 	.word	0xe000ed04

080171ec <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80171ec:	b580      	push	{r7, lr}
 80171ee:	b08e      	sub	sp, #56	@ 0x38
 80171f0:	af00      	add	r7, sp, #0
 80171f2:	6078      	str	r0, [r7, #4]
 80171f4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80171f6:	2300      	movs	r3, #0
 80171f8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80171fa:	687b      	ldr	r3, [r7, #4]
 80171fc:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80171fe:	2300      	movs	r3, #0
 8017200:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8017202:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017204:	2b00      	cmp	r3, #0
 8017206:	d10b      	bne.n	8017220 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8017208:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801720c:	f383 8811 	msr	BASEPRI, r3
 8017210:	f3bf 8f6f 	isb	sy
 8017214:	f3bf 8f4f 	dsb	sy
 8017218:	623b      	str	r3, [r7, #32]
}
 801721a:	bf00      	nop
 801721c:	bf00      	nop
 801721e:	e7fd      	b.n	801721c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8017220:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017222:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8017224:	2b00      	cmp	r3, #0
 8017226:	d00b      	beq.n	8017240 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8017228:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801722c:	f383 8811 	msr	BASEPRI, r3
 8017230:	f3bf 8f6f 	isb	sy
 8017234:	f3bf 8f4f 	dsb	sy
 8017238:	61fb      	str	r3, [r7, #28]
}
 801723a:	bf00      	nop
 801723c:	bf00      	nop
 801723e:	e7fd      	b.n	801723c <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8017240:	f001 fbfa 	bl	8018a38 <xTaskGetSchedulerState>
 8017244:	4603      	mov	r3, r0
 8017246:	2b00      	cmp	r3, #0
 8017248:	d102      	bne.n	8017250 <xQueueSemaphoreTake+0x64>
 801724a:	683b      	ldr	r3, [r7, #0]
 801724c:	2b00      	cmp	r3, #0
 801724e:	d101      	bne.n	8017254 <xQueueSemaphoreTake+0x68>
 8017250:	2301      	movs	r3, #1
 8017252:	e000      	b.n	8017256 <xQueueSemaphoreTake+0x6a>
 8017254:	2300      	movs	r3, #0
 8017256:	2b00      	cmp	r3, #0
 8017258:	d10b      	bne.n	8017272 <xQueueSemaphoreTake+0x86>
	__asm volatile
 801725a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801725e:	f383 8811 	msr	BASEPRI, r3
 8017262:	f3bf 8f6f 	isb	sy
 8017266:	f3bf 8f4f 	dsb	sy
 801726a:	61bb      	str	r3, [r7, #24]
}
 801726c:	bf00      	nop
 801726e:	bf00      	nop
 8017270:	e7fd      	b.n	801726e <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8017272:	f002 fb11 	bl	8019898 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8017276:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017278:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801727a:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 801727c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801727e:	2b00      	cmp	r3, #0
 8017280:	d024      	beq.n	80172cc <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8017282:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017284:	1e5a      	subs	r2, r3, #1
 8017286:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017288:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801728a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801728c:	681b      	ldr	r3, [r3, #0]
 801728e:	2b00      	cmp	r3, #0
 8017290:	d104      	bne.n	801729c <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8017292:	f001 fe07 	bl	8018ea4 <pvTaskIncrementMutexHeldCount>
 8017296:	4602      	mov	r2, r0
 8017298:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801729a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801729c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801729e:	691b      	ldr	r3, [r3, #16]
 80172a0:	2b00      	cmp	r3, #0
 80172a2:	d00f      	beq.n	80172c4 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80172a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80172a6:	3310      	adds	r3, #16
 80172a8:	4618      	mov	r0, r3
 80172aa:	f001 f8b1 	bl	8018410 <xTaskRemoveFromEventList>
 80172ae:	4603      	mov	r3, r0
 80172b0:	2b00      	cmp	r3, #0
 80172b2:	d007      	beq.n	80172c4 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80172b4:	4b54      	ldr	r3, [pc, #336]	@ (8017408 <xQueueSemaphoreTake+0x21c>)
 80172b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80172ba:	601a      	str	r2, [r3, #0]
 80172bc:	f3bf 8f4f 	dsb	sy
 80172c0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80172c4:	f002 fb1a 	bl	80198fc <vPortExitCritical>
				return pdPASS;
 80172c8:	2301      	movs	r3, #1
 80172ca:	e098      	b.n	80173fe <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80172cc:	683b      	ldr	r3, [r7, #0]
 80172ce:	2b00      	cmp	r3, #0
 80172d0:	d112      	bne.n	80172f8 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80172d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80172d4:	2b00      	cmp	r3, #0
 80172d6:	d00b      	beq.n	80172f0 <xQueueSemaphoreTake+0x104>
	__asm volatile
 80172d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80172dc:	f383 8811 	msr	BASEPRI, r3
 80172e0:	f3bf 8f6f 	isb	sy
 80172e4:	f3bf 8f4f 	dsb	sy
 80172e8:	617b      	str	r3, [r7, #20]
}
 80172ea:	bf00      	nop
 80172ec:	bf00      	nop
 80172ee:	e7fd      	b.n	80172ec <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80172f0:	f002 fb04 	bl	80198fc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80172f4:	2300      	movs	r3, #0
 80172f6:	e082      	b.n	80173fe <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 80172f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80172fa:	2b00      	cmp	r3, #0
 80172fc:	d106      	bne.n	801730c <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80172fe:	f107 030c 	add.w	r3, r7, #12
 8017302:	4618      	mov	r0, r3
 8017304:	f001 f8ea 	bl	80184dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8017308:	2301      	movs	r3, #1
 801730a:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801730c:	f002 faf6 	bl	80198fc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8017310:	f000 fcd6 	bl	8017cc0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8017314:	f002 fac0 	bl	8019898 <vPortEnterCritical>
 8017318:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801731a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 801731e:	b25b      	sxtb	r3, r3
 8017320:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017324:	d103      	bne.n	801732e <xQueueSemaphoreTake+0x142>
 8017326:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017328:	2200      	movs	r2, #0
 801732a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801732e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017330:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8017334:	b25b      	sxtb	r3, r3
 8017336:	f1b3 3fff 	cmp.w	r3, #4294967295
 801733a:	d103      	bne.n	8017344 <xQueueSemaphoreTake+0x158>
 801733c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801733e:	2200      	movs	r2, #0
 8017340:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8017344:	f002 fada 	bl	80198fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8017348:	463a      	mov	r2, r7
 801734a:	f107 030c 	add.w	r3, r7, #12
 801734e:	4611      	mov	r1, r2
 8017350:	4618      	mov	r0, r3
 8017352:	f001 f8d9 	bl	8018508 <xTaskCheckForTimeOut>
 8017356:	4603      	mov	r3, r0
 8017358:	2b00      	cmp	r3, #0
 801735a:	d132      	bne.n	80173c2 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801735c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801735e:	f000 f94f 	bl	8017600 <prvIsQueueEmpty>
 8017362:	4603      	mov	r3, r0
 8017364:	2b00      	cmp	r3, #0
 8017366:	d026      	beq.n	80173b6 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8017368:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801736a:	681b      	ldr	r3, [r3, #0]
 801736c:	2b00      	cmp	r3, #0
 801736e:	d109      	bne.n	8017384 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8017370:	f002 fa92 	bl	8019898 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8017374:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017376:	689b      	ldr	r3, [r3, #8]
 8017378:	4618      	mov	r0, r3
 801737a:	f001 fb7b 	bl	8018a74 <xTaskPriorityInherit>
 801737e:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8017380:	f002 fabc 	bl	80198fc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8017384:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017386:	3324      	adds	r3, #36	@ 0x24
 8017388:	683a      	ldr	r2, [r7, #0]
 801738a:	4611      	mov	r1, r2
 801738c:	4618      	mov	r0, r3
 801738e:	f000 ffed 	bl	801836c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8017392:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8017394:	f000 f8e2 	bl	801755c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8017398:	f000 fcd8 	bl	8017d4c <xTaskResumeAll>
 801739c:	4603      	mov	r3, r0
 801739e:	2b00      	cmp	r3, #0
 80173a0:	f47f af67 	bne.w	8017272 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 80173a4:	4b18      	ldr	r3, [pc, #96]	@ (8017408 <xQueueSemaphoreTake+0x21c>)
 80173a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80173aa:	601a      	str	r2, [r3, #0]
 80173ac:	f3bf 8f4f 	dsb	sy
 80173b0:	f3bf 8f6f 	isb	sy
 80173b4:	e75d      	b.n	8017272 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80173b6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80173b8:	f000 f8d0 	bl	801755c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80173bc:	f000 fcc6 	bl	8017d4c <xTaskResumeAll>
 80173c0:	e757      	b.n	8017272 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80173c2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80173c4:	f000 f8ca 	bl	801755c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80173c8:	f000 fcc0 	bl	8017d4c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80173cc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80173ce:	f000 f917 	bl	8017600 <prvIsQueueEmpty>
 80173d2:	4603      	mov	r3, r0
 80173d4:	2b00      	cmp	r3, #0
 80173d6:	f43f af4c 	beq.w	8017272 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80173da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80173dc:	2b00      	cmp	r3, #0
 80173de:	d00d      	beq.n	80173fc <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 80173e0:	f002 fa5a 	bl	8019898 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80173e4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80173e6:	f000 f811 	bl	801740c <prvGetDisinheritPriorityAfterTimeout>
 80173ea:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80173ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80173ee:	689b      	ldr	r3, [r3, #8]
 80173f0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80173f2:	4618      	mov	r0, r3
 80173f4:	f001 fc16 	bl	8018c24 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80173f8:	f002 fa80 	bl	80198fc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80173fc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80173fe:	4618      	mov	r0, r3
 8017400:	3738      	adds	r7, #56	@ 0x38
 8017402:	46bd      	mov	sp, r7
 8017404:	bd80      	pop	{r7, pc}
 8017406:	bf00      	nop
 8017408:	e000ed04 	.word	0xe000ed04

0801740c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 801740c:	b480      	push	{r7}
 801740e:	b085      	sub	sp, #20
 8017410:	af00      	add	r7, sp, #0
 8017412:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8017414:	687b      	ldr	r3, [r7, #4]
 8017416:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017418:	2b00      	cmp	r3, #0
 801741a:	d006      	beq.n	801742a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 801741c:	687b      	ldr	r3, [r7, #4]
 801741e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017420:	681b      	ldr	r3, [r3, #0]
 8017422:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8017426:	60fb      	str	r3, [r7, #12]
 8017428:	e001      	b.n	801742e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 801742a:	2300      	movs	r3, #0
 801742c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 801742e:	68fb      	ldr	r3, [r7, #12]
	}
 8017430:	4618      	mov	r0, r3
 8017432:	3714      	adds	r7, #20
 8017434:	46bd      	mov	sp, r7
 8017436:	f85d 7b04 	ldr.w	r7, [sp], #4
 801743a:	4770      	bx	lr

0801743c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 801743c:	b580      	push	{r7, lr}
 801743e:	b086      	sub	sp, #24
 8017440:	af00      	add	r7, sp, #0
 8017442:	60f8      	str	r0, [r7, #12]
 8017444:	60b9      	str	r1, [r7, #8]
 8017446:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8017448:	2300      	movs	r3, #0
 801744a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801744c:	68fb      	ldr	r3, [r7, #12]
 801744e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017450:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8017452:	68fb      	ldr	r3, [r7, #12]
 8017454:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8017456:	2b00      	cmp	r3, #0
 8017458:	d10d      	bne.n	8017476 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801745a:	68fb      	ldr	r3, [r7, #12]
 801745c:	681b      	ldr	r3, [r3, #0]
 801745e:	2b00      	cmp	r3, #0
 8017460:	d14d      	bne.n	80174fe <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8017462:	68fb      	ldr	r3, [r7, #12]
 8017464:	689b      	ldr	r3, [r3, #8]
 8017466:	4618      	mov	r0, r3
 8017468:	f001 fb6c 	bl	8018b44 <xTaskPriorityDisinherit>
 801746c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 801746e:	68fb      	ldr	r3, [r7, #12]
 8017470:	2200      	movs	r2, #0
 8017472:	609a      	str	r2, [r3, #8]
 8017474:	e043      	b.n	80174fe <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8017476:	687b      	ldr	r3, [r7, #4]
 8017478:	2b00      	cmp	r3, #0
 801747a:	d119      	bne.n	80174b0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801747c:	68fb      	ldr	r3, [r7, #12]
 801747e:	6858      	ldr	r0, [r3, #4]
 8017480:	68fb      	ldr	r3, [r7, #12]
 8017482:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8017484:	461a      	mov	r2, r3
 8017486:	68b9      	ldr	r1, [r7, #8]
 8017488:	f007 fefc 	bl	801f284 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801748c:	68fb      	ldr	r3, [r7, #12]
 801748e:	685a      	ldr	r2, [r3, #4]
 8017490:	68fb      	ldr	r3, [r7, #12]
 8017492:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8017494:	441a      	add	r2, r3
 8017496:	68fb      	ldr	r3, [r7, #12]
 8017498:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801749a:	68fb      	ldr	r3, [r7, #12]
 801749c:	685a      	ldr	r2, [r3, #4]
 801749e:	68fb      	ldr	r3, [r7, #12]
 80174a0:	689b      	ldr	r3, [r3, #8]
 80174a2:	429a      	cmp	r2, r3
 80174a4:	d32b      	bcc.n	80174fe <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80174a6:	68fb      	ldr	r3, [r7, #12]
 80174a8:	681a      	ldr	r2, [r3, #0]
 80174aa:	68fb      	ldr	r3, [r7, #12]
 80174ac:	605a      	str	r2, [r3, #4]
 80174ae:	e026      	b.n	80174fe <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80174b0:	68fb      	ldr	r3, [r7, #12]
 80174b2:	68d8      	ldr	r0, [r3, #12]
 80174b4:	68fb      	ldr	r3, [r7, #12]
 80174b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80174b8:	461a      	mov	r2, r3
 80174ba:	68b9      	ldr	r1, [r7, #8]
 80174bc:	f007 fee2 	bl	801f284 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80174c0:	68fb      	ldr	r3, [r7, #12]
 80174c2:	68da      	ldr	r2, [r3, #12]
 80174c4:	68fb      	ldr	r3, [r7, #12]
 80174c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80174c8:	425b      	negs	r3, r3
 80174ca:	441a      	add	r2, r3
 80174cc:	68fb      	ldr	r3, [r7, #12]
 80174ce:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80174d0:	68fb      	ldr	r3, [r7, #12]
 80174d2:	68da      	ldr	r2, [r3, #12]
 80174d4:	68fb      	ldr	r3, [r7, #12]
 80174d6:	681b      	ldr	r3, [r3, #0]
 80174d8:	429a      	cmp	r2, r3
 80174da:	d207      	bcs.n	80174ec <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80174dc:	68fb      	ldr	r3, [r7, #12]
 80174de:	689a      	ldr	r2, [r3, #8]
 80174e0:	68fb      	ldr	r3, [r7, #12]
 80174e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80174e4:	425b      	negs	r3, r3
 80174e6:	441a      	add	r2, r3
 80174e8:	68fb      	ldr	r3, [r7, #12]
 80174ea:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80174ec:	687b      	ldr	r3, [r7, #4]
 80174ee:	2b02      	cmp	r3, #2
 80174f0:	d105      	bne.n	80174fe <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80174f2:	693b      	ldr	r3, [r7, #16]
 80174f4:	2b00      	cmp	r3, #0
 80174f6:	d002      	beq.n	80174fe <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80174f8:	693b      	ldr	r3, [r7, #16]
 80174fa:	3b01      	subs	r3, #1
 80174fc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80174fe:	693b      	ldr	r3, [r7, #16]
 8017500:	1c5a      	adds	r2, r3, #1
 8017502:	68fb      	ldr	r3, [r7, #12]
 8017504:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8017506:	697b      	ldr	r3, [r7, #20]
}
 8017508:	4618      	mov	r0, r3
 801750a:	3718      	adds	r7, #24
 801750c:	46bd      	mov	sp, r7
 801750e:	bd80      	pop	{r7, pc}

08017510 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8017510:	b580      	push	{r7, lr}
 8017512:	b082      	sub	sp, #8
 8017514:	af00      	add	r7, sp, #0
 8017516:	6078      	str	r0, [r7, #4]
 8017518:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 801751a:	687b      	ldr	r3, [r7, #4]
 801751c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801751e:	2b00      	cmp	r3, #0
 8017520:	d018      	beq.n	8017554 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8017522:	687b      	ldr	r3, [r7, #4]
 8017524:	68da      	ldr	r2, [r3, #12]
 8017526:	687b      	ldr	r3, [r7, #4]
 8017528:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801752a:	441a      	add	r2, r3
 801752c:	687b      	ldr	r3, [r7, #4]
 801752e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8017530:	687b      	ldr	r3, [r7, #4]
 8017532:	68da      	ldr	r2, [r3, #12]
 8017534:	687b      	ldr	r3, [r7, #4]
 8017536:	689b      	ldr	r3, [r3, #8]
 8017538:	429a      	cmp	r2, r3
 801753a:	d303      	bcc.n	8017544 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 801753c:	687b      	ldr	r3, [r7, #4]
 801753e:	681a      	ldr	r2, [r3, #0]
 8017540:	687b      	ldr	r3, [r7, #4]
 8017542:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8017544:	687b      	ldr	r3, [r7, #4]
 8017546:	68d9      	ldr	r1, [r3, #12]
 8017548:	687b      	ldr	r3, [r7, #4]
 801754a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801754c:	461a      	mov	r2, r3
 801754e:	6838      	ldr	r0, [r7, #0]
 8017550:	f007 fe98 	bl	801f284 <memcpy>
	}
}
 8017554:	bf00      	nop
 8017556:	3708      	adds	r7, #8
 8017558:	46bd      	mov	sp, r7
 801755a:	bd80      	pop	{r7, pc}

0801755c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 801755c:	b580      	push	{r7, lr}
 801755e:	b084      	sub	sp, #16
 8017560:	af00      	add	r7, sp, #0
 8017562:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8017564:	f002 f998 	bl	8019898 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8017568:	687b      	ldr	r3, [r7, #4]
 801756a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801756e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8017570:	e011      	b.n	8017596 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8017572:	687b      	ldr	r3, [r7, #4]
 8017574:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017576:	2b00      	cmp	r3, #0
 8017578:	d012      	beq.n	80175a0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801757a:	687b      	ldr	r3, [r7, #4]
 801757c:	3324      	adds	r3, #36	@ 0x24
 801757e:	4618      	mov	r0, r3
 8017580:	f000 ff46 	bl	8018410 <xTaskRemoveFromEventList>
 8017584:	4603      	mov	r3, r0
 8017586:	2b00      	cmp	r3, #0
 8017588:	d001      	beq.n	801758e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 801758a:	f001 f831 	bl	80185f0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 801758e:	7bfb      	ldrb	r3, [r7, #15]
 8017590:	3b01      	subs	r3, #1
 8017592:	b2db      	uxtb	r3, r3
 8017594:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8017596:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801759a:	2b00      	cmp	r3, #0
 801759c:	dce9      	bgt.n	8017572 <prvUnlockQueue+0x16>
 801759e:	e000      	b.n	80175a2 <prvUnlockQueue+0x46>
					break;
 80175a0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80175a2:	687b      	ldr	r3, [r7, #4]
 80175a4:	22ff      	movs	r2, #255	@ 0xff
 80175a6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80175aa:	f002 f9a7 	bl	80198fc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80175ae:	f002 f973 	bl	8019898 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80175b2:	687b      	ldr	r3, [r7, #4]
 80175b4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80175b8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80175ba:	e011      	b.n	80175e0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80175bc:	687b      	ldr	r3, [r7, #4]
 80175be:	691b      	ldr	r3, [r3, #16]
 80175c0:	2b00      	cmp	r3, #0
 80175c2:	d012      	beq.n	80175ea <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80175c4:	687b      	ldr	r3, [r7, #4]
 80175c6:	3310      	adds	r3, #16
 80175c8:	4618      	mov	r0, r3
 80175ca:	f000 ff21 	bl	8018410 <xTaskRemoveFromEventList>
 80175ce:	4603      	mov	r3, r0
 80175d0:	2b00      	cmp	r3, #0
 80175d2:	d001      	beq.n	80175d8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80175d4:	f001 f80c 	bl	80185f0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80175d8:	7bbb      	ldrb	r3, [r7, #14]
 80175da:	3b01      	subs	r3, #1
 80175dc:	b2db      	uxtb	r3, r3
 80175de:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80175e0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80175e4:	2b00      	cmp	r3, #0
 80175e6:	dce9      	bgt.n	80175bc <prvUnlockQueue+0x60>
 80175e8:	e000      	b.n	80175ec <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80175ea:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80175ec:	687b      	ldr	r3, [r7, #4]
 80175ee:	22ff      	movs	r2, #255	@ 0xff
 80175f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80175f4:	f002 f982 	bl	80198fc <vPortExitCritical>
}
 80175f8:	bf00      	nop
 80175fa:	3710      	adds	r7, #16
 80175fc:	46bd      	mov	sp, r7
 80175fe:	bd80      	pop	{r7, pc}

08017600 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8017600:	b580      	push	{r7, lr}
 8017602:	b084      	sub	sp, #16
 8017604:	af00      	add	r7, sp, #0
 8017606:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8017608:	f002 f946 	bl	8019898 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 801760c:	687b      	ldr	r3, [r7, #4]
 801760e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017610:	2b00      	cmp	r3, #0
 8017612:	d102      	bne.n	801761a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8017614:	2301      	movs	r3, #1
 8017616:	60fb      	str	r3, [r7, #12]
 8017618:	e001      	b.n	801761e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 801761a:	2300      	movs	r3, #0
 801761c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801761e:	f002 f96d 	bl	80198fc <vPortExitCritical>

	return xReturn;
 8017622:	68fb      	ldr	r3, [r7, #12]
}
 8017624:	4618      	mov	r0, r3
 8017626:	3710      	adds	r7, #16
 8017628:	46bd      	mov	sp, r7
 801762a:	bd80      	pop	{r7, pc}

0801762c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 801762c:	b580      	push	{r7, lr}
 801762e:	b084      	sub	sp, #16
 8017630:	af00      	add	r7, sp, #0
 8017632:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8017634:	f002 f930 	bl	8019898 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8017638:	687b      	ldr	r3, [r7, #4]
 801763a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801763c:	687b      	ldr	r3, [r7, #4]
 801763e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017640:	429a      	cmp	r2, r3
 8017642:	d102      	bne.n	801764a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8017644:	2301      	movs	r3, #1
 8017646:	60fb      	str	r3, [r7, #12]
 8017648:	e001      	b.n	801764e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 801764a:	2300      	movs	r3, #0
 801764c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801764e:	f002 f955 	bl	80198fc <vPortExitCritical>

	return xReturn;
 8017652:	68fb      	ldr	r3, [r7, #12]
}
 8017654:	4618      	mov	r0, r3
 8017656:	3710      	adds	r7, #16
 8017658:	46bd      	mov	sp, r7
 801765a:	bd80      	pop	{r7, pc}

0801765c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 801765c:	b480      	push	{r7}
 801765e:	b085      	sub	sp, #20
 8017660:	af00      	add	r7, sp, #0
 8017662:	6078      	str	r0, [r7, #4]
 8017664:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8017666:	2300      	movs	r3, #0
 8017668:	60fb      	str	r3, [r7, #12]
 801766a:	e014      	b.n	8017696 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 801766c:	4a0f      	ldr	r2, [pc, #60]	@ (80176ac <vQueueAddToRegistry+0x50>)
 801766e:	68fb      	ldr	r3, [r7, #12]
 8017670:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8017674:	2b00      	cmp	r3, #0
 8017676:	d10b      	bne.n	8017690 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8017678:	490c      	ldr	r1, [pc, #48]	@ (80176ac <vQueueAddToRegistry+0x50>)
 801767a:	68fb      	ldr	r3, [r7, #12]
 801767c:	683a      	ldr	r2, [r7, #0]
 801767e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8017682:	4a0a      	ldr	r2, [pc, #40]	@ (80176ac <vQueueAddToRegistry+0x50>)
 8017684:	68fb      	ldr	r3, [r7, #12]
 8017686:	00db      	lsls	r3, r3, #3
 8017688:	4413      	add	r3, r2
 801768a:	687a      	ldr	r2, [r7, #4]
 801768c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 801768e:	e006      	b.n	801769e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8017690:	68fb      	ldr	r3, [r7, #12]
 8017692:	3301      	adds	r3, #1
 8017694:	60fb      	str	r3, [r7, #12]
 8017696:	68fb      	ldr	r3, [r7, #12]
 8017698:	2b07      	cmp	r3, #7
 801769a:	d9e7      	bls.n	801766c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 801769c:	bf00      	nop
 801769e:	bf00      	nop
 80176a0:	3714      	adds	r7, #20
 80176a2:	46bd      	mov	sp, r7
 80176a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176a8:	4770      	bx	lr
 80176aa:	bf00      	nop
 80176ac:	24000c30 	.word	0x24000c30

080176b0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80176b0:	b580      	push	{r7, lr}
 80176b2:	b086      	sub	sp, #24
 80176b4:	af00      	add	r7, sp, #0
 80176b6:	60f8      	str	r0, [r7, #12]
 80176b8:	60b9      	str	r1, [r7, #8]
 80176ba:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80176bc:	68fb      	ldr	r3, [r7, #12]
 80176be:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80176c0:	f002 f8ea 	bl	8019898 <vPortEnterCritical>
 80176c4:	697b      	ldr	r3, [r7, #20]
 80176c6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80176ca:	b25b      	sxtb	r3, r3
 80176cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80176d0:	d103      	bne.n	80176da <vQueueWaitForMessageRestricted+0x2a>
 80176d2:	697b      	ldr	r3, [r7, #20]
 80176d4:	2200      	movs	r2, #0
 80176d6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80176da:	697b      	ldr	r3, [r7, #20]
 80176dc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80176e0:	b25b      	sxtb	r3, r3
 80176e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80176e6:	d103      	bne.n	80176f0 <vQueueWaitForMessageRestricted+0x40>
 80176e8:	697b      	ldr	r3, [r7, #20]
 80176ea:	2200      	movs	r2, #0
 80176ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80176f0:	f002 f904 	bl	80198fc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80176f4:	697b      	ldr	r3, [r7, #20]
 80176f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80176f8:	2b00      	cmp	r3, #0
 80176fa:	d106      	bne.n	801770a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80176fc:	697b      	ldr	r3, [r7, #20]
 80176fe:	3324      	adds	r3, #36	@ 0x24
 8017700:	687a      	ldr	r2, [r7, #4]
 8017702:	68b9      	ldr	r1, [r7, #8]
 8017704:	4618      	mov	r0, r3
 8017706:	f000 fe57 	bl	80183b8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 801770a:	6978      	ldr	r0, [r7, #20]
 801770c:	f7ff ff26 	bl	801755c <prvUnlockQueue>
	}
 8017710:	bf00      	nop
 8017712:	3718      	adds	r7, #24
 8017714:	46bd      	mov	sp, r7
 8017716:	bd80      	pop	{r7, pc}

08017718 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8017718:	b580      	push	{r7, lr}
 801771a:	b08e      	sub	sp, #56	@ 0x38
 801771c:	af04      	add	r7, sp, #16
 801771e:	60f8      	str	r0, [r7, #12]
 8017720:	60b9      	str	r1, [r7, #8]
 8017722:	607a      	str	r2, [r7, #4]
 8017724:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8017726:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017728:	2b00      	cmp	r3, #0
 801772a:	d10b      	bne.n	8017744 <xTaskCreateStatic+0x2c>
	__asm volatile
 801772c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017730:	f383 8811 	msr	BASEPRI, r3
 8017734:	f3bf 8f6f 	isb	sy
 8017738:	f3bf 8f4f 	dsb	sy
 801773c:	623b      	str	r3, [r7, #32]
}
 801773e:	bf00      	nop
 8017740:	bf00      	nop
 8017742:	e7fd      	b.n	8017740 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8017744:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017746:	2b00      	cmp	r3, #0
 8017748:	d10b      	bne.n	8017762 <xTaskCreateStatic+0x4a>
	__asm volatile
 801774a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801774e:	f383 8811 	msr	BASEPRI, r3
 8017752:	f3bf 8f6f 	isb	sy
 8017756:	f3bf 8f4f 	dsb	sy
 801775a:	61fb      	str	r3, [r7, #28]
}
 801775c:	bf00      	nop
 801775e:	bf00      	nop
 8017760:	e7fd      	b.n	801775e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8017762:	23b0      	movs	r3, #176	@ 0xb0
 8017764:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8017766:	693b      	ldr	r3, [r7, #16]
 8017768:	2bb0      	cmp	r3, #176	@ 0xb0
 801776a:	d00b      	beq.n	8017784 <xTaskCreateStatic+0x6c>
	__asm volatile
 801776c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017770:	f383 8811 	msr	BASEPRI, r3
 8017774:	f3bf 8f6f 	isb	sy
 8017778:	f3bf 8f4f 	dsb	sy
 801777c:	61bb      	str	r3, [r7, #24]
}
 801777e:	bf00      	nop
 8017780:	bf00      	nop
 8017782:	e7fd      	b.n	8017780 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8017784:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8017786:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017788:	2b00      	cmp	r3, #0
 801778a:	d01e      	beq.n	80177ca <xTaskCreateStatic+0xb2>
 801778c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801778e:	2b00      	cmp	r3, #0
 8017790:	d01b      	beq.n	80177ca <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8017792:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017794:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8017796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017798:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801779a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 801779c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801779e:	2202      	movs	r2, #2
 80177a0:	f883 20a9 	strb.w	r2, [r3, #169]	@ 0xa9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80177a4:	2300      	movs	r3, #0
 80177a6:	9303      	str	r3, [sp, #12]
 80177a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80177aa:	9302      	str	r3, [sp, #8]
 80177ac:	f107 0314 	add.w	r3, r7, #20
 80177b0:	9301      	str	r3, [sp, #4]
 80177b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80177b4:	9300      	str	r3, [sp, #0]
 80177b6:	683b      	ldr	r3, [r7, #0]
 80177b8:	687a      	ldr	r2, [r7, #4]
 80177ba:	68b9      	ldr	r1, [r7, #8]
 80177bc:	68f8      	ldr	r0, [r7, #12]
 80177be:	f000 f851 	bl	8017864 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80177c2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80177c4:	f000 f8fc 	bl	80179c0 <prvAddNewTaskToReadyList>
 80177c8:	e001      	b.n	80177ce <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80177ca:	2300      	movs	r3, #0
 80177cc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80177ce:	697b      	ldr	r3, [r7, #20]
	}
 80177d0:	4618      	mov	r0, r3
 80177d2:	3728      	adds	r7, #40	@ 0x28
 80177d4:	46bd      	mov	sp, r7
 80177d6:	bd80      	pop	{r7, pc}

080177d8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80177d8:	b580      	push	{r7, lr}
 80177da:	b08c      	sub	sp, #48	@ 0x30
 80177dc:	af04      	add	r7, sp, #16
 80177de:	60f8      	str	r0, [r7, #12]
 80177e0:	60b9      	str	r1, [r7, #8]
 80177e2:	603b      	str	r3, [r7, #0]
 80177e4:	4613      	mov	r3, r2
 80177e6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80177e8:	88fb      	ldrh	r3, [r7, #6]
 80177ea:	009b      	lsls	r3, r3, #2
 80177ec:	4618      	mov	r0, r3
 80177ee:	f002 fa59 	bl	8019ca4 <pvPortMalloc>
 80177f2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80177f4:	697b      	ldr	r3, [r7, #20]
 80177f6:	2b00      	cmp	r3, #0
 80177f8:	d00e      	beq.n	8017818 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80177fa:	20b0      	movs	r0, #176	@ 0xb0
 80177fc:	f002 fa52 	bl	8019ca4 <pvPortMalloc>
 8017800:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8017802:	69fb      	ldr	r3, [r7, #28]
 8017804:	2b00      	cmp	r3, #0
 8017806:	d003      	beq.n	8017810 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8017808:	69fb      	ldr	r3, [r7, #28]
 801780a:	697a      	ldr	r2, [r7, #20]
 801780c:	631a      	str	r2, [r3, #48]	@ 0x30
 801780e:	e005      	b.n	801781c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8017810:	6978      	ldr	r0, [r7, #20]
 8017812:	f002 fb1b 	bl	8019e4c <vPortFree>
 8017816:	e001      	b.n	801781c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8017818:	2300      	movs	r3, #0
 801781a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 801781c:	69fb      	ldr	r3, [r7, #28]
 801781e:	2b00      	cmp	r3, #0
 8017820:	d017      	beq.n	8017852 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8017822:	69fb      	ldr	r3, [r7, #28]
 8017824:	2200      	movs	r2, #0
 8017826:	f883 20a9 	strb.w	r2, [r3, #169]	@ 0xa9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801782a:	88fa      	ldrh	r2, [r7, #6]
 801782c:	2300      	movs	r3, #0
 801782e:	9303      	str	r3, [sp, #12]
 8017830:	69fb      	ldr	r3, [r7, #28]
 8017832:	9302      	str	r3, [sp, #8]
 8017834:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017836:	9301      	str	r3, [sp, #4]
 8017838:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801783a:	9300      	str	r3, [sp, #0]
 801783c:	683b      	ldr	r3, [r7, #0]
 801783e:	68b9      	ldr	r1, [r7, #8]
 8017840:	68f8      	ldr	r0, [r7, #12]
 8017842:	f000 f80f 	bl	8017864 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8017846:	69f8      	ldr	r0, [r7, #28]
 8017848:	f000 f8ba 	bl	80179c0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801784c:	2301      	movs	r3, #1
 801784e:	61bb      	str	r3, [r7, #24]
 8017850:	e002      	b.n	8017858 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8017852:	f04f 33ff 	mov.w	r3, #4294967295
 8017856:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8017858:	69bb      	ldr	r3, [r7, #24]
	}
 801785a:	4618      	mov	r0, r3
 801785c:	3720      	adds	r7, #32
 801785e:	46bd      	mov	sp, r7
 8017860:	bd80      	pop	{r7, pc}
	...

08017864 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8017864:	b580      	push	{r7, lr}
 8017866:	b088      	sub	sp, #32
 8017868:	af00      	add	r7, sp, #0
 801786a:	60f8      	str	r0, [r7, #12]
 801786c:	60b9      	str	r1, [r7, #8]
 801786e:	607a      	str	r2, [r7, #4]
 8017870:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8017872:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017874:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8017876:	687b      	ldr	r3, [r7, #4]
 8017878:	009b      	lsls	r3, r3, #2
 801787a:	461a      	mov	r2, r3
 801787c:	21a5      	movs	r1, #165	@ 0xa5
 801787e:	f007 fc47 	bl	801f110 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8017882:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017884:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8017886:	6879      	ldr	r1, [r7, #4]
 8017888:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 801788c:	440b      	add	r3, r1
 801788e:	009b      	lsls	r3, r3, #2
 8017890:	4413      	add	r3, r2
 8017892:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8017894:	69bb      	ldr	r3, [r7, #24]
 8017896:	f023 0307 	bic.w	r3, r3, #7
 801789a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 801789c:	69bb      	ldr	r3, [r7, #24]
 801789e:	f003 0307 	and.w	r3, r3, #7
 80178a2:	2b00      	cmp	r3, #0
 80178a4:	d00b      	beq.n	80178be <prvInitialiseNewTask+0x5a>
	__asm volatile
 80178a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80178aa:	f383 8811 	msr	BASEPRI, r3
 80178ae:	f3bf 8f6f 	isb	sy
 80178b2:	f3bf 8f4f 	dsb	sy
 80178b6:	617b      	str	r3, [r7, #20]
}
 80178b8:	bf00      	nop
 80178ba:	bf00      	nop
 80178bc:	e7fd      	b.n	80178ba <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80178be:	68bb      	ldr	r3, [r7, #8]
 80178c0:	2b00      	cmp	r3, #0
 80178c2:	d01f      	beq.n	8017904 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80178c4:	2300      	movs	r3, #0
 80178c6:	61fb      	str	r3, [r7, #28]
 80178c8:	e012      	b.n	80178f0 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80178ca:	68ba      	ldr	r2, [r7, #8]
 80178cc:	69fb      	ldr	r3, [r7, #28]
 80178ce:	4413      	add	r3, r2
 80178d0:	7819      	ldrb	r1, [r3, #0]
 80178d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80178d4:	69fb      	ldr	r3, [r7, #28]
 80178d6:	4413      	add	r3, r2
 80178d8:	3334      	adds	r3, #52	@ 0x34
 80178da:	460a      	mov	r2, r1
 80178dc:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80178de:	68ba      	ldr	r2, [r7, #8]
 80178e0:	69fb      	ldr	r3, [r7, #28]
 80178e2:	4413      	add	r3, r2
 80178e4:	781b      	ldrb	r3, [r3, #0]
 80178e6:	2b00      	cmp	r3, #0
 80178e8:	d006      	beq.n	80178f8 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80178ea:	69fb      	ldr	r3, [r7, #28]
 80178ec:	3301      	adds	r3, #1
 80178ee:	61fb      	str	r3, [r7, #28]
 80178f0:	69fb      	ldr	r3, [r7, #28]
 80178f2:	2b0f      	cmp	r3, #15
 80178f4:	d9e9      	bls.n	80178ca <prvInitialiseNewTask+0x66>
 80178f6:	e000      	b.n	80178fa <prvInitialiseNewTask+0x96>
			{
				break;
 80178f8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80178fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80178fc:	2200      	movs	r2, #0
 80178fe:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8017902:	e003      	b.n	801790c <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8017904:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017906:	2200      	movs	r2, #0
 8017908:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801790c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801790e:	2b37      	cmp	r3, #55	@ 0x37
 8017910:	d901      	bls.n	8017916 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8017912:	2337      	movs	r3, #55	@ 0x37
 8017914:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8017916:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017918:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801791a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801791c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801791e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8017920:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8017922:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017924:	2200      	movs	r2, #0
 8017926:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8017928:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801792a:	3304      	adds	r3, #4
 801792c:	4618      	mov	r0, r3
 801792e:	f7fe ff63 	bl	80167f8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8017932:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017934:	3318      	adds	r3, #24
 8017936:	4618      	mov	r0, r3
 8017938:	f7fe ff5e 	bl	80167f8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801793c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801793e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8017940:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017942:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017944:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8017948:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801794a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801794c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801794e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8017950:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 8017952:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017954:	2200      	movs	r2, #0
 8017956:	655a      	str	r2, [r3, #84]	@ 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8017958:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801795a:	2200      	movs	r2, #0
 801795c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8017960:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017962:	2200      	movs	r2, #0
 8017964:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8017968:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801796a:	3358      	adds	r3, #88	@ 0x58
 801796c:	224c      	movs	r2, #76	@ 0x4c
 801796e:	2100      	movs	r1, #0
 8017970:	4618      	mov	r0, r3
 8017972:	f007 fbcd 	bl	801f110 <memset>
 8017976:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017978:	4a0e      	ldr	r2, [pc, #56]	@ (80179b4 <prvInitialiseNewTask+0x150>)
 801797a:	65da      	str	r2, [r3, #92]	@ 0x5c
 801797c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801797e:	4a0e      	ldr	r2, [pc, #56]	@ (80179b8 <prvInitialiseNewTask+0x154>)
 8017980:	661a      	str	r2, [r3, #96]	@ 0x60
 8017982:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017984:	4a0d      	ldr	r2, [pc, #52]	@ (80179bc <prvInitialiseNewTask+0x158>)
 8017986:	665a      	str	r2, [r3, #100]	@ 0x64
	}
	#endif

	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		pxNewTCB->ucDelayAborted = pdFALSE;
 8017988:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801798a:	2200      	movs	r2, #0
 801798c:	f883 20aa 	strb.w	r2, [r3, #170]	@ 0xaa
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8017990:	683a      	ldr	r2, [r7, #0]
 8017992:	68f9      	ldr	r1, [r7, #12]
 8017994:	69b8      	ldr	r0, [r7, #24]
 8017996:	f001 fe4f 	bl	8019638 <pxPortInitialiseStack>
 801799a:	4602      	mov	r2, r0
 801799c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801799e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80179a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80179a2:	2b00      	cmp	r3, #0
 80179a4:	d002      	beq.n	80179ac <prvInitialiseNewTask+0x148>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80179a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80179a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80179aa:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80179ac:	bf00      	nop
 80179ae:	3720      	adds	r7, #32
 80179b0:	46bd      	mov	sp, r7
 80179b2:	bd80      	pop	{r7, pc}
 80179b4:	24009a7c 	.word	0x24009a7c
 80179b8:	24009ae4 	.word	0x24009ae4
 80179bc:	24009b4c 	.word	0x24009b4c

080179c0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80179c0:	b580      	push	{r7, lr}
 80179c2:	b082      	sub	sp, #8
 80179c4:	af00      	add	r7, sp, #0
 80179c6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80179c8:	f001 ff66 	bl	8019898 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80179cc:	4b2d      	ldr	r3, [pc, #180]	@ (8017a84 <prvAddNewTaskToReadyList+0xc4>)
 80179ce:	681b      	ldr	r3, [r3, #0]
 80179d0:	3301      	adds	r3, #1
 80179d2:	4a2c      	ldr	r2, [pc, #176]	@ (8017a84 <prvAddNewTaskToReadyList+0xc4>)
 80179d4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80179d6:	4b2c      	ldr	r3, [pc, #176]	@ (8017a88 <prvAddNewTaskToReadyList+0xc8>)
 80179d8:	681b      	ldr	r3, [r3, #0]
 80179da:	2b00      	cmp	r3, #0
 80179dc:	d109      	bne.n	80179f2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80179de:	4a2a      	ldr	r2, [pc, #168]	@ (8017a88 <prvAddNewTaskToReadyList+0xc8>)
 80179e0:	687b      	ldr	r3, [r7, #4]
 80179e2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80179e4:	4b27      	ldr	r3, [pc, #156]	@ (8017a84 <prvAddNewTaskToReadyList+0xc4>)
 80179e6:	681b      	ldr	r3, [r3, #0]
 80179e8:	2b01      	cmp	r3, #1
 80179ea:	d110      	bne.n	8017a0e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80179ec:	f000 fe7c 	bl	80186e8 <prvInitialiseTaskLists>
 80179f0:	e00d      	b.n	8017a0e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80179f2:	4b26      	ldr	r3, [pc, #152]	@ (8017a8c <prvAddNewTaskToReadyList+0xcc>)
 80179f4:	681b      	ldr	r3, [r3, #0]
 80179f6:	2b00      	cmp	r3, #0
 80179f8:	d109      	bne.n	8017a0e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80179fa:	4b23      	ldr	r3, [pc, #140]	@ (8017a88 <prvAddNewTaskToReadyList+0xc8>)
 80179fc:	681b      	ldr	r3, [r3, #0]
 80179fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8017a00:	687b      	ldr	r3, [r7, #4]
 8017a02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017a04:	429a      	cmp	r2, r3
 8017a06:	d802      	bhi.n	8017a0e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8017a08:	4a1f      	ldr	r2, [pc, #124]	@ (8017a88 <prvAddNewTaskToReadyList+0xc8>)
 8017a0a:	687b      	ldr	r3, [r7, #4]
 8017a0c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8017a0e:	4b20      	ldr	r3, [pc, #128]	@ (8017a90 <prvAddNewTaskToReadyList+0xd0>)
 8017a10:	681b      	ldr	r3, [r3, #0]
 8017a12:	3301      	adds	r3, #1
 8017a14:	4a1e      	ldr	r2, [pc, #120]	@ (8017a90 <prvAddNewTaskToReadyList+0xd0>)
 8017a16:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8017a18:	4b1d      	ldr	r3, [pc, #116]	@ (8017a90 <prvAddNewTaskToReadyList+0xd0>)
 8017a1a:	681a      	ldr	r2, [r3, #0]
 8017a1c:	687b      	ldr	r3, [r7, #4]
 8017a1e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8017a20:	687b      	ldr	r3, [r7, #4]
 8017a22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8017a24:	4b1b      	ldr	r3, [pc, #108]	@ (8017a94 <prvAddNewTaskToReadyList+0xd4>)
 8017a26:	681b      	ldr	r3, [r3, #0]
 8017a28:	429a      	cmp	r2, r3
 8017a2a:	d903      	bls.n	8017a34 <prvAddNewTaskToReadyList+0x74>
 8017a2c:	687b      	ldr	r3, [r7, #4]
 8017a2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017a30:	4a18      	ldr	r2, [pc, #96]	@ (8017a94 <prvAddNewTaskToReadyList+0xd4>)
 8017a32:	6013      	str	r3, [r2, #0]
 8017a34:	687b      	ldr	r3, [r7, #4]
 8017a36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8017a38:	4613      	mov	r3, r2
 8017a3a:	009b      	lsls	r3, r3, #2
 8017a3c:	4413      	add	r3, r2
 8017a3e:	009b      	lsls	r3, r3, #2
 8017a40:	4a15      	ldr	r2, [pc, #84]	@ (8017a98 <prvAddNewTaskToReadyList+0xd8>)
 8017a42:	441a      	add	r2, r3
 8017a44:	687b      	ldr	r3, [r7, #4]
 8017a46:	3304      	adds	r3, #4
 8017a48:	4619      	mov	r1, r3
 8017a4a:	4610      	mov	r0, r2
 8017a4c:	f7fe fee1 	bl	8016812 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8017a50:	f001 ff54 	bl	80198fc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8017a54:	4b0d      	ldr	r3, [pc, #52]	@ (8017a8c <prvAddNewTaskToReadyList+0xcc>)
 8017a56:	681b      	ldr	r3, [r3, #0]
 8017a58:	2b00      	cmp	r3, #0
 8017a5a:	d00e      	beq.n	8017a7a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8017a5c:	4b0a      	ldr	r3, [pc, #40]	@ (8017a88 <prvAddNewTaskToReadyList+0xc8>)
 8017a5e:	681b      	ldr	r3, [r3, #0]
 8017a60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8017a62:	687b      	ldr	r3, [r7, #4]
 8017a64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017a66:	429a      	cmp	r2, r3
 8017a68:	d207      	bcs.n	8017a7a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8017a6a:	4b0c      	ldr	r3, [pc, #48]	@ (8017a9c <prvAddNewTaskToReadyList+0xdc>)
 8017a6c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8017a70:	601a      	str	r2, [r3, #0]
 8017a72:	f3bf 8f4f 	dsb	sy
 8017a76:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8017a7a:	bf00      	nop
 8017a7c:	3708      	adds	r7, #8
 8017a7e:	46bd      	mov	sp, r7
 8017a80:	bd80      	pop	{r7, pc}
 8017a82:	bf00      	nop
 8017a84:	24001148 	.word	0x24001148
 8017a88:	24000c70 	.word	0x24000c70
 8017a8c:	24001154 	.word	0x24001154
 8017a90:	24001164 	.word	0x24001164
 8017a94:	24001150 	.word	0x24001150
 8017a98:	24000c74 	.word	0x24000c74
 8017a9c:	e000ed04 	.word	0xe000ed04

08017aa0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8017aa0:	b580      	push	{r7, lr}
 8017aa2:	b084      	sub	sp, #16
 8017aa4:	af00      	add	r7, sp, #0
 8017aa6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8017aa8:	2300      	movs	r3, #0
 8017aaa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8017aac:	687b      	ldr	r3, [r7, #4]
 8017aae:	2b00      	cmp	r3, #0
 8017ab0:	d018      	beq.n	8017ae4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8017ab2:	4b14      	ldr	r3, [pc, #80]	@ (8017b04 <vTaskDelay+0x64>)
 8017ab4:	681b      	ldr	r3, [r3, #0]
 8017ab6:	2b00      	cmp	r3, #0
 8017ab8:	d00b      	beq.n	8017ad2 <vTaskDelay+0x32>
	__asm volatile
 8017aba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017abe:	f383 8811 	msr	BASEPRI, r3
 8017ac2:	f3bf 8f6f 	isb	sy
 8017ac6:	f3bf 8f4f 	dsb	sy
 8017aca:	60bb      	str	r3, [r7, #8]
}
 8017acc:	bf00      	nop
 8017ace:	bf00      	nop
 8017ad0:	e7fd      	b.n	8017ace <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8017ad2:	f000 f8f5 	bl	8017cc0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8017ad6:	2100      	movs	r1, #0
 8017ad8:	6878      	ldr	r0, [r7, #4]
 8017ada:	f001 f9f7 	bl	8018ecc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8017ade:	f000 f935 	bl	8017d4c <xTaskResumeAll>
 8017ae2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8017ae4:	68fb      	ldr	r3, [r7, #12]
 8017ae6:	2b00      	cmp	r3, #0
 8017ae8:	d107      	bne.n	8017afa <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8017aea:	4b07      	ldr	r3, [pc, #28]	@ (8017b08 <vTaskDelay+0x68>)
 8017aec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8017af0:	601a      	str	r2, [r3, #0]
 8017af2:	f3bf 8f4f 	dsb	sy
 8017af6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8017afa:	bf00      	nop
 8017afc:	3710      	adds	r7, #16
 8017afe:	46bd      	mov	sp, r7
 8017b00:	bd80      	pop	{r7, pc}
 8017b02:	bf00      	nop
 8017b04:	24001170 	.word	0x24001170
 8017b08:	e000ed04 	.word	0xe000ed04

08017b0c <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 8017b0c:	b580      	push	{r7, lr}
 8017b0e:	b088      	sub	sp, #32
 8017b10:	af00      	add	r7, sp, #0
 8017b12:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 8017b14:	687b      	ldr	r3, [r7, #4]
 8017b16:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 8017b18:	69bb      	ldr	r3, [r7, #24]
 8017b1a:	2b00      	cmp	r3, #0
 8017b1c:	d10b      	bne.n	8017b36 <eTaskGetState+0x2a>
	__asm volatile
 8017b1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017b22:	f383 8811 	msr	BASEPRI, r3
 8017b26:	f3bf 8f6f 	isb	sy
 8017b2a:	f3bf 8f4f 	dsb	sy
 8017b2e:	60bb      	str	r3, [r7, #8]
}
 8017b30:	bf00      	nop
 8017b32:	bf00      	nop
 8017b34:	e7fd      	b.n	8017b32 <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 8017b36:	4b24      	ldr	r3, [pc, #144]	@ (8017bc8 <eTaskGetState+0xbc>)
 8017b38:	681b      	ldr	r3, [r3, #0]
 8017b3a:	69ba      	ldr	r2, [r7, #24]
 8017b3c:	429a      	cmp	r2, r3
 8017b3e:	d102      	bne.n	8017b46 <eTaskGetState+0x3a>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 8017b40:	2300      	movs	r3, #0
 8017b42:	77fb      	strb	r3, [r7, #31]
 8017b44:	e03a      	b.n	8017bbc <eTaskGetState+0xb0>
		}
		else
		{
			taskENTER_CRITICAL();
 8017b46:	f001 fea7 	bl	8019898 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 8017b4a:	69bb      	ldr	r3, [r7, #24]
 8017b4c:	695b      	ldr	r3, [r3, #20]
 8017b4e:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 8017b50:	4b1e      	ldr	r3, [pc, #120]	@ (8017bcc <eTaskGetState+0xc0>)
 8017b52:	681b      	ldr	r3, [r3, #0]
 8017b54:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 8017b56:	4b1e      	ldr	r3, [pc, #120]	@ (8017bd0 <eTaskGetState+0xc4>)
 8017b58:	681b      	ldr	r3, [r3, #0]
 8017b5a:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 8017b5c:	f001 fece 	bl	80198fc <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 8017b60:	697a      	ldr	r2, [r7, #20]
 8017b62:	693b      	ldr	r3, [r7, #16]
 8017b64:	429a      	cmp	r2, r3
 8017b66:	d003      	beq.n	8017b70 <eTaskGetState+0x64>
 8017b68:	697a      	ldr	r2, [r7, #20]
 8017b6a:	68fb      	ldr	r3, [r7, #12]
 8017b6c:	429a      	cmp	r2, r3
 8017b6e:	d102      	bne.n	8017b76 <eTaskGetState+0x6a>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 8017b70:	2302      	movs	r3, #2
 8017b72:	77fb      	strb	r3, [r7, #31]
 8017b74:	e022      	b.n	8017bbc <eTaskGetState+0xb0>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 8017b76:	697b      	ldr	r3, [r7, #20]
 8017b78:	4a16      	ldr	r2, [pc, #88]	@ (8017bd4 <eTaskGetState+0xc8>)
 8017b7a:	4293      	cmp	r3, r2
 8017b7c:	d112      	bne.n	8017ba4 <eTaskGetState+0x98>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 8017b7e:	69bb      	ldr	r3, [r7, #24]
 8017b80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017b82:	2b00      	cmp	r3, #0
 8017b84:	d10b      	bne.n	8017b9e <eTaskGetState+0x92>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8017b86:	69bb      	ldr	r3, [r7, #24]
 8017b88:	f893 30a8 	ldrb.w	r3, [r3, #168]	@ 0xa8
 8017b8c:	b2db      	uxtb	r3, r3
 8017b8e:	2b01      	cmp	r3, #1
 8017b90:	d102      	bne.n	8017b98 <eTaskGetState+0x8c>
							{
								eReturn = eBlocked;
 8017b92:	2302      	movs	r3, #2
 8017b94:	77fb      	strb	r3, [r7, #31]
 8017b96:	e011      	b.n	8017bbc <eTaskGetState+0xb0>
							}
							else
							{
								eReturn = eSuspended;
 8017b98:	2303      	movs	r3, #3
 8017b9a:	77fb      	strb	r3, [r7, #31]
 8017b9c:	e00e      	b.n	8017bbc <eTaskGetState+0xb0>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 8017b9e:	2302      	movs	r3, #2
 8017ba0:	77fb      	strb	r3, [r7, #31]
 8017ba2:	e00b      	b.n	8017bbc <eTaskGetState+0xb0>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 8017ba4:	697b      	ldr	r3, [r7, #20]
 8017ba6:	4a0c      	ldr	r2, [pc, #48]	@ (8017bd8 <eTaskGetState+0xcc>)
 8017ba8:	4293      	cmp	r3, r2
 8017baa:	d002      	beq.n	8017bb2 <eTaskGetState+0xa6>
 8017bac:	697b      	ldr	r3, [r7, #20]
 8017bae:	2b00      	cmp	r3, #0
 8017bb0:	d102      	bne.n	8017bb8 <eTaskGetState+0xac>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 8017bb2:	2304      	movs	r3, #4
 8017bb4:	77fb      	strb	r3, [r7, #31]
 8017bb6:	e001      	b.n	8017bbc <eTaskGetState+0xb0>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 8017bb8:	2301      	movs	r3, #1
 8017bba:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 8017bbc:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8017bbe:	4618      	mov	r0, r3
 8017bc0:	3720      	adds	r7, #32
 8017bc2:	46bd      	mov	sp, r7
 8017bc4:	bd80      	pop	{r7, pc}
 8017bc6:	bf00      	nop
 8017bc8:	24000c70 	.word	0x24000c70
 8017bcc:	240010fc 	.word	0x240010fc
 8017bd0:	24001100 	.word	0x24001100
 8017bd4:	24001130 	.word	0x24001130
 8017bd8:	24001118 	.word	0x24001118

08017bdc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8017bdc:	b580      	push	{r7, lr}
 8017bde:	b08a      	sub	sp, #40	@ 0x28
 8017be0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8017be2:	2300      	movs	r3, #0
 8017be4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8017be6:	2300      	movs	r3, #0
 8017be8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8017bea:	463a      	mov	r2, r7
 8017bec:	1d39      	adds	r1, r7, #4
 8017bee:	f107 0308 	add.w	r3, r7, #8
 8017bf2:	4618      	mov	r0, r3
 8017bf4:	f7fe fdac 	bl	8016750 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8017bf8:	6839      	ldr	r1, [r7, #0]
 8017bfa:	687b      	ldr	r3, [r7, #4]
 8017bfc:	68ba      	ldr	r2, [r7, #8]
 8017bfe:	9202      	str	r2, [sp, #8]
 8017c00:	9301      	str	r3, [sp, #4]
 8017c02:	2300      	movs	r3, #0
 8017c04:	9300      	str	r3, [sp, #0]
 8017c06:	2300      	movs	r3, #0
 8017c08:	460a      	mov	r2, r1
 8017c0a:	4925      	ldr	r1, [pc, #148]	@ (8017ca0 <vTaskStartScheduler+0xc4>)
 8017c0c:	4825      	ldr	r0, [pc, #148]	@ (8017ca4 <vTaskStartScheduler+0xc8>)
 8017c0e:	f7ff fd83 	bl	8017718 <xTaskCreateStatic>
 8017c12:	4603      	mov	r3, r0
 8017c14:	4a24      	ldr	r2, [pc, #144]	@ (8017ca8 <vTaskStartScheduler+0xcc>)
 8017c16:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8017c18:	4b23      	ldr	r3, [pc, #140]	@ (8017ca8 <vTaskStartScheduler+0xcc>)
 8017c1a:	681b      	ldr	r3, [r3, #0]
 8017c1c:	2b00      	cmp	r3, #0
 8017c1e:	d002      	beq.n	8017c26 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8017c20:	2301      	movs	r3, #1
 8017c22:	617b      	str	r3, [r7, #20]
 8017c24:	e001      	b.n	8017c2a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8017c26:	2300      	movs	r3, #0
 8017c28:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8017c2a:	697b      	ldr	r3, [r7, #20]
 8017c2c:	2b01      	cmp	r3, #1
 8017c2e:	d102      	bne.n	8017c36 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8017c30:	f001 f9a6 	bl	8018f80 <xTimerCreateTimerTask>
 8017c34:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8017c36:	697b      	ldr	r3, [r7, #20]
 8017c38:	2b01      	cmp	r3, #1
 8017c3a:	d11d      	bne.n	8017c78 <vTaskStartScheduler+0x9c>
	__asm volatile
 8017c3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017c40:	f383 8811 	msr	BASEPRI, r3
 8017c44:	f3bf 8f6f 	isb	sy
 8017c48:	f3bf 8f4f 	dsb	sy
 8017c4c:	613b      	str	r3, [r7, #16]
}
 8017c4e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8017c50:	4b16      	ldr	r3, [pc, #88]	@ (8017cac <vTaskStartScheduler+0xd0>)
 8017c52:	681b      	ldr	r3, [r3, #0]
 8017c54:	3358      	adds	r3, #88	@ 0x58
 8017c56:	4a16      	ldr	r2, [pc, #88]	@ (8017cb0 <vTaskStartScheduler+0xd4>)
 8017c58:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8017c5a:	4b16      	ldr	r3, [pc, #88]	@ (8017cb4 <vTaskStartScheduler+0xd8>)
 8017c5c:	f04f 32ff 	mov.w	r2, #4294967295
 8017c60:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8017c62:	4b15      	ldr	r3, [pc, #84]	@ (8017cb8 <vTaskStartScheduler+0xdc>)
 8017c64:	2201      	movs	r2, #1
 8017c66:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8017c68:	4b14      	ldr	r3, [pc, #80]	@ (8017cbc <vTaskStartScheduler+0xe0>)
 8017c6a:	2200      	movs	r2, #0
 8017c6c:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8017c6e:	f7ea f87d 	bl	8001d6c <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8017c72:	f001 fd6d 	bl	8019750 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8017c76:	e00f      	b.n	8017c98 <vTaskStartScheduler+0xbc>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8017c78:	697b      	ldr	r3, [r7, #20]
 8017c7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017c7e:	d10b      	bne.n	8017c98 <vTaskStartScheduler+0xbc>
	__asm volatile
 8017c80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017c84:	f383 8811 	msr	BASEPRI, r3
 8017c88:	f3bf 8f6f 	isb	sy
 8017c8c:	f3bf 8f4f 	dsb	sy
 8017c90:	60fb      	str	r3, [r7, #12]
}
 8017c92:	bf00      	nop
 8017c94:	bf00      	nop
 8017c96:	e7fd      	b.n	8017c94 <vTaskStartScheduler+0xb8>
}
 8017c98:	bf00      	nop
 8017c9a:	3718      	adds	r7, #24
 8017c9c:	46bd      	mov	sp, r7
 8017c9e:	bd80      	pop	{r7, pc}
 8017ca0:	080217fc 	.word	0x080217fc
 8017ca4:	08018609 	.word	0x08018609
 8017ca8:	2400116c 	.word	0x2400116c
 8017cac:	24000c70 	.word	0x24000c70
 8017cb0:	240000e8 	.word	0x240000e8
 8017cb4:	24001168 	.word	0x24001168
 8017cb8:	24001154 	.word	0x24001154
 8017cbc:	2400114c 	.word	0x2400114c

08017cc0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8017cc0:	b480      	push	{r7}
 8017cc2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8017cc4:	4b04      	ldr	r3, [pc, #16]	@ (8017cd8 <vTaskSuspendAll+0x18>)
 8017cc6:	681b      	ldr	r3, [r3, #0]
 8017cc8:	3301      	adds	r3, #1
 8017cca:	4a03      	ldr	r2, [pc, #12]	@ (8017cd8 <vTaskSuspendAll+0x18>)
 8017ccc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8017cce:	bf00      	nop
 8017cd0:	46bd      	mov	sp, r7
 8017cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017cd6:	4770      	bx	lr
 8017cd8:	24001170 	.word	0x24001170

08017cdc <prvGetExpectedIdleTime>:
/*----------------------------------------------------------*/

#if ( configUSE_TICKLESS_IDLE != 0 )

	static TickType_t prvGetExpectedIdleTime( void )
	{
 8017cdc:	b480      	push	{r7}
 8017cde:	b083      	sub	sp, #12
 8017ce0:	af00      	add	r7, sp, #0
	TickType_t xReturn;
	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
 8017ce2:	2300      	movs	r3, #0
 8017ce4:	603b      	str	r3, [r7, #0]
		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
		task that are in the Ready state, even though the idle task is
		running. */
		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
		{
			if( uxTopReadyPriority > tskIDLE_PRIORITY )
 8017ce6:	4b14      	ldr	r3, [pc, #80]	@ (8017d38 <prvGetExpectedIdleTime+0x5c>)
 8017ce8:	681b      	ldr	r3, [r3, #0]
 8017cea:	2b00      	cmp	r3, #0
 8017cec:	d001      	beq.n	8017cf2 <prvGetExpectedIdleTime+0x16>
			{
				uxHigherPriorityReadyTasks = pdTRUE;
 8017cee:	2301      	movs	r3, #1
 8017cf0:	603b      	str	r3, [r7, #0]
				uxHigherPriorityReadyTasks = pdTRUE;
			}
		}
		#endif

		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
 8017cf2:	4b12      	ldr	r3, [pc, #72]	@ (8017d3c <prvGetExpectedIdleTime+0x60>)
 8017cf4:	681b      	ldr	r3, [r3, #0]
 8017cf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017cf8:	2b00      	cmp	r3, #0
 8017cfa:	d002      	beq.n	8017d02 <prvGetExpectedIdleTime+0x26>
		{
			xReturn = 0;
 8017cfc:	2300      	movs	r3, #0
 8017cfe:	607b      	str	r3, [r7, #4]
 8017d00:	e012      	b.n	8017d28 <prvGetExpectedIdleTime+0x4c>
		}
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
 8017d02:	4b0f      	ldr	r3, [pc, #60]	@ (8017d40 <prvGetExpectedIdleTime+0x64>)
 8017d04:	681b      	ldr	r3, [r3, #0]
 8017d06:	2b01      	cmp	r3, #1
 8017d08:	d902      	bls.n	8017d10 <prvGetExpectedIdleTime+0x34>
		{
			/* There are other idle priority tasks in the ready state.  If
			time slicing is used then the very next tick interrupt must be
			processed. */
			xReturn = 0;
 8017d0a:	2300      	movs	r3, #0
 8017d0c:	607b      	str	r3, [r7, #4]
 8017d0e:	e00b      	b.n	8017d28 <prvGetExpectedIdleTime+0x4c>
		}
		else if( uxHigherPriorityReadyTasks != pdFALSE )
 8017d10:	683b      	ldr	r3, [r7, #0]
 8017d12:	2b00      	cmp	r3, #0
 8017d14:	d002      	beq.n	8017d1c <prvGetExpectedIdleTime+0x40>
		{
			/* There are tasks in the Ready state that have a priority above the
			idle priority.  This path can only be reached if
			configUSE_PREEMPTION is 0. */
			xReturn = 0;
 8017d16:	2300      	movs	r3, #0
 8017d18:	607b      	str	r3, [r7, #4]
 8017d1a:	e005      	b.n	8017d28 <prvGetExpectedIdleTime+0x4c>
		}
		else
		{
			xReturn = xNextTaskUnblockTime - xTickCount;
 8017d1c:	4b09      	ldr	r3, [pc, #36]	@ (8017d44 <prvGetExpectedIdleTime+0x68>)
 8017d1e:	681a      	ldr	r2, [r3, #0]
 8017d20:	4b09      	ldr	r3, [pc, #36]	@ (8017d48 <prvGetExpectedIdleTime+0x6c>)
 8017d22:	681b      	ldr	r3, [r3, #0]
 8017d24:	1ad3      	subs	r3, r2, r3
 8017d26:	607b      	str	r3, [r7, #4]
		}

		return xReturn;
 8017d28:	687b      	ldr	r3, [r7, #4]
	}
 8017d2a:	4618      	mov	r0, r3
 8017d2c:	370c      	adds	r7, #12
 8017d2e:	46bd      	mov	sp, r7
 8017d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d34:	4770      	bx	lr
 8017d36:	bf00      	nop
 8017d38:	24001150 	.word	0x24001150
 8017d3c:	24000c70 	.word	0x24000c70
 8017d40:	24000c74 	.word	0x24000c74
 8017d44:	24001168 	.word	0x24001168
 8017d48:	2400114c 	.word	0x2400114c

08017d4c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8017d4c:	b580      	push	{r7, lr}
 8017d4e:	b084      	sub	sp, #16
 8017d50:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8017d52:	2300      	movs	r3, #0
 8017d54:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8017d56:	2300      	movs	r3, #0
 8017d58:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8017d5a:	4b42      	ldr	r3, [pc, #264]	@ (8017e64 <xTaskResumeAll+0x118>)
 8017d5c:	681b      	ldr	r3, [r3, #0]
 8017d5e:	2b00      	cmp	r3, #0
 8017d60:	d10b      	bne.n	8017d7a <xTaskResumeAll+0x2e>
	__asm volatile
 8017d62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017d66:	f383 8811 	msr	BASEPRI, r3
 8017d6a:	f3bf 8f6f 	isb	sy
 8017d6e:	f3bf 8f4f 	dsb	sy
 8017d72:	603b      	str	r3, [r7, #0]
}
 8017d74:	bf00      	nop
 8017d76:	bf00      	nop
 8017d78:	e7fd      	b.n	8017d76 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8017d7a:	f001 fd8d 	bl	8019898 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8017d7e:	4b39      	ldr	r3, [pc, #228]	@ (8017e64 <xTaskResumeAll+0x118>)
 8017d80:	681b      	ldr	r3, [r3, #0]
 8017d82:	3b01      	subs	r3, #1
 8017d84:	4a37      	ldr	r2, [pc, #220]	@ (8017e64 <xTaskResumeAll+0x118>)
 8017d86:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8017d88:	4b36      	ldr	r3, [pc, #216]	@ (8017e64 <xTaskResumeAll+0x118>)
 8017d8a:	681b      	ldr	r3, [r3, #0]
 8017d8c:	2b00      	cmp	r3, #0
 8017d8e:	d162      	bne.n	8017e56 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8017d90:	4b35      	ldr	r3, [pc, #212]	@ (8017e68 <xTaskResumeAll+0x11c>)
 8017d92:	681b      	ldr	r3, [r3, #0]
 8017d94:	2b00      	cmp	r3, #0
 8017d96:	d05e      	beq.n	8017e56 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8017d98:	e02f      	b.n	8017dfa <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017d9a:	4b34      	ldr	r3, [pc, #208]	@ (8017e6c <xTaskResumeAll+0x120>)
 8017d9c:	68db      	ldr	r3, [r3, #12]
 8017d9e:	68db      	ldr	r3, [r3, #12]
 8017da0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8017da2:	68fb      	ldr	r3, [r7, #12]
 8017da4:	3318      	adds	r3, #24
 8017da6:	4618      	mov	r0, r3
 8017da8:	f7fe fd90 	bl	80168cc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8017dac:	68fb      	ldr	r3, [r7, #12]
 8017dae:	3304      	adds	r3, #4
 8017db0:	4618      	mov	r0, r3
 8017db2:	f7fe fd8b 	bl	80168cc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8017db6:	68fb      	ldr	r3, [r7, #12]
 8017db8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8017dba:	4b2d      	ldr	r3, [pc, #180]	@ (8017e70 <xTaskResumeAll+0x124>)
 8017dbc:	681b      	ldr	r3, [r3, #0]
 8017dbe:	429a      	cmp	r2, r3
 8017dc0:	d903      	bls.n	8017dca <xTaskResumeAll+0x7e>
 8017dc2:	68fb      	ldr	r3, [r7, #12]
 8017dc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017dc6:	4a2a      	ldr	r2, [pc, #168]	@ (8017e70 <xTaskResumeAll+0x124>)
 8017dc8:	6013      	str	r3, [r2, #0]
 8017dca:	68fb      	ldr	r3, [r7, #12]
 8017dcc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8017dce:	4613      	mov	r3, r2
 8017dd0:	009b      	lsls	r3, r3, #2
 8017dd2:	4413      	add	r3, r2
 8017dd4:	009b      	lsls	r3, r3, #2
 8017dd6:	4a27      	ldr	r2, [pc, #156]	@ (8017e74 <xTaskResumeAll+0x128>)
 8017dd8:	441a      	add	r2, r3
 8017dda:	68fb      	ldr	r3, [r7, #12]
 8017ddc:	3304      	adds	r3, #4
 8017dde:	4619      	mov	r1, r3
 8017de0:	4610      	mov	r0, r2
 8017de2:	f7fe fd16 	bl	8016812 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8017de6:	68fb      	ldr	r3, [r7, #12]
 8017de8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8017dea:	4b23      	ldr	r3, [pc, #140]	@ (8017e78 <xTaskResumeAll+0x12c>)
 8017dec:	681b      	ldr	r3, [r3, #0]
 8017dee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017df0:	429a      	cmp	r2, r3
 8017df2:	d302      	bcc.n	8017dfa <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8017df4:	4b21      	ldr	r3, [pc, #132]	@ (8017e7c <xTaskResumeAll+0x130>)
 8017df6:	2201      	movs	r2, #1
 8017df8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8017dfa:	4b1c      	ldr	r3, [pc, #112]	@ (8017e6c <xTaskResumeAll+0x120>)
 8017dfc:	681b      	ldr	r3, [r3, #0]
 8017dfe:	2b00      	cmp	r3, #0
 8017e00:	d1cb      	bne.n	8017d9a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8017e02:	68fb      	ldr	r3, [r7, #12]
 8017e04:	2b00      	cmp	r3, #0
 8017e06:	d001      	beq.n	8017e0c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8017e08:	f000 fde6 	bl	80189d8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8017e0c:	4b1c      	ldr	r3, [pc, #112]	@ (8017e80 <xTaskResumeAll+0x134>)
 8017e0e:	681b      	ldr	r3, [r3, #0]
 8017e10:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8017e12:	687b      	ldr	r3, [r7, #4]
 8017e14:	2b00      	cmp	r3, #0
 8017e16:	d010      	beq.n	8017e3a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8017e18:	f000 f930 	bl	801807c <xTaskIncrementTick>
 8017e1c:	4603      	mov	r3, r0
 8017e1e:	2b00      	cmp	r3, #0
 8017e20:	d002      	beq.n	8017e28 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8017e22:	4b16      	ldr	r3, [pc, #88]	@ (8017e7c <xTaskResumeAll+0x130>)
 8017e24:	2201      	movs	r2, #1
 8017e26:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8017e28:	687b      	ldr	r3, [r7, #4]
 8017e2a:	3b01      	subs	r3, #1
 8017e2c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8017e2e:	687b      	ldr	r3, [r7, #4]
 8017e30:	2b00      	cmp	r3, #0
 8017e32:	d1f1      	bne.n	8017e18 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8017e34:	4b12      	ldr	r3, [pc, #72]	@ (8017e80 <xTaskResumeAll+0x134>)
 8017e36:	2200      	movs	r2, #0
 8017e38:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8017e3a:	4b10      	ldr	r3, [pc, #64]	@ (8017e7c <xTaskResumeAll+0x130>)
 8017e3c:	681b      	ldr	r3, [r3, #0]
 8017e3e:	2b00      	cmp	r3, #0
 8017e40:	d009      	beq.n	8017e56 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8017e42:	2301      	movs	r3, #1
 8017e44:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8017e46:	4b0f      	ldr	r3, [pc, #60]	@ (8017e84 <xTaskResumeAll+0x138>)
 8017e48:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8017e4c:	601a      	str	r2, [r3, #0]
 8017e4e:	f3bf 8f4f 	dsb	sy
 8017e52:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8017e56:	f001 fd51 	bl	80198fc <vPortExitCritical>

	return xAlreadyYielded;
 8017e5a:	68bb      	ldr	r3, [r7, #8]
}
 8017e5c:	4618      	mov	r0, r3
 8017e5e:	3710      	adds	r7, #16
 8017e60:	46bd      	mov	sp, r7
 8017e62:	bd80      	pop	{r7, pc}
 8017e64:	24001170 	.word	0x24001170
 8017e68:	24001148 	.word	0x24001148
 8017e6c:	24001104 	.word	0x24001104
 8017e70:	24001150 	.word	0x24001150
 8017e74:	24000c74 	.word	0x24000c74
 8017e78:	24000c70 	.word	0x24000c70
 8017e7c:	2400115c 	.word	0x2400115c
 8017e80:	24001158 	.word	0x24001158
 8017e84:	e000ed04 	.word	0xe000ed04

08017e88 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8017e88:	b480      	push	{r7}
 8017e8a:	b083      	sub	sp, #12
 8017e8c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8017e8e:	4b05      	ldr	r3, [pc, #20]	@ (8017ea4 <xTaskGetTickCount+0x1c>)
 8017e90:	681b      	ldr	r3, [r3, #0]
 8017e92:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8017e94:	687b      	ldr	r3, [r7, #4]
}
 8017e96:	4618      	mov	r0, r3
 8017e98:	370c      	adds	r7, #12
 8017e9a:	46bd      	mov	sp, r7
 8017e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ea0:	4770      	bx	lr
 8017ea2:	bf00      	nop
 8017ea4:	2400114c 	.word	0x2400114c

08017ea8 <uxTaskGetNumberOfTasks>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
 8017ea8:	b480      	push	{r7}
 8017eaa:	af00      	add	r7, sp, #0
	/* A critical section is not required because the variables are of type
	BaseType_t. */
	return uxCurrentNumberOfTasks;
 8017eac:	4b03      	ldr	r3, [pc, #12]	@ (8017ebc <uxTaskGetNumberOfTasks+0x14>)
 8017eae:	681b      	ldr	r3, [r3, #0]
}
 8017eb0:	4618      	mov	r0, r3
 8017eb2:	46bd      	mov	sp, r7
 8017eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017eb8:	4770      	bx	lr
 8017eba:	bf00      	nop
 8017ebc:	24001148 	.word	0x24001148

08017ec0 <pcTaskGetName>:
/*-----------------------------------------------------------*/

char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 8017ec0:	b480      	push	{r7}
 8017ec2:	b085      	sub	sp, #20
 8017ec4:	af00      	add	r7, sp, #0
 8017ec6:	6078      	str	r0, [r7, #4]
TCB_t *pxTCB;

	/* If null is passed in here then the name of the calling task is being
	queried. */
	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 8017ec8:	687b      	ldr	r3, [r7, #4]
 8017eca:	2b00      	cmp	r3, #0
 8017ecc:	d102      	bne.n	8017ed4 <pcTaskGetName+0x14>
 8017ece:	4b0e      	ldr	r3, [pc, #56]	@ (8017f08 <pcTaskGetName+0x48>)
 8017ed0:	681b      	ldr	r3, [r3, #0]
 8017ed2:	e000      	b.n	8017ed6 <pcTaskGetName+0x16>
 8017ed4:	687b      	ldr	r3, [r7, #4]
 8017ed6:	60fb      	str	r3, [r7, #12]
	configASSERT( pxTCB );
 8017ed8:	68fb      	ldr	r3, [r7, #12]
 8017eda:	2b00      	cmp	r3, #0
 8017edc:	d10b      	bne.n	8017ef6 <pcTaskGetName+0x36>
	__asm volatile
 8017ede:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017ee2:	f383 8811 	msr	BASEPRI, r3
 8017ee6:	f3bf 8f6f 	isb	sy
 8017eea:	f3bf 8f4f 	dsb	sy
 8017eee:	60bb      	str	r3, [r7, #8]
}
 8017ef0:	bf00      	nop
 8017ef2:	bf00      	nop
 8017ef4:	e7fd      	b.n	8017ef2 <pcTaskGetName+0x32>
	return &( pxTCB->pcTaskName[ 0 ] );
 8017ef6:	68fb      	ldr	r3, [r7, #12]
 8017ef8:	3334      	adds	r3, #52	@ 0x34
}
 8017efa:	4618      	mov	r0, r3
 8017efc:	3714      	adds	r7, #20
 8017efe:	46bd      	mov	sp, r7
 8017f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f04:	4770      	bx	lr
 8017f06:	bf00      	nop
 8017f08:	24000c70 	.word	0x24000c70

08017f0c <uxTaskGetSystemState>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArraySize, uint32_t * const pulTotalRunTime )
	{
 8017f0c:	b580      	push	{r7, lr}
 8017f0e:	b086      	sub	sp, #24
 8017f10:	af00      	add	r7, sp, #0
 8017f12:	60f8      	str	r0, [r7, #12]
 8017f14:	60b9      	str	r1, [r7, #8]
 8017f16:	607a      	str	r2, [r7, #4]
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 8017f18:	2300      	movs	r3, #0
 8017f1a:	617b      	str	r3, [r7, #20]
 8017f1c:	2338      	movs	r3, #56	@ 0x38
 8017f1e:	613b      	str	r3, [r7, #16]

		vTaskSuspendAll();
 8017f20:	f7ff fece 	bl	8017cc0 <vTaskSuspendAll>
		{
			/* Is there a space in the array for each task in the system? */
			if( uxArraySize >= uxCurrentNumberOfTasks )
 8017f24:	4b3b      	ldr	r3, [pc, #236]	@ (8018014 <uxTaskGetSystemState+0x108>)
 8017f26:	681b      	ldr	r3, [r3, #0]
 8017f28:	68ba      	ldr	r2, [r7, #8]
 8017f2a:	429a      	cmp	r2, r3
 8017f2c:	d36a      	bcc.n	8018004 <uxTaskGetSystemState+0xf8>
			{
				/* Fill in an TaskStatus_t structure with information on each
				task in the Ready state. */
				do
				{
					uxQueue--;
 8017f2e:	693b      	ldr	r3, [r7, #16]
 8017f30:	3b01      	subs	r3, #1
 8017f32:	613b      	str	r3, [r7, #16]
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 8017f34:	697a      	ldr	r2, [r7, #20]
 8017f36:	4613      	mov	r3, r2
 8017f38:	00db      	lsls	r3, r3, #3
 8017f3a:	4413      	add	r3, r2
 8017f3c:	009b      	lsls	r3, r3, #2
 8017f3e:	461a      	mov	r2, r3
 8017f40:	68fb      	ldr	r3, [r7, #12]
 8017f42:	1898      	adds	r0, r3, r2
 8017f44:	693a      	ldr	r2, [r7, #16]
 8017f46:	4613      	mov	r3, r2
 8017f48:	009b      	lsls	r3, r3, #2
 8017f4a:	4413      	add	r3, r2
 8017f4c:	009b      	lsls	r3, r3, #2
 8017f4e:	4a32      	ldr	r2, [pc, #200]	@ (8018018 <uxTaskGetSystemState+0x10c>)
 8017f50:	4413      	add	r3, r2
 8017f52:	2201      	movs	r2, #1
 8017f54:	4619      	mov	r1, r3
 8017f56:	f000 fc9b 	bl	8018890 <prvListTasksWithinSingleList>
 8017f5a:	4602      	mov	r2, r0
 8017f5c:	697b      	ldr	r3, [r7, #20]
 8017f5e:	4413      	add	r3, r2
 8017f60:	617b      	str	r3, [r7, #20]

				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017f62:	693b      	ldr	r3, [r7, #16]
 8017f64:	2b00      	cmp	r3, #0
 8017f66:	d1e2      	bne.n	8017f2e <uxTaskGetSystemState+0x22>

				/* Fill in an TaskStatus_t structure with information on each
				task in the Blocked state. */
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 8017f68:	697a      	ldr	r2, [r7, #20]
 8017f6a:	4613      	mov	r3, r2
 8017f6c:	00db      	lsls	r3, r3, #3
 8017f6e:	4413      	add	r3, r2
 8017f70:	009b      	lsls	r3, r3, #2
 8017f72:	461a      	mov	r2, r3
 8017f74:	68fb      	ldr	r3, [r7, #12]
 8017f76:	4413      	add	r3, r2
 8017f78:	4a28      	ldr	r2, [pc, #160]	@ (801801c <uxTaskGetSystemState+0x110>)
 8017f7a:	6811      	ldr	r1, [r2, #0]
 8017f7c:	2202      	movs	r2, #2
 8017f7e:	4618      	mov	r0, r3
 8017f80:	f000 fc86 	bl	8018890 <prvListTasksWithinSingleList>
 8017f84:	4602      	mov	r2, r0
 8017f86:	697b      	ldr	r3, [r7, #20]
 8017f88:	4413      	add	r3, r2
 8017f8a:	617b      	str	r3, [r7, #20]
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 8017f8c:	697a      	ldr	r2, [r7, #20]
 8017f8e:	4613      	mov	r3, r2
 8017f90:	00db      	lsls	r3, r3, #3
 8017f92:	4413      	add	r3, r2
 8017f94:	009b      	lsls	r3, r3, #2
 8017f96:	461a      	mov	r2, r3
 8017f98:	68fb      	ldr	r3, [r7, #12]
 8017f9a:	4413      	add	r3, r2
 8017f9c:	4a20      	ldr	r2, [pc, #128]	@ (8018020 <uxTaskGetSystemState+0x114>)
 8017f9e:	6811      	ldr	r1, [r2, #0]
 8017fa0:	2202      	movs	r2, #2
 8017fa2:	4618      	mov	r0, r3
 8017fa4:	f000 fc74 	bl	8018890 <prvListTasksWithinSingleList>
 8017fa8:	4602      	mov	r2, r0
 8017faa:	697b      	ldr	r3, [r7, #20]
 8017fac:	4413      	add	r3, r2
 8017fae:	617b      	str	r3, [r7, #20]

				#if( INCLUDE_vTaskDelete == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task that has been deleted but not yet cleaned up. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 8017fb0:	697a      	ldr	r2, [r7, #20]
 8017fb2:	4613      	mov	r3, r2
 8017fb4:	00db      	lsls	r3, r3, #3
 8017fb6:	4413      	add	r3, r2
 8017fb8:	009b      	lsls	r3, r3, #2
 8017fba:	461a      	mov	r2, r3
 8017fbc:	68fb      	ldr	r3, [r7, #12]
 8017fbe:	4413      	add	r3, r2
 8017fc0:	2204      	movs	r2, #4
 8017fc2:	4918      	ldr	r1, [pc, #96]	@ (8018024 <uxTaskGetSystemState+0x118>)
 8017fc4:	4618      	mov	r0, r3
 8017fc6:	f000 fc63 	bl	8018890 <prvListTasksWithinSingleList>
 8017fca:	4602      	mov	r2, r0
 8017fcc:	697b      	ldr	r3, [r7, #20]
 8017fce:	4413      	add	r3, r2
 8017fd0:	617b      	str	r3, [r7, #20]

				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task in the Suspended state. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 8017fd2:	697a      	ldr	r2, [r7, #20]
 8017fd4:	4613      	mov	r3, r2
 8017fd6:	00db      	lsls	r3, r3, #3
 8017fd8:	4413      	add	r3, r2
 8017fda:	009b      	lsls	r3, r3, #2
 8017fdc:	461a      	mov	r2, r3
 8017fde:	68fb      	ldr	r3, [r7, #12]
 8017fe0:	4413      	add	r3, r2
 8017fe2:	2203      	movs	r2, #3
 8017fe4:	4910      	ldr	r1, [pc, #64]	@ (8018028 <uxTaskGetSystemState+0x11c>)
 8017fe6:	4618      	mov	r0, r3
 8017fe8:	f000 fc52 	bl	8018890 <prvListTasksWithinSingleList>
 8017fec:	4602      	mov	r2, r0
 8017fee:	697b      	ldr	r3, [r7, #20]
 8017ff0:	4413      	add	r3, r2
 8017ff2:	617b      	str	r3, [r7, #20]
				}
				#endif

				#if ( configGENERATE_RUN_TIME_STATS == 1)
				{
					if( pulTotalRunTime != NULL )
 8017ff4:	687b      	ldr	r3, [r7, #4]
 8017ff6:	2b00      	cmp	r3, #0
 8017ff8:	d004      	beq.n	8018004 <uxTaskGetSystemState+0xf8>
					{
						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
						#else
							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8017ffa:	f7e9 febe 	bl	8001d7a <getRunTimeCounterValue>
 8017ffe:	4602      	mov	r2, r0
 8018000:	687b      	ldr	r3, [r7, #4]
 8018002:	601a      	str	r2, [r3, #0]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		( void ) xTaskResumeAll();
 8018004:	f7ff fea2 	bl	8017d4c <xTaskResumeAll>

		return uxTask;
 8018008:	697b      	ldr	r3, [r7, #20]
	}
 801800a:	4618      	mov	r0, r3
 801800c:	3718      	adds	r7, #24
 801800e:	46bd      	mov	sp, r7
 8018010:	bd80      	pop	{r7, pc}
 8018012:	bf00      	nop
 8018014:	24001148 	.word	0x24001148
 8018018:	24000c74 	.word	0x24000c74
 801801c:	240010fc 	.word	0x240010fc
 8018020:	24001100 	.word	0x24001100
 8018024:	24001118 	.word	0x24001118
 8018028:	24001130 	.word	0x24001130

0801802c <vTaskStepTick>:
implementations require configUSE_TICKLESS_IDLE to be set to a value other than
1. */
#if ( configUSE_TICKLESS_IDLE != 0 )

	void vTaskStepTick( const TickType_t xTicksToJump )
	{
 801802c:	b480      	push	{r7}
 801802e:	b085      	sub	sp, #20
 8018030:	af00      	add	r7, sp, #0
 8018032:	6078      	str	r0, [r7, #4]
		/* Correct the tick count value after a period during which the tick
		was suppressed.  Note this does *not* call the tick hook function for
		each stepped tick. */
		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
 8018034:	4b0f      	ldr	r3, [pc, #60]	@ (8018074 <vTaskStepTick+0x48>)
 8018036:	681a      	ldr	r2, [r3, #0]
 8018038:	687b      	ldr	r3, [r7, #4]
 801803a:	441a      	add	r2, r3
 801803c:	4b0e      	ldr	r3, [pc, #56]	@ (8018078 <vTaskStepTick+0x4c>)
 801803e:	681b      	ldr	r3, [r3, #0]
 8018040:	429a      	cmp	r2, r3
 8018042:	d90b      	bls.n	801805c <vTaskStepTick+0x30>
	__asm volatile
 8018044:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018048:	f383 8811 	msr	BASEPRI, r3
 801804c:	f3bf 8f6f 	isb	sy
 8018050:	f3bf 8f4f 	dsb	sy
 8018054:	60fb      	str	r3, [r7, #12]
}
 8018056:	bf00      	nop
 8018058:	bf00      	nop
 801805a:	e7fd      	b.n	8018058 <vTaskStepTick+0x2c>
		xTickCount += xTicksToJump;
 801805c:	4b05      	ldr	r3, [pc, #20]	@ (8018074 <vTaskStepTick+0x48>)
 801805e:	681a      	ldr	r2, [r3, #0]
 8018060:	687b      	ldr	r3, [r7, #4]
 8018062:	4413      	add	r3, r2
 8018064:	4a03      	ldr	r2, [pc, #12]	@ (8018074 <vTaskStepTick+0x48>)
 8018066:	6013      	str	r3, [r2, #0]
		traceINCREASE_TICK_COUNT( xTicksToJump );
	}
 8018068:	bf00      	nop
 801806a:	3714      	adds	r7, #20
 801806c:	46bd      	mov	sp, r7
 801806e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018072:	4770      	bx	lr
 8018074:	2400114c 	.word	0x2400114c
 8018078:	24001168 	.word	0x24001168

0801807c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 801807c:	b580      	push	{r7, lr}
 801807e:	b086      	sub	sp, #24
 8018080:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8018082:	2300      	movs	r3, #0
 8018084:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8018086:	4b53      	ldr	r3, [pc, #332]	@ (80181d4 <xTaskIncrementTick+0x158>)
 8018088:	681b      	ldr	r3, [r3, #0]
 801808a:	2b00      	cmp	r3, #0
 801808c:	f040 8096 	bne.w	80181bc <xTaskIncrementTick+0x140>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8018090:	4b51      	ldr	r3, [pc, #324]	@ (80181d8 <xTaskIncrementTick+0x15c>)
 8018092:	681b      	ldr	r3, [r3, #0]
 8018094:	3301      	adds	r3, #1
 8018096:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8018098:	4a4f      	ldr	r2, [pc, #316]	@ (80181d8 <xTaskIncrementTick+0x15c>)
 801809a:	693b      	ldr	r3, [r7, #16]
 801809c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801809e:	693b      	ldr	r3, [r7, #16]
 80180a0:	2b00      	cmp	r3, #0
 80180a2:	d121      	bne.n	80180e8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80180a4:	4b4d      	ldr	r3, [pc, #308]	@ (80181dc <xTaskIncrementTick+0x160>)
 80180a6:	681b      	ldr	r3, [r3, #0]
 80180a8:	681b      	ldr	r3, [r3, #0]
 80180aa:	2b00      	cmp	r3, #0
 80180ac:	d00b      	beq.n	80180c6 <xTaskIncrementTick+0x4a>
	__asm volatile
 80180ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80180b2:	f383 8811 	msr	BASEPRI, r3
 80180b6:	f3bf 8f6f 	isb	sy
 80180ba:	f3bf 8f4f 	dsb	sy
 80180be:	603b      	str	r3, [r7, #0]
}
 80180c0:	bf00      	nop
 80180c2:	bf00      	nop
 80180c4:	e7fd      	b.n	80180c2 <xTaskIncrementTick+0x46>
 80180c6:	4b45      	ldr	r3, [pc, #276]	@ (80181dc <xTaskIncrementTick+0x160>)
 80180c8:	681b      	ldr	r3, [r3, #0]
 80180ca:	60fb      	str	r3, [r7, #12]
 80180cc:	4b44      	ldr	r3, [pc, #272]	@ (80181e0 <xTaskIncrementTick+0x164>)
 80180ce:	681b      	ldr	r3, [r3, #0]
 80180d0:	4a42      	ldr	r2, [pc, #264]	@ (80181dc <xTaskIncrementTick+0x160>)
 80180d2:	6013      	str	r3, [r2, #0]
 80180d4:	4a42      	ldr	r2, [pc, #264]	@ (80181e0 <xTaskIncrementTick+0x164>)
 80180d6:	68fb      	ldr	r3, [r7, #12]
 80180d8:	6013      	str	r3, [r2, #0]
 80180da:	4b42      	ldr	r3, [pc, #264]	@ (80181e4 <xTaskIncrementTick+0x168>)
 80180dc:	681b      	ldr	r3, [r3, #0]
 80180de:	3301      	adds	r3, #1
 80180e0:	4a40      	ldr	r2, [pc, #256]	@ (80181e4 <xTaskIncrementTick+0x168>)
 80180e2:	6013      	str	r3, [r2, #0]
 80180e4:	f000 fc78 	bl	80189d8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80180e8:	4b3f      	ldr	r3, [pc, #252]	@ (80181e8 <xTaskIncrementTick+0x16c>)
 80180ea:	681b      	ldr	r3, [r3, #0]
 80180ec:	693a      	ldr	r2, [r7, #16]
 80180ee:	429a      	cmp	r2, r3
 80180f0:	d349      	bcc.n	8018186 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80180f2:	4b3a      	ldr	r3, [pc, #232]	@ (80181dc <xTaskIncrementTick+0x160>)
 80180f4:	681b      	ldr	r3, [r3, #0]
 80180f6:	681b      	ldr	r3, [r3, #0]
 80180f8:	2b00      	cmp	r3, #0
 80180fa:	d104      	bne.n	8018106 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80180fc:	4b3a      	ldr	r3, [pc, #232]	@ (80181e8 <xTaskIncrementTick+0x16c>)
 80180fe:	f04f 32ff 	mov.w	r2, #4294967295
 8018102:	601a      	str	r2, [r3, #0]
					break;
 8018104:	e03f      	b.n	8018186 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018106:	4b35      	ldr	r3, [pc, #212]	@ (80181dc <xTaskIncrementTick+0x160>)
 8018108:	681b      	ldr	r3, [r3, #0]
 801810a:	68db      	ldr	r3, [r3, #12]
 801810c:	68db      	ldr	r3, [r3, #12]
 801810e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8018110:	68bb      	ldr	r3, [r7, #8]
 8018112:	685b      	ldr	r3, [r3, #4]
 8018114:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8018116:	693a      	ldr	r2, [r7, #16]
 8018118:	687b      	ldr	r3, [r7, #4]
 801811a:	429a      	cmp	r2, r3
 801811c:	d203      	bcs.n	8018126 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 801811e:	4a32      	ldr	r2, [pc, #200]	@ (80181e8 <xTaskIncrementTick+0x16c>)
 8018120:	687b      	ldr	r3, [r7, #4]
 8018122:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8018124:	e02f      	b.n	8018186 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8018126:	68bb      	ldr	r3, [r7, #8]
 8018128:	3304      	adds	r3, #4
 801812a:	4618      	mov	r0, r3
 801812c:	f7fe fbce 	bl	80168cc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8018130:	68bb      	ldr	r3, [r7, #8]
 8018132:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018134:	2b00      	cmp	r3, #0
 8018136:	d004      	beq.n	8018142 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8018138:	68bb      	ldr	r3, [r7, #8]
 801813a:	3318      	adds	r3, #24
 801813c:	4618      	mov	r0, r3
 801813e:	f7fe fbc5 	bl	80168cc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8018142:	68bb      	ldr	r3, [r7, #8]
 8018144:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8018146:	4b29      	ldr	r3, [pc, #164]	@ (80181ec <xTaskIncrementTick+0x170>)
 8018148:	681b      	ldr	r3, [r3, #0]
 801814a:	429a      	cmp	r2, r3
 801814c:	d903      	bls.n	8018156 <xTaskIncrementTick+0xda>
 801814e:	68bb      	ldr	r3, [r7, #8]
 8018150:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018152:	4a26      	ldr	r2, [pc, #152]	@ (80181ec <xTaskIncrementTick+0x170>)
 8018154:	6013      	str	r3, [r2, #0]
 8018156:	68bb      	ldr	r3, [r7, #8]
 8018158:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801815a:	4613      	mov	r3, r2
 801815c:	009b      	lsls	r3, r3, #2
 801815e:	4413      	add	r3, r2
 8018160:	009b      	lsls	r3, r3, #2
 8018162:	4a23      	ldr	r2, [pc, #140]	@ (80181f0 <xTaskIncrementTick+0x174>)
 8018164:	441a      	add	r2, r3
 8018166:	68bb      	ldr	r3, [r7, #8]
 8018168:	3304      	adds	r3, #4
 801816a:	4619      	mov	r1, r3
 801816c:	4610      	mov	r0, r2
 801816e:	f7fe fb50 	bl	8016812 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8018172:	68bb      	ldr	r3, [r7, #8]
 8018174:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8018176:	4b1f      	ldr	r3, [pc, #124]	@ (80181f4 <xTaskIncrementTick+0x178>)
 8018178:	681b      	ldr	r3, [r3, #0]
 801817a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801817c:	429a      	cmp	r2, r3
 801817e:	d3b8      	bcc.n	80180f2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8018180:	2301      	movs	r3, #1
 8018182:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8018184:	e7b5      	b.n	80180f2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8018186:	4b1b      	ldr	r3, [pc, #108]	@ (80181f4 <xTaskIncrementTick+0x178>)
 8018188:	681b      	ldr	r3, [r3, #0]
 801818a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801818c:	4918      	ldr	r1, [pc, #96]	@ (80181f0 <xTaskIncrementTick+0x174>)
 801818e:	4613      	mov	r3, r2
 8018190:	009b      	lsls	r3, r3, #2
 8018192:	4413      	add	r3, r2
 8018194:	009b      	lsls	r3, r3, #2
 8018196:	440b      	add	r3, r1
 8018198:	681b      	ldr	r3, [r3, #0]
 801819a:	2b01      	cmp	r3, #1
 801819c:	d901      	bls.n	80181a2 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 801819e:	2301      	movs	r3, #1
 80181a0:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( xPendedTicks == ( TickType_t ) 0 )
 80181a2:	4b15      	ldr	r3, [pc, #84]	@ (80181f8 <xTaskIncrementTick+0x17c>)
 80181a4:	681b      	ldr	r3, [r3, #0]
 80181a6:	2b00      	cmp	r3, #0
 80181a8:	d101      	bne.n	80181ae <xTaskIncrementTick+0x132>
			{
				vApplicationTickHook();
 80181aa:	f7e9 fdf5 	bl	8001d98 <vApplicationTickHook>
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80181ae:	4b13      	ldr	r3, [pc, #76]	@ (80181fc <xTaskIncrementTick+0x180>)
 80181b0:	681b      	ldr	r3, [r3, #0]
 80181b2:	2b00      	cmp	r3, #0
 80181b4:	d009      	beq.n	80181ca <xTaskIncrementTick+0x14e>
			{
				xSwitchRequired = pdTRUE;
 80181b6:	2301      	movs	r3, #1
 80181b8:	617b      	str	r3, [r7, #20]
 80181ba:	e006      	b.n	80181ca <xTaskIncrementTick+0x14e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80181bc:	4b0e      	ldr	r3, [pc, #56]	@ (80181f8 <xTaskIncrementTick+0x17c>)
 80181be:	681b      	ldr	r3, [r3, #0]
 80181c0:	3301      	adds	r3, #1
 80181c2:	4a0d      	ldr	r2, [pc, #52]	@ (80181f8 <xTaskIncrementTick+0x17c>)
 80181c4:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 80181c6:	f7e9 fde7 	bl	8001d98 <vApplicationTickHook>
		}
		#endif
	}

	return xSwitchRequired;
 80181ca:	697b      	ldr	r3, [r7, #20]
}
 80181cc:	4618      	mov	r0, r3
 80181ce:	3718      	adds	r7, #24
 80181d0:	46bd      	mov	sp, r7
 80181d2:	bd80      	pop	{r7, pc}
 80181d4:	24001170 	.word	0x24001170
 80181d8:	2400114c 	.word	0x2400114c
 80181dc:	240010fc 	.word	0x240010fc
 80181e0:	24001100 	.word	0x24001100
 80181e4:	24001160 	.word	0x24001160
 80181e8:	24001168 	.word	0x24001168
 80181ec:	24001150 	.word	0x24001150
 80181f0:	24000c74 	.word	0x24000c74
 80181f4:	24000c70 	.word	0x24000c70
 80181f8:	24001158 	.word	0x24001158
 80181fc:	2400115c 	.word	0x2400115c

08018200 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8018200:	b580      	push	{r7, lr}
 8018202:	b086      	sub	sp, #24
 8018204:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8018206:	4b50      	ldr	r3, [pc, #320]	@ (8018348 <vTaskSwitchContext+0x148>)
 8018208:	681b      	ldr	r3, [r3, #0]
 801820a:	2b00      	cmp	r3, #0
 801820c:	d003      	beq.n	8018216 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801820e:	4b4f      	ldr	r3, [pc, #316]	@ (801834c <vTaskSwitchContext+0x14c>)
 8018210:	2201      	movs	r2, #1
 8018212:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8018214:	e093      	b.n	801833e <vTaskSwitchContext+0x13e>
		xYieldPending = pdFALSE;
 8018216:	4b4d      	ldr	r3, [pc, #308]	@ (801834c <vTaskSwitchContext+0x14c>)
 8018218:	2200      	movs	r2, #0
 801821a:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 801821c:	f7e9 fdad 	bl	8001d7a <getRunTimeCounterValue>
 8018220:	4603      	mov	r3, r0
 8018222:	4a4b      	ldr	r2, [pc, #300]	@ (8018350 <vTaskSwitchContext+0x150>)
 8018224:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 8018226:	4b4a      	ldr	r3, [pc, #296]	@ (8018350 <vTaskSwitchContext+0x150>)
 8018228:	681a      	ldr	r2, [r3, #0]
 801822a:	4b4a      	ldr	r3, [pc, #296]	@ (8018354 <vTaskSwitchContext+0x154>)
 801822c:	681b      	ldr	r3, [r3, #0]
 801822e:	429a      	cmp	r2, r3
 8018230:	d909      	bls.n	8018246 <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8018232:	4b49      	ldr	r3, [pc, #292]	@ (8018358 <vTaskSwitchContext+0x158>)
 8018234:	681b      	ldr	r3, [r3, #0]
 8018236:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8018238:	4a45      	ldr	r2, [pc, #276]	@ (8018350 <vTaskSwitchContext+0x150>)
 801823a:	6810      	ldr	r0, [r2, #0]
 801823c:	4a45      	ldr	r2, [pc, #276]	@ (8018354 <vTaskSwitchContext+0x154>)
 801823e:	6812      	ldr	r2, [r2, #0]
 8018240:	1a82      	subs	r2, r0, r2
 8018242:	440a      	add	r2, r1
 8018244:	655a      	str	r2, [r3, #84]	@ 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 8018246:	4b42      	ldr	r3, [pc, #264]	@ (8018350 <vTaskSwitchContext+0x150>)
 8018248:	681b      	ldr	r3, [r3, #0]
 801824a:	4a42      	ldr	r2, [pc, #264]	@ (8018354 <vTaskSwitchContext+0x154>)
 801824c:	6013      	str	r3, [r2, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 801824e:	4b42      	ldr	r3, [pc, #264]	@ (8018358 <vTaskSwitchContext+0x158>)
 8018250:	681b      	ldr	r3, [r3, #0]
 8018252:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8018254:	613b      	str	r3, [r7, #16]
 8018256:	f04f 33a5 	mov.w	r3, #2779096485	@ 0xa5a5a5a5
 801825a:	60fb      	str	r3, [r7, #12]
 801825c:	693b      	ldr	r3, [r7, #16]
 801825e:	681b      	ldr	r3, [r3, #0]
 8018260:	68fa      	ldr	r2, [r7, #12]
 8018262:	429a      	cmp	r2, r3
 8018264:	d111      	bne.n	801828a <vTaskSwitchContext+0x8a>
 8018266:	693b      	ldr	r3, [r7, #16]
 8018268:	3304      	adds	r3, #4
 801826a:	681b      	ldr	r3, [r3, #0]
 801826c:	68fa      	ldr	r2, [r7, #12]
 801826e:	429a      	cmp	r2, r3
 8018270:	d10b      	bne.n	801828a <vTaskSwitchContext+0x8a>
 8018272:	693b      	ldr	r3, [r7, #16]
 8018274:	3308      	adds	r3, #8
 8018276:	681b      	ldr	r3, [r3, #0]
 8018278:	68fa      	ldr	r2, [r7, #12]
 801827a:	429a      	cmp	r2, r3
 801827c:	d105      	bne.n	801828a <vTaskSwitchContext+0x8a>
 801827e:	693b      	ldr	r3, [r7, #16]
 8018280:	330c      	adds	r3, #12
 8018282:	681b      	ldr	r3, [r3, #0]
 8018284:	68fa      	ldr	r2, [r7, #12]
 8018286:	429a      	cmp	r2, r3
 8018288:	d008      	beq.n	801829c <vTaskSwitchContext+0x9c>
 801828a:	4b33      	ldr	r3, [pc, #204]	@ (8018358 <vTaskSwitchContext+0x158>)
 801828c:	681a      	ldr	r2, [r3, #0]
 801828e:	4b32      	ldr	r3, [pc, #200]	@ (8018358 <vTaskSwitchContext+0x158>)
 8018290:	681b      	ldr	r3, [r3, #0]
 8018292:	3334      	adds	r3, #52	@ 0x34
 8018294:	4619      	mov	r1, r3
 8018296:	4610      	mov	r0, r2
 8018298:	f7e9 fd85 	bl	8001da6 <vApplicationStackOverflowHook>
			pxCurrentTCB->iTaskErrno = FreeRTOS_errno;
 801829c:	4b2e      	ldr	r3, [pc, #184]	@ (8018358 <vTaskSwitchContext+0x158>)
 801829e:	681b      	ldr	r3, [r3, #0]
 80182a0:	4a2e      	ldr	r2, [pc, #184]	@ (801835c <vTaskSwitchContext+0x15c>)
 80182a2:	6812      	ldr	r2, [r2, #0]
 80182a4:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80182a8:	4b2d      	ldr	r3, [pc, #180]	@ (8018360 <vTaskSwitchContext+0x160>)
 80182aa:	681b      	ldr	r3, [r3, #0]
 80182ac:	617b      	str	r3, [r7, #20]
 80182ae:	e011      	b.n	80182d4 <vTaskSwitchContext+0xd4>
 80182b0:	697b      	ldr	r3, [r7, #20]
 80182b2:	2b00      	cmp	r3, #0
 80182b4:	d10b      	bne.n	80182ce <vTaskSwitchContext+0xce>
	__asm volatile
 80182b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80182ba:	f383 8811 	msr	BASEPRI, r3
 80182be:	f3bf 8f6f 	isb	sy
 80182c2:	f3bf 8f4f 	dsb	sy
 80182c6:	607b      	str	r3, [r7, #4]
}
 80182c8:	bf00      	nop
 80182ca:	bf00      	nop
 80182cc:	e7fd      	b.n	80182ca <vTaskSwitchContext+0xca>
 80182ce:	697b      	ldr	r3, [r7, #20]
 80182d0:	3b01      	subs	r3, #1
 80182d2:	617b      	str	r3, [r7, #20]
 80182d4:	4923      	ldr	r1, [pc, #140]	@ (8018364 <vTaskSwitchContext+0x164>)
 80182d6:	697a      	ldr	r2, [r7, #20]
 80182d8:	4613      	mov	r3, r2
 80182da:	009b      	lsls	r3, r3, #2
 80182dc:	4413      	add	r3, r2
 80182de:	009b      	lsls	r3, r3, #2
 80182e0:	440b      	add	r3, r1
 80182e2:	681b      	ldr	r3, [r3, #0]
 80182e4:	2b00      	cmp	r3, #0
 80182e6:	d0e3      	beq.n	80182b0 <vTaskSwitchContext+0xb0>
 80182e8:	697a      	ldr	r2, [r7, #20]
 80182ea:	4613      	mov	r3, r2
 80182ec:	009b      	lsls	r3, r3, #2
 80182ee:	4413      	add	r3, r2
 80182f0:	009b      	lsls	r3, r3, #2
 80182f2:	4a1c      	ldr	r2, [pc, #112]	@ (8018364 <vTaskSwitchContext+0x164>)
 80182f4:	4413      	add	r3, r2
 80182f6:	60bb      	str	r3, [r7, #8]
 80182f8:	68bb      	ldr	r3, [r7, #8]
 80182fa:	685b      	ldr	r3, [r3, #4]
 80182fc:	685a      	ldr	r2, [r3, #4]
 80182fe:	68bb      	ldr	r3, [r7, #8]
 8018300:	605a      	str	r2, [r3, #4]
 8018302:	68bb      	ldr	r3, [r7, #8]
 8018304:	685a      	ldr	r2, [r3, #4]
 8018306:	68bb      	ldr	r3, [r7, #8]
 8018308:	3308      	adds	r3, #8
 801830a:	429a      	cmp	r2, r3
 801830c:	d104      	bne.n	8018318 <vTaskSwitchContext+0x118>
 801830e:	68bb      	ldr	r3, [r7, #8]
 8018310:	685b      	ldr	r3, [r3, #4]
 8018312:	685a      	ldr	r2, [r3, #4]
 8018314:	68bb      	ldr	r3, [r7, #8]
 8018316:	605a      	str	r2, [r3, #4]
 8018318:	68bb      	ldr	r3, [r7, #8]
 801831a:	685b      	ldr	r3, [r3, #4]
 801831c:	68db      	ldr	r3, [r3, #12]
 801831e:	4a0e      	ldr	r2, [pc, #56]	@ (8018358 <vTaskSwitchContext+0x158>)
 8018320:	6013      	str	r3, [r2, #0]
 8018322:	4a0f      	ldr	r2, [pc, #60]	@ (8018360 <vTaskSwitchContext+0x160>)
 8018324:	697b      	ldr	r3, [r7, #20]
 8018326:	6013      	str	r3, [r2, #0]
			FreeRTOS_errno = pxCurrentTCB->iTaskErrno;
 8018328:	4b0b      	ldr	r3, [pc, #44]	@ (8018358 <vTaskSwitchContext+0x158>)
 801832a:	681b      	ldr	r3, [r3, #0]
 801832c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8018330:	4a0a      	ldr	r2, [pc, #40]	@ (801835c <vTaskSwitchContext+0x15c>)
 8018332:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8018334:	4b08      	ldr	r3, [pc, #32]	@ (8018358 <vTaskSwitchContext+0x158>)
 8018336:	681b      	ldr	r3, [r3, #0]
 8018338:	3358      	adds	r3, #88	@ 0x58
 801833a:	4a0b      	ldr	r2, [pc, #44]	@ (8018368 <vTaskSwitchContext+0x168>)
 801833c:	6013      	str	r3, [r2, #0]
}
 801833e:	bf00      	nop
 8018340:	3718      	adds	r7, #24
 8018342:	46bd      	mov	sp, r7
 8018344:	bd80      	pop	{r7, pc}
 8018346:	bf00      	nop
 8018348:	24001170 	.word	0x24001170
 801834c:	2400115c 	.word	0x2400115c
 8018350:	24001178 	.word	0x24001178
 8018354:	24001174 	.word	0x24001174
 8018358:	24000c70 	.word	0x24000c70
 801835c:	24001144 	.word	0x24001144
 8018360:	24001150 	.word	0x24001150
 8018364:	24000c74 	.word	0x24000c74
 8018368:	240000e8 	.word	0x240000e8

0801836c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 801836c:	b580      	push	{r7, lr}
 801836e:	b084      	sub	sp, #16
 8018370:	af00      	add	r7, sp, #0
 8018372:	6078      	str	r0, [r7, #4]
 8018374:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8018376:	687b      	ldr	r3, [r7, #4]
 8018378:	2b00      	cmp	r3, #0
 801837a:	d10b      	bne.n	8018394 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 801837c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018380:	f383 8811 	msr	BASEPRI, r3
 8018384:	f3bf 8f6f 	isb	sy
 8018388:	f3bf 8f4f 	dsb	sy
 801838c:	60fb      	str	r3, [r7, #12]
}
 801838e:	bf00      	nop
 8018390:	bf00      	nop
 8018392:	e7fd      	b.n	8018390 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8018394:	4b07      	ldr	r3, [pc, #28]	@ (80183b4 <vTaskPlaceOnEventList+0x48>)
 8018396:	681b      	ldr	r3, [r3, #0]
 8018398:	3318      	adds	r3, #24
 801839a:	4619      	mov	r1, r3
 801839c:	6878      	ldr	r0, [r7, #4]
 801839e:	f7fe fa5c 	bl	801685a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80183a2:	2101      	movs	r1, #1
 80183a4:	6838      	ldr	r0, [r7, #0]
 80183a6:	f000 fd91 	bl	8018ecc <prvAddCurrentTaskToDelayedList>
}
 80183aa:	bf00      	nop
 80183ac:	3710      	adds	r7, #16
 80183ae:	46bd      	mov	sp, r7
 80183b0:	bd80      	pop	{r7, pc}
 80183b2:	bf00      	nop
 80183b4:	24000c70 	.word	0x24000c70

080183b8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80183b8:	b580      	push	{r7, lr}
 80183ba:	b086      	sub	sp, #24
 80183bc:	af00      	add	r7, sp, #0
 80183be:	60f8      	str	r0, [r7, #12]
 80183c0:	60b9      	str	r1, [r7, #8]
 80183c2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80183c4:	68fb      	ldr	r3, [r7, #12]
 80183c6:	2b00      	cmp	r3, #0
 80183c8:	d10b      	bne.n	80183e2 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80183ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80183ce:	f383 8811 	msr	BASEPRI, r3
 80183d2:	f3bf 8f6f 	isb	sy
 80183d6:	f3bf 8f4f 	dsb	sy
 80183da:	617b      	str	r3, [r7, #20]
}
 80183dc:	bf00      	nop
 80183de:	bf00      	nop
 80183e0:	e7fd      	b.n	80183de <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80183e2:	4b0a      	ldr	r3, [pc, #40]	@ (801840c <vTaskPlaceOnEventListRestricted+0x54>)
 80183e4:	681b      	ldr	r3, [r3, #0]
 80183e6:	3318      	adds	r3, #24
 80183e8:	4619      	mov	r1, r3
 80183ea:	68f8      	ldr	r0, [r7, #12]
 80183ec:	f7fe fa11 	bl	8016812 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80183f0:	687b      	ldr	r3, [r7, #4]
 80183f2:	2b00      	cmp	r3, #0
 80183f4:	d002      	beq.n	80183fc <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80183f6:	f04f 33ff 	mov.w	r3, #4294967295
 80183fa:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80183fc:	6879      	ldr	r1, [r7, #4]
 80183fe:	68b8      	ldr	r0, [r7, #8]
 8018400:	f000 fd64 	bl	8018ecc <prvAddCurrentTaskToDelayedList>
	}
 8018404:	bf00      	nop
 8018406:	3718      	adds	r7, #24
 8018408:	46bd      	mov	sp, r7
 801840a:	bd80      	pop	{r7, pc}
 801840c:	24000c70 	.word	0x24000c70

08018410 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8018410:	b580      	push	{r7, lr}
 8018412:	b086      	sub	sp, #24
 8018414:	af00      	add	r7, sp, #0
 8018416:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018418:	687b      	ldr	r3, [r7, #4]
 801841a:	68db      	ldr	r3, [r3, #12]
 801841c:	68db      	ldr	r3, [r3, #12]
 801841e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8018420:	693b      	ldr	r3, [r7, #16]
 8018422:	2b00      	cmp	r3, #0
 8018424:	d10b      	bne.n	801843e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8018426:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801842a:	f383 8811 	msr	BASEPRI, r3
 801842e:	f3bf 8f6f 	isb	sy
 8018432:	f3bf 8f4f 	dsb	sy
 8018436:	60fb      	str	r3, [r7, #12]
}
 8018438:	bf00      	nop
 801843a:	bf00      	nop
 801843c:	e7fd      	b.n	801843a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801843e:	693b      	ldr	r3, [r7, #16]
 8018440:	3318      	adds	r3, #24
 8018442:	4618      	mov	r0, r3
 8018444:	f7fe fa42 	bl	80168cc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8018448:	4b1e      	ldr	r3, [pc, #120]	@ (80184c4 <xTaskRemoveFromEventList+0xb4>)
 801844a:	681b      	ldr	r3, [r3, #0]
 801844c:	2b00      	cmp	r3, #0
 801844e:	d11f      	bne.n	8018490 <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8018450:	693b      	ldr	r3, [r7, #16]
 8018452:	3304      	adds	r3, #4
 8018454:	4618      	mov	r0, r3
 8018456:	f7fe fa39 	bl	80168cc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801845a:	693b      	ldr	r3, [r7, #16]
 801845c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801845e:	4b1a      	ldr	r3, [pc, #104]	@ (80184c8 <xTaskRemoveFromEventList+0xb8>)
 8018460:	681b      	ldr	r3, [r3, #0]
 8018462:	429a      	cmp	r2, r3
 8018464:	d903      	bls.n	801846e <xTaskRemoveFromEventList+0x5e>
 8018466:	693b      	ldr	r3, [r7, #16]
 8018468:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801846a:	4a17      	ldr	r2, [pc, #92]	@ (80184c8 <xTaskRemoveFromEventList+0xb8>)
 801846c:	6013      	str	r3, [r2, #0]
 801846e:	693b      	ldr	r3, [r7, #16]
 8018470:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8018472:	4613      	mov	r3, r2
 8018474:	009b      	lsls	r3, r3, #2
 8018476:	4413      	add	r3, r2
 8018478:	009b      	lsls	r3, r3, #2
 801847a:	4a14      	ldr	r2, [pc, #80]	@ (80184cc <xTaskRemoveFromEventList+0xbc>)
 801847c:	441a      	add	r2, r3
 801847e:	693b      	ldr	r3, [r7, #16]
 8018480:	3304      	adds	r3, #4
 8018482:	4619      	mov	r1, r3
 8018484:	4610      	mov	r0, r2
 8018486:	f7fe f9c4 	bl	8016812 <vListInsertEnd>
			normally left unchanged, because it is automatically reset to a new
			value when the tick count equals xNextTaskUnblockTime.  However if
			tickless idling is used it might be more important to enter sleep mode
			at the earliest possible time - so reset xNextTaskUnblockTime here to
			ensure it is updated at the earliest possible time. */
			prvResetNextTaskUnblockTime();
 801848a:	f000 faa5 	bl	80189d8 <prvResetNextTaskUnblockTime>
 801848e:	e005      	b.n	801849c <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8018490:	693b      	ldr	r3, [r7, #16]
 8018492:	3318      	adds	r3, #24
 8018494:	4619      	mov	r1, r3
 8018496:	480e      	ldr	r0, [pc, #56]	@ (80184d0 <xTaskRemoveFromEventList+0xc0>)
 8018498:	f7fe f9bb 	bl	8016812 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801849c:	693b      	ldr	r3, [r7, #16]
 801849e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80184a0:	4b0c      	ldr	r3, [pc, #48]	@ (80184d4 <xTaskRemoveFromEventList+0xc4>)
 80184a2:	681b      	ldr	r3, [r3, #0]
 80184a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80184a6:	429a      	cmp	r2, r3
 80184a8:	d905      	bls.n	80184b6 <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80184aa:	2301      	movs	r3, #1
 80184ac:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80184ae:	4b0a      	ldr	r3, [pc, #40]	@ (80184d8 <xTaskRemoveFromEventList+0xc8>)
 80184b0:	2201      	movs	r2, #1
 80184b2:	601a      	str	r2, [r3, #0]
 80184b4:	e001      	b.n	80184ba <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 80184b6:	2300      	movs	r3, #0
 80184b8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80184ba:	697b      	ldr	r3, [r7, #20]
}
 80184bc:	4618      	mov	r0, r3
 80184be:	3718      	adds	r7, #24
 80184c0:	46bd      	mov	sp, r7
 80184c2:	bd80      	pop	{r7, pc}
 80184c4:	24001170 	.word	0x24001170
 80184c8:	24001150 	.word	0x24001150
 80184cc:	24000c74 	.word	0x24000c74
 80184d0:	24001104 	.word	0x24001104
 80184d4:	24000c70 	.word	0x24000c70
 80184d8:	2400115c 	.word	0x2400115c

080184dc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80184dc:	b480      	push	{r7}
 80184de:	b083      	sub	sp, #12
 80184e0:	af00      	add	r7, sp, #0
 80184e2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80184e4:	4b06      	ldr	r3, [pc, #24]	@ (8018500 <vTaskInternalSetTimeOutState+0x24>)
 80184e6:	681a      	ldr	r2, [r3, #0]
 80184e8:	687b      	ldr	r3, [r7, #4]
 80184ea:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80184ec:	4b05      	ldr	r3, [pc, #20]	@ (8018504 <vTaskInternalSetTimeOutState+0x28>)
 80184ee:	681a      	ldr	r2, [r3, #0]
 80184f0:	687b      	ldr	r3, [r7, #4]
 80184f2:	605a      	str	r2, [r3, #4]
}
 80184f4:	bf00      	nop
 80184f6:	370c      	adds	r7, #12
 80184f8:	46bd      	mov	sp, r7
 80184fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80184fe:	4770      	bx	lr
 8018500:	24001160 	.word	0x24001160
 8018504:	2400114c 	.word	0x2400114c

08018508 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8018508:	b580      	push	{r7, lr}
 801850a:	b088      	sub	sp, #32
 801850c:	af00      	add	r7, sp, #0
 801850e:	6078      	str	r0, [r7, #4]
 8018510:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8018512:	687b      	ldr	r3, [r7, #4]
 8018514:	2b00      	cmp	r3, #0
 8018516:	d10b      	bne.n	8018530 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8018518:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801851c:	f383 8811 	msr	BASEPRI, r3
 8018520:	f3bf 8f6f 	isb	sy
 8018524:	f3bf 8f4f 	dsb	sy
 8018528:	613b      	str	r3, [r7, #16]
}
 801852a:	bf00      	nop
 801852c:	bf00      	nop
 801852e:	e7fd      	b.n	801852c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8018530:	683b      	ldr	r3, [r7, #0]
 8018532:	2b00      	cmp	r3, #0
 8018534:	d10b      	bne.n	801854e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8018536:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801853a:	f383 8811 	msr	BASEPRI, r3
 801853e:	f3bf 8f6f 	isb	sy
 8018542:	f3bf 8f4f 	dsb	sy
 8018546:	60fb      	str	r3, [r7, #12]
}
 8018548:	bf00      	nop
 801854a:	bf00      	nop
 801854c:	e7fd      	b.n	801854a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 801854e:	f001 f9a3 	bl	8019898 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8018552:	4b24      	ldr	r3, [pc, #144]	@ (80185e4 <xTaskCheckForTimeOut+0xdc>)
 8018554:	681b      	ldr	r3, [r3, #0]
 8018556:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8018558:	687b      	ldr	r3, [r7, #4]
 801855a:	685b      	ldr	r3, [r3, #4]
 801855c:	69ba      	ldr	r2, [r7, #24]
 801855e:	1ad3      	subs	r3, r2, r3
 8018560:	617b      	str	r3, [r7, #20]

		#if( INCLUDE_xTaskAbortDelay == 1 )
			if( pxCurrentTCB->ucDelayAborted != ( uint8_t ) pdFALSE )
 8018562:	4b21      	ldr	r3, [pc, #132]	@ (80185e8 <xTaskCheckForTimeOut+0xe0>)
 8018564:	681b      	ldr	r3, [r3, #0]
 8018566:	f893 30aa 	ldrb.w	r3, [r3, #170]	@ 0xaa
 801856a:	2b00      	cmp	r3, #0
 801856c:	d007      	beq.n	801857e <xTaskCheckForTimeOut+0x76>
			{
				/* The delay was aborted, which is not the same as a time out,
				but has the same result. */
				pxCurrentTCB->ucDelayAborted = pdFALSE;
 801856e:	4b1e      	ldr	r3, [pc, #120]	@ (80185e8 <xTaskCheckForTimeOut+0xe0>)
 8018570:	681b      	ldr	r3, [r3, #0]
 8018572:	2200      	movs	r2, #0
 8018574:	f883 20aa 	strb.w	r2, [r3, #170]	@ 0xaa
				xReturn = pdTRUE;
 8018578:	2301      	movs	r3, #1
 801857a:	61fb      	str	r3, [r7, #28]
 801857c:	e02b      	b.n	80185d6 <xTaskCheckForTimeOut+0xce>
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801857e:	683b      	ldr	r3, [r7, #0]
 8018580:	681b      	ldr	r3, [r3, #0]
 8018582:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018586:	d102      	bne.n	801858e <xTaskCheckForTimeOut+0x86>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8018588:	2300      	movs	r3, #0
 801858a:	61fb      	str	r3, [r7, #28]
 801858c:	e023      	b.n	80185d6 <xTaskCheckForTimeOut+0xce>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801858e:	687b      	ldr	r3, [r7, #4]
 8018590:	681a      	ldr	r2, [r3, #0]
 8018592:	4b16      	ldr	r3, [pc, #88]	@ (80185ec <xTaskCheckForTimeOut+0xe4>)
 8018594:	681b      	ldr	r3, [r3, #0]
 8018596:	429a      	cmp	r2, r3
 8018598:	d007      	beq.n	80185aa <xTaskCheckForTimeOut+0xa2>
 801859a:	687b      	ldr	r3, [r7, #4]
 801859c:	685b      	ldr	r3, [r3, #4]
 801859e:	69ba      	ldr	r2, [r7, #24]
 80185a0:	429a      	cmp	r2, r3
 80185a2:	d302      	bcc.n	80185aa <xTaskCheckForTimeOut+0xa2>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80185a4:	2301      	movs	r3, #1
 80185a6:	61fb      	str	r3, [r7, #28]
 80185a8:	e015      	b.n	80185d6 <xTaskCheckForTimeOut+0xce>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80185aa:	683b      	ldr	r3, [r7, #0]
 80185ac:	681b      	ldr	r3, [r3, #0]
 80185ae:	697a      	ldr	r2, [r7, #20]
 80185b0:	429a      	cmp	r2, r3
 80185b2:	d20b      	bcs.n	80185cc <xTaskCheckForTimeOut+0xc4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80185b4:	683b      	ldr	r3, [r7, #0]
 80185b6:	681a      	ldr	r2, [r3, #0]
 80185b8:	697b      	ldr	r3, [r7, #20]
 80185ba:	1ad2      	subs	r2, r2, r3
 80185bc:	683b      	ldr	r3, [r7, #0]
 80185be:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80185c0:	6878      	ldr	r0, [r7, #4]
 80185c2:	f7ff ff8b 	bl	80184dc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80185c6:	2300      	movs	r3, #0
 80185c8:	61fb      	str	r3, [r7, #28]
 80185ca:	e004      	b.n	80185d6 <xTaskCheckForTimeOut+0xce>
		}
		else
		{
			*pxTicksToWait = 0;
 80185cc:	683b      	ldr	r3, [r7, #0]
 80185ce:	2200      	movs	r2, #0
 80185d0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80185d2:	2301      	movs	r3, #1
 80185d4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80185d6:	f001 f991 	bl	80198fc <vPortExitCritical>

	return xReturn;
 80185da:	69fb      	ldr	r3, [r7, #28]
}
 80185dc:	4618      	mov	r0, r3
 80185de:	3720      	adds	r7, #32
 80185e0:	46bd      	mov	sp, r7
 80185e2:	bd80      	pop	{r7, pc}
 80185e4:	2400114c 	.word	0x2400114c
 80185e8:	24000c70 	.word	0x24000c70
 80185ec:	24001160 	.word	0x24001160

080185f0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80185f0:	b480      	push	{r7}
 80185f2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80185f4:	4b03      	ldr	r3, [pc, #12]	@ (8018604 <vTaskMissedYield+0x14>)
 80185f6:	2201      	movs	r2, #1
 80185f8:	601a      	str	r2, [r3, #0]
}
 80185fa:	bf00      	nop
 80185fc:	46bd      	mov	sp, r7
 80185fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018602:	4770      	bx	lr
 8018604:	2400115c 	.word	0x2400115c

08018608 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8018608:	b580      	push	{r7, lr}
 801860a:	b084      	sub	sp, #16
 801860c:	af00      	add	r7, sp, #0
 801860e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8018610:	f000 f8aa 	bl	8018768 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8018614:	4b19      	ldr	r3, [pc, #100]	@ (801867c <prvIdleTask+0x74>)
 8018616:	681b      	ldr	r3, [r3, #0]
 8018618:	2b01      	cmp	r3, #1
 801861a:	d907      	bls.n	801862c <prvIdleTask+0x24>
			{
				taskYIELD();
 801861c:	4b18      	ldr	r3, [pc, #96]	@ (8018680 <prvIdleTask+0x78>)
 801861e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8018622:	601a      	str	r2, [r3, #0]
 8018624:	f3bf 8f4f 	dsb	sy
 8018628:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 801862c:	f7e9 fbad 	bl	8001d8a <vApplicationIdleHook>
			/* It is not desirable to suspend then resume the scheduler on
			each iteration of the idle task.  Therefore, a preliminary
			test of the expected idle time is performed without the
			scheduler suspended.  The result here is not necessarily
			valid. */
			xExpectedIdleTime = prvGetExpectedIdleTime();
 8018630:	f7ff fb54 	bl	8017cdc <prvGetExpectedIdleTime>
 8018634:	60f8      	str	r0, [r7, #12]

			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 8018636:	68fb      	ldr	r3, [r7, #12]
 8018638:	2b01      	cmp	r3, #1
 801863a:	d9e9      	bls.n	8018610 <prvIdleTask+0x8>
			{
				vTaskSuspendAll();
 801863c:	f7ff fb40 	bl	8017cc0 <vTaskSuspendAll>
				{
					/* Now the scheduler is suspended, the expected idle
					time can be sampled again, and this time its value can
					be used. */
					configASSERT( xNextTaskUnblockTime >= xTickCount );
 8018640:	4b10      	ldr	r3, [pc, #64]	@ (8018684 <prvIdleTask+0x7c>)
 8018642:	681a      	ldr	r2, [r3, #0]
 8018644:	4b10      	ldr	r3, [pc, #64]	@ (8018688 <prvIdleTask+0x80>)
 8018646:	681b      	ldr	r3, [r3, #0]
 8018648:	429a      	cmp	r2, r3
 801864a:	d20b      	bcs.n	8018664 <prvIdleTask+0x5c>
	__asm volatile
 801864c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018650:	f383 8811 	msr	BASEPRI, r3
 8018654:	f3bf 8f6f 	isb	sy
 8018658:	f3bf 8f4f 	dsb	sy
 801865c:	60bb      	str	r3, [r7, #8]
}
 801865e:	bf00      	nop
 8018660:	bf00      	nop
 8018662:	e7fd      	b.n	8018660 <prvIdleTask+0x58>
					xExpectedIdleTime = prvGetExpectedIdleTime();
 8018664:	f7ff fb3a 	bl	8017cdc <prvGetExpectedIdleTime>
 8018668:	60f8      	str	r0, [r7, #12]
					/* Define the following macro to set xExpectedIdleTime to 0
					if the application does not want
					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );

					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 801866a:	68fb      	ldr	r3, [r7, #12]
 801866c:	2b01      	cmp	r3, #1
 801866e:	d902      	bls.n	8018676 <prvIdleTask+0x6e>
					{
						traceLOW_POWER_IDLE_BEGIN();
						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
 8018670:	68f8      	ldr	r0, [r7, #12]
 8018672:	f001 f9c3 	bl	80199fc <vPortSuppressTicksAndSleep>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}
				( void ) xTaskResumeAll();
 8018676:	f7ff fb69 	bl	8017d4c <xTaskResumeAll>
		prvCheckTasksWaitingTermination();
 801867a:	e7c9      	b.n	8018610 <prvIdleTask+0x8>
 801867c:	24000c74 	.word	0x24000c74
 8018680:	e000ed04 	.word	0xe000ed04
 8018684:	24001168 	.word	0x24001168
 8018688:	2400114c 	.word	0x2400114c

0801868c <eTaskConfirmSleepModeStatus>:
/*-----------------------------------------------------------*/

#if( configUSE_TICKLESS_IDLE != 0 )

	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
	{
 801868c:	b480      	push	{r7}
 801868e:	b083      	sub	sp, #12
 8018690:	af00      	add	r7, sp, #0
	/* The idle task exists in addition to the application tasks. */
	const UBaseType_t uxNonApplicationTasks = 1;
 8018692:	2301      	movs	r3, #1
 8018694:	603b      	str	r3, [r7, #0]
	eSleepModeStatus eReturn = eStandardSleep;
 8018696:	2301      	movs	r3, #1
 8018698:	71fb      	strb	r3, [r7, #7]

		/* This function must be called from a critical section. */

		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
 801869a:	4b0f      	ldr	r3, [pc, #60]	@ (80186d8 <eTaskConfirmSleepModeStatus+0x4c>)
 801869c:	681b      	ldr	r3, [r3, #0]
 801869e:	2b00      	cmp	r3, #0
 80186a0:	d002      	beq.n	80186a8 <eTaskConfirmSleepModeStatus+0x1c>
		{
			/* A task was made ready while the scheduler was suspended. */
			eReturn = eAbortSleep;
 80186a2:	2300      	movs	r3, #0
 80186a4:	71fb      	strb	r3, [r7, #7]
 80186a6:	e010      	b.n	80186ca <eTaskConfirmSleepModeStatus+0x3e>
		}
		else if( xYieldPending != pdFALSE )
 80186a8:	4b0c      	ldr	r3, [pc, #48]	@ (80186dc <eTaskConfirmSleepModeStatus+0x50>)
 80186aa:	681b      	ldr	r3, [r3, #0]
 80186ac:	2b00      	cmp	r3, #0
 80186ae:	d002      	beq.n	80186b6 <eTaskConfirmSleepModeStatus+0x2a>
		{
			/* A yield was pended while the scheduler was suspended. */
			eReturn = eAbortSleep;
 80186b0:	2300      	movs	r3, #0
 80186b2:	71fb      	strb	r3, [r7, #7]
 80186b4:	e009      	b.n	80186ca <eTaskConfirmSleepModeStatus+0x3e>
		{
			/* If all the tasks are in the suspended list (which might mean they
			have an infinite block time rather than actually being suspended)
			then it is safe to turn all clocks off and just wait for external
			interrupts. */
			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicationTasks ) )
 80186b6:	4b0a      	ldr	r3, [pc, #40]	@ (80186e0 <eTaskConfirmSleepModeStatus+0x54>)
 80186b8:	681a      	ldr	r2, [r3, #0]
 80186ba:	4b0a      	ldr	r3, [pc, #40]	@ (80186e4 <eTaskConfirmSleepModeStatus+0x58>)
 80186bc:	6819      	ldr	r1, [r3, #0]
 80186be:	683b      	ldr	r3, [r7, #0]
 80186c0:	1acb      	subs	r3, r1, r3
 80186c2:	429a      	cmp	r2, r3
 80186c4:	d101      	bne.n	80186ca <eTaskConfirmSleepModeStatus+0x3e>
			{
				eReturn = eNoTasksWaitingTimeout;
 80186c6:	2302      	movs	r3, #2
 80186c8:	71fb      	strb	r3, [r7, #7]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		return eReturn;
 80186ca:	79fb      	ldrb	r3, [r7, #7]
	}
 80186cc:	4618      	mov	r0, r3
 80186ce:	370c      	adds	r7, #12
 80186d0:	46bd      	mov	sp, r7
 80186d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80186d6:	4770      	bx	lr
 80186d8:	24001104 	.word	0x24001104
 80186dc:	2400115c 	.word	0x2400115c
 80186e0:	24001130 	.word	0x24001130
 80186e4:	24001148 	.word	0x24001148

080186e8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80186e8:	b580      	push	{r7, lr}
 80186ea:	b082      	sub	sp, #8
 80186ec:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80186ee:	2300      	movs	r3, #0
 80186f0:	607b      	str	r3, [r7, #4]
 80186f2:	e00c      	b.n	801870e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80186f4:	687a      	ldr	r2, [r7, #4]
 80186f6:	4613      	mov	r3, r2
 80186f8:	009b      	lsls	r3, r3, #2
 80186fa:	4413      	add	r3, r2
 80186fc:	009b      	lsls	r3, r3, #2
 80186fe:	4a12      	ldr	r2, [pc, #72]	@ (8018748 <prvInitialiseTaskLists+0x60>)
 8018700:	4413      	add	r3, r2
 8018702:	4618      	mov	r0, r3
 8018704:	f7fe f858 	bl	80167b8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8018708:	687b      	ldr	r3, [r7, #4]
 801870a:	3301      	adds	r3, #1
 801870c:	607b      	str	r3, [r7, #4]
 801870e:	687b      	ldr	r3, [r7, #4]
 8018710:	2b37      	cmp	r3, #55	@ 0x37
 8018712:	d9ef      	bls.n	80186f4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8018714:	480d      	ldr	r0, [pc, #52]	@ (801874c <prvInitialiseTaskLists+0x64>)
 8018716:	f7fe f84f 	bl	80167b8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801871a:	480d      	ldr	r0, [pc, #52]	@ (8018750 <prvInitialiseTaskLists+0x68>)
 801871c:	f7fe f84c 	bl	80167b8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8018720:	480c      	ldr	r0, [pc, #48]	@ (8018754 <prvInitialiseTaskLists+0x6c>)
 8018722:	f7fe f849 	bl	80167b8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8018726:	480c      	ldr	r0, [pc, #48]	@ (8018758 <prvInitialiseTaskLists+0x70>)
 8018728:	f7fe f846 	bl	80167b8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 801872c:	480b      	ldr	r0, [pc, #44]	@ (801875c <prvInitialiseTaskLists+0x74>)
 801872e:	f7fe f843 	bl	80167b8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8018732:	4b0b      	ldr	r3, [pc, #44]	@ (8018760 <prvInitialiseTaskLists+0x78>)
 8018734:	4a05      	ldr	r2, [pc, #20]	@ (801874c <prvInitialiseTaskLists+0x64>)
 8018736:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8018738:	4b0a      	ldr	r3, [pc, #40]	@ (8018764 <prvInitialiseTaskLists+0x7c>)
 801873a:	4a05      	ldr	r2, [pc, #20]	@ (8018750 <prvInitialiseTaskLists+0x68>)
 801873c:	601a      	str	r2, [r3, #0]
}
 801873e:	bf00      	nop
 8018740:	3708      	adds	r7, #8
 8018742:	46bd      	mov	sp, r7
 8018744:	bd80      	pop	{r7, pc}
 8018746:	bf00      	nop
 8018748:	24000c74 	.word	0x24000c74
 801874c:	240010d4 	.word	0x240010d4
 8018750:	240010e8 	.word	0x240010e8
 8018754:	24001104 	.word	0x24001104
 8018758:	24001118 	.word	0x24001118
 801875c:	24001130 	.word	0x24001130
 8018760:	240010fc 	.word	0x240010fc
 8018764:	24001100 	.word	0x24001100

08018768 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8018768:	b580      	push	{r7, lr}
 801876a:	b082      	sub	sp, #8
 801876c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801876e:	e019      	b.n	80187a4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8018770:	f001 f892 	bl	8019898 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018774:	4b10      	ldr	r3, [pc, #64]	@ (80187b8 <prvCheckTasksWaitingTermination+0x50>)
 8018776:	68db      	ldr	r3, [r3, #12]
 8018778:	68db      	ldr	r3, [r3, #12]
 801877a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801877c:	687b      	ldr	r3, [r7, #4]
 801877e:	3304      	adds	r3, #4
 8018780:	4618      	mov	r0, r3
 8018782:	f7fe f8a3 	bl	80168cc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8018786:	4b0d      	ldr	r3, [pc, #52]	@ (80187bc <prvCheckTasksWaitingTermination+0x54>)
 8018788:	681b      	ldr	r3, [r3, #0]
 801878a:	3b01      	subs	r3, #1
 801878c:	4a0b      	ldr	r2, [pc, #44]	@ (80187bc <prvCheckTasksWaitingTermination+0x54>)
 801878e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8018790:	4b0b      	ldr	r3, [pc, #44]	@ (80187c0 <prvCheckTasksWaitingTermination+0x58>)
 8018792:	681b      	ldr	r3, [r3, #0]
 8018794:	3b01      	subs	r3, #1
 8018796:	4a0a      	ldr	r2, [pc, #40]	@ (80187c0 <prvCheckTasksWaitingTermination+0x58>)
 8018798:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801879a:	f001 f8af 	bl	80198fc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801879e:	6878      	ldr	r0, [r7, #4]
 80187a0:	f000 f8e4 	bl	801896c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80187a4:	4b06      	ldr	r3, [pc, #24]	@ (80187c0 <prvCheckTasksWaitingTermination+0x58>)
 80187a6:	681b      	ldr	r3, [r3, #0]
 80187a8:	2b00      	cmp	r3, #0
 80187aa:	d1e1      	bne.n	8018770 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80187ac:	bf00      	nop
 80187ae:	bf00      	nop
 80187b0:	3708      	adds	r7, #8
 80187b2:	46bd      	mov	sp, r7
 80187b4:	bd80      	pop	{r7, pc}
 80187b6:	bf00      	nop
 80187b8:	24001118 	.word	0x24001118
 80187bc:	24001148 	.word	0x24001148
 80187c0:	2400112c 	.word	0x2400112c

080187c4 <vTaskGetInfo>:
/*-----------------------------------------------------------*/

#if( configUSE_TRACE_FACILITY == 1 )

	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, eTaskState eState )
	{
 80187c4:	b580      	push	{r7, lr}
 80187c6:	b086      	sub	sp, #24
 80187c8:	af00      	add	r7, sp, #0
 80187ca:	60f8      	str	r0, [r7, #12]
 80187cc:	60b9      	str	r1, [r7, #8]
 80187ce:	607a      	str	r2, [r7, #4]
 80187d0:	70fb      	strb	r3, [r7, #3]
	TCB_t *pxTCB;

		/* xTask is NULL then get the state of the calling task. */
		pxTCB = prvGetTCBFromHandle( xTask );
 80187d2:	68fb      	ldr	r3, [r7, #12]
 80187d4:	2b00      	cmp	r3, #0
 80187d6:	d102      	bne.n	80187de <vTaskGetInfo+0x1a>
 80187d8:	4b2c      	ldr	r3, [pc, #176]	@ (801888c <vTaskGetInfo+0xc8>)
 80187da:	681b      	ldr	r3, [r3, #0]
 80187dc:	e000      	b.n	80187e0 <vTaskGetInfo+0x1c>
 80187de:	68fb      	ldr	r3, [r7, #12]
 80187e0:	617b      	str	r3, [r7, #20]

		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 80187e2:	68bb      	ldr	r3, [r7, #8]
 80187e4:	697a      	ldr	r2, [r7, #20]
 80187e6:	601a      	str	r2, [r3, #0]
		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 80187e8:	697b      	ldr	r3, [r7, #20]
 80187ea:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80187ee:	68bb      	ldr	r3, [r7, #8]
 80187f0:	605a      	str	r2, [r3, #4]
		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 80187f2:	697b      	ldr	r3, [r7, #20]
 80187f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80187f6:	68bb      	ldr	r3, [r7, #8]
 80187f8:	611a      	str	r2, [r3, #16]
		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 80187fa:	697b      	ldr	r3, [r7, #20]
 80187fc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80187fe:	68bb      	ldr	r3, [r7, #8]
 8018800:	61da      	str	r2, [r3, #28]
		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 8018802:	697b      	ldr	r3, [r7, #20]
 8018804:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8018806:	68bb      	ldr	r3, [r7, #8]
 8018808:	609a      	str	r2, [r3, #8]

		#if ( configUSE_MUTEXES == 1 )
		{
			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 801880a:	697b      	ldr	r3, [r7, #20]
 801880c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801880e:	68bb      	ldr	r3, [r7, #8]
 8018810:	615a      	str	r2, [r3, #20]
		}
		#endif

		#if ( configGENERATE_RUN_TIME_STATS == 1 )
		{
			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
 8018812:	697b      	ldr	r3, [r7, #20]
 8018814:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8018816:	68bb      	ldr	r3, [r7, #8]
 8018818:	619a      	str	r2, [r3, #24]
		#endif

		/* Obtaining the task state is a little fiddly, so is only done if the
		value of eState passed into this function is eInvalid - otherwise the
		state is just set to whatever is passed in. */
		if( eState != eInvalid )
 801881a:	78fb      	ldrb	r3, [r7, #3]
 801881c:	2b05      	cmp	r3, #5
 801881e:	d01a      	beq.n	8018856 <vTaskGetInfo+0x92>
		{
			if( pxTCB == pxCurrentTCB )
 8018820:	4b1a      	ldr	r3, [pc, #104]	@ (801888c <vTaskGetInfo+0xc8>)
 8018822:	681b      	ldr	r3, [r3, #0]
 8018824:	697a      	ldr	r2, [r7, #20]
 8018826:	429a      	cmp	r2, r3
 8018828:	d103      	bne.n	8018832 <vTaskGetInfo+0x6e>
			{
				pxTaskStatus->eCurrentState = eRunning;
 801882a:	68bb      	ldr	r3, [r7, #8]
 801882c:	2200      	movs	r2, #0
 801882e:	731a      	strb	r2, [r3, #12]
 8018830:	e018      	b.n	8018864 <vTaskGetInfo+0xa0>
			}
			else
			{
				pxTaskStatus->eCurrentState = eState;
 8018832:	68bb      	ldr	r3, [r7, #8]
 8018834:	78fa      	ldrb	r2, [r7, #3]
 8018836:	731a      	strb	r2, [r3, #12]
				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* If the task is in the suspended list then there is a
					chance it is actually just blocked indefinitely - so really
					it should be reported as being in the Blocked state. */
					if( eState == eSuspended )
 8018838:	78fb      	ldrb	r3, [r7, #3]
 801883a:	2b03      	cmp	r3, #3
 801883c:	d112      	bne.n	8018864 <vTaskGetInfo+0xa0>
					{
						vTaskSuspendAll();
 801883e:	f7ff fa3f 	bl	8017cc0 <vTaskSuspendAll>
						{
							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8018842:	697b      	ldr	r3, [r7, #20]
 8018844:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018846:	2b00      	cmp	r3, #0
 8018848:	d002      	beq.n	8018850 <vTaskGetInfo+0x8c>
							{
								pxTaskStatus->eCurrentState = eBlocked;
 801884a:	68bb      	ldr	r3, [r7, #8]
 801884c:	2202      	movs	r2, #2
 801884e:	731a      	strb	r2, [r3, #12]
							}
						}
						( void ) xTaskResumeAll();
 8018850:	f7ff fa7c 	bl	8017d4c <xTaskResumeAll>
 8018854:	e006      	b.n	8018864 <vTaskGetInfo+0xa0>
				#endif /* INCLUDE_vTaskSuspend */
			}
		}
		else
		{
			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 8018856:	6978      	ldr	r0, [r7, #20]
 8018858:	f7ff f958 	bl	8017b0c <eTaskGetState>
 801885c:	4603      	mov	r3, r0
 801885e:	461a      	mov	r2, r3
 8018860:	68bb      	ldr	r3, [r7, #8]
 8018862:	731a      	strb	r2, [r3, #12]
		}

		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
		parameter is provided to allow it to be skipped. */
		if( xGetFreeStackSpace != pdFALSE )
 8018864:	687b      	ldr	r3, [r7, #4]
 8018866:	2b00      	cmp	r3, #0
 8018868:	d009      	beq.n	801887e <vTaskGetInfo+0xba>
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfStack );
			}
			#else
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 801886a:	697b      	ldr	r3, [r7, #20]
 801886c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801886e:	4618      	mov	r0, r3
 8018870:	f000 f860 	bl	8018934 <prvTaskCheckFreeStackSpace>
 8018874:	4603      	mov	r3, r0
 8018876:	461a      	mov	r2, r3
 8018878:	68bb      	ldr	r3, [r7, #8]
 801887a:	841a      	strh	r2, [r3, #32]
		}
		else
		{
			pxTaskStatus->usStackHighWaterMark = 0;
		}
	}
 801887c:	e002      	b.n	8018884 <vTaskGetInfo+0xc0>
			pxTaskStatus->usStackHighWaterMark = 0;
 801887e:	68bb      	ldr	r3, [r7, #8]
 8018880:	2200      	movs	r2, #0
 8018882:	841a      	strh	r2, [r3, #32]
	}
 8018884:	bf00      	nop
 8018886:	3718      	adds	r7, #24
 8018888:	46bd      	mov	sp, r7
 801888a:	bd80      	pop	{r7, pc}
 801888c:	24000c70 	.word	0x24000c70

08018890 <prvListTasksWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
 8018890:	b580      	push	{r7, lr}
 8018892:	b08a      	sub	sp, #40	@ 0x28
 8018894:	af00      	add	r7, sp, #0
 8018896:	60f8      	str	r0, [r7, #12]
 8018898:	60b9      	str	r1, [r7, #8]
 801889a:	4613      	mov	r3, r2
 801889c:	71fb      	strb	r3, [r7, #7]
	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;
 801889e:	2300      	movs	r3, #0
 80188a0:	627b      	str	r3, [r7, #36]	@ 0x24

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 80188a2:	68bb      	ldr	r3, [r7, #8]
 80188a4:	681b      	ldr	r3, [r3, #0]
 80188a6:	2b00      	cmp	r3, #0
 80188a8:	d03f      	beq.n	801892a <prvListTasksWithinSingleList+0x9a>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80188aa:	68bb      	ldr	r3, [r7, #8]
 80188ac:	623b      	str	r3, [r7, #32]
 80188ae:	6a3b      	ldr	r3, [r7, #32]
 80188b0:	685b      	ldr	r3, [r3, #4]
 80188b2:	685a      	ldr	r2, [r3, #4]
 80188b4:	6a3b      	ldr	r3, [r7, #32]
 80188b6:	605a      	str	r2, [r3, #4]
 80188b8:	6a3b      	ldr	r3, [r7, #32]
 80188ba:	685a      	ldr	r2, [r3, #4]
 80188bc:	6a3b      	ldr	r3, [r7, #32]
 80188be:	3308      	adds	r3, #8
 80188c0:	429a      	cmp	r2, r3
 80188c2:	d104      	bne.n	80188ce <prvListTasksWithinSingleList+0x3e>
 80188c4:	6a3b      	ldr	r3, [r7, #32]
 80188c6:	685b      	ldr	r3, [r3, #4]
 80188c8:	685a      	ldr	r2, [r3, #4]
 80188ca:	6a3b      	ldr	r3, [r7, #32]
 80188cc:	605a      	str	r2, [r3, #4]
 80188ce:	6a3b      	ldr	r3, [r7, #32]
 80188d0:	685b      	ldr	r3, [r3, #4]
 80188d2:	68db      	ldr	r3, [r3, #12]
 80188d4:	61fb      	str	r3, [r7, #28]
			pxTaskStatusArray array for each task that is referenced from
			pxList.  See the definition of TaskStatus_t in task.h for the
			meaning of each TaskStatus_t structure member. */
			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80188d6:	68bb      	ldr	r3, [r7, #8]
 80188d8:	61bb      	str	r3, [r7, #24]
 80188da:	69bb      	ldr	r3, [r7, #24]
 80188dc:	685b      	ldr	r3, [r3, #4]
 80188de:	685a      	ldr	r2, [r3, #4]
 80188e0:	69bb      	ldr	r3, [r7, #24]
 80188e2:	605a      	str	r2, [r3, #4]
 80188e4:	69bb      	ldr	r3, [r7, #24]
 80188e6:	685a      	ldr	r2, [r3, #4]
 80188e8:	69bb      	ldr	r3, [r7, #24]
 80188ea:	3308      	adds	r3, #8
 80188ec:	429a      	cmp	r2, r3
 80188ee:	d104      	bne.n	80188fa <prvListTasksWithinSingleList+0x6a>
 80188f0:	69bb      	ldr	r3, [r7, #24]
 80188f2:	685b      	ldr	r3, [r3, #4]
 80188f4:	685a      	ldr	r2, [r3, #4]
 80188f6:	69bb      	ldr	r3, [r7, #24]
 80188f8:	605a      	str	r2, [r3, #4]
 80188fa:	69bb      	ldr	r3, [r7, #24]
 80188fc:	685b      	ldr	r3, [r3, #4]
 80188fe:	68db      	ldr	r3, [r3, #12]
 8018900:	617b      	str	r3, [r7, #20]
				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 8018902:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8018904:	4613      	mov	r3, r2
 8018906:	00db      	lsls	r3, r3, #3
 8018908:	4413      	add	r3, r2
 801890a:	009b      	lsls	r3, r3, #2
 801890c:	461a      	mov	r2, r3
 801890e:	68fb      	ldr	r3, [r7, #12]
 8018910:	1899      	adds	r1, r3, r2
 8018912:	79fb      	ldrb	r3, [r7, #7]
 8018914:	2201      	movs	r2, #1
 8018916:	6978      	ldr	r0, [r7, #20]
 8018918:	f7ff ff54 	bl	80187c4 <vTaskGetInfo>
				uxTask++;
 801891c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801891e:	3301      	adds	r3, #1
 8018920:	627b      	str	r3, [r7, #36]	@ 0x24
			} while( pxNextTCB != pxFirstTCB );
 8018922:	697a      	ldr	r2, [r7, #20]
 8018924:	69fb      	ldr	r3, [r7, #28]
 8018926:	429a      	cmp	r2, r3
 8018928:	d1d5      	bne.n	80188d6 <prvListTasksWithinSingleList+0x46>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return uxTask;
 801892a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 801892c:	4618      	mov	r0, r3
 801892e:	3728      	adds	r7, #40	@ 0x28
 8018930:	46bd      	mov	sp, r7
 8018932:	bd80      	pop	{r7, pc}

08018934 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 8018934:	b480      	push	{r7}
 8018936:	b085      	sub	sp, #20
 8018938:	af00      	add	r7, sp, #0
 801893a:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 801893c:	2300      	movs	r3, #0
 801893e:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8018940:	e005      	b.n	801894e <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 8018942:	687b      	ldr	r3, [r7, #4]
 8018944:	3301      	adds	r3, #1
 8018946:	607b      	str	r3, [r7, #4]
			ulCount++;
 8018948:	68fb      	ldr	r3, [r7, #12]
 801894a:	3301      	adds	r3, #1
 801894c:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 801894e:	687b      	ldr	r3, [r7, #4]
 8018950:	781b      	ldrb	r3, [r3, #0]
 8018952:	2ba5      	cmp	r3, #165	@ 0xa5
 8018954:	d0f5      	beq.n	8018942 <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 8018956:	68fb      	ldr	r3, [r7, #12]
 8018958:	089b      	lsrs	r3, r3, #2
 801895a:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 801895c:	68fb      	ldr	r3, [r7, #12]
 801895e:	b29b      	uxth	r3, r3
	}
 8018960:	4618      	mov	r0, r3
 8018962:	3714      	adds	r7, #20
 8018964:	46bd      	mov	sp, r7
 8018966:	f85d 7b04 	ldr.w	r7, [sp], #4
 801896a:	4770      	bx	lr

0801896c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 801896c:	b580      	push	{r7, lr}
 801896e:	b084      	sub	sp, #16
 8018970:	af00      	add	r7, sp, #0
 8018972:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8018974:	687b      	ldr	r3, [r7, #4]
 8018976:	3358      	adds	r3, #88	@ 0x58
 8018978:	4618      	mov	r0, r3
 801897a:	f006 fbe3 	bl	801f144 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 801897e:	687b      	ldr	r3, [r7, #4]
 8018980:	f893 30a9 	ldrb.w	r3, [r3, #169]	@ 0xa9
 8018984:	2b00      	cmp	r3, #0
 8018986:	d108      	bne.n	801899a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8018988:	687b      	ldr	r3, [r7, #4]
 801898a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801898c:	4618      	mov	r0, r3
 801898e:	f001 fa5d 	bl	8019e4c <vPortFree>
				vPortFree( pxTCB );
 8018992:	6878      	ldr	r0, [r7, #4]
 8018994:	f001 fa5a 	bl	8019e4c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8018998:	e019      	b.n	80189ce <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801899a:	687b      	ldr	r3, [r7, #4]
 801899c:	f893 30a9 	ldrb.w	r3, [r3, #169]	@ 0xa9
 80189a0:	2b01      	cmp	r3, #1
 80189a2:	d103      	bne.n	80189ac <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80189a4:	6878      	ldr	r0, [r7, #4]
 80189a6:	f001 fa51 	bl	8019e4c <vPortFree>
	}
 80189aa:	e010      	b.n	80189ce <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80189ac:	687b      	ldr	r3, [r7, #4]
 80189ae:	f893 30a9 	ldrb.w	r3, [r3, #169]	@ 0xa9
 80189b2:	2b02      	cmp	r3, #2
 80189b4:	d00b      	beq.n	80189ce <prvDeleteTCB+0x62>
	__asm volatile
 80189b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80189ba:	f383 8811 	msr	BASEPRI, r3
 80189be:	f3bf 8f6f 	isb	sy
 80189c2:	f3bf 8f4f 	dsb	sy
 80189c6:	60fb      	str	r3, [r7, #12]
}
 80189c8:	bf00      	nop
 80189ca:	bf00      	nop
 80189cc:	e7fd      	b.n	80189ca <prvDeleteTCB+0x5e>
	}
 80189ce:	bf00      	nop
 80189d0:	3710      	adds	r7, #16
 80189d2:	46bd      	mov	sp, r7
 80189d4:	bd80      	pop	{r7, pc}
	...

080189d8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80189d8:	b480      	push	{r7}
 80189da:	b083      	sub	sp, #12
 80189dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80189de:	4b0c      	ldr	r3, [pc, #48]	@ (8018a10 <prvResetNextTaskUnblockTime+0x38>)
 80189e0:	681b      	ldr	r3, [r3, #0]
 80189e2:	681b      	ldr	r3, [r3, #0]
 80189e4:	2b00      	cmp	r3, #0
 80189e6:	d104      	bne.n	80189f2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80189e8:	4b0a      	ldr	r3, [pc, #40]	@ (8018a14 <prvResetNextTaskUnblockTime+0x3c>)
 80189ea:	f04f 32ff 	mov.w	r2, #4294967295
 80189ee:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80189f0:	e008      	b.n	8018a04 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80189f2:	4b07      	ldr	r3, [pc, #28]	@ (8018a10 <prvResetNextTaskUnblockTime+0x38>)
 80189f4:	681b      	ldr	r3, [r3, #0]
 80189f6:	68db      	ldr	r3, [r3, #12]
 80189f8:	68db      	ldr	r3, [r3, #12]
 80189fa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80189fc:	687b      	ldr	r3, [r7, #4]
 80189fe:	685b      	ldr	r3, [r3, #4]
 8018a00:	4a04      	ldr	r2, [pc, #16]	@ (8018a14 <prvResetNextTaskUnblockTime+0x3c>)
 8018a02:	6013      	str	r3, [r2, #0]
}
 8018a04:	bf00      	nop
 8018a06:	370c      	adds	r7, #12
 8018a08:	46bd      	mov	sp, r7
 8018a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a0e:	4770      	bx	lr
 8018a10:	240010fc 	.word	0x240010fc
 8018a14:	24001168 	.word	0x24001168

08018a18 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8018a18:	b480      	push	{r7}
 8018a1a:	b083      	sub	sp, #12
 8018a1c:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8018a1e:	4b05      	ldr	r3, [pc, #20]	@ (8018a34 <xTaskGetCurrentTaskHandle+0x1c>)
 8018a20:	681b      	ldr	r3, [r3, #0]
 8018a22:	607b      	str	r3, [r7, #4]

		return xReturn;
 8018a24:	687b      	ldr	r3, [r7, #4]
	}
 8018a26:	4618      	mov	r0, r3
 8018a28:	370c      	adds	r7, #12
 8018a2a:	46bd      	mov	sp, r7
 8018a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a30:	4770      	bx	lr
 8018a32:	bf00      	nop
 8018a34:	24000c70 	.word	0x24000c70

08018a38 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8018a38:	b480      	push	{r7}
 8018a3a:	b083      	sub	sp, #12
 8018a3c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8018a3e:	4b0b      	ldr	r3, [pc, #44]	@ (8018a6c <xTaskGetSchedulerState+0x34>)
 8018a40:	681b      	ldr	r3, [r3, #0]
 8018a42:	2b00      	cmp	r3, #0
 8018a44:	d102      	bne.n	8018a4c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8018a46:	2301      	movs	r3, #1
 8018a48:	607b      	str	r3, [r7, #4]
 8018a4a:	e008      	b.n	8018a5e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8018a4c:	4b08      	ldr	r3, [pc, #32]	@ (8018a70 <xTaskGetSchedulerState+0x38>)
 8018a4e:	681b      	ldr	r3, [r3, #0]
 8018a50:	2b00      	cmp	r3, #0
 8018a52:	d102      	bne.n	8018a5a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8018a54:	2302      	movs	r3, #2
 8018a56:	607b      	str	r3, [r7, #4]
 8018a58:	e001      	b.n	8018a5e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8018a5a:	2300      	movs	r3, #0
 8018a5c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8018a5e:	687b      	ldr	r3, [r7, #4]
	}
 8018a60:	4618      	mov	r0, r3
 8018a62:	370c      	adds	r7, #12
 8018a64:	46bd      	mov	sp, r7
 8018a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a6a:	4770      	bx	lr
 8018a6c:	24001154 	.word	0x24001154
 8018a70:	24001170 	.word	0x24001170

08018a74 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8018a74:	b580      	push	{r7, lr}
 8018a76:	b084      	sub	sp, #16
 8018a78:	af00      	add	r7, sp, #0
 8018a7a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8018a7c:	687b      	ldr	r3, [r7, #4]
 8018a7e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8018a80:	2300      	movs	r3, #0
 8018a82:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8018a84:	687b      	ldr	r3, [r7, #4]
 8018a86:	2b00      	cmp	r3, #0
 8018a88:	d051      	beq.n	8018b2e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8018a8a:	68bb      	ldr	r3, [r7, #8]
 8018a8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8018a8e:	4b2a      	ldr	r3, [pc, #168]	@ (8018b38 <xTaskPriorityInherit+0xc4>)
 8018a90:	681b      	ldr	r3, [r3, #0]
 8018a92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018a94:	429a      	cmp	r2, r3
 8018a96:	d241      	bcs.n	8018b1c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8018a98:	68bb      	ldr	r3, [r7, #8]
 8018a9a:	699b      	ldr	r3, [r3, #24]
 8018a9c:	2b00      	cmp	r3, #0
 8018a9e:	db06      	blt.n	8018aae <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018aa0:	4b25      	ldr	r3, [pc, #148]	@ (8018b38 <xTaskPriorityInherit+0xc4>)
 8018aa2:	681b      	ldr	r3, [r3, #0]
 8018aa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018aa6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8018aaa:	68bb      	ldr	r3, [r7, #8]
 8018aac:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8018aae:	68bb      	ldr	r3, [r7, #8]
 8018ab0:	6959      	ldr	r1, [r3, #20]
 8018ab2:	68bb      	ldr	r3, [r7, #8]
 8018ab4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8018ab6:	4613      	mov	r3, r2
 8018ab8:	009b      	lsls	r3, r3, #2
 8018aba:	4413      	add	r3, r2
 8018abc:	009b      	lsls	r3, r3, #2
 8018abe:	4a1f      	ldr	r2, [pc, #124]	@ (8018b3c <xTaskPriorityInherit+0xc8>)
 8018ac0:	4413      	add	r3, r2
 8018ac2:	4299      	cmp	r1, r3
 8018ac4:	d122      	bne.n	8018b0c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8018ac6:	68bb      	ldr	r3, [r7, #8]
 8018ac8:	3304      	adds	r3, #4
 8018aca:	4618      	mov	r0, r3
 8018acc:	f7fd fefe 	bl	80168cc <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8018ad0:	4b19      	ldr	r3, [pc, #100]	@ (8018b38 <xTaskPriorityInherit+0xc4>)
 8018ad2:	681b      	ldr	r3, [r3, #0]
 8018ad4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8018ad6:	68bb      	ldr	r3, [r7, #8]
 8018ad8:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8018ada:	68bb      	ldr	r3, [r7, #8]
 8018adc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8018ade:	4b18      	ldr	r3, [pc, #96]	@ (8018b40 <xTaskPriorityInherit+0xcc>)
 8018ae0:	681b      	ldr	r3, [r3, #0]
 8018ae2:	429a      	cmp	r2, r3
 8018ae4:	d903      	bls.n	8018aee <xTaskPriorityInherit+0x7a>
 8018ae6:	68bb      	ldr	r3, [r7, #8]
 8018ae8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018aea:	4a15      	ldr	r2, [pc, #84]	@ (8018b40 <xTaskPriorityInherit+0xcc>)
 8018aec:	6013      	str	r3, [r2, #0]
 8018aee:	68bb      	ldr	r3, [r7, #8]
 8018af0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8018af2:	4613      	mov	r3, r2
 8018af4:	009b      	lsls	r3, r3, #2
 8018af6:	4413      	add	r3, r2
 8018af8:	009b      	lsls	r3, r3, #2
 8018afa:	4a10      	ldr	r2, [pc, #64]	@ (8018b3c <xTaskPriorityInherit+0xc8>)
 8018afc:	441a      	add	r2, r3
 8018afe:	68bb      	ldr	r3, [r7, #8]
 8018b00:	3304      	adds	r3, #4
 8018b02:	4619      	mov	r1, r3
 8018b04:	4610      	mov	r0, r2
 8018b06:	f7fd fe84 	bl	8016812 <vListInsertEnd>
 8018b0a:	e004      	b.n	8018b16 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8018b0c:	4b0a      	ldr	r3, [pc, #40]	@ (8018b38 <xTaskPriorityInherit+0xc4>)
 8018b0e:	681b      	ldr	r3, [r3, #0]
 8018b10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8018b12:	68bb      	ldr	r3, [r7, #8]
 8018b14:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8018b16:	2301      	movs	r3, #1
 8018b18:	60fb      	str	r3, [r7, #12]
 8018b1a:	e008      	b.n	8018b2e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8018b1c:	68bb      	ldr	r3, [r7, #8]
 8018b1e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8018b20:	4b05      	ldr	r3, [pc, #20]	@ (8018b38 <xTaskPriorityInherit+0xc4>)
 8018b22:	681b      	ldr	r3, [r3, #0]
 8018b24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018b26:	429a      	cmp	r2, r3
 8018b28:	d201      	bcs.n	8018b2e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8018b2a:	2301      	movs	r3, #1
 8018b2c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8018b2e:	68fb      	ldr	r3, [r7, #12]
	}
 8018b30:	4618      	mov	r0, r3
 8018b32:	3710      	adds	r7, #16
 8018b34:	46bd      	mov	sp, r7
 8018b36:	bd80      	pop	{r7, pc}
 8018b38:	24000c70 	.word	0x24000c70
 8018b3c:	24000c74 	.word	0x24000c74
 8018b40:	24001150 	.word	0x24001150

08018b44 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8018b44:	b580      	push	{r7, lr}
 8018b46:	b086      	sub	sp, #24
 8018b48:	af00      	add	r7, sp, #0
 8018b4a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8018b4c:	687b      	ldr	r3, [r7, #4]
 8018b4e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8018b50:	2300      	movs	r3, #0
 8018b52:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8018b54:	687b      	ldr	r3, [r7, #4]
 8018b56:	2b00      	cmp	r3, #0
 8018b58:	d058      	beq.n	8018c0c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8018b5a:	4b2f      	ldr	r3, [pc, #188]	@ (8018c18 <xTaskPriorityDisinherit+0xd4>)
 8018b5c:	681b      	ldr	r3, [r3, #0]
 8018b5e:	693a      	ldr	r2, [r7, #16]
 8018b60:	429a      	cmp	r2, r3
 8018b62:	d00b      	beq.n	8018b7c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8018b64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018b68:	f383 8811 	msr	BASEPRI, r3
 8018b6c:	f3bf 8f6f 	isb	sy
 8018b70:	f3bf 8f4f 	dsb	sy
 8018b74:	60fb      	str	r3, [r7, #12]
}
 8018b76:	bf00      	nop
 8018b78:	bf00      	nop
 8018b7a:	e7fd      	b.n	8018b78 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8018b7c:	693b      	ldr	r3, [r7, #16]
 8018b7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8018b80:	2b00      	cmp	r3, #0
 8018b82:	d10b      	bne.n	8018b9c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8018b84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018b88:	f383 8811 	msr	BASEPRI, r3
 8018b8c:	f3bf 8f6f 	isb	sy
 8018b90:	f3bf 8f4f 	dsb	sy
 8018b94:	60bb      	str	r3, [r7, #8]
}
 8018b96:	bf00      	nop
 8018b98:	bf00      	nop
 8018b9a:	e7fd      	b.n	8018b98 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8018b9c:	693b      	ldr	r3, [r7, #16]
 8018b9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8018ba0:	1e5a      	subs	r2, r3, #1
 8018ba2:	693b      	ldr	r3, [r7, #16]
 8018ba4:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8018ba6:	693b      	ldr	r3, [r7, #16]
 8018ba8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8018baa:	693b      	ldr	r3, [r7, #16]
 8018bac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8018bae:	429a      	cmp	r2, r3
 8018bb0:	d02c      	beq.n	8018c0c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8018bb2:	693b      	ldr	r3, [r7, #16]
 8018bb4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8018bb6:	2b00      	cmp	r3, #0
 8018bb8:	d128      	bne.n	8018c0c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8018bba:	693b      	ldr	r3, [r7, #16]
 8018bbc:	3304      	adds	r3, #4
 8018bbe:	4618      	mov	r0, r3
 8018bc0:	f7fd fe84 	bl	80168cc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8018bc4:	693b      	ldr	r3, [r7, #16]
 8018bc6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8018bc8:	693b      	ldr	r3, [r7, #16]
 8018bca:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018bcc:	693b      	ldr	r3, [r7, #16]
 8018bce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018bd0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8018bd4:	693b      	ldr	r3, [r7, #16]
 8018bd6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8018bd8:	693b      	ldr	r3, [r7, #16]
 8018bda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8018bdc:	4b0f      	ldr	r3, [pc, #60]	@ (8018c1c <xTaskPriorityDisinherit+0xd8>)
 8018bde:	681b      	ldr	r3, [r3, #0]
 8018be0:	429a      	cmp	r2, r3
 8018be2:	d903      	bls.n	8018bec <xTaskPriorityDisinherit+0xa8>
 8018be4:	693b      	ldr	r3, [r7, #16]
 8018be6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018be8:	4a0c      	ldr	r2, [pc, #48]	@ (8018c1c <xTaskPriorityDisinherit+0xd8>)
 8018bea:	6013      	str	r3, [r2, #0]
 8018bec:	693b      	ldr	r3, [r7, #16]
 8018bee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8018bf0:	4613      	mov	r3, r2
 8018bf2:	009b      	lsls	r3, r3, #2
 8018bf4:	4413      	add	r3, r2
 8018bf6:	009b      	lsls	r3, r3, #2
 8018bf8:	4a09      	ldr	r2, [pc, #36]	@ (8018c20 <xTaskPriorityDisinherit+0xdc>)
 8018bfa:	441a      	add	r2, r3
 8018bfc:	693b      	ldr	r3, [r7, #16]
 8018bfe:	3304      	adds	r3, #4
 8018c00:	4619      	mov	r1, r3
 8018c02:	4610      	mov	r0, r2
 8018c04:	f7fd fe05 	bl	8016812 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8018c08:	2301      	movs	r3, #1
 8018c0a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8018c0c:	697b      	ldr	r3, [r7, #20]
	}
 8018c0e:	4618      	mov	r0, r3
 8018c10:	3718      	adds	r7, #24
 8018c12:	46bd      	mov	sp, r7
 8018c14:	bd80      	pop	{r7, pc}
 8018c16:	bf00      	nop
 8018c18:	24000c70 	.word	0x24000c70
 8018c1c:	24001150 	.word	0x24001150
 8018c20:	24000c74 	.word	0x24000c74

08018c24 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8018c24:	b580      	push	{r7, lr}
 8018c26:	b088      	sub	sp, #32
 8018c28:	af00      	add	r7, sp, #0
 8018c2a:	6078      	str	r0, [r7, #4]
 8018c2c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8018c2e:	687b      	ldr	r3, [r7, #4]
 8018c30:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8018c32:	2301      	movs	r3, #1
 8018c34:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8018c36:	687b      	ldr	r3, [r7, #4]
 8018c38:	2b00      	cmp	r3, #0
 8018c3a:	d06c      	beq.n	8018d16 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8018c3c:	69bb      	ldr	r3, [r7, #24]
 8018c3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8018c40:	2b00      	cmp	r3, #0
 8018c42:	d10b      	bne.n	8018c5c <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8018c44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018c48:	f383 8811 	msr	BASEPRI, r3
 8018c4c:	f3bf 8f6f 	isb	sy
 8018c50:	f3bf 8f4f 	dsb	sy
 8018c54:	60fb      	str	r3, [r7, #12]
}
 8018c56:	bf00      	nop
 8018c58:	bf00      	nop
 8018c5a:	e7fd      	b.n	8018c58 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8018c5c:	69bb      	ldr	r3, [r7, #24]
 8018c5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8018c60:	683a      	ldr	r2, [r7, #0]
 8018c62:	429a      	cmp	r2, r3
 8018c64:	d902      	bls.n	8018c6c <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8018c66:	683b      	ldr	r3, [r7, #0]
 8018c68:	61fb      	str	r3, [r7, #28]
 8018c6a:	e002      	b.n	8018c72 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8018c6c:	69bb      	ldr	r3, [r7, #24]
 8018c6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8018c70:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8018c72:	69bb      	ldr	r3, [r7, #24]
 8018c74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018c76:	69fa      	ldr	r2, [r7, #28]
 8018c78:	429a      	cmp	r2, r3
 8018c7a:	d04c      	beq.n	8018d16 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8018c7c:	69bb      	ldr	r3, [r7, #24]
 8018c7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8018c80:	697a      	ldr	r2, [r7, #20]
 8018c82:	429a      	cmp	r2, r3
 8018c84:	d147      	bne.n	8018d16 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8018c86:	4b26      	ldr	r3, [pc, #152]	@ (8018d20 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8018c88:	681b      	ldr	r3, [r3, #0]
 8018c8a:	69ba      	ldr	r2, [r7, #24]
 8018c8c:	429a      	cmp	r2, r3
 8018c8e:	d10b      	bne.n	8018ca8 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8018c90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018c94:	f383 8811 	msr	BASEPRI, r3
 8018c98:	f3bf 8f6f 	isb	sy
 8018c9c:	f3bf 8f4f 	dsb	sy
 8018ca0:	60bb      	str	r3, [r7, #8]
}
 8018ca2:	bf00      	nop
 8018ca4:	bf00      	nop
 8018ca6:	e7fd      	b.n	8018ca4 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8018ca8:	69bb      	ldr	r3, [r7, #24]
 8018caa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018cac:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8018cae:	69bb      	ldr	r3, [r7, #24]
 8018cb0:	69fa      	ldr	r2, [r7, #28]
 8018cb2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8018cb4:	69bb      	ldr	r3, [r7, #24]
 8018cb6:	699b      	ldr	r3, [r3, #24]
 8018cb8:	2b00      	cmp	r3, #0
 8018cba:	db04      	blt.n	8018cc6 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018cbc:	69fb      	ldr	r3, [r7, #28]
 8018cbe:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8018cc2:	69bb      	ldr	r3, [r7, #24]
 8018cc4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8018cc6:	69bb      	ldr	r3, [r7, #24]
 8018cc8:	6959      	ldr	r1, [r3, #20]
 8018cca:	693a      	ldr	r2, [r7, #16]
 8018ccc:	4613      	mov	r3, r2
 8018cce:	009b      	lsls	r3, r3, #2
 8018cd0:	4413      	add	r3, r2
 8018cd2:	009b      	lsls	r3, r3, #2
 8018cd4:	4a13      	ldr	r2, [pc, #76]	@ (8018d24 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8018cd6:	4413      	add	r3, r2
 8018cd8:	4299      	cmp	r1, r3
 8018cda:	d11c      	bne.n	8018d16 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8018cdc:	69bb      	ldr	r3, [r7, #24]
 8018cde:	3304      	adds	r3, #4
 8018ce0:	4618      	mov	r0, r3
 8018ce2:	f7fd fdf3 	bl	80168cc <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8018ce6:	69bb      	ldr	r3, [r7, #24]
 8018ce8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8018cea:	4b0f      	ldr	r3, [pc, #60]	@ (8018d28 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8018cec:	681b      	ldr	r3, [r3, #0]
 8018cee:	429a      	cmp	r2, r3
 8018cf0:	d903      	bls.n	8018cfa <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8018cf2:	69bb      	ldr	r3, [r7, #24]
 8018cf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018cf6:	4a0c      	ldr	r2, [pc, #48]	@ (8018d28 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8018cf8:	6013      	str	r3, [r2, #0]
 8018cfa:	69bb      	ldr	r3, [r7, #24]
 8018cfc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8018cfe:	4613      	mov	r3, r2
 8018d00:	009b      	lsls	r3, r3, #2
 8018d02:	4413      	add	r3, r2
 8018d04:	009b      	lsls	r3, r3, #2
 8018d06:	4a07      	ldr	r2, [pc, #28]	@ (8018d24 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8018d08:	441a      	add	r2, r3
 8018d0a:	69bb      	ldr	r3, [r7, #24]
 8018d0c:	3304      	adds	r3, #4
 8018d0e:	4619      	mov	r1, r3
 8018d10:	4610      	mov	r0, r2
 8018d12:	f7fd fd7e 	bl	8016812 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8018d16:	bf00      	nop
 8018d18:	3720      	adds	r7, #32
 8018d1a:	46bd      	mov	sp, r7
 8018d1c:	bd80      	pop	{r7, pc}
 8018d1e:	bf00      	nop
 8018d20:	24000c70 	.word	0x24000c70
 8018d24:	24000c74 	.word	0x24000c74
 8018d28:	24001150 	.word	0x24001150

08018d2c <prvWriteNameToBuffer>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
	{
 8018d2c:	b580      	push	{r7, lr}
 8018d2e:	b084      	sub	sp, #16
 8018d30:	af00      	add	r7, sp, #0
 8018d32:	6078      	str	r0, [r7, #4]
 8018d34:	6039      	str	r1, [r7, #0]
	size_t x;

		/* Start by copying the entire string. */
		strcpy( pcBuffer, pcTaskName );
 8018d36:	6839      	ldr	r1, [r7, #0]
 8018d38:	6878      	ldr	r0, [r7, #4]
 8018d3a:	f006 fa9b 	bl	801f274 <strcpy>

		/* Pad the end of the string with spaces to ensure columns line up when
		printed out. */
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 8018d3e:	6878      	ldr	r0, [r7, #4]
 8018d40:	f7e7 faf0 	bl	8000324 <strlen>
 8018d44:	60f8      	str	r0, [r7, #12]
 8018d46:	e007      	b.n	8018d58 <prvWriteNameToBuffer+0x2c>
		{
			pcBuffer[ x ] = ' ';
 8018d48:	687a      	ldr	r2, [r7, #4]
 8018d4a:	68fb      	ldr	r3, [r7, #12]
 8018d4c:	4413      	add	r3, r2
 8018d4e:	2220      	movs	r2, #32
 8018d50:	701a      	strb	r2, [r3, #0]
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 8018d52:	68fb      	ldr	r3, [r7, #12]
 8018d54:	3301      	adds	r3, #1
 8018d56:	60fb      	str	r3, [r7, #12]
 8018d58:	68fb      	ldr	r3, [r7, #12]
 8018d5a:	2b0e      	cmp	r3, #14
 8018d5c:	d9f4      	bls.n	8018d48 <prvWriteNameToBuffer+0x1c>
		}

		/* Terminate. */
		pcBuffer[ x ] = ( char ) 0x00;
 8018d5e:	687a      	ldr	r2, [r7, #4]
 8018d60:	68fb      	ldr	r3, [r7, #12]
 8018d62:	4413      	add	r3, r2
 8018d64:	2200      	movs	r2, #0
 8018d66:	701a      	strb	r2, [r3, #0]

		/* Return the new end of string. */
		return &( pcBuffer[ x ] );
 8018d68:	687a      	ldr	r2, [r7, #4]
 8018d6a:	68fb      	ldr	r3, [r7, #12]
 8018d6c:	4413      	add	r3, r2
	}
 8018d6e:	4618      	mov	r0, r3
 8018d70:	3710      	adds	r7, #16
 8018d72:	46bd      	mov	sp, r7
 8018d74:	bd80      	pop	{r7, pc}
	...

08018d78 <vTaskList>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	void vTaskList( char * pcWriteBuffer )
	{
 8018d78:	b590      	push	{r4, r7, lr}
 8018d7a:	b089      	sub	sp, #36	@ 0x24
 8018d7c:	af02      	add	r7, sp, #8
 8018d7e:	6078      	str	r0, [r7, #4]
		 * through a call to vTaskList().
		 */


		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = ( char ) 0x00;
 8018d80:	687b      	ldr	r3, [r7, #4]
 8018d82:	2200      	movs	r2, #0
 8018d84:	701a      	strb	r2, [r3, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 8018d86:	4b45      	ldr	r3, [pc, #276]	@ (8018e9c <vTaskList+0x124>)
 8018d88:	681b      	ldr	r3, [r3, #0]
 8018d8a:	60fb      	str	r3, [r7, #12]

		/* Allocate an array index for each task.  NOTE!  if
		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
		equate to NULL. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation allocates a struct that has the alignment requirements of a pointer. */
 8018d8c:	4b43      	ldr	r3, [pc, #268]	@ (8018e9c <vTaskList+0x124>)
 8018d8e:	681a      	ldr	r2, [r3, #0]
 8018d90:	4613      	mov	r3, r2
 8018d92:	00db      	lsls	r3, r3, #3
 8018d94:	4413      	add	r3, r2
 8018d96:	009b      	lsls	r3, r3, #2
 8018d98:	4618      	mov	r0, r3
 8018d9a:	f000 ff83 	bl	8019ca4 <pvPortMalloc>
 8018d9e:	60b8      	str	r0, [r7, #8]

		if( pxTaskStatusArray != NULL )
 8018da0:	68bb      	ldr	r3, [r7, #8]
 8018da2:	2b00      	cmp	r3, #0
 8018da4:	d076      	beq.n	8018e94 <vTaskList+0x11c>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
 8018da6:	2200      	movs	r2, #0
 8018da8:	68f9      	ldr	r1, [r7, #12]
 8018daa:	68b8      	ldr	r0, [r7, #8]
 8018dac:	f7ff f8ae 	bl	8017f0c <uxTaskGetSystemState>
 8018db0:	60f8      	str	r0, [r7, #12]

			/* Create a human readable table from the binary data. */
			for( x = 0; x < uxArraySize; x++ )
 8018db2:	2300      	movs	r3, #0
 8018db4:	617b      	str	r3, [r7, #20]
 8018db6:	e066      	b.n	8018e86 <vTaskList+0x10e>
			{
				switch( pxTaskStatusArray[ x ].eCurrentState )
 8018db8:	697a      	ldr	r2, [r7, #20]
 8018dba:	4613      	mov	r3, r2
 8018dbc:	00db      	lsls	r3, r3, #3
 8018dbe:	4413      	add	r3, r2
 8018dc0:	009b      	lsls	r3, r3, #2
 8018dc2:	461a      	mov	r2, r3
 8018dc4:	68bb      	ldr	r3, [r7, #8]
 8018dc6:	4413      	add	r3, r2
 8018dc8:	7b1b      	ldrb	r3, [r3, #12]
 8018dca:	2b04      	cmp	r3, #4
 8018dcc:	d81b      	bhi.n	8018e06 <vTaskList+0x8e>
 8018dce:	a201      	add	r2, pc, #4	@ (adr r2, 8018dd4 <vTaskList+0x5c>)
 8018dd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018dd4:	08018de9 	.word	0x08018de9
 8018dd8:	08018def 	.word	0x08018def
 8018ddc:	08018df5 	.word	0x08018df5
 8018de0:	08018dfb 	.word	0x08018dfb
 8018de4:	08018e01 	.word	0x08018e01
				{
					case eRunning:		cStatus = tskRUNNING_CHAR;
 8018de8:	2358      	movs	r3, #88	@ 0x58
 8018dea:	74fb      	strb	r3, [r7, #19]
										break;
 8018dec:	e00e      	b.n	8018e0c <vTaskList+0x94>

					case eReady:		cStatus = tskREADY_CHAR;
 8018dee:	2352      	movs	r3, #82	@ 0x52
 8018df0:	74fb      	strb	r3, [r7, #19]
										break;
 8018df2:	e00b      	b.n	8018e0c <vTaskList+0x94>

					case eBlocked:		cStatus = tskBLOCKED_CHAR;
 8018df4:	2342      	movs	r3, #66	@ 0x42
 8018df6:	74fb      	strb	r3, [r7, #19]
										break;
 8018df8:	e008      	b.n	8018e0c <vTaskList+0x94>

					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
 8018dfa:	2353      	movs	r3, #83	@ 0x53
 8018dfc:	74fb      	strb	r3, [r7, #19]
										break;
 8018dfe:	e005      	b.n	8018e0c <vTaskList+0x94>

					case eDeleted:		cStatus = tskDELETED_CHAR;
 8018e00:	2344      	movs	r3, #68	@ 0x44
 8018e02:	74fb      	strb	r3, [r7, #19]
										break;
 8018e04:	e002      	b.n	8018e0c <vTaskList+0x94>

					case eInvalid:		/* Fall through. */
					default:			/* Should not get here, but it is included
										to prevent static checking errors. */
										cStatus = ( char ) 0x00;
 8018e06:	2300      	movs	r3, #0
 8018e08:	74fb      	strb	r3, [r7, #19]
										break;
 8018e0a:	bf00      	nop
				}

				/* Write the task name to the string, padding with spaces so it
				can be printed in tabular form more easily. */
				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 8018e0c:	697a      	ldr	r2, [r7, #20]
 8018e0e:	4613      	mov	r3, r2
 8018e10:	00db      	lsls	r3, r3, #3
 8018e12:	4413      	add	r3, r2
 8018e14:	009b      	lsls	r3, r3, #2
 8018e16:	461a      	mov	r2, r3
 8018e18:	68bb      	ldr	r3, [r7, #8]
 8018e1a:	4413      	add	r3, r2
 8018e1c:	685b      	ldr	r3, [r3, #4]
 8018e1e:	4619      	mov	r1, r3
 8018e20:	6878      	ldr	r0, [r7, #4]
 8018e22:	f7ff ff83 	bl	8018d2c <prvWriteNameToBuffer>
 8018e26:	6078      	str	r0, [r7, #4]

				/* Write the rest of the string. */
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 8018e28:	7cf9      	ldrb	r1, [r7, #19]
 8018e2a:	697a      	ldr	r2, [r7, #20]
 8018e2c:	4613      	mov	r3, r2
 8018e2e:	00db      	lsls	r3, r3, #3
 8018e30:	4413      	add	r3, r2
 8018e32:	009b      	lsls	r3, r3, #2
 8018e34:	461a      	mov	r2, r3
 8018e36:	68bb      	ldr	r3, [r7, #8]
 8018e38:	4413      	add	r3, r2
 8018e3a:	6918      	ldr	r0, [r3, #16]
 8018e3c:	697a      	ldr	r2, [r7, #20]
 8018e3e:	4613      	mov	r3, r2
 8018e40:	00db      	lsls	r3, r3, #3
 8018e42:	4413      	add	r3, r2
 8018e44:	009b      	lsls	r3, r3, #2
 8018e46:	461a      	mov	r2, r3
 8018e48:	68bb      	ldr	r3, [r7, #8]
 8018e4a:	4413      	add	r3, r2
 8018e4c:	8c1b      	ldrh	r3, [r3, #32]
 8018e4e:	461c      	mov	r4, r3
 8018e50:	697a      	ldr	r2, [r7, #20]
 8018e52:	4613      	mov	r3, r2
 8018e54:	00db      	lsls	r3, r3, #3
 8018e56:	4413      	add	r3, r2
 8018e58:	009b      	lsls	r3, r3, #2
 8018e5a:	461a      	mov	r2, r3
 8018e5c:	68bb      	ldr	r3, [r7, #8]
 8018e5e:	4413      	add	r3, r2
 8018e60:	689b      	ldr	r3, [r3, #8]
 8018e62:	9301      	str	r3, [sp, #4]
 8018e64:	9400      	str	r4, [sp, #0]
 8018e66:	4603      	mov	r3, r0
 8018e68:	460a      	mov	r2, r1
 8018e6a:	490d      	ldr	r1, [pc, #52]	@ (8018ea0 <vTaskList+0x128>)
 8018e6c:	6878      	ldr	r0, [r7, #4]
 8018e6e:	f006 f8f1 	bl	801f054 <siprintf>
				pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers especially as in this case where it best denotes the intent of the code. */
 8018e72:	6878      	ldr	r0, [r7, #4]
 8018e74:	f7e7 fa56 	bl	8000324 <strlen>
 8018e78:	4602      	mov	r2, r0
 8018e7a:	687b      	ldr	r3, [r7, #4]
 8018e7c:	4413      	add	r3, r2
 8018e7e:	607b      	str	r3, [r7, #4]
			for( x = 0; x < uxArraySize; x++ )
 8018e80:	697b      	ldr	r3, [r7, #20]
 8018e82:	3301      	adds	r3, #1
 8018e84:	617b      	str	r3, [r7, #20]
 8018e86:	697a      	ldr	r2, [r7, #20]
 8018e88:	68fb      	ldr	r3, [r7, #12]
 8018e8a:	429a      	cmp	r2, r3
 8018e8c:	d394      	bcc.n	8018db8 <vTaskList+0x40>
			}

			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
			is 0 then vPortFree() will be #defined to nothing. */
			vPortFree( pxTaskStatusArray );
 8018e8e:	68b8      	ldr	r0, [r7, #8]
 8018e90:	f000 ffdc 	bl	8019e4c <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8018e94:	bf00      	nop
 8018e96:	371c      	adds	r7, #28
 8018e98:	46bd      	mov	sp, r7
 8018e9a:	bd90      	pop	{r4, r7, pc}
 8018e9c:	24001148 	.word	0x24001148
 8018ea0:	08021804 	.word	0x08021804

08018ea4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8018ea4:	b480      	push	{r7}
 8018ea6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8018ea8:	4b07      	ldr	r3, [pc, #28]	@ (8018ec8 <pvTaskIncrementMutexHeldCount+0x24>)
 8018eaa:	681b      	ldr	r3, [r3, #0]
 8018eac:	2b00      	cmp	r3, #0
 8018eae:	d004      	beq.n	8018eba <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8018eb0:	4b05      	ldr	r3, [pc, #20]	@ (8018ec8 <pvTaskIncrementMutexHeldCount+0x24>)
 8018eb2:	681b      	ldr	r3, [r3, #0]
 8018eb4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8018eb6:	3201      	adds	r2, #1
 8018eb8:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8018eba:	4b03      	ldr	r3, [pc, #12]	@ (8018ec8 <pvTaskIncrementMutexHeldCount+0x24>)
 8018ebc:	681b      	ldr	r3, [r3, #0]
	}
 8018ebe:	4618      	mov	r0, r3
 8018ec0:	46bd      	mov	sp, r7
 8018ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ec6:	4770      	bx	lr
 8018ec8:	24000c70 	.word	0x24000c70

08018ecc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8018ecc:	b580      	push	{r7, lr}
 8018ece:	b084      	sub	sp, #16
 8018ed0:	af00      	add	r7, sp, #0
 8018ed2:	6078      	str	r0, [r7, #4]
 8018ed4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8018ed6:	4b24      	ldr	r3, [pc, #144]	@ (8018f68 <prvAddCurrentTaskToDelayedList+0x9c>)
 8018ed8:	681b      	ldr	r3, [r3, #0]
 8018eda:	60fb      	str	r3, [r7, #12]
	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
		reset to pdFALSE so it can be detected as having been set to pdTRUE
		when the task leaves the Blocked state. */
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 8018edc:	4b23      	ldr	r3, [pc, #140]	@ (8018f6c <prvAddCurrentTaskToDelayedList+0xa0>)
 8018ede:	681b      	ldr	r3, [r3, #0]
 8018ee0:	2200      	movs	r2, #0
 8018ee2:	f883 20aa 	strb.w	r2, [r3, #170]	@ 0xaa
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8018ee6:	4b21      	ldr	r3, [pc, #132]	@ (8018f6c <prvAddCurrentTaskToDelayedList+0xa0>)
 8018ee8:	681b      	ldr	r3, [r3, #0]
 8018eea:	3304      	adds	r3, #4
 8018eec:	4618      	mov	r0, r3
 8018eee:	f7fd fced 	bl	80168cc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8018ef2:	687b      	ldr	r3, [r7, #4]
 8018ef4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018ef8:	d10a      	bne.n	8018f10 <prvAddCurrentTaskToDelayedList+0x44>
 8018efa:	683b      	ldr	r3, [r7, #0]
 8018efc:	2b00      	cmp	r3, #0
 8018efe:	d007      	beq.n	8018f10 <prvAddCurrentTaskToDelayedList+0x44>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8018f00:	4b1a      	ldr	r3, [pc, #104]	@ (8018f6c <prvAddCurrentTaskToDelayedList+0xa0>)
 8018f02:	681b      	ldr	r3, [r3, #0]
 8018f04:	3304      	adds	r3, #4
 8018f06:	4619      	mov	r1, r3
 8018f08:	4819      	ldr	r0, [pc, #100]	@ (8018f70 <prvAddCurrentTaskToDelayedList+0xa4>)
 8018f0a:	f7fd fc82 	bl	8016812 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8018f0e:	e026      	b.n	8018f5e <prvAddCurrentTaskToDelayedList+0x92>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8018f10:	68fa      	ldr	r2, [r7, #12]
 8018f12:	687b      	ldr	r3, [r7, #4]
 8018f14:	4413      	add	r3, r2
 8018f16:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8018f18:	4b14      	ldr	r3, [pc, #80]	@ (8018f6c <prvAddCurrentTaskToDelayedList+0xa0>)
 8018f1a:	681b      	ldr	r3, [r3, #0]
 8018f1c:	68ba      	ldr	r2, [r7, #8]
 8018f1e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8018f20:	68ba      	ldr	r2, [r7, #8]
 8018f22:	68fb      	ldr	r3, [r7, #12]
 8018f24:	429a      	cmp	r2, r3
 8018f26:	d209      	bcs.n	8018f3c <prvAddCurrentTaskToDelayedList+0x70>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8018f28:	4b12      	ldr	r3, [pc, #72]	@ (8018f74 <prvAddCurrentTaskToDelayedList+0xa8>)
 8018f2a:	681a      	ldr	r2, [r3, #0]
 8018f2c:	4b0f      	ldr	r3, [pc, #60]	@ (8018f6c <prvAddCurrentTaskToDelayedList+0xa0>)
 8018f2e:	681b      	ldr	r3, [r3, #0]
 8018f30:	3304      	adds	r3, #4
 8018f32:	4619      	mov	r1, r3
 8018f34:	4610      	mov	r0, r2
 8018f36:	f7fd fc90 	bl	801685a <vListInsert>
}
 8018f3a:	e010      	b.n	8018f5e <prvAddCurrentTaskToDelayedList+0x92>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8018f3c:	4b0e      	ldr	r3, [pc, #56]	@ (8018f78 <prvAddCurrentTaskToDelayedList+0xac>)
 8018f3e:	681a      	ldr	r2, [r3, #0]
 8018f40:	4b0a      	ldr	r3, [pc, #40]	@ (8018f6c <prvAddCurrentTaskToDelayedList+0xa0>)
 8018f42:	681b      	ldr	r3, [r3, #0]
 8018f44:	3304      	adds	r3, #4
 8018f46:	4619      	mov	r1, r3
 8018f48:	4610      	mov	r0, r2
 8018f4a:	f7fd fc86 	bl	801685a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8018f4e:	4b0b      	ldr	r3, [pc, #44]	@ (8018f7c <prvAddCurrentTaskToDelayedList+0xb0>)
 8018f50:	681b      	ldr	r3, [r3, #0]
 8018f52:	68ba      	ldr	r2, [r7, #8]
 8018f54:	429a      	cmp	r2, r3
 8018f56:	d202      	bcs.n	8018f5e <prvAddCurrentTaskToDelayedList+0x92>
					xNextTaskUnblockTime = xTimeToWake;
 8018f58:	4a08      	ldr	r2, [pc, #32]	@ (8018f7c <prvAddCurrentTaskToDelayedList+0xb0>)
 8018f5a:	68bb      	ldr	r3, [r7, #8]
 8018f5c:	6013      	str	r3, [r2, #0]
}
 8018f5e:	bf00      	nop
 8018f60:	3710      	adds	r7, #16
 8018f62:	46bd      	mov	sp, r7
 8018f64:	bd80      	pop	{r7, pc}
 8018f66:	bf00      	nop
 8018f68:	2400114c 	.word	0x2400114c
 8018f6c:	24000c70 	.word	0x24000c70
 8018f70:	24001130 	.word	0x24001130
 8018f74:	24001100 	.word	0x24001100
 8018f78:	240010fc 	.word	0x240010fc
 8018f7c:	24001168 	.word	0x24001168

08018f80 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8018f80:	b580      	push	{r7, lr}
 8018f82:	b08a      	sub	sp, #40	@ 0x28
 8018f84:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8018f86:	2300      	movs	r3, #0
 8018f88:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8018f8a:	f000 fb15 	bl	80195b8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8018f8e:	4b1d      	ldr	r3, [pc, #116]	@ (8019004 <xTimerCreateTimerTask+0x84>)
 8018f90:	681b      	ldr	r3, [r3, #0]
 8018f92:	2b00      	cmp	r3, #0
 8018f94:	d021      	beq.n	8018fda <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8018f96:	2300      	movs	r3, #0
 8018f98:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8018f9a:	2300      	movs	r3, #0
 8018f9c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8018f9e:	1d3a      	adds	r2, r7, #4
 8018fa0:	f107 0108 	add.w	r1, r7, #8
 8018fa4:	f107 030c 	add.w	r3, r7, #12
 8018fa8:	4618      	mov	r0, r3
 8018faa:	f7fd fbeb 	bl	8016784 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8018fae:	6879      	ldr	r1, [r7, #4]
 8018fb0:	68bb      	ldr	r3, [r7, #8]
 8018fb2:	68fa      	ldr	r2, [r7, #12]
 8018fb4:	9202      	str	r2, [sp, #8]
 8018fb6:	9301      	str	r3, [sp, #4]
 8018fb8:	2302      	movs	r3, #2
 8018fba:	9300      	str	r3, [sp, #0]
 8018fbc:	2300      	movs	r3, #0
 8018fbe:	460a      	mov	r2, r1
 8018fc0:	4911      	ldr	r1, [pc, #68]	@ (8019008 <xTimerCreateTimerTask+0x88>)
 8018fc2:	4812      	ldr	r0, [pc, #72]	@ (801900c <xTimerCreateTimerTask+0x8c>)
 8018fc4:	f7fe fba8 	bl	8017718 <xTaskCreateStatic>
 8018fc8:	4603      	mov	r3, r0
 8018fca:	4a11      	ldr	r2, [pc, #68]	@ (8019010 <xTimerCreateTimerTask+0x90>)
 8018fcc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8018fce:	4b10      	ldr	r3, [pc, #64]	@ (8019010 <xTimerCreateTimerTask+0x90>)
 8018fd0:	681b      	ldr	r3, [r3, #0]
 8018fd2:	2b00      	cmp	r3, #0
 8018fd4:	d001      	beq.n	8018fda <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8018fd6:	2301      	movs	r3, #1
 8018fd8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8018fda:	697b      	ldr	r3, [r7, #20]
 8018fdc:	2b00      	cmp	r3, #0
 8018fde:	d10b      	bne.n	8018ff8 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8018fe0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018fe4:	f383 8811 	msr	BASEPRI, r3
 8018fe8:	f3bf 8f6f 	isb	sy
 8018fec:	f3bf 8f4f 	dsb	sy
 8018ff0:	613b      	str	r3, [r7, #16]
}
 8018ff2:	bf00      	nop
 8018ff4:	bf00      	nop
 8018ff6:	e7fd      	b.n	8018ff4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8018ff8:	697b      	ldr	r3, [r7, #20]
}
 8018ffa:	4618      	mov	r0, r3
 8018ffc:	3718      	adds	r7, #24
 8018ffe:	46bd      	mov	sp, r7
 8019000:	bd80      	pop	{r7, pc}
 8019002:	bf00      	nop
 8019004:	240011ac 	.word	0x240011ac
 8019008:	0802182c 	.word	0x0802182c
 801900c:	0801914d 	.word	0x0801914d
 8019010:	240011b0 	.word	0x240011b0

08019014 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8019014:	b580      	push	{r7, lr}
 8019016:	b08a      	sub	sp, #40	@ 0x28
 8019018:	af00      	add	r7, sp, #0
 801901a:	60f8      	str	r0, [r7, #12]
 801901c:	60b9      	str	r1, [r7, #8]
 801901e:	607a      	str	r2, [r7, #4]
 8019020:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8019022:	2300      	movs	r3, #0
 8019024:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8019026:	68fb      	ldr	r3, [r7, #12]
 8019028:	2b00      	cmp	r3, #0
 801902a:	d10b      	bne.n	8019044 <xTimerGenericCommand+0x30>
	__asm volatile
 801902c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019030:	f383 8811 	msr	BASEPRI, r3
 8019034:	f3bf 8f6f 	isb	sy
 8019038:	f3bf 8f4f 	dsb	sy
 801903c:	623b      	str	r3, [r7, #32]
}
 801903e:	bf00      	nop
 8019040:	bf00      	nop
 8019042:	e7fd      	b.n	8019040 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8019044:	4b19      	ldr	r3, [pc, #100]	@ (80190ac <xTimerGenericCommand+0x98>)
 8019046:	681b      	ldr	r3, [r3, #0]
 8019048:	2b00      	cmp	r3, #0
 801904a:	d02a      	beq.n	80190a2 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 801904c:	68bb      	ldr	r3, [r7, #8]
 801904e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8019050:	687b      	ldr	r3, [r7, #4]
 8019052:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8019054:	68fb      	ldr	r3, [r7, #12]
 8019056:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8019058:	68bb      	ldr	r3, [r7, #8]
 801905a:	2b05      	cmp	r3, #5
 801905c:	dc18      	bgt.n	8019090 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 801905e:	f7ff fceb 	bl	8018a38 <xTaskGetSchedulerState>
 8019062:	4603      	mov	r3, r0
 8019064:	2b02      	cmp	r3, #2
 8019066:	d109      	bne.n	801907c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8019068:	4b10      	ldr	r3, [pc, #64]	@ (80190ac <xTimerGenericCommand+0x98>)
 801906a:	6818      	ldr	r0, [r3, #0]
 801906c:	f107 0110 	add.w	r1, r7, #16
 8019070:	2300      	movs	r3, #0
 8019072:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8019074:	f7fd fe38 	bl	8016ce8 <xQueueGenericSend>
 8019078:	6278      	str	r0, [r7, #36]	@ 0x24
 801907a:	e012      	b.n	80190a2 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 801907c:	4b0b      	ldr	r3, [pc, #44]	@ (80190ac <xTimerGenericCommand+0x98>)
 801907e:	6818      	ldr	r0, [r3, #0]
 8019080:	f107 0110 	add.w	r1, r7, #16
 8019084:	2300      	movs	r3, #0
 8019086:	2200      	movs	r2, #0
 8019088:	f7fd fe2e 	bl	8016ce8 <xQueueGenericSend>
 801908c:	6278      	str	r0, [r7, #36]	@ 0x24
 801908e:	e008      	b.n	80190a2 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8019090:	4b06      	ldr	r3, [pc, #24]	@ (80190ac <xTimerGenericCommand+0x98>)
 8019092:	6818      	ldr	r0, [r3, #0]
 8019094:	f107 0110 	add.w	r1, r7, #16
 8019098:	2300      	movs	r3, #0
 801909a:	683a      	ldr	r2, [r7, #0]
 801909c:	f7fd ff26 	bl	8016eec <xQueueGenericSendFromISR>
 80190a0:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80190a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80190a4:	4618      	mov	r0, r3
 80190a6:	3728      	adds	r7, #40	@ 0x28
 80190a8:	46bd      	mov	sp, r7
 80190aa:	bd80      	pop	{r7, pc}
 80190ac:	240011ac 	.word	0x240011ac

080190b0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80190b0:	b580      	push	{r7, lr}
 80190b2:	b088      	sub	sp, #32
 80190b4:	af02      	add	r7, sp, #8
 80190b6:	6078      	str	r0, [r7, #4]
 80190b8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80190ba:	4b23      	ldr	r3, [pc, #140]	@ (8019148 <prvProcessExpiredTimer+0x98>)
 80190bc:	681b      	ldr	r3, [r3, #0]
 80190be:	68db      	ldr	r3, [r3, #12]
 80190c0:	68db      	ldr	r3, [r3, #12]
 80190c2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80190c4:	697b      	ldr	r3, [r7, #20]
 80190c6:	3304      	adds	r3, #4
 80190c8:	4618      	mov	r0, r3
 80190ca:	f7fd fbff 	bl	80168cc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80190ce:	697b      	ldr	r3, [r7, #20]
 80190d0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80190d4:	f003 0304 	and.w	r3, r3, #4
 80190d8:	2b00      	cmp	r3, #0
 80190da:	d023      	beq.n	8019124 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80190dc:	697b      	ldr	r3, [r7, #20]
 80190de:	699a      	ldr	r2, [r3, #24]
 80190e0:	687b      	ldr	r3, [r7, #4]
 80190e2:	18d1      	adds	r1, r2, r3
 80190e4:	687b      	ldr	r3, [r7, #4]
 80190e6:	683a      	ldr	r2, [r7, #0]
 80190e8:	6978      	ldr	r0, [r7, #20]
 80190ea:	f000 f8d7 	bl	801929c <prvInsertTimerInActiveList>
 80190ee:	4603      	mov	r3, r0
 80190f0:	2b00      	cmp	r3, #0
 80190f2:	d020      	beq.n	8019136 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80190f4:	2300      	movs	r3, #0
 80190f6:	9300      	str	r3, [sp, #0]
 80190f8:	2300      	movs	r3, #0
 80190fa:	687a      	ldr	r2, [r7, #4]
 80190fc:	2100      	movs	r1, #0
 80190fe:	6978      	ldr	r0, [r7, #20]
 8019100:	f7ff ff88 	bl	8019014 <xTimerGenericCommand>
 8019104:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8019106:	693b      	ldr	r3, [r7, #16]
 8019108:	2b00      	cmp	r3, #0
 801910a:	d114      	bne.n	8019136 <prvProcessExpiredTimer+0x86>
	__asm volatile
 801910c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019110:	f383 8811 	msr	BASEPRI, r3
 8019114:	f3bf 8f6f 	isb	sy
 8019118:	f3bf 8f4f 	dsb	sy
 801911c:	60fb      	str	r3, [r7, #12]
}
 801911e:	bf00      	nop
 8019120:	bf00      	nop
 8019122:	e7fd      	b.n	8019120 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8019124:	697b      	ldr	r3, [r7, #20]
 8019126:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801912a:	f023 0301 	bic.w	r3, r3, #1
 801912e:	b2da      	uxtb	r2, r3
 8019130:	697b      	ldr	r3, [r7, #20]
 8019132:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8019136:	697b      	ldr	r3, [r7, #20]
 8019138:	6a1b      	ldr	r3, [r3, #32]
 801913a:	6978      	ldr	r0, [r7, #20]
 801913c:	4798      	blx	r3
}
 801913e:	bf00      	nop
 8019140:	3718      	adds	r7, #24
 8019142:	46bd      	mov	sp, r7
 8019144:	bd80      	pop	{r7, pc}
 8019146:	bf00      	nop
 8019148:	240011a4 	.word	0x240011a4

0801914c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 801914c:	b580      	push	{r7, lr}
 801914e:	b084      	sub	sp, #16
 8019150:	af00      	add	r7, sp, #0
 8019152:	6078      	str	r0, [r7, #4]

		/* Allow the application writer to execute some code in the context of
		this task at the point the task starts executing.  This is useful if the
		application includes initialisation code that would benefit from
		executing after the scheduler has been started. */
		vApplicationDaemonTaskStartupHook();
 8019154:	f7e8 fe39 	bl	8001dca <vApplicationDaemonTaskStartupHook>

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8019158:	f107 0308 	add.w	r3, r7, #8
 801915c:	4618      	mov	r0, r3
 801915e:	f000 f859 	bl	8019214 <prvGetNextExpireTime>
 8019162:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8019164:	68bb      	ldr	r3, [r7, #8]
 8019166:	4619      	mov	r1, r3
 8019168:	68f8      	ldr	r0, [r7, #12]
 801916a:	f000 f805 	bl	8019178 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 801916e:	f000 f8d7 	bl	8019320 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8019172:	bf00      	nop
 8019174:	e7f0      	b.n	8019158 <prvTimerTask+0xc>
	...

08019178 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8019178:	b580      	push	{r7, lr}
 801917a:	b084      	sub	sp, #16
 801917c:	af00      	add	r7, sp, #0
 801917e:	6078      	str	r0, [r7, #4]
 8019180:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8019182:	f7fe fd9d 	bl	8017cc0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8019186:	f107 0308 	add.w	r3, r7, #8
 801918a:	4618      	mov	r0, r3
 801918c:	f000 f866 	bl	801925c <prvSampleTimeNow>
 8019190:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8019192:	68bb      	ldr	r3, [r7, #8]
 8019194:	2b00      	cmp	r3, #0
 8019196:	d130      	bne.n	80191fa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8019198:	683b      	ldr	r3, [r7, #0]
 801919a:	2b00      	cmp	r3, #0
 801919c:	d10a      	bne.n	80191b4 <prvProcessTimerOrBlockTask+0x3c>
 801919e:	687a      	ldr	r2, [r7, #4]
 80191a0:	68fb      	ldr	r3, [r7, #12]
 80191a2:	429a      	cmp	r2, r3
 80191a4:	d806      	bhi.n	80191b4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80191a6:	f7fe fdd1 	bl	8017d4c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80191aa:	68f9      	ldr	r1, [r7, #12]
 80191ac:	6878      	ldr	r0, [r7, #4]
 80191ae:	f7ff ff7f 	bl	80190b0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80191b2:	e024      	b.n	80191fe <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80191b4:	683b      	ldr	r3, [r7, #0]
 80191b6:	2b00      	cmp	r3, #0
 80191b8:	d008      	beq.n	80191cc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80191ba:	4b13      	ldr	r3, [pc, #76]	@ (8019208 <prvProcessTimerOrBlockTask+0x90>)
 80191bc:	681b      	ldr	r3, [r3, #0]
 80191be:	681b      	ldr	r3, [r3, #0]
 80191c0:	2b00      	cmp	r3, #0
 80191c2:	d101      	bne.n	80191c8 <prvProcessTimerOrBlockTask+0x50>
 80191c4:	2301      	movs	r3, #1
 80191c6:	e000      	b.n	80191ca <prvProcessTimerOrBlockTask+0x52>
 80191c8:	2300      	movs	r3, #0
 80191ca:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80191cc:	4b0f      	ldr	r3, [pc, #60]	@ (801920c <prvProcessTimerOrBlockTask+0x94>)
 80191ce:	6818      	ldr	r0, [r3, #0]
 80191d0:	687a      	ldr	r2, [r7, #4]
 80191d2:	68fb      	ldr	r3, [r7, #12]
 80191d4:	1ad3      	subs	r3, r2, r3
 80191d6:	683a      	ldr	r2, [r7, #0]
 80191d8:	4619      	mov	r1, r3
 80191da:	f7fe fa69 	bl	80176b0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80191de:	f7fe fdb5 	bl	8017d4c <xTaskResumeAll>
 80191e2:	4603      	mov	r3, r0
 80191e4:	2b00      	cmp	r3, #0
 80191e6:	d10a      	bne.n	80191fe <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80191e8:	4b09      	ldr	r3, [pc, #36]	@ (8019210 <prvProcessTimerOrBlockTask+0x98>)
 80191ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80191ee:	601a      	str	r2, [r3, #0]
 80191f0:	f3bf 8f4f 	dsb	sy
 80191f4:	f3bf 8f6f 	isb	sy
}
 80191f8:	e001      	b.n	80191fe <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80191fa:	f7fe fda7 	bl	8017d4c <xTaskResumeAll>
}
 80191fe:	bf00      	nop
 8019200:	3710      	adds	r7, #16
 8019202:	46bd      	mov	sp, r7
 8019204:	bd80      	pop	{r7, pc}
 8019206:	bf00      	nop
 8019208:	240011a8 	.word	0x240011a8
 801920c:	240011ac 	.word	0x240011ac
 8019210:	e000ed04 	.word	0xe000ed04

08019214 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8019214:	b480      	push	{r7}
 8019216:	b085      	sub	sp, #20
 8019218:	af00      	add	r7, sp, #0
 801921a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 801921c:	4b0e      	ldr	r3, [pc, #56]	@ (8019258 <prvGetNextExpireTime+0x44>)
 801921e:	681b      	ldr	r3, [r3, #0]
 8019220:	681b      	ldr	r3, [r3, #0]
 8019222:	2b00      	cmp	r3, #0
 8019224:	d101      	bne.n	801922a <prvGetNextExpireTime+0x16>
 8019226:	2201      	movs	r2, #1
 8019228:	e000      	b.n	801922c <prvGetNextExpireTime+0x18>
 801922a:	2200      	movs	r2, #0
 801922c:	687b      	ldr	r3, [r7, #4]
 801922e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8019230:	687b      	ldr	r3, [r7, #4]
 8019232:	681b      	ldr	r3, [r3, #0]
 8019234:	2b00      	cmp	r3, #0
 8019236:	d105      	bne.n	8019244 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8019238:	4b07      	ldr	r3, [pc, #28]	@ (8019258 <prvGetNextExpireTime+0x44>)
 801923a:	681b      	ldr	r3, [r3, #0]
 801923c:	68db      	ldr	r3, [r3, #12]
 801923e:	681b      	ldr	r3, [r3, #0]
 8019240:	60fb      	str	r3, [r7, #12]
 8019242:	e001      	b.n	8019248 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8019244:	2300      	movs	r3, #0
 8019246:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8019248:	68fb      	ldr	r3, [r7, #12]
}
 801924a:	4618      	mov	r0, r3
 801924c:	3714      	adds	r7, #20
 801924e:	46bd      	mov	sp, r7
 8019250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019254:	4770      	bx	lr
 8019256:	bf00      	nop
 8019258:	240011a4 	.word	0x240011a4

0801925c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 801925c:	b580      	push	{r7, lr}
 801925e:	b084      	sub	sp, #16
 8019260:	af00      	add	r7, sp, #0
 8019262:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8019264:	f7fe fe10 	bl	8017e88 <xTaskGetTickCount>
 8019268:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 801926a:	4b0b      	ldr	r3, [pc, #44]	@ (8019298 <prvSampleTimeNow+0x3c>)
 801926c:	681b      	ldr	r3, [r3, #0]
 801926e:	68fa      	ldr	r2, [r7, #12]
 8019270:	429a      	cmp	r2, r3
 8019272:	d205      	bcs.n	8019280 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8019274:	f000 f93a 	bl	80194ec <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8019278:	687b      	ldr	r3, [r7, #4]
 801927a:	2201      	movs	r2, #1
 801927c:	601a      	str	r2, [r3, #0]
 801927e:	e002      	b.n	8019286 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8019280:	687b      	ldr	r3, [r7, #4]
 8019282:	2200      	movs	r2, #0
 8019284:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8019286:	4a04      	ldr	r2, [pc, #16]	@ (8019298 <prvSampleTimeNow+0x3c>)
 8019288:	68fb      	ldr	r3, [r7, #12]
 801928a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 801928c:	68fb      	ldr	r3, [r7, #12]
}
 801928e:	4618      	mov	r0, r3
 8019290:	3710      	adds	r7, #16
 8019292:	46bd      	mov	sp, r7
 8019294:	bd80      	pop	{r7, pc}
 8019296:	bf00      	nop
 8019298:	240011b4 	.word	0x240011b4

0801929c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 801929c:	b580      	push	{r7, lr}
 801929e:	b086      	sub	sp, #24
 80192a0:	af00      	add	r7, sp, #0
 80192a2:	60f8      	str	r0, [r7, #12]
 80192a4:	60b9      	str	r1, [r7, #8]
 80192a6:	607a      	str	r2, [r7, #4]
 80192a8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80192aa:	2300      	movs	r3, #0
 80192ac:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80192ae:	68fb      	ldr	r3, [r7, #12]
 80192b0:	68ba      	ldr	r2, [r7, #8]
 80192b2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80192b4:	68fb      	ldr	r3, [r7, #12]
 80192b6:	68fa      	ldr	r2, [r7, #12]
 80192b8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80192ba:	68ba      	ldr	r2, [r7, #8]
 80192bc:	687b      	ldr	r3, [r7, #4]
 80192be:	429a      	cmp	r2, r3
 80192c0:	d812      	bhi.n	80192e8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80192c2:	687a      	ldr	r2, [r7, #4]
 80192c4:	683b      	ldr	r3, [r7, #0]
 80192c6:	1ad2      	subs	r2, r2, r3
 80192c8:	68fb      	ldr	r3, [r7, #12]
 80192ca:	699b      	ldr	r3, [r3, #24]
 80192cc:	429a      	cmp	r2, r3
 80192ce:	d302      	bcc.n	80192d6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80192d0:	2301      	movs	r3, #1
 80192d2:	617b      	str	r3, [r7, #20]
 80192d4:	e01b      	b.n	801930e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80192d6:	4b10      	ldr	r3, [pc, #64]	@ (8019318 <prvInsertTimerInActiveList+0x7c>)
 80192d8:	681a      	ldr	r2, [r3, #0]
 80192da:	68fb      	ldr	r3, [r7, #12]
 80192dc:	3304      	adds	r3, #4
 80192de:	4619      	mov	r1, r3
 80192e0:	4610      	mov	r0, r2
 80192e2:	f7fd faba 	bl	801685a <vListInsert>
 80192e6:	e012      	b.n	801930e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80192e8:	687a      	ldr	r2, [r7, #4]
 80192ea:	683b      	ldr	r3, [r7, #0]
 80192ec:	429a      	cmp	r2, r3
 80192ee:	d206      	bcs.n	80192fe <prvInsertTimerInActiveList+0x62>
 80192f0:	68ba      	ldr	r2, [r7, #8]
 80192f2:	683b      	ldr	r3, [r7, #0]
 80192f4:	429a      	cmp	r2, r3
 80192f6:	d302      	bcc.n	80192fe <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80192f8:	2301      	movs	r3, #1
 80192fa:	617b      	str	r3, [r7, #20]
 80192fc:	e007      	b.n	801930e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80192fe:	4b07      	ldr	r3, [pc, #28]	@ (801931c <prvInsertTimerInActiveList+0x80>)
 8019300:	681a      	ldr	r2, [r3, #0]
 8019302:	68fb      	ldr	r3, [r7, #12]
 8019304:	3304      	adds	r3, #4
 8019306:	4619      	mov	r1, r3
 8019308:	4610      	mov	r0, r2
 801930a:	f7fd faa6 	bl	801685a <vListInsert>
		}
	}

	return xProcessTimerNow;
 801930e:	697b      	ldr	r3, [r7, #20]
}
 8019310:	4618      	mov	r0, r3
 8019312:	3718      	adds	r7, #24
 8019314:	46bd      	mov	sp, r7
 8019316:	bd80      	pop	{r7, pc}
 8019318:	240011a8 	.word	0x240011a8
 801931c:	240011a4 	.word	0x240011a4

08019320 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8019320:	b580      	push	{r7, lr}
 8019322:	b08e      	sub	sp, #56	@ 0x38
 8019324:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8019326:	e0ce      	b.n	80194c6 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8019328:	687b      	ldr	r3, [r7, #4]
 801932a:	2b00      	cmp	r3, #0
 801932c:	da19      	bge.n	8019362 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 801932e:	1d3b      	adds	r3, r7, #4
 8019330:	3304      	adds	r3, #4
 8019332:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8019334:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019336:	2b00      	cmp	r3, #0
 8019338:	d10b      	bne.n	8019352 <prvProcessReceivedCommands+0x32>
	__asm volatile
 801933a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801933e:	f383 8811 	msr	BASEPRI, r3
 8019342:	f3bf 8f6f 	isb	sy
 8019346:	f3bf 8f4f 	dsb	sy
 801934a:	61fb      	str	r3, [r7, #28]
}
 801934c:	bf00      	nop
 801934e:	bf00      	nop
 8019350:	e7fd      	b.n	801934e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8019352:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019354:	681b      	ldr	r3, [r3, #0]
 8019356:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8019358:	6850      	ldr	r0, [r2, #4]
 801935a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801935c:	6892      	ldr	r2, [r2, #8]
 801935e:	4611      	mov	r1, r2
 8019360:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8019362:	687b      	ldr	r3, [r7, #4]
 8019364:	2b00      	cmp	r3, #0
 8019366:	f2c0 80ae 	blt.w	80194c6 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 801936a:	68fb      	ldr	r3, [r7, #12]
 801936c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 801936e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019370:	695b      	ldr	r3, [r3, #20]
 8019372:	2b00      	cmp	r3, #0
 8019374:	d004      	beq.n	8019380 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8019376:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019378:	3304      	adds	r3, #4
 801937a:	4618      	mov	r0, r3
 801937c:	f7fd faa6 	bl	80168cc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8019380:	463b      	mov	r3, r7
 8019382:	4618      	mov	r0, r3
 8019384:	f7ff ff6a 	bl	801925c <prvSampleTimeNow>
 8019388:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 801938a:	687b      	ldr	r3, [r7, #4]
 801938c:	2b09      	cmp	r3, #9
 801938e:	f200 8097 	bhi.w	80194c0 <prvProcessReceivedCommands+0x1a0>
 8019392:	a201      	add	r2, pc, #4	@ (adr r2, 8019398 <prvProcessReceivedCommands+0x78>)
 8019394:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019398:	080193c1 	.word	0x080193c1
 801939c:	080193c1 	.word	0x080193c1
 80193a0:	080193c1 	.word	0x080193c1
 80193a4:	08019437 	.word	0x08019437
 80193a8:	0801944b 	.word	0x0801944b
 80193ac:	08019497 	.word	0x08019497
 80193b0:	080193c1 	.word	0x080193c1
 80193b4:	080193c1 	.word	0x080193c1
 80193b8:	08019437 	.word	0x08019437
 80193bc:	0801944b 	.word	0x0801944b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80193c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80193c2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80193c6:	f043 0301 	orr.w	r3, r3, #1
 80193ca:	b2da      	uxtb	r2, r3
 80193cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80193ce:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80193d2:	68ba      	ldr	r2, [r7, #8]
 80193d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80193d6:	699b      	ldr	r3, [r3, #24]
 80193d8:	18d1      	adds	r1, r2, r3
 80193da:	68bb      	ldr	r3, [r7, #8]
 80193dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80193de:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80193e0:	f7ff ff5c 	bl	801929c <prvInsertTimerInActiveList>
 80193e4:	4603      	mov	r3, r0
 80193e6:	2b00      	cmp	r3, #0
 80193e8:	d06c      	beq.n	80194c4 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80193ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80193ec:	6a1b      	ldr	r3, [r3, #32]
 80193ee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80193f0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80193f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80193f4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80193f8:	f003 0304 	and.w	r3, r3, #4
 80193fc:	2b00      	cmp	r3, #0
 80193fe:	d061      	beq.n	80194c4 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8019400:	68ba      	ldr	r2, [r7, #8]
 8019402:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019404:	699b      	ldr	r3, [r3, #24]
 8019406:	441a      	add	r2, r3
 8019408:	2300      	movs	r3, #0
 801940a:	9300      	str	r3, [sp, #0]
 801940c:	2300      	movs	r3, #0
 801940e:	2100      	movs	r1, #0
 8019410:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8019412:	f7ff fdff 	bl	8019014 <xTimerGenericCommand>
 8019416:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8019418:	6a3b      	ldr	r3, [r7, #32]
 801941a:	2b00      	cmp	r3, #0
 801941c:	d152      	bne.n	80194c4 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 801941e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019422:	f383 8811 	msr	BASEPRI, r3
 8019426:	f3bf 8f6f 	isb	sy
 801942a:	f3bf 8f4f 	dsb	sy
 801942e:	61bb      	str	r3, [r7, #24]
}
 8019430:	bf00      	nop
 8019432:	bf00      	nop
 8019434:	e7fd      	b.n	8019432 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8019436:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019438:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801943c:	f023 0301 	bic.w	r3, r3, #1
 8019440:	b2da      	uxtb	r2, r3
 8019442:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019444:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8019448:	e03d      	b.n	80194c6 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801944a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801944c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8019450:	f043 0301 	orr.w	r3, r3, #1
 8019454:	b2da      	uxtb	r2, r3
 8019456:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019458:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 801945c:	68ba      	ldr	r2, [r7, #8]
 801945e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019460:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8019462:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019464:	699b      	ldr	r3, [r3, #24]
 8019466:	2b00      	cmp	r3, #0
 8019468:	d10b      	bne.n	8019482 <prvProcessReceivedCommands+0x162>
	__asm volatile
 801946a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801946e:	f383 8811 	msr	BASEPRI, r3
 8019472:	f3bf 8f6f 	isb	sy
 8019476:	f3bf 8f4f 	dsb	sy
 801947a:	617b      	str	r3, [r7, #20]
}
 801947c:	bf00      	nop
 801947e:	bf00      	nop
 8019480:	e7fd      	b.n	801947e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8019482:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019484:	699a      	ldr	r2, [r3, #24]
 8019486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019488:	18d1      	adds	r1, r2, r3
 801948a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801948c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801948e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8019490:	f7ff ff04 	bl	801929c <prvInsertTimerInActiveList>
					break;
 8019494:	e017      	b.n	80194c6 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8019496:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019498:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801949c:	f003 0302 	and.w	r3, r3, #2
 80194a0:	2b00      	cmp	r3, #0
 80194a2:	d103      	bne.n	80194ac <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80194a4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80194a6:	f000 fcd1 	bl	8019e4c <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80194aa:	e00c      	b.n	80194c6 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80194ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80194ae:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80194b2:	f023 0301 	bic.w	r3, r3, #1
 80194b6:	b2da      	uxtb	r2, r3
 80194b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80194ba:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80194be:	e002      	b.n	80194c6 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80194c0:	bf00      	nop
 80194c2:	e000      	b.n	80194c6 <prvProcessReceivedCommands+0x1a6>
					break;
 80194c4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80194c6:	4b08      	ldr	r3, [pc, #32]	@ (80194e8 <prvProcessReceivedCommands+0x1c8>)
 80194c8:	681b      	ldr	r3, [r3, #0]
 80194ca:	1d39      	adds	r1, r7, #4
 80194cc:	2200      	movs	r2, #0
 80194ce:	4618      	mov	r0, r3
 80194d0:	f7fd fdaa 	bl	8017028 <xQueueReceive>
 80194d4:	4603      	mov	r3, r0
 80194d6:	2b00      	cmp	r3, #0
 80194d8:	f47f af26 	bne.w	8019328 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80194dc:	bf00      	nop
 80194de:	bf00      	nop
 80194e0:	3730      	adds	r7, #48	@ 0x30
 80194e2:	46bd      	mov	sp, r7
 80194e4:	bd80      	pop	{r7, pc}
 80194e6:	bf00      	nop
 80194e8:	240011ac 	.word	0x240011ac

080194ec <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80194ec:	b580      	push	{r7, lr}
 80194ee:	b088      	sub	sp, #32
 80194f0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80194f2:	e049      	b.n	8019588 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80194f4:	4b2e      	ldr	r3, [pc, #184]	@ (80195b0 <prvSwitchTimerLists+0xc4>)
 80194f6:	681b      	ldr	r3, [r3, #0]
 80194f8:	68db      	ldr	r3, [r3, #12]
 80194fa:	681b      	ldr	r3, [r3, #0]
 80194fc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80194fe:	4b2c      	ldr	r3, [pc, #176]	@ (80195b0 <prvSwitchTimerLists+0xc4>)
 8019500:	681b      	ldr	r3, [r3, #0]
 8019502:	68db      	ldr	r3, [r3, #12]
 8019504:	68db      	ldr	r3, [r3, #12]
 8019506:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8019508:	68fb      	ldr	r3, [r7, #12]
 801950a:	3304      	adds	r3, #4
 801950c:	4618      	mov	r0, r3
 801950e:	f7fd f9dd 	bl	80168cc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8019512:	68fb      	ldr	r3, [r7, #12]
 8019514:	6a1b      	ldr	r3, [r3, #32]
 8019516:	68f8      	ldr	r0, [r7, #12]
 8019518:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801951a:	68fb      	ldr	r3, [r7, #12]
 801951c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8019520:	f003 0304 	and.w	r3, r3, #4
 8019524:	2b00      	cmp	r3, #0
 8019526:	d02f      	beq.n	8019588 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8019528:	68fb      	ldr	r3, [r7, #12]
 801952a:	699b      	ldr	r3, [r3, #24]
 801952c:	693a      	ldr	r2, [r7, #16]
 801952e:	4413      	add	r3, r2
 8019530:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8019532:	68ba      	ldr	r2, [r7, #8]
 8019534:	693b      	ldr	r3, [r7, #16]
 8019536:	429a      	cmp	r2, r3
 8019538:	d90e      	bls.n	8019558 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801953a:	68fb      	ldr	r3, [r7, #12]
 801953c:	68ba      	ldr	r2, [r7, #8]
 801953e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8019540:	68fb      	ldr	r3, [r7, #12]
 8019542:	68fa      	ldr	r2, [r7, #12]
 8019544:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8019546:	4b1a      	ldr	r3, [pc, #104]	@ (80195b0 <prvSwitchTimerLists+0xc4>)
 8019548:	681a      	ldr	r2, [r3, #0]
 801954a:	68fb      	ldr	r3, [r7, #12]
 801954c:	3304      	adds	r3, #4
 801954e:	4619      	mov	r1, r3
 8019550:	4610      	mov	r0, r2
 8019552:	f7fd f982 	bl	801685a <vListInsert>
 8019556:	e017      	b.n	8019588 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8019558:	2300      	movs	r3, #0
 801955a:	9300      	str	r3, [sp, #0]
 801955c:	2300      	movs	r3, #0
 801955e:	693a      	ldr	r2, [r7, #16]
 8019560:	2100      	movs	r1, #0
 8019562:	68f8      	ldr	r0, [r7, #12]
 8019564:	f7ff fd56 	bl	8019014 <xTimerGenericCommand>
 8019568:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 801956a:	687b      	ldr	r3, [r7, #4]
 801956c:	2b00      	cmp	r3, #0
 801956e:	d10b      	bne.n	8019588 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8019570:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019574:	f383 8811 	msr	BASEPRI, r3
 8019578:	f3bf 8f6f 	isb	sy
 801957c:	f3bf 8f4f 	dsb	sy
 8019580:	603b      	str	r3, [r7, #0]
}
 8019582:	bf00      	nop
 8019584:	bf00      	nop
 8019586:	e7fd      	b.n	8019584 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8019588:	4b09      	ldr	r3, [pc, #36]	@ (80195b0 <prvSwitchTimerLists+0xc4>)
 801958a:	681b      	ldr	r3, [r3, #0]
 801958c:	681b      	ldr	r3, [r3, #0]
 801958e:	2b00      	cmp	r3, #0
 8019590:	d1b0      	bne.n	80194f4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8019592:	4b07      	ldr	r3, [pc, #28]	@ (80195b0 <prvSwitchTimerLists+0xc4>)
 8019594:	681b      	ldr	r3, [r3, #0]
 8019596:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8019598:	4b06      	ldr	r3, [pc, #24]	@ (80195b4 <prvSwitchTimerLists+0xc8>)
 801959a:	681b      	ldr	r3, [r3, #0]
 801959c:	4a04      	ldr	r2, [pc, #16]	@ (80195b0 <prvSwitchTimerLists+0xc4>)
 801959e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80195a0:	4a04      	ldr	r2, [pc, #16]	@ (80195b4 <prvSwitchTimerLists+0xc8>)
 80195a2:	697b      	ldr	r3, [r7, #20]
 80195a4:	6013      	str	r3, [r2, #0]
}
 80195a6:	bf00      	nop
 80195a8:	3718      	adds	r7, #24
 80195aa:	46bd      	mov	sp, r7
 80195ac:	bd80      	pop	{r7, pc}
 80195ae:	bf00      	nop
 80195b0:	240011a4 	.word	0x240011a4
 80195b4:	240011a8 	.word	0x240011a8

080195b8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80195b8:	b580      	push	{r7, lr}
 80195ba:	b082      	sub	sp, #8
 80195bc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80195be:	f000 f96b 	bl	8019898 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80195c2:	4b15      	ldr	r3, [pc, #84]	@ (8019618 <prvCheckForValidListAndQueue+0x60>)
 80195c4:	681b      	ldr	r3, [r3, #0]
 80195c6:	2b00      	cmp	r3, #0
 80195c8:	d120      	bne.n	801960c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80195ca:	4814      	ldr	r0, [pc, #80]	@ (801961c <prvCheckForValidListAndQueue+0x64>)
 80195cc:	f7fd f8f4 	bl	80167b8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80195d0:	4813      	ldr	r0, [pc, #76]	@ (8019620 <prvCheckForValidListAndQueue+0x68>)
 80195d2:	f7fd f8f1 	bl	80167b8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80195d6:	4b13      	ldr	r3, [pc, #76]	@ (8019624 <prvCheckForValidListAndQueue+0x6c>)
 80195d8:	4a10      	ldr	r2, [pc, #64]	@ (801961c <prvCheckForValidListAndQueue+0x64>)
 80195da:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80195dc:	4b12      	ldr	r3, [pc, #72]	@ (8019628 <prvCheckForValidListAndQueue+0x70>)
 80195de:	4a10      	ldr	r2, [pc, #64]	@ (8019620 <prvCheckForValidListAndQueue+0x68>)
 80195e0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80195e2:	2300      	movs	r3, #0
 80195e4:	9300      	str	r3, [sp, #0]
 80195e6:	4b11      	ldr	r3, [pc, #68]	@ (801962c <prvCheckForValidListAndQueue+0x74>)
 80195e8:	4a11      	ldr	r2, [pc, #68]	@ (8019630 <prvCheckForValidListAndQueue+0x78>)
 80195ea:	2110      	movs	r1, #16
 80195ec:	200a      	movs	r0, #10
 80195ee:	f7fd fa01 	bl	80169f4 <xQueueGenericCreateStatic>
 80195f2:	4603      	mov	r3, r0
 80195f4:	4a08      	ldr	r2, [pc, #32]	@ (8019618 <prvCheckForValidListAndQueue+0x60>)
 80195f6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80195f8:	4b07      	ldr	r3, [pc, #28]	@ (8019618 <prvCheckForValidListAndQueue+0x60>)
 80195fa:	681b      	ldr	r3, [r3, #0]
 80195fc:	2b00      	cmp	r3, #0
 80195fe:	d005      	beq.n	801960c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8019600:	4b05      	ldr	r3, [pc, #20]	@ (8019618 <prvCheckForValidListAndQueue+0x60>)
 8019602:	681b      	ldr	r3, [r3, #0]
 8019604:	490b      	ldr	r1, [pc, #44]	@ (8019634 <prvCheckForValidListAndQueue+0x7c>)
 8019606:	4618      	mov	r0, r3
 8019608:	f7fe f828 	bl	801765c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801960c:	f000 f976 	bl	80198fc <vPortExitCritical>
}
 8019610:	bf00      	nop
 8019612:	46bd      	mov	sp, r7
 8019614:	bd80      	pop	{r7, pc}
 8019616:	bf00      	nop
 8019618:	240011ac 	.word	0x240011ac
 801961c:	2400117c 	.word	0x2400117c
 8019620:	24001190 	.word	0x24001190
 8019624:	240011a4 	.word	0x240011a4
 8019628:	240011a8 	.word	0x240011a8
 801962c:	24001258 	.word	0x24001258
 8019630:	240011b8 	.word	0x240011b8
 8019634:	08021834 	.word	0x08021834

08019638 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8019638:	b480      	push	{r7}
 801963a:	b085      	sub	sp, #20
 801963c:	af00      	add	r7, sp, #0
 801963e:	60f8      	str	r0, [r7, #12]
 8019640:	60b9      	str	r1, [r7, #8]
 8019642:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8019644:	68fb      	ldr	r3, [r7, #12]
 8019646:	3b04      	subs	r3, #4
 8019648:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801964a:	68fb      	ldr	r3, [r7, #12]
 801964c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8019650:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8019652:	68fb      	ldr	r3, [r7, #12]
 8019654:	3b04      	subs	r3, #4
 8019656:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8019658:	68bb      	ldr	r3, [r7, #8]
 801965a:	f023 0201 	bic.w	r2, r3, #1
 801965e:	68fb      	ldr	r3, [r7, #12]
 8019660:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8019662:	68fb      	ldr	r3, [r7, #12]
 8019664:	3b04      	subs	r3, #4
 8019666:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8019668:	4a0c      	ldr	r2, [pc, #48]	@ (801969c <pxPortInitialiseStack+0x64>)
 801966a:	68fb      	ldr	r3, [r7, #12]
 801966c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801966e:	68fb      	ldr	r3, [r7, #12]
 8019670:	3b14      	subs	r3, #20
 8019672:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8019674:	687a      	ldr	r2, [r7, #4]
 8019676:	68fb      	ldr	r3, [r7, #12]
 8019678:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801967a:	68fb      	ldr	r3, [r7, #12]
 801967c:	3b04      	subs	r3, #4
 801967e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8019680:	68fb      	ldr	r3, [r7, #12]
 8019682:	f06f 0202 	mvn.w	r2, #2
 8019686:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8019688:	68fb      	ldr	r3, [r7, #12]
 801968a:	3b20      	subs	r3, #32
 801968c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801968e:	68fb      	ldr	r3, [r7, #12]
}
 8019690:	4618      	mov	r0, r3
 8019692:	3714      	adds	r7, #20
 8019694:	46bd      	mov	sp, r7
 8019696:	f85d 7b04 	ldr.w	r7, [sp], #4
 801969a:	4770      	bx	lr
 801969c:	080196a1 	.word	0x080196a1

080196a0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80196a0:	b480      	push	{r7}
 80196a2:	b085      	sub	sp, #20
 80196a4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80196a6:	2300      	movs	r3, #0
 80196a8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80196aa:	4b13      	ldr	r3, [pc, #76]	@ (80196f8 <prvTaskExitError+0x58>)
 80196ac:	681b      	ldr	r3, [r3, #0]
 80196ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80196b2:	d00b      	beq.n	80196cc <prvTaskExitError+0x2c>
	__asm volatile
 80196b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80196b8:	f383 8811 	msr	BASEPRI, r3
 80196bc:	f3bf 8f6f 	isb	sy
 80196c0:	f3bf 8f4f 	dsb	sy
 80196c4:	60fb      	str	r3, [r7, #12]
}
 80196c6:	bf00      	nop
 80196c8:	bf00      	nop
 80196ca:	e7fd      	b.n	80196c8 <prvTaskExitError+0x28>
	__asm volatile
 80196cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80196d0:	f383 8811 	msr	BASEPRI, r3
 80196d4:	f3bf 8f6f 	isb	sy
 80196d8:	f3bf 8f4f 	dsb	sy
 80196dc:	60bb      	str	r3, [r7, #8]
}
 80196de:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80196e0:	bf00      	nop
 80196e2:	687b      	ldr	r3, [r7, #4]
 80196e4:	2b00      	cmp	r3, #0
 80196e6:	d0fc      	beq.n	80196e2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80196e8:	bf00      	nop
 80196ea:	bf00      	nop
 80196ec:	3714      	adds	r7, #20
 80196ee:	46bd      	mov	sp, r7
 80196f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80196f4:	4770      	bx	lr
 80196f6:	bf00      	nop
 80196f8:	24000028 	.word	0x24000028
 80196fc:	00000000 	.word	0x00000000

08019700 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8019700:	4b07      	ldr	r3, [pc, #28]	@ (8019720 <pxCurrentTCBConst2>)
 8019702:	6819      	ldr	r1, [r3, #0]
 8019704:	6808      	ldr	r0, [r1, #0]
 8019706:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801970a:	f380 8809 	msr	PSP, r0
 801970e:	f3bf 8f6f 	isb	sy
 8019712:	f04f 0000 	mov.w	r0, #0
 8019716:	f380 8811 	msr	BASEPRI, r0
 801971a:	4770      	bx	lr
 801971c:	f3af 8000 	nop.w

08019720 <pxCurrentTCBConst2>:
 8019720:	24000c70 	.word	0x24000c70
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8019724:	bf00      	nop
 8019726:	bf00      	nop

08019728 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8019728:	4808      	ldr	r0, [pc, #32]	@ (801974c <prvPortStartFirstTask+0x24>)
 801972a:	6800      	ldr	r0, [r0, #0]
 801972c:	6800      	ldr	r0, [r0, #0]
 801972e:	f380 8808 	msr	MSP, r0
 8019732:	f04f 0000 	mov.w	r0, #0
 8019736:	f380 8814 	msr	CONTROL, r0
 801973a:	b662      	cpsie	i
 801973c:	b661      	cpsie	f
 801973e:	f3bf 8f4f 	dsb	sy
 8019742:	f3bf 8f6f 	isb	sy
 8019746:	df00      	svc	0
 8019748:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801974a:	bf00      	nop
 801974c:	e000ed08 	.word	0xe000ed08

08019750 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8019750:	b580      	push	{r7, lr}
 8019752:	b086      	sub	sp, #24
 8019754:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8019756:	4b47      	ldr	r3, [pc, #284]	@ (8019874 <xPortStartScheduler+0x124>)
 8019758:	681b      	ldr	r3, [r3, #0]
 801975a:	4a47      	ldr	r2, [pc, #284]	@ (8019878 <xPortStartScheduler+0x128>)
 801975c:	4293      	cmp	r3, r2
 801975e:	d10b      	bne.n	8019778 <xPortStartScheduler+0x28>
	__asm volatile
 8019760:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019764:	f383 8811 	msr	BASEPRI, r3
 8019768:	f3bf 8f6f 	isb	sy
 801976c:	f3bf 8f4f 	dsb	sy
 8019770:	60fb      	str	r3, [r7, #12]
}
 8019772:	bf00      	nop
 8019774:	bf00      	nop
 8019776:	e7fd      	b.n	8019774 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8019778:	4b3e      	ldr	r3, [pc, #248]	@ (8019874 <xPortStartScheduler+0x124>)
 801977a:	681b      	ldr	r3, [r3, #0]
 801977c:	4a3f      	ldr	r2, [pc, #252]	@ (801987c <xPortStartScheduler+0x12c>)
 801977e:	4293      	cmp	r3, r2
 8019780:	d10b      	bne.n	801979a <xPortStartScheduler+0x4a>
	__asm volatile
 8019782:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019786:	f383 8811 	msr	BASEPRI, r3
 801978a:	f3bf 8f6f 	isb	sy
 801978e:	f3bf 8f4f 	dsb	sy
 8019792:	613b      	str	r3, [r7, #16]
}
 8019794:	bf00      	nop
 8019796:	bf00      	nop
 8019798:	e7fd      	b.n	8019796 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 801979a:	4b39      	ldr	r3, [pc, #228]	@ (8019880 <xPortStartScheduler+0x130>)
 801979c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801979e:	697b      	ldr	r3, [r7, #20]
 80197a0:	781b      	ldrb	r3, [r3, #0]
 80197a2:	b2db      	uxtb	r3, r3
 80197a4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80197a6:	697b      	ldr	r3, [r7, #20]
 80197a8:	22ff      	movs	r2, #255	@ 0xff
 80197aa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80197ac:	697b      	ldr	r3, [r7, #20]
 80197ae:	781b      	ldrb	r3, [r3, #0]
 80197b0:	b2db      	uxtb	r3, r3
 80197b2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80197b4:	78fb      	ldrb	r3, [r7, #3]
 80197b6:	b2db      	uxtb	r3, r3
 80197b8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80197bc:	b2da      	uxtb	r2, r3
 80197be:	4b31      	ldr	r3, [pc, #196]	@ (8019884 <xPortStartScheduler+0x134>)
 80197c0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80197c2:	4b31      	ldr	r3, [pc, #196]	@ (8019888 <xPortStartScheduler+0x138>)
 80197c4:	2207      	movs	r2, #7
 80197c6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80197c8:	e009      	b.n	80197de <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80197ca:	4b2f      	ldr	r3, [pc, #188]	@ (8019888 <xPortStartScheduler+0x138>)
 80197cc:	681b      	ldr	r3, [r3, #0]
 80197ce:	3b01      	subs	r3, #1
 80197d0:	4a2d      	ldr	r2, [pc, #180]	@ (8019888 <xPortStartScheduler+0x138>)
 80197d2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80197d4:	78fb      	ldrb	r3, [r7, #3]
 80197d6:	b2db      	uxtb	r3, r3
 80197d8:	005b      	lsls	r3, r3, #1
 80197da:	b2db      	uxtb	r3, r3
 80197dc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80197de:	78fb      	ldrb	r3, [r7, #3]
 80197e0:	b2db      	uxtb	r3, r3
 80197e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80197e6:	2b80      	cmp	r3, #128	@ 0x80
 80197e8:	d0ef      	beq.n	80197ca <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80197ea:	4b27      	ldr	r3, [pc, #156]	@ (8019888 <xPortStartScheduler+0x138>)
 80197ec:	681b      	ldr	r3, [r3, #0]
 80197ee:	f1c3 0307 	rsb	r3, r3, #7
 80197f2:	2b04      	cmp	r3, #4
 80197f4:	d00b      	beq.n	801980e <xPortStartScheduler+0xbe>
	__asm volatile
 80197f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80197fa:	f383 8811 	msr	BASEPRI, r3
 80197fe:	f3bf 8f6f 	isb	sy
 8019802:	f3bf 8f4f 	dsb	sy
 8019806:	60bb      	str	r3, [r7, #8]
}
 8019808:	bf00      	nop
 801980a:	bf00      	nop
 801980c:	e7fd      	b.n	801980a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801980e:	4b1e      	ldr	r3, [pc, #120]	@ (8019888 <xPortStartScheduler+0x138>)
 8019810:	681b      	ldr	r3, [r3, #0]
 8019812:	021b      	lsls	r3, r3, #8
 8019814:	4a1c      	ldr	r2, [pc, #112]	@ (8019888 <xPortStartScheduler+0x138>)
 8019816:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8019818:	4b1b      	ldr	r3, [pc, #108]	@ (8019888 <xPortStartScheduler+0x138>)
 801981a:	681b      	ldr	r3, [r3, #0]
 801981c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8019820:	4a19      	ldr	r2, [pc, #100]	@ (8019888 <xPortStartScheduler+0x138>)
 8019822:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8019824:	687b      	ldr	r3, [r7, #4]
 8019826:	b2da      	uxtb	r2, r3
 8019828:	697b      	ldr	r3, [r7, #20]
 801982a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801982c:	4b17      	ldr	r3, [pc, #92]	@ (801988c <xPortStartScheduler+0x13c>)
 801982e:	681b      	ldr	r3, [r3, #0]
 8019830:	4a16      	ldr	r2, [pc, #88]	@ (801988c <xPortStartScheduler+0x13c>)
 8019832:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8019836:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8019838:	4b14      	ldr	r3, [pc, #80]	@ (801988c <xPortStartScheduler+0x13c>)
 801983a:	681b      	ldr	r3, [r3, #0]
 801983c:	4a13      	ldr	r2, [pc, #76]	@ (801988c <xPortStartScheduler+0x13c>)
 801983e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8019842:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8019844:	f000 f9a6 	bl	8019b94 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8019848:	4b11      	ldr	r3, [pc, #68]	@ (8019890 <xPortStartScheduler+0x140>)
 801984a:	2200      	movs	r2, #0
 801984c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801984e:	f000 f9dd 	bl	8019c0c <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8019852:	4b10      	ldr	r3, [pc, #64]	@ (8019894 <xPortStartScheduler+0x144>)
 8019854:	681b      	ldr	r3, [r3, #0]
 8019856:	4a0f      	ldr	r2, [pc, #60]	@ (8019894 <xPortStartScheduler+0x144>)
 8019858:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 801985c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801985e:	f7ff ff63 	bl	8019728 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8019862:	f7fe fccd 	bl	8018200 <vTaskSwitchContext>
	prvTaskExitError();
 8019866:	f7ff ff1b 	bl	80196a0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801986a:	2300      	movs	r3, #0
}
 801986c:	4618      	mov	r0, r3
 801986e:	3718      	adds	r7, #24
 8019870:	46bd      	mov	sp, r7
 8019872:	bd80      	pop	{r7, pc}
 8019874:	e000ed00 	.word	0xe000ed00
 8019878:	410fc271 	.word	0x410fc271
 801987c:	410fc270 	.word	0x410fc270
 8019880:	e000e400 	.word	0xe000e400
 8019884:	240012b4 	.word	0x240012b4
 8019888:	240012b8 	.word	0x240012b8
 801988c:	e000ed20 	.word	0xe000ed20
 8019890:	24000028 	.word	0x24000028
 8019894:	e000ef34 	.word	0xe000ef34

08019898 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8019898:	b480      	push	{r7}
 801989a:	b083      	sub	sp, #12
 801989c:	af00      	add	r7, sp, #0
	__asm volatile
 801989e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80198a2:	f383 8811 	msr	BASEPRI, r3
 80198a6:	f3bf 8f6f 	isb	sy
 80198aa:	f3bf 8f4f 	dsb	sy
 80198ae:	607b      	str	r3, [r7, #4]
}
 80198b0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80198b2:	4b10      	ldr	r3, [pc, #64]	@ (80198f4 <vPortEnterCritical+0x5c>)
 80198b4:	681b      	ldr	r3, [r3, #0]
 80198b6:	3301      	adds	r3, #1
 80198b8:	4a0e      	ldr	r2, [pc, #56]	@ (80198f4 <vPortEnterCritical+0x5c>)
 80198ba:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80198bc:	4b0d      	ldr	r3, [pc, #52]	@ (80198f4 <vPortEnterCritical+0x5c>)
 80198be:	681b      	ldr	r3, [r3, #0]
 80198c0:	2b01      	cmp	r3, #1
 80198c2:	d110      	bne.n	80198e6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80198c4:	4b0c      	ldr	r3, [pc, #48]	@ (80198f8 <vPortEnterCritical+0x60>)
 80198c6:	681b      	ldr	r3, [r3, #0]
 80198c8:	b2db      	uxtb	r3, r3
 80198ca:	2b00      	cmp	r3, #0
 80198cc:	d00b      	beq.n	80198e6 <vPortEnterCritical+0x4e>
	__asm volatile
 80198ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80198d2:	f383 8811 	msr	BASEPRI, r3
 80198d6:	f3bf 8f6f 	isb	sy
 80198da:	f3bf 8f4f 	dsb	sy
 80198de:	603b      	str	r3, [r7, #0]
}
 80198e0:	bf00      	nop
 80198e2:	bf00      	nop
 80198e4:	e7fd      	b.n	80198e2 <vPortEnterCritical+0x4a>
	}
}
 80198e6:	bf00      	nop
 80198e8:	370c      	adds	r7, #12
 80198ea:	46bd      	mov	sp, r7
 80198ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80198f0:	4770      	bx	lr
 80198f2:	bf00      	nop
 80198f4:	24000028 	.word	0x24000028
 80198f8:	e000ed04 	.word	0xe000ed04

080198fc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80198fc:	b480      	push	{r7}
 80198fe:	b083      	sub	sp, #12
 8019900:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8019902:	4b12      	ldr	r3, [pc, #72]	@ (801994c <vPortExitCritical+0x50>)
 8019904:	681b      	ldr	r3, [r3, #0]
 8019906:	2b00      	cmp	r3, #0
 8019908:	d10b      	bne.n	8019922 <vPortExitCritical+0x26>
	__asm volatile
 801990a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801990e:	f383 8811 	msr	BASEPRI, r3
 8019912:	f3bf 8f6f 	isb	sy
 8019916:	f3bf 8f4f 	dsb	sy
 801991a:	607b      	str	r3, [r7, #4]
}
 801991c:	bf00      	nop
 801991e:	bf00      	nop
 8019920:	e7fd      	b.n	801991e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8019922:	4b0a      	ldr	r3, [pc, #40]	@ (801994c <vPortExitCritical+0x50>)
 8019924:	681b      	ldr	r3, [r3, #0]
 8019926:	3b01      	subs	r3, #1
 8019928:	4a08      	ldr	r2, [pc, #32]	@ (801994c <vPortExitCritical+0x50>)
 801992a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801992c:	4b07      	ldr	r3, [pc, #28]	@ (801994c <vPortExitCritical+0x50>)
 801992e:	681b      	ldr	r3, [r3, #0]
 8019930:	2b00      	cmp	r3, #0
 8019932:	d105      	bne.n	8019940 <vPortExitCritical+0x44>
 8019934:	2300      	movs	r3, #0
 8019936:	603b      	str	r3, [r7, #0]
	__asm volatile
 8019938:	683b      	ldr	r3, [r7, #0]
 801993a:	f383 8811 	msr	BASEPRI, r3
}
 801993e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8019940:	bf00      	nop
 8019942:	370c      	adds	r7, #12
 8019944:	46bd      	mov	sp, r7
 8019946:	f85d 7b04 	ldr.w	r7, [sp], #4
 801994a:	4770      	bx	lr
 801994c:	24000028 	.word	0x24000028

08019950 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8019950:	f3ef 8009 	mrs	r0, PSP
 8019954:	f3bf 8f6f 	isb	sy
 8019958:	4b15      	ldr	r3, [pc, #84]	@ (80199b0 <pxCurrentTCBConst>)
 801995a:	681a      	ldr	r2, [r3, #0]
 801995c:	f01e 0f10 	tst.w	lr, #16
 8019960:	bf08      	it	eq
 8019962:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8019966:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801996a:	6010      	str	r0, [r2, #0]
 801996c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8019970:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8019974:	f380 8811 	msr	BASEPRI, r0
 8019978:	f3bf 8f4f 	dsb	sy
 801997c:	f3bf 8f6f 	isb	sy
 8019980:	f7fe fc3e 	bl	8018200 <vTaskSwitchContext>
 8019984:	f04f 0000 	mov.w	r0, #0
 8019988:	f380 8811 	msr	BASEPRI, r0
 801998c:	bc09      	pop	{r0, r3}
 801998e:	6819      	ldr	r1, [r3, #0]
 8019990:	6808      	ldr	r0, [r1, #0]
 8019992:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019996:	f01e 0f10 	tst.w	lr, #16
 801999a:	bf08      	it	eq
 801999c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80199a0:	f380 8809 	msr	PSP, r0
 80199a4:	f3bf 8f6f 	isb	sy
 80199a8:	4770      	bx	lr
 80199aa:	bf00      	nop
 80199ac:	f3af 8000 	nop.w

080199b0 <pxCurrentTCBConst>:
 80199b0:	24000c70 	.word	0x24000c70
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80199b4:	bf00      	nop
 80199b6:	bf00      	nop

080199b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80199b8:	b580      	push	{r7, lr}
 80199ba:	b082      	sub	sp, #8
 80199bc:	af00      	add	r7, sp, #0
	__asm volatile
 80199be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80199c2:	f383 8811 	msr	BASEPRI, r3
 80199c6:	f3bf 8f6f 	isb	sy
 80199ca:	f3bf 8f4f 	dsb	sy
 80199ce:	607b      	str	r3, [r7, #4]
}
 80199d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80199d2:	f7fe fb53 	bl	801807c <xTaskIncrementTick>
 80199d6:	4603      	mov	r3, r0
 80199d8:	2b00      	cmp	r3, #0
 80199da:	d003      	beq.n	80199e4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80199dc:	4b06      	ldr	r3, [pc, #24]	@ (80199f8 <xPortSysTickHandler+0x40>)
 80199de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80199e2:	601a      	str	r2, [r3, #0]
 80199e4:	2300      	movs	r3, #0
 80199e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80199e8:	683b      	ldr	r3, [r7, #0]
 80199ea:	f383 8811 	msr	BASEPRI, r3
}
 80199ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80199f0:	bf00      	nop
 80199f2:	3708      	adds	r7, #8
 80199f4:	46bd      	mov	sp, r7
 80199f6:	bd80      	pop	{r7, pc}
 80199f8:	e000ed04 	.word	0xe000ed04

080199fc <vPortSuppressTicksAndSleep>:
/*-----------------------------------------------------------*/

#if( configUSE_TICKLESS_IDLE == 1 )

	__attribute__((weak)) void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
	{
 80199fc:	b580      	push	{r7, lr}
 80199fe:	b088      	sub	sp, #32
 8019a00:	af00      	add	r7, sp, #0
 8019a02:	6078      	str	r0, [r7, #4]
	uint32_t ulReloadValue, ulCompleteTickPeriods, ulCompletedSysTickDecrements;
	TickType_t xModifiableIdleTime;

		/* Make sure the SysTick reload value does not overflow the counter. */
		if( xExpectedIdleTime > xMaximumPossibleSuppressedTicks )
 8019a04:	4b5d      	ldr	r3, [pc, #372]	@ (8019b7c <vPortSuppressTicksAndSleep+0x180>)
 8019a06:	681b      	ldr	r3, [r3, #0]
 8019a08:	687a      	ldr	r2, [r7, #4]
 8019a0a:	429a      	cmp	r2, r3
 8019a0c:	d902      	bls.n	8019a14 <vPortSuppressTicksAndSleep+0x18>
		{
			xExpectedIdleTime = xMaximumPossibleSuppressedTicks;
 8019a0e:	4b5b      	ldr	r3, [pc, #364]	@ (8019b7c <vPortSuppressTicksAndSleep+0x180>)
 8019a10:	681b      	ldr	r3, [r3, #0]
 8019a12:	607b      	str	r3, [r7, #4]

		/* Stop the SysTick momentarily.  The time the SysTick is stopped for
		is accounted for as best it can be, but using the tickless mode will
		inevitably result in some tiny drift of the time maintained by the
		kernel with respect to calendar time. */
		portNVIC_SYSTICK_CTRL_REG &= ~portNVIC_SYSTICK_ENABLE_BIT;
 8019a14:	4b5a      	ldr	r3, [pc, #360]	@ (8019b80 <vPortSuppressTicksAndSleep+0x184>)
 8019a16:	681b      	ldr	r3, [r3, #0]
 8019a18:	4a59      	ldr	r2, [pc, #356]	@ (8019b80 <vPortSuppressTicksAndSleep+0x184>)
 8019a1a:	f023 0301 	bic.w	r3, r3, #1
 8019a1e:	6013      	str	r3, [r2, #0]

		/* Calculate the reload value required to wait xExpectedIdleTime
		tick periods.  -1 is used because this code will execute part way
		through one of the tick periods. */
		ulReloadValue = portNVIC_SYSTICK_CURRENT_VALUE_REG + ( ulTimerCountsForOneTick * ( xExpectedIdleTime - 1UL ) );
 8019a20:	4b58      	ldr	r3, [pc, #352]	@ (8019b84 <vPortSuppressTicksAndSleep+0x188>)
 8019a22:	681a      	ldr	r2, [r3, #0]
 8019a24:	687b      	ldr	r3, [r7, #4]
 8019a26:	3b01      	subs	r3, #1
 8019a28:	4957      	ldr	r1, [pc, #348]	@ (8019b88 <vPortSuppressTicksAndSleep+0x18c>)
 8019a2a:	6809      	ldr	r1, [r1, #0]
 8019a2c:	fb01 f303 	mul.w	r3, r1, r3
 8019a30:	4413      	add	r3, r2
 8019a32:	61fb      	str	r3, [r7, #28]
		if( ulReloadValue > ulStoppedTimerCompensation )
 8019a34:	4b55      	ldr	r3, [pc, #340]	@ (8019b8c <vPortSuppressTicksAndSleep+0x190>)
 8019a36:	681b      	ldr	r3, [r3, #0]
 8019a38:	69fa      	ldr	r2, [r7, #28]
 8019a3a:	429a      	cmp	r2, r3
 8019a3c:	d904      	bls.n	8019a48 <vPortSuppressTicksAndSleep+0x4c>
		{
			ulReloadValue -= ulStoppedTimerCompensation;
 8019a3e:	4b53      	ldr	r3, [pc, #332]	@ (8019b8c <vPortSuppressTicksAndSleep+0x190>)
 8019a40:	681b      	ldr	r3, [r3, #0]
 8019a42:	69fa      	ldr	r2, [r7, #28]
 8019a44:	1ad3      	subs	r3, r2, r3
 8019a46:	61fb      	str	r3, [r7, #28]
		}

		/* Enter a critical section but don't use the taskENTER_CRITICAL()
		method as that will mask interrupts that should exit sleep mode. */
		__asm volatile( "cpsid i" ::: "memory" );
 8019a48:	b672      	cpsid	i
		__asm volatile( "dsb" );
 8019a4a:	f3bf 8f4f 	dsb	sy
		__asm volatile( "isb" );
 8019a4e:	f3bf 8f6f 	isb	sy

		/* If a context switch is pending or a task is waiting for the scheduler
		to be unsuspended then abandon the low power entry. */
		if( eTaskConfirmSleepModeStatus() == eAbortSleep )
 8019a52:	f7fe fe1b 	bl	801868c <eTaskConfirmSleepModeStatus>
 8019a56:	4603      	mov	r3, r0
 8019a58:	2b00      	cmp	r3, #0
 8019a5a:	d110      	bne.n	8019a7e <vPortSuppressTicksAndSleep+0x82>
		{
			/* Restart from whatever is left in the count register to complete
			this tick period. */
			portNVIC_SYSTICK_LOAD_REG = portNVIC_SYSTICK_CURRENT_VALUE_REG;
 8019a5c:	4b49      	ldr	r3, [pc, #292]	@ (8019b84 <vPortSuppressTicksAndSleep+0x188>)
 8019a5e:	4a4c      	ldr	r2, [pc, #304]	@ (8019b90 <vPortSuppressTicksAndSleep+0x194>)
 8019a60:	681b      	ldr	r3, [r3, #0]
 8019a62:	6013      	str	r3, [r2, #0]

			/* Restart SysTick. */
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 8019a64:	4b46      	ldr	r3, [pc, #280]	@ (8019b80 <vPortSuppressTicksAndSleep+0x184>)
 8019a66:	681b      	ldr	r3, [r3, #0]
 8019a68:	4a45      	ldr	r2, [pc, #276]	@ (8019b80 <vPortSuppressTicksAndSleep+0x184>)
 8019a6a:	f043 0301 	orr.w	r3, r3, #1
 8019a6e:	6013      	str	r3, [r2, #0]

			/* Reset the reload register to the value required for normal tick
			periods. */
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 8019a70:	4b45      	ldr	r3, [pc, #276]	@ (8019b88 <vPortSuppressTicksAndSleep+0x18c>)
 8019a72:	681b      	ldr	r3, [r3, #0]
 8019a74:	4a46      	ldr	r2, [pc, #280]	@ (8019b90 <vPortSuppressTicksAndSleep+0x194>)
 8019a76:	3b01      	subs	r3, #1
 8019a78:	6013      	str	r3, [r2, #0]

			/* Re-enable interrupts - see comments above the cpsid instruction()
			above. */
			__asm volatile( "cpsie i" ::: "memory" );
 8019a7a:	b662      	cpsie	i
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;

			/* Exit with interrupts enabled. */
			__asm volatile( "cpsie i" ::: "memory" );
		}
	}
 8019a7c:	e079      	b.n	8019b72 <vPortSuppressTicksAndSleep+0x176>
			portNVIC_SYSTICK_LOAD_REG = ulReloadValue;
 8019a7e:	4a44      	ldr	r2, [pc, #272]	@ (8019b90 <vPortSuppressTicksAndSleep+0x194>)
 8019a80:	69fb      	ldr	r3, [r7, #28]
 8019a82:	6013      	str	r3, [r2, #0]
			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8019a84:	4b3f      	ldr	r3, [pc, #252]	@ (8019b84 <vPortSuppressTicksAndSleep+0x188>)
 8019a86:	2200      	movs	r2, #0
 8019a88:	601a      	str	r2, [r3, #0]
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 8019a8a:	4b3d      	ldr	r3, [pc, #244]	@ (8019b80 <vPortSuppressTicksAndSleep+0x184>)
 8019a8c:	681b      	ldr	r3, [r3, #0]
 8019a8e:	4a3c      	ldr	r2, [pc, #240]	@ (8019b80 <vPortSuppressTicksAndSleep+0x184>)
 8019a90:	f043 0301 	orr.w	r3, r3, #1
 8019a94:	6013      	str	r3, [r2, #0]
			xModifiableIdleTime = xExpectedIdleTime;
 8019a96:	687b      	ldr	r3, [r7, #4]
 8019a98:	613b      	str	r3, [r7, #16]
			configPRE_SLEEP_PROCESSING( xModifiableIdleTime );
 8019a9a:	2300      	movs	r3, #0
 8019a9c:	613b      	str	r3, [r7, #16]
 8019a9e:	6938      	ldr	r0, [r7, #16]
 8019aa0:	f7e8 f99a 	bl	8001dd8 <PreSleepProcessing>
			if( xModifiableIdleTime > 0 )
 8019aa4:	693b      	ldr	r3, [r7, #16]
 8019aa6:	2b00      	cmp	r3, #0
 8019aa8:	d004      	beq.n	8019ab4 <vPortSuppressTicksAndSleep+0xb8>
				__asm volatile( "dsb" ::: "memory" );
 8019aaa:	f3bf 8f4f 	dsb	sy
				__asm volatile( "wfi" );
 8019aae:	bf30      	wfi
				__asm volatile( "isb" );
 8019ab0:	f3bf 8f6f 	isb	sy
			configPOST_SLEEP_PROCESSING( xExpectedIdleTime );
 8019ab4:	6878      	ldr	r0, [r7, #4]
 8019ab6:	f7e8 f999 	bl	8001dec <PostSleepProcessing>
			__asm volatile( "cpsie i" ::: "memory" );
 8019aba:	b662      	cpsie	i
			__asm volatile( "dsb" );
 8019abc:	f3bf 8f4f 	dsb	sy
			__asm volatile( "isb" );
 8019ac0:	f3bf 8f6f 	isb	sy
			__asm volatile( "cpsid i" ::: "memory" );
 8019ac4:	b672      	cpsid	i
			__asm volatile( "dsb" );
 8019ac6:	f3bf 8f4f 	dsb	sy
			__asm volatile( "isb" );
 8019aca:	f3bf 8f6f 	isb	sy
			portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT );
 8019ace:	4b2c      	ldr	r3, [pc, #176]	@ (8019b80 <vPortSuppressTicksAndSleep+0x184>)
 8019ad0:	2206      	movs	r2, #6
 8019ad2:	601a      	str	r2, [r3, #0]
			if( ( portNVIC_SYSTICK_CTRL_REG & portNVIC_SYSTICK_COUNT_FLAG_BIT ) != 0 )
 8019ad4:	4b2a      	ldr	r3, [pc, #168]	@ (8019b80 <vPortSuppressTicksAndSleep+0x184>)
 8019ad6:	681b      	ldr	r3, [r3, #0]
 8019ad8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8019adc:	2b00      	cmp	r3, #0
 8019ade:	d01d      	beq.n	8019b1c <vPortSuppressTicksAndSleep+0x120>
				ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL ) - ( ulReloadValue - portNVIC_SYSTICK_CURRENT_VALUE_REG );
 8019ae0:	4b29      	ldr	r3, [pc, #164]	@ (8019b88 <vPortSuppressTicksAndSleep+0x18c>)
 8019ae2:	681a      	ldr	r2, [r3, #0]
 8019ae4:	4b27      	ldr	r3, [pc, #156]	@ (8019b84 <vPortSuppressTicksAndSleep+0x188>)
 8019ae6:	6819      	ldr	r1, [r3, #0]
 8019ae8:	69fb      	ldr	r3, [r7, #28]
 8019aea:	1acb      	subs	r3, r1, r3
 8019aec:	4413      	add	r3, r2
 8019aee:	3b01      	subs	r3, #1
 8019af0:	617b      	str	r3, [r7, #20]
				if( ( ulCalculatedLoadValue < ulStoppedTimerCompensation ) || ( ulCalculatedLoadValue > ulTimerCountsForOneTick ) )
 8019af2:	4b26      	ldr	r3, [pc, #152]	@ (8019b8c <vPortSuppressTicksAndSleep+0x190>)
 8019af4:	681b      	ldr	r3, [r3, #0]
 8019af6:	697a      	ldr	r2, [r7, #20]
 8019af8:	429a      	cmp	r2, r3
 8019afa:	d304      	bcc.n	8019b06 <vPortSuppressTicksAndSleep+0x10a>
 8019afc:	4b22      	ldr	r3, [pc, #136]	@ (8019b88 <vPortSuppressTicksAndSleep+0x18c>)
 8019afe:	681b      	ldr	r3, [r3, #0]
 8019b00:	697a      	ldr	r2, [r7, #20]
 8019b02:	429a      	cmp	r2, r3
 8019b04:	d903      	bls.n	8019b0e <vPortSuppressTicksAndSleep+0x112>
					ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL );
 8019b06:	4b20      	ldr	r3, [pc, #128]	@ (8019b88 <vPortSuppressTicksAndSleep+0x18c>)
 8019b08:	681b      	ldr	r3, [r3, #0]
 8019b0a:	3b01      	subs	r3, #1
 8019b0c:	617b      	str	r3, [r7, #20]
				portNVIC_SYSTICK_LOAD_REG = ulCalculatedLoadValue;
 8019b0e:	4a20      	ldr	r2, [pc, #128]	@ (8019b90 <vPortSuppressTicksAndSleep+0x194>)
 8019b10:	697b      	ldr	r3, [r7, #20]
 8019b12:	6013      	str	r3, [r2, #0]
				ulCompleteTickPeriods = xExpectedIdleTime - 1UL;
 8019b14:	687b      	ldr	r3, [r7, #4]
 8019b16:	3b01      	subs	r3, #1
 8019b18:	61bb      	str	r3, [r7, #24]
 8019b1a:	e018      	b.n	8019b4e <vPortSuppressTicksAndSleep+0x152>
				ulCompletedSysTickDecrements = ( xExpectedIdleTime * ulTimerCountsForOneTick ) - portNVIC_SYSTICK_CURRENT_VALUE_REG;
 8019b1c:	4b1a      	ldr	r3, [pc, #104]	@ (8019b88 <vPortSuppressTicksAndSleep+0x18c>)
 8019b1e:	681b      	ldr	r3, [r3, #0]
 8019b20:	687a      	ldr	r2, [r7, #4]
 8019b22:	fb03 f202 	mul.w	r2, r3, r2
 8019b26:	4b17      	ldr	r3, [pc, #92]	@ (8019b84 <vPortSuppressTicksAndSleep+0x188>)
 8019b28:	681b      	ldr	r3, [r3, #0]
 8019b2a:	1ad3      	subs	r3, r2, r3
 8019b2c:	60fb      	str	r3, [r7, #12]
				ulCompleteTickPeriods = ulCompletedSysTickDecrements / ulTimerCountsForOneTick;
 8019b2e:	4b16      	ldr	r3, [pc, #88]	@ (8019b88 <vPortSuppressTicksAndSleep+0x18c>)
 8019b30:	681b      	ldr	r3, [r3, #0]
 8019b32:	68fa      	ldr	r2, [r7, #12]
 8019b34:	fbb2 f3f3 	udiv	r3, r2, r3
 8019b38:	61bb      	str	r3, [r7, #24]
				portNVIC_SYSTICK_LOAD_REG = ( ( ulCompleteTickPeriods + 1UL ) * ulTimerCountsForOneTick ) - ulCompletedSysTickDecrements;
 8019b3a:	69bb      	ldr	r3, [r7, #24]
 8019b3c:	3301      	adds	r3, #1
 8019b3e:	4a12      	ldr	r2, [pc, #72]	@ (8019b88 <vPortSuppressTicksAndSleep+0x18c>)
 8019b40:	6812      	ldr	r2, [r2, #0]
 8019b42:	fb03 f202 	mul.w	r2, r3, r2
 8019b46:	4912      	ldr	r1, [pc, #72]	@ (8019b90 <vPortSuppressTicksAndSleep+0x194>)
 8019b48:	68fb      	ldr	r3, [r7, #12]
 8019b4a:	1ad3      	subs	r3, r2, r3
 8019b4c:	600b      	str	r3, [r1, #0]
			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8019b4e:	4b0d      	ldr	r3, [pc, #52]	@ (8019b84 <vPortSuppressTicksAndSleep+0x188>)
 8019b50:	2200      	movs	r2, #0
 8019b52:	601a      	str	r2, [r3, #0]
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 8019b54:	4b0a      	ldr	r3, [pc, #40]	@ (8019b80 <vPortSuppressTicksAndSleep+0x184>)
 8019b56:	681b      	ldr	r3, [r3, #0]
 8019b58:	4a09      	ldr	r2, [pc, #36]	@ (8019b80 <vPortSuppressTicksAndSleep+0x184>)
 8019b5a:	f043 0301 	orr.w	r3, r3, #1
 8019b5e:	6013      	str	r3, [r2, #0]
			vTaskStepTick( ulCompleteTickPeriods );
 8019b60:	69b8      	ldr	r0, [r7, #24]
 8019b62:	f7fe fa63 	bl	801802c <vTaskStepTick>
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 8019b66:	4b08      	ldr	r3, [pc, #32]	@ (8019b88 <vPortSuppressTicksAndSleep+0x18c>)
 8019b68:	681b      	ldr	r3, [r3, #0]
 8019b6a:	4a09      	ldr	r2, [pc, #36]	@ (8019b90 <vPortSuppressTicksAndSleep+0x194>)
 8019b6c:	3b01      	subs	r3, #1
 8019b6e:	6013      	str	r3, [r2, #0]
			__asm volatile( "cpsie i" ::: "memory" );
 8019b70:	b662      	cpsie	i
	}
 8019b72:	bf00      	nop
 8019b74:	3720      	adds	r7, #32
 8019b76:	46bd      	mov	sp, r7
 8019b78:	bd80      	pop	{r7, pc}
 8019b7a:	bf00      	nop
 8019b7c:	240012ac 	.word	0x240012ac
 8019b80:	e000e010 	.word	0xe000e010
 8019b84:	e000e018 	.word	0xe000e018
 8019b88:	240012a8 	.word	0x240012a8
 8019b8c:	240012b0 	.word	0x240012b0
 8019b90:	e000e014 	.word	0xe000e014

08019b94 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8019b94:	b480      	push	{r7}
 8019b96:	af00      	add	r7, sp, #0
	/* Calculate the constants required to configure the tick interrupt. */
	#if( configUSE_TICKLESS_IDLE == 1 )
	{
		ulTimerCountsForOneTick = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
 8019b98:	4b14      	ldr	r3, [pc, #80]	@ (8019bec <vPortSetupTimerInterrupt+0x58>)
 8019b9a:	681b      	ldr	r3, [r3, #0]
 8019b9c:	4a14      	ldr	r2, [pc, #80]	@ (8019bf0 <vPortSetupTimerInterrupt+0x5c>)
 8019b9e:	fba2 2303 	umull	r2, r3, r2, r3
 8019ba2:	099b      	lsrs	r3, r3, #6
 8019ba4:	4a13      	ldr	r2, [pc, #76]	@ (8019bf4 <vPortSetupTimerInterrupt+0x60>)
 8019ba6:	6013      	str	r3, [r2, #0]
		xMaximumPossibleSuppressedTicks = portMAX_24_BIT_NUMBER / ulTimerCountsForOneTick;
 8019ba8:	4b12      	ldr	r3, [pc, #72]	@ (8019bf4 <vPortSetupTimerInterrupt+0x60>)
 8019baa:	681b      	ldr	r3, [r3, #0]
 8019bac:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 8019bb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8019bb4:	4a10      	ldr	r2, [pc, #64]	@ (8019bf8 <vPortSetupTimerInterrupt+0x64>)
 8019bb6:	6013      	str	r3, [r2, #0]
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 8019bb8:	4b10      	ldr	r3, [pc, #64]	@ (8019bfc <vPortSetupTimerInterrupt+0x68>)
 8019bba:	222d      	movs	r2, #45	@ 0x2d
 8019bbc:	601a      	str	r2, [r3, #0]
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8019bbe:	4b10      	ldr	r3, [pc, #64]	@ (8019c00 <vPortSetupTimerInterrupt+0x6c>)
 8019bc0:	2200      	movs	r2, #0
 8019bc2:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8019bc4:	4b0f      	ldr	r3, [pc, #60]	@ (8019c04 <vPortSetupTimerInterrupt+0x70>)
 8019bc6:	2200      	movs	r2, #0
 8019bc8:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8019bca:	4b08      	ldr	r3, [pc, #32]	@ (8019bec <vPortSetupTimerInterrupt+0x58>)
 8019bcc:	681b      	ldr	r3, [r3, #0]
 8019bce:	4a08      	ldr	r2, [pc, #32]	@ (8019bf0 <vPortSetupTimerInterrupt+0x5c>)
 8019bd0:	fba2 2303 	umull	r2, r3, r2, r3
 8019bd4:	099b      	lsrs	r3, r3, #6
 8019bd6:	4a0c      	ldr	r2, [pc, #48]	@ (8019c08 <vPortSetupTimerInterrupt+0x74>)
 8019bd8:	3b01      	subs	r3, #1
 8019bda:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8019bdc:	4b08      	ldr	r3, [pc, #32]	@ (8019c00 <vPortSetupTimerInterrupt+0x6c>)
 8019bde:	2207      	movs	r2, #7
 8019be0:	601a      	str	r2, [r3, #0]
}
 8019be2:	bf00      	nop
 8019be4:	46bd      	mov	sp, r7
 8019be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019bea:	4770      	bx	lr
 8019bec:	24000004 	.word	0x24000004
 8019bf0:	10624dd3 	.word	0x10624dd3
 8019bf4:	240012a8 	.word	0x240012a8
 8019bf8:	240012ac 	.word	0x240012ac
 8019bfc:	240012b0 	.word	0x240012b0
 8019c00:	e000e010 	.word	0xe000e010
 8019c04:	e000e018 	.word	0xe000e018
 8019c08:	e000e014 	.word	0xe000e014

08019c0c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8019c0c:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8019c1c <vPortEnableVFP+0x10>
 8019c10:	6801      	ldr	r1, [r0, #0]
 8019c12:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8019c16:	6001      	str	r1, [r0, #0]
 8019c18:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8019c1a:	bf00      	nop
 8019c1c:	e000ed88 	.word	0xe000ed88

08019c20 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8019c20:	b480      	push	{r7}
 8019c22:	b085      	sub	sp, #20
 8019c24:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8019c26:	f3ef 8305 	mrs	r3, IPSR
 8019c2a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8019c2c:	68fb      	ldr	r3, [r7, #12]
 8019c2e:	2b0f      	cmp	r3, #15
 8019c30:	d915      	bls.n	8019c5e <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8019c32:	4a18      	ldr	r2, [pc, #96]	@ (8019c94 <vPortValidateInterruptPriority+0x74>)
 8019c34:	68fb      	ldr	r3, [r7, #12]
 8019c36:	4413      	add	r3, r2
 8019c38:	781b      	ldrb	r3, [r3, #0]
 8019c3a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8019c3c:	4b16      	ldr	r3, [pc, #88]	@ (8019c98 <vPortValidateInterruptPriority+0x78>)
 8019c3e:	781b      	ldrb	r3, [r3, #0]
 8019c40:	7afa      	ldrb	r2, [r7, #11]
 8019c42:	429a      	cmp	r2, r3
 8019c44:	d20b      	bcs.n	8019c5e <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8019c46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019c4a:	f383 8811 	msr	BASEPRI, r3
 8019c4e:	f3bf 8f6f 	isb	sy
 8019c52:	f3bf 8f4f 	dsb	sy
 8019c56:	607b      	str	r3, [r7, #4]
}
 8019c58:	bf00      	nop
 8019c5a:	bf00      	nop
 8019c5c:	e7fd      	b.n	8019c5a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8019c5e:	4b0f      	ldr	r3, [pc, #60]	@ (8019c9c <vPortValidateInterruptPriority+0x7c>)
 8019c60:	681b      	ldr	r3, [r3, #0]
 8019c62:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8019c66:	4b0e      	ldr	r3, [pc, #56]	@ (8019ca0 <vPortValidateInterruptPriority+0x80>)
 8019c68:	681b      	ldr	r3, [r3, #0]
 8019c6a:	429a      	cmp	r2, r3
 8019c6c:	d90b      	bls.n	8019c86 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8019c6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019c72:	f383 8811 	msr	BASEPRI, r3
 8019c76:	f3bf 8f6f 	isb	sy
 8019c7a:	f3bf 8f4f 	dsb	sy
 8019c7e:	603b      	str	r3, [r7, #0]
}
 8019c80:	bf00      	nop
 8019c82:	bf00      	nop
 8019c84:	e7fd      	b.n	8019c82 <vPortValidateInterruptPriority+0x62>
	}
 8019c86:	bf00      	nop
 8019c88:	3714      	adds	r7, #20
 8019c8a:	46bd      	mov	sp, r7
 8019c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c90:	4770      	bx	lr
 8019c92:	bf00      	nop
 8019c94:	e000e3f0 	.word	0xe000e3f0
 8019c98:	240012b4 	.word	0x240012b4
 8019c9c:	e000ed0c 	.word	0xe000ed0c
 8019ca0:	240012b8 	.word	0x240012b8

08019ca4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8019ca4:	b580      	push	{r7, lr}
 8019ca6:	b08a      	sub	sp, #40	@ 0x28
 8019ca8:	af00      	add	r7, sp, #0
 8019caa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8019cac:	2300      	movs	r3, #0
 8019cae:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8019cb0:	f7fe f806 	bl	8017cc0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8019cb4:	4b5f      	ldr	r3, [pc, #380]	@ (8019e34 <pvPortMalloc+0x190>)
 8019cb6:	681b      	ldr	r3, [r3, #0]
 8019cb8:	2b00      	cmp	r3, #0
 8019cba:	d101      	bne.n	8019cc0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8019cbc:	f000 f942 	bl	8019f44 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8019cc0:	4b5d      	ldr	r3, [pc, #372]	@ (8019e38 <pvPortMalloc+0x194>)
 8019cc2:	681a      	ldr	r2, [r3, #0]
 8019cc4:	687b      	ldr	r3, [r7, #4]
 8019cc6:	4013      	ands	r3, r2
 8019cc8:	2b00      	cmp	r3, #0
 8019cca:	f040 8095 	bne.w	8019df8 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8019cce:	687b      	ldr	r3, [r7, #4]
 8019cd0:	2b00      	cmp	r3, #0
 8019cd2:	d01e      	beq.n	8019d12 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8019cd4:	2208      	movs	r2, #8
 8019cd6:	687b      	ldr	r3, [r7, #4]
 8019cd8:	4413      	add	r3, r2
 8019cda:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8019cdc:	687b      	ldr	r3, [r7, #4]
 8019cde:	f003 0307 	and.w	r3, r3, #7
 8019ce2:	2b00      	cmp	r3, #0
 8019ce4:	d015      	beq.n	8019d12 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8019ce6:	687b      	ldr	r3, [r7, #4]
 8019ce8:	f023 0307 	bic.w	r3, r3, #7
 8019cec:	3308      	adds	r3, #8
 8019cee:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8019cf0:	687b      	ldr	r3, [r7, #4]
 8019cf2:	f003 0307 	and.w	r3, r3, #7
 8019cf6:	2b00      	cmp	r3, #0
 8019cf8:	d00b      	beq.n	8019d12 <pvPortMalloc+0x6e>
	__asm volatile
 8019cfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019cfe:	f383 8811 	msr	BASEPRI, r3
 8019d02:	f3bf 8f6f 	isb	sy
 8019d06:	f3bf 8f4f 	dsb	sy
 8019d0a:	617b      	str	r3, [r7, #20]
}
 8019d0c:	bf00      	nop
 8019d0e:	bf00      	nop
 8019d10:	e7fd      	b.n	8019d0e <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8019d12:	687b      	ldr	r3, [r7, #4]
 8019d14:	2b00      	cmp	r3, #0
 8019d16:	d06f      	beq.n	8019df8 <pvPortMalloc+0x154>
 8019d18:	4b48      	ldr	r3, [pc, #288]	@ (8019e3c <pvPortMalloc+0x198>)
 8019d1a:	681b      	ldr	r3, [r3, #0]
 8019d1c:	687a      	ldr	r2, [r7, #4]
 8019d1e:	429a      	cmp	r2, r3
 8019d20:	d86a      	bhi.n	8019df8 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8019d22:	4b47      	ldr	r3, [pc, #284]	@ (8019e40 <pvPortMalloc+0x19c>)
 8019d24:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8019d26:	4b46      	ldr	r3, [pc, #280]	@ (8019e40 <pvPortMalloc+0x19c>)
 8019d28:	681b      	ldr	r3, [r3, #0]
 8019d2a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8019d2c:	e004      	b.n	8019d38 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8019d2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019d30:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8019d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019d34:	681b      	ldr	r3, [r3, #0]
 8019d36:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8019d38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019d3a:	685b      	ldr	r3, [r3, #4]
 8019d3c:	687a      	ldr	r2, [r7, #4]
 8019d3e:	429a      	cmp	r2, r3
 8019d40:	d903      	bls.n	8019d4a <pvPortMalloc+0xa6>
 8019d42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019d44:	681b      	ldr	r3, [r3, #0]
 8019d46:	2b00      	cmp	r3, #0
 8019d48:	d1f1      	bne.n	8019d2e <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8019d4a:	4b3a      	ldr	r3, [pc, #232]	@ (8019e34 <pvPortMalloc+0x190>)
 8019d4c:	681b      	ldr	r3, [r3, #0]
 8019d4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8019d50:	429a      	cmp	r2, r3
 8019d52:	d051      	beq.n	8019df8 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8019d54:	6a3b      	ldr	r3, [r7, #32]
 8019d56:	681b      	ldr	r3, [r3, #0]
 8019d58:	2208      	movs	r2, #8
 8019d5a:	4413      	add	r3, r2
 8019d5c:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8019d5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019d60:	681a      	ldr	r2, [r3, #0]
 8019d62:	6a3b      	ldr	r3, [r7, #32]
 8019d64:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8019d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019d68:	685a      	ldr	r2, [r3, #4]
 8019d6a:	687b      	ldr	r3, [r7, #4]
 8019d6c:	1ad2      	subs	r2, r2, r3
 8019d6e:	2308      	movs	r3, #8
 8019d70:	005b      	lsls	r3, r3, #1
 8019d72:	429a      	cmp	r2, r3
 8019d74:	d920      	bls.n	8019db8 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8019d76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8019d78:	687b      	ldr	r3, [r7, #4]
 8019d7a:	4413      	add	r3, r2
 8019d7c:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8019d7e:	69bb      	ldr	r3, [r7, #24]
 8019d80:	f003 0307 	and.w	r3, r3, #7
 8019d84:	2b00      	cmp	r3, #0
 8019d86:	d00b      	beq.n	8019da0 <pvPortMalloc+0xfc>
	__asm volatile
 8019d88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019d8c:	f383 8811 	msr	BASEPRI, r3
 8019d90:	f3bf 8f6f 	isb	sy
 8019d94:	f3bf 8f4f 	dsb	sy
 8019d98:	613b      	str	r3, [r7, #16]
}
 8019d9a:	bf00      	nop
 8019d9c:	bf00      	nop
 8019d9e:	e7fd      	b.n	8019d9c <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8019da0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019da2:	685a      	ldr	r2, [r3, #4]
 8019da4:	687b      	ldr	r3, [r7, #4]
 8019da6:	1ad2      	subs	r2, r2, r3
 8019da8:	69bb      	ldr	r3, [r7, #24]
 8019daa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8019dac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019dae:	687a      	ldr	r2, [r7, #4]
 8019db0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8019db2:	69b8      	ldr	r0, [r7, #24]
 8019db4:	f000 f928 	bl	801a008 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8019db8:	4b20      	ldr	r3, [pc, #128]	@ (8019e3c <pvPortMalloc+0x198>)
 8019dba:	681a      	ldr	r2, [r3, #0]
 8019dbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019dbe:	685b      	ldr	r3, [r3, #4]
 8019dc0:	1ad3      	subs	r3, r2, r3
 8019dc2:	4a1e      	ldr	r2, [pc, #120]	@ (8019e3c <pvPortMalloc+0x198>)
 8019dc4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8019dc6:	4b1d      	ldr	r3, [pc, #116]	@ (8019e3c <pvPortMalloc+0x198>)
 8019dc8:	681a      	ldr	r2, [r3, #0]
 8019dca:	4b1e      	ldr	r3, [pc, #120]	@ (8019e44 <pvPortMalloc+0x1a0>)
 8019dcc:	681b      	ldr	r3, [r3, #0]
 8019dce:	429a      	cmp	r2, r3
 8019dd0:	d203      	bcs.n	8019dda <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8019dd2:	4b1a      	ldr	r3, [pc, #104]	@ (8019e3c <pvPortMalloc+0x198>)
 8019dd4:	681b      	ldr	r3, [r3, #0]
 8019dd6:	4a1b      	ldr	r2, [pc, #108]	@ (8019e44 <pvPortMalloc+0x1a0>)
 8019dd8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8019dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019ddc:	685a      	ldr	r2, [r3, #4]
 8019dde:	4b16      	ldr	r3, [pc, #88]	@ (8019e38 <pvPortMalloc+0x194>)
 8019de0:	681b      	ldr	r3, [r3, #0]
 8019de2:	431a      	orrs	r2, r3
 8019de4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019de6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8019de8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019dea:	2200      	movs	r2, #0
 8019dec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8019dee:	4b16      	ldr	r3, [pc, #88]	@ (8019e48 <pvPortMalloc+0x1a4>)
 8019df0:	681b      	ldr	r3, [r3, #0]
 8019df2:	3301      	adds	r3, #1
 8019df4:	4a14      	ldr	r2, [pc, #80]	@ (8019e48 <pvPortMalloc+0x1a4>)
 8019df6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8019df8:	f7fd ffa8 	bl	8017d4c <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 8019dfc:	69fb      	ldr	r3, [r7, #28]
 8019dfe:	2b00      	cmp	r3, #0
 8019e00:	d101      	bne.n	8019e06 <pvPortMalloc+0x162>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8019e02:	f7e7 ffdb 	bl	8001dbc <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8019e06:	69fb      	ldr	r3, [r7, #28]
 8019e08:	f003 0307 	and.w	r3, r3, #7
 8019e0c:	2b00      	cmp	r3, #0
 8019e0e:	d00b      	beq.n	8019e28 <pvPortMalloc+0x184>
	__asm volatile
 8019e10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019e14:	f383 8811 	msr	BASEPRI, r3
 8019e18:	f3bf 8f6f 	isb	sy
 8019e1c:	f3bf 8f4f 	dsb	sy
 8019e20:	60fb      	str	r3, [r7, #12]
}
 8019e22:	bf00      	nop
 8019e24:	bf00      	nop
 8019e26:	e7fd      	b.n	8019e24 <pvPortMalloc+0x180>
	return pvReturn;
 8019e28:	69fb      	ldr	r3, [r7, #28]
}
 8019e2a:	4618      	mov	r0, r3
 8019e2c:	3728      	adds	r7, #40	@ 0x28
 8019e2e:	46bd      	mov	sp, r7
 8019e30:	bd80      	pop	{r7, pc}
 8019e32:	bf00      	nop
 8019e34:	240092c4 	.word	0x240092c4
 8019e38:	240092d8 	.word	0x240092d8
 8019e3c:	240092c8 	.word	0x240092c8
 8019e40:	240092bc 	.word	0x240092bc
 8019e44:	240092cc 	.word	0x240092cc
 8019e48:	240092d0 	.word	0x240092d0

08019e4c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8019e4c:	b580      	push	{r7, lr}
 8019e4e:	b086      	sub	sp, #24
 8019e50:	af00      	add	r7, sp, #0
 8019e52:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8019e54:	687b      	ldr	r3, [r7, #4]
 8019e56:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8019e58:	687b      	ldr	r3, [r7, #4]
 8019e5a:	2b00      	cmp	r3, #0
 8019e5c:	d04f      	beq.n	8019efe <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8019e5e:	2308      	movs	r3, #8
 8019e60:	425b      	negs	r3, r3
 8019e62:	697a      	ldr	r2, [r7, #20]
 8019e64:	4413      	add	r3, r2
 8019e66:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8019e68:	697b      	ldr	r3, [r7, #20]
 8019e6a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8019e6c:	693b      	ldr	r3, [r7, #16]
 8019e6e:	685a      	ldr	r2, [r3, #4]
 8019e70:	4b25      	ldr	r3, [pc, #148]	@ (8019f08 <vPortFree+0xbc>)
 8019e72:	681b      	ldr	r3, [r3, #0]
 8019e74:	4013      	ands	r3, r2
 8019e76:	2b00      	cmp	r3, #0
 8019e78:	d10b      	bne.n	8019e92 <vPortFree+0x46>
	__asm volatile
 8019e7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019e7e:	f383 8811 	msr	BASEPRI, r3
 8019e82:	f3bf 8f6f 	isb	sy
 8019e86:	f3bf 8f4f 	dsb	sy
 8019e8a:	60fb      	str	r3, [r7, #12]
}
 8019e8c:	bf00      	nop
 8019e8e:	bf00      	nop
 8019e90:	e7fd      	b.n	8019e8e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8019e92:	693b      	ldr	r3, [r7, #16]
 8019e94:	681b      	ldr	r3, [r3, #0]
 8019e96:	2b00      	cmp	r3, #0
 8019e98:	d00b      	beq.n	8019eb2 <vPortFree+0x66>
	__asm volatile
 8019e9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019e9e:	f383 8811 	msr	BASEPRI, r3
 8019ea2:	f3bf 8f6f 	isb	sy
 8019ea6:	f3bf 8f4f 	dsb	sy
 8019eaa:	60bb      	str	r3, [r7, #8]
}
 8019eac:	bf00      	nop
 8019eae:	bf00      	nop
 8019eb0:	e7fd      	b.n	8019eae <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8019eb2:	693b      	ldr	r3, [r7, #16]
 8019eb4:	685a      	ldr	r2, [r3, #4]
 8019eb6:	4b14      	ldr	r3, [pc, #80]	@ (8019f08 <vPortFree+0xbc>)
 8019eb8:	681b      	ldr	r3, [r3, #0]
 8019eba:	4013      	ands	r3, r2
 8019ebc:	2b00      	cmp	r3, #0
 8019ebe:	d01e      	beq.n	8019efe <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8019ec0:	693b      	ldr	r3, [r7, #16]
 8019ec2:	681b      	ldr	r3, [r3, #0]
 8019ec4:	2b00      	cmp	r3, #0
 8019ec6:	d11a      	bne.n	8019efe <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8019ec8:	693b      	ldr	r3, [r7, #16]
 8019eca:	685a      	ldr	r2, [r3, #4]
 8019ecc:	4b0e      	ldr	r3, [pc, #56]	@ (8019f08 <vPortFree+0xbc>)
 8019ece:	681b      	ldr	r3, [r3, #0]
 8019ed0:	43db      	mvns	r3, r3
 8019ed2:	401a      	ands	r2, r3
 8019ed4:	693b      	ldr	r3, [r7, #16]
 8019ed6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8019ed8:	f7fd fef2 	bl	8017cc0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8019edc:	693b      	ldr	r3, [r7, #16]
 8019ede:	685a      	ldr	r2, [r3, #4]
 8019ee0:	4b0a      	ldr	r3, [pc, #40]	@ (8019f0c <vPortFree+0xc0>)
 8019ee2:	681b      	ldr	r3, [r3, #0]
 8019ee4:	4413      	add	r3, r2
 8019ee6:	4a09      	ldr	r2, [pc, #36]	@ (8019f0c <vPortFree+0xc0>)
 8019ee8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8019eea:	6938      	ldr	r0, [r7, #16]
 8019eec:	f000 f88c 	bl	801a008 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8019ef0:	4b07      	ldr	r3, [pc, #28]	@ (8019f10 <vPortFree+0xc4>)
 8019ef2:	681b      	ldr	r3, [r3, #0]
 8019ef4:	3301      	adds	r3, #1
 8019ef6:	4a06      	ldr	r2, [pc, #24]	@ (8019f10 <vPortFree+0xc4>)
 8019ef8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8019efa:	f7fd ff27 	bl	8017d4c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8019efe:	bf00      	nop
 8019f00:	3718      	adds	r7, #24
 8019f02:	46bd      	mov	sp, r7
 8019f04:	bd80      	pop	{r7, pc}
 8019f06:	bf00      	nop
 8019f08:	240092d8 	.word	0x240092d8
 8019f0c:	240092c8 	.word	0x240092c8
 8019f10:	240092d4 	.word	0x240092d4

08019f14 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 8019f14:	b480      	push	{r7}
 8019f16:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
 8019f18:	4b03      	ldr	r3, [pc, #12]	@ (8019f28 <xPortGetFreeHeapSize+0x14>)
 8019f1a:	681b      	ldr	r3, [r3, #0]
}
 8019f1c:	4618      	mov	r0, r3
 8019f1e:	46bd      	mov	sp, r7
 8019f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f24:	4770      	bx	lr
 8019f26:	bf00      	nop
 8019f28:	240092c8 	.word	0x240092c8

08019f2c <xPortGetMinimumEverFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetMinimumEverFreeHeapSize( void )
{
 8019f2c:	b480      	push	{r7}
 8019f2e:	af00      	add	r7, sp, #0
	return xMinimumEverFreeBytesRemaining;
 8019f30:	4b03      	ldr	r3, [pc, #12]	@ (8019f40 <xPortGetMinimumEverFreeHeapSize+0x14>)
 8019f32:	681b      	ldr	r3, [r3, #0]
}
 8019f34:	4618      	mov	r0, r3
 8019f36:	46bd      	mov	sp, r7
 8019f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f3c:	4770      	bx	lr
 8019f3e:	bf00      	nop
 8019f40:	240092cc 	.word	0x240092cc

08019f44 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8019f44:	b480      	push	{r7}
 8019f46:	b085      	sub	sp, #20
 8019f48:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8019f4a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8019f4e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8019f50:	4b27      	ldr	r3, [pc, #156]	@ (8019ff0 <prvHeapInit+0xac>)
 8019f52:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8019f54:	68fb      	ldr	r3, [r7, #12]
 8019f56:	f003 0307 	and.w	r3, r3, #7
 8019f5a:	2b00      	cmp	r3, #0
 8019f5c:	d00c      	beq.n	8019f78 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8019f5e:	68fb      	ldr	r3, [r7, #12]
 8019f60:	3307      	adds	r3, #7
 8019f62:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8019f64:	68fb      	ldr	r3, [r7, #12]
 8019f66:	f023 0307 	bic.w	r3, r3, #7
 8019f6a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8019f6c:	68ba      	ldr	r2, [r7, #8]
 8019f6e:	68fb      	ldr	r3, [r7, #12]
 8019f70:	1ad3      	subs	r3, r2, r3
 8019f72:	4a1f      	ldr	r2, [pc, #124]	@ (8019ff0 <prvHeapInit+0xac>)
 8019f74:	4413      	add	r3, r2
 8019f76:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8019f78:	68fb      	ldr	r3, [r7, #12]
 8019f7a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8019f7c:	4a1d      	ldr	r2, [pc, #116]	@ (8019ff4 <prvHeapInit+0xb0>)
 8019f7e:	687b      	ldr	r3, [r7, #4]
 8019f80:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8019f82:	4b1c      	ldr	r3, [pc, #112]	@ (8019ff4 <prvHeapInit+0xb0>)
 8019f84:	2200      	movs	r2, #0
 8019f86:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8019f88:	687b      	ldr	r3, [r7, #4]
 8019f8a:	68ba      	ldr	r2, [r7, #8]
 8019f8c:	4413      	add	r3, r2
 8019f8e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8019f90:	2208      	movs	r2, #8
 8019f92:	68fb      	ldr	r3, [r7, #12]
 8019f94:	1a9b      	subs	r3, r3, r2
 8019f96:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8019f98:	68fb      	ldr	r3, [r7, #12]
 8019f9a:	f023 0307 	bic.w	r3, r3, #7
 8019f9e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8019fa0:	68fb      	ldr	r3, [r7, #12]
 8019fa2:	4a15      	ldr	r2, [pc, #84]	@ (8019ff8 <prvHeapInit+0xb4>)
 8019fa4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8019fa6:	4b14      	ldr	r3, [pc, #80]	@ (8019ff8 <prvHeapInit+0xb4>)
 8019fa8:	681b      	ldr	r3, [r3, #0]
 8019faa:	2200      	movs	r2, #0
 8019fac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8019fae:	4b12      	ldr	r3, [pc, #72]	@ (8019ff8 <prvHeapInit+0xb4>)
 8019fb0:	681b      	ldr	r3, [r3, #0]
 8019fb2:	2200      	movs	r2, #0
 8019fb4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8019fb6:	687b      	ldr	r3, [r7, #4]
 8019fb8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8019fba:	683b      	ldr	r3, [r7, #0]
 8019fbc:	68fa      	ldr	r2, [r7, #12]
 8019fbe:	1ad2      	subs	r2, r2, r3
 8019fc0:	683b      	ldr	r3, [r7, #0]
 8019fc2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8019fc4:	4b0c      	ldr	r3, [pc, #48]	@ (8019ff8 <prvHeapInit+0xb4>)
 8019fc6:	681a      	ldr	r2, [r3, #0]
 8019fc8:	683b      	ldr	r3, [r7, #0]
 8019fca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8019fcc:	683b      	ldr	r3, [r7, #0]
 8019fce:	685b      	ldr	r3, [r3, #4]
 8019fd0:	4a0a      	ldr	r2, [pc, #40]	@ (8019ffc <prvHeapInit+0xb8>)
 8019fd2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8019fd4:	683b      	ldr	r3, [r7, #0]
 8019fd6:	685b      	ldr	r3, [r3, #4]
 8019fd8:	4a09      	ldr	r2, [pc, #36]	@ (801a000 <prvHeapInit+0xbc>)
 8019fda:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8019fdc:	4b09      	ldr	r3, [pc, #36]	@ (801a004 <prvHeapInit+0xc0>)
 8019fde:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8019fe2:	601a      	str	r2, [r3, #0]
}
 8019fe4:	bf00      	nop
 8019fe6:	3714      	adds	r7, #20
 8019fe8:	46bd      	mov	sp, r7
 8019fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019fee:	4770      	bx	lr
 8019ff0:	240012bc 	.word	0x240012bc
 8019ff4:	240092bc 	.word	0x240092bc
 8019ff8:	240092c4 	.word	0x240092c4
 8019ffc:	240092cc 	.word	0x240092cc
 801a000:	240092c8 	.word	0x240092c8
 801a004:	240092d8 	.word	0x240092d8

0801a008 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 801a008:	b480      	push	{r7}
 801a00a:	b085      	sub	sp, #20
 801a00c:	af00      	add	r7, sp, #0
 801a00e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801a010:	4b28      	ldr	r3, [pc, #160]	@ (801a0b4 <prvInsertBlockIntoFreeList+0xac>)
 801a012:	60fb      	str	r3, [r7, #12]
 801a014:	e002      	b.n	801a01c <prvInsertBlockIntoFreeList+0x14>
 801a016:	68fb      	ldr	r3, [r7, #12]
 801a018:	681b      	ldr	r3, [r3, #0]
 801a01a:	60fb      	str	r3, [r7, #12]
 801a01c:	68fb      	ldr	r3, [r7, #12]
 801a01e:	681b      	ldr	r3, [r3, #0]
 801a020:	687a      	ldr	r2, [r7, #4]
 801a022:	429a      	cmp	r2, r3
 801a024:	d8f7      	bhi.n	801a016 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 801a026:	68fb      	ldr	r3, [r7, #12]
 801a028:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801a02a:	68fb      	ldr	r3, [r7, #12]
 801a02c:	685b      	ldr	r3, [r3, #4]
 801a02e:	68ba      	ldr	r2, [r7, #8]
 801a030:	4413      	add	r3, r2
 801a032:	687a      	ldr	r2, [r7, #4]
 801a034:	429a      	cmp	r2, r3
 801a036:	d108      	bne.n	801a04a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 801a038:	68fb      	ldr	r3, [r7, #12]
 801a03a:	685a      	ldr	r2, [r3, #4]
 801a03c:	687b      	ldr	r3, [r7, #4]
 801a03e:	685b      	ldr	r3, [r3, #4]
 801a040:	441a      	add	r2, r3
 801a042:	68fb      	ldr	r3, [r7, #12]
 801a044:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 801a046:	68fb      	ldr	r3, [r7, #12]
 801a048:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801a04a:	687b      	ldr	r3, [r7, #4]
 801a04c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801a04e:	687b      	ldr	r3, [r7, #4]
 801a050:	685b      	ldr	r3, [r3, #4]
 801a052:	68ba      	ldr	r2, [r7, #8]
 801a054:	441a      	add	r2, r3
 801a056:	68fb      	ldr	r3, [r7, #12]
 801a058:	681b      	ldr	r3, [r3, #0]
 801a05a:	429a      	cmp	r2, r3
 801a05c:	d118      	bne.n	801a090 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801a05e:	68fb      	ldr	r3, [r7, #12]
 801a060:	681a      	ldr	r2, [r3, #0]
 801a062:	4b15      	ldr	r3, [pc, #84]	@ (801a0b8 <prvInsertBlockIntoFreeList+0xb0>)
 801a064:	681b      	ldr	r3, [r3, #0]
 801a066:	429a      	cmp	r2, r3
 801a068:	d00d      	beq.n	801a086 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801a06a:	687b      	ldr	r3, [r7, #4]
 801a06c:	685a      	ldr	r2, [r3, #4]
 801a06e:	68fb      	ldr	r3, [r7, #12]
 801a070:	681b      	ldr	r3, [r3, #0]
 801a072:	685b      	ldr	r3, [r3, #4]
 801a074:	441a      	add	r2, r3
 801a076:	687b      	ldr	r3, [r7, #4]
 801a078:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801a07a:	68fb      	ldr	r3, [r7, #12]
 801a07c:	681b      	ldr	r3, [r3, #0]
 801a07e:	681a      	ldr	r2, [r3, #0]
 801a080:	687b      	ldr	r3, [r7, #4]
 801a082:	601a      	str	r2, [r3, #0]
 801a084:	e008      	b.n	801a098 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801a086:	4b0c      	ldr	r3, [pc, #48]	@ (801a0b8 <prvInsertBlockIntoFreeList+0xb0>)
 801a088:	681a      	ldr	r2, [r3, #0]
 801a08a:	687b      	ldr	r3, [r7, #4]
 801a08c:	601a      	str	r2, [r3, #0]
 801a08e:	e003      	b.n	801a098 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 801a090:	68fb      	ldr	r3, [r7, #12]
 801a092:	681a      	ldr	r2, [r3, #0]
 801a094:	687b      	ldr	r3, [r7, #4]
 801a096:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 801a098:	68fa      	ldr	r2, [r7, #12]
 801a09a:	687b      	ldr	r3, [r7, #4]
 801a09c:	429a      	cmp	r2, r3
 801a09e:	d002      	beq.n	801a0a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801a0a0:	68fb      	ldr	r3, [r7, #12]
 801a0a2:	687a      	ldr	r2, [r7, #4]
 801a0a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801a0a6:	bf00      	nop
 801a0a8:	3714      	adds	r7, #20
 801a0aa:	46bd      	mov	sp, r7
 801a0ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a0b0:	4770      	bx	lr
 801a0b2:	bf00      	nop
 801a0b4:	240092bc 	.word	0x240092bc
 801a0b8:	240092c4 	.word	0x240092c4

0801a0bc <shellInit>:
 * @brief shell 初始化
 * 
 * @param shell shell对象
 */
void shellInit(Shell *shell, char *buffer, unsigned short size)
{
 801a0bc:	b580      	push	{r7, lr}
 801a0be:	b086      	sub	sp, #24
 801a0c0:	af00      	add	r7, sp, #0
 801a0c2:	60f8      	str	r0, [r7, #12]
 801a0c4:	60b9      	str	r1, [r7, #8]
 801a0c6:	4613      	mov	r3, r2
 801a0c8:	80fb      	strh	r3, [r7, #6]
    shell->parser.length = 0;
 801a0ca:	68fb      	ldr	r3, [r7, #12]
 801a0cc:	2200      	movs	r2, #0
 801a0ce:	821a      	strh	r2, [r3, #16]
    shell->parser.cursor = 0;
 801a0d0:	68fb      	ldr	r3, [r7, #12]
 801a0d2:	2200      	movs	r2, #0
 801a0d4:	825a      	strh	r2, [r3, #18]
    shell->info.user = NULL;
 801a0d6:	68fb      	ldr	r3, [r7, #12]
 801a0d8:	2200      	movs	r2, #0
 801a0da:	601a      	str	r2, [r3, #0]
    shell->status.isChecked = 1;
 801a0dc:	68fa      	ldr	r2, [r7, #12]
 801a0de:	f892 3070 	ldrb.w	r3, [r2, #112]	@ 0x70
 801a0e2:	f043 0301 	orr.w	r3, r3, #1
 801a0e6:	f882 3070 	strb.w	r3, [r2, #112]	@ 0x70

    shell->parser.buffer = buffer;
 801a0ea:	68fb      	ldr	r3, [r7, #12]
 801a0ec:	68ba      	ldr	r2, [r7, #8]
 801a0ee:	615a      	str	r2, [r3, #20]
    shell->parser.bufferSize = size / (SHELL_HISTORY_MAX_NUMBER + 1);
 801a0f0:	88fb      	ldrh	r3, [r7, #6]
 801a0f2:	4a2b      	ldr	r2, [pc, #172]	@ (801a1a0 <shellInit+0xe4>)
 801a0f4:	fba2 2303 	umull	r2, r3, r2, r3
 801a0f8:	085b      	lsrs	r3, r3, #1
 801a0fa:	b29a      	uxth	r2, r3
 801a0fc:	68fb      	ldr	r3, [r7, #12]
 801a0fe:	871a      	strh	r2, [r3, #56]	@ 0x38
    
#if SHELL_HISTORY_MAX_NUMBER > 0
    shell->history.offset = 0;
 801a100:	68fb      	ldr	r3, [r7, #12]
 801a102:	2200      	movs	r2, #0
 801a104:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    shell->history.number = 0;
 801a108:	68fb      	ldr	r3, [r7, #12]
 801a10a:	2200      	movs	r2, #0
 801a10c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    shell->history.record = 0;
 801a110:	68fb      	ldr	r3, [r7, #12]
 801a112:	2200      	movs	r2, #0
 801a114:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    for (short i = 0; i < SHELL_HISTORY_MAX_NUMBER; i++)
 801a118:	2300      	movs	r3, #0
 801a11a:	82fb      	strh	r3, [r7, #22]
 801a11c:	e016      	b.n	801a14c <shellInit+0x90>
    {
        shell->history.item[i] = buffer + shell->parser.bufferSize * (i + 1);
 801a11e:	68fb      	ldr	r3, [r7, #12]
 801a120:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 801a122:	461a      	mov	r2, r3
 801a124:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801a128:	3301      	adds	r3, #1
 801a12a:	fb02 f303 	mul.w	r3, r2, r3
 801a12e:	4619      	mov	r1, r3
 801a130:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801a134:	68bb      	ldr	r3, [r7, #8]
 801a136:	4419      	add	r1, r3
 801a138:	68fb      	ldr	r3, [r7, #12]
 801a13a:	3210      	adds	r2, #16
 801a13c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (short i = 0; i < SHELL_HISTORY_MAX_NUMBER; i++)
 801a140:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801a144:	b29b      	uxth	r3, r3
 801a146:	3301      	adds	r3, #1
 801a148:	b29b      	uxth	r3, r3
 801a14a:	82fb      	strh	r3, [r7, #22]
 801a14c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801a150:	2b07      	cmp	r3, #7
 801a152:	dde4      	ble.n	801a11e <shellInit+0x62>
        shell->commandList.base = (ShellCommand *)(__section_begin("shellCommand"));
        shell->commandList.count = ((size_t)(__section_end("shellCommand"))
                                - (size_t)(__section_begin("shellCommand")))
                                / sizeof(ShellCommand);
    #elif defined(__GNUC__)
        shell->commandList.base = (ShellCommand *)(&_shell_command_start);
 801a154:	68fb      	ldr	r3, [r7, #12]
 801a156:	4a13      	ldr	r2, [pc, #76]	@ (801a1a4 <shellInit+0xe8>)
 801a158:	669a      	str	r2, [r3, #104]	@ 0x68
        shell->commandList.count = ((size_t)(&_shell_command_end)
 801a15a:	4a13      	ldr	r2, [pc, #76]	@ (801a1a8 <shellInit+0xec>)
                                - (size_t)(&_shell_command_start))
 801a15c:	4b11      	ldr	r3, [pc, #68]	@ (801a1a4 <shellInit+0xe8>)
 801a15e:	1ad3      	subs	r3, r2, r3
                                / sizeof(ShellCommand);
 801a160:	4a12      	ldr	r2, [pc, #72]	@ (801a1ac <shellInit+0xf0>)
 801a162:	fba2 2303 	umull	r2, r3, r2, r3
 801a166:	091b      	lsrs	r3, r3, #4
        shell->commandList.count = ((size_t)(&_shell_command_end)
 801a168:	b29a      	uxth	r2, r3
 801a16a:	68fb      	ldr	r3, [r7, #12]
 801a16c:	f8a3 206c 	strh.w	r2, [r3, #108]	@ 0x6c
#else
    shell->commandList.base = (ShellCommand *)shellCommandList;
    shell->commandList.count = shellCommandCount;
#endif

    shellAdd(shell);
 801a170:	68f8      	ldr	r0, [r7, #12]
 801a172:	f000 f81f 	bl	801a1b4 <shellAdd>

    shellSetUser(shell, shellSeekCommand(shell,
                                         SHELL_DEFAULT_USER,
                                         shell->commandList.base,
 801a176:	68fb      	ldr	r3, [r7, #12]
 801a178:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
    shellSetUser(shell, shellSeekCommand(shell,
 801a17a:	2300      	movs	r3, #0
 801a17c:	490c      	ldr	r1, [pc, #48]	@ (801a1b0 <shellInit+0xf4>)
 801a17e:	68f8      	ldr	r0, [r7, #12]
 801a180:	f001 f83a 	bl	801b1f8 <shellSeekCommand>
 801a184:	4603      	mov	r3, r0
 801a186:	4619      	mov	r1, r3
 801a188:	68f8      	ldr	r0, [r7, #12]
 801a18a:	f001 fad3 	bl	801b734 <shellSetUser>
                                         0));
    shellWritePrompt(shell, 1);
 801a18e:	2101      	movs	r1, #1
 801a190:	68f8      	ldr	r0, [r7, #12]
 801a192:	f000 f8dd 	bl	801a350 <shellWritePrompt>
}
 801a196:	bf00      	nop
 801a198:	3718      	adds	r7, #24
 801a19a:	46bd      	mov	sp, r7
 801a19c:	bd80      	pop	{r7, pc}
 801a19e:	bf00      	nop
 801a1a0:	38e38e39 	.word	0x38e38e39
 801a1a4:	0802336c 	.word	0x0802336c
 801a1a8:	08023650 	.word	0x08023650
 801a1ac:	cccccccd 	.word	0xcccccccd
 801a1b0:	08021af4 	.word	0x08021af4

0801a1b4 <shellAdd>:
 * @brief 添加shell
 * 
 * @param shell shell对象
 */
static void shellAdd(Shell *shell)
{
 801a1b4:	b480      	push	{r7}
 801a1b6:	b085      	sub	sp, #20
 801a1b8:	af00      	add	r7, sp, #0
 801a1ba:	6078      	str	r0, [r7, #4]
    for (short i = 0; i < SHELL_MAX_NUMBER; i++)
 801a1bc:	2300      	movs	r3, #0
 801a1be:	81fb      	strh	r3, [r7, #14]
 801a1c0:	e013      	b.n	801a1ea <shellAdd+0x36>
    {
        if (shellList[i] == NULL)
 801a1c2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801a1c6:	4a0d      	ldr	r2, [pc, #52]	@ (801a1fc <shellAdd+0x48>)
 801a1c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801a1cc:	2b00      	cmp	r3, #0
 801a1ce:	d106      	bne.n	801a1de <shellAdd+0x2a>
        {
            shellList[i] = shell;
 801a1d0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801a1d4:	4909      	ldr	r1, [pc, #36]	@ (801a1fc <shellAdd+0x48>)
 801a1d6:	687a      	ldr	r2, [r7, #4]
 801a1d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            return;
 801a1dc:	e009      	b.n	801a1f2 <shellAdd+0x3e>
    for (short i = 0; i < SHELL_MAX_NUMBER; i++)
 801a1de:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801a1e2:	b29b      	uxth	r3, r3
 801a1e4:	3301      	adds	r3, #1
 801a1e6:	b29b      	uxth	r3, r3
 801a1e8:	81fb      	strh	r3, [r7, #14]
 801a1ea:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801a1ee:	2b04      	cmp	r3, #4
 801a1f0:	dde7      	ble.n	801a1c2 <shellAdd+0xe>
        }
    }
}
 801a1f2:	3714      	adds	r7, #20
 801a1f4:	46bd      	mov	sp, r7
 801a1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a1fa:	4770      	bx	lr
 801a1fc:	240092dc 	.word	0x240092dc

0801a200 <shellGetCurrent>:
 * @brief 获取当前活动shell
 * 
 * @return Shell* 当前活动shell对象
 */
Shell* shellGetCurrent(void)
{
 801a200:	b480      	push	{r7}
 801a202:	b083      	sub	sp, #12
 801a204:	af00      	add	r7, sp, #0
    for (short i = 0; i < SHELL_MAX_NUMBER; i++)
 801a206:	2300      	movs	r3, #0
 801a208:	80fb      	strh	r3, [r7, #6]
 801a20a:	e01e      	b.n	801a24a <shellGetCurrent+0x4a>
    {
        if (shellList[i] && shellList[i]->status.isActive)
 801a20c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801a210:	4a13      	ldr	r2, [pc, #76]	@ (801a260 <shellGetCurrent+0x60>)
 801a212:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801a216:	2b00      	cmp	r3, #0
 801a218:	d011      	beq.n	801a23e <shellGetCurrent+0x3e>
 801a21a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801a21e:	4a10      	ldr	r2, [pc, #64]	@ (801a260 <shellGetCurrent+0x60>)
 801a220:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801a224:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 801a228:	f003 0302 	and.w	r3, r3, #2
 801a22c:	b2db      	uxtb	r3, r3
 801a22e:	2b00      	cmp	r3, #0
 801a230:	d005      	beq.n	801a23e <shellGetCurrent+0x3e>
        {
            return shellList[i];
 801a232:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801a236:	4a0a      	ldr	r2, [pc, #40]	@ (801a260 <shellGetCurrent+0x60>)
 801a238:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801a23c:	e00a      	b.n	801a254 <shellGetCurrent+0x54>
    for (short i = 0; i < SHELL_MAX_NUMBER; i++)
 801a23e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801a242:	b29b      	uxth	r3, r3
 801a244:	3301      	adds	r3, #1
 801a246:	b29b      	uxth	r3, r3
 801a248:	80fb      	strh	r3, [r7, #6]
 801a24a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801a24e:	2b04      	cmp	r3, #4
 801a250:	dddc      	ble.n	801a20c <shellGetCurrent+0xc>
        }
    }
    return NULL;
 801a252:	2300      	movs	r3, #0
}
 801a254:	4618      	mov	r0, r3
 801a256:	370c      	adds	r7, #12
 801a258:	46bd      	mov	sp, r7
 801a25a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a25e:	4770      	bx	lr
 801a260:	240092dc 	.word	0x240092dc

0801a264 <shellWriteByte>:
 * 
 * @param shell shell对象
 * @param data 字符数据
 */
static void shellWriteByte(Shell *shell, char data)
{
 801a264:	b580      	push	{r7, lr}
 801a266:	b082      	sub	sp, #8
 801a268:	af00      	add	r7, sp, #0
 801a26a:	6078      	str	r0, [r7, #4]
 801a26c:	460b      	mov	r3, r1
 801a26e:	70fb      	strb	r3, [r7, #3]
    shell->write(&data, 1);
 801a270:	687b      	ldr	r3, [r7, #4]
 801a272:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801a274:	1cfa      	adds	r2, r7, #3
 801a276:	2101      	movs	r1, #1
 801a278:	4610      	mov	r0, r2
 801a27a:	4798      	blx	r3
}
 801a27c:	bf00      	nop
 801a27e:	3708      	adds	r7, #8
 801a280:	46bd      	mov	sp, r7
 801a282:	bd80      	pop	{r7, pc}

0801a284 <shellWriteString>:
 * @param string 字符串数据
 * 
 * @return unsigned short 写入字符的数量
 */
unsigned short shellWriteString(Shell *shell, const char *string)
{
 801a284:	b580      	push	{r7, lr}
 801a286:	b084      	sub	sp, #16
 801a288:	af00      	add	r7, sp, #0
 801a28a:	6078      	str	r0, [r7, #4]
 801a28c:	6039      	str	r1, [r7, #0]
    unsigned short count = 0;
 801a28e:	2300      	movs	r3, #0
 801a290:	81fb      	strh	r3, [r7, #14]
    const char *p = string;
 801a292:	683b      	ldr	r3, [r7, #0]
 801a294:	60bb      	str	r3, [r7, #8]
    SHELL_ASSERT(shell->write, return 0);
 801a296:	687b      	ldr	r3, [r7, #4]
 801a298:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801a29a:	2b00      	cmp	r3, #0
 801a29c:	d104      	bne.n	801a2a8 <shellWriteString+0x24>
 801a29e:	2300      	movs	r3, #0
 801a2a0:	e010      	b.n	801a2c4 <shellWriteString+0x40>
    while(*p++)
    {
        count ++;
 801a2a2:	89fb      	ldrh	r3, [r7, #14]
 801a2a4:	3301      	adds	r3, #1
 801a2a6:	81fb      	strh	r3, [r7, #14]
    while(*p++)
 801a2a8:	68bb      	ldr	r3, [r7, #8]
 801a2aa:	1c5a      	adds	r2, r3, #1
 801a2ac:	60ba      	str	r2, [r7, #8]
 801a2ae:	781b      	ldrb	r3, [r3, #0]
 801a2b0:	2b00      	cmp	r3, #0
 801a2b2:	d1f6      	bne.n	801a2a2 <shellWriteString+0x1e>
    }
    return shell->write((char *)string, count);
 801a2b4:	687b      	ldr	r3, [r7, #4]
 801a2b6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801a2b8:	89fa      	ldrh	r2, [r7, #14]
 801a2ba:	4611      	mov	r1, r2
 801a2bc:	6838      	ldr	r0, [r7, #0]
 801a2be:	4798      	blx	r3
 801a2c0:	4603      	mov	r3, r0
 801a2c2:	b29b      	uxth	r3, r3
}
 801a2c4:	4618      	mov	r0, r3
 801a2c6:	3710      	adds	r7, #16
 801a2c8:	46bd      	mov	sp, r7
 801a2ca:	bd80      	pop	{r7, pc}

0801a2cc <shellWriteCommandDesc>:
 * @param string 字符串数据
 * 
 * @return unsigned short 写入字符的数量
 */
static unsigned short shellWriteCommandDesc(Shell *shell, const char *string)
{
 801a2cc:	b580      	push	{r7, lr}
 801a2ce:	b084      	sub	sp, #16
 801a2d0:	af00      	add	r7, sp, #0
 801a2d2:	6078      	str	r0, [r7, #4]
 801a2d4:	6039      	str	r1, [r7, #0]
    unsigned short count = 0;
 801a2d6:	2300      	movs	r3, #0
 801a2d8:	81fb      	strh	r3, [r7, #14]
    const char *p = string;
 801a2da:	683b      	ldr	r3, [r7, #0]
 801a2dc:	60bb      	str	r3, [r7, #8]
    SHELL_ASSERT(shell->write, return 0);
 801a2de:	687b      	ldr	r3, [r7, #4]
 801a2e0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801a2e2:	2b00      	cmp	r3, #0
 801a2e4:	d107      	bne.n	801a2f6 <shellWriteCommandDesc+0x2a>
 801a2e6:	2300      	movs	r3, #0
 801a2e8:	e02b      	b.n	801a342 <shellWriteCommandDesc+0x76>
    while (*p && *p != '\r' && *p != '\n')
    {
        p++;
 801a2ea:	68bb      	ldr	r3, [r7, #8]
 801a2ec:	3301      	adds	r3, #1
 801a2ee:	60bb      	str	r3, [r7, #8]
        count++;
 801a2f0:	89fb      	ldrh	r3, [r7, #14]
 801a2f2:	3301      	adds	r3, #1
 801a2f4:	81fb      	strh	r3, [r7, #14]
    while (*p && *p != '\r' && *p != '\n')
 801a2f6:	68bb      	ldr	r3, [r7, #8]
 801a2f8:	781b      	ldrb	r3, [r3, #0]
 801a2fa:	2b00      	cmp	r3, #0
 801a2fc:	d007      	beq.n	801a30e <shellWriteCommandDesc+0x42>
 801a2fe:	68bb      	ldr	r3, [r7, #8]
 801a300:	781b      	ldrb	r3, [r3, #0]
 801a302:	2b0d      	cmp	r3, #13
 801a304:	d003      	beq.n	801a30e <shellWriteCommandDesc+0x42>
 801a306:	68bb      	ldr	r3, [r7, #8]
 801a308:	781b      	ldrb	r3, [r3, #0]
 801a30a:	2b0a      	cmp	r3, #10
 801a30c:	d1ed      	bne.n	801a2ea <shellWriteCommandDesc+0x1e>
    }
    
    if (count > 36)
 801a30e:	89fb      	ldrh	r3, [r7, #14]
 801a310:	2b24      	cmp	r3, #36	@ 0x24
 801a312:	d90a      	bls.n	801a32a <shellWriteCommandDesc+0x5e>
    {
        shell->write((char *)string, 36);
 801a314:	687b      	ldr	r3, [r7, #4]
 801a316:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801a318:	2124      	movs	r1, #36	@ 0x24
 801a31a:	6838      	ldr	r0, [r7, #0]
 801a31c:	4798      	blx	r3
        shell->write("...", 3);
 801a31e:	687b      	ldr	r3, [r7, #4]
 801a320:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801a322:	2103      	movs	r1, #3
 801a324:	4809      	ldr	r0, [pc, #36]	@ (801a34c <shellWriteCommandDesc+0x80>)
 801a326:	4798      	blx	r3
 801a328:	e005      	b.n	801a336 <shellWriteCommandDesc+0x6a>
    }
    else
    {
        shell->write((char *)string, count);
 801a32a:	687b      	ldr	r3, [r7, #4]
 801a32c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801a32e:	89fa      	ldrh	r2, [r7, #14]
 801a330:	4611      	mov	r1, r2
 801a332:	6838      	ldr	r0, [r7, #0]
 801a334:	4798      	blx	r3
    }
    return count > 36 ? 36 : 39;
 801a336:	89fb      	ldrh	r3, [r7, #14]
 801a338:	2b24      	cmp	r3, #36	@ 0x24
 801a33a:	d901      	bls.n	801a340 <shellWriteCommandDesc+0x74>
 801a33c:	2324      	movs	r3, #36	@ 0x24
 801a33e:	e000      	b.n	801a342 <shellWriteCommandDesc+0x76>
 801a340:	2327      	movs	r3, #39	@ 0x27
}
 801a342:	4618      	mov	r0, r3
 801a344:	3710      	adds	r7, #16
 801a346:	46bd      	mov	sp, r7
 801a348:	bd80      	pop	{r7, pc}
 801a34a:	bf00      	nop
 801a34c:	08021b00 	.word	0x08021b00

0801a350 <shellWritePrompt>:
 * @param shell shell对象
 * @param newline 新行
 * 
 */
static void shellWritePrompt(Shell *shell, unsigned char newline)
{
 801a350:	b580      	push	{r7, lr}
 801a352:	b082      	sub	sp, #8
 801a354:	af00      	add	r7, sp, #0
 801a356:	6078      	str	r0, [r7, #4]
 801a358:	460b      	mov	r3, r1
 801a35a:	70fb      	strb	r3, [r7, #3]
    if (shell->status.isChecked)
 801a35c:	687b      	ldr	r3, [r7, #4]
 801a35e:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 801a362:	f003 0301 	and.w	r3, r3, #1
 801a366:	b2db      	uxtb	r3, r3
 801a368:	2b00      	cmp	r3, #0
 801a36a:	d022      	beq.n	801a3b2 <shellWritePrompt+0x62>
    {
        if (newline)
 801a36c:	78fb      	ldrb	r3, [r7, #3]
 801a36e:	2b00      	cmp	r3, #0
 801a370:	d003      	beq.n	801a37a <shellWritePrompt+0x2a>
        {
            shellWriteString(shell, "\r\n");
 801a372:	4915      	ldr	r1, [pc, #84]	@ (801a3c8 <shellWritePrompt+0x78>)
 801a374:	6878      	ldr	r0, [r7, #4]
 801a376:	f7ff ff85 	bl	801a284 <shellWriteString>
        }
        shellWriteString(shell, shell->info.user->data.user.name);
 801a37a:	687b      	ldr	r3, [r7, #4]
 801a37c:	681b      	ldr	r3, [r3, #0]
 801a37e:	685b      	ldr	r3, [r3, #4]
 801a380:	4619      	mov	r1, r3
 801a382:	6878      	ldr	r0, [r7, #4]
 801a384:	f7ff ff7e 	bl	801a284 <shellWriteString>
        shellWriteString(shell, ":");
 801a388:	4910      	ldr	r1, [pc, #64]	@ (801a3cc <shellWritePrompt+0x7c>)
 801a38a:	6878      	ldr	r0, [r7, #4]
 801a38c:	f7ff ff7a 	bl	801a284 <shellWriteString>
        shellWriteString(shell, shell->info.path ? shell->info.path : "/");
 801a390:	687b      	ldr	r3, [r7, #4]
 801a392:	689b      	ldr	r3, [r3, #8]
 801a394:	2b00      	cmp	r3, #0
 801a396:	d002      	beq.n	801a39e <shellWritePrompt+0x4e>
 801a398:	687b      	ldr	r3, [r7, #4]
 801a39a:	689b      	ldr	r3, [r3, #8]
 801a39c:	e000      	b.n	801a3a0 <shellWritePrompt+0x50>
 801a39e:	4b0c      	ldr	r3, [pc, #48]	@ (801a3d0 <shellWritePrompt+0x80>)
 801a3a0:	4619      	mov	r1, r3
 801a3a2:	6878      	ldr	r0, [r7, #4]
 801a3a4:	f7ff ff6e 	bl	801a284 <shellWriteString>
        shellWriteString(shell, "$ ");
 801a3a8:	490a      	ldr	r1, [pc, #40]	@ (801a3d4 <shellWritePrompt+0x84>)
 801a3aa:	6878      	ldr	r0, [r7, #4]
 801a3ac:	f7ff ff6a 	bl	801a284 <shellWriteString>
    }
    else
    {
        shellWriteString(shell, shellText[SHELL_TEXT_PASSWORD_HINT]);
    }
}
 801a3b0:	e005      	b.n	801a3be <shellWritePrompt+0x6e>
        shellWriteString(shell, shellText[SHELL_TEXT_PASSWORD_HINT]);
 801a3b2:	4b09      	ldr	r3, [pc, #36]	@ (801a3d8 <shellWritePrompt+0x88>)
 801a3b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801a3b6:	4619      	mov	r1, r3
 801a3b8:	6878      	ldr	r0, [r7, #4]
 801a3ba:	f7ff ff63 	bl	801a284 <shellWriteString>
}
 801a3be:	bf00      	nop
 801a3c0:	3708      	adds	r7, #8
 801a3c2:	46bd      	mov	sp, r7
 801a3c4:	bd80      	pop	{r7, pc}
 801a3c6:	bf00      	nop
 801a3c8:	08021b04 	.word	0x08021b04
 801a3cc:	08021b08 	.word	0x08021b08
 801a3d0:	08021b0c 	.word	0x08021b0c
 801a3d4:	08021b10 	.word	0x08021b10
 801a3d8:	2400002c 	.word	0x2400002c

0801a3dc <shellPrint>:
 * @param shell shell对象
 * @param fmt 格式化字符串
 * @param ... 参数
 */
void shellPrint(Shell *shell, const char *fmt, ...)
{
 801a3dc:	b40e      	push	{r1, r2, r3}
 801a3de:	b580      	push	{r7, lr}
 801a3e0:	b0c5      	sub	sp, #276	@ 0x114
 801a3e2:	af00      	add	r7, sp, #0
 801a3e4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801a3e8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 801a3ec:	6018      	str	r0, [r3, #0]
    char buffer[SHELL_PRINT_BUFFER];
    va_list vargs;
    int len;

    SHELL_ASSERT(shell, return);
 801a3ee:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801a3f2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 801a3f6:	681b      	ldr	r3, [r3, #0]
 801a3f8:	2b00      	cmp	r3, #0
 801a3fa:	d02b      	beq.n	801a454 <shellPrint+0x78>

    va_start(vargs, fmt);
 801a3fc:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 801a400:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801a404:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 801a408:	601a      	str	r2, [r3, #0]
    len = vsnprintf(buffer, SHELL_PRINT_BUFFER, fmt, vargs);
 801a40a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801a40e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 801a412:	f107 000c 	add.w	r0, r7, #12
 801a416:	681b      	ldr	r3, [r3, #0]
 801a418:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 801a41c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801a420:	f004 fe68 	bl	801f0f4 <vsniprintf>
 801a424:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
    va_end(vargs);
    if (len > SHELL_PRINT_BUFFER)
 801a428:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 801a42c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801a430:	dd03      	ble.n	801a43a <shellPrint+0x5e>
    {
        len = SHELL_PRINT_BUFFER;
 801a432:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801a436:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    }
    shell->write(buffer, len);
 801a43a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801a43e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 801a442:	681b      	ldr	r3, [r3, #0]
 801a444:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801a446:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 801a44a:	b291      	uxth	r1, r2
 801a44c:	f107 020c 	add.w	r2, r7, #12
 801a450:	4610      	mov	r0, r2
 801a452:	4798      	blx	r3
}
 801a454:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 801a458:	46bd      	mov	sp, r7
 801a45a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801a45e:	b003      	add	sp, #12
 801a460:	4770      	bx	lr

0801a462 <shellCheckPermission>:
 * 
 * @return signed char 0 当前用户具有该命令权限
 * @return signec char -1 当前用户不具有该命令权限
 */
signed char shellCheckPermission(Shell *shell, ShellCommand *command)
{
 801a462:	b480      	push	{r7}
 801a464:	b083      	sub	sp, #12
 801a466:	af00      	add	r7, sp, #0
 801a468:	6078      	str	r0, [r7, #4]
 801a46a:	6039      	str	r1, [r7, #0]
    return ((!command->attr.attrs.permission
 801a46c:	683b      	ldr	r3, [r7, #0]
 801a46e:	781b      	ldrb	r3, [r3, #0]
                || (shell->info.user
                    && (command->attr.attrs.permission 
                        & shell->info.user->attr.attrs.permission)))
            && (shell->status.isChecked
                || command->attr.attrs.enableUnchecked))
            ? 0 : -1;
 801a470:	2b00      	cmp	r3, #0
 801a472:	d013      	beq.n	801a49c <shellCheckPermission+0x3a>
                || command->attr.attrs.type == SHELL_TYPE_USER
 801a474:	683b      	ldr	r3, [r7, #0]
 801a476:	785b      	ldrb	r3, [r3, #1]
 801a478:	f003 030f 	and.w	r3, r3, #15
 801a47c:	b2db      	uxtb	r3, r3
 801a47e:	2b08      	cmp	r3, #8
 801a480:	d00c      	beq.n	801a49c <shellCheckPermission+0x3a>
                || (shell->info.user
 801a482:	687b      	ldr	r3, [r7, #4]
 801a484:	681b      	ldr	r3, [r3, #0]
 801a486:	2b00      	cmp	r3, #0
 801a488:	d019      	beq.n	801a4be <shellCheckPermission+0x5c>
                    && (command->attr.attrs.permission 
 801a48a:	683b      	ldr	r3, [r7, #0]
 801a48c:	781a      	ldrb	r2, [r3, #0]
                        & shell->info.user->attr.attrs.permission)))
 801a48e:	687b      	ldr	r3, [r7, #4]
 801a490:	681b      	ldr	r3, [r3, #0]
 801a492:	781b      	ldrb	r3, [r3, #0]
                    && (command->attr.attrs.permission 
 801a494:	4013      	ands	r3, r2
 801a496:	b2db      	uxtb	r3, r3
 801a498:	2b00      	cmp	r3, #0
 801a49a:	d010      	beq.n	801a4be <shellCheckPermission+0x5c>
            && (shell->status.isChecked
 801a49c:	687b      	ldr	r3, [r7, #4]
 801a49e:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 801a4a2:	f003 0301 	and.w	r3, r3, #1
 801a4a6:	b2db      	uxtb	r3, r3
 801a4a8:	2b00      	cmp	r3, #0
 801a4aa:	d106      	bne.n	801a4ba <shellCheckPermission+0x58>
                || command->attr.attrs.enableUnchecked))
 801a4ac:	683b      	ldr	r3, [r7, #0]
 801a4ae:	785b      	ldrb	r3, [r3, #1]
 801a4b0:	f003 0310 	and.w	r3, r3, #16
 801a4b4:	b2db      	uxtb	r3, r3
 801a4b6:	2b00      	cmp	r3, #0
 801a4b8:	d001      	beq.n	801a4be <shellCheckPermission+0x5c>
            ? 0 : -1;
 801a4ba:	2300      	movs	r3, #0
 801a4bc:	e001      	b.n	801a4c2 <shellCheckPermission+0x60>
 801a4be:	f04f 33ff 	mov.w	r3, #4294967295
}
 801a4c2:	4618      	mov	r0, r3
 801a4c4:	370c      	adds	r7, #12
 801a4c6:	46bd      	mov	sp, r7
 801a4c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a4cc:	4770      	bx	lr

0801a4ce <shellToHex>:
 * @param buffer 缓冲
 * 
 * @return signed char 转换后有效数据长度
 */
signed char shellToHex(unsigned int value, char *buffer)
{
 801a4ce:	b480      	push	{r7}
 801a4d0:	b085      	sub	sp, #20
 801a4d2:	af00      	add	r7, sp, #0
 801a4d4:	6078      	str	r0, [r7, #4]
 801a4d6:	6039      	str	r1, [r7, #0]
    char byte;
    unsigned char i = 8;
 801a4d8:	2308      	movs	r3, #8
 801a4da:	73fb      	strb	r3, [r7, #15]
    buffer[8] = 0;
 801a4dc:	683b      	ldr	r3, [r7, #0]
 801a4de:	3308      	adds	r3, #8
 801a4e0:	2200      	movs	r2, #0
 801a4e2:	701a      	strb	r2, [r3, #0]
    while (value)
 801a4e4:	e018      	b.n	801a518 <shellToHex+0x4a>
    {
        byte = value & 0x0000000F;
 801a4e6:	687b      	ldr	r3, [r7, #4]
 801a4e8:	b2db      	uxtb	r3, r3
 801a4ea:	f003 030f 	and.w	r3, r3, #15
 801a4ee:	73bb      	strb	r3, [r7, #14]
        buffer[--i] = (byte > 9) ? (byte + 87) : (byte + 48);
 801a4f0:	7bbb      	ldrb	r3, [r7, #14]
 801a4f2:	2b09      	cmp	r3, #9
 801a4f4:	d903      	bls.n	801a4fe <shellToHex+0x30>
 801a4f6:	7bbb      	ldrb	r3, [r7, #14]
 801a4f8:	3357      	adds	r3, #87	@ 0x57
 801a4fa:	b2db      	uxtb	r3, r3
 801a4fc:	e002      	b.n	801a504 <shellToHex+0x36>
 801a4fe:	7bbb      	ldrb	r3, [r7, #14]
 801a500:	3330      	adds	r3, #48	@ 0x30
 801a502:	b2db      	uxtb	r3, r3
 801a504:	7bfa      	ldrb	r2, [r7, #15]
 801a506:	3a01      	subs	r2, #1
 801a508:	73fa      	strb	r2, [r7, #15]
 801a50a:	7bfa      	ldrb	r2, [r7, #15]
 801a50c:	6839      	ldr	r1, [r7, #0]
 801a50e:	440a      	add	r2, r1
 801a510:	7013      	strb	r3, [r2, #0]
        value >>= 4;
 801a512:	687b      	ldr	r3, [r7, #4]
 801a514:	091b      	lsrs	r3, r3, #4
 801a516:	607b      	str	r3, [r7, #4]
    while (value)
 801a518:	687b      	ldr	r3, [r7, #4]
 801a51a:	2b00      	cmp	r3, #0
 801a51c:	d1e3      	bne.n	801a4e6 <shellToHex+0x18>
    }
    return 8 - i;
 801a51e:	7bfb      	ldrb	r3, [r7, #15]
 801a520:	f1c3 0308 	rsb	r3, r3, #8
 801a524:	b2db      	uxtb	r3, r3
 801a526:	b25b      	sxtb	r3, r3
}
 801a528:	4618      	mov	r0, r3
 801a52a:	3714      	adds	r7, #20
 801a52c:	46bd      	mov	sp, r7
 801a52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a532:	4770      	bx	lr

0801a534 <shellToDec>:
 * @param buffer 缓冲
 * 
 * @return signed char 转换后有效数据长度
 */
signed char shellToDec(int value, char *buffer)
{
 801a534:	b480      	push	{r7}
 801a536:	b085      	sub	sp, #20
 801a538:	af00      	add	r7, sp, #0
 801a53a:	6078      	str	r0, [r7, #4]
 801a53c:	6039      	str	r1, [r7, #0]
    unsigned char i = 11;
 801a53e:	230b      	movs	r3, #11
 801a540:	73fb      	strb	r3, [r7, #15]
    int v = value;
 801a542:	687b      	ldr	r3, [r7, #4]
 801a544:	60bb      	str	r3, [r7, #8]
    if (value < 0)
 801a546:	687b      	ldr	r3, [r7, #4]
 801a548:	2b00      	cmp	r3, #0
 801a54a:	da02      	bge.n	801a552 <shellToDec+0x1e>
    {
        v = -value;
 801a54c:	687b      	ldr	r3, [r7, #4]
 801a54e:	425b      	negs	r3, r3
 801a550:	60bb      	str	r3, [r7, #8]
    }
    buffer[11] = 0;
 801a552:	683b      	ldr	r3, [r7, #0]
 801a554:	330b      	adds	r3, #11
 801a556:	2200      	movs	r2, #0
 801a558:	701a      	strb	r2, [r3, #0]
    while (v)
 801a55a:	e01d      	b.n	801a598 <shellToDec+0x64>
    {
        buffer[--i] = v % 10 + 48;
 801a55c:	68ba      	ldr	r2, [r7, #8]
 801a55e:	4b20      	ldr	r3, [pc, #128]	@ (801a5e0 <shellToDec+0xac>)
 801a560:	fb83 1302 	smull	r1, r3, r3, r2
 801a564:	1099      	asrs	r1, r3, #2
 801a566:	17d3      	asrs	r3, r2, #31
 801a568:	1ac9      	subs	r1, r1, r3
 801a56a:	460b      	mov	r3, r1
 801a56c:	009b      	lsls	r3, r3, #2
 801a56e:	440b      	add	r3, r1
 801a570:	005b      	lsls	r3, r3, #1
 801a572:	1ad1      	subs	r1, r2, r3
 801a574:	b2ca      	uxtb	r2, r1
 801a576:	7bfb      	ldrb	r3, [r7, #15]
 801a578:	3b01      	subs	r3, #1
 801a57a:	73fb      	strb	r3, [r7, #15]
 801a57c:	7bfb      	ldrb	r3, [r7, #15]
 801a57e:	6839      	ldr	r1, [r7, #0]
 801a580:	440b      	add	r3, r1
 801a582:	3230      	adds	r2, #48	@ 0x30
 801a584:	b2d2      	uxtb	r2, r2
 801a586:	701a      	strb	r2, [r3, #0]
        v /= 10;
 801a588:	68bb      	ldr	r3, [r7, #8]
 801a58a:	4a15      	ldr	r2, [pc, #84]	@ (801a5e0 <shellToDec+0xac>)
 801a58c:	fb82 1203 	smull	r1, r2, r2, r3
 801a590:	1092      	asrs	r2, r2, #2
 801a592:	17db      	asrs	r3, r3, #31
 801a594:	1ad3      	subs	r3, r2, r3
 801a596:	60bb      	str	r3, [r7, #8]
    while (v)
 801a598:	68bb      	ldr	r3, [r7, #8]
 801a59a:	2b00      	cmp	r3, #0
 801a59c:	d1de      	bne.n	801a55c <shellToDec+0x28>
    }
    if (value < 0)
 801a59e:	687b      	ldr	r3, [r7, #4]
 801a5a0:	2b00      	cmp	r3, #0
 801a5a2:	da07      	bge.n	801a5b4 <shellToDec+0x80>
    {
        buffer[--i] = '-';
 801a5a4:	7bfb      	ldrb	r3, [r7, #15]
 801a5a6:	3b01      	subs	r3, #1
 801a5a8:	73fb      	strb	r3, [r7, #15]
 801a5aa:	7bfb      	ldrb	r3, [r7, #15]
 801a5ac:	683a      	ldr	r2, [r7, #0]
 801a5ae:	4413      	add	r3, r2
 801a5b0:	222d      	movs	r2, #45	@ 0x2d
 801a5b2:	701a      	strb	r2, [r3, #0]
    }
    if (value == 0) {
 801a5b4:	687b      	ldr	r3, [r7, #4]
 801a5b6:	2b00      	cmp	r3, #0
 801a5b8:	d107      	bne.n	801a5ca <shellToDec+0x96>
        buffer[--i] = '0';
 801a5ba:	7bfb      	ldrb	r3, [r7, #15]
 801a5bc:	3b01      	subs	r3, #1
 801a5be:	73fb      	strb	r3, [r7, #15]
 801a5c0:	7bfb      	ldrb	r3, [r7, #15]
 801a5c2:	683a      	ldr	r2, [r7, #0]
 801a5c4:	4413      	add	r3, r2
 801a5c6:	2230      	movs	r2, #48	@ 0x30
 801a5c8:	701a      	strb	r2, [r3, #0]
    }
    return 11 - i;
 801a5ca:	7bfb      	ldrb	r3, [r7, #15]
 801a5cc:	f1c3 030b 	rsb	r3, r3, #11
 801a5d0:	b2db      	uxtb	r3, r3
 801a5d2:	b25b      	sxtb	r3, r3
}
 801a5d4:	4618      	mov	r0, r3
 801a5d6:	3714      	adds	r7, #20
 801a5d8:	46bd      	mov	sp, r7
 801a5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a5de:	4770      	bx	lr
 801a5e0:	66666667 	.word	0x66666667

0801a5e4 <shellStringCopy>:
 * @param dest 目标字符串
 * @param src 源字符串
 * @return unsigned short 字符串长度
 */
static unsigned short shellStringCopy(char *dest, char* src)
{
 801a5e4:	b480      	push	{r7}
 801a5e6:	b085      	sub	sp, #20
 801a5e8:	af00      	add	r7, sp, #0
 801a5ea:	6078      	str	r0, [r7, #4]
 801a5ec:	6039      	str	r1, [r7, #0]
    unsigned short count = 0;
 801a5ee:	2300      	movs	r3, #0
 801a5f0:	81fb      	strh	r3, [r7, #14]
    while (*(src + count))
 801a5f2:	e00a      	b.n	801a60a <shellStringCopy+0x26>
    {
        *(dest + count) = *(src + count);
 801a5f4:	89fb      	ldrh	r3, [r7, #14]
 801a5f6:	683a      	ldr	r2, [r7, #0]
 801a5f8:	441a      	add	r2, r3
 801a5fa:	89fb      	ldrh	r3, [r7, #14]
 801a5fc:	6879      	ldr	r1, [r7, #4]
 801a5fe:	440b      	add	r3, r1
 801a600:	7812      	ldrb	r2, [r2, #0]
 801a602:	701a      	strb	r2, [r3, #0]
        count++;
 801a604:	89fb      	ldrh	r3, [r7, #14]
 801a606:	3301      	adds	r3, #1
 801a608:	81fb      	strh	r3, [r7, #14]
    while (*(src + count))
 801a60a:	89fb      	ldrh	r3, [r7, #14]
 801a60c:	683a      	ldr	r2, [r7, #0]
 801a60e:	4413      	add	r3, r2
 801a610:	781b      	ldrb	r3, [r3, #0]
 801a612:	2b00      	cmp	r3, #0
 801a614:	d1ee      	bne.n	801a5f4 <shellStringCopy+0x10>
    }
    *(dest + count) = 0;
 801a616:	89fb      	ldrh	r3, [r7, #14]
 801a618:	687a      	ldr	r2, [r7, #4]
 801a61a:	4413      	add	r3, r2
 801a61c:	2200      	movs	r2, #0
 801a61e:	701a      	strb	r2, [r3, #0]
    return count;
 801a620:	89fb      	ldrh	r3, [r7, #14]
}
 801a622:	4618      	mov	r0, r3
 801a624:	3714      	adds	r7, #20
 801a626:	46bd      	mov	sp, r7
 801a628:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a62c:	4770      	bx	lr

0801a62e <shellStringCompare>:
 * @param dest 目标字符串
 * @param src 源字符串
 * @return unsigned short 匹配长度
 */
static unsigned short shellStringCompare(char* dest, char *src)
{
 801a62e:	b480      	push	{r7}
 801a630:	b085      	sub	sp, #20
 801a632:	af00      	add	r7, sp, #0
 801a634:	6078      	str	r0, [r7, #4]
 801a636:	6039      	str	r1, [r7, #0]
    unsigned short match = 0;
 801a638:	2300      	movs	r3, #0
 801a63a:	81fb      	strh	r3, [r7, #14]
    unsigned short i = 0;
 801a63c:	2300      	movs	r3, #0
 801a63e:	81bb      	strh	r3, [r7, #12]

    while (*(dest +i) && *(src + i))
 801a640:	e00f      	b.n	801a662 <shellStringCompare+0x34>
    {
        if (*(dest + i) != *(src +i))
 801a642:	89bb      	ldrh	r3, [r7, #12]
 801a644:	687a      	ldr	r2, [r7, #4]
 801a646:	4413      	add	r3, r2
 801a648:	781a      	ldrb	r2, [r3, #0]
 801a64a:	89bb      	ldrh	r3, [r7, #12]
 801a64c:	6839      	ldr	r1, [r7, #0]
 801a64e:	440b      	add	r3, r1
 801a650:	781b      	ldrb	r3, [r3, #0]
 801a652:	429a      	cmp	r2, r3
 801a654:	d112      	bne.n	801a67c <shellStringCompare+0x4e>
        {
            break;
        }
        match ++;
 801a656:	89fb      	ldrh	r3, [r7, #14]
 801a658:	3301      	adds	r3, #1
 801a65a:	81fb      	strh	r3, [r7, #14]
        i++;
 801a65c:	89bb      	ldrh	r3, [r7, #12]
 801a65e:	3301      	adds	r3, #1
 801a660:	81bb      	strh	r3, [r7, #12]
    while (*(dest +i) && *(src + i))
 801a662:	89bb      	ldrh	r3, [r7, #12]
 801a664:	687a      	ldr	r2, [r7, #4]
 801a666:	4413      	add	r3, r2
 801a668:	781b      	ldrb	r3, [r3, #0]
 801a66a:	2b00      	cmp	r3, #0
 801a66c:	d007      	beq.n	801a67e <shellStringCompare+0x50>
 801a66e:	89bb      	ldrh	r3, [r7, #12]
 801a670:	683a      	ldr	r2, [r7, #0]
 801a672:	4413      	add	r3, r2
 801a674:	781b      	ldrb	r3, [r3, #0]
 801a676:	2b00      	cmp	r3, #0
 801a678:	d1e3      	bne.n	801a642 <shellStringCompare+0x14>
 801a67a:	e000      	b.n	801a67e <shellStringCompare+0x50>
            break;
 801a67c:	bf00      	nop
    }
    return match;
 801a67e:	89fb      	ldrh	r3, [r7, #14]
}
 801a680:	4618      	mov	r0, r3
 801a682:	3714      	adds	r7, #20
 801a684:	46bd      	mov	sp, r7
 801a686:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a68a:	4770      	bx	lr

0801a68c <shellGetCommandName>:
 * 
 * @param command 命令
 * @return const char* 命令名
 */
static const char* shellGetCommandName(ShellCommand *command)
{
 801a68c:	b580      	push	{r7, lr}
 801a68e:	b084      	sub	sp, #16
 801a690:	af00      	add	r7, sp, #0
 801a692:	6078      	str	r0, [r7, #4]
    static char buffer[9];
    for (unsigned char i = 0; i < 9; i++)
 801a694:	2300      	movs	r3, #0
 801a696:	73fb      	strb	r3, [r7, #15]
 801a698:	e006      	b.n	801a6a8 <shellGetCommandName+0x1c>
    {
        buffer[i] = '0';
 801a69a:	7bfb      	ldrb	r3, [r7, #15]
 801a69c:	4a1d      	ldr	r2, [pc, #116]	@ (801a714 <shellGetCommandName+0x88>)
 801a69e:	2130      	movs	r1, #48	@ 0x30
 801a6a0:	54d1      	strb	r1, [r2, r3]
    for (unsigned char i = 0; i < 9; i++)
 801a6a2:	7bfb      	ldrb	r3, [r7, #15]
 801a6a4:	3301      	adds	r3, #1
 801a6a6:	73fb      	strb	r3, [r7, #15]
 801a6a8:	7bfb      	ldrb	r3, [r7, #15]
 801a6aa:	2b08      	cmp	r3, #8
 801a6ac:	d9f5      	bls.n	801a69a <shellGetCommandName+0xe>
    }
    if (command->attr.attrs.type <= SHELL_TYPE_CMD_FUNC)
 801a6ae:	687b      	ldr	r3, [r7, #4]
 801a6b0:	785b      	ldrb	r3, [r3, #1]
 801a6b2:	f3c3 0303 	ubfx	r3, r3, #0, #4
 801a6b6:	b2db      	uxtb	r3, r3
 801a6b8:	2b01      	cmp	r3, #1
 801a6ba:	d802      	bhi.n	801a6c2 <shellGetCommandName+0x36>
    {
        return command->data.cmd.name;
 801a6bc:	687b      	ldr	r3, [r7, #4]
 801a6be:	685b      	ldr	r3, [r3, #4]
 801a6c0:	e024      	b.n	801a70c <shellGetCommandName+0x80>
    }
    else if (command->attr.attrs.type <= SHELL_TYPE_VAR_NODE)
 801a6c2:	687b      	ldr	r3, [r7, #4]
 801a6c4:	785b      	ldrb	r3, [r3, #1]
 801a6c6:	f3c3 0303 	ubfx	r3, r3, #0, #4
 801a6ca:	b2db      	uxtb	r3, r3
 801a6cc:	2b07      	cmp	r3, #7
 801a6ce:	d802      	bhi.n	801a6d6 <shellGetCommandName+0x4a>
    {
        return command->data.var.name;
 801a6d0:	687b      	ldr	r3, [r7, #4]
 801a6d2:	685b      	ldr	r3, [r3, #4]
 801a6d4:	e01a      	b.n	801a70c <shellGetCommandName+0x80>
    }
    else if (command->attr.attrs.type <= SHELL_TYPE_USER)
 801a6d6:	687b      	ldr	r3, [r7, #4]
 801a6d8:	785b      	ldrb	r3, [r3, #1]
 801a6da:	f3c3 0303 	ubfx	r3, r3, #0, #4
 801a6de:	b2db      	uxtb	r3, r3
 801a6e0:	2b08      	cmp	r3, #8
 801a6e2:	d802      	bhi.n	801a6ea <shellGetCommandName+0x5e>
    {
        return command->data.user.name;
 801a6e4:	687b      	ldr	r3, [r7, #4]
 801a6e6:	685b      	ldr	r3, [r3, #4]
 801a6e8:	e010      	b.n	801a70c <shellGetCommandName+0x80>
    }
#if SHELL_USING_FUNC_SIGNATURE == 1
    else if (command->attr.attrs.type == SHELL_TYPE_PARAM_PARSER)
 801a6ea:	687b      	ldr	r3, [r7, #4]
 801a6ec:	785b      	ldrb	r3, [r3, #1]
 801a6ee:	f003 030f 	and.w	r3, r3, #15
 801a6f2:	b2db      	uxtb	r3, r3
 801a6f4:	2b0a      	cmp	r3, #10
 801a6f6:	d102      	bne.n	801a6fe <shellGetCommandName+0x72>
    {
        return command->data.paramParser.type;
 801a6f8:	687b      	ldr	r3, [r7, #4]
 801a6fa:	685b      	ldr	r3, [r3, #4]
 801a6fc:	e006      	b.n	801a70c <shellGetCommandName+0x80>
    }
#endif
    else
    {
        shellToHex(command->data.key.value, buffer);
 801a6fe:	687b      	ldr	r3, [r7, #4]
 801a700:	685b      	ldr	r3, [r3, #4]
 801a702:	4904      	ldr	r1, [pc, #16]	@ (801a714 <shellGetCommandName+0x88>)
 801a704:	4618      	mov	r0, r3
 801a706:	f7ff fee2 	bl	801a4ce <shellToHex>
        return buffer;
 801a70a:	4b02      	ldr	r3, [pc, #8]	@ (801a714 <shellGetCommandName+0x88>)
    }
}
 801a70c:	4618      	mov	r0, r3
 801a70e:	3710      	adds	r7, #16
 801a710:	46bd      	mov	sp, r7
 801a712:	bd80      	pop	{r7, pc}
 801a714:	240092f0 	.word	0x240092f0

0801a718 <shellGetCommandDesc>:
 * 
 * @param command 命令
 * @return const char* 命令描述
 */
static const char* shellGetCommandDesc(ShellCommand *command)
{
 801a718:	b480      	push	{r7}
 801a71a:	b083      	sub	sp, #12
 801a71c:	af00      	add	r7, sp, #0
 801a71e:	6078      	str	r0, [r7, #4]
    if (command->attr.attrs.type <= SHELL_TYPE_CMD_FUNC)
 801a720:	687b      	ldr	r3, [r7, #4]
 801a722:	785b      	ldrb	r3, [r3, #1]
 801a724:	f3c3 0303 	ubfx	r3, r3, #0, #4
 801a728:	b2db      	uxtb	r3, r3
 801a72a:	2b01      	cmp	r3, #1
 801a72c:	d802      	bhi.n	801a734 <shellGetCommandDesc+0x1c>
    {
        return command->data.cmd.desc;
 801a72e:	687b      	ldr	r3, [r7, #4]
 801a730:	68db      	ldr	r3, [r3, #12]
 801a732:	e015      	b.n	801a760 <shellGetCommandDesc+0x48>
    }
    else if (command->attr.attrs.type <= SHELL_TYPE_VAR_NODE)
 801a734:	687b      	ldr	r3, [r7, #4]
 801a736:	785b      	ldrb	r3, [r3, #1]
 801a738:	f3c3 0303 	ubfx	r3, r3, #0, #4
 801a73c:	b2db      	uxtb	r3, r3
 801a73e:	2b07      	cmp	r3, #7
 801a740:	d802      	bhi.n	801a748 <shellGetCommandDesc+0x30>
    {
        return command->data.var.desc;
 801a742:	687b      	ldr	r3, [r7, #4]
 801a744:	68db      	ldr	r3, [r3, #12]
 801a746:	e00b      	b.n	801a760 <shellGetCommandDesc+0x48>
    }
    else if (command->attr.attrs.type <= SHELL_TYPE_USER)
 801a748:	687b      	ldr	r3, [r7, #4]
 801a74a:	785b      	ldrb	r3, [r3, #1]
 801a74c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 801a750:	b2db      	uxtb	r3, r3
 801a752:	2b08      	cmp	r3, #8
 801a754:	d802      	bhi.n	801a75c <shellGetCommandDesc+0x44>
    {
        return command->data.user.desc;
 801a756:	687b      	ldr	r3, [r7, #4]
 801a758:	68db      	ldr	r3, [r3, #12]
 801a75a:	e001      	b.n	801a760 <shellGetCommandDesc+0x48>
    }
    else
    {
        return command->data.key.desc;
 801a75c:	687b      	ldr	r3, [r7, #4]
 801a75e:	68db      	ldr	r3, [r3, #12]
    }
}
 801a760:	4618      	mov	r0, r3
 801a762:	370c      	adds	r7, #12
 801a764:	46bd      	mov	sp, r7
 801a766:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a76a:	4770      	bx	lr

0801a76c <shellListItem>:
 * 
 * @param shell shell对象
 * @param item 命令条目
 */
void shellListItem(Shell *shell, ShellCommand *item)
{
 801a76c:	b580      	push	{r7, lr}
 801a76e:	b084      	sub	sp, #16
 801a770:	af00      	add	r7, sp, #0
 801a772:	6078      	str	r0, [r7, #4]
 801a774:	6039      	str	r1, [r7, #0]
    short spaceLength;

    spaceLength = 22 - shellWriteString(shell, shellGetCommandName(item));
 801a776:	6838      	ldr	r0, [r7, #0]
 801a778:	f7ff ff88 	bl	801a68c <shellGetCommandName>
 801a77c:	4603      	mov	r3, r0
 801a77e:	4619      	mov	r1, r3
 801a780:	6878      	ldr	r0, [r7, #4]
 801a782:	f7ff fd7f 	bl	801a284 <shellWriteString>
 801a786:	4603      	mov	r3, r0
 801a788:	f1c3 0316 	rsb	r3, r3, #22
 801a78c:	b29b      	uxth	r3, r3
 801a78e:	81fb      	strh	r3, [r7, #14]
    spaceLength = (spaceLength > 0) ? spaceLength : 4;
 801a790:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801a794:	2b00      	cmp	r3, #0
 801a796:	dd02      	ble.n	801a79e <shellListItem+0x32>
 801a798:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801a79c:	e000      	b.n	801a7a0 <shellListItem+0x34>
 801a79e:	2304      	movs	r3, #4
 801a7a0:	81fb      	strh	r3, [r7, #14]
    do {
        shellWriteByte(shell, ' ');
 801a7a2:	2120      	movs	r1, #32
 801a7a4:	6878      	ldr	r0, [r7, #4]
 801a7a6:	f7ff fd5d 	bl	801a264 <shellWriteByte>
    } while (--spaceLength);
 801a7aa:	89fb      	ldrh	r3, [r7, #14]
 801a7ac:	3b01      	subs	r3, #1
 801a7ae:	b29b      	uxth	r3, r3
 801a7b0:	81fb      	strh	r3, [r7, #14]
 801a7b2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801a7b6:	2b00      	cmp	r3, #0
 801a7b8:	d1f3      	bne.n	801a7a2 <shellListItem+0x36>
    if (item->attr.attrs.type <= SHELL_TYPE_CMD_FUNC)
 801a7ba:	683b      	ldr	r3, [r7, #0]
 801a7bc:	785b      	ldrb	r3, [r3, #1]
 801a7be:	f3c3 0303 	ubfx	r3, r3, #0, #4
 801a7c2:	b2db      	uxtb	r3, r3
 801a7c4:	2b01      	cmp	r3, #1
 801a7c6:	d806      	bhi.n	801a7d6 <shellListItem+0x6a>
    {
        shellWriteString(shell, shellText[SHELL_TEXT_TYPE_CMD]);
 801a7c8:	4b36      	ldr	r3, [pc, #216]	@ (801a8a4 <shellListItem+0x138>)
 801a7ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801a7cc:	4619      	mov	r1, r3
 801a7ce:	6878      	ldr	r0, [r7, #4]
 801a7d0:	f7ff fd58 	bl	801a284 <shellWriteString>
 801a7d4:	e02f      	b.n	801a836 <shellListItem+0xca>
    }
    else if (item->attr.attrs.type <= SHELL_TYPE_VAR_NODE)
 801a7d6:	683b      	ldr	r3, [r7, #0]
 801a7d8:	785b      	ldrb	r3, [r3, #1]
 801a7da:	f3c3 0303 	ubfx	r3, r3, #0, #4
 801a7de:	b2db      	uxtb	r3, r3
 801a7e0:	2b07      	cmp	r3, #7
 801a7e2:	d806      	bhi.n	801a7f2 <shellListItem+0x86>
    {
        shellWriteString(shell, shellText[SHELL_TEXT_TYPE_VAR]);
 801a7e4:	4b2f      	ldr	r3, [pc, #188]	@ (801a8a4 <shellListItem+0x138>)
 801a7e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801a7e8:	4619      	mov	r1, r3
 801a7ea:	6878      	ldr	r0, [r7, #4]
 801a7ec:	f7ff fd4a 	bl	801a284 <shellWriteString>
 801a7f0:	e021      	b.n	801a836 <shellListItem+0xca>
    }
    else if (item->attr.attrs.type <= SHELL_TYPE_USER)
 801a7f2:	683b      	ldr	r3, [r7, #0]
 801a7f4:	785b      	ldrb	r3, [r3, #1]
 801a7f6:	f3c3 0303 	ubfx	r3, r3, #0, #4
 801a7fa:	b2db      	uxtb	r3, r3
 801a7fc:	2b08      	cmp	r3, #8
 801a7fe:	d806      	bhi.n	801a80e <shellListItem+0xa2>
    {
        shellWriteString(shell, shellText[SHELL_TEXT_TYPE_USER]);
 801a800:	4b28      	ldr	r3, [pc, #160]	@ (801a8a4 <shellListItem+0x138>)
 801a802:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801a804:	4619      	mov	r1, r3
 801a806:	6878      	ldr	r0, [r7, #4]
 801a808:	f7ff fd3c 	bl	801a284 <shellWriteString>
 801a80c:	e013      	b.n	801a836 <shellListItem+0xca>
    }
    else if (item->attr.attrs.type <= SHELL_TYPE_KEY)
 801a80e:	683b      	ldr	r3, [r7, #0]
 801a810:	785b      	ldrb	r3, [r3, #1]
 801a812:	f3c3 0303 	ubfx	r3, r3, #0, #4
 801a816:	b2db      	uxtb	r3, r3
 801a818:	2b09      	cmp	r3, #9
 801a81a:	d806      	bhi.n	801a82a <shellListItem+0xbe>
    {
        shellWriteString(shell, shellText[SHELL_TEXT_TYPE_KEY]);
 801a81c:	4b21      	ldr	r3, [pc, #132]	@ (801a8a4 <shellListItem+0x138>)
 801a81e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801a820:	4619      	mov	r1, r3
 801a822:	6878      	ldr	r0, [r7, #4]
 801a824:	f7ff fd2e 	bl	801a284 <shellWriteString>
 801a828:	e005      	b.n	801a836 <shellListItem+0xca>
    }
    else
    {
        shellWriteString(shell, shellText[SHELL_TEXT_TYPE_NONE]);
 801a82a:	4b1e      	ldr	r3, [pc, #120]	@ (801a8a4 <shellListItem+0x138>)
 801a82c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801a82e:	4619      	mov	r1, r3
 801a830:	6878      	ldr	r0, [r7, #4]
 801a832:	f7ff fd27 	bl	801a284 <shellWriteString>
    }
#if SHELL_HELP_SHOW_PERMISSION == 1
    shellWriteString(shell, "  ");
 801a836:	491c      	ldr	r1, [pc, #112]	@ (801a8a8 <shellListItem+0x13c>)
 801a838:	6878      	ldr	r0, [r7, #4]
 801a83a:	f7ff fd23 	bl	801a284 <shellWriteString>
    for (signed char i = 7; i >= 0; i--)
 801a83e:	2307      	movs	r3, #7
 801a840:	737b      	strb	r3, [r7, #13]
 801a842:	e017      	b.n	801a874 <shellListItem+0x108>
    {
        shellWriteByte(shell, item->attr.attrs.permission & (1 << i) ? 'x' : '-');
 801a844:	683b      	ldr	r3, [r7, #0]
 801a846:	781b      	ldrb	r3, [r3, #0]
 801a848:	461a      	mov	r2, r3
 801a84a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 801a84e:	fa42 f303 	asr.w	r3, r2, r3
 801a852:	f003 0301 	and.w	r3, r3, #1
 801a856:	2b00      	cmp	r3, #0
 801a858:	d001      	beq.n	801a85e <shellListItem+0xf2>
 801a85a:	2378      	movs	r3, #120	@ 0x78
 801a85c:	e000      	b.n	801a860 <shellListItem+0xf4>
 801a85e:	232d      	movs	r3, #45	@ 0x2d
 801a860:	4619      	mov	r1, r3
 801a862:	6878      	ldr	r0, [r7, #4]
 801a864:	f7ff fcfe 	bl	801a264 <shellWriteByte>
    for (signed char i = 7; i >= 0; i--)
 801a868:	f997 300d 	ldrsb.w	r3, [r7, #13]
 801a86c:	b2db      	uxtb	r3, r3
 801a86e:	3b01      	subs	r3, #1
 801a870:	b2db      	uxtb	r3, r3
 801a872:	737b      	strb	r3, [r7, #13]
 801a874:	f997 300d 	ldrsb.w	r3, [r7, #13]
 801a878:	2b00      	cmp	r3, #0
 801a87a:	dae3      	bge.n	801a844 <shellListItem+0xd8>
    }
#endif
    shellWriteString(shell, "  ");
 801a87c:	490a      	ldr	r1, [pc, #40]	@ (801a8a8 <shellListItem+0x13c>)
 801a87e:	6878      	ldr	r0, [r7, #4]
 801a880:	f7ff fd00 	bl	801a284 <shellWriteString>
    shellWriteCommandDesc(shell, shellGetCommandDesc(item));
 801a884:	6838      	ldr	r0, [r7, #0]
 801a886:	f7ff ff47 	bl	801a718 <shellGetCommandDesc>
 801a88a:	4603      	mov	r3, r0
 801a88c:	4619      	mov	r1, r3
 801a88e:	6878      	ldr	r0, [r7, #4]
 801a890:	f7ff fd1c 	bl	801a2cc <shellWriteCommandDesc>
    shellWriteString(shell, "\r\n");
 801a894:	4905      	ldr	r1, [pc, #20]	@ (801a8ac <shellListItem+0x140>)
 801a896:	6878      	ldr	r0, [r7, #4]
 801a898:	f7ff fcf4 	bl	801a284 <shellWriteString>
}
 801a89c:	bf00      	nop
 801a89e:	3710      	adds	r7, #16
 801a8a0:	46bd      	mov	sp, r7
 801a8a2:	bd80      	pop	{r7, pc}
 801a8a4:	2400002c 	.word	0x2400002c
 801a8a8:	08021b14 	.word	0x08021b14
 801a8ac:	08021b04 	.word	0x08021b04

0801a8b0 <shellListCommand>:
 * @brief shell列出可执行命令
 * 
 * @param shell shell对象
 */
void shellListCommand(Shell *shell)
{
 801a8b0:	b580      	push	{r7, lr}
 801a8b2:	b084      	sub	sp, #16
 801a8b4:	af00      	add	r7, sp, #0
 801a8b6:	6078      	str	r0, [r7, #4]
    ShellCommand *base = (ShellCommand *)shell->commandList.base;
 801a8b8:	687b      	ldr	r3, [r7, #4]
 801a8ba:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801a8bc:	60bb      	str	r3, [r7, #8]
    shellWriteString(shell, shellText[SHELL_TEXT_CMD_LIST]);
 801a8be:	4b23      	ldr	r3, [pc, #140]	@ (801a94c <shellListCommand+0x9c>)
 801a8c0:	689b      	ldr	r3, [r3, #8]
 801a8c2:	4619      	mov	r1, r3
 801a8c4:	6878      	ldr	r0, [r7, #4]
 801a8c6:	f7ff fcdd 	bl	801a284 <shellWriteString>
    for (short i = 0; i < shell->commandList.count; i++)
 801a8ca:	2300      	movs	r3, #0
 801a8cc:	81fb      	strh	r3, [r7, #14]
 801a8ce:	e031      	b.n	801a934 <shellListCommand+0x84>
    {
        if (base[i].attr.attrs.type <= SHELL_TYPE_CMD_FUNC
 801a8d0:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 801a8d4:	4613      	mov	r3, r2
 801a8d6:	009b      	lsls	r3, r3, #2
 801a8d8:	4413      	add	r3, r2
 801a8da:	009b      	lsls	r3, r3, #2
 801a8dc:	461a      	mov	r2, r3
 801a8de:	68bb      	ldr	r3, [r7, #8]
 801a8e0:	4413      	add	r3, r2
 801a8e2:	785b      	ldrb	r3, [r3, #1]
 801a8e4:	f3c3 0303 	ubfx	r3, r3, #0, #4
 801a8e8:	b2db      	uxtb	r3, r3
 801a8ea:	2b01      	cmp	r3, #1
 801a8ec:	d81c      	bhi.n	801a928 <shellListCommand+0x78>
            && shellCheckPermission(shell, &base[i]) == 0)
 801a8ee:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 801a8f2:	4613      	mov	r3, r2
 801a8f4:	009b      	lsls	r3, r3, #2
 801a8f6:	4413      	add	r3, r2
 801a8f8:	009b      	lsls	r3, r3, #2
 801a8fa:	461a      	mov	r2, r3
 801a8fc:	68bb      	ldr	r3, [r7, #8]
 801a8fe:	4413      	add	r3, r2
 801a900:	4619      	mov	r1, r3
 801a902:	6878      	ldr	r0, [r7, #4]
 801a904:	f7ff fdad 	bl	801a462 <shellCheckPermission>
 801a908:	4603      	mov	r3, r0
 801a90a:	2b00      	cmp	r3, #0
 801a90c:	d10c      	bne.n	801a928 <shellListCommand+0x78>
        {
            shellListItem(shell, &base[i]);
 801a90e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 801a912:	4613      	mov	r3, r2
 801a914:	009b      	lsls	r3, r3, #2
 801a916:	4413      	add	r3, r2
 801a918:	009b      	lsls	r3, r3, #2
 801a91a:	461a      	mov	r2, r3
 801a91c:	68bb      	ldr	r3, [r7, #8]
 801a91e:	4413      	add	r3, r2
 801a920:	4619      	mov	r1, r3
 801a922:	6878      	ldr	r0, [r7, #4]
 801a924:	f7ff ff22 	bl	801a76c <shellListItem>
    for (short i = 0; i < shell->commandList.count; i++)
 801a928:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801a92c:	b29b      	uxth	r3, r3
 801a92e:	3301      	adds	r3, #1
 801a930:	b29b      	uxth	r3, r3
 801a932:	81fb      	strh	r3, [r7, #14]
 801a934:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801a938:	687a      	ldr	r2, [r7, #4]
 801a93a:	f8b2 206c 	ldrh.w	r2, [r2, #108]	@ 0x6c
 801a93e:	4293      	cmp	r3, r2
 801a940:	dbc6      	blt.n	801a8d0 <shellListCommand+0x20>
        }
    }
}
 801a942:	bf00      	nop
 801a944:	bf00      	nop
 801a946:	3710      	adds	r7, #16
 801a948:	46bd      	mov	sp, r7
 801a94a:	bd80      	pop	{r7, pc}
 801a94c:	2400002c 	.word	0x2400002c

0801a950 <shellListVar>:
 * @brief shell列出变量
 * 
 * @param shell shell对象
 */
void shellListVar(Shell *shell)
{
 801a950:	b580      	push	{r7, lr}
 801a952:	b084      	sub	sp, #16
 801a954:	af00      	add	r7, sp, #0
 801a956:	6078      	str	r0, [r7, #4]
    ShellCommand *base = (ShellCommand *)shell->commandList.base;
 801a958:	687b      	ldr	r3, [r7, #4]
 801a95a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801a95c:	60bb      	str	r3, [r7, #8]
    shellWriteString(shell, shellText[SHELL_TEXT_VAR_LIST]);
 801a95e:	4b2b      	ldr	r3, [pc, #172]	@ (801aa0c <shellListVar+0xbc>)
 801a960:	68db      	ldr	r3, [r3, #12]
 801a962:	4619      	mov	r1, r3
 801a964:	6878      	ldr	r0, [r7, #4]
 801a966:	f7ff fc8d 	bl	801a284 <shellWriteString>
    for (short i = 0; i < shell->commandList.count; i++)
 801a96a:	2300      	movs	r3, #0
 801a96c:	81fb      	strh	r3, [r7, #14]
 801a96e:	e040      	b.n	801a9f2 <shellListVar+0xa2>
    {
        if (base[i].attr.attrs.type > SHELL_TYPE_CMD_FUNC
 801a970:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 801a974:	4613      	mov	r3, r2
 801a976:	009b      	lsls	r3, r3, #2
 801a978:	4413      	add	r3, r2
 801a97a:	009b      	lsls	r3, r3, #2
 801a97c:	461a      	mov	r2, r3
 801a97e:	68bb      	ldr	r3, [r7, #8]
 801a980:	4413      	add	r3, r2
 801a982:	785b      	ldrb	r3, [r3, #1]
 801a984:	f3c3 0303 	ubfx	r3, r3, #0, #4
 801a988:	b2db      	uxtb	r3, r3
 801a98a:	2b01      	cmp	r3, #1
 801a98c:	d92b      	bls.n	801a9e6 <shellListVar+0x96>
            && base[i].attr.attrs.type <= SHELL_TYPE_VAR_NODE
 801a98e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 801a992:	4613      	mov	r3, r2
 801a994:	009b      	lsls	r3, r3, #2
 801a996:	4413      	add	r3, r2
 801a998:	009b      	lsls	r3, r3, #2
 801a99a:	461a      	mov	r2, r3
 801a99c:	68bb      	ldr	r3, [r7, #8]
 801a99e:	4413      	add	r3, r2
 801a9a0:	785b      	ldrb	r3, [r3, #1]
 801a9a2:	f3c3 0303 	ubfx	r3, r3, #0, #4
 801a9a6:	b2db      	uxtb	r3, r3
 801a9a8:	2b07      	cmp	r3, #7
 801a9aa:	d81c      	bhi.n	801a9e6 <shellListVar+0x96>
            && shellCheckPermission(shell, &base[i]) == 0)
 801a9ac:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 801a9b0:	4613      	mov	r3, r2
 801a9b2:	009b      	lsls	r3, r3, #2
 801a9b4:	4413      	add	r3, r2
 801a9b6:	009b      	lsls	r3, r3, #2
 801a9b8:	461a      	mov	r2, r3
 801a9ba:	68bb      	ldr	r3, [r7, #8]
 801a9bc:	4413      	add	r3, r2
 801a9be:	4619      	mov	r1, r3
 801a9c0:	6878      	ldr	r0, [r7, #4]
 801a9c2:	f7ff fd4e 	bl	801a462 <shellCheckPermission>
 801a9c6:	4603      	mov	r3, r0
 801a9c8:	2b00      	cmp	r3, #0
 801a9ca:	d10c      	bne.n	801a9e6 <shellListVar+0x96>
        {
            shellListItem(shell, &base[i]);
 801a9cc:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 801a9d0:	4613      	mov	r3, r2
 801a9d2:	009b      	lsls	r3, r3, #2
 801a9d4:	4413      	add	r3, r2
 801a9d6:	009b      	lsls	r3, r3, #2
 801a9d8:	461a      	mov	r2, r3
 801a9da:	68bb      	ldr	r3, [r7, #8]
 801a9dc:	4413      	add	r3, r2
 801a9de:	4619      	mov	r1, r3
 801a9e0:	6878      	ldr	r0, [r7, #4]
 801a9e2:	f7ff fec3 	bl	801a76c <shellListItem>
    for (short i = 0; i < shell->commandList.count; i++)
 801a9e6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801a9ea:	b29b      	uxth	r3, r3
 801a9ec:	3301      	adds	r3, #1
 801a9ee:	b29b      	uxth	r3, r3
 801a9f0:	81fb      	strh	r3, [r7, #14]
 801a9f2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801a9f6:	687a      	ldr	r2, [r7, #4]
 801a9f8:	f8b2 206c 	ldrh.w	r2, [r2, #108]	@ 0x6c
 801a9fc:	4293      	cmp	r3, r2
 801a9fe:	dbb7      	blt.n	801a970 <shellListVar+0x20>
        }
    }
}
 801aa00:	bf00      	nop
 801aa02:	bf00      	nop
 801aa04:	3710      	adds	r7, #16
 801aa06:	46bd      	mov	sp, r7
 801aa08:	bd80      	pop	{r7, pc}
 801aa0a:	bf00      	nop
 801aa0c:	2400002c 	.word	0x2400002c

0801aa10 <shellListUser>:
 * @brief shell列出用户
 * 
 * @param shell shell对象
 */
void shellListUser(Shell *shell)
{
 801aa10:	b580      	push	{r7, lr}
 801aa12:	b084      	sub	sp, #16
 801aa14:	af00      	add	r7, sp, #0
 801aa16:	6078      	str	r0, [r7, #4]
    ShellCommand *base = (ShellCommand *)shell->commandList.base;
 801aa18:	687b      	ldr	r3, [r7, #4]
 801aa1a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801aa1c:	60bb      	str	r3, [r7, #8]
    shellWriteString(shell, shellText[SHELL_TEXT_USER_LIST]);
 801aa1e:	4b2b      	ldr	r3, [pc, #172]	@ (801aacc <shellListUser+0xbc>)
 801aa20:	691b      	ldr	r3, [r3, #16]
 801aa22:	4619      	mov	r1, r3
 801aa24:	6878      	ldr	r0, [r7, #4]
 801aa26:	f7ff fc2d 	bl	801a284 <shellWriteString>
    for (short i = 0; i < shell->commandList.count; i++)
 801aa2a:	2300      	movs	r3, #0
 801aa2c:	81fb      	strh	r3, [r7, #14]
 801aa2e:	e040      	b.n	801aab2 <shellListUser+0xa2>
    {
        if (base[i].attr.attrs.type > SHELL_TYPE_VAR_NODE
 801aa30:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 801aa34:	4613      	mov	r3, r2
 801aa36:	009b      	lsls	r3, r3, #2
 801aa38:	4413      	add	r3, r2
 801aa3a:	009b      	lsls	r3, r3, #2
 801aa3c:	461a      	mov	r2, r3
 801aa3e:	68bb      	ldr	r3, [r7, #8]
 801aa40:	4413      	add	r3, r2
 801aa42:	785b      	ldrb	r3, [r3, #1]
 801aa44:	f3c3 0303 	ubfx	r3, r3, #0, #4
 801aa48:	b2db      	uxtb	r3, r3
 801aa4a:	2b07      	cmp	r3, #7
 801aa4c:	d92b      	bls.n	801aaa6 <shellListUser+0x96>
            && base[i].attr.attrs.type <= SHELL_TYPE_USER
 801aa4e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 801aa52:	4613      	mov	r3, r2
 801aa54:	009b      	lsls	r3, r3, #2
 801aa56:	4413      	add	r3, r2
 801aa58:	009b      	lsls	r3, r3, #2
 801aa5a:	461a      	mov	r2, r3
 801aa5c:	68bb      	ldr	r3, [r7, #8]
 801aa5e:	4413      	add	r3, r2
 801aa60:	785b      	ldrb	r3, [r3, #1]
 801aa62:	f3c3 0303 	ubfx	r3, r3, #0, #4
 801aa66:	b2db      	uxtb	r3, r3
 801aa68:	2b08      	cmp	r3, #8
 801aa6a:	d81c      	bhi.n	801aaa6 <shellListUser+0x96>
            && shellCheckPermission(shell, &base[i]) == 0)
 801aa6c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 801aa70:	4613      	mov	r3, r2
 801aa72:	009b      	lsls	r3, r3, #2
 801aa74:	4413      	add	r3, r2
 801aa76:	009b      	lsls	r3, r3, #2
 801aa78:	461a      	mov	r2, r3
 801aa7a:	68bb      	ldr	r3, [r7, #8]
 801aa7c:	4413      	add	r3, r2
 801aa7e:	4619      	mov	r1, r3
 801aa80:	6878      	ldr	r0, [r7, #4]
 801aa82:	f7ff fcee 	bl	801a462 <shellCheckPermission>
 801aa86:	4603      	mov	r3, r0
 801aa88:	2b00      	cmp	r3, #0
 801aa8a:	d10c      	bne.n	801aaa6 <shellListUser+0x96>
        {
            shellListItem(shell, &base[i]);
 801aa8c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 801aa90:	4613      	mov	r3, r2
 801aa92:	009b      	lsls	r3, r3, #2
 801aa94:	4413      	add	r3, r2
 801aa96:	009b      	lsls	r3, r3, #2
 801aa98:	461a      	mov	r2, r3
 801aa9a:	68bb      	ldr	r3, [r7, #8]
 801aa9c:	4413      	add	r3, r2
 801aa9e:	4619      	mov	r1, r3
 801aaa0:	6878      	ldr	r0, [r7, #4]
 801aaa2:	f7ff fe63 	bl	801a76c <shellListItem>
    for (short i = 0; i < shell->commandList.count; i++)
 801aaa6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801aaaa:	b29b      	uxth	r3, r3
 801aaac:	3301      	adds	r3, #1
 801aaae:	b29b      	uxth	r3, r3
 801aab0:	81fb      	strh	r3, [r7, #14]
 801aab2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801aab6:	687a      	ldr	r2, [r7, #4]
 801aab8:	f8b2 206c 	ldrh.w	r2, [r2, #108]	@ 0x6c
 801aabc:	4293      	cmp	r3, r2
 801aabe:	dbb7      	blt.n	801aa30 <shellListUser+0x20>
        }
    }
}
 801aac0:	bf00      	nop
 801aac2:	bf00      	nop
 801aac4:	3710      	adds	r7, #16
 801aac6:	46bd      	mov	sp, r7
 801aac8:	bd80      	pop	{r7, pc}
 801aaca:	bf00      	nop
 801aacc:	2400002c 	.word	0x2400002c

0801aad0 <shellListKey>:
 * @brief shell列出按键
 * 
 * @param shell shell对象
 */
void shellListKey(Shell *shell)
{
 801aad0:	b580      	push	{r7, lr}
 801aad2:	b084      	sub	sp, #16
 801aad4:	af00      	add	r7, sp, #0
 801aad6:	6078      	str	r0, [r7, #4]
    ShellCommand *base = (ShellCommand *)shell->commandList.base;
 801aad8:	687b      	ldr	r3, [r7, #4]
 801aada:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801aadc:	60bb      	str	r3, [r7, #8]
    shellWriteString(shell, shellText[SHELL_TEXT_KEY_LIST]);
 801aade:	4b2b      	ldr	r3, [pc, #172]	@ (801ab8c <shellListKey+0xbc>)
 801aae0:	695b      	ldr	r3, [r3, #20]
 801aae2:	4619      	mov	r1, r3
 801aae4:	6878      	ldr	r0, [r7, #4]
 801aae6:	f7ff fbcd 	bl	801a284 <shellWriteString>
    for (short i = 0; i < shell->commandList.count; i++)
 801aaea:	2300      	movs	r3, #0
 801aaec:	81fb      	strh	r3, [r7, #14]
 801aaee:	e040      	b.n	801ab72 <shellListKey+0xa2>
    {
        if (base[i].attr.attrs.type > SHELL_TYPE_USER
 801aaf0:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 801aaf4:	4613      	mov	r3, r2
 801aaf6:	009b      	lsls	r3, r3, #2
 801aaf8:	4413      	add	r3, r2
 801aafa:	009b      	lsls	r3, r3, #2
 801aafc:	461a      	mov	r2, r3
 801aafe:	68bb      	ldr	r3, [r7, #8]
 801ab00:	4413      	add	r3, r2
 801ab02:	785b      	ldrb	r3, [r3, #1]
 801ab04:	f3c3 0303 	ubfx	r3, r3, #0, #4
 801ab08:	b2db      	uxtb	r3, r3
 801ab0a:	2b08      	cmp	r3, #8
 801ab0c:	d92b      	bls.n	801ab66 <shellListKey+0x96>
            && base[i].attr.attrs.type <= SHELL_TYPE_KEY
 801ab0e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 801ab12:	4613      	mov	r3, r2
 801ab14:	009b      	lsls	r3, r3, #2
 801ab16:	4413      	add	r3, r2
 801ab18:	009b      	lsls	r3, r3, #2
 801ab1a:	461a      	mov	r2, r3
 801ab1c:	68bb      	ldr	r3, [r7, #8]
 801ab1e:	4413      	add	r3, r2
 801ab20:	785b      	ldrb	r3, [r3, #1]
 801ab22:	f3c3 0303 	ubfx	r3, r3, #0, #4
 801ab26:	b2db      	uxtb	r3, r3
 801ab28:	2b09      	cmp	r3, #9
 801ab2a:	d81c      	bhi.n	801ab66 <shellListKey+0x96>
            && shellCheckPermission(shell, &base[i]) == 0)
 801ab2c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 801ab30:	4613      	mov	r3, r2
 801ab32:	009b      	lsls	r3, r3, #2
 801ab34:	4413      	add	r3, r2
 801ab36:	009b      	lsls	r3, r3, #2
 801ab38:	461a      	mov	r2, r3
 801ab3a:	68bb      	ldr	r3, [r7, #8]
 801ab3c:	4413      	add	r3, r2
 801ab3e:	4619      	mov	r1, r3
 801ab40:	6878      	ldr	r0, [r7, #4]
 801ab42:	f7ff fc8e 	bl	801a462 <shellCheckPermission>
 801ab46:	4603      	mov	r3, r0
 801ab48:	2b00      	cmp	r3, #0
 801ab4a:	d10c      	bne.n	801ab66 <shellListKey+0x96>
        {
            shellListItem(shell, &base[i]);
 801ab4c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 801ab50:	4613      	mov	r3, r2
 801ab52:	009b      	lsls	r3, r3, #2
 801ab54:	4413      	add	r3, r2
 801ab56:	009b      	lsls	r3, r3, #2
 801ab58:	461a      	mov	r2, r3
 801ab5a:	68bb      	ldr	r3, [r7, #8]
 801ab5c:	4413      	add	r3, r2
 801ab5e:	4619      	mov	r1, r3
 801ab60:	6878      	ldr	r0, [r7, #4]
 801ab62:	f7ff fe03 	bl	801a76c <shellListItem>
    for (short i = 0; i < shell->commandList.count; i++)
 801ab66:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801ab6a:	b29b      	uxth	r3, r3
 801ab6c:	3301      	adds	r3, #1
 801ab6e:	b29b      	uxth	r3, r3
 801ab70:	81fb      	strh	r3, [r7, #14]
 801ab72:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801ab76:	687a      	ldr	r2, [r7, #4]
 801ab78:	f8b2 206c 	ldrh.w	r2, [r2, #108]	@ 0x6c
 801ab7c:	4293      	cmp	r3, r2
 801ab7e:	dbb7      	blt.n	801aaf0 <shellListKey+0x20>
        }
    }
}
 801ab80:	bf00      	nop
 801ab82:	bf00      	nop
 801ab84:	3710      	adds	r7, #16
 801ab86:	46bd      	mov	sp, r7
 801ab88:	bd80      	pop	{r7, pc}
 801ab8a:	bf00      	nop
 801ab8c:	2400002c 	.word	0x2400002c

0801ab90 <shellListAll>:
 * @brief shell列出所有命令
 * 
 * @param shell shell对象
 */
void shellListAll(Shell *shell)
{
 801ab90:	b580      	push	{r7, lr}
 801ab92:	b082      	sub	sp, #8
 801ab94:	af00      	add	r7, sp, #0
 801ab96:	6078      	str	r0, [r7, #4]
#if SHELL_HELP_LIST_USER == 1
    shellListUser(shell);
#endif
    shellListCommand(shell);
 801ab98:	6878      	ldr	r0, [r7, #4]
 801ab9a:	f7ff fe89 	bl	801a8b0 <shellListCommand>
    shellListVar(shell);
#endif
#if SHELL_HELP_LIST_KEY == 1
    shellListKey(shell);
#endif
}
 801ab9e:	bf00      	nop
 801aba0:	3708      	adds	r7, #8
 801aba2:	46bd      	mov	sp, r7
 801aba4:	bd80      	pop	{r7, pc}
	...

0801aba8 <shellDeleteCommandLine>:
 * 
 * @param shell shell对象
 * @param length 删除长度
 */
void shellDeleteCommandLine(Shell *shell, unsigned char length)
{
 801aba8:	b580      	push	{r7, lr}
 801abaa:	b082      	sub	sp, #8
 801abac:	af00      	add	r7, sp, #0
 801abae:	6078      	str	r0, [r7, #4]
 801abb0:	460b      	mov	r3, r1
 801abb2:	70fb      	strb	r3, [r7, #3]
    while (length--)
 801abb4:	e003      	b.n	801abbe <shellDeleteCommandLine+0x16>
    {
        shellWriteString(shell, "\b \b");
 801abb6:	4907      	ldr	r1, [pc, #28]	@ (801abd4 <shellDeleteCommandLine+0x2c>)
 801abb8:	6878      	ldr	r0, [r7, #4]
 801abba:	f7ff fb63 	bl	801a284 <shellWriteString>
    while (length--)
 801abbe:	78fb      	ldrb	r3, [r7, #3]
 801abc0:	1e5a      	subs	r2, r3, #1
 801abc2:	70fa      	strb	r2, [r7, #3]
 801abc4:	2b00      	cmp	r3, #0
 801abc6:	d1f6      	bne.n	801abb6 <shellDeleteCommandLine+0xe>
    }
}
 801abc8:	bf00      	nop
 801abca:	bf00      	nop
 801abcc:	3708      	adds	r7, #8
 801abce:	46bd      	mov	sp, r7
 801abd0:	bd80      	pop	{r7, pc}
 801abd2:	bf00      	nop
 801abd4:	08021b18 	.word	0x08021b18

0801abd8 <shellClearCommandLine>:
 * @brief shell 清空命令行输入
 * 
 * @param shell shell对象
 */
void shellClearCommandLine(Shell *shell)
{
 801abd8:	b580      	push	{r7, lr}
 801abda:	b084      	sub	sp, #16
 801abdc:	af00      	add	r7, sp, #0
 801abde:	6078      	str	r0, [r7, #4]
    for (short i = shell->parser.length - shell->parser.cursor; i > 0; i--)
 801abe0:	687b      	ldr	r3, [r7, #4]
 801abe2:	8a1a      	ldrh	r2, [r3, #16]
 801abe4:	687b      	ldr	r3, [r7, #4]
 801abe6:	8a5b      	ldrh	r3, [r3, #18]
 801abe8:	1ad3      	subs	r3, r2, r3
 801abea:	b29b      	uxth	r3, r3
 801abec:	81fb      	strh	r3, [r7, #14]
 801abee:	e009      	b.n	801ac04 <shellClearCommandLine+0x2c>
    {
        shellWriteByte(shell, ' ');
 801abf0:	2120      	movs	r1, #32
 801abf2:	6878      	ldr	r0, [r7, #4]
 801abf4:	f7ff fb36 	bl	801a264 <shellWriteByte>
    for (short i = shell->parser.length - shell->parser.cursor; i > 0; i--)
 801abf8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801abfc:	b29b      	uxth	r3, r3
 801abfe:	3b01      	subs	r3, #1
 801ac00:	b29b      	uxth	r3, r3
 801ac02:	81fb      	strh	r3, [r7, #14]
 801ac04:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801ac08:	2b00      	cmp	r3, #0
 801ac0a:	dcf1      	bgt.n	801abf0 <shellClearCommandLine+0x18>
    }
    shellDeleteCommandLine(shell, shell->parser.length);
 801ac0c:	687b      	ldr	r3, [r7, #4]
 801ac0e:	8a1b      	ldrh	r3, [r3, #16]
 801ac10:	b2db      	uxtb	r3, r3
 801ac12:	4619      	mov	r1, r3
 801ac14:	6878      	ldr	r0, [r7, #4]
 801ac16:	f7ff ffc7 	bl	801aba8 <shellDeleteCommandLine>
}
 801ac1a:	bf00      	nop
 801ac1c:	3710      	adds	r7, #16
 801ac1e:	46bd      	mov	sp, r7
 801ac20:	bd80      	pop	{r7, pc}
	...

0801ac24 <shellInsertByte>:
 * 
 * @param shell shell对象
 * @param data 字符数据
 */
void shellInsertByte(Shell *shell, char data)
{
 801ac24:	b580      	push	{r7, lr}
 801ac26:	b084      	sub	sp, #16
 801ac28:	af00      	add	r7, sp, #0
 801ac2a:	6078      	str	r0, [r7, #4]
 801ac2c:	460b      	mov	r3, r1
 801ac2e:	70fb      	strb	r3, [r7, #3]
    /* 判断输入数据是否过长 */
    if (shell->parser.length >= shell->parser.bufferSize - 1)
 801ac30:	687b      	ldr	r3, [r7, #4]
 801ac32:	8a1b      	ldrh	r3, [r3, #16]
 801ac34:	461a      	mov	r2, r3
 801ac36:	687b      	ldr	r3, [r7, #4]
 801ac38:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 801ac3a:	3b01      	subs	r3, #1
 801ac3c:	429a      	cmp	r2, r3
 801ac3e:	db10      	blt.n	801ac62 <shellInsertByte+0x3e>
    {
        shellWriteString(shell, shellText[SHELL_TEXT_CMD_TOO_LONG]);
 801ac40:	4b61      	ldr	r3, [pc, #388]	@ (801adc8 <shellInsertByte+0x1a4>)
 801ac42:	685b      	ldr	r3, [r3, #4]
 801ac44:	4619      	mov	r1, r3
 801ac46:	6878      	ldr	r0, [r7, #4]
 801ac48:	f7ff fb1c 	bl	801a284 <shellWriteString>
        shellWritePrompt(shell, 1);
 801ac4c:	2101      	movs	r1, #1
 801ac4e:	6878      	ldr	r0, [r7, #4]
 801ac50:	f7ff fb7e 	bl	801a350 <shellWritePrompt>
        shellWriteString(shell, shell->parser.buffer);
 801ac54:	687b      	ldr	r3, [r7, #4]
 801ac56:	695b      	ldr	r3, [r3, #20]
 801ac58:	4619      	mov	r1, r3
 801ac5a:	6878      	ldr	r0, [r7, #4]
 801ac5c:	f7ff fb12 	bl	801a284 <shellWriteString>
        return;
 801ac60:	e0ae      	b.n	801adc0 <shellInsertByte+0x19c>
    }

    /* 插入数据 */
    if (shell->parser.cursor == shell->parser.length)
 801ac62:	687b      	ldr	r3, [r7, #4]
 801ac64:	8a5a      	ldrh	r2, [r3, #18]
 801ac66:	687b      	ldr	r3, [r7, #4]
 801ac68:	8a1b      	ldrh	r3, [r3, #16]
 801ac6a:	429a      	cmp	r2, r3
 801ac6c:	d127      	bne.n	801acbe <shellInsertByte+0x9a>
    {
        shell->parser.buffer[shell->parser.length++] = data;
 801ac6e:	687b      	ldr	r3, [r7, #4]
 801ac70:	695a      	ldr	r2, [r3, #20]
 801ac72:	687b      	ldr	r3, [r7, #4]
 801ac74:	8a1b      	ldrh	r3, [r3, #16]
 801ac76:	1c59      	adds	r1, r3, #1
 801ac78:	b288      	uxth	r0, r1
 801ac7a:	6879      	ldr	r1, [r7, #4]
 801ac7c:	8208      	strh	r0, [r1, #16]
 801ac7e:	4413      	add	r3, r2
 801ac80:	78fa      	ldrb	r2, [r7, #3]
 801ac82:	701a      	strb	r2, [r3, #0]
        shell->parser.buffer[shell->parser.length] = 0;
 801ac84:	687b      	ldr	r3, [r7, #4]
 801ac86:	695b      	ldr	r3, [r3, #20]
 801ac88:	687a      	ldr	r2, [r7, #4]
 801ac8a:	8a12      	ldrh	r2, [r2, #16]
 801ac8c:	4413      	add	r3, r2
 801ac8e:	2200      	movs	r2, #0
 801ac90:	701a      	strb	r2, [r3, #0]
        shell->parser.cursor++;
 801ac92:	687b      	ldr	r3, [r7, #4]
 801ac94:	8a5b      	ldrh	r3, [r3, #18]
 801ac96:	3301      	adds	r3, #1
 801ac98:	b29a      	uxth	r2, r3
 801ac9a:	687b      	ldr	r3, [r7, #4]
 801ac9c:	825a      	strh	r2, [r3, #18]
        shellWriteByte(shell, shell->status.isChecked ? data : '*');
 801ac9e:	687b      	ldr	r3, [r7, #4]
 801aca0:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 801aca4:	f003 0301 	and.w	r3, r3, #1
 801aca8:	b2db      	uxtb	r3, r3
 801acaa:	2b00      	cmp	r3, #0
 801acac:	d001      	beq.n	801acb2 <shellInsertByte+0x8e>
 801acae:	78fb      	ldrb	r3, [r7, #3]
 801acb0:	e000      	b.n	801acb4 <shellInsertByte+0x90>
 801acb2:	232a      	movs	r3, #42	@ 0x2a
 801acb4:	4619      	mov	r1, r3
 801acb6:	6878      	ldr	r0, [r7, #4]
 801acb8:	f7ff fad4 	bl	801a264 <shellWriteByte>
 801acbc:	e080      	b.n	801adc0 <shellInsertByte+0x19c>
    }
    else if (shell->parser.cursor < shell->parser.length)
 801acbe:	687b      	ldr	r3, [r7, #4]
 801acc0:	8a5a      	ldrh	r2, [r3, #18]
 801acc2:	687b      	ldr	r3, [r7, #4]
 801acc4:	8a1b      	ldrh	r3, [r3, #16]
 801acc6:	429a      	cmp	r2, r3
 801acc8:	d27a      	bcs.n	801adc0 <shellInsertByte+0x19c>
    {
        for (short i = shell->parser.length - shell->parser.cursor; i > 0; i--)
 801acca:	687b      	ldr	r3, [r7, #4]
 801accc:	8a1a      	ldrh	r2, [r3, #16]
 801acce:	687b      	ldr	r3, [r7, #4]
 801acd0:	8a5b      	ldrh	r3, [r3, #18]
 801acd2:	1ad3      	subs	r3, r2, r3
 801acd4:	b29b      	uxth	r3, r3
 801acd6:	81fb      	strh	r3, [r7, #14]
 801acd8:	e01a      	b.n	801ad10 <shellInsertByte+0xec>
        {
            shell->parser.buffer[shell->parser.cursor + i] = 
                shell->parser.buffer[shell->parser.cursor + i - 1];
 801acda:	687b      	ldr	r3, [r7, #4]
 801acdc:	695a      	ldr	r2, [r3, #20]
 801acde:	687b      	ldr	r3, [r7, #4]
 801ace0:	8a5b      	ldrh	r3, [r3, #18]
 801ace2:	4619      	mov	r1, r3
 801ace4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801ace8:	440b      	add	r3, r1
 801acea:	3b01      	subs	r3, #1
 801acec:	441a      	add	r2, r3
            shell->parser.buffer[shell->parser.cursor + i] = 
 801acee:	687b      	ldr	r3, [r7, #4]
 801acf0:	695b      	ldr	r3, [r3, #20]
 801acf2:	6879      	ldr	r1, [r7, #4]
 801acf4:	8a49      	ldrh	r1, [r1, #18]
 801acf6:	4608      	mov	r0, r1
 801acf8:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 801acfc:	4401      	add	r1, r0
 801acfe:	440b      	add	r3, r1
                shell->parser.buffer[shell->parser.cursor + i - 1];
 801ad00:	7812      	ldrb	r2, [r2, #0]
            shell->parser.buffer[shell->parser.cursor + i] = 
 801ad02:	701a      	strb	r2, [r3, #0]
        for (short i = shell->parser.length - shell->parser.cursor; i > 0; i--)
 801ad04:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801ad08:	b29b      	uxth	r3, r3
 801ad0a:	3b01      	subs	r3, #1
 801ad0c:	b29b      	uxth	r3, r3
 801ad0e:	81fb      	strh	r3, [r7, #14]
 801ad10:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801ad14:	2b00      	cmp	r3, #0
 801ad16:	dce0      	bgt.n	801acda <shellInsertByte+0xb6>
        }
        shell->parser.buffer[shell->parser.cursor++] = data;
 801ad18:	687b      	ldr	r3, [r7, #4]
 801ad1a:	695a      	ldr	r2, [r3, #20]
 801ad1c:	687b      	ldr	r3, [r7, #4]
 801ad1e:	8a5b      	ldrh	r3, [r3, #18]
 801ad20:	1c59      	adds	r1, r3, #1
 801ad22:	b288      	uxth	r0, r1
 801ad24:	6879      	ldr	r1, [r7, #4]
 801ad26:	8248      	strh	r0, [r1, #18]
 801ad28:	4413      	add	r3, r2
 801ad2a:	78fa      	ldrb	r2, [r7, #3]
 801ad2c:	701a      	strb	r2, [r3, #0]
        shell->parser.buffer[++shell->parser.length] = 0;
 801ad2e:	687b      	ldr	r3, [r7, #4]
 801ad30:	695b      	ldr	r3, [r3, #20]
 801ad32:	687a      	ldr	r2, [r7, #4]
 801ad34:	8a12      	ldrh	r2, [r2, #16]
 801ad36:	3201      	adds	r2, #1
 801ad38:	b291      	uxth	r1, r2
 801ad3a:	687a      	ldr	r2, [r7, #4]
 801ad3c:	8211      	strh	r1, [r2, #16]
 801ad3e:	687a      	ldr	r2, [r7, #4]
 801ad40:	8a12      	ldrh	r2, [r2, #16]
 801ad42:	4413      	add	r3, r2
 801ad44:	2200      	movs	r2, #0
 801ad46:	701a      	strb	r2, [r3, #0]
        for (short i = shell->parser.cursor - 1; i < shell->parser.length; i++)
 801ad48:	687b      	ldr	r3, [r7, #4]
 801ad4a:	8a5b      	ldrh	r3, [r3, #18]
 801ad4c:	3b01      	subs	r3, #1
 801ad4e:	b29b      	uxth	r3, r3
 801ad50:	81bb      	strh	r3, [r7, #12]
 801ad52:	e019      	b.n	801ad88 <shellInsertByte+0x164>
        {
            shellWriteByte(shell, 
                           shell->status.isChecked ? shell->parser.buffer[i] : '*');
 801ad54:	687b      	ldr	r3, [r7, #4]
 801ad56:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 801ad5a:	f003 0301 	and.w	r3, r3, #1
 801ad5e:	b2db      	uxtb	r3, r3
            shellWriteByte(shell, 
 801ad60:	2b00      	cmp	r3, #0
 801ad62:	d006      	beq.n	801ad72 <shellInsertByte+0x14e>
                           shell->status.isChecked ? shell->parser.buffer[i] : '*');
 801ad64:	687b      	ldr	r3, [r7, #4]
 801ad66:	695a      	ldr	r2, [r3, #20]
 801ad68:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 801ad6c:	4413      	add	r3, r2
            shellWriteByte(shell, 
 801ad6e:	781b      	ldrb	r3, [r3, #0]
 801ad70:	e000      	b.n	801ad74 <shellInsertByte+0x150>
 801ad72:	232a      	movs	r3, #42	@ 0x2a
 801ad74:	4619      	mov	r1, r3
 801ad76:	6878      	ldr	r0, [r7, #4]
 801ad78:	f7ff fa74 	bl	801a264 <shellWriteByte>
        for (short i = shell->parser.cursor - 1; i < shell->parser.length; i++)
 801ad7c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 801ad80:	b29b      	uxth	r3, r3
 801ad82:	3301      	adds	r3, #1
 801ad84:	b29b      	uxth	r3, r3
 801ad86:	81bb      	strh	r3, [r7, #12]
 801ad88:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 801ad8c:	687a      	ldr	r2, [r7, #4]
 801ad8e:	8a12      	ldrh	r2, [r2, #16]
 801ad90:	4293      	cmp	r3, r2
 801ad92:	dbdf      	blt.n	801ad54 <shellInsertByte+0x130>
        }
        for (short i = shell->parser.length - shell->parser.cursor; i > 0; i--)
 801ad94:	687b      	ldr	r3, [r7, #4]
 801ad96:	8a1a      	ldrh	r2, [r3, #16]
 801ad98:	687b      	ldr	r3, [r7, #4]
 801ad9a:	8a5b      	ldrh	r3, [r3, #18]
 801ad9c:	1ad3      	subs	r3, r2, r3
 801ad9e:	b29b      	uxth	r3, r3
 801ada0:	817b      	strh	r3, [r7, #10]
 801ada2:	e009      	b.n	801adb8 <shellInsertByte+0x194>
        {
            shellWriteByte(shell, '\b');
 801ada4:	2108      	movs	r1, #8
 801ada6:	6878      	ldr	r0, [r7, #4]
 801ada8:	f7ff fa5c 	bl	801a264 <shellWriteByte>
        for (short i = shell->parser.length - shell->parser.cursor; i > 0; i--)
 801adac:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 801adb0:	b29b      	uxth	r3, r3
 801adb2:	3b01      	subs	r3, #1
 801adb4:	b29b      	uxth	r3, r3
 801adb6:	817b      	strh	r3, [r7, #10]
 801adb8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 801adbc:	2b00      	cmp	r3, #0
 801adbe:	dcf1      	bgt.n	801ada4 <shellInsertByte+0x180>
        }
    }
}
 801adc0:	3710      	adds	r7, #16
 801adc2:	46bd      	mov	sp, r7
 801adc4:	bd80      	pop	{r7, pc}
 801adc6:	bf00      	nop
 801adc8:	2400002c 	.word	0x2400002c

0801adcc <shellDeleteByte>:
 * 
 * @param shell shell对象
 * @param direction 删除方向 {@code 1}删除光标前字符 {@code -1}删除光标处字符
 */
void shellDeleteByte(Shell *shell, signed char direction)
{
 801adcc:	b580      	push	{r7, lr}
 801adce:	b084      	sub	sp, #16
 801add0:	af00      	add	r7, sp, #0
 801add2:	6078      	str	r0, [r7, #4]
 801add4:	460b      	mov	r3, r1
 801add6:	70fb      	strb	r3, [r7, #3]
    char offset = (direction == -1) ? 1 : 0;
 801add8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801addc:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ade0:	bf0c      	ite	eq
 801ade2:	2301      	moveq	r3, #1
 801ade4:	2300      	movne	r3, #0
 801ade6:	b2db      	uxtb	r3, r3
 801ade8:	727b      	strb	r3, [r7, #9]

    if ((shell->parser.cursor == 0 && direction == 1)
 801adea:	687b      	ldr	r3, [r7, #4]
 801adec:	8a5b      	ldrh	r3, [r3, #18]
 801adee:	2b00      	cmp	r3, #0
 801adf0:	d104      	bne.n	801adfc <shellDeleteByte+0x30>
 801adf2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801adf6:	2b01      	cmp	r3, #1
 801adf8:	f000 80a7 	beq.w	801af4a <shellDeleteByte+0x17e>
        || (shell->parser.cursor == shell->parser.length && direction == -1))
 801adfc:	687b      	ldr	r3, [r7, #4]
 801adfe:	8a5a      	ldrh	r2, [r3, #18]
 801ae00:	687b      	ldr	r3, [r7, #4]
 801ae02:	8a1b      	ldrh	r3, [r3, #16]
 801ae04:	429a      	cmp	r2, r3
 801ae06:	d105      	bne.n	801ae14 <shellDeleteByte+0x48>
 801ae08:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801ae0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ae10:	f000 809b 	beq.w	801af4a <shellDeleteByte+0x17e>
    {
        return;
    }
    if (shell->parser.cursor == shell->parser.length && direction == 1)
 801ae14:	687b      	ldr	r3, [r7, #4]
 801ae16:	8a5a      	ldrh	r2, [r3, #18]
 801ae18:	687b      	ldr	r3, [r7, #4]
 801ae1a:	8a1b      	ldrh	r3, [r3, #16]
 801ae1c:	429a      	cmp	r2, r3
 801ae1e:	d11b      	bne.n	801ae58 <shellDeleteByte+0x8c>
 801ae20:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801ae24:	2b01      	cmp	r3, #1
 801ae26:	d117      	bne.n	801ae58 <shellDeleteByte+0x8c>
    {
        shell->parser.cursor--;
 801ae28:	687b      	ldr	r3, [r7, #4]
 801ae2a:	8a5b      	ldrh	r3, [r3, #18]
 801ae2c:	3b01      	subs	r3, #1
 801ae2e:	b29a      	uxth	r2, r3
 801ae30:	687b      	ldr	r3, [r7, #4]
 801ae32:	825a      	strh	r2, [r3, #18]
        shell->parser.length--;
 801ae34:	687b      	ldr	r3, [r7, #4]
 801ae36:	8a1b      	ldrh	r3, [r3, #16]
 801ae38:	3b01      	subs	r3, #1
 801ae3a:	b29a      	uxth	r2, r3
 801ae3c:	687b      	ldr	r3, [r7, #4]
 801ae3e:	821a      	strh	r2, [r3, #16]
        shell->parser.buffer[shell->parser.length] = 0;
 801ae40:	687b      	ldr	r3, [r7, #4]
 801ae42:	695b      	ldr	r3, [r3, #20]
 801ae44:	687a      	ldr	r2, [r7, #4]
 801ae46:	8a12      	ldrh	r2, [r2, #16]
 801ae48:	4413      	add	r3, r2
 801ae4a:	2200      	movs	r2, #0
 801ae4c:	701a      	strb	r2, [r3, #0]
        shellDeleteCommandLine(shell, 1);
 801ae4e:	2101      	movs	r1, #1
 801ae50:	6878      	ldr	r0, [r7, #4]
 801ae52:	f7ff fea9 	bl	801aba8 <shellDeleteCommandLine>
 801ae56:	e079      	b.n	801af4c <shellDeleteByte+0x180>
    }
    else
    {
        for (short i = offset; i < shell->parser.length - shell->parser.cursor; i++)
 801ae58:	7a7b      	ldrb	r3, [r7, #9]
 801ae5a:	81fb      	strh	r3, [r7, #14]
 801ae5c:	e01a      	b.n	801ae94 <shellDeleteByte+0xc8>
        {
            shell->parser.buffer[shell->parser.cursor + i - 1] = 
                shell->parser.buffer[shell->parser.cursor + i];
 801ae5e:	687b      	ldr	r3, [r7, #4]
 801ae60:	695b      	ldr	r3, [r3, #20]
 801ae62:	687a      	ldr	r2, [r7, #4]
 801ae64:	8a52      	ldrh	r2, [r2, #18]
 801ae66:	4611      	mov	r1, r2
 801ae68:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 801ae6c:	440a      	add	r2, r1
 801ae6e:	441a      	add	r2, r3
            shell->parser.buffer[shell->parser.cursor + i - 1] = 
 801ae70:	687b      	ldr	r3, [r7, #4]
 801ae72:	6959      	ldr	r1, [r3, #20]
 801ae74:	687b      	ldr	r3, [r7, #4]
 801ae76:	8a5b      	ldrh	r3, [r3, #18]
 801ae78:	4618      	mov	r0, r3
 801ae7a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801ae7e:	4403      	add	r3, r0
 801ae80:	3b01      	subs	r3, #1
 801ae82:	440b      	add	r3, r1
                shell->parser.buffer[shell->parser.cursor + i];
 801ae84:	7812      	ldrb	r2, [r2, #0]
            shell->parser.buffer[shell->parser.cursor + i - 1] = 
 801ae86:	701a      	strb	r2, [r3, #0]
        for (short i = offset; i < shell->parser.length - shell->parser.cursor; i++)
 801ae88:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801ae8c:	b29b      	uxth	r3, r3
 801ae8e:	3301      	adds	r3, #1
 801ae90:	b29b      	uxth	r3, r3
 801ae92:	81fb      	strh	r3, [r7, #14]
 801ae94:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 801ae98:	687b      	ldr	r3, [r7, #4]
 801ae9a:	8a1b      	ldrh	r3, [r3, #16]
 801ae9c:	4619      	mov	r1, r3
 801ae9e:	687b      	ldr	r3, [r7, #4]
 801aea0:	8a5b      	ldrh	r3, [r3, #18]
 801aea2:	1acb      	subs	r3, r1, r3
 801aea4:	429a      	cmp	r2, r3
 801aea6:	dbda      	blt.n	801ae5e <shellDeleteByte+0x92>
        }
        shell->parser.length--;
 801aea8:	687b      	ldr	r3, [r7, #4]
 801aeaa:	8a1b      	ldrh	r3, [r3, #16]
 801aeac:	3b01      	subs	r3, #1
 801aeae:	b29a      	uxth	r2, r3
 801aeb0:	687b      	ldr	r3, [r7, #4]
 801aeb2:	821a      	strh	r2, [r3, #16]
        if (!offset)
 801aeb4:	7a7b      	ldrb	r3, [r7, #9]
 801aeb6:	2b00      	cmp	r3, #0
 801aeb8:	d109      	bne.n	801aece <shellDeleteByte+0x102>
        {
            shell->parser.cursor--;
 801aeba:	687b      	ldr	r3, [r7, #4]
 801aebc:	8a5b      	ldrh	r3, [r3, #18]
 801aebe:	3b01      	subs	r3, #1
 801aec0:	b29a      	uxth	r2, r3
 801aec2:	687b      	ldr	r3, [r7, #4]
 801aec4:	825a      	strh	r2, [r3, #18]
            shellWriteByte(shell, '\b');
 801aec6:	2108      	movs	r1, #8
 801aec8:	6878      	ldr	r0, [r7, #4]
 801aeca:	f7ff f9cb 	bl	801a264 <shellWriteByte>
        }
        shell->parser.buffer[shell->parser.length] = 0;
 801aece:	687b      	ldr	r3, [r7, #4]
 801aed0:	695b      	ldr	r3, [r3, #20]
 801aed2:	687a      	ldr	r2, [r7, #4]
 801aed4:	8a12      	ldrh	r2, [r2, #16]
 801aed6:	4413      	add	r3, r2
 801aed8:	2200      	movs	r2, #0
 801aeda:	701a      	strb	r2, [r3, #0]
        for (short i = shell->parser.cursor; i < shell->parser.length; i++)
 801aedc:	687b      	ldr	r3, [r7, #4]
 801aede:	8a5b      	ldrh	r3, [r3, #18]
 801aee0:	81bb      	strh	r3, [r7, #12]
 801aee2:	e00f      	b.n	801af04 <shellDeleteByte+0x138>
        {
            shellWriteByte(shell, shell->parser.buffer[i]);
 801aee4:	687b      	ldr	r3, [r7, #4]
 801aee6:	695a      	ldr	r2, [r3, #20]
 801aee8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 801aeec:	4413      	add	r3, r2
 801aeee:	781b      	ldrb	r3, [r3, #0]
 801aef0:	4619      	mov	r1, r3
 801aef2:	6878      	ldr	r0, [r7, #4]
 801aef4:	f7ff f9b6 	bl	801a264 <shellWriteByte>
        for (short i = shell->parser.cursor; i < shell->parser.length; i++)
 801aef8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 801aefc:	b29b      	uxth	r3, r3
 801aefe:	3301      	adds	r3, #1
 801af00:	b29b      	uxth	r3, r3
 801af02:	81bb      	strh	r3, [r7, #12]
 801af04:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 801af08:	687a      	ldr	r2, [r7, #4]
 801af0a:	8a12      	ldrh	r2, [r2, #16]
 801af0c:	4293      	cmp	r3, r2
 801af0e:	dbe9      	blt.n	801aee4 <shellDeleteByte+0x118>
        }
        shellWriteByte(shell, ' ');
 801af10:	2120      	movs	r1, #32
 801af12:	6878      	ldr	r0, [r7, #4]
 801af14:	f7ff f9a6 	bl	801a264 <shellWriteByte>
        for (short i = shell->parser.length - shell->parser.cursor + 1; i > 0; i--)
 801af18:	687b      	ldr	r3, [r7, #4]
 801af1a:	8a1a      	ldrh	r2, [r3, #16]
 801af1c:	687b      	ldr	r3, [r7, #4]
 801af1e:	8a5b      	ldrh	r3, [r3, #18]
 801af20:	1ad3      	subs	r3, r2, r3
 801af22:	b29b      	uxth	r3, r3
 801af24:	3301      	adds	r3, #1
 801af26:	b29b      	uxth	r3, r3
 801af28:	817b      	strh	r3, [r7, #10]
 801af2a:	e009      	b.n	801af40 <shellDeleteByte+0x174>
        {
            shellWriteByte(shell, '\b');
 801af2c:	2108      	movs	r1, #8
 801af2e:	6878      	ldr	r0, [r7, #4]
 801af30:	f7ff f998 	bl	801a264 <shellWriteByte>
        for (short i = shell->parser.length - shell->parser.cursor + 1; i > 0; i--)
 801af34:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 801af38:	b29b      	uxth	r3, r3
 801af3a:	3b01      	subs	r3, #1
 801af3c:	b29b      	uxth	r3, r3
 801af3e:	817b      	strh	r3, [r7, #10]
 801af40:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 801af44:	2b00      	cmp	r3, #0
 801af46:	dcf1      	bgt.n	801af2c <shellDeleteByte+0x160>
 801af48:	e000      	b.n	801af4c <shellDeleteByte+0x180>
        return;
 801af4a:	bf00      	nop
        }
    }
}
 801af4c:	3710      	adds	r7, #16
 801af4e:	46bd      	mov	sp, r7
 801af50:	bd80      	pop	{r7, pc}
	...

0801af54 <shellSplit>:
 * @param maxNum 最大分割数量
 * 
 * @return int 分割得到的字串数量
 */
int shellSplit(char *string, unsigned short strLen, char *array[], char splitKey, short maxNum)
{
 801af54:	b480      	push	{r7}
 801af56:	b08d      	sub	sp, #52	@ 0x34
 801af58:	af00      	add	r7, sp, #0
 801af5a:	60f8      	str	r0, [r7, #12]
 801af5c:	607a      	str	r2, [r7, #4]
 801af5e:	461a      	mov	r2, r3
 801af60:	460b      	mov	r3, r1
 801af62:	817b      	strh	r3, [r7, #10]
 801af64:	4613      	mov	r3, r2
 801af66:	727b      	strb	r3, [r7, #9]
    unsigned char record = 1;
 801af68:	2301      	movs	r3, #1
 801af6a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    unsigned char pairedLeft[16] = {0};
 801af6e:	f107 0310 	add.w	r3, r7, #16
 801af72:	2200      	movs	r2, #0
 801af74:	601a      	str	r2, [r3, #0]
 801af76:	605a      	str	r2, [r3, #4]
 801af78:	609a      	str	r2, [r3, #8]
 801af7a:	60da      	str	r2, [r3, #12]
    unsigned char pariedCount = 0;
 801af7c:	2300      	movs	r3, #0
 801af7e:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    int count = 0;
 801af82:	2300      	movs	r3, #0
 801af84:	62bb      	str	r3, [r7, #40]	@ 0x28

    for (short i = 0; i < maxNum; i++)
 801af86:	2300      	movs	r3, #0
 801af88:	84fb      	strh	r3, [r7, #38]	@ 0x26
 801af8a:	e00c      	b.n	801afa6 <shellSplit+0x52>
    {
        array[i] = NULL;
 801af8c:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 801af90:	009b      	lsls	r3, r3, #2
 801af92:	687a      	ldr	r2, [r7, #4]
 801af94:	4413      	add	r3, r2
 801af96:	2200      	movs	r2, #0
 801af98:	601a      	str	r2, [r3, #0]
    for (short i = 0; i < maxNum; i++)
 801af9a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 801af9e:	b29b      	uxth	r3, r3
 801afa0:	3301      	adds	r3, #1
 801afa2:	b29b      	uxth	r3, r3
 801afa4:	84fb      	strh	r3, [r7, #38]	@ 0x26
 801afa6:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 801afaa:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	@ 0x38
 801afae:	429a      	cmp	r2, r3
 801afb0:	dbec      	blt.n	801af8c <shellSplit+0x38>
    }

    for (unsigned short i = 0; i < strLen; i++)
 801afb2:	2300      	movs	r3, #0
 801afb4:	84bb      	strh	r3, [r7, #36]	@ 0x24
 801afb6:	e0aa      	b.n	801b10e <shellSplit+0x1ba>
    {
        if (pariedCount == 0)
 801afb8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 801afbc:	2b00      	cmp	r3, #0
 801afbe:	d13e      	bne.n	801b03e <shellSplit+0xea>
        {
            if (string[i] != splitKey && record == 1 && count < maxNum)
 801afc0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801afc2:	68fa      	ldr	r2, [r7, #12]
 801afc4:	4413      	add	r3, r2
 801afc6:	781b      	ldrb	r3, [r3, #0]
 801afc8:	7a7a      	ldrb	r2, [r7, #9]
 801afca:	429a      	cmp	r2, r3
 801afcc:	d016      	beq.n	801affc <shellSplit+0xa8>
 801afce:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801afd2:	2b01      	cmp	r3, #1
 801afd4:	d112      	bne.n	801affc <shellSplit+0xa8>
 801afd6:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	@ 0x38
 801afda:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801afdc:	429a      	cmp	r2, r3
 801afde:	da0d      	bge.n	801affc <shellSplit+0xa8>
            {
                array[count++] = &(string[i]);
 801afe0:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801afe2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801afe4:	1c59      	adds	r1, r3, #1
 801afe6:	62b9      	str	r1, [r7, #40]	@ 0x28
 801afe8:	009b      	lsls	r3, r3, #2
 801afea:	6879      	ldr	r1, [r7, #4]
 801afec:	440b      	add	r3, r1
 801afee:	68f9      	ldr	r1, [r7, #12]
 801aff0:	440a      	add	r2, r1
 801aff2:	601a      	str	r2, [r3, #0]
                record = 0;
 801aff4:	2300      	movs	r3, #0
 801aff6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 801affa:	e020      	b.n	801b03e <shellSplit+0xea>
            }
            else if ((string[i] == splitKey || string[i] == ' ') && record == 0)
 801affc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801affe:	68fa      	ldr	r2, [r7, #12]
 801b000:	4413      	add	r3, r2
 801b002:	781b      	ldrb	r3, [r3, #0]
 801b004:	7a7a      	ldrb	r2, [r7, #9]
 801b006:	429a      	cmp	r2, r3
 801b008:	d005      	beq.n	801b016 <shellSplit+0xc2>
 801b00a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801b00c:	68fa      	ldr	r2, [r7, #12]
 801b00e:	4413      	add	r3, r2
 801b010:	781b      	ldrb	r3, [r3, #0]
 801b012:	2b20      	cmp	r3, #32
 801b014:	d113      	bne.n	801b03e <shellSplit+0xea>
 801b016:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801b01a:	2b00      	cmp	r3, #0
 801b01c:	d10f      	bne.n	801b03e <shellSplit+0xea>
            {
                string[i] = 0;
 801b01e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801b020:	68fa      	ldr	r2, [r7, #12]
 801b022:	4413      	add	r3, r2
 801b024:	2200      	movs	r2, #0
 801b026:	701a      	strb	r2, [r3, #0]
                if (string[i + 1] != ' ')
 801b028:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801b02a:	3301      	adds	r3, #1
 801b02c:	68fa      	ldr	r2, [r7, #12]
 801b02e:	4413      	add	r3, r2
 801b030:	781b      	ldrb	r3, [r3, #0]
 801b032:	2b20      	cmp	r3, #32
 801b034:	d067      	beq.n	801b106 <shellSplit+0x1b2>
                {
                    record = 1;
 801b036:	2301      	movs	r3, #1
 801b038:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
                }
                continue;
 801b03c:	e063      	b.n	801b106 <shellSplit+0x1b2>
            }
        }

        for (unsigned char j = 0; j < sizeof(pairedChars) / 2; j++)
 801b03e:	2300      	movs	r3, #0
 801b040:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801b044:	e04a      	b.n	801b0dc <shellSplit+0x188>
        {
            if (pariedCount > 0
 801b046:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 801b04a:	2b00      	cmp	r3, #0
 801b04c:	d01f      	beq.n	801b08e <shellSplit+0x13a>
                && string[i] == pairedChars[j][1]
 801b04e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801b050:	68fa      	ldr	r2, [r7, #12]
 801b052:	4413      	add	r3, r2
 801b054:	781a      	ldrb	r2, [r3, #0]
 801b056:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801b05a:	4933      	ldr	r1, [pc, #204]	@ (801b128 <shellSplit+0x1d4>)
 801b05c:	005b      	lsls	r3, r3, #1
 801b05e:	440b      	add	r3, r1
 801b060:	785b      	ldrb	r3, [r3, #1]
 801b062:	429a      	cmp	r2, r3
 801b064:	d113      	bne.n	801b08e <shellSplit+0x13a>
                && pairedLeft[pariedCount - 1] == pairedChars[j][0])
 801b066:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 801b06a:	3b01      	subs	r3, #1
 801b06c:	3330      	adds	r3, #48	@ 0x30
 801b06e:	443b      	add	r3, r7
 801b070:	f813 2c20 	ldrb.w	r2, [r3, #-32]
 801b074:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801b078:	492b      	ldr	r1, [pc, #172]	@ (801b128 <shellSplit+0x1d4>)
 801b07a:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 801b07e:	429a      	cmp	r2, r3
 801b080:	d105      	bne.n	801b08e <shellSplit+0x13a>
            {
                --pariedCount;
 801b082:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 801b086:	3b01      	subs	r3, #1
 801b088:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
                break;
 801b08c:	e02a      	b.n	801b0e4 <shellSplit+0x190>
            }
            else if (string[i] == pairedChars[j][0])
 801b08e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801b090:	68fa      	ldr	r2, [r7, #12]
 801b092:	4413      	add	r3, r2
 801b094:	781a      	ldrb	r2, [r3, #0]
 801b096:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801b09a:	4923      	ldr	r1, [pc, #140]	@ (801b128 <shellSplit+0x1d4>)
 801b09c:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 801b0a0:	429a      	cmp	r2, r3
 801b0a2:	d116      	bne.n	801b0d2 <shellSplit+0x17e>
            {
                pairedLeft[pariedCount++] = pairedChars[j][0];
 801b0a4:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 801b0a8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 801b0ac:	1c59      	adds	r1, r3, #1
 801b0ae:	f887 102e 	strb.w	r1, [r7, #46]	@ 0x2e
 801b0b2:	4619      	mov	r1, r3
 801b0b4:	4b1c      	ldr	r3, [pc, #112]	@ (801b128 <shellSplit+0x1d4>)
 801b0b6:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 801b0ba:	f101 0330 	add.w	r3, r1, #48	@ 0x30
 801b0be:	443b      	add	r3, r7
 801b0c0:	f803 2c20 	strb.w	r2, [r3, #-32]
                pariedCount &= 0x0F;
 801b0c4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 801b0c8:	f003 030f 	and.w	r3, r3, #15
 801b0cc:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
                break;
 801b0d0:	e008      	b.n	801b0e4 <shellSplit+0x190>
        for (unsigned char j = 0; j < sizeof(pairedChars) / 2; j++)
 801b0d2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801b0d6:	3301      	adds	r3, #1
 801b0d8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801b0dc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801b0e0:	2b01      	cmp	r3, #1
 801b0e2:	d9b0      	bls.n	801b046 <shellSplit+0xf2>
            }
        }
        
        if (string[i] == '\\' && string[i + 1] != 0)
 801b0e4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801b0e6:	68fa      	ldr	r2, [r7, #12]
 801b0e8:	4413      	add	r3, r2
 801b0ea:	781b      	ldrb	r3, [r3, #0]
 801b0ec:	2b5c      	cmp	r3, #92	@ 0x5c
 801b0ee:	d10b      	bne.n	801b108 <shellSplit+0x1b4>
 801b0f0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801b0f2:	3301      	adds	r3, #1
 801b0f4:	68fa      	ldr	r2, [r7, #12]
 801b0f6:	4413      	add	r3, r2
 801b0f8:	781b      	ldrb	r3, [r3, #0]
 801b0fa:	2b00      	cmp	r3, #0
 801b0fc:	d004      	beq.n	801b108 <shellSplit+0x1b4>
        {
            i++;
 801b0fe:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801b100:	3301      	adds	r3, #1
 801b102:	84bb      	strh	r3, [r7, #36]	@ 0x24
 801b104:	e000      	b.n	801b108 <shellSplit+0x1b4>
                continue;
 801b106:	bf00      	nop
    for (unsigned short i = 0; i < strLen; i++)
 801b108:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801b10a:	3301      	adds	r3, #1
 801b10c:	84bb      	strh	r3, [r7, #36]	@ 0x24
 801b10e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801b110:	897b      	ldrh	r3, [r7, #10]
 801b112:	429a      	cmp	r2, r3
 801b114:	f4ff af50 	bcc.w	801afb8 <shellSplit+0x64>
        }
    }
    return count;
 801b118:	6abb      	ldr	r3, [r7, #40]	@ 0x28
}
 801b11a:	4618      	mov	r0, r3
 801b11c:	3734      	adds	r7, #52	@ 0x34
 801b11e:	46bd      	mov	sp, r7
 801b120:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b124:	4770      	bx	lr
 801b126:	bf00      	nop
 801b128:	24000084 	.word	0x24000084

0801b12c <shellParserParam>:
 * @brief shell 解析参数
 * 
 * @param shell shell对象
 */
static void shellParserParam(Shell *shell)
{
 801b12c:	b580      	push	{r7, lr}
 801b12e:	b084      	sub	sp, #16
 801b130:	af02      	add	r7, sp, #8
 801b132:	6078      	str	r0, [r7, #4]
    shell->parser.paramCount = 
        shellSplit(shell->parser.buffer, shell->parser.length, 
 801b134:	687b      	ldr	r3, [r7, #4]
 801b136:	6958      	ldr	r0, [r3, #20]
 801b138:	687b      	ldr	r3, [r7, #4]
 801b13a:	8a19      	ldrh	r1, [r3, #16]
                   shell->parser.param, ' ', SHELL_PARAMETER_MAX_NUMBER);
 801b13c:	687b      	ldr	r3, [r7, #4]
 801b13e:	f103 0218 	add.w	r2, r3, #24
        shellSplit(shell->parser.buffer, shell->parser.length, 
 801b142:	2308      	movs	r3, #8
 801b144:	9300      	str	r3, [sp, #0]
 801b146:	2320      	movs	r3, #32
 801b148:	f7ff ff04 	bl	801af54 <shellSplit>
 801b14c:	4603      	mov	r3, r0
    shell->parser.paramCount = 
 801b14e:	b29a      	uxth	r2, r3
 801b150:	687b      	ldr	r3, [r7, #4]
 801b152:	875a      	strh	r2, [r3, #58]	@ 0x3a
}
 801b154:	bf00      	nop
 801b156:	3708      	adds	r7, #8
 801b158:	46bd      	mov	sp, r7
 801b15a:	bd80      	pop	{r7, pc}

0801b15c <shellRemoveParamQuotes>:
 * @brief shell去除字符串参数头尾的双引号
 * 
 * @param shell shell对象
 */
static void shellRemoveParamQuotes(Shell *shell)
{
 801b15c:	b580      	push	{r7, lr}
 801b15e:	b084      	sub	sp, #16
 801b160:	af00      	add	r7, sp, #0
 801b162:	6078      	str	r0, [r7, #4]
    unsigned short paramLength;
    for (unsigned short i = 0; i < shell->parser.paramCount; i++)
 801b164:	2300      	movs	r3, #0
 801b166:	81fb      	strh	r3, [r7, #14]
 801b168:	e03b      	b.n	801b1e2 <shellRemoveParamQuotes+0x86>
    {
        if (shell->parser.param[i][0] == '\"')
 801b16a:	89fa      	ldrh	r2, [r7, #14]
 801b16c:	687b      	ldr	r3, [r7, #4]
 801b16e:	3206      	adds	r2, #6
 801b170:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801b174:	781b      	ldrb	r3, [r3, #0]
 801b176:	2b22      	cmp	r3, #34	@ 0x22
 801b178:	d111      	bne.n	801b19e <shellRemoveParamQuotes+0x42>
        {
            shell->parser.param[i][0] = 0;
 801b17a:	89fa      	ldrh	r2, [r7, #14]
 801b17c:	687b      	ldr	r3, [r7, #4]
 801b17e:	3206      	adds	r2, #6
 801b180:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801b184:	2200      	movs	r2, #0
 801b186:	701a      	strb	r2, [r3, #0]
            shell->parser.param[i] = &shell->parser.param[i][1];
 801b188:	89fa      	ldrh	r2, [r7, #14]
 801b18a:	687b      	ldr	r3, [r7, #4]
 801b18c:	3206      	adds	r2, #6
 801b18e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801b192:	89fa      	ldrh	r2, [r7, #14]
 801b194:	1c59      	adds	r1, r3, #1
 801b196:	687b      	ldr	r3, [r7, #4]
 801b198:	3206      	adds	r2, #6
 801b19a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        }
        paramLength = strlen(shell->parser.param[i]);
 801b19e:	89fa      	ldrh	r2, [r7, #14]
 801b1a0:	687b      	ldr	r3, [r7, #4]
 801b1a2:	3206      	adds	r2, #6
 801b1a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801b1a8:	4618      	mov	r0, r3
 801b1aa:	f7e5 f8bb 	bl	8000324 <strlen>
 801b1ae:	4603      	mov	r3, r0
 801b1b0:	81bb      	strh	r3, [r7, #12]
        if (shell->parser.param[i][paramLength - 1] == '\"')
 801b1b2:	89fa      	ldrh	r2, [r7, #14]
 801b1b4:	687b      	ldr	r3, [r7, #4]
 801b1b6:	3206      	adds	r2, #6
 801b1b8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801b1bc:	89bb      	ldrh	r3, [r7, #12]
 801b1be:	3b01      	subs	r3, #1
 801b1c0:	4413      	add	r3, r2
 801b1c2:	781b      	ldrb	r3, [r3, #0]
 801b1c4:	2b22      	cmp	r3, #34	@ 0x22
 801b1c6:	d109      	bne.n	801b1dc <shellRemoveParamQuotes+0x80>
        {
            shell->parser.param[i][paramLength - 1] = 0;
 801b1c8:	89fa      	ldrh	r2, [r7, #14]
 801b1ca:	687b      	ldr	r3, [r7, #4]
 801b1cc:	3206      	adds	r2, #6
 801b1ce:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801b1d2:	89bb      	ldrh	r3, [r7, #12]
 801b1d4:	3b01      	subs	r3, #1
 801b1d6:	4413      	add	r3, r2
 801b1d8:	2200      	movs	r2, #0
 801b1da:	701a      	strb	r2, [r3, #0]
    for (unsigned short i = 0; i < shell->parser.paramCount; i++)
 801b1dc:	89fb      	ldrh	r3, [r7, #14]
 801b1de:	3301      	adds	r3, #1
 801b1e0:	81fb      	strh	r3, [r7, #14]
 801b1e2:	687b      	ldr	r3, [r7, #4]
 801b1e4:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 801b1e6:	89fa      	ldrh	r2, [r7, #14]
 801b1e8:	429a      	cmp	r2, r3
 801b1ea:	d3be      	bcc.n	801b16a <shellRemoveParamQuotes+0xe>
        }
    }
}
 801b1ec:	bf00      	nop
 801b1ee:	bf00      	nop
 801b1f0:	3710      	adds	r7, #16
 801b1f2:	46bd      	mov	sp, r7
 801b1f4:	bd80      	pop	{r7, pc}
	...

0801b1f8 <shellSeekCommand>:
 */
ShellCommand* shellSeekCommand(Shell *shell,
                               const char *cmd,
                               ShellCommand *base,
                               unsigned short compareLength)
{
 801b1f8:	b580      	push	{r7, lr}
 801b1fa:	b086      	sub	sp, #24
 801b1fc:	af00      	add	r7, sp, #0
 801b1fe:	60f8      	str	r0, [r7, #12]
 801b200:	60b9      	str	r1, [r7, #8]
 801b202:	607a      	str	r2, [r7, #4]
 801b204:	807b      	strh	r3, [r7, #2]
    const char *name;
    unsigned short count = shell->commandList.count -
 801b206:	68fb      	ldr	r3, [r7, #12]
 801b208:	f8b3 206c 	ldrh.w	r2, [r3, #108]	@ 0x6c
        ((size_t)base - (size_t)shell->commandList.base) / sizeof(ShellCommand);
 801b20c:	687b      	ldr	r3, [r7, #4]
 801b20e:	68f9      	ldr	r1, [r7, #12]
 801b210:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 801b212:	1a5b      	subs	r3, r3, r1
 801b214:	4932      	ldr	r1, [pc, #200]	@ (801b2e0 <shellSeekCommand+0xe8>)
 801b216:	fba1 1303 	umull	r1, r3, r1, r3
 801b21a:	091b      	lsrs	r3, r3, #4
    unsigned short count = shell->commandList.count -
 801b21c:	b29b      	uxth	r3, r3
 801b21e:	1ad3      	subs	r3, r2, r3
 801b220:	82bb      	strh	r3, [r7, #20]
    for (unsigned short i = 0; i < count; i++)
 801b222:	2300      	movs	r3, #0
 801b224:	82fb      	strh	r3, [r7, #22]
 801b226:	e051      	b.n	801b2cc <shellSeekCommand+0xd4>
    {
        if (base[i].attr.attrs.type == SHELL_TYPE_KEY
 801b228:	8afa      	ldrh	r2, [r7, #22]
 801b22a:	4613      	mov	r3, r2
 801b22c:	009b      	lsls	r3, r3, #2
 801b22e:	4413      	add	r3, r2
 801b230:	009b      	lsls	r3, r3, #2
 801b232:	461a      	mov	r2, r3
 801b234:	687b      	ldr	r3, [r7, #4]
 801b236:	4413      	add	r3, r2
 801b238:	785b      	ldrb	r3, [r3, #1]
 801b23a:	f003 030f 	and.w	r3, r3, #15
 801b23e:	b2db      	uxtb	r3, r3
 801b240:	2b09      	cmp	r3, #9
 801b242:	d03f      	beq.n	801b2c4 <shellSeekCommand+0xcc>
            || shellCheckPermission(shell, &base[i]) != 0)
 801b244:	8afa      	ldrh	r2, [r7, #22]
 801b246:	4613      	mov	r3, r2
 801b248:	009b      	lsls	r3, r3, #2
 801b24a:	4413      	add	r3, r2
 801b24c:	009b      	lsls	r3, r3, #2
 801b24e:	461a      	mov	r2, r3
 801b250:	687b      	ldr	r3, [r7, #4]
 801b252:	4413      	add	r3, r2
 801b254:	4619      	mov	r1, r3
 801b256:	68f8      	ldr	r0, [r7, #12]
 801b258:	f7ff f903 	bl	801a462 <shellCheckPermission>
 801b25c:	4603      	mov	r3, r0
 801b25e:	2b00      	cmp	r3, #0
 801b260:	d130      	bne.n	801b2c4 <shellSeekCommand+0xcc>
        {
            continue;
        }
        name = shellGetCommandName(&base[i]);
 801b262:	8afa      	ldrh	r2, [r7, #22]
 801b264:	4613      	mov	r3, r2
 801b266:	009b      	lsls	r3, r3, #2
 801b268:	4413      	add	r3, r2
 801b26a:	009b      	lsls	r3, r3, #2
 801b26c:	461a      	mov	r2, r3
 801b26e:	687b      	ldr	r3, [r7, #4]
 801b270:	4413      	add	r3, r2
 801b272:	4618      	mov	r0, r3
 801b274:	f7ff fa0a 	bl	801a68c <shellGetCommandName>
 801b278:	6138      	str	r0, [r7, #16]
        if (!compareLength)
 801b27a:	887b      	ldrh	r3, [r7, #2]
 801b27c:	2b00      	cmp	r3, #0
 801b27e:	d10f      	bne.n	801b2a0 <shellSeekCommand+0xa8>
        {
            if (strcmp(cmd, name) == 0)
 801b280:	6939      	ldr	r1, [r7, #16]
 801b282:	68b8      	ldr	r0, [r7, #8]
 801b284:	f7e5 f844 	bl	8000310 <strcmp>
 801b288:	4603      	mov	r3, r0
 801b28a:	2b00      	cmp	r3, #0
 801b28c:	d11b      	bne.n	801b2c6 <shellSeekCommand+0xce>
            {
                return &base[i];
 801b28e:	8afa      	ldrh	r2, [r7, #22]
 801b290:	4613      	mov	r3, r2
 801b292:	009b      	lsls	r3, r3, #2
 801b294:	4413      	add	r3, r2
 801b296:	009b      	lsls	r3, r3, #2
 801b298:	461a      	mov	r2, r3
 801b29a:	687b      	ldr	r3, [r7, #4]
 801b29c:	4413      	add	r3, r2
 801b29e:	e01a      	b.n	801b2d6 <shellSeekCommand+0xde>
            }
        }
        else
        {
            if (strncmp(cmd, name, compareLength) == 0)
 801b2a0:	887b      	ldrh	r3, [r7, #2]
 801b2a2:	461a      	mov	r2, r3
 801b2a4:	6939      	ldr	r1, [r7, #16]
 801b2a6:	68b8      	ldr	r0, [r7, #8]
 801b2a8:	f003 ff3a 	bl	801f120 <strncmp>
 801b2ac:	4603      	mov	r3, r0
 801b2ae:	2b00      	cmp	r3, #0
 801b2b0:	d109      	bne.n	801b2c6 <shellSeekCommand+0xce>
            {
                return &base[i];
 801b2b2:	8afa      	ldrh	r2, [r7, #22]
 801b2b4:	4613      	mov	r3, r2
 801b2b6:	009b      	lsls	r3, r3, #2
 801b2b8:	4413      	add	r3, r2
 801b2ba:	009b      	lsls	r3, r3, #2
 801b2bc:	461a      	mov	r2, r3
 801b2be:	687b      	ldr	r3, [r7, #4]
 801b2c0:	4413      	add	r3, r2
 801b2c2:	e008      	b.n	801b2d6 <shellSeekCommand+0xde>
            continue;
 801b2c4:	bf00      	nop
    for (unsigned short i = 0; i < count; i++)
 801b2c6:	8afb      	ldrh	r3, [r7, #22]
 801b2c8:	3301      	adds	r3, #1
 801b2ca:	82fb      	strh	r3, [r7, #22]
 801b2cc:	8afa      	ldrh	r2, [r7, #22]
 801b2ce:	8abb      	ldrh	r3, [r7, #20]
 801b2d0:	429a      	cmp	r2, r3
 801b2d2:	d3a9      	bcc.n	801b228 <shellSeekCommand+0x30>
            }
        }
    }
    return NULL;
 801b2d4:	2300      	movs	r3, #0
}
 801b2d6:	4618      	mov	r0, r3
 801b2d8:	3718      	adds	r7, #24
 801b2da:	46bd      	mov	sp, r7
 801b2dc:	bd80      	pop	{r7, pc}
 801b2de:	bf00      	nop
 801b2e0:	cccccccd 	.word	0xcccccccd

0801b2e4 <shellGetVarValue>:
 * @param shell shell对象
 * @param command 命令
 * @return int 变量值
 */
int shellGetVarValue(Shell *shell, ShellCommand *command)
{
 801b2e4:	b580      	push	{r7, lr}
 801b2e6:	b084      	sub	sp, #16
 801b2e8:	af00      	add	r7, sp, #0
 801b2ea:	6078      	str	r0, [r7, #4]
 801b2ec:	6039      	str	r1, [r7, #0]
    int value = 0;
 801b2ee:	2300      	movs	r3, #0
 801b2f0:	60fb      	str	r3, [r7, #12]
    switch (command->attr.attrs.type)
 801b2f2:	683b      	ldr	r3, [r7, #0]
 801b2f4:	785b      	ldrb	r3, [r3, #1]
 801b2f6:	f3c3 0303 	ubfx	r3, r3, #0, #4
 801b2fa:	b2db      	uxtb	r3, r3
 801b2fc:	3b02      	subs	r3, #2
 801b2fe:	2b05      	cmp	r3, #5
 801b300:	d834      	bhi.n	801b36c <shellGetVarValue+0x88>
 801b302:	a201      	add	r2, pc, #4	@ (adr r2, 801b308 <shellGetVarValue+0x24>)
 801b304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b308:	0801b321 	.word	0x0801b321
 801b30c:	0801b32b 	.word	0x0801b32b
 801b310:	0801b337 	.word	0x0801b337
 801b314:	0801b341 	.word	0x0801b341
 801b318:	0801b341 	.word	0x0801b341
 801b31c:	0801b349 	.word	0x0801b349
    {
    case SHELL_TYPE_VAR_INT:
        value = *((int *)(command->data.var.value));
 801b320:	683b      	ldr	r3, [r7, #0]
 801b322:	689b      	ldr	r3, [r3, #8]
 801b324:	681b      	ldr	r3, [r3, #0]
 801b326:	60fb      	str	r3, [r7, #12]
        break;
 801b328:	e021      	b.n	801b36e <shellGetVarValue+0x8a>
    case SHELL_TYPE_VAR_SHORT:
        value = *((short *)(command->data.var.value));
 801b32a:	683b      	ldr	r3, [r7, #0]
 801b32c:	689b      	ldr	r3, [r3, #8]
 801b32e:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b332:	60fb      	str	r3, [r7, #12]
        break;
 801b334:	e01b      	b.n	801b36e <shellGetVarValue+0x8a>
    case SHELL_TYPE_VAR_CHAR:
        value = *((char *)(command->data.var.value));
 801b336:	683b      	ldr	r3, [r7, #0]
 801b338:	689b      	ldr	r3, [r3, #8]
 801b33a:	781b      	ldrb	r3, [r3, #0]
 801b33c:	60fb      	str	r3, [r7, #12]
        break;
 801b33e:	e016      	b.n	801b36e <shellGetVarValue+0x8a>
    case SHELL_TYPE_VAR_STRING:
    case SHELL_TYPE_VAR_POINT:
        value = (size_t)(command->data.var.value);
 801b340:	683b      	ldr	r3, [r7, #0]
 801b342:	689b      	ldr	r3, [r3, #8]
 801b344:	60fb      	str	r3, [r7, #12]
        break;
 801b346:	e012      	b.n	801b36e <shellGetVarValue+0x8a>
    case SHELL_TYPE_VAR_NODE: {
        int (*func)(void *) = ((ShellNodeVarAttr *)command->data.var.value)->get;
 801b348:	683b      	ldr	r3, [r7, #0]
 801b34a:	689b      	ldr	r3, [r3, #8]
 801b34c:	685b      	ldr	r3, [r3, #4]
 801b34e:	60bb      	str	r3, [r7, #8]
        value = func ? func(((ShellNodeVarAttr *)command->data.var.value)->var) : 0;
 801b350:	68bb      	ldr	r3, [r7, #8]
 801b352:	2b00      	cmp	r3, #0
 801b354:	d007      	beq.n	801b366 <shellGetVarValue+0x82>
 801b356:	683b      	ldr	r3, [r7, #0]
 801b358:	689b      	ldr	r3, [r3, #8]
 801b35a:	681a      	ldr	r2, [r3, #0]
 801b35c:	68bb      	ldr	r3, [r7, #8]
 801b35e:	4610      	mov	r0, r2
 801b360:	4798      	blx	r3
 801b362:	4603      	mov	r3, r0
 801b364:	e000      	b.n	801b368 <shellGetVarValue+0x84>
 801b366:	2300      	movs	r3, #0
 801b368:	60fb      	str	r3, [r7, #12]
        break;
 801b36a:	e000      	b.n	801b36e <shellGetVarValue+0x8a>
    }
    default:
        break;
 801b36c:	bf00      	nop
    }
    return value;
 801b36e:	68fb      	ldr	r3, [r7, #12]
}
 801b370:	4618      	mov	r0, r3
 801b372:	3710      	adds	r7, #16
 801b374:	46bd      	mov	sp, r7
 801b376:	bd80      	pop	{r7, pc}

0801b378 <shellSetVarValue>:
 * @param command 命令
 * @param value 值
 * @return int 返回变量值
 */
int shellSetVarValue(Shell *shell, ShellCommand *command, int value)
{
 801b378:	b580      	push	{r7, lr}
 801b37a:	b086      	sub	sp, #24
 801b37c:	af00      	add	r7, sp, #0
 801b37e:	60f8      	str	r0, [r7, #12]
 801b380:	60b9      	str	r1, [r7, #8]
 801b382:	607a      	str	r2, [r7, #4]
    if (command->attr.attrs.readOnly)
 801b384:	68bb      	ldr	r3, [r7, #8]
 801b386:	785b      	ldrb	r3, [r3, #1]
 801b388:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801b38c:	b2db      	uxtb	r3, r3
 801b38e:	2b00      	cmp	r3, #0
 801b390:	d006      	beq.n	801b3a0 <shellSetVarValue+0x28>
    {
        shellWriteString(shell, shellText[SHELL_TEXT_VAR_READ_ONLY_CANNOT_MODIFY]);
 801b392:	4b34      	ldr	r3, [pc, #208]	@ (801b464 <shellSetVarValue+0xec>)
 801b394:	6a1b      	ldr	r3, [r3, #32]
 801b396:	4619      	mov	r1, r3
 801b398:	68f8      	ldr	r0, [r7, #12]
 801b39a:	f7fe ff73 	bl	801a284 <shellWriteString>
 801b39e:	e058      	b.n	801b452 <shellSetVarValue+0xda>
    }
    else
    {
        switch (command->attr.attrs.type)
 801b3a0:	68bb      	ldr	r3, [r7, #8]
 801b3a2:	785b      	ldrb	r3, [r3, #1]
 801b3a4:	f3c3 0303 	ubfx	r3, r3, #0, #4
 801b3a8:	b2db      	uxtb	r3, r3
 801b3aa:	3b02      	subs	r3, #2
 801b3ac:	2b05      	cmp	r3, #5
 801b3ae:	d84d      	bhi.n	801b44c <shellSetVarValue+0xd4>
 801b3b0:	a201      	add	r2, pc, #4	@ (adr r2, 801b3b8 <shellSetVarValue+0x40>)
 801b3b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b3b6:	bf00      	nop
 801b3b8:	0801b3d1 	.word	0x0801b3d1
 801b3bc:	0801b3db 	.word	0x0801b3db
 801b3c0:	0801b3e7 	.word	0x0801b3e7
 801b3c4:	0801b3f3 	.word	0x0801b3f3
 801b3c8:	0801b403 	.word	0x0801b403
 801b3cc:	0801b411 	.word	0x0801b411
        {
        case SHELL_TYPE_VAR_INT:
            *((int *)(command->data.var.value)) = value;
 801b3d0:	68bb      	ldr	r3, [r7, #8]
 801b3d2:	689b      	ldr	r3, [r3, #8]
 801b3d4:	687a      	ldr	r2, [r7, #4]
 801b3d6:	601a      	str	r2, [r3, #0]
            break;
 801b3d8:	e03b      	b.n	801b452 <shellSetVarValue+0xda>
        case SHELL_TYPE_VAR_SHORT:
            *((short *)(command->data.var.value)) = value;
 801b3da:	68bb      	ldr	r3, [r7, #8]
 801b3dc:	689b      	ldr	r3, [r3, #8]
 801b3de:	687a      	ldr	r2, [r7, #4]
 801b3e0:	b212      	sxth	r2, r2
 801b3e2:	801a      	strh	r2, [r3, #0]
            break;
 801b3e4:	e035      	b.n	801b452 <shellSetVarValue+0xda>
        case SHELL_TYPE_VAR_CHAR:
            *((char *)(command->data.var.value)) = value;
 801b3e6:	68bb      	ldr	r3, [r7, #8]
 801b3e8:	689b      	ldr	r3, [r3, #8]
 801b3ea:	687a      	ldr	r2, [r7, #4]
 801b3ec:	b2d2      	uxtb	r2, r2
 801b3ee:	701a      	strb	r2, [r3, #0]
            break;
 801b3f0:	e02f      	b.n	801b452 <shellSetVarValue+0xda>
        case SHELL_TYPE_VAR_STRING:
            shellStringCopy(((char *)(command->data.var.value)), (char *) (size_t) value);
 801b3f2:	68bb      	ldr	r3, [r7, #8]
 801b3f4:	689b      	ldr	r3, [r3, #8]
 801b3f6:	687a      	ldr	r2, [r7, #4]
 801b3f8:	4611      	mov	r1, r2
 801b3fa:	4618      	mov	r0, r3
 801b3fc:	f7ff f8f2 	bl	801a5e4 <shellStringCopy>
            break;
 801b400:	e027      	b.n	801b452 <shellSetVarValue+0xda>
        case SHELL_TYPE_VAR_POINT:
            shellWriteString(shell, shellText[SHELL_TEXT_POINT_CANNOT_MODIFY]);
 801b402:	4b18      	ldr	r3, [pc, #96]	@ (801b464 <shellSetVarValue+0xec>)
 801b404:	69db      	ldr	r3, [r3, #28]
 801b406:	4619      	mov	r1, r3
 801b408:	68f8      	ldr	r0, [r7, #12]
 801b40a:	f7fe ff3b 	bl	801a284 <shellWriteString>
            break;
 801b40e:	e020      	b.n	801b452 <shellSetVarValue+0xda>
        case SHELL_TYPE_VAR_NODE:
            if (((ShellNodeVarAttr *)command->data.var.value)->set)
 801b410:	68bb      	ldr	r3, [r7, #8]
 801b412:	689b      	ldr	r3, [r3, #8]
 801b414:	689b      	ldr	r3, [r3, #8]
 801b416:	2b00      	cmp	r3, #0
 801b418:	d01a      	beq.n	801b450 <shellSetVarValue+0xd8>
            {
                if (((ShellNodeVarAttr *)command->data.var.value)->var)
 801b41a:	68bb      	ldr	r3, [r7, #8]
 801b41c:	689b      	ldr	r3, [r3, #8]
 801b41e:	681b      	ldr	r3, [r3, #0]
 801b420:	2b00      	cmp	r3, #0
 801b422:	d00b      	beq.n	801b43c <shellSetVarValue+0xc4>
                {
                    int (*func)(void *, int) = ((ShellNodeVarAttr *)command->data.var.value)->set;
 801b424:	68bb      	ldr	r3, [r7, #8]
 801b426:	689b      	ldr	r3, [r3, #8]
 801b428:	689b      	ldr	r3, [r3, #8]
 801b42a:	613b      	str	r3, [r7, #16]
                    func(((ShellNodeVarAttr *)command->data.var.value)->var, value);
 801b42c:	68bb      	ldr	r3, [r7, #8]
 801b42e:	689b      	ldr	r3, [r3, #8]
 801b430:	681a      	ldr	r2, [r3, #0]
 801b432:	693b      	ldr	r3, [r7, #16]
 801b434:	6879      	ldr	r1, [r7, #4]
 801b436:	4610      	mov	r0, r2
 801b438:	4798      	blx	r3
                {
                    int (*func)(int) = ((ShellNodeVarAttr *)command->data.var.value)->set;
                    func(value);
                }
            }
            break;
 801b43a:	e009      	b.n	801b450 <shellSetVarValue+0xd8>
                    int (*func)(int) = ((ShellNodeVarAttr *)command->data.var.value)->set;
 801b43c:	68bb      	ldr	r3, [r7, #8]
 801b43e:	689b      	ldr	r3, [r3, #8]
 801b440:	689b      	ldr	r3, [r3, #8]
 801b442:	617b      	str	r3, [r7, #20]
                    func(value);
 801b444:	697b      	ldr	r3, [r7, #20]
 801b446:	6878      	ldr	r0, [r7, #4]
 801b448:	4798      	blx	r3
            break;
 801b44a:	e001      	b.n	801b450 <shellSetVarValue+0xd8>
        default:
            break;
 801b44c:	bf00      	nop
 801b44e:	e000      	b.n	801b452 <shellSetVarValue+0xda>
            break;
 801b450:	bf00      	nop
        }
    }
    return shellShowVar(shell, command);
 801b452:	68b9      	ldr	r1, [r7, #8]
 801b454:	68f8      	ldr	r0, [r7, #12]
 801b456:	f000 f807 	bl	801b468 <shellShowVar>
 801b45a:	4603      	mov	r3, r0
}
 801b45c:	4618      	mov	r0, r3
 801b45e:	3718      	adds	r7, #24
 801b460:	46bd      	mov	sp, r7
 801b462:	bd80      	pop	{r7, pc}
 801b464:	2400002c 	.word	0x2400002c

0801b468 <shellShowVar>:
 * @param shell shell对象
 * @param command 命令
 * @return int 返回变量值
 */
static int shellShowVar(Shell *shell, ShellCommand *command)
{
 801b468:	b580      	push	{r7, lr}
 801b46a:	b088      	sub	sp, #32
 801b46c:	af00      	add	r7, sp, #0
 801b46e:	6078      	str	r0, [r7, #4]
 801b470:	6039      	str	r1, [r7, #0]
    char buffer[12] = "00000000000";
 801b472:	4a34      	ldr	r2, [pc, #208]	@ (801b544 <shellShowVar+0xdc>)
 801b474:	f107 030c 	add.w	r3, r7, #12
 801b478:	ca07      	ldmia	r2, {r0, r1, r2}
 801b47a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    int value = shellGetVarValue(shell, command);
 801b47e:	6839      	ldr	r1, [r7, #0]
 801b480:	6878      	ldr	r0, [r7, #4]
 801b482:	f7ff ff2f 	bl	801b2e4 <shellGetVarValue>
 801b486:	61b8      	str	r0, [r7, #24]
    
    shellWriteString(shell, command->data.var.name);
 801b488:	683b      	ldr	r3, [r7, #0]
 801b48a:	685b      	ldr	r3, [r3, #4]
 801b48c:	4619      	mov	r1, r3
 801b48e:	6878      	ldr	r0, [r7, #4]
 801b490:	f7fe fef8 	bl	801a284 <shellWriteString>
    shellWriteString(shell, " = ");
 801b494:	492c      	ldr	r1, [pc, #176]	@ (801b548 <shellShowVar+0xe0>)
 801b496:	6878      	ldr	r0, [r7, #4]
 801b498:	f7fe fef4 	bl	801a284 <shellWriteString>

    switch (command->attr.attrs.type)
 801b49c:	683b      	ldr	r3, [r7, #0]
 801b49e:	785b      	ldrb	r3, [r3, #1]
 801b4a0:	f3c3 0303 	ubfx	r3, r3, #0, #4
 801b4a4:	b2db      	uxtb	r3, r3
 801b4a6:	2b05      	cmp	r3, #5
 801b4a8:	d10d      	bne.n	801b4c6 <shellShowVar+0x5e>
    {
    case SHELL_TYPE_VAR_STRING:
        shellWriteString(shell, "\"");
 801b4aa:	4928      	ldr	r1, [pc, #160]	@ (801b54c <shellShowVar+0xe4>)
 801b4ac:	6878      	ldr	r0, [r7, #4]
 801b4ae:	f7fe fee9 	bl	801a284 <shellWriteString>
        shellWriteString(shell, (char *) (size_t) value);
 801b4b2:	69bb      	ldr	r3, [r7, #24]
 801b4b4:	4619      	mov	r1, r3
 801b4b6:	6878      	ldr	r0, [r7, #4]
 801b4b8:	f7fe fee4 	bl	801a284 <shellWriteString>
        shellWriteString(shell, "\"");
 801b4bc:	4923      	ldr	r1, [pc, #140]	@ (801b54c <shellShowVar+0xe4>)
 801b4be:	6878      	ldr	r0, [r7, #4]
 801b4c0:	f7fe fee0 	bl	801a284 <shellWriteString>
        break;
 801b4c4:	e035      	b.n	801b532 <shellShowVar+0xca>
    // case SHELL_TYPE_VAR_INT:
    // case SHELL_TYPE_VAR_SHORT:
    // case SHELL_TYPE_VAR_CHAR:
    // case SHELL_TYPE_VAR_POINT:
    default:
        shellWriteString(shell, &buffer[11 - shellToDec(value, buffer)]);
 801b4c6:	f107 030c 	add.w	r3, r7, #12
 801b4ca:	4619      	mov	r1, r3
 801b4cc:	69b8      	ldr	r0, [r7, #24]
 801b4ce:	f7ff f831 	bl	801a534 <shellToDec>
 801b4d2:	4603      	mov	r3, r0
 801b4d4:	f1c3 030b 	rsb	r3, r3, #11
 801b4d8:	f107 020c 	add.w	r2, r7, #12
 801b4dc:	4413      	add	r3, r2
 801b4de:	4619      	mov	r1, r3
 801b4e0:	6878      	ldr	r0, [r7, #4]
 801b4e2:	f7fe fecf 	bl	801a284 <shellWriteString>
        shellWriteString(shell, ", 0x");
 801b4e6:	491a      	ldr	r1, [pc, #104]	@ (801b550 <shellShowVar+0xe8>)
 801b4e8:	6878      	ldr	r0, [r7, #4]
 801b4ea:	f7fe fecb 	bl	801a284 <shellWriteString>
        for (short i = 0; i < 11; i++)
 801b4ee:	2300      	movs	r3, #0
 801b4f0:	83fb      	strh	r3, [r7, #30]
 801b4f2:	e00c      	b.n	801b50e <shellShowVar+0xa6>
        {
            buffer[i] = '0';
 801b4f4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801b4f8:	3320      	adds	r3, #32
 801b4fa:	443b      	add	r3, r7
 801b4fc:	2230      	movs	r2, #48	@ 0x30
 801b4fe:	f803 2c14 	strb.w	r2, [r3, #-20]
        for (short i = 0; i < 11; i++)
 801b502:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801b506:	b29b      	uxth	r3, r3
 801b508:	3301      	adds	r3, #1
 801b50a:	b29b      	uxth	r3, r3
 801b50c:	83fb      	strh	r3, [r7, #30]
 801b50e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801b512:	2b0a      	cmp	r3, #10
 801b514:	ddee      	ble.n	801b4f4 <shellShowVar+0x8c>
        }
        shellToHex(value, buffer);
 801b516:	69bb      	ldr	r3, [r7, #24]
 801b518:	f107 020c 	add.w	r2, r7, #12
 801b51c:	4611      	mov	r1, r2
 801b51e:	4618      	mov	r0, r3
 801b520:	f7fe ffd5 	bl	801a4ce <shellToHex>
        shellWriteString(shell, buffer);
 801b524:	f107 030c 	add.w	r3, r7, #12
 801b528:	4619      	mov	r1, r3
 801b52a:	6878      	ldr	r0, [r7, #4]
 801b52c:	f7fe feaa 	bl	801a284 <shellWriteString>
        break;
 801b530:	bf00      	nop
    }

    shellWriteString(shell, "\r\n");
 801b532:	4908      	ldr	r1, [pc, #32]	@ (801b554 <shellShowVar+0xec>)
 801b534:	6878      	ldr	r0, [r7, #4]
 801b536:	f7fe fea5 	bl	801a284 <shellWriteString>
    return value;
 801b53a:	69bb      	ldr	r3, [r7, #24]
}
 801b53c:	4618      	mov	r0, r3
 801b53e:	3720      	adds	r7, #32
 801b540:	46bd      	mov	sp, r7
 801b542:	bd80      	pop	{r7, pc}
 801b544:	08021b2c 	.word	0x08021b2c
 801b548:	08021b1c 	.word	0x08021b1c
 801b54c:	08021b20 	.word	0x08021b20
 801b550:	08021b24 	.word	0x08021b24
 801b554:	08021b04 	.word	0x08021b04

0801b558 <shellSetVar>:
 * @param name 变量名
 * @param value 变量值
 * @return int 返回变量值
 */
int shellSetVar(char *name, int value)
{
 801b558:	b580      	push	{r7, lr}
 801b55a:	b084      	sub	sp, #16
 801b55c:	af00      	add	r7, sp, #0
 801b55e:	6078      	str	r0, [r7, #4]
 801b560:	6039      	str	r1, [r7, #0]
    Shell *shell = shellGetCurrent();
 801b562:	f7fe fe4d 	bl	801a200 <shellGetCurrent>
 801b566:	60f8      	str	r0, [r7, #12]
    if (shell == NULL)
 801b568:	68fb      	ldr	r3, [r7, #12]
 801b56a:	2b00      	cmp	r3, #0
 801b56c:	d101      	bne.n	801b572 <shellSetVar+0x1a>
    {
        return 0;
 801b56e:	2300      	movs	r3, #0
 801b570:	e032      	b.n	801b5d8 <shellSetVar+0x80>
    }
    ShellCommand *command = shellSeekCommand(shell,
                                             name,
                                             shell->commandList.base,
 801b572:	68fb      	ldr	r3, [r7, #12]
 801b574:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
    ShellCommand *command = shellSeekCommand(shell,
 801b576:	2300      	movs	r3, #0
 801b578:	6879      	ldr	r1, [r7, #4]
 801b57a:	68f8      	ldr	r0, [r7, #12]
 801b57c:	f7ff fe3c 	bl	801b1f8 <shellSeekCommand>
 801b580:	60b8      	str	r0, [r7, #8]
                                             0);
    if (!command)
 801b582:	68bb      	ldr	r3, [r7, #8]
 801b584:	2b00      	cmp	r3, #0
 801b586:	d107      	bne.n	801b598 <shellSetVar+0x40>
    {
        shellWriteString(shell, shellText[SHELL_TEXT_VAR_NOT_FOUND]);
 801b588:	4b15      	ldr	r3, [pc, #84]	@ (801b5e0 <shellSetVar+0x88>)
 801b58a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b58c:	4619      	mov	r1, r3
 801b58e:	68f8      	ldr	r0, [r7, #12]
 801b590:	f7fe fe78 	bl	801a284 <shellWriteString>
        return 0;
 801b594:	2300      	movs	r3, #0
 801b596:	e01f      	b.n	801b5d8 <shellSetVar+0x80>
    }
    if (command->attr.attrs.type < SHELL_TYPE_VAR_INT
 801b598:	68bb      	ldr	r3, [r7, #8]
 801b59a:	785b      	ldrb	r3, [r3, #1]
 801b59c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 801b5a0:	b2db      	uxtb	r3, r3
 801b5a2:	2b01      	cmp	r3, #1
 801b5a4:	d906      	bls.n	801b5b4 <shellSetVar+0x5c>
        || command->attr.attrs.type > SHELL_TYPE_VAR_NODE)
 801b5a6:	68bb      	ldr	r3, [r7, #8]
 801b5a8:	785b      	ldrb	r3, [r3, #1]
 801b5aa:	f3c3 0303 	ubfx	r3, r3, #0, #4
 801b5ae:	b2db      	uxtb	r3, r3
 801b5b0:	2b07      	cmp	r3, #7
 801b5b2:	d90b      	bls.n	801b5cc <shellSetVar+0x74>
    {
        shellWriteString(shell, name);
 801b5b4:	6879      	ldr	r1, [r7, #4]
 801b5b6:	68f8      	ldr	r0, [r7, #12]
 801b5b8:	f7fe fe64 	bl	801a284 <shellWriteString>
        shellWriteString(shell, shellText[SHELL_TEXT_NOT_VAR]);
 801b5bc:	4b08      	ldr	r3, [pc, #32]	@ (801b5e0 <shellSetVar+0x88>)
 801b5be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801b5c0:	4619      	mov	r1, r3
 801b5c2:	68f8      	ldr	r0, [r7, #12]
 801b5c4:	f7fe fe5e 	bl	801a284 <shellWriteString>
        return 0;
 801b5c8:	2300      	movs	r3, #0
 801b5ca:	e005      	b.n	801b5d8 <shellSetVar+0x80>
    }
    return shellSetVarValue(shell, command, value);
 801b5cc:	683a      	ldr	r2, [r7, #0]
 801b5ce:	68b9      	ldr	r1, [r7, #8]
 801b5d0:	68f8      	ldr	r0, [r7, #12]
 801b5d2:	f7ff fed1 	bl	801b378 <shellSetVarValue>
 801b5d6:	4603      	mov	r3, r0
}
 801b5d8:	4618      	mov	r0, r3
 801b5da:	3710      	adds	r7, #16
 801b5dc:	46bd      	mov	sp, r7
 801b5de:	bd80      	pop	{r7, pc}
 801b5e0:	2400002c 	.word	0x2400002c

0801b5e4 <shellRunCommand>:
 * @param command 命令
 * 
 * @return unsigned int 命令返回值
 */
unsigned int shellRunCommand(Shell *shell, ShellCommand *command)
{
 801b5e4:	b580      	push	{r7, lr}
 801b5e6:	b084      	sub	sp, #16
 801b5e8:	af00      	add	r7, sp, #0
 801b5ea:	6078      	str	r0, [r7, #4]
 801b5ec:	6039      	str	r1, [r7, #0]
    int returnValue = 0;
 801b5ee:	2300      	movs	r3, #0
 801b5f0:	60fb      	str	r3, [r7, #12]
    shell->status.isActive = 1;
 801b5f2:	687a      	ldr	r2, [r7, #4]
 801b5f4:	f892 3070 	ldrb.w	r3, [r2, #112]	@ 0x70
 801b5f8:	f043 0302 	orr.w	r3, r3, #2
 801b5fc:	f882 3070 	strb.w	r3, [r2, #112]	@ 0x70
    if (command->attr.attrs.type == SHELL_TYPE_CMD_MAIN)
 801b600:	683b      	ldr	r3, [r7, #0]
 801b602:	785b      	ldrb	r3, [r3, #1]
 801b604:	f003 030f 	and.w	r3, r3, #15
 801b608:	b2db      	uxtb	r3, r3
 801b60a:	2b00      	cmp	r3, #0
 801b60c:	d11b      	bne.n	801b646 <shellRunCommand+0x62>
    {
        shellRemoveParamQuotes(shell);
 801b60e:	6878      	ldr	r0, [r7, #4]
 801b610:	f7ff fda4 	bl	801b15c <shellRemoveParamQuotes>
        int (*func)(int, char **) = command->data.cmd.function;
 801b614:	683b      	ldr	r3, [r7, #0]
 801b616:	689b      	ldr	r3, [r3, #8]
 801b618:	60bb      	str	r3, [r7, #8]
        returnValue = func(shell->parser.paramCount, shell->parser.param);
 801b61a:	687b      	ldr	r3, [r7, #4]
 801b61c:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 801b61e:	4618      	mov	r0, r3
 801b620:	687b      	ldr	r3, [r7, #4]
 801b622:	f103 0218 	add.w	r2, r3, #24
 801b626:	68bb      	ldr	r3, [r7, #8]
 801b628:	4611      	mov	r1, r2
 801b62a:	4798      	blx	r3
 801b62c:	60f8      	str	r0, [r7, #12]
        if (!command->attr.attrs.disableReturn)
 801b62e:	683b      	ldr	r3, [r7, #0]
 801b630:	785b      	ldrb	r3, [r3, #1]
 801b632:	f003 0320 	and.w	r3, r3, #32
 801b636:	b2db      	uxtb	r3, r3
 801b638:	2b00      	cmp	r3, #0
 801b63a:	d13f      	bne.n	801b6bc <shellRunCommand+0xd8>
        {
            shellWriteReturnValue(shell, returnValue);
 801b63c:	68f9      	ldr	r1, [r7, #12]
 801b63e:	6878      	ldr	r0, [r7, #4]
 801b640:	f000 f8c0 	bl	801b7c4 <shellWriteReturnValue>
 801b644:	e03a      	b.n	801b6bc <shellRunCommand+0xd8>
        }
    }
    else if (command->attr.attrs.type == SHELL_TYPE_CMD_FUNC)
 801b646:	683b      	ldr	r3, [r7, #0]
 801b648:	785b      	ldrb	r3, [r3, #1]
 801b64a:	f003 030f 	and.w	r3, r3, #15
 801b64e:	b2db      	uxtb	r3, r3
 801b650:	2b01      	cmp	r3, #1
 801b652:	d115      	bne.n	801b680 <shellRunCommand+0x9c>
    {
        returnValue = shellExtRun(shell,
                                  command,
                                  shell->parser.paramCount,
 801b654:	687b      	ldr	r3, [r7, #4]
 801b656:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
        returnValue = shellExtRun(shell,
 801b658:	461a      	mov	r2, r3
                                  shell->parser.param);
 801b65a:	687b      	ldr	r3, [r7, #4]
 801b65c:	3318      	adds	r3, #24
        returnValue = shellExtRun(shell,
 801b65e:	6839      	ldr	r1, [r7, #0]
 801b660:	6878      	ldr	r0, [r7, #4]
 801b662:	f002 fbeb 	bl	801de3c <shellExtRun>
 801b666:	60f8      	str	r0, [r7, #12]
        if (!command->attr.attrs.disableReturn)
 801b668:	683b      	ldr	r3, [r7, #0]
 801b66a:	785b      	ldrb	r3, [r3, #1]
 801b66c:	f003 0320 	and.w	r3, r3, #32
 801b670:	b2db      	uxtb	r3, r3
 801b672:	2b00      	cmp	r3, #0
 801b674:	d122      	bne.n	801b6bc <shellRunCommand+0xd8>
        {
            shellWriteReturnValue(shell, returnValue);
 801b676:	68f9      	ldr	r1, [r7, #12]
 801b678:	6878      	ldr	r0, [r7, #4]
 801b67a:	f000 f8a3 	bl	801b7c4 <shellWriteReturnValue>
 801b67e:	e01d      	b.n	801b6bc <shellRunCommand+0xd8>
        }
    }
    else if (command->attr.attrs.type >= SHELL_TYPE_VAR_INT
 801b680:	683b      	ldr	r3, [r7, #0]
 801b682:	785b      	ldrb	r3, [r3, #1]
 801b684:	f3c3 0303 	ubfx	r3, r3, #0, #4
 801b688:	b2db      	uxtb	r3, r3
 801b68a:	2b01      	cmp	r3, #1
 801b68c:	d90b      	bls.n	801b6a6 <shellRunCommand+0xc2>
        && command->attr.attrs.type <= SHELL_TYPE_VAR_NODE)
 801b68e:	683b      	ldr	r3, [r7, #0]
 801b690:	785b      	ldrb	r3, [r3, #1]
 801b692:	f3c3 0303 	ubfx	r3, r3, #0, #4
 801b696:	b2db      	uxtb	r3, r3
 801b698:	2b07      	cmp	r3, #7
 801b69a:	d804      	bhi.n	801b6a6 <shellRunCommand+0xc2>
    {
        shellShowVar(shell, command);
 801b69c:	6839      	ldr	r1, [r7, #0]
 801b69e:	6878      	ldr	r0, [r7, #4]
 801b6a0:	f7ff fee2 	bl	801b468 <shellShowVar>
 801b6a4:	e00a      	b.n	801b6bc <shellRunCommand+0xd8>
    }
    else if (command->attr.attrs.type == SHELL_TYPE_USER)
 801b6a6:	683b      	ldr	r3, [r7, #0]
 801b6a8:	785b      	ldrb	r3, [r3, #1]
 801b6aa:	f003 030f 	and.w	r3, r3, #15
 801b6ae:	b2db      	uxtb	r3, r3
 801b6b0:	2b08      	cmp	r3, #8
 801b6b2:	d103      	bne.n	801b6bc <shellRunCommand+0xd8>
    {
        shellSetUser(shell, command);
 801b6b4:	6839      	ldr	r1, [r7, #0]
 801b6b6:	6878      	ldr	r0, [r7, #4]
 801b6b8:	f000 f83c 	bl	801b734 <shellSetUser>
    }
    shell->status.isActive = 0;
 801b6bc:	687a      	ldr	r2, [r7, #4]
 801b6be:	f892 3070 	ldrb.w	r3, [r2, #112]	@ 0x70
 801b6c2:	f023 0302 	bic.w	r3, r3, #2
 801b6c6:	f882 3070 	strb.w	r3, [r2, #112]	@ 0x70

    return returnValue;
 801b6ca:	68fb      	ldr	r3, [r7, #12]
}
 801b6cc:	4618      	mov	r0, r3
 801b6ce:	3710      	adds	r7, #16
 801b6d0:	46bd      	mov	sp, r7
 801b6d2:	bd80      	pop	{r7, pc}

0801b6d4 <shellCheckPassword>:
 * @brief shell校验密码
 * 
 * @param shell shell对象
 */
static void shellCheckPassword(Shell *shell)
{
 801b6d4:	b580      	push	{r7, lr}
 801b6d6:	b082      	sub	sp, #8
 801b6d8:	af00      	add	r7, sp, #0
 801b6da:	6078      	str	r0, [r7, #4]
    if (strcmp(shell->parser.buffer, shell->info.user->data.user.password) == 0)
 801b6dc:	687b      	ldr	r3, [r7, #4]
 801b6de:	695a      	ldr	r2, [r3, #20]
 801b6e0:	687b      	ldr	r3, [r7, #4]
 801b6e2:	681b      	ldr	r3, [r3, #0]
 801b6e4:	689b      	ldr	r3, [r3, #8]
 801b6e6:	4619      	mov	r1, r3
 801b6e8:	4610      	mov	r0, r2
 801b6ea:	f7e4 fe11 	bl	8000310 <strcmp>
 801b6ee:	4603      	mov	r3, r0
 801b6f0:	2b00      	cmp	r3, #0
 801b6f2:	d10d      	bne.n	801b710 <shellCheckPassword+0x3c>
    {
        shell->status.isChecked = 1;
 801b6f4:	687a      	ldr	r2, [r7, #4]
 801b6f6:	f892 3070 	ldrb.w	r3, [r2, #112]	@ 0x70
 801b6fa:	f043 0301 	orr.w	r3, r3, #1
 801b6fe:	f882 3070 	strb.w	r3, [r2, #112]	@ 0x70
    #if SHELL_SHOW_INFO == 1
        shellWriteString(shell, shellText[SHELL_TEXT_INFO]);
 801b702:	4b0b      	ldr	r3, [pc, #44]	@ (801b730 <shellCheckPassword+0x5c>)
 801b704:	681b      	ldr	r3, [r3, #0]
 801b706:	4619      	mov	r1, r3
 801b708:	6878      	ldr	r0, [r7, #4]
 801b70a:	f7fe fdbb 	bl	801a284 <shellWriteString>
 801b70e:	e005      	b.n	801b71c <shellCheckPassword+0x48>
    #endif
    }
    else
    {
        shellWriteString(shell, shellText[SHELL_TEXT_PASSWORD_ERROR]);
 801b710:	4b07      	ldr	r3, [pc, #28]	@ (801b730 <shellCheckPassword+0x5c>)
 801b712:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801b714:	4619      	mov	r1, r3
 801b716:	6878      	ldr	r0, [r7, #4]
 801b718:	f7fe fdb4 	bl	801a284 <shellWriteString>
    }
    shell->parser.length = 0;
 801b71c:	687b      	ldr	r3, [r7, #4]
 801b71e:	2200      	movs	r2, #0
 801b720:	821a      	strh	r2, [r3, #16]
    shell->parser.cursor = 0;
 801b722:	687b      	ldr	r3, [r7, #4]
 801b724:	2200      	movs	r2, #0
 801b726:	825a      	strh	r2, [r3, #18]
}
 801b728:	bf00      	nop
 801b72a:	3708      	adds	r7, #8
 801b72c:	46bd      	mov	sp, r7
 801b72e:	bd80      	pop	{r7, pc}
 801b730:	2400002c 	.word	0x2400002c

0801b734 <shellSetUser>:
 * 
 * @param shell shell对象
 * @param user 用户
 */
void shellSetUser(Shell *shell, const ShellCommand *user)
{
 801b734:	b580      	push	{r7, lr}
 801b736:	b082      	sub	sp, #8
 801b738:	af00      	add	r7, sp, #0
 801b73a:	6078      	str	r0, [r7, #4]
 801b73c:	6039      	str	r1, [r7, #0]
    shell->info.user = user;
 801b73e:	687b      	ldr	r3, [r7, #4]
 801b740:	683a      	ldr	r2, [r7, #0]
 801b742:	601a      	str	r2, [r3, #0]
    shell->status.isChecked = 
        ((user->data.user.password && strlen(user->data.user.password) != 0)
 801b744:	683b      	ldr	r3, [r7, #0]
 801b746:	689b      	ldr	r3, [r3, #8]
            && (shell->parser.paramCount < 2
                || strcmp(user->data.user.password, shell->parser.param[1]) != 0))
         ? 0 : 1;
 801b748:	2b00      	cmp	r3, #0
 801b74a:	d013      	beq.n	801b774 <shellSetUser+0x40>
        ((user->data.user.password && strlen(user->data.user.password) != 0)
 801b74c:	683b      	ldr	r3, [r7, #0]
 801b74e:	689b      	ldr	r3, [r3, #8]
 801b750:	781b      	ldrb	r3, [r3, #0]
 801b752:	2b00      	cmp	r3, #0
 801b754:	d00e      	beq.n	801b774 <shellSetUser+0x40>
            && (shell->parser.paramCount < 2
 801b756:	687b      	ldr	r3, [r7, #4]
 801b758:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
         ? 0 : 1;
 801b75a:	2b01      	cmp	r3, #1
 801b75c:	d90c      	bls.n	801b778 <shellSetUser+0x44>
                || strcmp(user->data.user.password, shell->parser.param[1]) != 0))
 801b75e:	683b      	ldr	r3, [r7, #0]
 801b760:	689a      	ldr	r2, [r3, #8]
 801b762:	687b      	ldr	r3, [r7, #4]
 801b764:	69db      	ldr	r3, [r3, #28]
 801b766:	4619      	mov	r1, r3
 801b768:	4610      	mov	r0, r2
 801b76a:	f7e4 fdd1 	bl	8000310 <strcmp>
 801b76e:	4603      	mov	r3, r0
 801b770:	2b00      	cmp	r3, #0
 801b772:	d101      	bne.n	801b778 <shellSetUser+0x44>
         ? 0 : 1;
 801b774:	2301      	movs	r3, #1
 801b776:	e000      	b.n	801b77a <shellSetUser+0x46>
 801b778:	2300      	movs	r3, #0
 801b77a:	f003 0301 	and.w	r3, r3, #1
 801b77e:	b2d9      	uxtb	r1, r3
    shell->status.isChecked = 
 801b780:	687a      	ldr	r2, [r7, #4]
 801b782:	f892 3070 	ldrb.w	r3, [r2, #112]	@ 0x70
 801b786:	f361 0300 	bfi	r3, r1, #0, #1
 801b78a:	f882 3070 	strb.w	r3, [r2, #112]	@ 0x70
        
#if SHELL_CLS_WHEN_LOGIN == 1
    shellWriteString(shell, shellText[SHELL_TEXT_CLEAR_CONSOLE]);
 801b78e:	4b0c      	ldr	r3, [pc, #48]	@ (801b7c0 <shellSetUser+0x8c>)
 801b790:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801b792:	4619      	mov	r1, r3
 801b794:	6878      	ldr	r0, [r7, #4]
 801b796:	f7fe fd75 	bl	801a284 <shellWriteString>
#endif
#if SHELL_SHOW_INFO == 1
    if (shell->status.isChecked)
 801b79a:	687b      	ldr	r3, [r7, #4]
 801b79c:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 801b7a0:	f003 0301 	and.w	r3, r3, #1
 801b7a4:	b2db      	uxtb	r3, r3
 801b7a6:	2b00      	cmp	r3, #0
 801b7a8:	d005      	beq.n	801b7b6 <shellSetUser+0x82>
    {
        shellWriteString(shell, shellText[SHELL_TEXT_INFO]);
 801b7aa:	4b05      	ldr	r3, [pc, #20]	@ (801b7c0 <shellSetUser+0x8c>)
 801b7ac:	681b      	ldr	r3, [r3, #0]
 801b7ae:	4619      	mov	r1, r3
 801b7b0:	6878      	ldr	r0, [r7, #4]
 801b7b2:	f7fe fd67 	bl	801a284 <shellWriteString>
    }
#endif
}
 801b7b6:	bf00      	nop
 801b7b8:	3708      	adds	r7, #8
 801b7ba:	46bd      	mov	sp, r7
 801b7bc:	bd80      	pop	{r7, pc}
 801b7be:	bf00      	nop
 801b7c0:	2400002c 	.word	0x2400002c

0801b7c4 <shellWriteReturnValue>:
 * 
 * @param shell shell对象
 * @param value 返回值
 */
static void shellWriteReturnValue(Shell *shell, int value)
{
 801b7c4:	b580      	push	{r7, lr}
 801b7c6:	b086      	sub	sp, #24
 801b7c8:	af00      	add	r7, sp, #0
 801b7ca:	6078      	str	r0, [r7, #4]
 801b7cc:	6039      	str	r1, [r7, #0]
    char buffer[12] = "00000000000";
 801b7ce:	4a23      	ldr	r2, [pc, #140]	@ (801b85c <shellWriteReturnValue+0x98>)
 801b7d0:	f107 0308 	add.w	r3, r7, #8
 801b7d4:	ca07      	ldmia	r2, {r0, r1, r2}
 801b7d6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    shellWriteString(shell, "Return: ");
 801b7da:	4921      	ldr	r1, [pc, #132]	@ (801b860 <shellWriteReturnValue+0x9c>)
 801b7dc:	6878      	ldr	r0, [r7, #4]
 801b7de:	f7fe fd51 	bl	801a284 <shellWriteString>
    shellWriteString(shell, &buffer[11 - shellToDec(value, buffer)]);
 801b7e2:	f107 0308 	add.w	r3, r7, #8
 801b7e6:	4619      	mov	r1, r3
 801b7e8:	6838      	ldr	r0, [r7, #0]
 801b7ea:	f7fe fea3 	bl	801a534 <shellToDec>
 801b7ee:	4603      	mov	r3, r0
 801b7f0:	f1c3 030b 	rsb	r3, r3, #11
 801b7f4:	f107 0208 	add.w	r2, r7, #8
 801b7f8:	4413      	add	r3, r2
 801b7fa:	4619      	mov	r1, r3
 801b7fc:	6878      	ldr	r0, [r7, #4]
 801b7fe:	f7fe fd41 	bl	801a284 <shellWriteString>
    shellWriteString(shell, ", 0x");
 801b802:	4918      	ldr	r1, [pc, #96]	@ (801b864 <shellWriteReturnValue+0xa0>)
 801b804:	6878      	ldr	r0, [r7, #4]
 801b806:	f7fe fd3d 	bl	801a284 <shellWriteString>
    for (short i = 0; i < 11; i++)
 801b80a:	2300      	movs	r3, #0
 801b80c:	82fb      	strh	r3, [r7, #22]
 801b80e:	e00c      	b.n	801b82a <shellWriteReturnValue+0x66>
    {
        buffer[i] = '0';
 801b810:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801b814:	3318      	adds	r3, #24
 801b816:	443b      	add	r3, r7
 801b818:	2230      	movs	r2, #48	@ 0x30
 801b81a:	f803 2c10 	strb.w	r2, [r3, #-16]
    for (short i = 0; i < 11; i++)
 801b81e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801b822:	b29b      	uxth	r3, r3
 801b824:	3301      	adds	r3, #1
 801b826:	b29b      	uxth	r3, r3
 801b828:	82fb      	strh	r3, [r7, #22]
 801b82a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801b82e:	2b0a      	cmp	r3, #10
 801b830:	ddee      	ble.n	801b810 <shellWriteReturnValue+0x4c>
    }
    shellToHex(value, buffer);
 801b832:	683b      	ldr	r3, [r7, #0]
 801b834:	f107 0208 	add.w	r2, r7, #8
 801b838:	4611      	mov	r1, r2
 801b83a:	4618      	mov	r0, r3
 801b83c:	f7fe fe47 	bl	801a4ce <shellToHex>
    shellWriteString(shell, buffer);
 801b840:	f107 0308 	add.w	r3, r7, #8
 801b844:	4619      	mov	r1, r3
 801b846:	6878      	ldr	r0, [r7, #4]
 801b848:	f7fe fd1c 	bl	801a284 <shellWriteString>
    shellWriteString(shell, "\r\n");
 801b84c:	4906      	ldr	r1, [pc, #24]	@ (801b868 <shellWriteReturnValue+0xa4>)
 801b84e:	6878      	ldr	r0, [r7, #4]
 801b850:	f7fe fd18 	bl	801a284 <shellWriteString>
#if SHELL_KEEP_RETURN_VALUE == 1
    shell->info.retVal = value;
#endif
}
 801b854:	bf00      	nop
 801b856:	3718      	adds	r7, #24
 801b858:	46bd      	mov	sp, r7
 801b85a:	bd80      	pop	{r7, pc}
 801b85c:	08021b2c 	.word	0x08021b2c
 801b860:	08021b38 	.word	0x08021b38
 801b864:	08021b24 	.word	0x08021b24
 801b868:	08021b04 	.word	0x08021b04

0801b86c <shellHistoryAdd>:
 * @brief shell历史记录添加
 * 
 * @param shell shell对象
 */
static void shellHistoryAdd(Shell *shell)
{
 801b86c:	b580      	push	{r7, lr}
 801b86e:	b082      	sub	sp, #8
 801b870:	af00      	add	r7, sp, #0
 801b872:	6078      	str	r0, [r7, #4]
    shell->history.offset = 0;
 801b874:	687b      	ldr	r3, [r7, #4]
 801b876:	2200      	movs	r2, #0
 801b878:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    if (shell->history.number > 0
 801b87c:	687b      	ldr	r3, [r7, #4]
 801b87e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801b882:	2b00      	cmp	r3, #0
 801b884:	d017      	beq.n	801b8b6 <shellHistoryAdd+0x4a>
        && strcmp(shell->history.item[(shell->history.record == 0 ? 
 801b886:	687b      	ldr	r3, [r7, #4]
 801b888:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
                SHELL_HISTORY_MAX_NUMBER : shell->history.record) - 1],
 801b88c:	2b00      	cmp	r3, #0
 801b88e:	d004      	beq.n	801b89a <shellHistoryAdd+0x2e>
 801b890:	687b      	ldr	r3, [r7, #4]
 801b892:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801b896:	3b01      	subs	r3, #1
 801b898:	e000      	b.n	801b89c <shellHistoryAdd+0x30>
 801b89a:	2307      	movs	r3, #7
        && strcmp(shell->history.item[(shell->history.record == 0 ? 
 801b89c:	687a      	ldr	r2, [r7, #4]
 801b89e:	3310      	adds	r3, #16
 801b8a0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
                shell->parser.buffer) == 0)
 801b8a4:	687b      	ldr	r3, [r7, #4]
 801b8a6:	695b      	ldr	r3, [r3, #20]
        && strcmp(shell->history.item[(shell->history.record == 0 ? 
 801b8a8:	4619      	mov	r1, r3
 801b8aa:	4610      	mov	r0, r2
 801b8ac:	f7e4 fd30 	bl	8000310 <strcmp>
 801b8b0:	4603      	mov	r3, r0
 801b8b2:	2b00      	cmp	r3, #0
 801b8b4:	d033      	beq.n	801b91e <shellHistoryAdd+0xb2>
    {
        return;
    }
    if (shellStringCopy(shell->history.item[shell->history.record],
 801b8b6:	687b      	ldr	r3, [r7, #4]
 801b8b8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801b8bc:	461a      	mov	r2, r3
 801b8be:	687b      	ldr	r3, [r7, #4]
 801b8c0:	3210      	adds	r2, #16
 801b8c2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801b8c6:	687b      	ldr	r3, [r7, #4]
 801b8c8:	695b      	ldr	r3, [r3, #20]
 801b8ca:	4619      	mov	r1, r3
 801b8cc:	4610      	mov	r0, r2
 801b8ce:	f7fe fe89 	bl	801a5e4 <shellStringCopy>
 801b8d2:	4603      	mov	r3, r0
 801b8d4:	2b00      	cmp	r3, #0
 801b8d6:	d007      	beq.n	801b8e8 <shellHistoryAdd+0x7c>
                        shell->parser.buffer) != 0)
    {
        shell->history.record++;
 801b8d8:	687b      	ldr	r3, [r7, #4]
 801b8da:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801b8de:	3301      	adds	r3, #1
 801b8e0:	b29a      	uxth	r2, r3
 801b8e2:	687b      	ldr	r3, [r7, #4]
 801b8e4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    }
    if (++shell->history.number > SHELL_HISTORY_MAX_NUMBER)
 801b8e8:	687b      	ldr	r3, [r7, #4]
 801b8ea:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801b8ee:	3301      	adds	r3, #1
 801b8f0:	b29a      	uxth	r2, r3
 801b8f2:	687b      	ldr	r3, [r7, #4]
 801b8f4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 801b8f8:	687b      	ldr	r3, [r7, #4]
 801b8fa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801b8fe:	2b08      	cmp	r3, #8
 801b900:	d903      	bls.n	801b90a <shellHistoryAdd+0x9e>
    {
        shell->history.number = SHELL_HISTORY_MAX_NUMBER;
 801b902:	687b      	ldr	r3, [r7, #4]
 801b904:	2208      	movs	r2, #8
 801b906:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    }
    if (shell->history.record >= SHELL_HISTORY_MAX_NUMBER)
 801b90a:	687b      	ldr	r3, [r7, #4]
 801b90c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801b910:	2b07      	cmp	r3, #7
 801b912:	d905      	bls.n	801b920 <shellHistoryAdd+0xb4>
    {
        shell->history.record = 0;
 801b914:	687b      	ldr	r3, [r7, #4]
 801b916:	2200      	movs	r2, #0
 801b918:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 801b91c:	e000      	b.n	801b920 <shellHistoryAdd+0xb4>
        return;
 801b91e:	bf00      	nop
    }
}
 801b920:	3708      	adds	r7, #8
 801b922:	46bd      	mov	sp, r7
 801b924:	bd80      	pop	{r7, pc}

0801b926 <shellHistory>:
 * 
 * @param shell shell对象
 * @param dir 方向 {@code <0}往上查找 {@code >0}往下查找
 */
static void shellHistory(Shell *shell, signed char dir)
{
 801b926:	b580      	push	{r7, lr}
 801b928:	b082      	sub	sp, #8
 801b92a:	af00      	add	r7, sp, #0
 801b92c:	6078      	str	r0, [r7, #4]
 801b92e:	460b      	mov	r3, r1
 801b930:	70fb      	strb	r3, [r7, #3]
    if (dir > 0)
 801b932:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801b936:	2b00      	cmp	r3, #0
 801b938:	dd28      	ble.n	801b98c <shellHistory+0x66>
    {
        if (shell->history.offset-- <= 
 801b93a:	687b      	ldr	r3, [r7, #4]
 801b93c:	f9b3 2064 	ldrsh.w	r2, [r3, #100]	@ 0x64
 801b940:	b293      	uxth	r3, r2
 801b942:	3b01      	subs	r3, #1
 801b944:	b29b      	uxth	r3, r3
 801b946:	b219      	sxth	r1, r3
 801b948:	687b      	ldr	r3, [r7, #4]
 801b94a:	f8a3 1064 	strh.w	r1, [r3, #100]	@ 0x64
 801b94e:	4611      	mov	r1, r2
            -((shell->history.number > shell->history.record) ?
 801b950:	687b      	ldr	r3, [r7, #4]
 801b952:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 801b956:	687b      	ldr	r3, [r7, #4]
 801b958:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
                shell->history.number : shell->history.record))
 801b95c:	4293      	cmp	r3, r2
 801b95e:	bf38      	it	cc
 801b960:	4613      	movcc	r3, r2
 801b962:	b29b      	uxth	r3, r3
            -((shell->history.number > shell->history.record) ?
 801b964:	425b      	negs	r3, r3
        if (shell->history.offset-- <= 
 801b966:	4299      	cmp	r1, r3
 801b968:	dc28      	bgt.n	801b9bc <shellHistory+0x96>
        {
            shell->history.offset = -((shell->history.number > shell->history.record)
 801b96a:	687b      	ldr	r3, [r7, #4]
 801b96c:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 801b970:	687b      	ldr	r3, [r7, #4]
 801b972:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
                                    ? shell->history.number : shell->history.record);
 801b976:	4293      	cmp	r3, r2
 801b978:	bf38      	it	cc
 801b97a:	4613      	movcc	r3, r2
 801b97c:	b29b      	uxth	r3, r3
            shell->history.offset = -((shell->history.number > shell->history.record)
 801b97e:	425b      	negs	r3, r3
 801b980:	b29b      	uxth	r3, r3
 801b982:	b21a      	sxth	r2, r3
 801b984:	687b      	ldr	r3, [r7, #4]
 801b986:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
 801b98a:	e017      	b.n	801b9bc <shellHistory+0x96>
        }
    }
    else if (dir < 0)
 801b98c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801b990:	2b00      	cmp	r3, #0
 801b992:	da4e      	bge.n	801ba32 <shellHistory+0x10c>
    {
        if (++shell->history.offset > 0)
 801b994:	687b      	ldr	r3, [r7, #4]
 801b996:	f9b3 3064 	ldrsh.w	r3, [r3, #100]	@ 0x64
 801b99a:	b29b      	uxth	r3, r3
 801b99c:	3301      	adds	r3, #1
 801b99e:	b29b      	uxth	r3, r3
 801b9a0:	b21a      	sxth	r2, r3
 801b9a2:	687b      	ldr	r3, [r7, #4]
 801b9a4:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
 801b9a8:	687b      	ldr	r3, [r7, #4]
 801b9aa:	f9b3 3064 	ldrsh.w	r3, [r3, #100]	@ 0x64
 801b9ae:	2b00      	cmp	r3, #0
 801b9b0:	dd04      	ble.n	801b9bc <shellHistory+0x96>
        {
            shell->history.offset = 0;
 801b9b2:	687b      	ldr	r3, [r7, #4]
 801b9b4:	2200      	movs	r2, #0
 801b9b6:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
            return;
 801b9ba:	e03d      	b.n	801ba38 <shellHistory+0x112>
    }
    else
    {
        return;
    }
    shellClearCommandLine(shell);
 801b9bc:	6878      	ldr	r0, [r7, #4]
 801b9be:	f7ff f90b 	bl	801abd8 <shellClearCommandLine>
    if (shell->history.offset == 0)
 801b9c2:	687b      	ldr	r3, [r7, #4]
 801b9c4:	f9b3 3064 	ldrsh.w	r3, [r3, #100]	@ 0x64
 801b9c8:	2b00      	cmp	r3, #0
 801b9ca:	d107      	bne.n	801b9dc <shellHistory+0xb6>
    {
        shell->parser.cursor = shell->parser.length = 0;
 801b9cc:	687b      	ldr	r3, [r7, #4]
 801b9ce:	2200      	movs	r2, #0
 801b9d0:	821a      	strh	r2, [r3, #16]
 801b9d2:	687b      	ldr	r3, [r7, #4]
 801b9d4:	8a1a      	ldrh	r2, [r3, #16]
 801b9d6:	687b      	ldr	r3, [r7, #4]
 801b9d8:	825a      	strh	r2, [r3, #18]
 801b9da:	e02d      	b.n	801ba38 <shellHistory+0x112>
    }
    else
    {
        if ((shell->parser.length = shellStringCopy(shell->parser.buffer,
 801b9dc:	687b      	ldr	r3, [r7, #4]
 801b9de:	6958      	ldr	r0, [r3, #20]
                shell->history.item[(shell->history.record + SHELL_HISTORY_MAX_NUMBER
 801b9e0:	687b      	ldr	r3, [r7, #4]
 801b9e2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801b9e6:	3308      	adds	r3, #8
                    + shell->history.offset) % SHELL_HISTORY_MAX_NUMBER])) == 0)
 801b9e8:	687a      	ldr	r2, [r7, #4]
 801b9ea:	f9b2 2064 	ldrsh.w	r2, [r2, #100]	@ 0x64
 801b9ee:	4413      	add	r3, r2
 801b9f0:	425a      	negs	r2, r3
 801b9f2:	f003 0307 	and.w	r3, r3, #7
 801b9f6:	f002 0207 	and.w	r2, r2, #7
 801b9fa:	bf58      	it	pl
 801b9fc:	4253      	negpl	r3, r2
        if ((shell->parser.length = shellStringCopy(shell->parser.buffer,
 801b9fe:	687a      	ldr	r2, [r7, #4]
 801ba00:	3310      	adds	r3, #16
 801ba02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801ba06:	4619      	mov	r1, r3
 801ba08:	f7fe fdec 	bl	801a5e4 <shellStringCopy>
 801ba0c:	4603      	mov	r3, r0
 801ba0e:	461a      	mov	r2, r3
 801ba10:	687b      	ldr	r3, [r7, #4]
 801ba12:	821a      	strh	r2, [r3, #16]
 801ba14:	687b      	ldr	r3, [r7, #4]
 801ba16:	8a1b      	ldrh	r3, [r3, #16]
 801ba18:	2b00      	cmp	r3, #0
 801ba1a:	d00c      	beq.n	801ba36 <shellHistory+0x110>
        {
            return;
        }
        shell->parser.cursor = shell->parser.length;
 801ba1c:	687b      	ldr	r3, [r7, #4]
 801ba1e:	8a1a      	ldrh	r2, [r3, #16]
 801ba20:	687b      	ldr	r3, [r7, #4]
 801ba22:	825a      	strh	r2, [r3, #18]
        shellWriteString(shell, shell->parser.buffer);
 801ba24:	687b      	ldr	r3, [r7, #4]
 801ba26:	695b      	ldr	r3, [r3, #20]
 801ba28:	4619      	mov	r1, r3
 801ba2a:	6878      	ldr	r0, [r7, #4]
 801ba2c:	f7fe fc2a 	bl	801a284 <shellWriteString>
 801ba30:	e002      	b.n	801ba38 <shellHistory+0x112>
        return;
 801ba32:	bf00      	nop
 801ba34:	e000      	b.n	801ba38 <shellHistory+0x112>
            return;
 801ba36:	bf00      	nop
    }
    
}
 801ba38:	3708      	adds	r7, #8
 801ba3a:	46bd      	mov	sp, r7
 801ba3c:	bd80      	pop	{r7, pc}

0801ba3e <shellNormalInput>:
 * 
 * @param shell shell 对象
 * @param data 输入字符
 */
void shellNormalInput(Shell *shell, char data)
{
 801ba3e:	b580      	push	{r7, lr}
 801ba40:	b082      	sub	sp, #8
 801ba42:	af00      	add	r7, sp, #0
 801ba44:	6078      	str	r0, [r7, #4]
 801ba46:	460b      	mov	r3, r1
 801ba48:	70fb      	strb	r3, [r7, #3]
    shell->status.tabFlag = 0;
 801ba4a:	687a      	ldr	r2, [r7, #4]
 801ba4c:	f892 3070 	ldrb.w	r3, [r2, #112]	@ 0x70
 801ba50:	f023 0304 	bic.w	r3, r3, #4
 801ba54:	f882 3070 	strb.w	r3, [r2, #112]	@ 0x70
    shellInsertByte(shell, data);
 801ba58:	78fb      	ldrb	r3, [r7, #3]
 801ba5a:	4619      	mov	r1, r3
 801ba5c:	6878      	ldr	r0, [r7, #4]
 801ba5e:	f7ff f8e1 	bl	801ac24 <shellInsertByte>
}
 801ba62:	bf00      	nop
 801ba64:	3708      	adds	r7, #8
 801ba66:	46bd      	mov	sp, r7
 801ba68:	bd80      	pop	{r7, pc}
	...

0801ba6c <shellExec>:
 * @brief shell运行命令
 * 
 * @param shell shell对象
 */
void shellExec(Shell *shell)
{
 801ba6c:	b580      	push	{r7, lr}
 801ba6e:	b084      	sub	sp, #16
 801ba70:	af00      	add	r7, sp, #0
 801ba72:	6078      	str	r0, [r7, #4]
    
    if (shell->parser.length == 0)
 801ba74:	687b      	ldr	r3, [r7, #4]
 801ba76:	8a1b      	ldrh	r3, [r3, #16]
 801ba78:	2b00      	cmp	r3, #0
 801ba7a:	d03f      	beq.n	801bafc <shellExec+0x90>
    {
        return;
    }

    shell->parser.buffer[shell->parser.length] = 0;
 801ba7c:	687b      	ldr	r3, [r7, #4]
 801ba7e:	695b      	ldr	r3, [r3, #20]
 801ba80:	687a      	ldr	r2, [r7, #4]
 801ba82:	8a12      	ldrh	r2, [r2, #16]
 801ba84:	4413      	add	r3, r2
 801ba86:	2200      	movs	r2, #0
 801ba88:	701a      	strb	r2, [r3, #0]

    if (shell->status.isChecked)
 801ba8a:	687b      	ldr	r3, [r7, #4]
 801ba8c:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 801ba90:	f003 0301 	and.w	r3, r3, #1
 801ba94:	b2db      	uxtb	r3, r3
 801ba96:	2b00      	cmp	r3, #0
 801ba98:	d02c      	beq.n	801baf4 <shellExec+0x88>
    {
    #if SHELL_HISTORY_MAX_NUMBER > 0
        shellHistoryAdd(shell);
 801ba9a:	6878      	ldr	r0, [r7, #4]
 801ba9c:	f7ff fee6 	bl	801b86c <shellHistoryAdd>
    #endif /** SHELL_HISTORY_MAX_NUMBER > 0 */
        shellParserParam(shell);
 801baa0:	6878      	ldr	r0, [r7, #4]
 801baa2:	f7ff fb43 	bl	801b12c <shellParserParam>
        shell->parser.length = shell->parser.cursor = 0;
 801baa6:	687b      	ldr	r3, [r7, #4]
 801baa8:	2200      	movs	r2, #0
 801baaa:	825a      	strh	r2, [r3, #18]
 801baac:	687b      	ldr	r3, [r7, #4]
 801baae:	8a5a      	ldrh	r2, [r3, #18]
 801bab0:	687b      	ldr	r3, [r7, #4]
 801bab2:	821a      	strh	r2, [r3, #16]
        if (shell->parser.paramCount == 0)
 801bab4:	687b      	ldr	r3, [r7, #4]
 801bab6:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 801bab8:	2b00      	cmp	r3, #0
 801baba:	d021      	beq.n	801bb00 <shellExec+0x94>
        {
            return;
        }
        shellWriteString(shell, "\r\n");
 801babc:	4912      	ldr	r1, [pc, #72]	@ (801bb08 <shellExec+0x9c>)
 801babe:	6878      	ldr	r0, [r7, #4]
 801bac0:	f7fe fbe0 	bl	801a284 <shellWriteString>

        ShellCommand *command = shellSeekCommand(shell,
                                                 shell->parser.param[0],
 801bac4:	687b      	ldr	r3, [r7, #4]
 801bac6:	6999      	ldr	r1, [r3, #24]
                                                 shell->commandList.base,
 801bac8:	687b      	ldr	r3, [r7, #4]
 801baca:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
        ShellCommand *command = shellSeekCommand(shell,
 801bacc:	2300      	movs	r3, #0
 801bace:	6878      	ldr	r0, [r7, #4]
 801bad0:	f7ff fb92 	bl	801b1f8 <shellSeekCommand>
 801bad4:	60f8      	str	r0, [r7, #12]
                                                 0);
        if (command != NULL)
 801bad6:	68fb      	ldr	r3, [r7, #12]
 801bad8:	2b00      	cmp	r3, #0
 801bada:	d004      	beq.n	801bae6 <shellExec+0x7a>
        {
            shellRunCommand(shell, command);
 801badc:	68f9      	ldr	r1, [r7, #12]
 801bade:	6878      	ldr	r0, [r7, #4]
 801bae0:	f7ff fd80 	bl	801b5e4 <shellRunCommand>
 801bae4:	e00d      	b.n	801bb02 <shellExec+0x96>
        }
        else
        {
            shellWriteString(shell, shellText[SHELL_TEXT_CMD_NOT_FOUND]);
 801bae6:	4b09      	ldr	r3, [pc, #36]	@ (801bb0c <shellExec+0xa0>)
 801bae8:	699b      	ldr	r3, [r3, #24]
 801baea:	4619      	mov	r1, r3
 801baec:	6878      	ldr	r0, [r7, #4]
 801baee:	f7fe fbc9 	bl	801a284 <shellWriteString>
 801baf2:	e006      	b.n	801bb02 <shellExec+0x96>
        }
    }
    else
    {
        shellCheckPassword(shell);
 801baf4:	6878      	ldr	r0, [r7, #4]
 801baf6:	f7ff fded 	bl	801b6d4 <shellCheckPassword>
 801bafa:	e002      	b.n	801bb02 <shellExec+0x96>
        return;
 801bafc:	bf00      	nop
 801bafe:	e000      	b.n	801bb02 <shellExec+0x96>
            return;
 801bb00:	bf00      	nop
    }
}
 801bb02:	3710      	adds	r7, #16
 801bb04:	46bd      	mov	sp, r7
 801bb06:	bd80      	pop	{r7, pc}
 801bb08:	08021b04 	.word	0x08021b04
 801bb0c:	2400002c 	.word	0x2400002c

0801bb10 <shellUp>:
 * @brief shell上方向键输入
 * 
 * @param shell shell对象
 */
void shellUp(Shell *shell)
{
 801bb10:	b580      	push	{r7, lr}
 801bb12:	b082      	sub	sp, #8
 801bb14:	af00      	add	r7, sp, #0
 801bb16:	6078      	str	r0, [r7, #4]
    shellHistory(shell, 1);
 801bb18:	2101      	movs	r1, #1
 801bb1a:	6878      	ldr	r0, [r7, #4]
 801bb1c:	f7ff ff03 	bl	801b926 <shellHistory>
}
 801bb20:	bf00      	nop
 801bb22:	3708      	adds	r7, #8
 801bb24:	46bd      	mov	sp, r7
 801bb26:	bd80      	pop	{r7, pc}

0801bb28 <shellDown>:
 * @brief shell下方向键输入
 * 
 * @param shell shell对象
 */
void shellDown(Shell *shell)
{
 801bb28:	b580      	push	{r7, lr}
 801bb2a:	b082      	sub	sp, #8
 801bb2c:	af00      	add	r7, sp, #0
 801bb2e:	6078      	str	r0, [r7, #4]
    shellHistory(shell, -1);
 801bb30:	f04f 31ff 	mov.w	r1, #4294967295
 801bb34:	6878      	ldr	r0, [r7, #4]
 801bb36:	f7ff fef6 	bl	801b926 <shellHistory>
}
 801bb3a:	bf00      	nop
 801bb3c:	3708      	adds	r7, #8
 801bb3e:	46bd      	mov	sp, r7
 801bb40:	bd80      	pop	{r7, pc}

0801bb42 <shellRight>:
 * @brief shell右方向键输入
 * 
 * @param shell shell对象
 */
void shellRight(Shell *shell)
{
 801bb42:	b580      	push	{r7, lr}
 801bb44:	b082      	sub	sp, #8
 801bb46:	af00      	add	r7, sp, #0
 801bb48:	6078      	str	r0, [r7, #4]
    if (shell->parser.cursor < shell->parser.length)
 801bb4a:	687b      	ldr	r3, [r7, #4]
 801bb4c:	8a5a      	ldrh	r2, [r3, #18]
 801bb4e:	687b      	ldr	r3, [r7, #4]
 801bb50:	8a1b      	ldrh	r3, [r3, #16]
 801bb52:	429a      	cmp	r2, r3
 801bb54:	d20d      	bcs.n	801bb72 <shellRight+0x30>
    {
        shellWriteByte(shell, shell->parser.buffer[shell->parser.cursor++]);
 801bb56:	687b      	ldr	r3, [r7, #4]
 801bb58:	695a      	ldr	r2, [r3, #20]
 801bb5a:	687b      	ldr	r3, [r7, #4]
 801bb5c:	8a5b      	ldrh	r3, [r3, #18]
 801bb5e:	1c59      	adds	r1, r3, #1
 801bb60:	b288      	uxth	r0, r1
 801bb62:	6879      	ldr	r1, [r7, #4]
 801bb64:	8248      	strh	r0, [r1, #18]
 801bb66:	4413      	add	r3, r2
 801bb68:	781b      	ldrb	r3, [r3, #0]
 801bb6a:	4619      	mov	r1, r3
 801bb6c:	6878      	ldr	r0, [r7, #4]
 801bb6e:	f7fe fb79 	bl	801a264 <shellWriteByte>
    }
}
 801bb72:	bf00      	nop
 801bb74:	3708      	adds	r7, #8
 801bb76:	46bd      	mov	sp, r7
 801bb78:	bd80      	pop	{r7, pc}

0801bb7a <shellLeft>:
 * @brief shell左方向键输入
 * 
 * @param shell shell对象
 */
void shellLeft(Shell *shell)
{
 801bb7a:	b580      	push	{r7, lr}
 801bb7c:	b082      	sub	sp, #8
 801bb7e:	af00      	add	r7, sp, #0
 801bb80:	6078      	str	r0, [r7, #4]
    if (shell->parser.cursor > 0)
 801bb82:	687b      	ldr	r3, [r7, #4]
 801bb84:	8a5b      	ldrh	r3, [r3, #18]
 801bb86:	2b00      	cmp	r3, #0
 801bb88:	d009      	beq.n	801bb9e <shellLeft+0x24>
    {
        shellWriteByte(shell, '\b');
 801bb8a:	2108      	movs	r1, #8
 801bb8c:	6878      	ldr	r0, [r7, #4]
 801bb8e:	f7fe fb69 	bl	801a264 <shellWriteByte>
        shell->parser.cursor--;
 801bb92:	687b      	ldr	r3, [r7, #4]
 801bb94:	8a5b      	ldrh	r3, [r3, #18]
 801bb96:	3b01      	subs	r3, #1
 801bb98:	b29a      	uxth	r2, r3
 801bb9a:	687b      	ldr	r3, [r7, #4]
 801bb9c:	825a      	strh	r2, [r3, #18]
    }
}
 801bb9e:	bf00      	nop
 801bba0:	3708      	adds	r7, #8
 801bba2:	46bd      	mov	sp, r7
 801bba4:	bd80      	pop	{r7, pc}
	...

0801bba8 <shellTab>:
 * @brief shell Tab按键处理
 * 
 * @param shell shell对象
 */
void shellTab(Shell *shell)
{
 801bba8:	b590      	push	{r4, r7, lr}
 801bbaa:	b087      	sub	sp, #28
 801bbac:	af00      	add	r7, sp, #0
 801bbae:	6078      	str	r0, [r7, #4]
    unsigned short maxMatch = shell->parser.bufferSize;
 801bbb0:	687b      	ldr	r3, [r7, #4]
 801bbb2:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 801bbb4:	82fb      	strh	r3, [r7, #22]
    unsigned short lastMatchIndex = 0;
 801bbb6:	2300      	movs	r3, #0
 801bbb8:	82bb      	strh	r3, [r7, #20]
    unsigned short matchNum = 0;
 801bbba:	2300      	movs	r3, #0
 801bbbc:	827b      	strh	r3, [r7, #18]
    unsigned short length;

    if (shell->parser.length == 0)
 801bbbe:	687b      	ldr	r3, [r7, #4]
 801bbc0:	8a1b      	ldrh	r3, [r3, #16]
 801bbc2:	2b00      	cmp	r3, #0
 801bbc4:	d107      	bne.n	801bbd6 <shellTab+0x2e>
    {
        shellListAll(shell);
 801bbc6:	6878      	ldr	r0, [r7, #4]
 801bbc8:	f7fe ffe2 	bl	801ab90 <shellListAll>
        shellWritePrompt(shell, 1);
 801bbcc:	2101      	movs	r1, #1
 801bbce:	6878      	ldr	r0, [r7, #4]
 801bbd0:	f7fe fbbe 	bl	801a350 <shellWritePrompt>
 801bbd4:	e0d0      	b.n	801bd78 <shellTab+0x1d0>
    }
    else if (shell->parser.length > 0)
 801bbd6:	687b      	ldr	r3, [r7, #4]
 801bbd8:	8a1b      	ldrh	r3, [r3, #16]
 801bbda:	2b00      	cmp	r3, #0
 801bbdc:	f000 80cc 	beq.w	801bd78 <shellTab+0x1d0>
    {
        shell->parser.buffer[shell->parser.length] = 0;
 801bbe0:	687b      	ldr	r3, [r7, #4]
 801bbe2:	695b      	ldr	r3, [r3, #20]
 801bbe4:	687a      	ldr	r2, [r7, #4]
 801bbe6:	8a12      	ldrh	r2, [r2, #16]
 801bbe8:	4413      	add	r3, r2
 801bbea:	2200      	movs	r2, #0
 801bbec:	701a      	strb	r2, [r3, #0]
        ShellCommand *base = (ShellCommand *)shell->commandList.base;
 801bbee:	687b      	ldr	r3, [r7, #4]
 801bbf0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801bbf2:	60fb      	str	r3, [r7, #12]
        for (short i = 0; i < shell->commandList.count; i++)
 801bbf4:	2300      	movs	r3, #0
 801bbf6:	823b      	strh	r3, [r7, #16]
 801bbf8:	e06e      	b.n	801bcd8 <shellTab+0x130>
        {
            if (shellCheckPermission(shell, &base[i]) == 0
 801bbfa:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 801bbfe:	4613      	mov	r3, r2
 801bc00:	009b      	lsls	r3, r3, #2
 801bc02:	4413      	add	r3, r2
 801bc04:	009b      	lsls	r3, r3, #2
 801bc06:	461a      	mov	r2, r3
 801bc08:	68fb      	ldr	r3, [r7, #12]
 801bc0a:	4413      	add	r3, r2
 801bc0c:	4619      	mov	r1, r3
 801bc0e:	6878      	ldr	r0, [r7, #4]
 801bc10:	f7fe fc27 	bl	801a462 <shellCheckPermission>
 801bc14:	4603      	mov	r3, r0
 801bc16:	2b00      	cmp	r3, #0
 801bc18:	d158      	bne.n	801bccc <shellTab+0x124>
                && shellStringCompare(shell->parser.buffer,
 801bc1a:	687b      	ldr	r3, [r7, #4]
 801bc1c:	695c      	ldr	r4, [r3, #20]
                                   (char *)shellGetCommandName(&base[i]))
 801bc1e:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 801bc22:	4613      	mov	r3, r2
 801bc24:	009b      	lsls	r3, r3, #2
 801bc26:	4413      	add	r3, r2
 801bc28:	009b      	lsls	r3, r3, #2
 801bc2a:	461a      	mov	r2, r3
 801bc2c:	68fb      	ldr	r3, [r7, #12]
 801bc2e:	4413      	add	r3, r2
 801bc30:	4618      	mov	r0, r3
 801bc32:	f7fe fd2b 	bl	801a68c <shellGetCommandName>
 801bc36:	4603      	mov	r3, r0
                && shellStringCompare(shell->parser.buffer,
 801bc38:	4619      	mov	r1, r3
 801bc3a:	4620      	mov	r0, r4
 801bc3c:	f7fe fcf7 	bl	801a62e <shellStringCompare>
 801bc40:	4603      	mov	r3, r0
 801bc42:	461a      	mov	r2, r3
                        == shell->parser.length)
 801bc44:	687b      	ldr	r3, [r7, #4]
 801bc46:	8a1b      	ldrh	r3, [r3, #16]
                && shellStringCompare(shell->parser.buffer,
 801bc48:	429a      	cmp	r2, r3
 801bc4a:	d13f      	bne.n	801bccc <shellTab+0x124>
            {
                if (matchNum != 0)
 801bc4c:	8a7b      	ldrh	r3, [r7, #18]
 801bc4e:	2b00      	cmp	r3, #0
 801bc50:	d037      	beq.n	801bcc2 <shellTab+0x11a>
                {
                    if (matchNum == 1)
 801bc52:	8a7b      	ldrh	r3, [r7, #18]
 801bc54:	2b01      	cmp	r3, #1
 801bc56:	d103      	bne.n	801bc60 <shellTab+0xb8>
                    {
                        shellWriteString(shell, "\r\n");
 801bc58:	4964      	ldr	r1, [pc, #400]	@ (801bdec <shellTab+0x244>)
 801bc5a:	6878      	ldr	r0, [r7, #4]
 801bc5c:	f7fe fb12 	bl	801a284 <shellWriteString>
                    }
                    shellListItem(shell, &base[lastMatchIndex]);
 801bc60:	8aba      	ldrh	r2, [r7, #20]
 801bc62:	4613      	mov	r3, r2
 801bc64:	009b      	lsls	r3, r3, #2
 801bc66:	4413      	add	r3, r2
 801bc68:	009b      	lsls	r3, r3, #2
 801bc6a:	461a      	mov	r2, r3
 801bc6c:	68fb      	ldr	r3, [r7, #12]
 801bc6e:	4413      	add	r3, r2
 801bc70:	4619      	mov	r1, r3
 801bc72:	6878      	ldr	r0, [r7, #4]
 801bc74:	f7fe fd7a 	bl	801a76c <shellListItem>
                    length = 
                        shellStringCompare((char *)shellGetCommandName(&base[lastMatchIndex]),
 801bc78:	8aba      	ldrh	r2, [r7, #20]
 801bc7a:	4613      	mov	r3, r2
 801bc7c:	009b      	lsls	r3, r3, #2
 801bc7e:	4413      	add	r3, r2
 801bc80:	009b      	lsls	r3, r3, #2
 801bc82:	461a      	mov	r2, r3
 801bc84:	68fb      	ldr	r3, [r7, #12]
 801bc86:	4413      	add	r3, r2
 801bc88:	4618      	mov	r0, r3
 801bc8a:	f7fe fcff 	bl	801a68c <shellGetCommandName>
 801bc8e:	4604      	mov	r4, r0
                                           (char *)shellGetCommandName(&base[i]));
 801bc90:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 801bc94:	4613      	mov	r3, r2
 801bc96:	009b      	lsls	r3, r3, #2
 801bc98:	4413      	add	r3, r2
 801bc9a:	009b      	lsls	r3, r3, #2
 801bc9c:	461a      	mov	r2, r3
 801bc9e:	68fb      	ldr	r3, [r7, #12]
 801bca0:	4413      	add	r3, r2
 801bca2:	4618      	mov	r0, r3
 801bca4:	f7fe fcf2 	bl	801a68c <shellGetCommandName>
 801bca8:	4603      	mov	r3, r0
                        shellStringCompare((char *)shellGetCommandName(&base[lastMatchIndex]),
 801bcaa:	4619      	mov	r1, r3
 801bcac:	4620      	mov	r0, r4
 801bcae:	f7fe fcbe 	bl	801a62e <shellStringCompare>
 801bcb2:	4603      	mov	r3, r0
 801bcb4:	817b      	strh	r3, [r7, #10]
                    maxMatch = (maxMatch > length) ? length : maxMatch;
 801bcb6:	8afa      	ldrh	r2, [r7, #22]
 801bcb8:	897b      	ldrh	r3, [r7, #10]
 801bcba:	4293      	cmp	r3, r2
 801bcbc:	bf28      	it	cs
 801bcbe:	4613      	movcs	r3, r2
 801bcc0:	82fb      	strh	r3, [r7, #22]
                }
                lastMatchIndex = i;
 801bcc2:	8a3b      	ldrh	r3, [r7, #16]
 801bcc4:	82bb      	strh	r3, [r7, #20]
                matchNum++;
 801bcc6:	8a7b      	ldrh	r3, [r7, #18]
 801bcc8:	3301      	adds	r3, #1
 801bcca:	827b      	strh	r3, [r7, #18]
        for (short i = 0; i < shell->commandList.count; i++)
 801bccc:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 801bcd0:	b29b      	uxth	r3, r3
 801bcd2:	3301      	adds	r3, #1
 801bcd4:	b29b      	uxth	r3, r3
 801bcd6:	823b      	strh	r3, [r7, #16]
 801bcd8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 801bcdc:	687a      	ldr	r2, [r7, #4]
 801bcde:	f8b2 206c 	ldrh.w	r2, [r2, #108]	@ 0x6c
 801bce2:	4293      	cmp	r3, r2
 801bce4:	db89      	blt.n	801bbfa <shellTab+0x52>
            }
        }
        if (matchNum == 0)
 801bce6:	8a7b      	ldrh	r3, [r7, #18]
 801bce8:	2b00      	cmp	r3, #0
 801bcea:	d07a      	beq.n	801bde2 <shellTab+0x23a>
        {
            return;
        }
        if (matchNum == 1)
 801bcec:	8a7b      	ldrh	r3, [r7, #18]
 801bcee:	2b01      	cmp	r3, #1
 801bcf0:	d102      	bne.n	801bcf8 <shellTab+0x150>
        {
            shellClearCommandLine(shell);
 801bcf2:	6878      	ldr	r0, [r7, #4]
 801bcf4:	f7fe ff70 	bl	801abd8 <shellClearCommandLine>
        }
        if (matchNum != 0)
 801bcf8:	8a7b      	ldrh	r3, [r7, #18]
 801bcfa:	2b00      	cmp	r3, #0
 801bcfc:	d015      	beq.n	801bd2a <shellTab+0x182>
        {
            shell->parser.length = 
                shellStringCopy(shell->parser.buffer,
 801bcfe:	687b      	ldr	r3, [r7, #4]
 801bd00:	695c      	ldr	r4, [r3, #20]
                                (char *)shellGetCommandName(&base[lastMatchIndex]));
 801bd02:	8aba      	ldrh	r2, [r7, #20]
 801bd04:	4613      	mov	r3, r2
 801bd06:	009b      	lsls	r3, r3, #2
 801bd08:	4413      	add	r3, r2
 801bd0a:	009b      	lsls	r3, r3, #2
 801bd0c:	461a      	mov	r2, r3
 801bd0e:	68fb      	ldr	r3, [r7, #12]
 801bd10:	4413      	add	r3, r2
 801bd12:	4618      	mov	r0, r3
 801bd14:	f7fe fcba 	bl	801a68c <shellGetCommandName>
 801bd18:	4603      	mov	r3, r0
                shellStringCopy(shell->parser.buffer,
 801bd1a:	4619      	mov	r1, r3
 801bd1c:	4620      	mov	r0, r4
 801bd1e:	f7fe fc61 	bl	801a5e4 <shellStringCopy>
 801bd22:	4603      	mov	r3, r0
 801bd24:	461a      	mov	r2, r3
            shell->parser.length = 
 801bd26:	687b      	ldr	r3, [r7, #4]
 801bd28:	821a      	strh	r2, [r3, #16]
        }
        if (matchNum > 1)
 801bd2a:	8a7b      	ldrh	r3, [r7, #18]
 801bd2c:	2b01      	cmp	r3, #1
 801bd2e:	d912      	bls.n	801bd56 <shellTab+0x1ae>
        {
            shellListItem(shell, &base[lastMatchIndex]);
 801bd30:	8aba      	ldrh	r2, [r7, #20]
 801bd32:	4613      	mov	r3, r2
 801bd34:	009b      	lsls	r3, r3, #2
 801bd36:	4413      	add	r3, r2
 801bd38:	009b      	lsls	r3, r3, #2
 801bd3a:	461a      	mov	r2, r3
 801bd3c:	68fb      	ldr	r3, [r7, #12]
 801bd3e:	4413      	add	r3, r2
 801bd40:	4619      	mov	r1, r3
 801bd42:	6878      	ldr	r0, [r7, #4]
 801bd44:	f7fe fd12 	bl	801a76c <shellListItem>
            shellWritePrompt(shell, 1);
 801bd48:	2101      	movs	r1, #1
 801bd4a:	6878      	ldr	r0, [r7, #4]
 801bd4c:	f7fe fb00 	bl	801a350 <shellWritePrompt>
            shell->parser.length = maxMatch;
 801bd50:	687b      	ldr	r3, [r7, #4]
 801bd52:	8afa      	ldrh	r2, [r7, #22]
 801bd54:	821a      	strh	r2, [r3, #16]
        }
        shell->parser.buffer[shell->parser.length] = 0;
 801bd56:	687b      	ldr	r3, [r7, #4]
 801bd58:	695b      	ldr	r3, [r3, #20]
 801bd5a:	687a      	ldr	r2, [r7, #4]
 801bd5c:	8a12      	ldrh	r2, [r2, #16]
 801bd5e:	4413      	add	r3, r2
 801bd60:	2200      	movs	r2, #0
 801bd62:	701a      	strb	r2, [r3, #0]
        shell->parser.cursor = shell->parser.length;
 801bd64:	687b      	ldr	r3, [r7, #4]
 801bd66:	8a1a      	ldrh	r2, [r3, #16]
 801bd68:	687b      	ldr	r3, [r7, #4]
 801bd6a:	825a      	strh	r2, [r3, #18]
        shellWriteString(shell, shell->parser.buffer);
 801bd6c:	687b      	ldr	r3, [r7, #4]
 801bd6e:	695b      	ldr	r3, [r3, #20]
 801bd70:	4619      	mov	r1, r3
 801bd72:	6878      	ldr	r0, [r7, #4]
 801bd74:	f7fe fa86 	bl	801a284 <shellWriteString>
    }

    if (SHELL_GET_TICK())
 801bd78:	f7e7 fcc0 	bl	80036fc <HAL_GetTick>
 801bd7c:	4603      	mov	r3, r0
 801bd7e:	2b00      	cmp	r3, #0
 801bd80:	d030      	beq.n	801bde4 <shellTab+0x23c>
    {
        if (matchNum == 1
 801bd82:	8a7b      	ldrh	r3, [r7, #18]
 801bd84:	2b01      	cmp	r3, #1
 801bd86:	d124      	bne.n	801bdd2 <shellTab+0x22a>
            && shell->status.tabFlag
 801bd88:	687b      	ldr	r3, [r7, #4]
 801bd8a:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 801bd8e:	f003 0304 	and.w	r3, r3, #4
 801bd92:	b2db      	uxtb	r3, r3
 801bd94:	2b00      	cmp	r3, #0
 801bd96:	d01c      	beq.n	801bdd2 <shellTab+0x22a>
            && SHELL_GET_TICK() - shell->info.activeTime < SHELL_DOUBLE_CLICK_TIME)
 801bd98:	f7e7 fcb0 	bl	80036fc <HAL_GetTick>
 801bd9c:	4602      	mov	r2, r0
 801bd9e:	687b      	ldr	r3, [r7, #4]
 801bda0:	685b      	ldr	r3, [r3, #4]
 801bda2:	1ad3      	subs	r3, r2, r3
 801bda4:	2bc7      	cmp	r3, #199	@ 0xc7
 801bda6:	d814      	bhi.n	801bdd2 <shellTab+0x22a>
        {
        #if SHELL_QUICK_HELP == 1
            shellWriteString(shell, "\r\n");
 801bda8:	4910      	ldr	r1, [pc, #64]	@ (801bdec <shellTab+0x244>)
 801bdaa:	6878      	ldr	r0, [r7, #4]
 801bdac:	f7fe fa6a 	bl	801a284 <shellWriteString>
            shellWriteCommandHelp(shell, shell->parser.buffer);
 801bdb0:	687b      	ldr	r3, [r7, #4]
 801bdb2:	695b      	ldr	r3, [r3, #20]
 801bdb4:	4619      	mov	r1, r3
 801bdb6:	6878      	ldr	r0, [r7, #4]
 801bdb8:	f000 f842 	bl	801be40 <shellWriteCommandHelp>
            shellWritePrompt(shell, 1);
 801bdbc:	2101      	movs	r1, #1
 801bdbe:	6878      	ldr	r0, [r7, #4]
 801bdc0:	f7fe fac6 	bl	801a350 <shellWritePrompt>
            shellWriteString(shell, shell->parser.buffer);
 801bdc4:	687b      	ldr	r3, [r7, #4]
 801bdc6:	695b      	ldr	r3, [r3, #20]
 801bdc8:	4619      	mov	r1, r3
 801bdca:	6878      	ldr	r0, [r7, #4]
 801bdcc:	f7fe fa5a 	bl	801a284 <shellWriteString>
 801bdd0:	e008      	b.n	801bde4 <shellTab+0x23c>
            shellWriteString(shell, shell->parser.buffer);
        #endif
        }
        else
        {
            shell->status.tabFlag = 1;
 801bdd2:	687a      	ldr	r2, [r7, #4]
 801bdd4:	f892 3070 	ldrb.w	r3, [r2, #112]	@ 0x70
 801bdd8:	f043 0304 	orr.w	r3, r3, #4
 801bddc:	f882 3070 	strb.w	r3, [r2, #112]	@ 0x70
 801bde0:	e000      	b.n	801bde4 <shellTab+0x23c>
            return;
 801bde2:	bf00      	nop
        }
    }
}
 801bde4:	371c      	adds	r7, #28
 801bde6:	46bd      	mov	sp, r7
 801bde8:	bd90      	pop	{r4, r7, pc}
 801bdea:	bf00      	nop
 801bdec:	08021b04 	.word	0x08021b04

0801bdf0 <shellBackspace>:
 * @brief shell 退格
 * 
 * @param shell shell对象
 */
void shellBackspace(Shell *shell)
{
 801bdf0:	b580      	push	{r7, lr}
 801bdf2:	b082      	sub	sp, #8
 801bdf4:	af00      	add	r7, sp, #0
 801bdf6:	6078      	str	r0, [r7, #4]
    shellDeleteByte(shell, 1);
 801bdf8:	2101      	movs	r1, #1
 801bdfa:	6878      	ldr	r0, [r7, #4]
 801bdfc:	f7fe ffe6 	bl	801adcc <shellDeleteByte>
}
 801be00:	bf00      	nop
 801be02:	3708      	adds	r7, #8
 801be04:	46bd      	mov	sp, r7
 801be06:	bd80      	pop	{r7, pc}

0801be08 <shellDelete>:
 * @brief shell 删除
 * 
 * @param shell shell对象
 */
void shellDelete(Shell *shell)
{
 801be08:	b580      	push	{r7, lr}
 801be0a:	b082      	sub	sp, #8
 801be0c:	af00      	add	r7, sp, #0
 801be0e:	6078      	str	r0, [r7, #4]
    shellDeleteByte(shell, -1);
 801be10:	f04f 31ff 	mov.w	r1, #4294967295
 801be14:	6878      	ldr	r0, [r7, #4]
 801be16:	f7fe ffd9 	bl	801adcc <shellDeleteByte>
}
 801be1a:	bf00      	nop
 801be1c:	3708      	adds	r7, #8
 801be1e:	46bd      	mov	sp, r7
 801be20:	bd80      	pop	{r7, pc}

0801be22 <shellEnter>:
 * @brief shell 回车处理
 * 
 * @param shell shell对象
 */
void shellEnter(Shell *shell)
{
 801be22:	b580      	push	{r7, lr}
 801be24:	b082      	sub	sp, #8
 801be26:	af00      	add	r7, sp, #0
 801be28:	6078      	str	r0, [r7, #4]
    shellExec(shell);
 801be2a:	6878      	ldr	r0, [r7, #4]
 801be2c:	f7ff fe1e 	bl	801ba6c <shellExec>
    shellWritePrompt(shell, 1);
 801be30:	2101      	movs	r1, #1
 801be32:	6878      	ldr	r0, [r7, #4]
 801be34:	f7fe fa8c 	bl	801a350 <shellWritePrompt>
}
 801be38:	bf00      	nop
 801be3a:	3708      	adds	r7, #8
 801be3c:	46bd      	mov	sp, r7
 801be3e:	bd80      	pop	{r7, pc}

0801be40 <shellWriteCommandHelp>:
 * 
 * @param shell shell对象
 * @param cmd 命令字符串
 */
static void shellWriteCommandHelp(Shell *shell, char *cmd)
{
 801be40:	b580      	push	{r7, lr}
 801be42:	b084      	sub	sp, #16
 801be44:	af00      	add	r7, sp, #0
 801be46:	6078      	str	r0, [r7, #4]
 801be48:	6039      	str	r1, [r7, #0]
    ShellCommand *command = shellSeekCommand(shell,
                                             cmd,
                                             shell->commandList.base,
 801be4a:	687b      	ldr	r3, [r7, #4]
 801be4c:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
    ShellCommand *command = shellSeekCommand(shell,
 801be4e:	2300      	movs	r3, #0
 801be50:	6839      	ldr	r1, [r7, #0]
 801be52:	6878      	ldr	r0, [r7, #4]
 801be54:	f7ff f9d0 	bl	801b1f8 <shellSeekCommand>
 801be58:	60f8      	str	r0, [r7, #12]
                                             0);
    if (command)
 801be5a:	68fb      	ldr	r3, [r7, #12]
 801be5c:	2b00      	cmp	r3, #0
 801be5e:	d01e      	beq.n	801be9e <shellWriteCommandHelp+0x5e>
    {
        shellWriteString(shell, shellText[SHELL_TEXT_HELP_HEADER]);
 801be60:	4b14      	ldr	r3, [pc, #80]	@ (801beb4 <shellWriteCommandHelp+0x74>)
 801be62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801be64:	4619      	mov	r1, r3
 801be66:	6878      	ldr	r0, [r7, #4]
 801be68:	f7fe fa0c 	bl	801a284 <shellWriteString>
        shellWriteString(shell, shellGetCommandName(command));
 801be6c:	68f8      	ldr	r0, [r7, #12]
 801be6e:	f7fe fc0d 	bl	801a68c <shellGetCommandName>
 801be72:	4603      	mov	r3, r0
 801be74:	4619      	mov	r1, r3
 801be76:	6878      	ldr	r0, [r7, #4]
 801be78:	f7fe fa04 	bl	801a284 <shellWriteString>
        shellWriteString(shell, "\r\n");
 801be7c:	490e      	ldr	r1, [pc, #56]	@ (801beb8 <shellWriteCommandHelp+0x78>)
 801be7e:	6878      	ldr	r0, [r7, #4]
 801be80:	f7fe fa00 	bl	801a284 <shellWriteString>
        shellWriteString(shell, shellGetCommandDesc(command));
 801be84:	68f8      	ldr	r0, [r7, #12]
 801be86:	f7fe fc47 	bl	801a718 <shellGetCommandDesc>
 801be8a:	4603      	mov	r3, r0
 801be8c:	4619      	mov	r1, r3
 801be8e:	6878      	ldr	r0, [r7, #4]
 801be90:	f7fe f9f8 	bl	801a284 <shellWriteString>
        shellWriteString(shell, "\r\n");
 801be94:	4908      	ldr	r1, [pc, #32]	@ (801beb8 <shellWriteCommandHelp+0x78>)
 801be96:	6878      	ldr	r0, [r7, #4]
 801be98:	f7fe f9f4 	bl	801a284 <shellWriteString>
    }
    else
    {
        shellWriteString(shell, shellText[SHELL_TEXT_CMD_NOT_FOUND]);
    }
}
 801be9c:	e005      	b.n	801beaa <shellWriteCommandHelp+0x6a>
        shellWriteString(shell, shellText[SHELL_TEXT_CMD_NOT_FOUND]);
 801be9e:	4b05      	ldr	r3, [pc, #20]	@ (801beb4 <shellWriteCommandHelp+0x74>)
 801bea0:	699b      	ldr	r3, [r3, #24]
 801bea2:	4619      	mov	r1, r3
 801bea4:	6878      	ldr	r0, [r7, #4]
 801bea6:	f7fe f9ed 	bl	801a284 <shellWriteString>
}
 801beaa:	bf00      	nop
 801beac:	3710      	adds	r7, #16
 801beae:	46bd      	mov	sp, r7
 801beb0:	bd80      	pop	{r7, pc}
 801beb2:	bf00      	nop
 801beb4:	2400002c 	.word	0x2400002c
 801beb8:	08021b04 	.word	0x08021b04

0801bebc <shellHelp>:
 * 
 * @param argc 参数个数
 * @param argv 参数
 */
void shellHelp(int argc, char *argv[])
{
 801bebc:	b580      	push	{r7, lr}
 801bebe:	b084      	sub	sp, #16
 801bec0:	af00      	add	r7, sp, #0
 801bec2:	6078      	str	r0, [r7, #4]
 801bec4:	6039      	str	r1, [r7, #0]
    Shell *shell = shellGetCurrent();
 801bec6:	f7fe f99b 	bl	801a200 <shellGetCurrent>
 801beca:	60f8      	str	r0, [r7, #12]
    SHELL_ASSERT(shell, return);
 801becc:	68fb      	ldr	r3, [r7, #12]
 801bece:	2b00      	cmp	r3, #0
 801bed0:	d010      	beq.n	801bef4 <shellHelp+0x38>
    if (argc == 1)
 801bed2:	687b      	ldr	r3, [r7, #4]
 801bed4:	2b01      	cmp	r3, #1
 801bed6:	d103      	bne.n	801bee0 <shellHelp+0x24>
    {
        shellListAll(shell);
 801bed8:	68f8      	ldr	r0, [r7, #12]
 801beda:	f7fe fe59 	bl	801ab90 <shellListAll>
 801bede:	e009      	b.n	801bef4 <shellHelp+0x38>
    }
    else if (argc > 1)
 801bee0:	687b      	ldr	r3, [r7, #4]
 801bee2:	2b01      	cmp	r3, #1
 801bee4:	dd06      	ble.n	801bef4 <shellHelp+0x38>
    {
        shellWriteCommandHelp(shell, argv[1]);
 801bee6:	683b      	ldr	r3, [r7, #0]
 801bee8:	3304      	adds	r3, #4
 801beea:	681b      	ldr	r3, [r3, #0]
 801beec:	4619      	mov	r1, r3
 801beee:	68f8      	ldr	r0, [r7, #12]
 801bef0:	f7ff ffa6 	bl	801be40 <shellWriteCommandHelp>
    }
}
 801bef4:	3710      	adds	r7, #16
 801bef6:	46bd      	mov	sp, r7
 801bef8:	bd80      	pop	{r7, pc}
	...

0801befc <shellHandler>:
 * 
 * @param shell shell对象
 * @param data 输入数据
 */
void shellHandler(Shell *shell, char data)
{
 801befc:	b580      	push	{r7, lr}
 801befe:	b086      	sub	sp, #24
 801bf00:	af00      	add	r7, sp, #0
 801bf02:	6078      	str	r0, [r7, #4]
 801bf04:	460b      	mov	r3, r1
 801bf06:	70fb      	strb	r3, [r7, #3]
    SHELL_ASSERT(data, return);
 801bf08:	78fb      	ldrb	r3, [r7, #3]
 801bf0a:	2b00      	cmp	r3, #0
 801bf0c:	f000 80d8 	beq.w	801c0c0 <shellHandler+0x1c4>
    SHELL_LOCK(shell);
 801bf10:	687b      	ldr	r3, [r7, #4]
 801bf12:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801bf14:	6878      	ldr	r0, [r7, #4]
 801bf16:	4798      	blx	r3
        }
    }
#endif

    /* 根据记录的按键键值计算当前字节在按键键值中的偏移 */
    char keyByteOffset = 24;
 801bf18:	2318      	movs	r3, #24
 801bf1a:	75fb      	strb	r3, [r7, #23]
    int keyFilter = 0x00000000;
 801bf1c:	2300      	movs	r3, #0
 801bf1e:	613b      	str	r3, [r7, #16]
    if ((shell->parser.keyValue & 0x0000FF00) != 0x00000000)
 801bf20:	687b      	ldr	r3, [r7, #4]
 801bf22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801bf24:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801bf28:	2b00      	cmp	r3, #0
 801bf2a:	d005      	beq.n	801bf38 <shellHandler+0x3c>
    {
        keyByteOffset = 0;
 801bf2c:	2300      	movs	r3, #0
 801bf2e:	75fb      	strb	r3, [r7, #23]
        keyFilter = 0xFFFFFF00;
 801bf30:	f06f 03ff 	mvn.w	r3, #255	@ 0xff
 801bf34:	613b      	str	r3, [r7, #16]
 801bf36:	e014      	b.n	801bf62 <shellHandler+0x66>
    }
    else if ((shell->parser.keyValue & 0x00FF0000) != 0x00000000)
 801bf38:	687b      	ldr	r3, [r7, #4]
 801bf3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801bf3c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 801bf40:	2b00      	cmp	r3, #0
 801bf42:	d004      	beq.n	801bf4e <shellHandler+0x52>
    {
        keyByteOffset = 8;
 801bf44:	2308      	movs	r3, #8
 801bf46:	75fb      	strb	r3, [r7, #23]
        keyFilter = 0xFFFF0000;
 801bf48:	4b5f      	ldr	r3, [pc, #380]	@ (801c0c8 <shellHandler+0x1cc>)
 801bf4a:	613b      	str	r3, [r7, #16]
 801bf4c:	e009      	b.n	801bf62 <shellHandler+0x66>
    }
    else if ((shell->parser.keyValue & 0xFF000000) != 0x00000000)
 801bf4e:	687b      	ldr	r3, [r7, #4]
 801bf50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801bf52:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801bf56:	d304      	bcc.n	801bf62 <shellHandler+0x66>
    {
        keyByteOffset = 16;
 801bf58:	2310      	movs	r3, #16
 801bf5a:	75fb      	strb	r3, [r7, #23]
        keyFilter = 0xFF000000;
 801bf5c:	f04f 437f 	mov.w	r3, #4278190080	@ 0xff000000
 801bf60:	613b      	str	r3, [r7, #16]
    }

    /* 遍历ShellCommand列表，尝试进行按键键值匹配 */
    ShellCommand *base = (ShellCommand *)shell->commandList.base;
 801bf62:	687b      	ldr	r3, [r7, #4]
 801bf64:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801bf66:	60bb      	str	r3, [r7, #8]
    for (short i = 0; i < shell->commandList.count; i++)
 801bf68:	2300      	movs	r3, #0
 801bf6a:	81fb      	strh	r3, [r7, #14]
 801bf6c:	e085      	b.n	801c07a <shellHandler+0x17e>
    {
        /* 判断是否是按键定义并验证权限 */
        if (base[i].attr.attrs.type == SHELL_TYPE_KEY
 801bf6e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 801bf72:	4613      	mov	r3, r2
 801bf74:	009b      	lsls	r3, r3, #2
 801bf76:	4413      	add	r3, r2
 801bf78:	009b      	lsls	r3, r3, #2
 801bf7a:	461a      	mov	r2, r3
 801bf7c:	68bb      	ldr	r3, [r7, #8]
 801bf7e:	4413      	add	r3, r2
 801bf80:	785b      	ldrb	r3, [r3, #1]
 801bf82:	f003 030f 	and.w	r3, r3, #15
 801bf86:	b2db      	uxtb	r3, r3
 801bf88:	2b09      	cmp	r3, #9
 801bf8a:	d170      	bne.n	801c06e <shellHandler+0x172>
            && shellCheckPermission(shell, &(base[i])) == 0)
 801bf8c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 801bf90:	4613      	mov	r3, r2
 801bf92:	009b      	lsls	r3, r3, #2
 801bf94:	4413      	add	r3, r2
 801bf96:	009b      	lsls	r3, r3, #2
 801bf98:	461a      	mov	r2, r3
 801bf9a:	68bb      	ldr	r3, [r7, #8]
 801bf9c:	4413      	add	r3, r2
 801bf9e:	4619      	mov	r1, r3
 801bfa0:	6878      	ldr	r0, [r7, #4]
 801bfa2:	f7fe fa5e 	bl	801a462 <shellCheckPermission>
 801bfa6:	4603      	mov	r3, r0
 801bfa8:	2b00      	cmp	r3, #0
 801bfaa:	d160      	bne.n	801c06e <shellHandler+0x172>
        {
            /* 对输入的字节同按键键值进行匹配 */
            if ((base[i].data.key.value & keyFilter) == shell->parser.keyValue
 801bfac:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 801bfb0:	4613      	mov	r3, r2
 801bfb2:	009b      	lsls	r3, r3, #2
 801bfb4:	4413      	add	r3, r2
 801bfb6:	009b      	lsls	r3, r3, #2
 801bfb8:	461a      	mov	r2, r3
 801bfba:	68bb      	ldr	r3, [r7, #8]
 801bfbc:	4413      	add	r3, r2
 801bfbe:	685a      	ldr	r2, [r3, #4]
 801bfc0:	693b      	ldr	r3, [r7, #16]
 801bfc2:	401a      	ands	r2, r3
 801bfc4:	687b      	ldr	r3, [r7, #4]
 801bfc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801bfc8:	429a      	cmp	r2, r3
 801bfca:	d150      	bne.n	801c06e <shellHandler+0x172>
                && (base[i].data.key.value & (0xFF << keyByteOffset))
 801bfcc:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 801bfd0:	4613      	mov	r3, r2
 801bfd2:	009b      	lsls	r3, r3, #2
 801bfd4:	4413      	add	r3, r2
 801bfd6:	009b      	lsls	r3, r3, #2
 801bfd8:	461a      	mov	r2, r3
 801bfda:	68bb      	ldr	r3, [r7, #8]
 801bfdc:	4413      	add	r3, r2
 801bfde:	685a      	ldr	r2, [r3, #4]
 801bfe0:	7dfb      	ldrb	r3, [r7, #23]
 801bfe2:	21ff      	movs	r1, #255	@ 0xff
 801bfe4:	fa01 f303 	lsl.w	r3, r1, r3
 801bfe8:	401a      	ands	r2, r3
                    == (data << keyByteOffset))
 801bfea:	78f9      	ldrb	r1, [r7, #3]
 801bfec:	7dfb      	ldrb	r3, [r7, #23]
 801bfee:	fa01 f303 	lsl.w	r3, r1, r3
                && (base[i].data.key.value & (0xFF << keyByteOffset))
 801bff2:	429a      	cmp	r2, r3
 801bff4:	d13b      	bne.n	801c06e <shellHandler+0x172>
            {
                shell->parser.keyValue |= data << keyByteOffset;
 801bff6:	687b      	ldr	r3, [r7, #4]
 801bff8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801bffa:	78f9      	ldrb	r1, [r7, #3]
 801bffc:	7dfb      	ldrb	r3, [r7, #23]
 801bffe:	fa01 f303 	lsl.w	r3, r1, r3
 801c002:	431a      	orrs	r2, r3
 801c004:	687b      	ldr	r3, [r7, #4]
 801c006:	63da      	str	r2, [r3, #60]	@ 0x3c
                data = 0x00;
 801c008:	2300      	movs	r3, #0
 801c00a:	70fb      	strb	r3, [r7, #3]
                if (keyByteOffset == 0 
 801c00c:	7dfb      	ldrb	r3, [r7, #23]
 801c00e:	2b00      	cmp	r3, #0
 801c010:	d011      	beq.n	801c036 <shellHandler+0x13a>
                    || (base[i].data.key.value & (0xFF << (keyByteOffset - 8)))
 801c012:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 801c016:	4613      	mov	r3, r2
 801c018:	009b      	lsls	r3, r3, #2
 801c01a:	4413      	add	r3, r2
 801c01c:	009b      	lsls	r3, r3, #2
 801c01e:	461a      	mov	r2, r3
 801c020:	68bb      	ldr	r3, [r7, #8]
 801c022:	4413      	add	r3, r2
 801c024:	685a      	ldr	r2, [r3, #4]
 801c026:	7dfb      	ldrb	r3, [r7, #23]
 801c028:	3b08      	subs	r3, #8
 801c02a:	21ff      	movs	r1, #255	@ 0xff
 801c02c:	fa01 f303 	lsl.w	r3, r1, r3
 801c030:	4013      	ands	r3, r2
 801c032:	2b00      	cmp	r3, #0
 801c034:	d11b      	bne.n	801c06e <shellHandler+0x172>
                        == 0x00000000)
                {
                    if (base[i].data.key.function)
 801c036:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 801c03a:	4613      	mov	r3, r2
 801c03c:	009b      	lsls	r3, r3, #2
 801c03e:	4413      	add	r3, r2
 801c040:	009b      	lsls	r3, r3, #2
 801c042:	461a      	mov	r2, r3
 801c044:	68bb      	ldr	r3, [r7, #8]
 801c046:	4413      	add	r3, r2
 801c048:	689b      	ldr	r3, [r3, #8]
 801c04a:	2b00      	cmp	r3, #0
 801c04c:	d00b      	beq.n	801c066 <shellHandler+0x16a>
                    {
                        base[i].data.key.function(shell);
 801c04e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 801c052:	4613      	mov	r3, r2
 801c054:	009b      	lsls	r3, r3, #2
 801c056:	4413      	add	r3, r2
 801c058:	009b      	lsls	r3, r3, #2
 801c05a:	461a      	mov	r2, r3
 801c05c:	68bb      	ldr	r3, [r7, #8]
 801c05e:	4413      	add	r3, r2
 801c060:	689b      	ldr	r3, [r3, #8]
 801c062:	6878      	ldr	r0, [r7, #4]
 801c064:	4798      	blx	r3
                    }
                    shell->parser.keyValue = 0x00000000;
 801c066:	687b      	ldr	r3, [r7, #4]
 801c068:	2200      	movs	r2, #0
 801c06a:	63da      	str	r2, [r3, #60]	@ 0x3c
                    break;
 801c06c:	e00d      	b.n	801c08a <shellHandler+0x18e>
    for (short i = 0; i < shell->commandList.count; i++)
 801c06e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801c072:	b29b      	uxth	r3, r3
 801c074:	3301      	adds	r3, #1
 801c076:	b29b      	uxth	r3, r3
 801c078:	81fb      	strh	r3, [r7, #14]
 801c07a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801c07e:	687a      	ldr	r2, [r7, #4]
 801c080:	f8b2 206c 	ldrh.w	r2, [r2, #108]	@ 0x6c
 801c084:	4293      	cmp	r3, r2
 801c086:	f6ff af72 	blt.w	801bf6e <shellHandler+0x72>
                }
            }
        }
    }

    if (data != 0x00)
 801c08a:	78fb      	ldrb	r3, [r7, #3]
 801c08c:	2b00      	cmp	r3, #0
 801c08e:	d007      	beq.n	801c0a0 <shellHandler+0x1a4>
    {
        shell->parser.keyValue = 0x00000000;
 801c090:	687b      	ldr	r3, [r7, #4]
 801c092:	2200      	movs	r2, #0
 801c094:	63da      	str	r2, [r3, #60]	@ 0x3c
        shellNormalInput(shell, data);
 801c096:	78fb      	ldrb	r3, [r7, #3]
 801c098:	4619      	mov	r1, r3
 801c09a:	6878      	ldr	r0, [r7, #4]
 801c09c:	f7ff fccf 	bl	801ba3e <shellNormalInput>
    }

    if (SHELL_GET_TICK())
 801c0a0:	f7e7 fb2c 	bl	80036fc <HAL_GetTick>
 801c0a4:	4603      	mov	r3, r0
 801c0a6:	2b00      	cmp	r3, #0
 801c0a8:	d005      	beq.n	801c0b6 <shellHandler+0x1ba>
    {
        shell->info.activeTime = SHELL_GET_TICK();
 801c0aa:	f7e7 fb27 	bl	80036fc <HAL_GetTick>
 801c0ae:	4603      	mov	r3, r0
 801c0b0:	461a      	mov	r2, r3
 801c0b2:	687b      	ldr	r3, [r7, #4]
 801c0b4:	605a      	str	r2, [r3, #4]
    }
    SHELL_UNLOCK(shell);
 801c0b6:	687b      	ldr	r3, [r7, #4]
 801c0b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801c0bc:	6878      	ldr	r0, [r7, #4]
 801c0be:	4798      	blx	r3
}
 801c0c0:	3718      	adds	r7, #24
 801c0c2:	46bd      	mov	sp, r7
 801c0c4:	bd80      	pop	{r7, pc}
 801c0c6:	bf00      	nop
 801c0c8:	ffff0000 	.word	0xffff0000

0801c0cc <shellTask>:
 * 
 * @param param 参数(shell对象)
 * 
 */
void shellTask(void *param)
{
 801c0cc:	b580      	push	{r7, lr}
 801c0ce:	b084      	sub	sp, #16
 801c0d0:	af00      	add	r7, sp, #0
 801c0d2:	6078      	str	r0, [r7, #4]
    Shell *shell = (Shell *)param;
 801c0d4:	687b      	ldr	r3, [r7, #4]
 801c0d6:	60fb      	str	r3, [r7, #12]
    char data;
#if SHELL_TASK_WHILE == 1
    while(1)
    {
#endif
        if (shell->read && shell->read(&data, 1) == 1)
 801c0d8:	68fb      	ldr	r3, [r7, #12]
 801c0da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801c0dc:	2b00      	cmp	r3, #0
 801c0de:	d0fb      	beq.n	801c0d8 <shellTask+0xc>
 801c0e0:	68fb      	ldr	r3, [r7, #12]
 801c0e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801c0e4:	f107 020b 	add.w	r2, r7, #11
 801c0e8:	2101      	movs	r1, #1
 801c0ea:	4610      	mov	r0, r2
 801c0ec:	4798      	blx	r3
 801c0ee:	4603      	mov	r3, r0
 801c0f0:	2b01      	cmp	r3, #1
 801c0f2:	d1f1      	bne.n	801c0d8 <shellTask+0xc>
        {
            shellHandler(shell, data);
 801c0f4:	7afb      	ldrb	r3, [r7, #11]
 801c0f6:	4619      	mov	r1, r3
 801c0f8:	68f8      	ldr	r0, [r7, #12]
 801c0fa:	f7ff feff 	bl	801befc <shellHandler>
        if (shell->read && shell->read(&data, 1) == 1)
 801c0fe:	e7eb      	b.n	801c0d8 <shellTask+0xc>

0801c100 <shellUsers>:

/**
 * @brief shell 输出用户列表(shell调用)
 */
void shellUsers(void)
{
 801c100:	b580      	push	{r7, lr}
 801c102:	b082      	sub	sp, #8
 801c104:	af00      	add	r7, sp, #0
    Shell *shell = shellGetCurrent();
 801c106:	f7fe f87b 	bl	801a200 <shellGetCurrent>
 801c10a:	6078      	str	r0, [r7, #4]
    if (shell)
 801c10c:	687b      	ldr	r3, [r7, #4]
 801c10e:	2b00      	cmp	r3, #0
 801c110:	d002      	beq.n	801c118 <shellUsers+0x18>
    {
        shellListUser(shell);
 801c112:	6878      	ldr	r0, [r7, #4]
 801c114:	f7fe fc7c 	bl	801aa10 <shellListUser>
    }
}
 801c118:	bf00      	nop
 801c11a:	3708      	adds	r7, #8
 801c11c:	46bd      	mov	sp, r7
 801c11e:	bd80      	pop	{r7, pc}

0801c120 <shellCmds>:

/**
 * @brief shell 输出命令列表(shell调用)
 */
void shellCmds(void)
{
 801c120:	b580      	push	{r7, lr}
 801c122:	b082      	sub	sp, #8
 801c124:	af00      	add	r7, sp, #0
    Shell *shell = shellGetCurrent();
 801c126:	f7fe f86b 	bl	801a200 <shellGetCurrent>
 801c12a:	6078      	str	r0, [r7, #4]
    if (shell)
 801c12c:	687b      	ldr	r3, [r7, #4]
 801c12e:	2b00      	cmp	r3, #0
 801c130:	d002      	beq.n	801c138 <shellCmds+0x18>
    {
        shellListCommand(shell);
 801c132:	6878      	ldr	r0, [r7, #4]
 801c134:	f7fe fbbc 	bl	801a8b0 <shellListCommand>
    }
}
 801c138:	bf00      	nop
 801c13a:	3708      	adds	r7, #8
 801c13c:	46bd      	mov	sp, r7
 801c13e:	bd80      	pop	{r7, pc}

0801c140 <shellVars>:

/**
 * @brief shell 输出变量列表(shell调用)
 */
void shellVars(void)
{
 801c140:	b580      	push	{r7, lr}
 801c142:	b082      	sub	sp, #8
 801c144:	af00      	add	r7, sp, #0
    Shell *shell = shellGetCurrent();
 801c146:	f7fe f85b 	bl	801a200 <shellGetCurrent>
 801c14a:	6078      	str	r0, [r7, #4]
    if (shell)
 801c14c:	687b      	ldr	r3, [r7, #4]
 801c14e:	2b00      	cmp	r3, #0
 801c150:	d002      	beq.n	801c158 <shellVars+0x18>
    {
        shellListVar(shell);
 801c152:	6878      	ldr	r0, [r7, #4]
 801c154:	f7fe fbfc 	bl	801a950 <shellListVar>
    }
}
 801c158:	bf00      	nop
 801c15a:	3708      	adds	r7, #8
 801c15c:	46bd      	mov	sp, r7
 801c15e:	bd80      	pop	{r7, pc}

0801c160 <shellKeys>:

/**
 * @brief shell 输出按键列表(shell调用)
 */
void shellKeys(void)
{
 801c160:	b580      	push	{r7, lr}
 801c162:	b082      	sub	sp, #8
 801c164:	af00      	add	r7, sp, #0
    Shell *shell = shellGetCurrent();
 801c166:	f7fe f84b 	bl	801a200 <shellGetCurrent>
 801c16a:	6078      	str	r0, [r7, #4]
    if (shell)
 801c16c:	687b      	ldr	r3, [r7, #4]
 801c16e:	2b00      	cmp	r3, #0
 801c170:	d002      	beq.n	801c178 <shellKeys+0x18>
    {
        shellListKey(shell);
 801c172:	6878      	ldr	r0, [r7, #4]
 801c174:	f7fe fcac 	bl	801aad0 <shellListKey>
    }
}
 801c178:	bf00      	nop
 801c17a:	3708      	adds	r7, #8
 801c17c:	46bd      	mov	sp, r7
 801c17e:	bd80      	pop	{r7, pc}

0801c180 <shellClear>:

/**
 * @brief shell 清空控制台(shell调用)
 */
void shellClear(void)
{
 801c180:	b580      	push	{r7, lr}
 801c182:	b082      	sub	sp, #8
 801c184:	af00      	add	r7, sp, #0
    Shell *shell = shellGetCurrent();
 801c186:	f7fe f83b 	bl	801a200 <shellGetCurrent>
 801c18a:	6078      	str	r0, [r7, #4]
    if (shell)
 801c18c:	687b      	ldr	r3, [r7, #4]
 801c18e:	2b00      	cmp	r3, #0
 801c190:	d005      	beq.n	801c19e <shellClear+0x1e>
    {
        shellWriteString(shell, shellText[SHELL_TEXT_CLEAR_CONSOLE]);
 801c192:	4b05      	ldr	r3, [pc, #20]	@ (801c1a8 <shellClear+0x28>)
 801c194:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801c196:	4619      	mov	r1, r3
 801c198:	6878      	ldr	r0, [r7, #4]
 801c19a:	f7fe f873 	bl	801a284 <shellWriteString>
    }
}
 801c19e:	bf00      	nop
 801c1a0:	3708      	adds	r7, #8
 801c1a2:	46bd      	mov	sp, r7
 801c1a4:	bd80      	pop	{r7, pc}
 801c1a6:	bf00      	nop
 801c1a8:	2400002c 	.word	0x2400002c

0801c1ac <shellExecute>:
 * @param argc 参数个数
 * @param argv 参数
 * @return int 返回值
 */
int shellExecute(int argc, char *argv[])
{
 801c1ac:	b580      	push	{r7, lr}
 801c1ae:	b08a      	sub	sp, #40	@ 0x28
 801c1b0:	af00      	add	r7, sp, #0
 801c1b2:	6078      	str	r0, [r7, #4]
 801c1b4:	6039      	str	r1, [r7, #0]
    Shell *shell = shellGetCurrent();
 801c1b6:	f7fe f823 	bl	801a200 <shellGetCurrent>
 801c1ba:	6278      	str	r0, [r7, #36]	@ 0x24
    if (shell && argc >= 2)
 801c1bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c1be:	2b00      	cmp	r3, #0
 801c1c0:	d031      	beq.n	801c226 <shellExecute+0x7a>
 801c1c2:	687b      	ldr	r3, [r7, #4]
 801c1c4:	2b01      	cmp	r3, #1
 801c1c6:	dd2e      	ble.n	801c226 <shellExecute+0x7a>
    {
        size_t result;
        if (shellExtParsePara(shell, argv[1], NULL, &result) != 0)
 801c1c8:	683b      	ldr	r3, [r7, #0]
 801c1ca:	3304      	adds	r3, #4
 801c1cc:	6819      	ldr	r1, [r3, #0]
 801c1ce:	f107 031c 	add.w	r3, r7, #28
 801c1d2:	2200      	movs	r2, #0
 801c1d4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801c1d6:	f001 fb81 	bl	801d8dc <shellExtParsePara>
 801c1da:	4603      	mov	r3, r0
 801c1dc:	2b00      	cmp	r3, #0
 801c1de:	d008      	beq.n	801c1f2 <shellExecute+0x46>
        {
            shellWriteString(shell, shellText[SHELL_TEXT_PARAM_ERROR]);
 801c1e0:	4b17      	ldr	r3, [pc, #92]	@ (801c240 <shellExecute+0x94>)
 801c1e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801c1e4:	4619      	mov	r1, r3
 801c1e6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801c1e8:	f7fe f84c 	bl	801a284 <shellWriteString>
            return -1;
 801c1ec:	f04f 33ff 	mov.w	r3, #4294967295
 801c1f0:	e021      	b.n	801c236 <shellExecute+0x8a>
        }
        int (*func)() = (int (*)())result;
 801c1f2:	69fb      	ldr	r3, [r7, #28]
 801c1f4:	623b      	str	r3, [r7, #32]
        ShellCommand command = {
 801c1f6:	f107 0308 	add.w	r3, r7, #8
 801c1fa:	2200      	movs	r2, #0
 801c1fc:	601a      	str	r2, [r3, #0]
 801c1fe:	605a      	str	r2, [r3, #4]
 801c200:	609a      	str	r2, [r3, #8]
 801c202:	60da      	str	r2, [r3, #12]
 801c204:	611a      	str	r2, [r3, #16]
 801c206:	f44f 5304 	mov.w	r3, #8448	@ 0x2100
 801c20a:	60bb      	str	r3, [r7, #8]
 801c20c:	6a3b      	ldr	r3, [r7, #32]
 801c20e:	613b      	str	r3, [r7, #16]
            .attr.value = SHELL_CMD_PERMISSION(0)|SHELL_CMD_TYPE(SHELL_TYPE_CMD_FUNC)
                          |SHELL_CMD_DISABLE_RETURN,
            .data.cmd.function = func,
        };
        return shellExtRun(shell, &command, argc - 1, &argv[1]);
 801c210:	687b      	ldr	r3, [r7, #4]
 801c212:	1e5a      	subs	r2, r3, #1
 801c214:	683b      	ldr	r3, [r7, #0]
 801c216:	3304      	adds	r3, #4
 801c218:	f107 0108 	add.w	r1, r7, #8
 801c21c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801c21e:	f001 fe0d 	bl	801de3c <shellExtRun>
 801c222:	4603      	mov	r3, r0
 801c224:	e007      	b.n	801c236 <shellExecute+0x8a>
    }
    else
    {
        shellWriteString(shell, shellText[SHELL_TEXT_PARAM_ERROR]);
 801c226:	4b06      	ldr	r3, [pc, #24]	@ (801c240 <shellExecute+0x94>)
 801c228:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801c22a:	4619      	mov	r1, r3
 801c22c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801c22e:	f7fe f829 	bl	801a284 <shellWriteString>
        return -1;
 801c232:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 801c236:	4618      	mov	r0, r3
 801c238:	3728      	adds	r7, #40	@ 0x28
 801c23a:	46bd      	mov	sp, r7
 801c23c:	bd80      	pop	{r7, pc}
 801c23e:	bf00      	nop
 801c240:	2400002c 	.word	0x2400002c

0801c244 <__NVIC_SystemReset>:
{
 801c244:	b480      	push	{r7}
 801c246:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 801c248:	f3bf 8f4f 	dsb	sy
}
 801c24c:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 801c24e:	4b06      	ldr	r3, [pc, #24]	@ (801c268 <__NVIC_SystemReset+0x24>)
 801c250:	68db      	ldr	r3, [r3, #12]
 801c252:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 801c256:	4904      	ldr	r1, [pc, #16]	@ (801c268 <__NVIC_SystemReset+0x24>)
 801c258:	4b04      	ldr	r3, [pc, #16]	@ (801c26c <__NVIC_SystemReset+0x28>)
 801c25a:	4313      	orrs	r3, r2
 801c25c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 801c25e:	f3bf 8f4f 	dsb	sy
}
 801c262:	bf00      	nop
    __NOP();
 801c264:	bf00      	nop
 801c266:	e7fd      	b.n	801c264 <__NVIC_SystemReset+0x20>
 801c268:	e000ed00 	.word	0xe000ed00
 801c26c:	05fa0004 	.word	0x05fa0004

0801c270 <cmd_sysinfo>:
#include <string.h>
#include <stdlib.h>

/* 系统信息命令 */
int cmd_sysinfo(int argc, char *argv[])
{
 801c270:	b5b0      	push	{r4, r5, r7, lr}
 801c272:	b086      	sub	sp, #24
 801c274:	af02      	add	r7, sp, #8
 801c276:	6078      	str	r0, [r7, #4]
 801c278:	6039      	str	r1, [r7, #0]
    Shell *shell = shellGetCurrent();
 801c27a:	f7fd ffc1 	bl	801a200 <shellGetCurrent>
 801c27e:	60f8      	str	r0, [r7, #12]
    if (!shell) return -1;
 801c280:	68fb      	ldr	r3, [r7, #12]
 801c282:	2b00      	cmp	r3, #0
 801c284:	d102      	bne.n	801c28c <cmd_sysinfo+0x1c>
 801c286:	f04f 33ff 	mov.w	r3, #4294967295
 801c28a:	e075      	b.n	801c378 <cmd_sysinfo+0x108>
    
    SHELL_LOG_SYS_INFO("System information requested");
 801c28c:	4a3c      	ldr	r2, [pc, #240]	@ (801c380 <cmd_sysinfo+0x110>)
 801c28e:	2101      	movs	r1, #1
 801c290:	2000      	movs	r0, #0
 801c292:	f001 ffd5 	bl	801e240 <shellLogPrint>
    
    SHELL_LOG_SYS_INFO("=== STM32H725 System Information ===");
 801c296:	4a3b      	ldr	r2, [pc, #236]	@ (801c384 <cmd_sysinfo+0x114>)
 801c298:	2101      	movs	r1, #1
 801c29a:	2000      	movs	r0, #0
 801c29c:	f001 ffd0 	bl	801e240 <shellLogPrint>
    SHELL_LOG_SYS_INFO("CPU ID: 0x%08lX", HAL_GetDEVID());
 801c2a0:	f7e7 fa72 	bl	8003788 <HAL_GetDEVID>
 801c2a4:	4603      	mov	r3, r0
 801c2a6:	4a38      	ldr	r2, [pc, #224]	@ (801c388 <cmd_sysinfo+0x118>)
 801c2a8:	2101      	movs	r1, #1
 801c2aa:	2000      	movs	r0, #0
 801c2ac:	f001 ffc8 	bl	801e240 <shellLogPrint>
    SHELL_LOG_SYS_INFO("CPU Rev: 0x%08lX", HAL_GetREVID());
 801c2b0:	f7e7 fa5e 	bl	8003770 <HAL_GetREVID>
 801c2b4:	4603      	mov	r3, r0
 801c2b6:	4a35      	ldr	r2, [pc, #212]	@ (801c38c <cmd_sysinfo+0x11c>)
 801c2b8:	2101      	movs	r1, #1
 801c2ba:	2000      	movs	r0, #0
 801c2bc:	f001 ffc0 	bl	801e240 <shellLogPrint>
    SHELL_LOG_SYS_INFO("UID: %08lX-%08lX-%08lX", 
 801c2c0:	f7e7 fa70 	bl	80037a4 <HAL_GetUIDw0>
 801c2c4:	4605      	mov	r5, r0
 801c2c6:	f7e7 fa79 	bl	80037bc <HAL_GetUIDw1>
 801c2ca:	4604      	mov	r4, r0
 801c2cc:	f7e7 fa82 	bl	80037d4 <HAL_GetUIDw2>
 801c2d0:	4603      	mov	r3, r0
 801c2d2:	9301      	str	r3, [sp, #4]
 801c2d4:	9400      	str	r4, [sp, #0]
 801c2d6:	462b      	mov	r3, r5
 801c2d8:	4a2d      	ldr	r2, [pc, #180]	@ (801c390 <cmd_sysinfo+0x120>)
 801c2da:	2101      	movs	r1, #1
 801c2dc:	2000      	movs	r0, #0
 801c2de:	f001 ffaf 	bl	801e240 <shellLogPrint>
           HAL_GetUIDw0(), HAL_GetUIDw1(), HAL_GetUIDw2());
    SHELL_LOG_SYS_INFO("System Clock: %lu Hz", HAL_RCC_GetSysClockFreq());
 801c2e2:	f7ed fe5b 	bl	8009f9c <HAL_RCC_GetSysClockFreq>
 801c2e6:	4603      	mov	r3, r0
 801c2e8:	4a2a      	ldr	r2, [pc, #168]	@ (801c394 <cmd_sysinfo+0x124>)
 801c2ea:	2101      	movs	r1, #1
 801c2ec:	2000      	movs	r0, #0
 801c2ee:	f001 ffa7 	bl	801e240 <shellLogPrint>
    SHELL_LOG_SYS_INFO("HCLK: %lu Hz", HAL_RCC_GetHCLKFreq());
 801c2f2:	f7ed ffcd 	bl	800a290 <HAL_RCC_GetHCLKFreq>
 801c2f6:	4603      	mov	r3, r0
 801c2f8:	4a27      	ldr	r2, [pc, #156]	@ (801c398 <cmd_sysinfo+0x128>)
 801c2fa:	2101      	movs	r1, #1
 801c2fc:	2000      	movs	r0, #0
 801c2fe:	f001 ff9f 	bl	801e240 <shellLogPrint>
    SHELL_LOG_SYS_INFO("PCLK1: %lu Hz", HAL_RCC_GetPCLK1Freq());
 801c302:	f7ed fff5 	bl	800a2f0 <HAL_RCC_GetPCLK1Freq>
 801c306:	4603      	mov	r3, r0
 801c308:	4a24      	ldr	r2, [pc, #144]	@ (801c39c <cmd_sysinfo+0x12c>)
 801c30a:	2101      	movs	r1, #1
 801c30c:	2000      	movs	r0, #0
 801c30e:	f001 ff97 	bl	801e240 <shellLogPrint>
    SHELL_LOG_SYS_INFO("PCLK2: %lu Hz", HAL_RCC_GetPCLK2Freq());
 801c312:	f7ee f803 	bl	800a31c <HAL_RCC_GetPCLK2Freq>
 801c316:	4603      	mov	r3, r0
 801c318:	4a21      	ldr	r2, [pc, #132]	@ (801c3a0 <cmd_sysinfo+0x130>)
 801c31a:	2101      	movs	r1, #1
 801c31c:	2000      	movs	r0, #0
 801c31e:	f001 ff8f 	bl	801e240 <shellLogPrint>
    SHELL_LOG_SYS_INFO("Tick: %lu ms", HAL_GetTick());
 801c322:	f7e7 f9eb 	bl	80036fc <HAL_GetTick>
 801c326:	4603      	mov	r3, r0
 801c328:	4a1e      	ldr	r2, [pc, #120]	@ (801c3a4 <cmd_sysinfo+0x134>)
 801c32a:	2101      	movs	r1, #1
 801c32c:	2000      	movs	r0, #0
 801c32e:	f001 ff87 	bl	801e240 <shellLogPrint>
    SHELL_LOG_SYS_INFO("HAL Version: %lu", HAL_GetHalVersion());
 801c332:	f7e7 fa13 	bl	800375c <HAL_GetHalVersion>
 801c336:	4603      	mov	r3, r0
 801c338:	4a1b      	ldr	r2, [pc, #108]	@ (801c3a8 <cmd_sysinfo+0x138>)
 801c33a:	2101      	movs	r1, #1
 801c33c:	2000      	movs	r0, #0
 801c33e:	f001 ff7f 	bl	801e240 <shellLogPrint>
    
    // 记录系统状态到日志
    SHELL_LOG_SYS_DEBUG("CPU ID: 0x%08lX, Rev: 0x%08lX", HAL_GetDEVID(), HAL_GetREVID());
 801c342:	f7e7 fa21 	bl	8003788 <HAL_GetDEVID>
 801c346:	4604      	mov	r4, r0
 801c348:	f7e7 fa12 	bl	8003770 <HAL_GetREVID>
 801c34c:	4603      	mov	r3, r0
 801c34e:	9300      	str	r3, [sp, #0]
 801c350:	4623      	mov	r3, r4
 801c352:	4a16      	ldr	r2, [pc, #88]	@ (801c3ac <cmd_sysinfo+0x13c>)
 801c354:	2100      	movs	r1, #0
 801c356:	2000      	movs	r0, #0
 801c358:	f001 ff72 	bl	801e240 <shellLogPrint>
    SHELL_LOG_SYS_DEBUG("System Clock: %lu Hz, HCLK: %lu Hz", 
 801c35c:	f7ed fe1e 	bl	8009f9c <HAL_RCC_GetSysClockFreq>
 801c360:	4604      	mov	r4, r0
 801c362:	f7ed ff95 	bl	800a290 <HAL_RCC_GetHCLKFreq>
 801c366:	4603      	mov	r3, r0
 801c368:	9300      	str	r3, [sp, #0]
 801c36a:	4623      	mov	r3, r4
 801c36c:	4a10      	ldr	r2, [pc, #64]	@ (801c3b0 <cmd_sysinfo+0x140>)
 801c36e:	2100      	movs	r1, #0
 801c370:	2000      	movs	r0, #0
 801c372:	f001 ff65 	bl	801e240 <shellLogPrint>
                        HAL_RCC_GetSysClockFreq(), HAL_RCC_GetHCLKFreq());
    
    return 0;
 801c376:	2300      	movs	r3, #0
}
 801c378:	4618      	mov	r0, r3
 801c37a:	3710      	adds	r7, #16
 801c37c:	46bd      	mov	sp, r7
 801c37e:	bdb0      	pop	{r4, r5, r7, pc}
 801c380:	08021b44 	.word	0x08021b44
 801c384:	08021b64 	.word	0x08021b64
 801c388:	08021b8c 	.word	0x08021b8c
 801c38c:	08021b9c 	.word	0x08021b9c
 801c390:	08021bb0 	.word	0x08021bb0
 801c394:	08021bc8 	.word	0x08021bc8
 801c398:	08021be0 	.word	0x08021be0
 801c39c:	08021bf0 	.word	0x08021bf0
 801c3a0:	08021c00 	.word	0x08021c00
 801c3a4:	08021c10 	.word	0x08021c10
 801c3a8:	08021c20 	.word	0x08021c20
 801c3ac:	08021c34 	.word	0x08021c34
 801c3b0:	08021c54 	.word	0x08021c54

0801c3b4 <cmd_meminfo>:
SHELL_EXPORT_CMD(SHELL_CMD_PERMISSION(0)|SHELL_CMD_TYPE(SHELL_TYPE_CMD_MAIN), 
                 sysinfo, cmd_sysinfo, show system information);

/* 内存信息命令 */
int cmd_meminfo(int argc, char *argv[])
{
 801c3b4:	b580      	push	{r7, lr}
 801c3b6:	b08a      	sub	sp, #40	@ 0x28
 801c3b8:	af04      	add	r7, sp, #16
 801c3ba:	6078      	str	r0, [r7, #4]
 801c3bc:	6039      	str	r1, [r7, #0]
    Shell *shell = shellGetCurrent();
 801c3be:	f7fd ff1f 	bl	801a200 <shellGetCurrent>
 801c3c2:	6178      	str	r0, [r7, #20]
    if (!shell) return -1;
 801c3c4:	697b      	ldr	r3, [r7, #20]
 801c3c6:	2b00      	cmp	r3, #0
 801c3c8:	d102      	bne.n	801c3d0 <cmd_meminfo+0x1c>
 801c3ca:	f04f 33ff 	mov.w	r3, #4294967295
 801c3ce:	e091      	b.n	801c4f4 <cmd_meminfo+0x140>
    
    size_t free_heap = xPortGetFreeHeapSize();
 801c3d0:	f7fd fda0 	bl	8019f14 <xPortGetFreeHeapSize>
 801c3d4:	6138      	str	r0, [r7, #16]
    size_t min_free_heap = xPortGetMinimumEverFreeHeapSize();
 801c3d6:	f7fd fda9 	bl	8019f2c <xPortGetMinimumEverFreeHeapSize>
 801c3da:	60f8      	str	r0, [r7, #12]
    
    SHELL_LOG_MEM_INFO("Memory status requested");
 801c3dc:	4a47      	ldr	r2, [pc, #284]	@ (801c4fc <cmd_meminfo+0x148>)
 801c3de:	2101      	movs	r1, #1
 801c3e0:	2002      	movs	r0, #2
 801c3e2:	f001 ff2d 	bl	801e240 <shellLogPrint>
    
    SHELL_LOG_MEM_INFO("=== Memory Information ===");
 801c3e6:	4a46      	ldr	r2, [pc, #280]	@ (801c500 <cmd_meminfo+0x14c>)
 801c3e8:	2101      	movs	r1, #1
 801c3ea:	2002      	movs	r0, #2
 801c3ec:	f001 ff28 	bl	801e240 <shellLogPrint>
    SHELL_LOG_MEM_INFO("Free Heap: %u bytes", free_heap);
 801c3f0:	693b      	ldr	r3, [r7, #16]
 801c3f2:	4a44      	ldr	r2, [pc, #272]	@ (801c504 <cmd_meminfo+0x150>)
 801c3f4:	2101      	movs	r1, #1
 801c3f6:	2002      	movs	r0, #2
 801c3f8:	f001 ff22 	bl	801e240 <shellLogPrint>
    SHELL_LOG_MEM_INFO("Min Free Heap: %u bytes", min_free_heap);
 801c3fc:	68fb      	ldr	r3, [r7, #12]
 801c3fe:	4a42      	ldr	r2, [pc, #264]	@ (801c508 <cmd_meminfo+0x154>)
 801c400:	2101      	movs	r1, #1
 801c402:	2002      	movs	r0, #2
 801c404:	f001 ff1c 	bl	801e240 <shellLogPrint>
    SHELL_LOG_MEM_INFO("Used Heap: %u bytes", configTOTAL_HEAP_SIZE - free_heap);
 801c408:	693b      	ldr	r3, [r7, #16]
 801c40a:	f5c3 4300 	rsb	r3, r3, #32768	@ 0x8000
 801c40e:	4a3f      	ldr	r2, [pc, #252]	@ (801c50c <cmd_meminfo+0x158>)
 801c410:	2101      	movs	r1, #1
 801c412:	2002      	movs	r0, #2
 801c414:	f001 ff14 	bl	801e240 <shellLogPrint>
    SHELL_LOG_MEM_INFO("Total Heap: %u bytes", configTOTAL_HEAP_SIZE);
 801c418:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801c41c:	4a3c      	ldr	r2, [pc, #240]	@ (801c510 <cmd_meminfo+0x15c>)
 801c41e:	2101      	movs	r1, #1
 801c420:	2002      	movs	r0, #2
 801c422:	f001 ff0d 	bl	801e240 <shellLogPrint>
    
    float usage_percent = ((float)(configTOTAL_HEAP_SIZE - free_heap) / configTOTAL_HEAP_SIZE) * 100;
 801c426:	693b      	ldr	r3, [r7, #16]
 801c428:	f5c3 4300 	rsb	r3, r3, #32768	@ 0x8000
 801c42c:	ee07 3a90 	vmov	s15, r3
 801c430:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801c434:	eddf 6a37 	vldr	s13, [pc, #220]	@ 801c514 <cmd_meminfo+0x160>
 801c438:	eec7 7a26 	vdiv.f32	s15, s14, s13
 801c43c:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 801c518 <cmd_meminfo+0x164>
 801c440:	ee67 7a87 	vmul.f32	s15, s15, s14
 801c444:	edc7 7a02 	vstr	s15, [r7, #8]
    SHELL_LOG_MEM_INFO("Memory Usage: %.1f%%", usage_percent);
 801c448:	edd7 7a02 	vldr	s15, [r7, #8]
 801c44c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 801c450:	ed8d 7b00 	vstr	d7, [sp]
 801c454:	4a31      	ldr	r2, [pc, #196]	@ (801c51c <cmd_meminfo+0x168>)
 801c456:	2101      	movs	r1, #1
 801c458:	2002      	movs	r0, #2
 801c45a:	f001 fef1 	bl	801e240 <shellLogPrint>
    
    // 添加内存状态日志
    if (usage_percent > 80.0f) {
 801c45e:	edd7 7a02 	vldr	s15, [r7, #8]
 801c462:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 801c520 <cmd_meminfo+0x16c>
 801c466:	eef4 7ac7 	vcmpe.f32	s15, s14
 801c46a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c46e:	dd12      	ble.n	801c496 <cmd_meminfo+0xe2>
        SHELL_LOG_MEM_WARNING("High memory usage: %.1f%% (%u/%u bytes)", 
 801c470:	edd7 7a02 	vldr	s15, [r7, #8]
 801c474:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 801c478:	693b      	ldr	r3, [r7, #16]
 801c47a:	f5c3 4300 	rsb	r3, r3, #32768	@ 0x8000
 801c47e:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 801c482:	9203      	str	r2, [sp, #12]
 801c484:	9302      	str	r3, [sp, #8]
 801c486:	ed8d 7b00 	vstr	d7, [sp]
 801c48a:	4a26      	ldr	r2, [pc, #152]	@ (801c524 <cmd_meminfo+0x170>)
 801c48c:	2102      	movs	r1, #2
 801c48e:	2002      	movs	r0, #2
 801c490:	f001 fed6 	bl	801e240 <shellLogPrint>
 801c494:	e02d      	b.n	801c4f2 <cmd_meminfo+0x13e>
                             usage_percent, configTOTAL_HEAP_SIZE - free_heap, configTOTAL_HEAP_SIZE);
    } else if (usage_percent > 60.0f) {
 801c496:	edd7 7a02 	vldr	s15, [r7, #8]
 801c49a:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 801c528 <cmd_meminfo+0x174>
 801c49e:	eef4 7ac7 	vcmpe.f32	s15, s14
 801c4a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c4a6:	dd12      	ble.n	801c4ce <cmd_meminfo+0x11a>
        SHELL_LOG_MEM_INFO("Memory usage: %.1f%% (%u/%u bytes)", 
 801c4a8:	edd7 7a02 	vldr	s15, [r7, #8]
 801c4ac:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 801c4b0:	693b      	ldr	r3, [r7, #16]
 801c4b2:	f5c3 4300 	rsb	r3, r3, #32768	@ 0x8000
 801c4b6:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 801c4ba:	9203      	str	r2, [sp, #12]
 801c4bc:	9302      	str	r3, [sp, #8]
 801c4be:	ed8d 7b00 	vstr	d7, [sp]
 801c4c2:	4a1a      	ldr	r2, [pc, #104]	@ (801c52c <cmd_meminfo+0x178>)
 801c4c4:	2101      	movs	r1, #1
 801c4c6:	2002      	movs	r0, #2
 801c4c8:	f001 feba 	bl	801e240 <shellLogPrint>
 801c4cc:	e011      	b.n	801c4f2 <cmd_meminfo+0x13e>
                          usage_percent, configTOTAL_HEAP_SIZE - free_heap, configTOTAL_HEAP_SIZE);
    } else {
        SHELL_LOG_MEM_DEBUG("Memory usage: %.1f%% (%u/%u bytes)", 
 801c4ce:	edd7 7a02 	vldr	s15, [r7, #8]
 801c4d2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 801c4d6:	693b      	ldr	r3, [r7, #16]
 801c4d8:	f5c3 4300 	rsb	r3, r3, #32768	@ 0x8000
 801c4dc:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 801c4e0:	9203      	str	r2, [sp, #12]
 801c4e2:	9302      	str	r3, [sp, #8]
 801c4e4:	ed8d 7b00 	vstr	d7, [sp]
 801c4e8:	4a10      	ldr	r2, [pc, #64]	@ (801c52c <cmd_meminfo+0x178>)
 801c4ea:	2100      	movs	r1, #0
 801c4ec:	2002      	movs	r0, #2
 801c4ee:	f001 fea7 	bl	801e240 <shellLogPrint>
                           usage_percent, configTOTAL_HEAP_SIZE - free_heap, configTOTAL_HEAP_SIZE);
    }
    
    return 0;
 801c4f2:	2300      	movs	r3, #0
}
 801c4f4:	4618      	mov	r0, r3
 801c4f6:	3718      	adds	r7, #24
 801c4f8:	46bd      	mov	sp, r7
 801c4fa:	bd80      	pop	{r7, pc}
 801c4fc:	08021c78 	.word	0x08021c78
 801c500:	08021c90 	.word	0x08021c90
 801c504:	08021cac 	.word	0x08021cac
 801c508:	08021cc0 	.word	0x08021cc0
 801c50c:	08021cd8 	.word	0x08021cd8
 801c510:	08021cec 	.word	0x08021cec
 801c514:	47000000 	.word	0x47000000
 801c518:	42c80000 	.word	0x42c80000
 801c51c:	08021d04 	.word	0x08021d04
 801c520:	42a00000 	.word	0x42a00000
 801c524:	08021d1c 	.word	0x08021d1c
 801c528:	42700000 	.word	0x42700000
 801c52c:	08021d44 	.word	0x08021d44

0801c530 <cmd_taskinfo>:
SHELL_EXPORT_CMD(SHELL_CMD_PERMISSION(0)|SHELL_CMD_TYPE(SHELL_TYPE_CMD_MAIN), 
                 meminfo, cmd_meminfo, show memory information);

/* 任务信息命令 */
int cmd_taskinfo(int argc, char *argv[])
{
 801c530:	b580      	push	{r7, lr}
 801c532:	b084      	sub	sp, #16
 801c534:	af00      	add	r7, sp, #0
 801c536:	6078      	str	r0, [r7, #4]
 801c538:	6039      	str	r1, [r7, #0]
    Shell *shell = shellGetCurrent();
 801c53a:	f7fd fe61 	bl	801a200 <shellGetCurrent>
 801c53e:	60f8      	str	r0, [r7, #12]
    if (!shell) return -1;
 801c540:	68fb      	ldr	r3, [r7, #12]
 801c542:	2b00      	cmp	r3, #0
 801c544:	d102      	bne.n	801c54c <cmd_taskinfo+0x1c>
 801c546:	f04f 33ff 	mov.w	r3, #4294967295
 801c54a:	e058      	b.n	801c5fe <cmd_taskinfo+0xce>
    
    SHELL_LOG_TASK_INFO("Task information requested");
 801c54c:	4a2e      	ldr	r2, [pc, #184]	@ (801c608 <cmd_taskinfo+0xd8>)
 801c54e:	2101      	movs	r1, #1
 801c550:	2003      	movs	r0, #3
 801c552:	f001 fe75 	bl	801e240 <shellLogPrint>
    
    SHELL_LOG_TASK_INFO("=== FreeRTOS Task Information ===");
 801c556:	4a2d      	ldr	r2, [pc, #180]	@ (801c60c <cmd_taskinfo+0xdc>)
 801c558:	2101      	movs	r1, #1
 801c55a:	2003      	movs	r0, #3
 801c55c:	f001 fe70 	bl	801e240 <shellLogPrint>
    SHELL_LOG_TASK_INFO("Kernel State: %s", 
 801c560:	f7fc fa6a 	bl	8018a38 <xTaskGetSchedulerState>
 801c564:	4603      	mov	r3, r0
 801c566:	2b02      	cmp	r3, #2
 801c568:	d101      	bne.n	801c56e <cmd_taskinfo+0x3e>
 801c56a:	4b29      	ldr	r3, [pc, #164]	@ (801c610 <cmd_taskinfo+0xe0>)
 801c56c:	e000      	b.n	801c570 <cmd_taskinfo+0x40>
 801c56e:	4b29      	ldr	r3, [pc, #164]	@ (801c614 <cmd_taskinfo+0xe4>)
 801c570:	4a29      	ldr	r2, [pc, #164]	@ (801c618 <cmd_taskinfo+0xe8>)
 801c572:	2101      	movs	r1, #1
 801c574:	2003      	movs	r0, #3
 801c576:	f001 fe63 	bl	801e240 <shellLogPrint>
           (xTaskGetSchedulerState() == taskSCHEDULER_RUNNING) ? "Running" : "Not Running");
    SHELL_LOG_TASK_INFO("Kernel Tick: %lu", xTaskGetTickCount());
 801c57a:	f7fb fc85 	bl	8017e88 <xTaskGetTickCount>
 801c57e:	4603      	mov	r3, r0
 801c580:	4a26      	ldr	r2, [pc, #152]	@ (801c61c <cmd_taskinfo+0xec>)
 801c582:	2101      	movs	r1, #1
 801c584:	2003      	movs	r0, #3
 801c586:	f001 fe5b 	bl	801e240 <shellLogPrint>
    SHELL_LOG_TASK_INFO("Kernel Frequency: %lu Hz", (uint32_t)configTICK_RATE_HZ);
 801c58a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801c58e:	4a24      	ldr	r2, [pc, #144]	@ (801c620 <cmd_taskinfo+0xf0>)
 801c590:	2101      	movs	r1, #1
 801c592:	2003      	movs	r0, #3
 801c594:	f001 fe54 	bl	801e240 <shellLogPrint>
    
    // 记录任务调度器状态
    if (xTaskGetSchedulerState() == taskSCHEDULER_RUNNING) {
 801c598:	f7fc fa4e 	bl	8018a38 <xTaskGetSchedulerState>
 801c59c:	4603      	mov	r3, r0
 801c59e:	2b02      	cmp	r3, #2
 801c5a0:	d108      	bne.n	801c5b4 <cmd_taskinfo+0x84>
        SHELL_LOG_TASK_DEBUG("FreeRTOS scheduler is running, tick: %lu", xTaskGetTickCount());
 801c5a2:	f7fb fc71 	bl	8017e88 <xTaskGetTickCount>
 801c5a6:	4603      	mov	r3, r0
 801c5a8:	4a1e      	ldr	r2, [pc, #120]	@ (801c624 <cmd_taskinfo+0xf4>)
 801c5aa:	2100      	movs	r1, #0
 801c5ac:	2003      	movs	r0, #3
 801c5ae:	f001 fe47 	bl	801e240 <shellLogPrint>
 801c5b2:	e004      	b.n	801c5be <cmd_taskinfo+0x8e>
    } else {
        SHELL_LOG_TASK_WARNING("FreeRTOS scheduler is not running");
 801c5b4:	4a1c      	ldr	r2, [pc, #112]	@ (801c628 <cmd_taskinfo+0xf8>)
 801c5b6:	2102      	movs	r1, #2
 801c5b8:	2003      	movs	r0, #3
 801c5ba:	f001 fe41 	bl	801e240 <shellLogPrint>
    }
    
    #if (configUSE_TRACE_FACILITY == 1) && (configUSE_STATS_FORMATTING_FUNCTIONS == 1)
    char *pcWriteBuffer = pvPortMalloc(1024);
 801c5be:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 801c5c2:	f7fd fb6f 	bl	8019ca4 <pvPortMalloc>
 801c5c6:	60b8      	str	r0, [r7, #8]
    if (pcWriteBuffer != NULL) {
 801c5c8:	68bb      	ldr	r3, [r7, #8]
 801c5ca:	2b00      	cmp	r3, #0
 801c5cc:	d011      	beq.n	801c5f2 <cmd_taskinfo+0xc2>
        vTaskList(pcWriteBuffer);
 801c5ce:	68b8      	ldr	r0, [r7, #8]
 801c5d0:	f7fc fbd2 	bl	8018d78 <vTaskList>
        SHELL_LOG_TASK_INFO("Task List:\n%s", pcWriteBuffer);
 801c5d4:	68bb      	ldr	r3, [r7, #8]
 801c5d6:	4a15      	ldr	r2, [pc, #84]	@ (801c62c <cmd_taskinfo+0xfc>)
 801c5d8:	2101      	movs	r1, #1
 801c5da:	2003      	movs	r0, #3
 801c5dc:	f001 fe30 	bl	801e240 <shellLogPrint>
        SHELL_LOG_TASK_DEBUG("Task list generated successfully");
 801c5e0:	4a13      	ldr	r2, [pc, #76]	@ (801c630 <cmd_taskinfo+0x100>)
 801c5e2:	2100      	movs	r1, #0
 801c5e4:	2003      	movs	r0, #3
 801c5e6:	f001 fe2b 	bl	801e240 <shellLogPrint>
        vPortFree(pcWriteBuffer);
 801c5ea:	68b8      	ldr	r0, [r7, #8]
 801c5ec:	f7fd fc2e 	bl	8019e4c <vPortFree>
 801c5f0:	e004      	b.n	801c5fc <cmd_taskinfo+0xcc>
    } else {
        SHELL_LOG_TASK_ERROR("Failed to allocate memory for task list");
 801c5f2:	4a10      	ldr	r2, [pc, #64]	@ (801c634 <cmd_taskinfo+0x104>)
 801c5f4:	2103      	movs	r1, #3
 801c5f6:	2003      	movs	r0, #3
 801c5f8:	f001 fe22 	bl	801e240 <shellLogPrint>
    }
    #endif
    
    return 0;
 801c5fc:	2300      	movs	r3, #0
}
 801c5fe:	4618      	mov	r0, r3
 801c600:	3710      	adds	r7, #16
 801c602:	46bd      	mov	sp, r7
 801c604:	bd80      	pop	{r7, pc}
 801c606:	bf00      	nop
 801c608:	08021d68 	.word	0x08021d68
 801c60c:	08021d84 	.word	0x08021d84
 801c610:	08021da8 	.word	0x08021da8
 801c614:	08021db0 	.word	0x08021db0
 801c618:	08021dbc 	.word	0x08021dbc
 801c61c:	08021dd0 	.word	0x08021dd0
 801c620:	08021de4 	.word	0x08021de4
 801c624:	08021e00 	.word	0x08021e00
 801c628:	08021e2c 	.word	0x08021e2c
 801c62c:	08021e50 	.word	0x08021e50
 801c630:	08021e60 	.word	0x08021e60
 801c634:	08021e84 	.word	0x08021e84

0801c638 <cmd_reboot>:
SHELL_EXPORT_CMD(SHELL_CMD_PERMISSION(0)|SHELL_CMD_TYPE(SHELL_TYPE_CMD_MAIN), 
                 taskinfo, cmd_taskinfo, show task information);

/* 重启命令 */
int cmd_reboot(int argc, char *argv[])
{
 801c638:	b580      	push	{r7, lr}
 801c63a:	b082      	sub	sp, #8
 801c63c:	af00      	add	r7, sp, #0
 801c63e:	6078      	str	r0, [r7, #4]
 801c640:	6039      	str	r1, [r7, #0]
    SHELL_LOG_SYS_WARNING("System reboot requested by user");
 801c642:	4a0a      	ldr	r2, [pc, #40]	@ (801c66c <cmd_reboot+0x34>)
 801c644:	2102      	movs	r1, #2
 801c646:	2000      	movs	r0, #0
 801c648:	f001 fdfa 	bl	801e240 <shellLogPrint>
    SHELL_LOG_SYS_WARNING("System rebooting...");
 801c64c:	4a08      	ldr	r2, [pc, #32]	@ (801c670 <cmd_reboot+0x38>)
 801c64e:	2102      	movs	r1, #2
 801c650:	2000      	movs	r0, #0
 801c652:	f001 fdf5 	bl	801e240 <shellLogPrint>
    
    SHELL_LOG_SYS_INFO("System rebooting in 100ms...");
 801c656:	4a07      	ldr	r2, [pc, #28]	@ (801c674 <cmd_reboot+0x3c>)
 801c658:	2101      	movs	r1, #1
 801c65a:	2000      	movs	r0, #0
 801c65c:	f001 fdf0 	bl	801e240 <shellLogPrint>
    HAL_Delay(100);
 801c660:	2064      	movs	r0, #100	@ 0x64
 801c662:	f7e7 f857 	bl	8003714 <HAL_Delay>
    NVIC_SystemReset();
 801c666:	f7ff fded 	bl	801c244 <__NVIC_SystemReset>
 801c66a:	bf00      	nop
 801c66c:	08021eac 	.word	0x08021eac
 801c670:	08021ecc 	.word	0x08021ecc
 801c674:	08021ee0 	.word	0x08021ee0

0801c678 <cmd_led>:
                 reboot, cmd_reboot, reboot system);


/* LED控制命令（如果有LED的话） */
int cmd_led(int argc, char *argv[])
{
 801c678:	b580      	push	{r7, lr}
 801c67a:	b084      	sub	sp, #16
 801c67c:	af00      	add	r7, sp, #0
 801c67e:	6078      	str	r0, [r7, #4]
 801c680:	6039      	str	r1, [r7, #0]
    Shell *shell = shellGetCurrent();
 801c682:	f7fd fdbd 	bl	801a200 <shellGetCurrent>
 801c686:	60f8      	str	r0, [r7, #12]
    if (!shell) return -1;
 801c688:	68fb      	ldr	r3, [r7, #12]
 801c68a:	2b00      	cmp	r3, #0
 801c68c:	d102      	bne.n	801c694 <cmd_led+0x1c>
 801c68e:	f04f 33ff 	mov.w	r3, #4294967295
 801c692:	e050      	b.n	801c736 <cmd_led+0xbe>
    
    if (argc < 2) {
 801c694:	687b      	ldr	r3, [r7, #4]
 801c696:	2b01      	cmp	r3, #1
 801c698:	dc0c      	bgt.n	801c6b4 <cmd_led+0x3c>
        SHELL_LOG_USER_WARNING("LED command called without parameters");
 801c69a:	4a29      	ldr	r2, [pc, #164]	@ (801c740 <cmd_led+0xc8>)
 801c69c:	2102      	movs	r1, #2
 801c69e:	2006      	movs	r0, #6
 801c6a0:	f001 fdce 	bl	801e240 <shellLogPrint>
        SHELL_LOG_USER_INFO("Usage: led <on|off|toggle>");
 801c6a4:	4a27      	ldr	r2, [pc, #156]	@ (801c744 <cmd_led+0xcc>)
 801c6a6:	2101      	movs	r1, #1
 801c6a8:	2006      	movs	r0, #6
 801c6aa:	f001 fdc9 	bl	801e240 <shellLogPrint>
        return -1;
 801c6ae:	f04f 33ff 	mov.w	r3, #4294967295
 801c6b2:	e040      	b.n	801c736 <cmd_led+0xbe>
    }
    
    if (strcmp(argv[1], "on") == 0) {
 801c6b4:	683b      	ldr	r3, [r7, #0]
 801c6b6:	3304      	adds	r3, #4
 801c6b8:	681b      	ldr	r3, [r3, #0]
 801c6ba:	4923      	ldr	r1, [pc, #140]	@ (801c748 <cmd_led+0xd0>)
 801c6bc:	4618      	mov	r0, r3
 801c6be:	f7e3 fe27 	bl	8000310 <strcmp>
 801c6c2:	4603      	mov	r3, r0
 801c6c4:	2b00      	cmp	r3, #0
 801c6c6:	d105      	bne.n	801c6d4 <cmd_led+0x5c>
        SHELL_LOG_USER_INFO("LED turned ON");
 801c6c8:	4a20      	ldr	r2, [pc, #128]	@ (801c74c <cmd_led+0xd4>)
 801c6ca:	2101      	movs	r1, #1
 801c6cc:	2006      	movs	r0, #6
 801c6ce:	f001 fdb7 	bl	801e240 <shellLogPrint>
 801c6d2:	e02f      	b.n	801c734 <cmd_led+0xbc>
        // HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
    } else if (strcmp(argv[1], "off") == 0) {
 801c6d4:	683b      	ldr	r3, [r7, #0]
 801c6d6:	3304      	adds	r3, #4
 801c6d8:	681b      	ldr	r3, [r3, #0]
 801c6da:	491d      	ldr	r1, [pc, #116]	@ (801c750 <cmd_led+0xd8>)
 801c6dc:	4618      	mov	r0, r3
 801c6de:	f7e3 fe17 	bl	8000310 <strcmp>
 801c6e2:	4603      	mov	r3, r0
 801c6e4:	2b00      	cmp	r3, #0
 801c6e6:	d105      	bne.n	801c6f4 <cmd_led+0x7c>
        SHELL_LOG_USER_INFO("LED turned OFF");
 801c6e8:	4a1a      	ldr	r2, [pc, #104]	@ (801c754 <cmd_led+0xdc>)
 801c6ea:	2101      	movs	r1, #1
 801c6ec:	2006      	movs	r0, #6
 801c6ee:	f001 fda7 	bl	801e240 <shellLogPrint>
 801c6f2:	e01f      	b.n	801c734 <cmd_led+0xbc>
        // HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
    } else if (strcmp(argv[1], "toggle") == 0) {
 801c6f4:	683b      	ldr	r3, [r7, #0]
 801c6f6:	3304      	adds	r3, #4
 801c6f8:	681b      	ldr	r3, [r3, #0]
 801c6fa:	4917      	ldr	r1, [pc, #92]	@ (801c758 <cmd_led+0xe0>)
 801c6fc:	4618      	mov	r0, r3
 801c6fe:	f7e3 fe07 	bl	8000310 <strcmp>
 801c702:	4603      	mov	r3, r0
 801c704:	2b00      	cmp	r3, #0
 801c706:	d105      	bne.n	801c714 <cmd_led+0x9c>
        SHELL_LOG_USER_INFO("LED toggled");
 801c708:	4a14      	ldr	r2, [pc, #80]	@ (801c75c <cmd_led+0xe4>)
 801c70a:	2101      	movs	r1, #1
 801c70c:	2006      	movs	r0, #6
 801c70e:	f001 fd97 	bl	801e240 <shellLogPrint>
 801c712:	e00f      	b.n	801c734 <cmd_led+0xbc>
        // HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
    } else {
        SHELL_LOG_USER_ERROR("Invalid LED parameter: %s", argv[1]);
 801c714:	683b      	ldr	r3, [r7, #0]
 801c716:	3304      	adds	r3, #4
 801c718:	681b      	ldr	r3, [r3, #0]
 801c71a:	4a11      	ldr	r2, [pc, #68]	@ (801c760 <cmd_led+0xe8>)
 801c71c:	2103      	movs	r1, #3
 801c71e:	2006      	movs	r0, #6
 801c720:	f001 fd8e 	bl	801e240 <shellLogPrint>
        SHELL_LOG_USER_ERROR("Invalid parameter. Use: on, off, or toggle");
 801c724:	4a0f      	ldr	r2, [pc, #60]	@ (801c764 <cmd_led+0xec>)
 801c726:	2103      	movs	r1, #3
 801c728:	2006      	movs	r0, #6
 801c72a:	f001 fd89 	bl	801e240 <shellLogPrint>
        return -1;
 801c72e:	f04f 33ff 	mov.w	r3, #4294967295
 801c732:	e000      	b.n	801c736 <cmd_led+0xbe>
    }
    
    return 0;
 801c734:	2300      	movs	r3, #0
}
 801c736:	4618      	mov	r0, r3
 801c738:	3710      	adds	r7, #16
 801c73a:	46bd      	mov	sp, r7
 801c73c:	bd80      	pop	{r7, pc}
 801c73e:	bf00      	nop
 801c740:	08021f00 	.word	0x08021f00
 801c744:	08021f28 	.word	0x08021f28
 801c748:	08021f44 	.word	0x08021f44
 801c74c:	08021f48 	.word	0x08021f48
 801c750:	08021f58 	.word	0x08021f58
 801c754:	08021f5c 	.word	0x08021f5c
 801c758:	08021f6c 	.word	0x08021f6c
 801c75c:	08021f74 	.word	0x08021f74
 801c760:	08021f80 	.word	0x08021f80
 801c764:	08021f9c 	.word	0x08021f9c

0801c768 <cmd_clocktest>:
SHELL_EXPORT_CMD(SHELL_CMD_PERMISSION(0)|SHELL_CMD_TYPE(SHELL_TYPE_CMD_MAIN), 
                 led, cmd_led, control LED);

/* 时钟配置测试命令 */
int cmd_clocktest(int argc, char *argv[])
{
 801c768:	b580      	push	{r7, lr}
 801c76a:	b084      	sub	sp, #16
 801c76c:	af00      	add	r7, sp, #0
 801c76e:	6078      	str	r0, [r7, #4]
 801c770:	6039      	str	r1, [r7, #0]
    Shell *shell = shellGetCurrent();
 801c772:	f7fd fd45 	bl	801a200 <shellGetCurrent>
 801c776:	60f8      	str	r0, [r7, #12]
    if (!shell) return -1;
 801c778:	68fb      	ldr	r3, [r7, #12]
 801c77a:	2b00      	cmp	r3, #0
 801c77c:	d102      	bne.n	801c784 <cmd_clocktest+0x1c>
 801c77e:	f04f 33ff 	mov.w	r3, #4294967295
 801c782:	e00c      	b.n	801c79e <cmd_clocktest+0x36>
    
    SHELL_LOG_CLK_INFO("Starting clock profile test");
 801c784:	4a08      	ldr	r2, [pc, #32]	@ (801c7a8 <cmd_clocktest+0x40>)
 801c786:	2101      	movs	r1, #1
 801c788:	2001      	movs	r0, #1
 801c78a:	f001 fd59 	bl	801e240 <shellLogPrint>
    
    TestAllClockProfiles();
 801c78e:	f7e4 f84d 	bl	800082c <TestAllClockProfiles>
    
    SHELL_LOG_CLK_INFO("Clock profile test completed");
 801c792:	4a06      	ldr	r2, [pc, #24]	@ (801c7ac <cmd_clocktest+0x44>)
 801c794:	2101      	movs	r1, #1
 801c796:	2001      	movs	r0, #1
 801c798:	f001 fd52 	bl	801e240 <shellLogPrint>
    return 0;
 801c79c:	2300      	movs	r3, #0
}
 801c79e:	4618      	mov	r0, r3
 801c7a0:	3710      	adds	r7, #16
 801c7a2:	46bd      	mov	sp, r7
 801c7a4:	bd80      	pop	{r7, pc}
 801c7a6:	bf00      	nop
 801c7a8:	08021fc8 	.word	0x08021fc8
 801c7ac:	08021fe4 	.word	0x08021fe4

0801c7b0 <cmd_setclock>:
SHELL_EXPORT_CMD(SHELL_CMD_PERMISSION(0)|SHELL_CMD_TYPE(SHELL_TYPE_CMD_MAIN), 
                 clocktest, cmd_clocktest, test all clock profiles);

/* 时钟切换命令 */
int cmd_setclock(int argc, char *argv[])
{
 801c7b0:	b590      	push	{r4, r7, lr}
 801c7b2:	b08b      	sub	sp, #44	@ 0x2c
 801c7b4:	af02      	add	r7, sp, #8
 801c7b6:	6078      	str	r0, [r7, #4]
 801c7b8:	6039      	str	r1, [r7, #0]
    Shell *shell = shellGetCurrent();
 801c7ba:	f7fd fd21 	bl	801a200 <shellGetCurrent>
 801c7be:	61f8      	str	r0, [r7, #28]
    if (!shell) return -1;
 801c7c0:	69fb      	ldr	r3, [r7, #28]
 801c7c2:	2b00      	cmp	r3, #0
 801c7c4:	d102      	bne.n	801c7cc <cmd_setclock+0x1c>
 801c7c6:	f04f 33ff 	mov.w	r3, #4294967295
 801c7ca:	e110      	b.n	801c9ee <cmd_setclock+0x23e>
    
    if (argc < 2) {
 801c7cc:	687b      	ldr	r3, [r7, #4]
 801c7ce:	2b01      	cmp	r3, #1
 801c7d0:	dc4f      	bgt.n	801c872 <cmd_setclock+0xc2>
        SHELL_LOG_USER_INFO("Usage: setclock <profile>");
 801c7d2:	4a89      	ldr	r2, [pc, #548]	@ (801c9f8 <cmd_setclock+0x248>)
 801c7d4:	2101      	movs	r1, #1
 801c7d6:	2006      	movs	r0, #6
 801c7d8:	f001 fd32 	bl	801e240 <shellLogPrint>
        SHELL_LOG_USER_INFO("Available profiles:");
 801c7dc:	4a87      	ldr	r2, [pc, #540]	@ (801c9fc <cmd_setclock+0x24c>)
 801c7de:	2101      	movs	r1, #1
 801c7e0:	2006      	movs	r0, #6
 801c7e2:	f001 fd2d 	bl	801e240 <shellLogPrint>
        SHELL_LOG_USER_INFO("  0 - 32kHz (Ultra Low Power - LSI)");
 801c7e6:	4a86      	ldr	r2, [pc, #536]	@ (801ca00 <cmd_setclock+0x250>)
 801c7e8:	2101      	movs	r1, #1
 801c7ea:	2006      	movs	r0, #6
 801c7ec:	f001 fd28 	bl	801e240 <shellLogPrint>
        SHELL_LOG_USER_INFO("  1 - 24MHz (Low Power - HSI/4)");
 801c7f0:	4a84      	ldr	r2, [pc, #528]	@ (801ca04 <cmd_setclock+0x254>)
 801c7f2:	2101      	movs	r1, #1
 801c7f4:	2006      	movs	r0, #6
 801c7f6:	f001 fd23 	bl	801e240 <shellLogPrint>
        SHELL_LOG_USER_INFO("  2 - 48MHz (Energy Saving)");
 801c7fa:	4a83      	ldr	r2, [pc, #524]	@ (801ca08 <cmd_setclock+0x258>)
 801c7fc:	2101      	movs	r1, #1
 801c7fe:	2006      	movs	r0, #6
 801c800:	f001 fd1e 	bl	801e240 <shellLogPrint>
        SHELL_LOG_USER_INFO("  3 - 96MHz (Balanced)");
 801c804:	4a81      	ldr	r2, [pc, #516]	@ (801ca0c <cmd_setclock+0x25c>)
 801c806:	2101      	movs	r1, #1
 801c808:	2006      	movs	r0, #6
 801c80a:	f001 fd19 	bl	801e240 <shellLogPrint>
        SHELL_LOG_USER_INFO("  4 - 128MHz (Standard)");
 801c80e:	4a80      	ldr	r2, [pc, #512]	@ (801ca10 <cmd_setclock+0x260>)
 801c810:	2101      	movs	r1, #1
 801c812:	2006      	movs	r0, #6
 801c814:	f001 fd14 	bl	801e240 <shellLogPrint>
        SHELL_LOG_USER_INFO("  5 - 200MHz (High Efficiency)");
 801c818:	4a7e      	ldr	r2, [pc, #504]	@ (801ca14 <cmd_setclock+0x264>)
 801c81a:	2101      	movs	r1, #1
 801c81c:	2006      	movs	r0, #6
 801c81e:	f001 fd0f 	bl	801e240 <shellLogPrint>
        SHELL_LOG_USER_INFO("  6 - 300MHz (High Performance)");
 801c822:	4a7d      	ldr	r2, [pc, #500]	@ (801ca18 <cmd_setclock+0x268>)
 801c824:	2101      	movs	r1, #1
 801c826:	2006      	movs	r0, #6
 801c828:	f001 fd0a 	bl	801e240 <shellLogPrint>
        SHELL_LOG_USER_INFO("  7 - 400MHz (Ultra High Performance)");
 801c82c:	4a7b      	ldr	r2, [pc, #492]	@ (801ca1c <cmd_setclock+0x26c>)
 801c82e:	2101      	movs	r1, #1
 801c830:	2006      	movs	r0, #6
 801c832:	f001 fd05 	bl	801e240 <shellLogPrint>
        SHELL_LOG_USER_INFO("  8 - 550MHz (Maximum Performance)");
 801c836:	4a7a      	ldr	r2, [pc, #488]	@ (801ca20 <cmd_setclock+0x270>)
 801c838:	2101      	movs	r1, #1
 801c83a:	2006      	movs	r0, #6
 801c83c:	f001 fd00 	bl	801e240 <shellLogPrint>
        SHELL_LOG_USER_INFO("Current System Clock: %lu Hz (%.1f MHz)", 
 801c840:	f7ed fbac 	bl	8009f9c <HAL_RCC_GetSysClockFreq>
 801c844:	4604      	mov	r4, r0
 801c846:	f7ed fba9 	bl	8009f9c <HAL_RCC_GetSysClockFreq>
 801c84a:	ee07 0a90 	vmov	s15, r0
 801c84e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801c852:	eddf 6a74 	vldr	s13, [pc, #464]	@ 801ca24 <cmd_setclock+0x274>
 801c856:	eec7 7a26 	vdiv.f32	s15, s14, s13
 801c85a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 801c85e:	ed8d 7b00 	vstr	d7, [sp]
 801c862:	4623      	mov	r3, r4
 801c864:	4a70      	ldr	r2, [pc, #448]	@ (801ca28 <cmd_setclock+0x278>)
 801c866:	2101      	movs	r1, #1
 801c868:	2006      	movs	r0, #6
 801c86a:	f001 fce9 	bl	801e240 <shellLogPrint>
               HAL_RCC_GetSysClockFreq(), HAL_RCC_GetSysClockFreq() / 1000000.0f);
        return 0;
 801c86e:	2300      	movs	r3, #0
 801c870:	e0bd      	b.n	801c9ee <cmd_setclock+0x23e>
    }
    
    int profile = atoi(argv[1]);
 801c872:	683b      	ldr	r3, [r7, #0]
 801c874:	3304      	adds	r3, #4
 801c876:	681b      	ldr	r3, [r3, #0]
 801c878:	4618      	mov	r0, r3
 801c87a:	f002 fa07 	bl	801ec8c <atoi>
 801c87e:	61b8      	str	r0, [r7, #24]
    if (profile < 0 || profile > 8) {
 801c880:	69bb      	ldr	r3, [r7, #24]
 801c882:	2b00      	cmp	r3, #0
 801c884:	db02      	blt.n	801c88c <cmd_setclock+0xdc>
 801c886:	69bb      	ldr	r3, [r7, #24]
 801c888:	2b08      	cmp	r3, #8
 801c88a:	dd0e      	ble.n	801c8aa <cmd_setclock+0xfa>
        SHELL_LOG_CLK_ERROR("Invalid clock profile %d requested", profile);
 801c88c:	69bb      	ldr	r3, [r7, #24]
 801c88e:	4a67      	ldr	r2, [pc, #412]	@ (801ca2c <cmd_setclock+0x27c>)
 801c890:	2103      	movs	r1, #3
 801c892:	2001      	movs	r0, #1
 801c894:	f001 fcd4 	bl	801e240 <shellLogPrint>
        SHELL_LOG_CLK_ERROR("Error: Invalid profile %d. Valid range: 0-8", profile);
 801c898:	69bb      	ldr	r3, [r7, #24]
 801c89a:	4a65      	ldr	r2, [pc, #404]	@ (801ca30 <cmd_setclock+0x280>)
 801c89c:	2103      	movs	r1, #3
 801c89e:	2001      	movs	r0, #1
 801c8a0:	f001 fcce 	bl	801e240 <shellLogPrint>
        return -1;
 801c8a4:	f04f 33ff 	mov.w	r3, #4294967295
 801c8a8:	e0a1      	b.n	801c9ee <cmd_setclock+0x23e>
    }
    
    SHELL_LOG_CLK_INFO("Switching to clock profile %d", profile);
 801c8aa:	69bb      	ldr	r3, [r7, #24]
 801c8ac:	4a61      	ldr	r2, [pc, #388]	@ (801ca34 <cmd_setclock+0x284>)
 801c8ae:	2101      	movs	r1, #1
 801c8b0:	2001      	movs	r0, #1
 801c8b2:	f001 fcc5 	bl	801e240 <shellLogPrint>
    
    // 记录切换前的时钟频率
    uint32_t old_freq = HAL_RCC_GetSysClockFreq();
 801c8b6:	f7ed fb71 	bl	8009f9c <HAL_RCC_GetSysClockFreq>
 801c8ba:	6178      	str	r0, [r7, #20]
    SHELL_LOG_CLK_DEBUG("Current frequency before switch: %lu Hz", old_freq);
 801c8bc:	697b      	ldr	r3, [r7, #20]
 801c8be:	4a5e      	ldr	r2, [pc, #376]	@ (801ca38 <cmd_setclock+0x288>)
 801c8c0:	2100      	movs	r1, #0
 801c8c2:	2001      	movs	r0, #1
 801c8c4:	f001 fcbc 	bl	801e240 <shellLogPrint>
    
    // 执行时钟切换
    ClockProfile_t clock_profile = (ClockProfile_t)profile;
 801c8c8:	69bb      	ldr	r3, [r7, #24]
 801c8ca:	74fb      	strb	r3, [r7, #19]
    if (SwitchSystemClock(clock_profile) == HAL_OK) {
 801c8cc:	7cfb      	ldrb	r3, [r7, #19]
 801c8ce:	4618      	mov	r0, r3
 801c8d0:	f7e4 f8a4 	bl	8000a1c <SwitchSystemClock>
 801c8d4:	4603      	mov	r3, r0
 801c8d6:	2b00      	cmp	r3, #0
 801c8d8:	d17c      	bne.n	801c9d4 <cmd_setclock+0x224>
        // 切换成功，显示新的时钟频率
        uint32_t new_freq = HAL_RCC_GetSysClockFreq();
 801c8da:	f7ed fb5f 	bl	8009f9c <HAL_RCC_GetSysClockFreq>
 801c8de:	60f8      	str	r0, [r7, #12]
        SHELL_LOG_CLK_INFO("Clock switch successful: %lu Hz -> %lu Hz", old_freq, new_freq);
 801c8e0:	68fb      	ldr	r3, [r7, #12]
 801c8e2:	9300      	str	r3, [sp, #0]
 801c8e4:	697b      	ldr	r3, [r7, #20]
 801c8e6:	4a55      	ldr	r2, [pc, #340]	@ (801ca3c <cmd_setclock+0x28c>)
 801c8e8:	2101      	movs	r1, #1
 801c8ea:	2001      	movs	r0, #1
 801c8ec:	f001 fca8 	bl	801e240 <shellLogPrint>
        
        SHELL_LOG_CLK_INFO("Clock switch successful!");
 801c8f0:	4a53      	ldr	r2, [pc, #332]	@ (801ca40 <cmd_setclock+0x290>)
 801c8f2:	2101      	movs	r1, #1
 801c8f4:	2001      	movs	r0, #1
 801c8f6:	f001 fca3 	bl	801e240 <shellLogPrint>
        SHELL_LOG_CLK_INFO("Previous: %lu Hz (%.1f MHz)", old_freq, old_freq / 1000000.0f);
 801c8fa:	697b      	ldr	r3, [r7, #20]
 801c8fc:	ee07 3a90 	vmov	s15, r3
 801c900:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801c904:	eddf 6a47 	vldr	s13, [pc, #284]	@ 801ca24 <cmd_setclock+0x274>
 801c908:	eec7 7a26 	vdiv.f32	s15, s14, s13
 801c90c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 801c910:	ed8d 7b00 	vstr	d7, [sp]
 801c914:	697b      	ldr	r3, [r7, #20]
 801c916:	4a4b      	ldr	r2, [pc, #300]	@ (801ca44 <cmd_setclock+0x294>)
 801c918:	2101      	movs	r1, #1
 801c91a:	2001      	movs	r0, #1
 801c91c:	f001 fc90 	bl	801e240 <shellLogPrint>
        SHELL_LOG_CLK_INFO("Current:  %lu Hz (%.1f MHz)", new_freq, new_freq / 1000000.0f);
 801c920:	68fb      	ldr	r3, [r7, #12]
 801c922:	ee07 3a90 	vmov	s15, r3
 801c926:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801c92a:	eddf 6a3e 	vldr	s13, [pc, #248]	@ 801ca24 <cmd_setclock+0x274>
 801c92e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 801c932:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 801c936:	ed8d 7b00 	vstr	d7, [sp]
 801c93a:	68fb      	ldr	r3, [r7, #12]
 801c93c:	4a42      	ldr	r2, [pc, #264]	@ (801ca48 <cmd_setclock+0x298>)
 801c93e:	2101      	movs	r1, #1
 801c940:	2001      	movs	r0, #1
 801c942:	f001 fc7d 	bl	801e240 <shellLogPrint>
        
        // 显示其他时钟域的频率
        SHELL_LOG_CLK_INFO("HCLK:  %lu Hz (%.1f MHz)", HAL_RCC_GetHCLKFreq(), HAL_RCC_GetHCLKFreq() / 1000000.0f);
 801c946:	f7ed fca3 	bl	800a290 <HAL_RCC_GetHCLKFreq>
 801c94a:	4604      	mov	r4, r0
 801c94c:	f7ed fca0 	bl	800a290 <HAL_RCC_GetHCLKFreq>
 801c950:	ee07 0a90 	vmov	s15, r0
 801c954:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801c958:	eddf 6a32 	vldr	s13, [pc, #200]	@ 801ca24 <cmd_setclock+0x274>
 801c95c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 801c960:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 801c964:	ed8d 7b00 	vstr	d7, [sp]
 801c968:	4623      	mov	r3, r4
 801c96a:	4a38      	ldr	r2, [pc, #224]	@ (801ca4c <cmd_setclock+0x29c>)
 801c96c:	2101      	movs	r1, #1
 801c96e:	2001      	movs	r0, #1
 801c970:	f001 fc66 	bl	801e240 <shellLogPrint>
        SHELL_LOG_CLK_INFO("PCLK1: %lu Hz (%.1f MHz)", HAL_RCC_GetPCLK1Freq(), HAL_RCC_GetPCLK1Freq() / 1000000.0f);
 801c974:	f7ed fcbc 	bl	800a2f0 <HAL_RCC_GetPCLK1Freq>
 801c978:	4604      	mov	r4, r0
 801c97a:	f7ed fcb9 	bl	800a2f0 <HAL_RCC_GetPCLK1Freq>
 801c97e:	ee07 0a90 	vmov	s15, r0
 801c982:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801c986:	eddf 6a27 	vldr	s13, [pc, #156]	@ 801ca24 <cmd_setclock+0x274>
 801c98a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 801c98e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 801c992:	ed8d 7b00 	vstr	d7, [sp]
 801c996:	4623      	mov	r3, r4
 801c998:	4a2d      	ldr	r2, [pc, #180]	@ (801ca50 <cmd_setclock+0x2a0>)
 801c99a:	2101      	movs	r1, #1
 801c99c:	2001      	movs	r0, #1
 801c99e:	f001 fc4f 	bl	801e240 <shellLogPrint>
        SHELL_LOG_CLK_INFO("PCLK2: %lu Hz (%.1f MHz)", HAL_RCC_GetPCLK2Freq(), HAL_RCC_GetPCLK2Freq() / 1000000.0f);
 801c9a2:	f7ed fcbb 	bl	800a31c <HAL_RCC_GetPCLK2Freq>
 801c9a6:	4604      	mov	r4, r0
 801c9a8:	f7ed fcb8 	bl	800a31c <HAL_RCC_GetPCLK2Freq>
 801c9ac:	ee07 0a90 	vmov	s15, r0
 801c9b0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801c9b4:	eddf 6a1b 	vldr	s13, [pc, #108]	@ 801ca24 <cmd_setclock+0x274>
 801c9b8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 801c9bc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 801c9c0:	ed8d 7b00 	vstr	d7, [sp]
 801c9c4:	4623      	mov	r3, r4
 801c9c6:	4a23      	ldr	r2, [pc, #140]	@ (801ca54 <cmd_setclock+0x2a4>)
 801c9c8:	2101      	movs	r1, #1
 801c9ca:	2001      	movs	r0, #1
 801c9cc:	f001 fc38 	bl	801e240 <shellLogPrint>
        SHELL_LOG_CLK_ERROR("Clock switch to profile %d failed", profile);
        SHELL_LOG_CLK_ERROR("Clock switch failed!");
        return -1;
    }
    
    return 0;
 801c9d0:	2300      	movs	r3, #0
 801c9d2:	e00c      	b.n	801c9ee <cmd_setclock+0x23e>
        SHELL_LOG_CLK_ERROR("Clock switch to profile %d failed", profile);
 801c9d4:	69bb      	ldr	r3, [r7, #24]
 801c9d6:	4a20      	ldr	r2, [pc, #128]	@ (801ca58 <cmd_setclock+0x2a8>)
 801c9d8:	2103      	movs	r1, #3
 801c9da:	2001      	movs	r0, #1
 801c9dc:	f001 fc30 	bl	801e240 <shellLogPrint>
        SHELL_LOG_CLK_ERROR("Clock switch failed!");
 801c9e0:	4a1e      	ldr	r2, [pc, #120]	@ (801ca5c <cmd_setclock+0x2ac>)
 801c9e2:	2103      	movs	r1, #3
 801c9e4:	2001      	movs	r0, #1
 801c9e6:	f001 fc2b 	bl	801e240 <shellLogPrint>
        return -1;
 801c9ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 801c9ee:	4618      	mov	r0, r3
 801c9f0:	3724      	adds	r7, #36	@ 0x24
 801c9f2:	46bd      	mov	sp, r7
 801c9f4:	bd90      	pop	{r4, r7, pc}
 801c9f6:	bf00      	nop
 801c9f8:	08022004 	.word	0x08022004
 801c9fc:	08022020 	.word	0x08022020
 801ca00:	08022034 	.word	0x08022034
 801ca04:	08022058 	.word	0x08022058
 801ca08:	08022078 	.word	0x08022078
 801ca0c:	08022094 	.word	0x08022094
 801ca10:	080220ac 	.word	0x080220ac
 801ca14:	080220c4 	.word	0x080220c4
 801ca18:	080220e4 	.word	0x080220e4
 801ca1c:	08022104 	.word	0x08022104
 801ca20:	0802212c 	.word	0x0802212c
 801ca24:	49742400 	.word	0x49742400
 801ca28:	08022150 	.word	0x08022150
 801ca2c:	08022178 	.word	0x08022178
 801ca30:	0802219c 	.word	0x0802219c
 801ca34:	080221c8 	.word	0x080221c8
 801ca38:	080221e8 	.word	0x080221e8
 801ca3c:	08022210 	.word	0x08022210
 801ca40:	0802223c 	.word	0x0802223c
 801ca44:	08022258 	.word	0x08022258
 801ca48:	08022274 	.word	0x08022274
 801ca4c:	08022290 	.word	0x08022290
 801ca50:	080222ac 	.word	0x080222ac
 801ca54:	080222c8 	.word	0x080222c8
 801ca58:	080222e4 	.word	0x080222e4
 801ca5c:	08022308 	.word	0x08022308

0801ca60 <cmd_version>:
SHELL_EXPORT_CMD(SHELL_CMD_PERMISSION(0)|SHELL_CMD_TYPE(SHELL_TYPE_CMD_MAIN), 
                 setclock, cmd_setclock, switch system clock profile);

/* 版本信息命令 */
int cmd_version(int argc, char *argv[])
{
 801ca60:	b580      	push	{r7, lr}
 801ca62:	b088      	sub	sp, #32
 801ca64:	af04      	add	r7, sp, #16
 801ca66:	6078      	str	r0, [r7, #4]
 801ca68:	6039      	str	r1, [r7, #0]
    Shell *shell = shellGetCurrent();
 801ca6a:	f7fd fbc9 	bl	801a200 <shellGetCurrent>
 801ca6e:	60f8      	str	r0, [r7, #12]
    if (!shell) return -1;
 801ca70:	68fb      	ldr	r3, [r7, #12]
 801ca72:	2b00      	cmp	r3, #0
 801ca74:	d102      	bne.n	801ca7c <cmd_version+0x1c>
 801ca76:	f04f 33ff 	mov.w	r3, #4294967295
 801ca7a:	e039      	b.n	801caf0 <cmd_version+0x90>
    
    SHELL_LOG_SYS_INFO("Version information requested");
 801ca7c:	4a1e      	ldr	r2, [pc, #120]	@ (801caf8 <cmd_version+0x98>)
 801ca7e:	2101      	movs	r1, #1
 801ca80:	2000      	movs	r0, #0
 801ca82:	f001 fbdd 	bl	801e240 <shellLogPrint>
    
    SHELL_LOG_SYS_INFO("=== Firmware Version Information ===");
 801ca86:	4a1d      	ldr	r2, [pc, #116]	@ (801cafc <cmd_version+0x9c>)
 801ca88:	2101      	movs	r1, #1
 801ca8a:	2000      	movs	r0, #0
 801ca8c:	f001 fbd8 	bl	801e240 <shellLogPrint>
    SHELL_LOG_SYS_INFO("Shell Version: %s", SHELL_VERSION);
 801ca90:	4b1b      	ldr	r3, [pc, #108]	@ (801cb00 <cmd_version+0xa0>)
 801ca92:	4a1c      	ldr	r2, [pc, #112]	@ (801cb04 <cmd_version+0xa4>)
 801ca94:	2101      	movs	r1, #1
 801ca96:	2000      	movs	r0, #0
 801ca98:	f001 fbd2 	bl	801e240 <shellLogPrint>
    SHELL_LOG_SYS_INFO("HAL Version: %lu", HAL_GetHalVersion());
 801ca9c:	f7e6 fe5e 	bl	800375c <HAL_GetHalVersion>
 801caa0:	4603      	mov	r3, r0
 801caa2:	4a19      	ldr	r2, [pc, #100]	@ (801cb08 <cmd_version+0xa8>)
 801caa4:	2101      	movs	r1, #1
 801caa6:	2000      	movs	r0, #0
 801caa8:	f001 fbca 	bl	801e240 <shellLogPrint>
    SHELL_LOG_SYS_INFO("FreeRTOS Version: %s", tskKERNEL_VERSION_NUMBER);
 801caac:	4b17      	ldr	r3, [pc, #92]	@ (801cb0c <cmd_version+0xac>)
 801caae:	4a18      	ldr	r2, [pc, #96]	@ (801cb10 <cmd_version+0xb0>)
 801cab0:	2101      	movs	r1, #1
 801cab2:	2000      	movs	r0, #0
 801cab4:	f001 fbc4 	bl	801e240 <shellLogPrint>
    SHELL_LOG_SYS_INFO("Build Date: %s %s", __DATE__, __TIME__);
 801cab8:	4b16      	ldr	r3, [pc, #88]	@ (801cb14 <cmd_version+0xb4>)
 801caba:	9300      	str	r3, [sp, #0]
 801cabc:	4b16      	ldr	r3, [pc, #88]	@ (801cb18 <cmd_version+0xb8>)
 801cabe:	4a17      	ldr	r2, [pc, #92]	@ (801cb1c <cmd_version+0xbc>)
 801cac0:	2101      	movs	r1, #1
 801cac2:	2000      	movs	r0, #0
 801cac4:	f001 fbbc 	bl	801e240 <shellLogPrint>
    SHELL_LOG_SYS_INFO("MCU: STM32H725AEIX");
 801cac8:	4a15      	ldr	r2, [pc, #84]	@ (801cb20 <cmd_version+0xc0>)
 801caca:	2101      	movs	r1, #1
 801cacc:	2000      	movs	r0, #0
 801cace:	f001 fbb7 	bl	801e240 <shellLogPrint>
    
    // 记录版本信息到日志
    SHELL_LOG_SYS_DEBUG("Shell: %s, HAL: %lu, Build: %s %s", 
 801cad2:	f7e6 fe43 	bl	800375c <HAL_GetHalVersion>
 801cad6:	4603      	mov	r3, r0
 801cad8:	4a0e      	ldr	r2, [pc, #56]	@ (801cb14 <cmd_version+0xb4>)
 801cada:	9202      	str	r2, [sp, #8]
 801cadc:	4a0e      	ldr	r2, [pc, #56]	@ (801cb18 <cmd_version+0xb8>)
 801cade:	9201      	str	r2, [sp, #4]
 801cae0:	9300      	str	r3, [sp, #0]
 801cae2:	4b07      	ldr	r3, [pc, #28]	@ (801cb00 <cmd_version+0xa0>)
 801cae4:	4a0f      	ldr	r2, [pc, #60]	@ (801cb24 <cmd_version+0xc4>)
 801cae6:	2100      	movs	r1, #0
 801cae8:	2000      	movs	r0, #0
 801caea:	f001 fba9 	bl	801e240 <shellLogPrint>
                        SHELL_VERSION, HAL_GetHalVersion(), __DATE__, __TIME__);
    
    return 0;
 801caee:	2300      	movs	r3, #0
}
 801caf0:	4618      	mov	r0, r3
 801caf2:	3710      	adds	r7, #16
 801caf4:	46bd      	mov	sp, r7
 801caf6:	bd80      	pop	{r7, pc}
 801caf8:	08022320 	.word	0x08022320
 801cafc:	08022340 	.word	0x08022340
 801cb00:	08022368 	.word	0x08022368
 801cb04:	08022370 	.word	0x08022370
 801cb08:	08021c20 	.word	0x08021c20
 801cb0c:	08022384 	.word	0x08022384
 801cb10:	0802238c 	.word	0x0802238c
 801cb14:	080223c4 	.word	0x080223c4
 801cb18:	080223a4 	.word	0x080223a4
 801cb1c:	080223b0 	.word	0x080223b0
 801cb20:	080223d0 	.word	0x080223d0
 801cb24:	080223e4 	.word	0x080223e4

0801cb28 <cmd_hexdump>:
SHELL_EXPORT_CMD(SHELL_CMD_PERMISSION(0)|SHELL_CMD_TYPE(SHELL_TYPE_CMD_MAIN), 
                 version, cmd_version, show version information);

/* 十六进制dump命令 */
int cmd_hexdump(int argc, char *argv[])
{
 801cb28:	b580      	push	{r7, lr}
 801cb2a:	b0b4      	sub	sp, #208	@ 0xd0
 801cb2c:	af02      	add	r7, sp, #8
 801cb2e:	6078      	str	r0, [r7, #4]
 801cb30:	6039      	str	r1, [r7, #0]
    Shell *shell = shellGetCurrent();
 801cb32:	f7fd fb65 	bl	801a200 <shellGetCurrent>
 801cb36:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
    if (!shell) return -1;
 801cb3a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801cb3e:	2b00      	cmp	r3, #0
 801cb40:	d102      	bne.n	801cb48 <cmd_hexdump+0x20>
 801cb42:	f04f 33ff 	mov.w	r3, #4294967295
 801cb46:	e140      	b.n	801cdca <cmd_hexdump+0x2a2>
    
    if (argc < 3) {
 801cb48:	687b      	ldr	r3, [r7, #4]
 801cb4a:	2b02      	cmp	r3, #2
 801cb4c:	dc11      	bgt.n	801cb72 <cmd_hexdump+0x4a>
        SHELL_LOG_USER_WARNING("Hexdump command called with insufficient parameters");
 801cb4e:	4aa1      	ldr	r2, [pc, #644]	@ (801cdd4 <cmd_hexdump+0x2ac>)
 801cb50:	2102      	movs	r1, #2
 801cb52:	2006      	movs	r0, #6
 801cb54:	f001 fb74 	bl	801e240 <shellLogPrint>
        SHELL_LOG_USER_INFO("Usage: hexdump <address> <length>");
 801cb58:	4a9f      	ldr	r2, [pc, #636]	@ (801cdd8 <cmd_hexdump+0x2b0>)
 801cb5a:	2101      	movs	r1, #1
 801cb5c:	2006      	movs	r0, #6
 801cb5e:	f001 fb6f 	bl	801e240 <shellLogPrint>
        SHELL_LOG_USER_INFO("Example: hexdump 0x08000000 256");
 801cb62:	4a9e      	ldr	r2, [pc, #632]	@ (801cddc <cmd_hexdump+0x2b4>)
 801cb64:	2101      	movs	r1, #1
 801cb66:	2006      	movs	r0, #6
 801cb68:	f001 fb6a 	bl	801e240 <shellLogPrint>
        return -1;
 801cb6c:	f04f 33ff 	mov.w	r3, #4294967295
 801cb70:	e12b      	b.n	801cdca <cmd_hexdump+0x2a2>
    }
    
    uint32_t addr = strtoul(argv[1], NULL, 0);
 801cb72:	683b      	ldr	r3, [r7, #0]
 801cb74:	3304      	adds	r3, #4
 801cb76:	681b      	ldr	r3, [r3, #0]
 801cb78:	2200      	movs	r2, #0
 801cb7a:	2100      	movs	r1, #0
 801cb7c:	4618      	mov	r0, r3
 801cb7e:	f002 fa29 	bl	801efd4 <strtoul>
 801cb82:	f8c7 00a8 	str.w	r0, [r7, #168]	@ 0xa8
    uint32_t len = strtoul(argv[2], NULL, 0);
 801cb86:	683b      	ldr	r3, [r7, #0]
 801cb88:	3308      	adds	r3, #8
 801cb8a:	681b      	ldr	r3, [r3, #0]
 801cb8c:	2200      	movs	r2, #0
 801cb8e:	2100      	movs	r1, #0
 801cb90:	4618      	mov	r0, r3
 801cb92:	f002 fa1f 	bl	801efd4 <strtoul>
 801cb96:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4
    
    if (len > 1024) {
 801cb9a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801cb9e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801cba2:	d90e      	bls.n	801cbc2 <cmd_hexdump+0x9a>
        SHELL_LOG_USER_ERROR("Hexdump length too large: %lu bytes (max 1024)", len);
 801cba4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801cba8:	4a8d      	ldr	r2, [pc, #564]	@ (801cde0 <cmd_hexdump+0x2b8>)
 801cbaa:	2103      	movs	r1, #3
 801cbac:	2006      	movs	r0, #6
 801cbae:	f001 fb47 	bl	801e240 <shellLogPrint>
        SHELL_LOG_USER_ERROR("Length too large, max 1024 bytes");
 801cbb2:	4a8c      	ldr	r2, [pc, #560]	@ (801cde4 <cmd_hexdump+0x2bc>)
 801cbb4:	2103      	movs	r1, #3
 801cbb6:	2006      	movs	r0, #6
 801cbb8:	f001 fb42 	bl	801e240 <shellLogPrint>
        return -1;
 801cbbc:	f04f 33ff 	mov.w	r3, #4294967295
 801cbc0:	e103      	b.n	801cdca <cmd_hexdump+0x2a2>
    }
    
    SHELL_LOG_USER_INFO("Hexdump requested: addr=0x%08lX, len=%lu", addr, len);
 801cbc2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801cbc6:	9300      	str	r3, [sp, #0]
 801cbc8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 801cbcc:	4a86      	ldr	r2, [pc, #536]	@ (801cde8 <cmd_hexdump+0x2c0>)
 801cbce:	2101      	movs	r1, #1
 801cbd0:	2006      	movs	r0, #6
 801cbd2:	f001 fb35 	bl	801e240 <shellLogPrint>
    SHELL_LOG_USER_INFO("Hex dump from 0x%08lX, length %lu:", addr, len);
 801cbd6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801cbda:	9300      	str	r3, [sp, #0]
 801cbdc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 801cbe0:	4a82      	ldr	r2, [pc, #520]	@ (801cdec <cmd_hexdump+0x2c4>)
 801cbe2:	2101      	movs	r1, #1
 801cbe4:	2006      	movs	r0, #6
 801cbe6:	f001 fb2b 	bl	801e240 <shellLogPrint>
    
    uint8_t *ptr = (uint8_t *)addr;
 801cbea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 801cbee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    for (uint32_t i = 0; i < len; i += 16) {
 801cbf2:	2300      	movs	r3, #0
 801cbf4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 801cbf8:	e0da      	b.n	801cdb0 <cmd_hexdump+0x288>
        char hex_line[128];
        char ascii_line[20];
        int hex_pos = 0;
 801cbfa:	2300      	movs	r3, #0
 801cbfc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
        int ascii_pos = 0;
 801cc00:	2300      	movs	r3, #0
 801cc02:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
        
        // 格式化地址
        hex_pos += snprintf(hex_line + hex_pos, sizeof(hex_line) - hex_pos, "%08lX: ", addr + i);
 801cc06:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 801cc0a:	f107 0208 	add.w	r2, r7, #8
 801cc0e:	18d0      	adds	r0, r2, r3
 801cc10:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 801cc14:	f1c3 0180 	rsb	r1, r3, #128	@ 0x80
 801cc18:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 801cc1c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 801cc20:	4413      	add	r3, r2
 801cc22:	4a73      	ldr	r2, [pc, #460]	@ (801cdf0 <cmd_hexdump+0x2c8>)
 801cc24:	f002 f9e0 	bl	801efe8 <sniprintf>
 801cc28:	4602      	mov	r2, r0
 801cc2a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 801cc2e:	4413      	add	r3, r2
 801cc30:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
        
        // 打印十六进制
        for (uint32_t j = 0; j < 16 && (i + j) < len; j++) {
 801cc34:	2300      	movs	r3, #0
 801cc36:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 801cc3a:	e01f      	b.n	801cc7c <cmd_hexdump+0x154>
            hex_pos += snprintf(hex_line + hex_pos, sizeof(hex_line) - hex_pos, "%02X ", ptr[i + j]);
 801cc3c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 801cc40:	f107 0208 	add.w	r2, r7, #8
 801cc44:	18d0      	adds	r0, r2, r3
 801cc46:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 801cc4a:	f1c3 0180 	rsb	r1, r3, #128	@ 0x80
 801cc4e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 801cc52:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 801cc56:	4413      	add	r3, r2
 801cc58:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 801cc5c:	4413      	add	r3, r2
 801cc5e:	781b      	ldrb	r3, [r3, #0]
 801cc60:	4a64      	ldr	r2, [pc, #400]	@ (801cdf4 <cmd_hexdump+0x2cc>)
 801cc62:	f002 f9c1 	bl	801efe8 <sniprintf>
 801cc66:	4602      	mov	r2, r0
 801cc68:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 801cc6c:	4413      	add	r3, r2
 801cc6e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
        for (uint32_t j = 0; j < 16 && (i + j) < len; j++) {
 801cc72:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 801cc76:	3301      	adds	r3, #1
 801cc78:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 801cc7c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 801cc80:	2b0f      	cmp	r3, #15
 801cc82:	d808      	bhi.n	801cc96 <cmd_hexdump+0x16e>
 801cc84:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 801cc88:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 801cc8c:	4413      	add	r3, r2
 801cc8e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 801cc92:	429a      	cmp	r2, r3
 801cc94:	d8d2      	bhi.n	801cc3c <cmd_hexdump+0x114>
        }
        
        // 补齐空格
        for (uint32_t j = len - i; j < 16; j++) {
 801cc96:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 801cc9a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 801cc9e:	1ad3      	subs	r3, r2, r3
 801cca0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 801cca4:	e017      	b.n	801ccd6 <cmd_hexdump+0x1ae>
            hex_pos += snprintf(hex_line + hex_pos, sizeof(hex_line) - hex_pos, "   ");
 801cca6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 801ccaa:	f107 0208 	add.w	r2, r7, #8
 801ccae:	18d0      	adds	r0, r2, r3
 801ccb0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 801ccb4:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 801ccb8:	4a4f      	ldr	r2, [pc, #316]	@ (801cdf8 <cmd_hexdump+0x2d0>)
 801ccba:	4619      	mov	r1, r3
 801ccbc:	f002 f994 	bl	801efe8 <sniprintf>
 801ccc0:	4602      	mov	r2, r0
 801ccc2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 801ccc6:	4413      	add	r3, r2
 801ccc8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
        for (uint32_t j = len - i; j < 16; j++) {
 801cccc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801ccd0:	3301      	adds	r3, #1
 801ccd2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 801ccd6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801ccda:	2b0f      	cmp	r3, #15
 801ccdc:	d9e3      	bls.n	801cca6 <cmd_hexdump+0x17e>
        }
        
        hex_pos += snprintf(hex_line + hex_pos, sizeof(hex_line) - hex_pos, " |");
 801ccde:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 801cce2:	f107 0208 	add.w	r2, r7, #8
 801cce6:	18d0      	adds	r0, r2, r3
 801cce8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 801ccec:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 801ccf0:	4a42      	ldr	r2, [pc, #264]	@ (801cdfc <cmd_hexdump+0x2d4>)
 801ccf2:	4619      	mov	r1, r3
 801ccf4:	f002 f978 	bl	801efe8 <sniprintf>
 801ccf8:	4602      	mov	r2, r0
 801ccfa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 801ccfe:	4413      	add	r3, r2
 801cd00:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
        
        // 打印ASCII
        for (uint32_t j = 0; j < 16 && (i + j) < len; j++) {
 801cd04:	2300      	movs	r3, #0
 801cd06:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 801cd0a:	e02d      	b.n	801cd68 <cmd_hexdump+0x240>
            char c = ptr[i + j];
 801cd0c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 801cd10:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 801cd14:	4413      	add	r3, r2
 801cd16:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 801cd1a:	4413      	add	r3, r2
 801cd1c:	781b      	ldrb	r3, [r3, #0]
 801cd1e:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
            ascii_pos += snprintf(ascii_line + ascii_pos, sizeof(ascii_line) - ascii_pos, 
 801cd22:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 801cd26:	f107 0288 	add.w	r2, r7, #136	@ 0x88
 801cd2a:	18d0      	adds	r0, r2, r3
 801cd2c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 801cd30:	f1c3 0114 	rsb	r1, r3, #20
 801cd34:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 801cd38:	2b1f      	cmp	r3, #31
 801cd3a:	d906      	bls.n	801cd4a <cmd_hexdump+0x222>
                                "%c", (c >= 32 && c <= 126) ? c : '.');
 801cd3c:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 801cd40:	2b7e      	cmp	r3, #126	@ 0x7e
 801cd42:	d802      	bhi.n	801cd4a <cmd_hexdump+0x222>
            ascii_pos += snprintf(ascii_line + ascii_pos, sizeof(ascii_line) - ascii_pos, 
 801cd44:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 801cd48:	e000      	b.n	801cd4c <cmd_hexdump+0x224>
 801cd4a:	232e      	movs	r3, #46	@ 0x2e
 801cd4c:	4a2c      	ldr	r2, [pc, #176]	@ (801ce00 <cmd_hexdump+0x2d8>)
 801cd4e:	f002 f94b 	bl	801efe8 <sniprintf>
 801cd52:	4602      	mov	r2, r0
 801cd54:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 801cd58:	4413      	add	r3, r2
 801cd5a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
        for (uint32_t j = 0; j < 16 && (i + j) < len; j++) {
 801cd5e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 801cd62:	3301      	adds	r3, #1
 801cd64:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 801cd68:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 801cd6c:	2b0f      	cmp	r3, #15
 801cd6e:	d808      	bhi.n	801cd82 <cmd_hexdump+0x25a>
 801cd70:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 801cd74:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 801cd78:	4413      	add	r3, r2
 801cd7a:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 801cd7e:	429a      	cmp	r2, r3
 801cd80:	d8c4      	bhi.n	801cd0c <cmd_hexdump+0x1e4>
        }
        
        ascii_line[ascii_pos] = '\0';
 801cd82:	f107 0288 	add.w	r2, r7, #136	@ 0x88
 801cd86:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 801cd8a:	4413      	add	r3, r2
 801cd8c:	2200      	movs	r2, #0
 801cd8e:	701a      	strb	r2, [r3, #0]
        SHELL_LOG_USER_INFO("%s%s|", hex_line, ascii_line);
 801cd90:	f107 0208 	add.w	r2, r7, #8
 801cd94:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 801cd98:	9300      	str	r3, [sp, #0]
 801cd9a:	4613      	mov	r3, r2
 801cd9c:	4a19      	ldr	r2, [pc, #100]	@ (801ce04 <cmd_hexdump+0x2dc>)
 801cd9e:	2101      	movs	r1, #1
 801cda0:	2006      	movs	r0, #6
 801cda2:	f001 fa4d 	bl	801e240 <shellLogPrint>
    for (uint32_t i = 0; i < len; i += 16) {
 801cda6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 801cdaa:	3310      	adds	r3, #16
 801cdac:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 801cdb0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 801cdb4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801cdb8:	429a      	cmp	r2, r3
 801cdba:	f4ff af1e 	bcc.w	801cbfa <cmd_hexdump+0xd2>
    }
    
    SHELL_LOG_USER_DEBUG("Hexdump completed successfully");
 801cdbe:	4a12      	ldr	r2, [pc, #72]	@ (801ce08 <cmd_hexdump+0x2e0>)
 801cdc0:	2100      	movs	r1, #0
 801cdc2:	2006      	movs	r0, #6
 801cdc4:	f001 fa3c 	bl	801e240 <shellLogPrint>
    return 0;
 801cdc8:	2300      	movs	r3, #0
}
 801cdca:	4618      	mov	r0, r3
 801cdcc:	37c8      	adds	r7, #200	@ 0xc8
 801cdce:	46bd      	mov	sp, r7
 801cdd0:	bd80      	pop	{r7, pc}
 801cdd2:	bf00      	nop
 801cdd4:	08022408 	.word	0x08022408
 801cdd8:	0802243c 	.word	0x0802243c
 801cddc:	08022460 	.word	0x08022460
 801cde0:	08022480 	.word	0x08022480
 801cde4:	080224b0 	.word	0x080224b0
 801cde8:	080224d4 	.word	0x080224d4
 801cdec:	08022500 	.word	0x08022500
 801cdf0:	08022524 	.word	0x08022524
 801cdf4:	0802252c 	.word	0x0802252c
 801cdf8:	08022534 	.word	0x08022534
 801cdfc:	08022538 	.word	0x08022538
 801ce00:	0802253c 	.word	0x0802253c
 801ce04:	08022540 	.word	0x08022540
 801ce08:	08022548 	.word	0x08022548

0801ce0c <cmd_logctl>:
SHELL_EXPORT_CMD(SHELL_CMD_PERMISSION(0)|SHELL_CMD_TYPE(SHELL_TYPE_CMD_MAIN), 
                 hexdump, cmd_hexdump, hex dump memory);

/* 日志控制命令 */
int cmd_logctl(int argc, char *argv[])
{
 801ce0c:	b5b0      	push	{r4, r5, r7, lr}
 801ce0e:	b08c      	sub	sp, #48	@ 0x30
 801ce10:	af02      	add	r7, sp, #8
 801ce12:	6078      	str	r0, [r7, #4]
 801ce14:	6039      	str	r1, [r7, #0]
    Shell *shell = shellGetCurrent();
 801ce16:	f7fd f9f3 	bl	801a200 <shellGetCurrent>
 801ce1a:	61f8      	str	r0, [r7, #28]
    if (!shell) return -1;
 801ce1c:	69fb      	ldr	r3, [r7, #28]
 801ce1e:	2b00      	cmp	r3, #0
 801ce20:	d102      	bne.n	801ce28 <cmd_logctl+0x1c>
 801ce22:	f04f 33ff 	mov.w	r3, #4294967295
 801ce26:	e244      	b.n	801d2b2 <cmd_logctl+0x4a6>
    
    if (argc < 2) {
 801ce28:	687b      	ldr	r3, [r7, #4]
 801ce2a:	2b01      	cmp	r3, #1
 801ce2c:	dc38      	bgt.n	801cea0 <cmd_logctl+0x94>
        SHELL_LOG_USER_INFO("Usage: logctl <command> [args...]");
 801ce2e:	4aaa      	ldr	r2, [pc, #680]	@ (801d0d8 <cmd_logctl+0x2cc>)
 801ce30:	2101      	movs	r1, #1
 801ce32:	2006      	movs	r0, #6
 801ce34:	f001 fa04 	bl	801e240 <shellLogPrint>
        SHELL_LOG_USER_INFO("Commands:");
 801ce38:	4aa8      	ldr	r2, [pc, #672]	@ (801d0dc <cmd_logctl+0x2d0>)
 801ce3a:	2101      	movs	r1, #1
 801ce3c:	2006      	movs	r0, #6
 801ce3e:	f001 f9ff 	bl	801e240 <shellLogPrint>
        SHELL_LOG_USER_INFO("  status                    - Show current log configuration");
 801ce42:	4aa7      	ldr	r2, [pc, #668]	@ (801d0e0 <cmd_logctl+0x2d4>)
 801ce44:	2101      	movs	r1, #1
 801ce46:	2006      	movs	r0, #6
 801ce48:	f001 f9fa 	bl	801e240 <shellLogPrint>
        SHELL_LOG_USER_INFO("  level <global_level>      - Set global log level (0-4)");
 801ce4c:	4aa5      	ldr	r2, [pc, #660]	@ (801d0e4 <cmd_logctl+0x2d8>)
 801ce4e:	2101      	movs	r1, #1
 801ce50:	2006      	movs	r0, #6
 801ce52:	f001 f9f5 	bl	801e240 <shellLogPrint>
        SHELL_LOG_USER_INFO("  module <mod> <level>      - Set module log level");
 801ce56:	4aa4      	ldr	r2, [pc, #656]	@ (801d0e8 <cmd_logctl+0x2dc>)
 801ce58:	2101      	movs	r1, #1
 801ce5a:	2006      	movs	r0, #6
 801ce5c:	f001 f9f0 	bl	801e240 <shellLogPrint>
        SHELL_LOG_USER_INFO("  color <on|off>            - Enable/disable color output");
 801ce60:	4aa2      	ldr	r2, [pc, #648]	@ (801d0ec <cmd_logctl+0x2e0>)
 801ce62:	2101      	movs	r1, #1
 801ce64:	2006      	movs	r0, #6
 801ce66:	f001 f9eb 	bl	801e240 <shellLogPrint>
        SHELL_LOG_USER_INFO("  timestamp <on|off>        - Enable/disable timestamp");
 801ce6a:	4aa1      	ldr	r2, [pc, #644]	@ (801d0f0 <cmd_logctl+0x2e4>)
 801ce6c:	2101      	movs	r1, #1
 801ce6e:	2006      	movs	r0, #6
 801ce70:	f001 f9e6 	bl	801e240 <shellLogPrint>
        SHELL_LOG_USER_INFO("  test                      - Test all log levels");
 801ce74:	4a9f      	ldr	r2, [pc, #636]	@ (801d0f4 <cmd_logctl+0x2e8>)
 801ce76:	2101      	movs	r1, #1
 801ce78:	2006      	movs	r0, #6
 801ce7a:	f001 f9e1 	bl	801e240 <shellLogPrint>
        SHELL_LOG_USER_INFO("");
 801ce7e:	4a9e      	ldr	r2, [pc, #632]	@ (801d0f8 <cmd_logctl+0x2ec>)
 801ce80:	2101      	movs	r1, #1
 801ce82:	2006      	movs	r0, #6
 801ce84:	f001 f9dc 	bl	801e240 <shellLogPrint>
        SHELL_LOG_USER_INFO("Log Levels: 0=DEBUG, 1=INFO, 2=WARNING, 3=ERROR, 4=NONE");
 801ce88:	4a9c      	ldr	r2, [pc, #624]	@ (801d0fc <cmd_logctl+0x2f0>)
 801ce8a:	2101      	movs	r1, #1
 801ce8c:	2006      	movs	r0, #6
 801ce8e:	f001 f9d7 	bl	801e240 <shellLogPrint>
        SHELL_LOG_USER_INFO("Modules: 0=SYS, 1=CLK, 2=MEM, 3=TASK, 4=UART, 5=FATFS, 6=USER");
 801ce92:	4a9b      	ldr	r2, [pc, #620]	@ (801d100 <cmd_logctl+0x2f4>)
 801ce94:	2101      	movs	r1, #1
 801ce96:	2006      	movs	r0, #6
 801ce98:	f001 f9d2 	bl	801e240 <shellLogPrint>
        return 0;
 801ce9c:	2300      	movs	r3, #0
 801ce9e:	e208      	b.n	801d2b2 <cmd_logctl+0x4a6>
    }
    
    if (strcmp(argv[1], "status") == 0) {
 801cea0:	683b      	ldr	r3, [r7, #0]
 801cea2:	3304      	adds	r3, #4
 801cea4:	681b      	ldr	r3, [r3, #0]
 801cea6:	4997      	ldr	r1, [pc, #604]	@ (801d104 <cmd_logctl+0x2f8>)
 801cea8:	4618      	mov	r0, r3
 801ceaa:	f7e3 fa31 	bl	8000310 <strcmp>
 801ceae:	4603      	mov	r3, r0
 801ceb0:	2b00      	cmp	r3, #0
 801ceb2:	d15d      	bne.n	801cf70 <cmd_logctl+0x164>
        SHELL_LOG_USER_INFO("=== Log Configuration Status ===");
 801ceb4:	4a94      	ldr	r2, [pc, #592]	@ (801d108 <cmd_logctl+0x2fc>)
 801ceb6:	2101      	movs	r1, #1
 801ceb8:	2006      	movs	r0, #6
 801ceba:	f001 f9c1 	bl	801e240 <shellLogPrint>
        SHELL_LOG_USER_INFO("Global Level: %d (%s)", 
 801cebe:	4b93      	ldr	r3, [pc, #588]	@ (801d10c <cmd_logctl+0x300>)
 801cec0:	781b      	ldrb	r3, [r3, #0]
 801cec2:	461c      	mov	r4, r3
 801cec4:	4b91      	ldr	r3, [pc, #580]	@ (801d10c <cmd_logctl+0x300>)
 801cec6:	781b      	ldrb	r3, [r3, #0]
 801cec8:	4618      	mov	r0, r3
 801ceca:	f001 f95b 	bl	801e184 <shellLogGetLevelName>
 801cece:	4603      	mov	r3, r0
 801ced0:	9300      	str	r3, [sp, #0]
 801ced2:	4623      	mov	r3, r4
 801ced4:	4a8e      	ldr	r2, [pc, #568]	@ (801d110 <cmd_logctl+0x304>)
 801ced6:	2101      	movs	r1, #1
 801ced8:	2006      	movs	r0, #6
 801ceda:	f001 f9b1 	bl	801e240 <shellLogPrint>
                  g_shell_log_config.global_level, 
                  shellLogGetLevelName(g_shell_log_config.global_level));
        SHELL_LOG_USER_INFO("Color Enabled: %s", 
 801cede:	4b8b      	ldr	r3, [pc, #556]	@ (801d10c <cmd_logctl+0x300>)
 801cee0:	7a1b      	ldrb	r3, [r3, #8]
 801cee2:	2b00      	cmp	r3, #0
 801cee4:	d001      	beq.n	801ceea <cmd_logctl+0xde>
 801cee6:	4b8b      	ldr	r3, [pc, #556]	@ (801d114 <cmd_logctl+0x308>)
 801cee8:	e000      	b.n	801ceec <cmd_logctl+0xe0>
 801ceea:	4b8b      	ldr	r3, [pc, #556]	@ (801d118 <cmd_logctl+0x30c>)
 801ceec:	4a8b      	ldr	r2, [pc, #556]	@ (801d11c <cmd_logctl+0x310>)
 801ceee:	2101      	movs	r1, #1
 801cef0:	2006      	movs	r0, #6
 801cef2:	f001 f9a5 	bl	801e240 <shellLogPrint>
                  g_shell_log_config.color_enabled ? "Yes" : "No");
        SHELL_LOG_USER_INFO("Timestamp Enabled: %s", 
 801cef6:	4b85      	ldr	r3, [pc, #532]	@ (801d10c <cmd_logctl+0x300>)
 801cef8:	7a5b      	ldrb	r3, [r3, #9]
 801cefa:	2b00      	cmp	r3, #0
 801cefc:	d001      	beq.n	801cf02 <cmd_logctl+0xf6>
 801cefe:	4b85      	ldr	r3, [pc, #532]	@ (801d114 <cmd_logctl+0x308>)
 801cf00:	e000      	b.n	801cf04 <cmd_logctl+0xf8>
 801cf02:	4b85      	ldr	r3, [pc, #532]	@ (801d118 <cmd_logctl+0x30c>)
 801cf04:	4a86      	ldr	r2, [pc, #536]	@ (801d120 <cmd_logctl+0x314>)
 801cf06:	2101      	movs	r1, #1
 801cf08:	2006      	movs	r0, #6
 801cf0a:	f001 f999 	bl	801e240 <shellLogPrint>
                  g_shell_log_config.timestamp_enabled ? "Yes" : "No");
        SHELL_LOG_USER_INFO("");
 801cf0e:	4a7a      	ldr	r2, [pc, #488]	@ (801d0f8 <cmd_logctl+0x2ec>)
 801cf10:	2101      	movs	r1, #1
 801cf12:	2006      	movs	r0, #6
 801cf14:	f001 f994 	bl	801e240 <shellLogPrint>
        SHELL_LOG_USER_INFO("Module Levels:");
 801cf18:	4a82      	ldr	r2, [pc, #520]	@ (801d124 <cmd_logctl+0x318>)
 801cf1a:	2101      	movs	r1, #1
 801cf1c:	2006      	movs	r0, #6
 801cf1e:	f001 f98f 	bl	801e240 <shellLogPrint>
        for (int i = 0; i < SHELL_LOG_MODULE_MAX; i++) {
 801cf22:	2300      	movs	r3, #0
 801cf24:	627b      	str	r3, [r7, #36]	@ 0x24
 801cf26:	e01f      	b.n	801cf68 <cmd_logctl+0x15c>
            SHELL_LOG_USER_INFO("  %s: %d (%s)", 
 801cf28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cf2a:	b2db      	uxtb	r3, r3
 801cf2c:	4618      	mov	r0, r3
 801cf2e:	f001 f911 	bl	801e154 <shellLogGetModuleName>
 801cf32:	4604      	mov	r4, r0
 801cf34:	4a75      	ldr	r2, [pc, #468]	@ (801d10c <cmd_logctl+0x300>)
 801cf36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cf38:	4413      	add	r3, r2
 801cf3a:	3301      	adds	r3, #1
 801cf3c:	781b      	ldrb	r3, [r3, #0]
 801cf3e:	461d      	mov	r5, r3
 801cf40:	4a72      	ldr	r2, [pc, #456]	@ (801d10c <cmd_logctl+0x300>)
 801cf42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cf44:	4413      	add	r3, r2
 801cf46:	3301      	adds	r3, #1
 801cf48:	781b      	ldrb	r3, [r3, #0]
 801cf4a:	4618      	mov	r0, r3
 801cf4c:	f001 f91a 	bl	801e184 <shellLogGetLevelName>
 801cf50:	4603      	mov	r3, r0
 801cf52:	9301      	str	r3, [sp, #4]
 801cf54:	9500      	str	r5, [sp, #0]
 801cf56:	4623      	mov	r3, r4
 801cf58:	4a73      	ldr	r2, [pc, #460]	@ (801d128 <cmd_logctl+0x31c>)
 801cf5a:	2101      	movs	r1, #1
 801cf5c:	2006      	movs	r0, #6
 801cf5e:	f001 f96f 	bl	801e240 <shellLogPrint>
        for (int i = 0; i < SHELL_LOG_MODULE_MAX; i++) {
 801cf62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cf64:	3301      	adds	r3, #1
 801cf66:	627b      	str	r3, [r7, #36]	@ 0x24
 801cf68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cf6a:	2b06      	cmp	r3, #6
 801cf6c:	dddc      	ble.n	801cf28 <cmd_logctl+0x11c>
 801cf6e:	e19f      	b.n	801d2b0 <cmd_logctl+0x4a4>
                      shellLogGetModuleName(i),
                      g_shell_log_config.module_levels[i],
                      shellLogGetLevelName(g_shell_log_config.module_levels[i]));
        }
    }
    else if (strcmp(argv[1], "level") == 0) {
 801cf70:	683b      	ldr	r3, [r7, #0]
 801cf72:	3304      	adds	r3, #4
 801cf74:	681b      	ldr	r3, [r3, #0]
 801cf76:	496d      	ldr	r1, [pc, #436]	@ (801d12c <cmd_logctl+0x320>)
 801cf78:	4618      	mov	r0, r3
 801cf7a:	f7e3 f9c9 	bl	8000310 <strcmp>
 801cf7e:	4603      	mov	r3, r0
 801cf80:	2b00      	cmp	r3, #0
 801cf82:	d133      	bne.n	801cfec <cmd_logctl+0x1e0>
        if (argc < 3) {
 801cf84:	687b      	ldr	r3, [r7, #4]
 801cf86:	2b02      	cmp	r3, #2
 801cf88:	dc07      	bgt.n	801cf9a <cmd_logctl+0x18e>
            SHELL_LOG_USER_ERROR("Usage: logctl level <0-4>");
 801cf8a:	4a69      	ldr	r2, [pc, #420]	@ (801d130 <cmd_logctl+0x324>)
 801cf8c:	2103      	movs	r1, #3
 801cf8e:	2006      	movs	r0, #6
 801cf90:	f001 f956 	bl	801e240 <shellLogPrint>
            return -1;
 801cf94:	f04f 33ff 	mov.w	r3, #4294967295
 801cf98:	e18b      	b.n	801d2b2 <cmd_logctl+0x4a6>
        }
        int level = atoi(argv[2]);
 801cf9a:	683b      	ldr	r3, [r7, #0]
 801cf9c:	3308      	adds	r3, #8
 801cf9e:	681b      	ldr	r3, [r3, #0]
 801cfa0:	4618      	mov	r0, r3
 801cfa2:	f001 fe73 	bl	801ec8c <atoi>
 801cfa6:	60f8      	str	r0, [r7, #12]
        if (level < 0 || level > 4) {
 801cfa8:	68fb      	ldr	r3, [r7, #12]
 801cfaa:	2b00      	cmp	r3, #0
 801cfac:	db02      	blt.n	801cfb4 <cmd_logctl+0x1a8>
 801cfae:	68fb      	ldr	r3, [r7, #12]
 801cfb0:	2b04      	cmp	r3, #4
 801cfb2:	dd08      	ble.n	801cfc6 <cmd_logctl+0x1ba>
            SHELL_LOG_USER_ERROR("Error: Invalid level %d. Valid range: 0-4", level);
 801cfb4:	68fb      	ldr	r3, [r7, #12]
 801cfb6:	4a5f      	ldr	r2, [pc, #380]	@ (801d134 <cmd_logctl+0x328>)
 801cfb8:	2103      	movs	r1, #3
 801cfba:	2006      	movs	r0, #6
 801cfbc:	f001 f940 	bl	801e240 <shellLogPrint>
            return -1;
 801cfc0:	f04f 33ff 	mov.w	r3, #4294967295
 801cfc4:	e175      	b.n	801d2b2 <cmd_logctl+0x4a6>
        }
        shellLogSetGlobalLevel((ShellLogLevel_t)level);
 801cfc6:	68fb      	ldr	r3, [r7, #12]
 801cfc8:	b2db      	uxtb	r3, r3
 801cfca:	4618      	mov	r0, r3
 801cfcc:	f001 f866 	bl	801e09c <shellLogSetGlobalLevel>
        SHELL_LOG_USER_INFO("Global log level set to %d (%s)", 
 801cfd0:	68fb      	ldr	r3, [r7, #12]
 801cfd2:	b2db      	uxtb	r3, r3
 801cfd4:	4618      	mov	r0, r3
 801cfd6:	f001 f8d5 	bl	801e184 <shellLogGetLevelName>
 801cfda:	4603      	mov	r3, r0
 801cfdc:	9300      	str	r3, [sp, #0]
 801cfde:	68fb      	ldr	r3, [r7, #12]
 801cfe0:	4a55      	ldr	r2, [pc, #340]	@ (801d138 <cmd_logctl+0x32c>)
 801cfe2:	2101      	movs	r1, #1
 801cfe4:	2006      	movs	r0, #6
 801cfe6:	f001 f92b 	bl	801e240 <shellLogPrint>
 801cfea:	e161      	b.n	801d2b0 <cmd_logctl+0x4a4>
                  level, shellLogGetLevelName((ShellLogLevel_t)level));
    }
    else if (strcmp(argv[1], "module") == 0) {
 801cfec:	683b      	ldr	r3, [r7, #0]
 801cfee:	3304      	adds	r3, #4
 801cff0:	681b      	ldr	r3, [r3, #0]
 801cff2:	4952      	ldr	r1, [pc, #328]	@ (801d13c <cmd_logctl+0x330>)
 801cff4:	4618      	mov	r0, r3
 801cff6:	f7e3 f98b 	bl	8000310 <strcmp>
 801cffa:	4603      	mov	r3, r0
 801cffc:	2b00      	cmp	r3, #0
 801cffe:	d156      	bne.n	801d0ae <cmd_logctl+0x2a2>
        if (argc < 4) {
 801d000:	687b      	ldr	r3, [r7, #4]
 801d002:	2b03      	cmp	r3, #3
 801d004:	dc07      	bgt.n	801d016 <cmd_logctl+0x20a>
            SHELL_LOG_USER_ERROR("Usage: logctl module <module_id> <level>");
 801d006:	4a4e      	ldr	r2, [pc, #312]	@ (801d140 <cmd_logctl+0x334>)
 801d008:	2103      	movs	r1, #3
 801d00a:	2006      	movs	r0, #6
 801d00c:	f001 f918 	bl	801e240 <shellLogPrint>
            return -1;
 801d010:	f04f 33ff 	mov.w	r3, #4294967295
 801d014:	e14d      	b.n	801d2b2 <cmd_logctl+0x4a6>
        }
        int module = atoi(argv[2]);
 801d016:	683b      	ldr	r3, [r7, #0]
 801d018:	3308      	adds	r3, #8
 801d01a:	681b      	ldr	r3, [r3, #0]
 801d01c:	4618      	mov	r0, r3
 801d01e:	f001 fe35 	bl	801ec8c <atoi>
 801d022:	6178      	str	r0, [r7, #20]
        int level = atoi(argv[3]);
 801d024:	683b      	ldr	r3, [r7, #0]
 801d026:	330c      	adds	r3, #12
 801d028:	681b      	ldr	r3, [r3, #0]
 801d02a:	4618      	mov	r0, r3
 801d02c:	f001 fe2e 	bl	801ec8c <atoi>
 801d030:	6138      	str	r0, [r7, #16]
        if (module < 0 || module >= SHELL_LOG_MODULE_MAX) {
 801d032:	697b      	ldr	r3, [r7, #20]
 801d034:	2b00      	cmp	r3, #0
 801d036:	db02      	blt.n	801d03e <cmd_logctl+0x232>
 801d038:	697b      	ldr	r3, [r7, #20]
 801d03a:	2b06      	cmp	r3, #6
 801d03c:	dd0a      	ble.n	801d054 <cmd_logctl+0x248>
            SHELL_LOG_USER_ERROR("Error: Invalid module %d. Valid range: 0-%d", 
 801d03e:	2306      	movs	r3, #6
 801d040:	9300      	str	r3, [sp, #0]
 801d042:	697b      	ldr	r3, [r7, #20]
 801d044:	4a3f      	ldr	r2, [pc, #252]	@ (801d144 <cmd_logctl+0x338>)
 801d046:	2103      	movs	r1, #3
 801d048:	2006      	movs	r0, #6
 801d04a:	f001 f8f9 	bl	801e240 <shellLogPrint>
                      module, SHELL_LOG_MODULE_MAX - 1);
            return -1;
 801d04e:	f04f 33ff 	mov.w	r3, #4294967295
 801d052:	e12e      	b.n	801d2b2 <cmd_logctl+0x4a6>
        }
        if (level < 0 || level > 4) {
 801d054:	693b      	ldr	r3, [r7, #16]
 801d056:	2b00      	cmp	r3, #0
 801d058:	db02      	blt.n	801d060 <cmd_logctl+0x254>
 801d05a:	693b      	ldr	r3, [r7, #16]
 801d05c:	2b04      	cmp	r3, #4
 801d05e:	dd08      	ble.n	801d072 <cmd_logctl+0x266>
            SHELL_LOG_USER_ERROR("Error: Invalid level %d. Valid range: 0-4", level);
 801d060:	693b      	ldr	r3, [r7, #16]
 801d062:	4a34      	ldr	r2, [pc, #208]	@ (801d134 <cmd_logctl+0x328>)
 801d064:	2103      	movs	r1, #3
 801d066:	2006      	movs	r0, #6
 801d068:	f001 f8ea 	bl	801e240 <shellLogPrint>
            return -1;
 801d06c:	f04f 33ff 	mov.w	r3, #4294967295
 801d070:	e11f      	b.n	801d2b2 <cmd_logctl+0x4a6>
        }
        shellLogSetModuleLevel((ShellLogModule_t)module, (ShellLogLevel_t)level);
 801d072:	697b      	ldr	r3, [r7, #20]
 801d074:	b2db      	uxtb	r3, r3
 801d076:	693a      	ldr	r2, [r7, #16]
 801d078:	b2d2      	uxtb	r2, r2
 801d07a:	4611      	mov	r1, r2
 801d07c:	4618      	mov	r0, r3
 801d07e:	f001 f821 	bl	801e0c4 <shellLogSetModuleLevel>
        SHELL_LOG_USER_INFO("Module %s log level set to %d (%s)", 
 801d082:	697b      	ldr	r3, [r7, #20]
 801d084:	b2db      	uxtb	r3, r3
 801d086:	4618      	mov	r0, r3
 801d088:	f001 f864 	bl	801e154 <shellLogGetModuleName>
 801d08c:	4604      	mov	r4, r0
 801d08e:	693b      	ldr	r3, [r7, #16]
 801d090:	b2db      	uxtb	r3, r3
 801d092:	4618      	mov	r0, r3
 801d094:	f001 f876 	bl	801e184 <shellLogGetLevelName>
 801d098:	4603      	mov	r3, r0
 801d09a:	9301      	str	r3, [sp, #4]
 801d09c:	693b      	ldr	r3, [r7, #16]
 801d09e:	9300      	str	r3, [sp, #0]
 801d0a0:	4623      	mov	r3, r4
 801d0a2:	4a29      	ldr	r2, [pc, #164]	@ (801d148 <cmd_logctl+0x33c>)
 801d0a4:	2101      	movs	r1, #1
 801d0a6:	2006      	movs	r0, #6
 801d0a8:	f001 f8ca 	bl	801e240 <shellLogPrint>
 801d0ac:	e100      	b.n	801d2b0 <cmd_logctl+0x4a4>
                  shellLogGetModuleName((ShellLogModule_t)module),
                  level, shellLogGetLevelName((ShellLogLevel_t)level));
    }
    else if (strcmp(argv[1], "color") == 0) {
 801d0ae:	683b      	ldr	r3, [r7, #0]
 801d0b0:	3304      	adds	r3, #4
 801d0b2:	681b      	ldr	r3, [r3, #0]
 801d0b4:	4925      	ldr	r1, [pc, #148]	@ (801d14c <cmd_logctl+0x340>)
 801d0b6:	4618      	mov	r0, r3
 801d0b8:	f7e3 f92a 	bl	8000310 <strcmp>
 801d0bc:	4603      	mov	r3, r0
 801d0be:	2b00      	cmp	r3, #0
 801d0c0:	d166      	bne.n	801d190 <cmd_logctl+0x384>
        if (argc < 3) {
 801d0c2:	687b      	ldr	r3, [r7, #4]
 801d0c4:	2b02      	cmp	r3, #2
 801d0c6:	dc45      	bgt.n	801d154 <cmd_logctl+0x348>
            SHELL_LOG_USER_ERROR("Usage: logctl color <on|off>");
 801d0c8:	4a21      	ldr	r2, [pc, #132]	@ (801d150 <cmd_logctl+0x344>)
 801d0ca:	2103      	movs	r1, #3
 801d0cc:	2006      	movs	r0, #6
 801d0ce:	f001 f8b7 	bl	801e240 <shellLogPrint>
            return -1;
 801d0d2:	f04f 33ff 	mov.w	r3, #4294967295
 801d0d6:	e0ec      	b.n	801d2b2 <cmd_logctl+0x4a6>
 801d0d8:	08022568 	.word	0x08022568
 801d0dc:	0802258c 	.word	0x0802258c
 801d0e0:	08022598 	.word	0x08022598
 801d0e4:	080225d8 	.word	0x080225d8
 801d0e8:	08022614 	.word	0x08022614
 801d0ec:	08022648 	.word	0x08022648
 801d0f0:	08022684 	.word	0x08022684
 801d0f4:	080226bc 	.word	0x080226bc
 801d0f8:	080226f0 	.word	0x080226f0
 801d0fc:	080226f4 	.word	0x080226f4
 801d100:	0802272c 	.word	0x0802272c
 801d104:	0802276c 	.word	0x0802276c
 801d108:	08022774 	.word	0x08022774
 801d10c:	240000a0 	.word	0x240000a0
 801d110:	08022798 	.word	0x08022798
 801d114:	080227b0 	.word	0x080227b0
 801d118:	080227b4 	.word	0x080227b4
 801d11c:	080227b8 	.word	0x080227b8
 801d120:	080227cc 	.word	0x080227cc
 801d124:	080227e4 	.word	0x080227e4
 801d128:	080227f4 	.word	0x080227f4
 801d12c:	08022804 	.word	0x08022804
 801d130:	0802280c 	.word	0x0802280c
 801d134:	08022828 	.word	0x08022828
 801d138:	08022854 	.word	0x08022854
 801d13c:	08022874 	.word	0x08022874
 801d140:	0802287c 	.word	0x0802287c
 801d144:	080228a8 	.word	0x080228a8
 801d148:	080228d4 	.word	0x080228d4
 801d14c:	080228f8 	.word	0x080228f8
 801d150:	08022900 	.word	0x08022900
        }
        uint8_t enable = (strcmp(argv[2], "on") == 0) ? 1 : 0;
 801d154:	683b      	ldr	r3, [r7, #0]
 801d156:	3308      	adds	r3, #8
 801d158:	681b      	ldr	r3, [r3, #0]
 801d15a:	4958      	ldr	r1, [pc, #352]	@ (801d2bc <cmd_logctl+0x4b0>)
 801d15c:	4618      	mov	r0, r3
 801d15e:	f7e3 f8d7 	bl	8000310 <strcmp>
 801d162:	4603      	mov	r3, r0
 801d164:	2b00      	cmp	r3, #0
 801d166:	bf0c      	ite	eq
 801d168:	2301      	moveq	r3, #1
 801d16a:	2300      	movne	r3, #0
 801d16c:	b2db      	uxtb	r3, r3
 801d16e:	76bb      	strb	r3, [r7, #26]
        shellLogSetColorEnabled(enable);
 801d170:	7ebb      	ldrb	r3, [r7, #26]
 801d172:	4618      	mov	r0, r3
 801d174:	f000 ffc2 	bl	801e0fc <shellLogSetColorEnabled>
        SHELL_LOG_USER_INFO("Color output %s", enable ? "enabled" : "disabled");
 801d178:	7ebb      	ldrb	r3, [r7, #26]
 801d17a:	2b00      	cmp	r3, #0
 801d17c:	d001      	beq.n	801d182 <cmd_logctl+0x376>
 801d17e:	4b50      	ldr	r3, [pc, #320]	@ (801d2c0 <cmd_logctl+0x4b4>)
 801d180:	e000      	b.n	801d184 <cmd_logctl+0x378>
 801d182:	4b50      	ldr	r3, [pc, #320]	@ (801d2c4 <cmd_logctl+0x4b8>)
 801d184:	4a50      	ldr	r2, [pc, #320]	@ (801d2c8 <cmd_logctl+0x4bc>)
 801d186:	2101      	movs	r1, #1
 801d188:	2006      	movs	r0, #6
 801d18a:	f001 f859 	bl	801e240 <shellLogPrint>
 801d18e:	e08f      	b.n	801d2b0 <cmd_logctl+0x4a4>
    }
    else if (strcmp(argv[1], "timestamp") == 0) {
 801d190:	683b      	ldr	r3, [r7, #0]
 801d192:	3304      	adds	r3, #4
 801d194:	681b      	ldr	r3, [r3, #0]
 801d196:	494d      	ldr	r1, [pc, #308]	@ (801d2cc <cmd_logctl+0x4c0>)
 801d198:	4618      	mov	r0, r3
 801d19a:	f7e3 f8b9 	bl	8000310 <strcmp>
 801d19e:	4603      	mov	r3, r0
 801d1a0:	2b00      	cmp	r3, #0
 801d1a2:	d128      	bne.n	801d1f6 <cmd_logctl+0x3ea>
        if (argc < 3) {
 801d1a4:	687b      	ldr	r3, [r7, #4]
 801d1a6:	2b02      	cmp	r3, #2
 801d1a8:	dc07      	bgt.n	801d1ba <cmd_logctl+0x3ae>
            SHELL_LOG_USER_ERROR("Usage: logctl timestamp <on|off>");
 801d1aa:	4a49      	ldr	r2, [pc, #292]	@ (801d2d0 <cmd_logctl+0x4c4>)
 801d1ac:	2103      	movs	r1, #3
 801d1ae:	2006      	movs	r0, #6
 801d1b0:	f001 f846 	bl	801e240 <shellLogPrint>
            return -1;
 801d1b4:	f04f 33ff 	mov.w	r3, #4294967295
 801d1b8:	e07b      	b.n	801d2b2 <cmd_logctl+0x4a6>
        }
        uint8_t enable = (strcmp(argv[2], "on") == 0) ? 1 : 0;
 801d1ba:	683b      	ldr	r3, [r7, #0]
 801d1bc:	3308      	adds	r3, #8
 801d1be:	681b      	ldr	r3, [r3, #0]
 801d1c0:	493e      	ldr	r1, [pc, #248]	@ (801d2bc <cmd_logctl+0x4b0>)
 801d1c2:	4618      	mov	r0, r3
 801d1c4:	f7e3 f8a4 	bl	8000310 <strcmp>
 801d1c8:	4603      	mov	r3, r0
 801d1ca:	2b00      	cmp	r3, #0
 801d1cc:	bf0c      	ite	eq
 801d1ce:	2301      	moveq	r3, #1
 801d1d0:	2300      	movne	r3, #0
 801d1d2:	b2db      	uxtb	r3, r3
 801d1d4:	76fb      	strb	r3, [r7, #27]
        shellLogSetTimestampEnabled(enable);
 801d1d6:	7efb      	ldrb	r3, [r7, #27]
 801d1d8:	4618      	mov	r0, r3
 801d1da:	f000 ffa5 	bl	801e128 <shellLogSetTimestampEnabled>
        SHELL_LOG_USER_INFO("Timestamp output %s", enable ? "enabled" : "disabled");
 801d1de:	7efb      	ldrb	r3, [r7, #27]
 801d1e0:	2b00      	cmp	r3, #0
 801d1e2:	d001      	beq.n	801d1e8 <cmd_logctl+0x3dc>
 801d1e4:	4b36      	ldr	r3, [pc, #216]	@ (801d2c0 <cmd_logctl+0x4b4>)
 801d1e6:	e000      	b.n	801d1ea <cmd_logctl+0x3de>
 801d1e8:	4b36      	ldr	r3, [pc, #216]	@ (801d2c4 <cmd_logctl+0x4b8>)
 801d1ea:	4a3a      	ldr	r2, [pc, #232]	@ (801d2d4 <cmd_logctl+0x4c8>)
 801d1ec:	2101      	movs	r1, #1
 801d1ee:	2006      	movs	r0, #6
 801d1f0:	f001 f826 	bl	801e240 <shellLogPrint>
 801d1f4:	e05c      	b.n	801d2b0 <cmd_logctl+0x4a4>
    }
    else if (strcmp(argv[1], "test") == 0) {
 801d1f6:	683b      	ldr	r3, [r7, #0]
 801d1f8:	3304      	adds	r3, #4
 801d1fa:	681b      	ldr	r3, [r3, #0]
 801d1fc:	4936      	ldr	r1, [pc, #216]	@ (801d2d8 <cmd_logctl+0x4cc>)
 801d1fe:	4618      	mov	r0, r3
 801d200:	f7e3 f886 	bl	8000310 <strcmp>
 801d204:	4603      	mov	r3, r0
 801d206:	2b00      	cmp	r3, #0
 801d208:	d147      	bne.n	801d29a <cmd_logctl+0x48e>
        SHELL_LOG_USER_INFO("Testing all log levels for all modules:");
 801d20a:	4a34      	ldr	r2, [pc, #208]	@ (801d2dc <cmd_logctl+0x4d0>)
 801d20c:	2101      	movs	r1, #1
 801d20e:	2006      	movs	r0, #6
 801d210:	f001 f816 	bl	801e240 <shellLogPrint>
        for (int module = 0; module < SHELL_LOG_MODULE_MAX; module++) {
 801d214:	2300      	movs	r3, #0
 801d216:	623b      	str	r3, [r7, #32]
 801d218:	e036      	b.n	801d288 <cmd_logctl+0x47c>
            SHELL_LOG_DEBUG((ShellLogModule_t)module, "Debug message from %s module", 
 801d21a:	6a3b      	ldr	r3, [r7, #32]
 801d21c:	b2dc      	uxtb	r4, r3
 801d21e:	6a3b      	ldr	r3, [r7, #32]
 801d220:	b2db      	uxtb	r3, r3
 801d222:	4618      	mov	r0, r3
 801d224:	f000 ff96 	bl	801e154 <shellLogGetModuleName>
 801d228:	4603      	mov	r3, r0
 801d22a:	4a2d      	ldr	r2, [pc, #180]	@ (801d2e0 <cmd_logctl+0x4d4>)
 801d22c:	2100      	movs	r1, #0
 801d22e:	4620      	mov	r0, r4
 801d230:	f001 f806 	bl	801e240 <shellLogPrint>
                           shellLogGetModuleName((ShellLogModule_t)module));
            SHELL_LOG_INFO((ShellLogModule_t)module, "Info message from %s module", 
 801d234:	6a3b      	ldr	r3, [r7, #32]
 801d236:	b2dc      	uxtb	r4, r3
 801d238:	6a3b      	ldr	r3, [r7, #32]
 801d23a:	b2db      	uxtb	r3, r3
 801d23c:	4618      	mov	r0, r3
 801d23e:	f000 ff89 	bl	801e154 <shellLogGetModuleName>
 801d242:	4603      	mov	r3, r0
 801d244:	4a27      	ldr	r2, [pc, #156]	@ (801d2e4 <cmd_logctl+0x4d8>)
 801d246:	2101      	movs	r1, #1
 801d248:	4620      	mov	r0, r4
 801d24a:	f000 fff9 	bl	801e240 <shellLogPrint>
                          shellLogGetModuleName((ShellLogModule_t)module));
            SHELL_LOG_WARNING((ShellLogModule_t)module, "Warning message from %s module", 
 801d24e:	6a3b      	ldr	r3, [r7, #32]
 801d250:	b2dc      	uxtb	r4, r3
 801d252:	6a3b      	ldr	r3, [r7, #32]
 801d254:	b2db      	uxtb	r3, r3
 801d256:	4618      	mov	r0, r3
 801d258:	f000 ff7c 	bl	801e154 <shellLogGetModuleName>
 801d25c:	4603      	mov	r3, r0
 801d25e:	4a22      	ldr	r2, [pc, #136]	@ (801d2e8 <cmd_logctl+0x4dc>)
 801d260:	2102      	movs	r1, #2
 801d262:	4620      	mov	r0, r4
 801d264:	f000 ffec 	bl	801e240 <shellLogPrint>
                             shellLogGetModuleName((ShellLogModule_t)module));
            SHELL_LOG_ERROR((ShellLogModule_t)module, "Error message from %s module", 
 801d268:	6a3b      	ldr	r3, [r7, #32]
 801d26a:	b2dc      	uxtb	r4, r3
 801d26c:	6a3b      	ldr	r3, [r7, #32]
 801d26e:	b2db      	uxtb	r3, r3
 801d270:	4618      	mov	r0, r3
 801d272:	f000 ff6f 	bl	801e154 <shellLogGetModuleName>
 801d276:	4603      	mov	r3, r0
 801d278:	4a1c      	ldr	r2, [pc, #112]	@ (801d2ec <cmd_logctl+0x4e0>)
 801d27a:	2103      	movs	r1, #3
 801d27c:	4620      	mov	r0, r4
 801d27e:	f000 ffdf 	bl	801e240 <shellLogPrint>
        for (int module = 0; module < SHELL_LOG_MODULE_MAX; module++) {
 801d282:	6a3b      	ldr	r3, [r7, #32]
 801d284:	3301      	adds	r3, #1
 801d286:	623b      	str	r3, [r7, #32]
 801d288:	6a3b      	ldr	r3, [r7, #32]
 801d28a:	2b06      	cmp	r3, #6
 801d28c:	ddc5      	ble.n	801d21a <cmd_logctl+0x40e>
                           shellLogGetModuleName((ShellLogModule_t)module));
        }
        SHELL_LOG_USER_INFO("Log test completed");
 801d28e:	4a18      	ldr	r2, [pc, #96]	@ (801d2f0 <cmd_logctl+0x4e4>)
 801d290:	2101      	movs	r1, #1
 801d292:	2006      	movs	r0, #6
 801d294:	f000 ffd4 	bl	801e240 <shellLogPrint>
 801d298:	e00a      	b.n	801d2b0 <cmd_logctl+0x4a4>
    }
    else {
        SHELL_LOG_USER_ERROR("Unknown command: %s", argv[1]);
 801d29a:	683b      	ldr	r3, [r7, #0]
 801d29c:	3304      	adds	r3, #4
 801d29e:	681b      	ldr	r3, [r3, #0]
 801d2a0:	4a14      	ldr	r2, [pc, #80]	@ (801d2f4 <cmd_logctl+0x4e8>)
 801d2a2:	2103      	movs	r1, #3
 801d2a4:	2006      	movs	r0, #6
 801d2a6:	f000 ffcb 	bl	801e240 <shellLogPrint>
        return -1;
 801d2aa:	f04f 33ff 	mov.w	r3, #4294967295
 801d2ae:	e000      	b.n	801d2b2 <cmd_logctl+0x4a6>
    }
    
    return 0;
 801d2b0:	2300      	movs	r3, #0
}
 801d2b2:	4618      	mov	r0, r3
 801d2b4:	3728      	adds	r7, #40	@ 0x28
 801d2b6:	46bd      	mov	sp, r7
 801d2b8:	bdb0      	pop	{r4, r5, r7, pc}
 801d2ba:	bf00      	nop
 801d2bc:	08021f44 	.word	0x08021f44
 801d2c0:	08022920 	.word	0x08022920
 801d2c4:	08022928 	.word	0x08022928
 801d2c8:	08022934 	.word	0x08022934
 801d2cc:	08022944 	.word	0x08022944
 801d2d0:	08022950 	.word	0x08022950
 801d2d4:	08022974 	.word	0x08022974
 801d2d8:	08022988 	.word	0x08022988
 801d2dc:	08022990 	.word	0x08022990
 801d2e0:	080229b8 	.word	0x080229b8
 801d2e4:	080229d8 	.word	0x080229d8
 801d2e8:	080229f4 	.word	0x080229f4
 801d2ec:	08022a14 	.word	0x08022a14
 801d2f0:	08022a34 	.word	0x08022a34
 801d2f4:	08022a48 	.word	0x08022a48

0801d2f8 <cmd_logtest>:
SHELL_EXPORT_CMD(SHELL_CMD_PERMISSION(0)|SHELL_CMD_TYPE(SHELL_TYPE_CMD_MAIN), 
                 logctl, cmd_logctl, log control and configuration);

/* 日志测试命令 */
int cmd_logtest(int argc, char *argv[])
{
 801d2f8:	b580      	push	{r7, lr}
 801d2fa:	b086      	sub	sp, #24
 801d2fc:	af02      	add	r7, sp, #8
 801d2fe:	6078      	str	r0, [r7, #4]
 801d300:	6039      	str	r1, [r7, #0]
    Shell *shell = shellGetCurrent();
 801d302:	f7fc ff7d 	bl	801a200 <shellGetCurrent>
 801d306:	60f8      	str	r0, [r7, #12]
    if (!shell) return -1;
 801d308:	68fb      	ldr	r3, [r7, #12]
 801d30a:	2b00      	cmp	r3, #0
 801d30c:	d102      	bne.n	801d314 <cmd_logtest+0x1c>
 801d30e:	f04f 33ff 	mov.w	r3, #4294967295
 801d312:	e05a      	b.n	801d3ca <cmd_logtest+0xd2>
    
    if (argc < 2) {
 801d314:	687b      	ldr	r3, [r7, #4]
 801d316:	2b01      	cmp	r3, #1
 801d318:	dc0c      	bgt.n	801d334 <cmd_logtest+0x3c>
        SHELL_LOG_USER_INFO("Usage: logtest <module_id>");
 801d31a:	4a2e      	ldr	r2, [pc, #184]	@ (801d3d4 <cmd_logtest+0xdc>)
 801d31c:	2101      	movs	r1, #1
 801d31e:	2006      	movs	r0, #6
 801d320:	f000 ff8e 	bl	801e240 <shellLogPrint>
        SHELL_LOG_USER_INFO("Modules: 0=SYS, 1=CLK, 2=MEM, 3=TASK, 4=UART, 5=FATFS, 6=USER");
 801d324:	4a2c      	ldr	r2, [pc, #176]	@ (801d3d8 <cmd_logtest+0xe0>)
 801d326:	2101      	movs	r1, #1
 801d328:	2006      	movs	r0, #6
 801d32a:	f000 ff89 	bl	801e240 <shellLogPrint>
        return -1;
 801d32e:	f04f 33ff 	mov.w	r3, #4294967295
 801d332:	e04a      	b.n	801d3ca <cmd_logtest+0xd2>
    }
    
    int module = atoi(argv[1]);
 801d334:	683b      	ldr	r3, [r7, #0]
 801d336:	3304      	adds	r3, #4
 801d338:	681b      	ldr	r3, [r3, #0]
 801d33a:	4618      	mov	r0, r3
 801d33c:	f001 fca6 	bl	801ec8c <atoi>
 801d340:	60b8      	str	r0, [r7, #8]
    if (module < 0 || module >= SHELL_LOG_MODULE_MAX) {
 801d342:	68bb      	ldr	r3, [r7, #8]
 801d344:	2b00      	cmp	r3, #0
 801d346:	db02      	blt.n	801d34e <cmd_logtest+0x56>
 801d348:	68bb      	ldr	r3, [r7, #8]
 801d34a:	2b06      	cmp	r3, #6
 801d34c:	dd0a      	ble.n	801d364 <cmd_logtest+0x6c>
        SHELL_LOG_USER_ERROR("Error: Invalid module %d. Valid range: 0-%d", 
 801d34e:	2306      	movs	r3, #6
 801d350:	9300      	str	r3, [sp, #0]
 801d352:	68bb      	ldr	r3, [r7, #8]
 801d354:	4a21      	ldr	r2, [pc, #132]	@ (801d3dc <cmd_logtest+0xe4>)
 801d356:	2103      	movs	r1, #3
 801d358:	2006      	movs	r0, #6
 801d35a:	f000 ff71 	bl	801e240 <shellLogPrint>
                  module, SHELL_LOG_MODULE_MAX - 1);
        return -1;
 801d35e:	f04f 33ff 	mov.w	r3, #4294967295
 801d362:	e032      	b.n	801d3ca <cmd_logtest+0xd2>
    }
    
    SHELL_LOG_USER_INFO("Testing log output for module %s:", 
 801d364:	68bb      	ldr	r3, [r7, #8]
 801d366:	b2db      	uxtb	r3, r3
 801d368:	4618      	mov	r0, r3
 801d36a:	f000 fef3 	bl	801e154 <shellLogGetModuleName>
 801d36e:	4603      	mov	r3, r0
 801d370:	4a1b      	ldr	r2, [pc, #108]	@ (801d3e0 <cmd_logtest+0xe8>)
 801d372:	2101      	movs	r1, #1
 801d374:	2006      	movs	r0, #6
 801d376:	f000 ff63 	bl	801e240 <shellLogPrint>
              shellLogGetModuleName((ShellLogModule_t)module));
    
    SHELL_LOG_DEBUG((ShellLogModule_t)module, "This is a DEBUG message");
 801d37a:	68bb      	ldr	r3, [r7, #8]
 801d37c:	b2db      	uxtb	r3, r3
 801d37e:	4a19      	ldr	r2, [pc, #100]	@ (801d3e4 <cmd_logtest+0xec>)
 801d380:	2100      	movs	r1, #0
 801d382:	4618      	mov	r0, r3
 801d384:	f000 ff5c 	bl	801e240 <shellLogPrint>
    SHELL_LOG_INFO((ShellLogModule_t)module, "This is an INFO message");
 801d388:	68bb      	ldr	r3, [r7, #8]
 801d38a:	b2db      	uxtb	r3, r3
 801d38c:	4a16      	ldr	r2, [pc, #88]	@ (801d3e8 <cmd_logtest+0xf0>)
 801d38e:	2101      	movs	r1, #1
 801d390:	4618      	mov	r0, r3
 801d392:	f000 ff55 	bl	801e240 <shellLogPrint>
    SHELL_LOG_WARNING((ShellLogModule_t)module, "This is a WARNING message");
 801d396:	68bb      	ldr	r3, [r7, #8]
 801d398:	b2db      	uxtb	r3, r3
 801d39a:	4a14      	ldr	r2, [pc, #80]	@ (801d3ec <cmd_logtest+0xf4>)
 801d39c:	2102      	movs	r1, #2
 801d39e:	4618      	mov	r0, r3
 801d3a0:	f000 ff4e 	bl	801e240 <shellLogPrint>
    SHELL_LOG_ERROR((ShellLogModule_t)module, "This is an ERROR message");
 801d3a4:	68bb      	ldr	r3, [r7, #8]
 801d3a6:	b2db      	uxtb	r3, r3
 801d3a8:	4a11      	ldr	r2, [pc, #68]	@ (801d3f0 <cmd_logtest+0xf8>)
 801d3aa:	2103      	movs	r1, #3
 801d3ac:	4618      	mov	r0, r3
 801d3ae:	f000 ff47 	bl	801e240 <shellLogPrint>
    
    SHELL_LOG_USER_INFO("Log test completed for module %s", 
 801d3b2:	68bb      	ldr	r3, [r7, #8]
 801d3b4:	b2db      	uxtb	r3, r3
 801d3b6:	4618      	mov	r0, r3
 801d3b8:	f000 fecc 	bl	801e154 <shellLogGetModuleName>
 801d3bc:	4603      	mov	r3, r0
 801d3be:	4a0d      	ldr	r2, [pc, #52]	@ (801d3f4 <cmd_logtest+0xfc>)
 801d3c0:	2101      	movs	r1, #1
 801d3c2:	2006      	movs	r0, #6
 801d3c4:	f000 ff3c 	bl	801e240 <shellLogPrint>
              shellLogGetModuleName((ShellLogModule_t)module));
    
    return 0;
 801d3c8:	2300      	movs	r3, #0
}
 801d3ca:	4618      	mov	r0, r3
 801d3cc:	3710      	adds	r7, #16
 801d3ce:	46bd      	mov	sp, r7
 801d3d0:	bd80      	pop	{r7, pc}
 801d3d2:	bf00      	nop
 801d3d4:	08022a5c 	.word	0x08022a5c
 801d3d8:	0802272c 	.word	0x0802272c
 801d3dc:	080228a8 	.word	0x080228a8
 801d3e0:	08022a78 	.word	0x08022a78
 801d3e4:	08022a9c 	.word	0x08022a9c
 801d3e8:	08022ab4 	.word	0x08022ab4
 801d3ec:	08022acc 	.word	0x08022acc
 801d3f0:	08022ae8 	.word	0x08022ae8
 801d3f4:	08022b04 	.word	0x08022b04

0801d3f8 <shellGetNextParamType>:
 * @param type 获取到的参数类型
 * 
 * @return int 下一个参数在签名中的索引
 */
static int shellGetNextParamType(const char *signature, int index, char *type)
{
 801d3f8:	b480      	push	{r7}
 801d3fa:	b087      	sub	sp, #28
 801d3fc:	af00      	add	r7, sp, #0
 801d3fe:	60f8      	str	r0, [r7, #12]
 801d400:	60b9      	str	r1, [r7, #8]
 801d402:	607a      	str	r2, [r7, #4]
    const char *p = signature + index;
 801d404:	68bb      	ldr	r3, [r7, #8]
 801d406:	68fa      	ldr	r2, [r7, #12]
 801d408:	4413      	add	r3, r2
 801d40a:	617b      	str	r3, [r7, #20]
#if SHELL_SUPPORT_ARRAY_PARAM == 1
    if (*p == '[')
 801d40c:	697b      	ldr	r3, [r7, #20]
 801d40e:	781b      	ldrb	r3, [r3, #0]
 801d410:	2b5b      	cmp	r3, #91	@ 0x5b
 801d412:	d10a      	bne.n	801d42a <shellGetNextParamType+0x32>
    {
        *type++ = *p++;
 801d414:	697a      	ldr	r2, [r7, #20]
 801d416:	1c53      	adds	r3, r2, #1
 801d418:	617b      	str	r3, [r7, #20]
 801d41a:	687b      	ldr	r3, [r7, #4]
 801d41c:	1c59      	adds	r1, r3, #1
 801d41e:	6079      	str	r1, [r7, #4]
 801d420:	7812      	ldrb	r2, [r2, #0]
 801d422:	701a      	strb	r2, [r3, #0]
        index++;
 801d424:	68bb      	ldr	r3, [r7, #8]
 801d426:	3301      	adds	r3, #1
 801d428:	60bb      	str	r3, [r7, #8]
    }
#endif /** SHELL_SUPPORT_ARRAY_PARAM == 1 */
    if (*p == 'L')
 801d42a:	697b      	ldr	r3, [r7, #20]
 801d42c:	781b      	ldrb	r3, [r3, #0]
 801d42e:	2b4c      	cmp	r3, #76	@ 0x4c
 801d430:	d11f      	bne.n	801d472 <shellGetNextParamType+0x7a>
    {
        while (*p != ';' && *p != 0)
 801d432:	e00a      	b.n	801d44a <shellGetNextParamType+0x52>
        {
            *type++ = *p++;
 801d434:	697a      	ldr	r2, [r7, #20]
 801d436:	1c53      	adds	r3, r2, #1
 801d438:	617b      	str	r3, [r7, #20]
 801d43a:	687b      	ldr	r3, [r7, #4]
 801d43c:	1c59      	adds	r1, r3, #1
 801d43e:	6079      	str	r1, [r7, #4]
 801d440:	7812      	ldrb	r2, [r2, #0]
 801d442:	701a      	strb	r2, [r3, #0]
            index++;
 801d444:	68bb      	ldr	r3, [r7, #8]
 801d446:	3301      	adds	r3, #1
 801d448:	60bb      	str	r3, [r7, #8]
        while (*p != ';' && *p != 0)
 801d44a:	697b      	ldr	r3, [r7, #20]
 801d44c:	781b      	ldrb	r3, [r3, #0]
 801d44e:	2b3b      	cmp	r3, #59	@ 0x3b
 801d450:	d003      	beq.n	801d45a <shellGetNextParamType+0x62>
 801d452:	697b      	ldr	r3, [r7, #20]
 801d454:	781b      	ldrb	r3, [r3, #0]
 801d456:	2b00      	cmp	r3, #0
 801d458:	d1ec      	bne.n	801d434 <shellGetNextParamType+0x3c>
        }
        *type++ = *p++;
 801d45a:	697a      	ldr	r2, [r7, #20]
 801d45c:	1c53      	adds	r3, r2, #1
 801d45e:	617b      	str	r3, [r7, #20]
 801d460:	687b      	ldr	r3, [r7, #4]
 801d462:	1c59      	adds	r1, r3, #1
 801d464:	6079      	str	r1, [r7, #4]
 801d466:	7812      	ldrb	r2, [r2, #0]
 801d468:	701a      	strb	r2, [r3, #0]
        index++;
 801d46a:	68bb      	ldr	r3, [r7, #8]
 801d46c:	3301      	adds	r3, #1
 801d46e:	60bb      	str	r3, [r7, #8]
 801d470:	e00c      	b.n	801d48c <shellGetNextParamType+0x94>
    }
    else if (*p != 0)
 801d472:	697b      	ldr	r3, [r7, #20]
 801d474:	781b      	ldrb	r3, [r3, #0]
 801d476:	2b00      	cmp	r3, #0
 801d478:	d008      	beq.n	801d48c <shellGetNextParamType+0x94>
    {
        *type++ = *p;
 801d47a:	687b      	ldr	r3, [r7, #4]
 801d47c:	1c5a      	adds	r2, r3, #1
 801d47e:	607a      	str	r2, [r7, #4]
 801d480:	697a      	ldr	r2, [r7, #20]
 801d482:	7812      	ldrb	r2, [r2, #0]
 801d484:	701a      	strb	r2, [r3, #0]
        index++;
 801d486:	68bb      	ldr	r3, [r7, #8]
 801d488:	3301      	adds	r3, #1
 801d48a:	60bb      	str	r3, [r7, #8]
    }
    *type = '\0';
 801d48c:	687b      	ldr	r3, [r7, #4]
 801d48e:	2200      	movs	r2, #0
 801d490:	701a      	strb	r2, [r3, #0]
    return index;
 801d492:	68bb      	ldr	r3, [r7, #8]
}
 801d494:	4618      	mov	r0, r3
 801d496:	371c      	adds	r7, #28
 801d498:	46bd      	mov	sp, r7
 801d49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d49e:	4770      	bx	lr

0801d4a0 <shellGetParamNumExcept>:
 * @param signature 函数签名
 * 
 * @return int 参数个数
 */
static int shellGetParamNumExcept(const char *signature)
{
 801d4a0:	b480      	push	{r7}
 801d4a2:	b085      	sub	sp, #20
 801d4a4:	af00      	add	r7, sp, #0
 801d4a6:	6078      	str	r0, [r7, #4]
    int num = 0;
 801d4a8:	2300      	movs	r3, #0
 801d4aa:	60fb      	str	r3, [r7, #12]
    const char *p = signature;
 801d4ac:	687b      	ldr	r3, [r7, #4]
 801d4ae:	60bb      	str	r3, [r7, #8]
    
    while (*p)
 801d4b0:	e020      	b.n	801d4f4 <shellGetParamNumExcept+0x54>
    {
    #if SHELL_SUPPORT_ARRAY_PARAM == 1
        if (*p == '[')
 801d4b2:	68bb      	ldr	r3, [r7, #8]
 801d4b4:	781b      	ldrb	r3, [r3, #0]
 801d4b6:	2b5b      	cmp	r3, #91	@ 0x5b
 801d4b8:	d102      	bne.n	801d4c0 <shellGetParamNumExcept+0x20>
        {
            p++;
 801d4ba:	68bb      	ldr	r3, [r7, #8]
 801d4bc:	3301      	adds	r3, #1
 801d4be:	60bb      	str	r3, [r7, #8]
        }
    #endif /** SHELL_SUPPORT_ARRAY_PARAM == 1 */
        if (*p == 'L')
 801d4c0:	68bb      	ldr	r3, [r7, #8]
 801d4c2:	781b      	ldrb	r3, [r3, #0]
 801d4c4:	2b4c      	cmp	r3, #76	@ 0x4c
 801d4c6:	d10f      	bne.n	801d4e8 <shellGetParamNumExcept+0x48>
        {
            while (*p != ';' && *p != 0)
 801d4c8:	e002      	b.n	801d4d0 <shellGetParamNumExcept+0x30>
            {
                p++;
 801d4ca:	68bb      	ldr	r3, [r7, #8]
 801d4cc:	3301      	adds	r3, #1
 801d4ce:	60bb      	str	r3, [r7, #8]
            while (*p != ';' && *p != 0)
 801d4d0:	68bb      	ldr	r3, [r7, #8]
 801d4d2:	781b      	ldrb	r3, [r3, #0]
 801d4d4:	2b3b      	cmp	r3, #59	@ 0x3b
 801d4d6:	d003      	beq.n	801d4e0 <shellGetParamNumExcept+0x40>
 801d4d8:	68bb      	ldr	r3, [r7, #8]
 801d4da:	781b      	ldrb	r3, [r3, #0]
 801d4dc:	2b00      	cmp	r3, #0
 801d4de:	d1f4      	bne.n	801d4ca <shellGetParamNumExcept+0x2a>
            }
            p++;
 801d4e0:	68bb      	ldr	r3, [r7, #8]
 801d4e2:	3301      	adds	r3, #1
 801d4e4:	60bb      	str	r3, [r7, #8]
 801d4e6:	e002      	b.n	801d4ee <shellGetParamNumExcept+0x4e>
        }
        else
        {
            p++;
 801d4e8:	68bb      	ldr	r3, [r7, #8]
 801d4ea:	3301      	adds	r3, #1
 801d4ec:	60bb      	str	r3, [r7, #8]
        }
        num++;
 801d4ee:	68fb      	ldr	r3, [r7, #12]
 801d4f0:	3301      	adds	r3, #1
 801d4f2:	60fb      	str	r3, [r7, #12]
    while (*p)
 801d4f4:	68bb      	ldr	r3, [r7, #8]
 801d4f6:	781b      	ldrb	r3, [r3, #0]
 801d4f8:	2b00      	cmp	r3, #0
 801d4fa:	d1da      	bne.n	801d4b2 <shellGetParamNumExcept+0x12>
    }
    return num;
 801d4fc:	68fb      	ldr	r3, [r7, #12]
}
 801d4fe:	4618      	mov	r0, r3
 801d500:	3714      	adds	r7, #20
 801d502:	46bd      	mov	sp, r7
 801d504:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d508:	4770      	bx	lr

0801d50a <shellExtNumType>:
 * 
 * @param string 参数字符串
 * @return ShellNumType 进制
 */
static ShellNumType shellExtNumType(char *string)
{
 801d50a:	b480      	push	{r7}
 801d50c:	b085      	sub	sp, #20
 801d50e:	af00      	add	r7, sp, #0
 801d510:	6078      	str	r0, [r7, #4]
    char *p = string;
 801d512:	687b      	ldr	r3, [r7, #4]
 801d514:	60fb      	str	r3, [r7, #12]
    ShellNumType type = NUM_TYPE_DEC;
 801d516:	2300      	movs	r3, #0
 801d518:	72fb      	strb	r3, [r7, #11]

    if ((*p == '0') && ((*(p + 1) == 'x') || (*(p + 1) == 'X')))
 801d51a:	68fb      	ldr	r3, [r7, #12]
 801d51c:	781b      	ldrb	r3, [r3, #0]
 801d51e:	2b30      	cmp	r3, #48	@ 0x30
 801d520:	d10c      	bne.n	801d53c <shellExtNumType+0x32>
 801d522:	68fb      	ldr	r3, [r7, #12]
 801d524:	3301      	adds	r3, #1
 801d526:	781b      	ldrb	r3, [r3, #0]
 801d528:	2b78      	cmp	r3, #120	@ 0x78
 801d52a:	d004      	beq.n	801d536 <shellExtNumType+0x2c>
 801d52c:	68fb      	ldr	r3, [r7, #12]
 801d52e:	3301      	adds	r3, #1
 801d530:	781b      	ldrb	r3, [r3, #0]
 801d532:	2b58      	cmp	r3, #88	@ 0x58
 801d534:	d102      	bne.n	801d53c <shellExtNumType+0x32>
    {
        type = NUM_TYPE_HEX;
 801d536:	2303      	movs	r3, #3
 801d538:	72fb      	strb	r3, [r7, #11]
 801d53a:	e016      	b.n	801d56a <shellExtNumType+0x60>
    }
    else if ((*p == '0') && ((*(p + 1) == 'b') || (*(p + 1) == 'B')))
 801d53c:	68fb      	ldr	r3, [r7, #12]
 801d53e:	781b      	ldrb	r3, [r3, #0]
 801d540:	2b30      	cmp	r3, #48	@ 0x30
 801d542:	d10c      	bne.n	801d55e <shellExtNumType+0x54>
 801d544:	68fb      	ldr	r3, [r7, #12]
 801d546:	3301      	adds	r3, #1
 801d548:	781b      	ldrb	r3, [r3, #0]
 801d54a:	2b62      	cmp	r3, #98	@ 0x62
 801d54c:	d004      	beq.n	801d558 <shellExtNumType+0x4e>
 801d54e:	68fb      	ldr	r3, [r7, #12]
 801d550:	3301      	adds	r3, #1
 801d552:	781b      	ldrb	r3, [r3, #0]
 801d554:	2b42      	cmp	r3, #66	@ 0x42
 801d556:	d102      	bne.n	801d55e <shellExtNumType+0x54>
    {
        type = NUM_TYPE_BIN;
 801d558:	2301      	movs	r3, #1
 801d55a:	72fb      	strb	r3, [r7, #11]
 801d55c:	e005      	b.n	801d56a <shellExtNumType+0x60>
    }
    else if (*p == '0')
 801d55e:	68fb      	ldr	r3, [r7, #12]
 801d560:	781b      	ldrb	r3, [r3, #0]
 801d562:	2b30      	cmp	r3, #48	@ 0x30
 801d564:	d10e      	bne.n	801d584 <shellExtNumType+0x7a>
    {
        type = NUM_TYPE_OCT;
 801d566:	2302      	movs	r3, #2
 801d568:	72fb      	strb	r3, [r7, #11]
    }
    
    while (*p++)
 801d56a:	e00b      	b.n	801d584 <shellExtNumType+0x7a>
    {
        if (*p == '.' && *(p + 1) != 0)
 801d56c:	68fb      	ldr	r3, [r7, #12]
 801d56e:	781b      	ldrb	r3, [r3, #0]
 801d570:	2b2e      	cmp	r3, #46	@ 0x2e
 801d572:	d107      	bne.n	801d584 <shellExtNumType+0x7a>
 801d574:	68fb      	ldr	r3, [r7, #12]
 801d576:	3301      	adds	r3, #1
 801d578:	781b      	ldrb	r3, [r3, #0]
 801d57a:	2b00      	cmp	r3, #0
 801d57c:	d002      	beq.n	801d584 <shellExtNumType+0x7a>
        {
            type = NUM_TYPE_FLOAT;
 801d57e:	2304      	movs	r3, #4
 801d580:	72fb      	strb	r3, [r7, #11]
            break;
 801d582:	e005      	b.n	801d590 <shellExtNumType+0x86>
    while (*p++)
 801d584:	68fb      	ldr	r3, [r7, #12]
 801d586:	1c5a      	adds	r2, r3, #1
 801d588:	60fa      	str	r2, [r7, #12]
 801d58a:	781b      	ldrb	r3, [r3, #0]
 801d58c:	2b00      	cmp	r3, #0
 801d58e:	d1ed      	bne.n	801d56c <shellExtNumType+0x62>
        }
    }

    return type;
 801d590:	7afb      	ldrb	r3, [r7, #11]
}
 801d592:	4618      	mov	r0, r3
 801d594:	3714      	adds	r7, #20
 801d596:	46bd      	mov	sp, r7
 801d598:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d59c:	4770      	bx	lr

0801d59e <shellExtToNum>:
 * 
 * @param code 字符
 * @return char 数字
 */
static char shellExtToNum(char code)
{
 801d59e:	b480      	push	{r7}
 801d5a0:	b083      	sub	sp, #12
 801d5a2:	af00      	add	r7, sp, #0
 801d5a4:	4603      	mov	r3, r0
 801d5a6:	71fb      	strb	r3, [r7, #7]
    if ((code >= '0') && (code <= '9'))
 801d5a8:	79fb      	ldrb	r3, [r7, #7]
 801d5aa:	2b2f      	cmp	r3, #47	@ 0x2f
 801d5ac:	d906      	bls.n	801d5bc <shellExtToNum+0x1e>
 801d5ae:	79fb      	ldrb	r3, [r7, #7]
 801d5b0:	2b39      	cmp	r3, #57	@ 0x39
 801d5b2:	d803      	bhi.n	801d5bc <shellExtToNum+0x1e>
    {
        return code -'0';
 801d5b4:	79fb      	ldrb	r3, [r7, #7]
 801d5b6:	3b30      	subs	r3, #48	@ 0x30
 801d5b8:	b2db      	uxtb	r3, r3
 801d5ba:	e014      	b.n	801d5e6 <shellExtToNum+0x48>
    }
    else if ((code >= 'a') && (code <= 'f'))
 801d5bc:	79fb      	ldrb	r3, [r7, #7]
 801d5be:	2b60      	cmp	r3, #96	@ 0x60
 801d5c0:	d906      	bls.n	801d5d0 <shellExtToNum+0x32>
 801d5c2:	79fb      	ldrb	r3, [r7, #7]
 801d5c4:	2b66      	cmp	r3, #102	@ 0x66
 801d5c6:	d803      	bhi.n	801d5d0 <shellExtToNum+0x32>
    {
        return code - 'a' + 10;
 801d5c8:	79fb      	ldrb	r3, [r7, #7]
 801d5ca:	3b57      	subs	r3, #87	@ 0x57
 801d5cc:	b2db      	uxtb	r3, r3
 801d5ce:	e00a      	b.n	801d5e6 <shellExtToNum+0x48>
    }
    else if ((code >= 'A') && (code <= 'F'))
 801d5d0:	79fb      	ldrb	r3, [r7, #7]
 801d5d2:	2b40      	cmp	r3, #64	@ 0x40
 801d5d4:	d906      	bls.n	801d5e4 <shellExtToNum+0x46>
 801d5d6:	79fb      	ldrb	r3, [r7, #7]
 801d5d8:	2b46      	cmp	r3, #70	@ 0x46
 801d5da:	d803      	bhi.n	801d5e4 <shellExtToNum+0x46>
    {
        return code - 'A' + 10;
 801d5dc:	79fb      	ldrb	r3, [r7, #7]
 801d5de:	3b37      	subs	r3, #55	@ 0x37
 801d5e0:	b2db      	uxtb	r3, r3
 801d5e2:	e000      	b.n	801d5e6 <shellExtToNum+0x48>
    }
    else
    {
        return 0;
 801d5e4:	2300      	movs	r3, #0
    }
}
 801d5e6:	4618      	mov	r0, r3
 801d5e8:	370c      	adds	r7, #12
 801d5ea:	46bd      	mov	sp, r7
 801d5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d5f0:	4770      	bx	lr
	...

0801d5f4 <shellExtParseChar>:
 * 
 * @param string 字符串参数
 * @return char 解析出的字符
 */
static char shellExtParseChar(char *string)
{
 801d5f4:	b480      	push	{r7}
 801d5f6:	b085      	sub	sp, #20
 801d5f8:	af00      	add	r7, sp, #0
 801d5fa:	6078      	str	r0, [r7, #4]
    char *p = (*string == '\'') ? (string + 1) : string;
 801d5fc:	687b      	ldr	r3, [r7, #4]
 801d5fe:	781b      	ldrb	r3, [r3, #0]
 801d600:	2b27      	cmp	r3, #39	@ 0x27
 801d602:	d102      	bne.n	801d60a <shellExtParseChar+0x16>
 801d604:	687b      	ldr	r3, [r7, #4]
 801d606:	3301      	adds	r3, #1
 801d608:	e000      	b.n	801d60c <shellExtParseChar+0x18>
 801d60a:	687b      	ldr	r3, [r7, #4]
 801d60c:	60bb      	str	r3, [r7, #8]
    char value = 0;
 801d60e:	2300      	movs	r3, #0
 801d610:	73fb      	strb	r3, [r7, #15]

    if (*p == '\\')
 801d612:	68bb      	ldr	r3, [r7, #8]
 801d614:	781b      	ldrb	r3, [r3, #0]
 801d616:	2b5c      	cmp	r3, #92	@ 0x5c
 801d618:	d149      	bne.n	801d6ae <shellExtParseChar+0xba>
    {
        switch (*(p + 1))
 801d61a:	68bb      	ldr	r3, [r7, #8]
 801d61c:	3301      	adds	r3, #1
 801d61e:	781b      	ldrb	r3, [r3, #0]
 801d620:	2b30      	cmp	r3, #48	@ 0x30
 801d622:	d03d      	beq.n	801d6a0 <shellExtParseChar+0xac>
 801d624:	2b30      	cmp	r3, #48	@ 0x30
 801d626:	db3e      	blt.n	801d6a6 <shellExtParseChar+0xb2>
 801d628:	2b74      	cmp	r3, #116	@ 0x74
 801d62a:	dc3c      	bgt.n	801d6a6 <shellExtParseChar+0xb2>
 801d62c:	2b62      	cmp	r3, #98	@ 0x62
 801d62e:	db3a      	blt.n	801d6a6 <shellExtParseChar+0xb2>
 801d630:	3b62      	subs	r3, #98	@ 0x62
 801d632:	2b12      	cmp	r3, #18
 801d634:	d837      	bhi.n	801d6a6 <shellExtParseChar+0xb2>
 801d636:	a201      	add	r2, pc, #4	@ (adr r2, 801d63c <shellExtParseChar+0x48>)
 801d638:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d63c:	0801d689 	.word	0x0801d689
 801d640:	0801d6a7 	.word	0x0801d6a7
 801d644:	0801d6a7 	.word	0x0801d6a7
 801d648:	0801d6a7 	.word	0x0801d6a7
 801d64c:	0801d6a7 	.word	0x0801d6a7
 801d650:	0801d6a7 	.word	0x0801d6a7
 801d654:	0801d6a7 	.word	0x0801d6a7
 801d658:	0801d6a7 	.word	0x0801d6a7
 801d65c:	0801d6a7 	.word	0x0801d6a7
 801d660:	0801d6a7 	.word	0x0801d6a7
 801d664:	0801d6a7 	.word	0x0801d6a7
 801d668:	0801d6a7 	.word	0x0801d6a7
 801d66c:	0801d695 	.word	0x0801d695
 801d670:	0801d6a7 	.word	0x0801d6a7
 801d674:	0801d6a7 	.word	0x0801d6a7
 801d678:	0801d6a7 	.word	0x0801d6a7
 801d67c:	0801d68f 	.word	0x0801d68f
 801d680:	0801d6a7 	.word	0x0801d6a7
 801d684:	0801d69b 	.word	0x0801d69b
        {
        case 'b':
            value = '\b';
 801d688:	2308      	movs	r3, #8
 801d68a:	73fb      	strb	r3, [r7, #15]
            break;
 801d68c:	e012      	b.n	801d6b4 <shellExtParseChar+0xc0>
        case 'r':
            value = '\r';
 801d68e:	230d      	movs	r3, #13
 801d690:	73fb      	strb	r3, [r7, #15]
            break;
 801d692:	e00f      	b.n	801d6b4 <shellExtParseChar+0xc0>
        case 'n':
            value = '\n';
 801d694:	230a      	movs	r3, #10
 801d696:	73fb      	strb	r3, [r7, #15]
            break;
 801d698:	e00c      	b.n	801d6b4 <shellExtParseChar+0xc0>
        case 't':
            value = '\t';
 801d69a:	2309      	movs	r3, #9
 801d69c:	73fb      	strb	r3, [r7, #15]
            break;
 801d69e:	e009      	b.n	801d6b4 <shellExtParseChar+0xc0>
        case '0':
            value = 0;
 801d6a0:	2300      	movs	r3, #0
 801d6a2:	73fb      	strb	r3, [r7, #15]
            break;
 801d6a4:	e006      	b.n	801d6b4 <shellExtParseChar+0xc0>
        default:
            value = *(p + 1);
 801d6a6:	68bb      	ldr	r3, [r7, #8]
 801d6a8:	785b      	ldrb	r3, [r3, #1]
 801d6aa:	73fb      	strb	r3, [r7, #15]
            break;
 801d6ac:	e002      	b.n	801d6b4 <shellExtParseChar+0xc0>
        }
    }
    else
    {
        value = *p;
 801d6ae:	68bb      	ldr	r3, [r7, #8]
 801d6b0:	781b      	ldrb	r3, [r3, #0]
 801d6b2:	73fb      	strb	r3, [r7, #15]
    }
    return value;
 801d6b4:	7bfb      	ldrb	r3, [r7, #15]
}
 801d6b6:	4618      	mov	r0, r3
 801d6b8:	3714      	adds	r7, #20
 801d6ba:	46bd      	mov	sp, r7
 801d6bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d6c0:	4770      	bx	lr
 801d6c2:	bf00      	nop

0801d6c4 <shellExtParseString>:
 * 
 * @param string 字符串参数
 * @return char* 解析出的字符串
 */
static char* shellExtParseString(char *string)
{
 801d6c4:	b590      	push	{r4, r7, lr}
 801d6c6:	b085      	sub	sp, #20
 801d6c8:	af00      	add	r7, sp, #0
 801d6ca:	6078      	str	r0, [r7, #4]
    char *p = string;
 801d6cc:	687b      	ldr	r3, [r7, #4]
 801d6ce:	60fb      	str	r3, [r7, #12]
    unsigned short index = 0;
 801d6d0:	2300      	movs	r3, #0
 801d6d2:	817b      	strh	r3, [r7, #10]

    if (*string == '\"')
 801d6d4:	687b      	ldr	r3, [r7, #4]
 801d6d6:	781b      	ldrb	r3, [r3, #0]
 801d6d8:	2b22      	cmp	r3, #34	@ 0x22
 801d6da:	d12b      	bne.n	801d734 <shellExtParseString+0x70>
    {
        p = ++string;
 801d6dc:	687b      	ldr	r3, [r7, #4]
 801d6de:	3301      	adds	r3, #1
 801d6e0:	607b      	str	r3, [r7, #4]
 801d6e2:	687b      	ldr	r3, [r7, #4]
 801d6e4:	60fb      	str	r3, [r7, #12]
    }

    while (*p)
 801d6e6:	e025      	b.n	801d734 <shellExtParseString+0x70>
    {
        if (*p == '\\')
 801d6e8:	68fb      	ldr	r3, [r7, #12]
 801d6ea:	781b      	ldrb	r3, [r3, #0]
 801d6ec:	2b5c      	cmp	r3, #92	@ 0x5c
 801d6ee:	d10b      	bne.n	801d708 <shellExtParseString+0x44>
        {
            *(string + index) = shellExtParseChar(p);
 801d6f0:	897b      	ldrh	r3, [r7, #10]
 801d6f2:	687a      	ldr	r2, [r7, #4]
 801d6f4:	18d4      	adds	r4, r2, r3
 801d6f6:	68f8      	ldr	r0, [r7, #12]
 801d6f8:	f7ff ff7c 	bl	801d5f4 <shellExtParseChar>
 801d6fc:	4603      	mov	r3, r0
 801d6fe:	7023      	strb	r3, [r4, #0]
            p++;
 801d700:	68fb      	ldr	r3, [r7, #12]
 801d702:	3301      	adds	r3, #1
 801d704:	60fb      	str	r3, [r7, #12]
 801d706:	e00f      	b.n	801d728 <shellExtParseString+0x64>
        }
        else if (*p == '\"')
 801d708:	68fb      	ldr	r3, [r7, #12]
 801d70a:	781b      	ldrb	r3, [r3, #0]
 801d70c:	2b22      	cmp	r3, #34	@ 0x22
 801d70e:	d105      	bne.n	801d71c <shellExtParseString+0x58>
        {
            *(string + index) = 0;
 801d710:	897b      	ldrh	r3, [r7, #10]
 801d712:	687a      	ldr	r2, [r7, #4]
 801d714:	4413      	add	r3, r2
 801d716:	2200      	movs	r2, #0
 801d718:	701a      	strb	r2, [r3, #0]
 801d71a:	e005      	b.n	801d728 <shellExtParseString+0x64>
        }
        else
        {
            *(string + index) = *p;
 801d71c:	897b      	ldrh	r3, [r7, #10]
 801d71e:	687a      	ldr	r2, [r7, #4]
 801d720:	4413      	add	r3, r2
 801d722:	68fa      	ldr	r2, [r7, #12]
 801d724:	7812      	ldrb	r2, [r2, #0]
 801d726:	701a      	strb	r2, [r3, #0]
        }
        p++;
 801d728:	68fb      	ldr	r3, [r7, #12]
 801d72a:	3301      	adds	r3, #1
 801d72c:	60fb      	str	r3, [r7, #12]
        index ++;
 801d72e:	897b      	ldrh	r3, [r7, #10]
 801d730:	3301      	adds	r3, #1
 801d732:	817b      	strh	r3, [r7, #10]
    while (*p)
 801d734:	68fb      	ldr	r3, [r7, #12]
 801d736:	781b      	ldrb	r3, [r3, #0]
 801d738:	2b00      	cmp	r3, #0
 801d73a:	d1d5      	bne.n	801d6e8 <shellExtParseString+0x24>
    }
    *(string + index) = 0;
 801d73c:	897b      	ldrh	r3, [r7, #10]
 801d73e:	687a      	ldr	r2, [r7, #4]
 801d740:	4413      	add	r3, r2
 801d742:	2200      	movs	r2, #0
 801d744:	701a      	strb	r2, [r3, #0]
    return string;
 801d746:	687b      	ldr	r3, [r7, #4]
}
 801d748:	4618      	mov	r0, r3
 801d74a:	3714      	adds	r7, #20
 801d74c:	46bd      	mov	sp, r7
 801d74e:	bd90      	pop	{r4, r7, pc}

0801d750 <shellExtParseNumber>:
 * 
 * @param string 字符串参数
 * @return size_t 解析出的数字
 */
static size_t shellExtParseNumber(char *string)
{
 801d750:	b590      	push	{r4, r7, lr}
 801d752:	b08b      	sub	sp, #44	@ 0x2c
 801d754:	af00      	add	r7, sp, #0
 801d756:	6078      	str	r0, [r7, #4]
    ShellNumType type = NUM_TYPE_DEC;
 801d758:	2300      	movs	r3, #0
 801d75a:	74fb      	strb	r3, [r7, #19]
    char radix = 10;
 801d75c:	230a      	movs	r3, #10
 801d75e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    char *p = string;
 801d762:	687b      	ldr	r3, [r7, #4]
 801d764:	623b      	str	r3, [r7, #32]
    char offset = 0;
 801d766:	2300      	movs	r3, #0
 801d768:	77fb      	strb	r3, [r7, #31]
    signed char sign = 1;
 801d76a:	2301      	movs	r3, #1
 801d76c:	77bb      	strb	r3, [r7, #30]
    size_t valueInt = 0;
 801d76e:	2300      	movs	r3, #0
 801d770:	61bb      	str	r3, [r7, #24]
    float valueFloat = 0.0;
 801d772:	f04f 0300 	mov.w	r3, #0
 801d776:	60fb      	str	r3, [r7, #12]
    size_t devide = 0;
 801d778:	2300      	movs	r3, #0
 801d77a:	617b      	str	r3, [r7, #20]

    if (*string == '-')
 801d77c:	687b      	ldr	r3, [r7, #4]
 801d77e:	781b      	ldrb	r3, [r3, #0]
 801d780:	2b2d      	cmp	r3, #45	@ 0x2d
 801d782:	d101      	bne.n	801d788 <shellExtParseNumber+0x38>
    {
        sign = -1;
 801d784:	23ff      	movs	r3, #255	@ 0xff
 801d786:	77bb      	strb	r3, [r7, #30]
    }

    type = shellExtNumType(string + ((sign == -1) ? 1 : 0));
 801d788:	f997 301e 	ldrsb.w	r3, [r7, #30]
 801d78c:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d790:	d101      	bne.n	801d796 <shellExtParseNumber+0x46>
 801d792:	2301      	movs	r3, #1
 801d794:	e000      	b.n	801d798 <shellExtParseNumber+0x48>
 801d796:	2300      	movs	r3, #0
 801d798:	687a      	ldr	r2, [r7, #4]
 801d79a:	4413      	add	r3, r2
 801d79c:	4618      	mov	r0, r3
 801d79e:	f7ff feb4 	bl	801d50a <shellExtNumType>
 801d7a2:	4603      	mov	r3, r0
 801d7a4:	74fb      	strb	r3, [r7, #19]

    switch ((char)type)
 801d7a6:	7cfb      	ldrb	r3, [r7, #19]
 801d7a8:	2b03      	cmp	r3, #3
 801d7aa:	d006      	beq.n	801d7ba <shellExtParseNumber+0x6a>
 801d7ac:	2b03      	cmp	r3, #3
 801d7ae:	dc16      	bgt.n	801d7de <shellExtParseNumber+0x8e>
 801d7b0:	2b01      	cmp	r3, #1
 801d7b2:	d00e      	beq.n	801d7d2 <shellExtParseNumber+0x82>
 801d7b4:	2b02      	cmp	r3, #2
 801d7b6:	d006      	beq.n	801d7c6 <shellExtParseNumber+0x76>
        radix = 2;
        offset = 2;
        break;
    
    default:
        break;
 801d7b8:	e011      	b.n	801d7de <shellExtParseNumber+0x8e>
        radix = 16;
 801d7ba:	2310      	movs	r3, #16
 801d7bc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        offset = 2;
 801d7c0:	2302      	movs	r3, #2
 801d7c2:	77fb      	strb	r3, [r7, #31]
        break;
 801d7c4:	e00c      	b.n	801d7e0 <shellExtParseNumber+0x90>
        radix = 8;
 801d7c6:	2308      	movs	r3, #8
 801d7c8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        offset = 1;
 801d7cc:	2301      	movs	r3, #1
 801d7ce:	77fb      	strb	r3, [r7, #31]
        break;
 801d7d0:	e006      	b.n	801d7e0 <shellExtParseNumber+0x90>
        radix = 2;
 801d7d2:	2302      	movs	r3, #2
 801d7d4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        offset = 2;
 801d7d8:	2302      	movs	r3, #2
 801d7da:	77fb      	strb	r3, [r7, #31]
        break;
 801d7dc:	e000      	b.n	801d7e0 <shellExtParseNumber+0x90>
        break;
 801d7de:	bf00      	nop
    }

    p = string + offset + ((sign == -1) ? 1 : 0);
 801d7e0:	7ffb      	ldrb	r3, [r7, #31]
 801d7e2:	f997 201e 	ldrsb.w	r2, [r7, #30]
 801d7e6:	f1b2 3fff 	cmp.w	r2, #4294967295
 801d7ea:	d101      	bne.n	801d7f0 <shellExtParseNumber+0xa0>
 801d7ec:	2201      	movs	r2, #1
 801d7ee:	e000      	b.n	801d7f2 <shellExtParseNumber+0xa2>
 801d7f0:	2200      	movs	r2, #0
 801d7f2:	4413      	add	r3, r2
 801d7f4:	687a      	ldr	r2, [r7, #4]
 801d7f6:	4413      	add	r3, r2
 801d7f8:	623b      	str	r3, [r7, #32]

    while (*p)
 801d7fa:	e01f      	b.n	801d83c <shellExtParseNumber+0xec>
    {
        if (*p == '.')
 801d7fc:	6a3b      	ldr	r3, [r7, #32]
 801d7fe:	781b      	ldrb	r3, [r3, #0]
 801d800:	2b2e      	cmp	r3, #46	@ 0x2e
 801d802:	d105      	bne.n	801d810 <shellExtParseNumber+0xc0>
        {
            devide = 1;
 801d804:	2301      	movs	r3, #1
 801d806:	617b      	str	r3, [r7, #20]
            p++;
 801d808:	6a3b      	ldr	r3, [r7, #32]
 801d80a:	3301      	adds	r3, #1
 801d80c:	623b      	str	r3, [r7, #32]
            continue;
 801d80e:	e015      	b.n	801d83c <shellExtParseNumber+0xec>
        }
        valueInt = valueInt * radix + shellExtToNum(*p);
 801d810:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801d814:	69ba      	ldr	r2, [r7, #24]
 801d816:	fb02 f403 	mul.w	r4, r2, r3
 801d81a:	6a3b      	ldr	r3, [r7, #32]
 801d81c:	781b      	ldrb	r3, [r3, #0]
 801d81e:	4618      	mov	r0, r3
 801d820:	f7ff febd 	bl	801d59e <shellExtToNum>
 801d824:	4603      	mov	r3, r0
 801d826:	4423      	add	r3, r4
 801d828:	61bb      	str	r3, [r7, #24]
        devide *= 10;
 801d82a:	697a      	ldr	r2, [r7, #20]
 801d82c:	4613      	mov	r3, r2
 801d82e:	009b      	lsls	r3, r3, #2
 801d830:	4413      	add	r3, r2
 801d832:	005b      	lsls	r3, r3, #1
 801d834:	617b      	str	r3, [r7, #20]
        p++;
 801d836:	6a3b      	ldr	r3, [r7, #32]
 801d838:	3301      	adds	r3, #1
 801d83a:	623b      	str	r3, [r7, #32]
    while (*p)
 801d83c:	6a3b      	ldr	r3, [r7, #32]
 801d83e:	781b      	ldrb	r3, [r3, #0]
 801d840:	2b00      	cmp	r3, #0
 801d842:	d1db      	bne.n	801d7fc <shellExtParseNumber+0xac>
    }
    if (type == NUM_TYPE_FLOAT && devide != 0)
 801d844:	7cfb      	ldrb	r3, [r7, #19]
 801d846:	2b04      	cmp	r3, #4
 801d848:	d11c      	bne.n	801d884 <shellExtParseNumber+0x134>
 801d84a:	697b      	ldr	r3, [r7, #20]
 801d84c:	2b00      	cmp	r3, #0
 801d84e:	d019      	beq.n	801d884 <shellExtParseNumber+0x134>
    {
        valueFloat = (float)valueInt / devide * sign;
 801d850:	69bb      	ldr	r3, [r7, #24]
 801d852:	ee07 3a90 	vmov	s15, r3
 801d856:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801d85a:	697b      	ldr	r3, [r7, #20]
 801d85c:	ee07 3a90 	vmov	s15, r3
 801d860:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d864:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801d868:	f997 301e 	ldrsb.w	r3, [r7, #30]
 801d86c:	ee07 3a90 	vmov	s15, r3
 801d870:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d874:	ee67 7a27 	vmul.f32	s15, s14, s15
 801d878:	edc7 7a03 	vstr	s15, [r7, #12]
        return *(size_t *)(&valueFloat);
 801d87c:	f107 030c 	add.w	r3, r7, #12
 801d880:	681b      	ldr	r3, [r3, #0]
 801d882:	e004      	b.n	801d88e <shellExtParseNumber+0x13e>
    }
    else
    {
        return valueInt * sign;
 801d884:	f997 301e 	ldrsb.w	r3, [r7, #30]
 801d888:	69ba      	ldr	r2, [r7, #24]
 801d88a:	fb02 f303 	mul.w	r3, r2, r3
    }
}
 801d88e:	4618      	mov	r0, r3
 801d890:	372c      	adds	r7, #44	@ 0x2c
 801d892:	46bd      	mov	sp, r7
 801d894:	bd90      	pop	{r4, r7, pc}

0801d896 <shellExtParseVar>:
 * @param result 解析结果
 *
 * @return int 0 解析成功 --1 解析失败
 */
static int shellExtParseVar(Shell *shell, char *var, size_t *result)
{
 801d896:	b580      	push	{r7, lr}
 801d898:	b086      	sub	sp, #24
 801d89a:	af00      	add	r7, sp, #0
 801d89c:	60f8      	str	r0, [r7, #12]
 801d89e:	60b9      	str	r1, [r7, #8]
 801d8a0:	607a      	str	r2, [r7, #4]
    ShellCommand *command = shellSeekCommand(shell,
                                             var + 1,
 801d8a2:	68bb      	ldr	r3, [r7, #8]
 801d8a4:	1c59      	adds	r1, r3, #1
                                             shell->commandList.base,
 801d8a6:	68fb      	ldr	r3, [r7, #12]
 801d8a8:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
    ShellCommand *command = shellSeekCommand(shell,
 801d8aa:	2300      	movs	r3, #0
 801d8ac:	68f8      	ldr	r0, [r7, #12]
 801d8ae:	f7fd fca3 	bl	801b1f8 <shellSeekCommand>
 801d8b2:	6178      	str	r0, [r7, #20]
                                             0);
    if (command)
 801d8b4:	697b      	ldr	r3, [r7, #20]
 801d8b6:	2b00      	cmp	r3, #0
 801d8b8:	d009      	beq.n	801d8ce <shellExtParseVar+0x38>
    {
        *result = shellGetVarValue(shell, command);
 801d8ba:	6979      	ldr	r1, [r7, #20]
 801d8bc:	68f8      	ldr	r0, [r7, #12]
 801d8be:	f7fd fd11 	bl	801b2e4 <shellGetVarValue>
 801d8c2:	4603      	mov	r3, r0
 801d8c4:	461a      	mov	r2, r3
 801d8c6:	687b      	ldr	r3, [r7, #4]
 801d8c8:	601a      	str	r2, [r3, #0]
        return 0;
 801d8ca:	2300      	movs	r3, #0
 801d8cc:	e001      	b.n	801d8d2 <shellExtParseVar+0x3c>
    }
    else
    {
        return -1;
 801d8ce:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 801d8d2:	4618      	mov	r0, r3
 801d8d4:	3718      	adds	r7, #24
 801d8d6:	46bd      	mov	sp, r7
 801d8d8:	bd80      	pop	{r7, pc}
	...

0801d8dc <shellExtParsePara>:
 * @param result 解析结果
 * 
 * @return int 0 解析成功 --1 解析失败
 */
int shellExtParsePara(Shell *shell, char *string, char *type, size_t *result)
{
 801d8dc:	b590      	push	{r4, r7, lr}
 801d8de:	b087      	sub	sp, #28
 801d8e0:	af00      	add	r7, sp, #0
 801d8e2:	60f8      	str	r0, [r7, #12]
 801d8e4:	60b9      	str	r1, [r7, #8]
 801d8e6:	607a      	str	r2, [r7, #4]
 801d8e8:	603b      	str	r3, [r7, #0]
    if (type == NULL || (*string == '$' && *(string + 1)))
 801d8ea:	687b      	ldr	r3, [r7, #4]
 801d8ec:	2b00      	cmp	r3, #0
 801d8ee:	d008      	beq.n	801d902 <shellExtParsePara+0x26>
 801d8f0:	68bb      	ldr	r3, [r7, #8]
 801d8f2:	781b      	ldrb	r3, [r3, #0]
 801d8f4:	2b24      	cmp	r3, #36	@ 0x24
 801d8f6:	d148      	bne.n	801d98a <shellExtParsePara+0xae>
 801d8f8:	68bb      	ldr	r3, [r7, #8]
 801d8fa:	3301      	adds	r3, #1
 801d8fc:	781b      	ldrb	r3, [r3, #0]
 801d8fe:	2b00      	cmp	r3, #0
 801d900:	d043      	beq.n	801d98a <shellExtParsePara+0xae>
    {
        if (*string == '\'' && *(string + 1))
 801d902:	68bb      	ldr	r3, [r7, #8]
 801d904:	781b      	ldrb	r3, [r3, #0]
 801d906:	2b27      	cmp	r3, #39	@ 0x27
 801d908:	d10d      	bne.n	801d926 <shellExtParsePara+0x4a>
 801d90a:	68bb      	ldr	r3, [r7, #8]
 801d90c:	3301      	adds	r3, #1
 801d90e:	781b      	ldrb	r3, [r3, #0]
 801d910:	2b00      	cmp	r3, #0
 801d912:	d008      	beq.n	801d926 <shellExtParsePara+0x4a>
        {
            *result = (size_t)shellExtParseChar(string);
 801d914:	68b8      	ldr	r0, [r7, #8]
 801d916:	f7ff fe6d 	bl	801d5f4 <shellExtParseChar>
 801d91a:	4603      	mov	r3, r0
 801d91c:	461a      	mov	r2, r3
 801d91e:	683b      	ldr	r3, [r7, #0]
 801d920:	601a      	str	r2, [r3, #0]
            return 0;
 801d922:	2300      	movs	r3, #0
 801d924:	e0d8      	b.n	801dad8 <shellExtParsePara+0x1fc>
        }
        else if (*string == '-' || (*string >= '0' && *string <= '9'))
 801d926:	68bb      	ldr	r3, [r7, #8]
 801d928:	781b      	ldrb	r3, [r3, #0]
 801d92a:	2b2d      	cmp	r3, #45	@ 0x2d
 801d92c:	d007      	beq.n	801d93e <shellExtParsePara+0x62>
 801d92e:	68bb      	ldr	r3, [r7, #8]
 801d930:	781b      	ldrb	r3, [r3, #0]
 801d932:	2b2f      	cmp	r3, #47	@ 0x2f
 801d934:	d90b      	bls.n	801d94e <shellExtParsePara+0x72>
 801d936:	68bb      	ldr	r3, [r7, #8]
 801d938:	781b      	ldrb	r3, [r3, #0]
 801d93a:	2b39      	cmp	r3, #57	@ 0x39
 801d93c:	d807      	bhi.n	801d94e <shellExtParsePara+0x72>
        {
            *result = shellExtParseNumber(string);
 801d93e:	68b8      	ldr	r0, [r7, #8]
 801d940:	f7ff ff06 	bl	801d750 <shellExtParseNumber>
 801d944:	4602      	mov	r2, r0
 801d946:	683b      	ldr	r3, [r7, #0]
 801d948:	601a      	str	r2, [r3, #0]
            return 0;
 801d94a:	2300      	movs	r3, #0
 801d94c:	e0c4      	b.n	801dad8 <shellExtParsePara+0x1fc>
        }
        else if (*string == '$' && *(string + 1))
 801d94e:	68bb      	ldr	r3, [r7, #8]
 801d950:	781b      	ldrb	r3, [r3, #0]
 801d952:	2b24      	cmp	r3, #36	@ 0x24
 801d954:	d10b      	bne.n	801d96e <shellExtParsePara+0x92>
 801d956:	68bb      	ldr	r3, [r7, #8]
 801d958:	3301      	adds	r3, #1
 801d95a:	781b      	ldrb	r3, [r3, #0]
 801d95c:	2b00      	cmp	r3, #0
 801d95e:	d006      	beq.n	801d96e <shellExtParsePara+0x92>
        {
            return shellExtParseVar(shell, string, result);
 801d960:	683a      	ldr	r2, [r7, #0]
 801d962:	68b9      	ldr	r1, [r7, #8]
 801d964:	68f8      	ldr	r0, [r7, #12]
 801d966:	f7ff ff96 	bl	801d896 <shellExtParseVar>
 801d96a:	4603      	mov	r3, r0
 801d96c:	e0b4      	b.n	801dad8 <shellExtParsePara+0x1fc>
        }
        else if (*string)
 801d96e:	68bb      	ldr	r3, [r7, #8]
 801d970:	781b      	ldrb	r3, [r3, #0]
 801d972:	2b00      	cmp	r3, #0
 801d974:	f000 80ad 	beq.w	801dad2 <shellExtParsePara+0x1f6>
        {
            *result = (size_t)shellExtParseString(string);
 801d978:	68b8      	ldr	r0, [r7, #8]
 801d97a:	f7ff fea3 	bl	801d6c4 <shellExtParseString>
 801d97e:	4603      	mov	r3, r0
 801d980:	461a      	mov	r2, r3
 801d982:	683b      	ldr	r3, [r7, #0]
 801d984:	601a      	str	r2, [r3, #0]
            return 0;
 801d986:	2300      	movs	r3, #0
 801d988:	e0a6      	b.n	801dad8 <shellExtParsePara+0x1fc>
        }
    }
#if SHELL_USING_FUNC_SIGNATURE == 1
    else
    {
        if (*string == '$' && *(string + 1))
 801d98a:	68bb      	ldr	r3, [r7, #8]
 801d98c:	781b      	ldrb	r3, [r3, #0]
 801d98e:	2b24      	cmp	r3, #36	@ 0x24
 801d990:	d10b      	bne.n	801d9aa <shellExtParsePara+0xce>
 801d992:	68bb      	ldr	r3, [r7, #8]
 801d994:	3301      	adds	r3, #1
 801d996:	781b      	ldrb	r3, [r3, #0]
 801d998:	2b00      	cmp	r3, #0
 801d99a:	d006      	beq.n	801d9aa <shellExtParsePara+0xce>
        {
            return shellExtParseVar(shell, string, result);
 801d99c:	683a      	ldr	r2, [r7, #0]
 801d99e:	68b9      	ldr	r1, [r7, #8]
 801d9a0:	68f8      	ldr	r0, [r7, #12]
 801d9a2:	f7ff ff78 	bl	801d896 <shellExtParseVar>
 801d9a6:	4603      	mov	r3, r0
 801d9a8:	e096      	b.n	801dad8 <shellExtParsePara+0x1fc>
        }
    #if SHELL_SUPPORT_ARRAY_PARAM == 1
        else if (type[0] == '[')
 801d9aa:	687b      	ldr	r3, [r7, #4]
 801d9ac:	781b      	ldrb	r3, [r3, #0]
 801d9ae:	2b5b      	cmp	r3, #91	@ 0x5b
 801d9b0:	d107      	bne.n	801d9c2 <shellExtParsePara+0xe6>
        {
            return shellExtParseArray(shell, string, type, result);
 801d9b2:	683b      	ldr	r3, [r7, #0]
 801d9b4:	687a      	ldr	r2, [r7, #4]
 801d9b6:	68b9      	ldr	r1, [r7, #8]
 801d9b8:	68f8      	ldr	r0, [r7, #12]
 801d9ba:	f000 f979 	bl	801dcb0 <shellExtParseArray>
 801d9be:	4603      	mov	r3, r0
 801d9c0:	e08a      	b.n	801dad8 <shellExtParsePara+0x1fc>
        }
    #endif /** SHELL_SUPPORT_ARRAY_PARAM == 1 */
        else if (strcmp("c", type) == 0)
 801d9c2:	6879      	ldr	r1, [r7, #4]
 801d9c4:	4846      	ldr	r0, [pc, #280]	@ (801dae0 <shellExtParsePara+0x204>)
 801d9c6:	f7e2 fca3 	bl	8000310 <strcmp>
 801d9ca:	4603      	mov	r3, r0
 801d9cc:	2b00      	cmp	r3, #0
 801d9ce:	d108      	bne.n	801d9e2 <shellExtParsePara+0x106>
        {
            *result = (size_t)shellExtParseChar(string);
 801d9d0:	68b8      	ldr	r0, [r7, #8]
 801d9d2:	f7ff fe0f 	bl	801d5f4 <shellExtParseChar>
 801d9d6:	4603      	mov	r3, r0
 801d9d8:	461a      	mov	r2, r3
 801d9da:	683b      	ldr	r3, [r7, #0]
 801d9dc:	601a      	str	r2, [r3, #0]
            return 0;
 801d9de:	2300      	movs	r3, #0
 801d9e0:	e07a      	b.n	801dad8 <shellExtParsePara+0x1fc>
        }
        else if (strcmp("q", type) == 0
 801d9e2:	6879      	ldr	r1, [r7, #4]
 801d9e4:	483f      	ldr	r0, [pc, #252]	@ (801dae4 <shellExtParsePara+0x208>)
 801d9e6:	f7e2 fc93 	bl	8000310 <strcmp>
 801d9ea:	4603      	mov	r3, r0
 801d9ec:	2b00      	cmp	r3, #0
 801d9ee:	d01b      	beq.n	801da28 <shellExtParsePara+0x14c>
                 || strcmp("h", type) == 0
 801d9f0:	6879      	ldr	r1, [r7, #4]
 801d9f2:	483d      	ldr	r0, [pc, #244]	@ (801dae8 <shellExtParsePara+0x20c>)
 801d9f4:	f7e2 fc8c 	bl	8000310 <strcmp>
 801d9f8:	4603      	mov	r3, r0
 801d9fa:	2b00      	cmp	r3, #0
 801d9fc:	d014      	beq.n	801da28 <shellExtParsePara+0x14c>
                 || strcmp("i", type) == 0
 801d9fe:	6879      	ldr	r1, [r7, #4]
 801da00:	483a      	ldr	r0, [pc, #232]	@ (801daec <shellExtParsePara+0x210>)
 801da02:	f7e2 fc85 	bl	8000310 <strcmp>
 801da06:	4603      	mov	r3, r0
 801da08:	2b00      	cmp	r3, #0
 801da0a:	d00d      	beq.n	801da28 <shellExtParsePara+0x14c>
                 || strcmp("f", type) == 0
 801da0c:	6879      	ldr	r1, [r7, #4]
 801da0e:	4838      	ldr	r0, [pc, #224]	@ (801daf0 <shellExtParsePara+0x214>)
 801da10:	f7e2 fc7e 	bl	8000310 <strcmp>
 801da14:	4603      	mov	r3, r0
 801da16:	2b00      	cmp	r3, #0
 801da18:	d006      	beq.n	801da28 <shellExtParsePara+0x14c>
                 || strcmp("p", type) == 0)
 801da1a:	6879      	ldr	r1, [r7, #4]
 801da1c:	4835      	ldr	r0, [pc, #212]	@ (801daf4 <shellExtParsePara+0x218>)
 801da1e:	f7e2 fc77 	bl	8000310 <strcmp>
 801da22:	4603      	mov	r3, r0
 801da24:	2b00      	cmp	r3, #0
 801da26:	d107      	bne.n	801da38 <shellExtParsePara+0x15c>
        {
            *result = shellExtParseNumber(string);
 801da28:	68b8      	ldr	r0, [r7, #8]
 801da2a:	f7ff fe91 	bl	801d750 <shellExtParseNumber>
 801da2e:	4602      	mov	r2, r0
 801da30:	683b      	ldr	r3, [r7, #0]
 801da32:	601a      	str	r2, [r3, #0]
            return 0;
 801da34:	2300      	movs	r3, #0
 801da36:	e04f      	b.n	801dad8 <shellExtParsePara+0x1fc>
        }
        else if (strcmp("s", type) == 0)
 801da38:	6879      	ldr	r1, [r7, #4]
 801da3a:	482f      	ldr	r0, [pc, #188]	@ (801daf8 <shellExtParsePara+0x21c>)
 801da3c:	f7e2 fc68 	bl	8000310 <strcmp>
 801da40:	4603      	mov	r3, r0
 801da42:	2b00      	cmp	r3, #0
 801da44:	d108      	bne.n	801da58 <shellExtParsePara+0x17c>
        {
            *result = (size_t)shellExtParseString(string);
 801da46:	68b8      	ldr	r0, [r7, #8]
 801da48:	f7ff fe3c 	bl	801d6c4 <shellExtParseString>
 801da4c:	4603      	mov	r3, r0
 801da4e:	461a      	mov	r2, r3
 801da50:	683b      	ldr	r3, [r7, #0]
 801da52:	601a      	str	r2, [r3, #0]
            return 0;
 801da54:	2300      	movs	r3, #0
 801da56:	e03f      	b.n	801dad8 <shellExtParsePara+0x1fc>
        }
        else
        {
            ShellCommand *command = shellSeekCommand(shell,
                                                     type,
                                                     shell->commandList.base,
 801da58:	68fb      	ldr	r3, [r7, #12]
 801da5a:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
            ShellCommand *command = shellSeekCommand(shell,
 801da5c:	2300      	movs	r3, #0
 801da5e:	6879      	ldr	r1, [r7, #4]
 801da60:	68f8      	ldr	r0, [r7, #12]
 801da62:	f7fd fbc9 	bl	801b1f8 <shellSeekCommand>
 801da66:	6178      	str	r0, [r7, #20]
                                                     0);
            if (command != NULL)
 801da68:	697b      	ldr	r3, [r7, #20]
 801da6a:	2b00      	cmp	r3, #0
 801da6c:	d022      	beq.n	801dab4 <shellExtParsePara+0x1d8>
            {
                void *param;
                if (command->data.paramParser.parser(shellExtParseString(string), &param) == 0)
 801da6e:	697b      	ldr	r3, [r7, #20]
 801da70:	689c      	ldr	r4, [r3, #8]
 801da72:	68b8      	ldr	r0, [r7, #8]
 801da74:	f7ff fe26 	bl	801d6c4 <shellExtParseString>
 801da78:	4602      	mov	r2, r0
 801da7a:	f107 0310 	add.w	r3, r7, #16
 801da7e:	4619      	mov	r1, r3
 801da80:	4610      	mov	r0, r2
 801da82:	47a0      	blx	r4
 801da84:	4603      	mov	r3, r0
 801da86:	2b00      	cmp	r3, #0
 801da88:	d105      	bne.n	801da96 <shellExtParsePara+0x1ba>
                {
                    *result = (size_t)param;
 801da8a:	693b      	ldr	r3, [r7, #16]
 801da8c:	461a      	mov	r2, r3
 801da8e:	683b      	ldr	r3, [r7, #0]
 801da90:	601a      	str	r2, [r3, #0]
                    return 0;
 801da92:	2300      	movs	r3, #0
 801da94:	e020      	b.n	801dad8 <shellExtParsePara+0x1fc>
                }
                else
                {
                    shellWriteString(shell, "Parse param for type: ");
 801da96:	4919      	ldr	r1, [pc, #100]	@ (801dafc <shellExtParsePara+0x220>)
 801da98:	68f8      	ldr	r0, [r7, #12]
 801da9a:	f7fc fbf3 	bl	801a284 <shellWriteString>
                    shellWriteString(shell, type);
 801da9e:	6879      	ldr	r1, [r7, #4]
 801daa0:	68f8      	ldr	r0, [r7, #12]
 801daa2:	f7fc fbef 	bl	801a284 <shellWriteString>
                    shellWriteString(shell, " failed\r\n");
 801daa6:	4916      	ldr	r1, [pc, #88]	@ (801db00 <shellExtParsePara+0x224>)
 801daa8:	68f8      	ldr	r0, [r7, #12]
 801daaa:	f7fc fbeb 	bl	801a284 <shellWriteString>
                    return -1;
 801daae:	f04f 33ff 	mov.w	r3, #4294967295
 801dab2:	e011      	b.n	801dad8 <shellExtParsePara+0x1fc>
                }
            }
            else
            {
                shellWriteString(shell, "Can't find the param parser for type: ");
 801dab4:	4913      	ldr	r1, [pc, #76]	@ (801db04 <shellExtParsePara+0x228>)
 801dab6:	68f8      	ldr	r0, [r7, #12]
 801dab8:	f7fc fbe4 	bl	801a284 <shellWriteString>
                shellWriteString(shell, type);
 801dabc:	6879      	ldr	r1, [r7, #4]
 801dabe:	68f8      	ldr	r0, [r7, #12]
 801dac0:	f7fc fbe0 	bl	801a284 <shellWriteString>
                shellWriteString(shell, "\r\n");
 801dac4:	4910      	ldr	r1, [pc, #64]	@ (801db08 <shellExtParsePara+0x22c>)
 801dac6:	68f8      	ldr	r0, [r7, #12]
 801dac8:	f7fc fbdc 	bl	801a284 <shellWriteString>
                return -1;
 801dacc:	f04f 33ff 	mov.w	r3, #4294967295
 801dad0:	e002      	b.n	801dad8 <shellExtParsePara+0x1fc>
        if (*string == '\'' && *(string + 1))
 801dad2:	bf00      	nop
            }
        }
    }
#endif /** SHELL_USING_FUNC_SIGNATURE == 1 */
    return -1;
 801dad4:	f04f 33ff 	mov.w	r3, #4294967295
}
 801dad8:	4618      	mov	r0, r3
 801dada:	371c      	adds	r7, #28
 801dadc:	46bd      	mov	sp, r7
 801dade:	bd90      	pop	{r4, r7, pc}
 801dae0:	08022b28 	.word	0x08022b28
 801dae4:	08022b2c 	.word	0x08022b2c
 801dae8:	08022b30 	.word	0x08022b30
 801daec:	08022b34 	.word	0x08022b34
 801daf0:	08022b38 	.word	0x08022b38
 801daf4:	08022b3c 	.word	0x08022b3c
 801daf8:	08022b40 	.word	0x08022b40
 801dafc:	08022b44 	.word	0x08022b44
 801db00:	08022b5c 	.word	0x08022b5c
 801db04:	08022b68 	.word	0x08022b68
 801db08:	08022b90 	.word	0x08022b90

0801db0c <shellExtCleanerPara>:
 * @param param 参数
 * 
 * @return int 0 清理成功 -1 清理失败
 */
int shellExtCleanerPara(Shell *shell, char *type, size_t param)
{
 801db0c:	b580      	push	{r7, lr}
 801db0e:	b086      	sub	sp, #24
 801db10:	af00      	add	r7, sp, #0
 801db12:	60f8      	str	r0, [r7, #12]
 801db14:	60b9      	str	r1, [r7, #8]
 801db16:	607a      	str	r2, [r7, #4]
    if (type == NULL)
 801db18:	68bb      	ldr	r3, [r7, #8]
 801db1a:	2b00      	cmp	r3, #0
 801db1c:	d101      	bne.n	801db22 <shellExtCleanerPara+0x16>
    {
        return 0;
 801db1e:	2300      	movs	r3, #0
 801db20:	e056      	b.n	801dbd0 <shellExtCleanerPara+0xc4>
    }
    else
    {
    #if SHELL_SUPPORT_ARRAY_PARAM == 1
        if (type[0] == '[') {
 801db22:	68bb      	ldr	r3, [r7, #8]
 801db24:	781b      	ldrb	r3, [r3, #0]
 801db26:	2b5b      	cmp	r3, #91	@ 0x5b
 801db28:	d107      	bne.n	801db3a <shellExtCleanerPara+0x2e>
            return shellExtCleanerArray(shell, type, (void *) param);
 801db2a:	687b      	ldr	r3, [r7, #4]
 801db2c:	461a      	mov	r2, r3
 801db2e:	68b9      	ldr	r1, [r7, #8]
 801db30:	68f8      	ldr	r0, [r7, #12]
 801db32:	f000 f94b 	bl	801ddcc <shellExtCleanerArray>
 801db36:	4603      	mov	r3, r0
 801db38:	e04a      	b.n	801dbd0 <shellExtCleanerPara+0xc4>
        }
        else
    #endif /** SHELL_SUPPORT_ARRAY_PARAM == 1 */
        if (strcmp("c", type) == 0
 801db3a:	68b9      	ldr	r1, [r7, #8]
 801db3c:	4826      	ldr	r0, [pc, #152]	@ (801dbd8 <shellExtCleanerPara+0xcc>)
 801db3e:	f7e2 fbe7 	bl	8000310 <strcmp>
 801db42:	4603      	mov	r3, r0
 801db44:	2b00      	cmp	r3, #0
 801db46:	d029      	beq.n	801db9c <shellExtCleanerPara+0x90>
            || strcmp("q", type) == 0
 801db48:	68b9      	ldr	r1, [r7, #8]
 801db4a:	4824      	ldr	r0, [pc, #144]	@ (801dbdc <shellExtCleanerPara+0xd0>)
 801db4c:	f7e2 fbe0 	bl	8000310 <strcmp>
 801db50:	4603      	mov	r3, r0
 801db52:	2b00      	cmp	r3, #0
 801db54:	d022      	beq.n	801db9c <shellExtCleanerPara+0x90>
            || strcmp("h", type) == 0
 801db56:	68b9      	ldr	r1, [r7, #8]
 801db58:	4821      	ldr	r0, [pc, #132]	@ (801dbe0 <shellExtCleanerPara+0xd4>)
 801db5a:	f7e2 fbd9 	bl	8000310 <strcmp>
 801db5e:	4603      	mov	r3, r0
 801db60:	2b00      	cmp	r3, #0
 801db62:	d01b      	beq.n	801db9c <shellExtCleanerPara+0x90>
            || strcmp("i", type) == 0
 801db64:	68b9      	ldr	r1, [r7, #8]
 801db66:	481f      	ldr	r0, [pc, #124]	@ (801dbe4 <shellExtCleanerPara+0xd8>)
 801db68:	f7e2 fbd2 	bl	8000310 <strcmp>
 801db6c:	4603      	mov	r3, r0
 801db6e:	2b00      	cmp	r3, #0
 801db70:	d014      	beq.n	801db9c <shellExtCleanerPara+0x90>
            || strcmp("f", type) == 0
 801db72:	68b9      	ldr	r1, [r7, #8]
 801db74:	481c      	ldr	r0, [pc, #112]	@ (801dbe8 <shellExtCleanerPara+0xdc>)
 801db76:	f7e2 fbcb 	bl	8000310 <strcmp>
 801db7a:	4603      	mov	r3, r0
 801db7c:	2b00      	cmp	r3, #0
 801db7e:	d00d      	beq.n	801db9c <shellExtCleanerPara+0x90>
            || strcmp("p", type) == 0
 801db80:	68b9      	ldr	r1, [r7, #8]
 801db82:	481a      	ldr	r0, [pc, #104]	@ (801dbec <shellExtCleanerPara+0xe0>)
 801db84:	f7e2 fbc4 	bl	8000310 <strcmp>
 801db88:	4603      	mov	r3, r0
 801db8a:	2b00      	cmp	r3, #0
 801db8c:	d006      	beq.n	801db9c <shellExtCleanerPara+0x90>
            || strcmp("s", type) == 0)
 801db8e:	68b9      	ldr	r1, [r7, #8]
 801db90:	4817      	ldr	r0, [pc, #92]	@ (801dbf0 <shellExtCleanerPara+0xe4>)
 801db92:	f7e2 fbbd 	bl	8000310 <strcmp>
 801db96:	4603      	mov	r3, r0
 801db98:	2b00      	cmp	r3, #0
 801db9a:	d101      	bne.n	801dba0 <shellExtCleanerPara+0x94>
        {
            return 0;
 801db9c:	2300      	movs	r3, #0
 801db9e:	e017      	b.n	801dbd0 <shellExtCleanerPara+0xc4>
        }
        else
        {
            ShellCommand *command = shellSeekCommand(shell,
                                                     type,
                                                     shell->commandList.base,
 801dba0:	68fb      	ldr	r3, [r7, #12]
 801dba2:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
            ShellCommand *command = shellSeekCommand(shell,
 801dba4:	2300      	movs	r3, #0
 801dba6:	68b9      	ldr	r1, [r7, #8]
 801dba8:	68f8      	ldr	r0, [r7, #12]
 801dbaa:	f7fd fb25 	bl	801b1f8 <shellSeekCommand>
 801dbae:	6178      	str	r0, [r7, #20]
                                                     0);
            if (command != NULL && command->data.paramParser.cleaner != NULL)
 801dbb0:	697b      	ldr	r3, [r7, #20]
 801dbb2:	2b00      	cmp	r3, #0
 801dbb4:	d00a      	beq.n	801dbcc <shellExtCleanerPara+0xc0>
 801dbb6:	697b      	ldr	r3, [r7, #20]
 801dbb8:	68db      	ldr	r3, [r3, #12]
 801dbba:	2b00      	cmp	r3, #0
 801dbbc:	d006      	beq.n	801dbcc <shellExtCleanerPara+0xc0>
            {
                return command->data.paramParser.cleaner((void *)param);
 801dbbe:	697b      	ldr	r3, [r7, #20]
 801dbc0:	68db      	ldr	r3, [r3, #12]
 801dbc2:	687a      	ldr	r2, [r7, #4]
 801dbc4:	4610      	mov	r0, r2
 801dbc6:	4798      	blx	r3
 801dbc8:	4603      	mov	r3, r0
 801dbca:	e001      	b.n	801dbd0 <shellExtCleanerPara+0xc4>
            }
        }
    }
    return -1;
 801dbcc:	f04f 33ff 	mov.w	r3, #4294967295
}
 801dbd0:	4618      	mov	r0, r3
 801dbd2:	3718      	adds	r7, #24
 801dbd4:	46bd      	mov	sp, r7
 801dbd6:	bd80      	pop	{r7, pc}
 801dbd8:	08022b28 	.word	0x08022b28
 801dbdc:	08022b2c 	.word	0x08022b2c
 801dbe0:	08022b30 	.word	0x08022b30
 801dbe4:	08022b34 	.word	0x08022b34
 801dbe8:	08022b38 	.word	0x08022b38
 801dbec:	08022b3c 	.word	0x08022b3c
 801dbf0:	08022b40 	.word	0x08022b40

0801dbf4 <shellEstimateArrayLength>:
 * @param string 数组参数
 * 
 * @return int 估算的数组长度
 */
static int shellEstimateArrayLength(char *string)
{
 801dbf4:	b480      	push	{r7}
 801dbf6:	b085      	sub	sp, #20
 801dbf8:	af00      	add	r7, sp, #0
 801dbfa:	6078      	str	r0, [r7, #4]
    int length = 0;
 801dbfc:	2300      	movs	r3, #0
 801dbfe:	60fb      	str	r3, [r7, #12]
    char *p = string;
 801dc00:	687b      	ldr	r3, [r7, #4]
 801dc02:	60bb      	str	r3, [r7, #8]
    while (*p)
 801dc04:	e009      	b.n	801dc1a <shellEstimateArrayLength+0x26>
    {
        if (*p == ',')
 801dc06:	68bb      	ldr	r3, [r7, #8]
 801dc08:	781b      	ldrb	r3, [r3, #0]
 801dc0a:	2b2c      	cmp	r3, #44	@ 0x2c
 801dc0c:	d102      	bne.n	801dc14 <shellEstimateArrayLength+0x20>
        {
            length++;
 801dc0e:	68fb      	ldr	r3, [r7, #12]
 801dc10:	3301      	adds	r3, #1
 801dc12:	60fb      	str	r3, [r7, #12]
        }
        p++;
 801dc14:	68bb      	ldr	r3, [r7, #8]
 801dc16:	3301      	adds	r3, #1
 801dc18:	60bb      	str	r3, [r7, #8]
    while (*p)
 801dc1a:	68bb      	ldr	r3, [r7, #8]
 801dc1c:	781b      	ldrb	r3, [r3, #0]
 801dc1e:	2b00      	cmp	r3, #0
 801dc20:	d1f1      	bne.n	801dc06 <shellEstimateArrayLength+0x12>
    }
    return length + 1;
 801dc22:	68fb      	ldr	r3, [r7, #12]
 801dc24:	3301      	adds	r3, #1
}
 801dc26:	4618      	mov	r0, r3
 801dc28:	3714      	adds	r7, #20
 801dc2a:	46bd      	mov	sp, r7
 801dc2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dc30:	4770      	bx	lr

0801dc32 <shellSplitArray>:
 * @param array 分割后的字符串数组
 * 
 * @return int 数组长度
 */
static int shellSplitArray(char *string, char ***array)
{
 801dc32:	b580      	push	{r7, lr}
 801dc34:	b086      	sub	sp, #24
 801dc36:	af02      	add	r7, sp, #8
 801dc38:	6078      	str	r0, [r7, #4]
 801dc3a:	6039      	str	r1, [r7, #0]
    int strLen = strlen(string);
 801dc3c:	6878      	ldr	r0, [r7, #4]
 801dc3e:	f7e2 fb71 	bl	8000324 <strlen>
 801dc42:	4603      	mov	r3, r0
 801dc44:	60fb      	str	r3, [r7, #12]
    if (string[strLen - 1] == ']')
 801dc46:	68fb      	ldr	r3, [r7, #12]
 801dc48:	3b01      	subs	r3, #1
 801dc4a:	687a      	ldr	r2, [r7, #4]
 801dc4c:	4413      	add	r3, r2
 801dc4e:	781b      	ldrb	r3, [r3, #0]
 801dc50:	2b5d      	cmp	r3, #93	@ 0x5d
 801dc52:	d107      	bne.n	801dc64 <shellSplitArray+0x32>
    {
        string[--strLen] = 0;
 801dc54:	68fb      	ldr	r3, [r7, #12]
 801dc56:	3b01      	subs	r3, #1
 801dc58:	60fb      	str	r3, [r7, #12]
 801dc5a:	68fb      	ldr	r3, [r7, #12]
 801dc5c:	687a      	ldr	r2, [r7, #4]
 801dc5e:	4413      	add	r3, r2
 801dc60:	2200      	movs	r2, #0
 801dc62:	701a      	strb	r2, [r3, #0]
    }
    if (string[0] == '[')
 801dc64:	687b      	ldr	r3, [r7, #4]
 801dc66:	781b      	ldrb	r3, [r3, #0]
 801dc68:	2b5b      	cmp	r3, #91	@ 0x5b
 801dc6a:	d105      	bne.n	801dc78 <shellSplitArray+0x46>
    {
        --strLen;
 801dc6c:	68fb      	ldr	r3, [r7, #12]
 801dc6e:	3b01      	subs	r3, #1
 801dc70:	60fb      	str	r3, [r7, #12]
        string++;
 801dc72:	687b      	ldr	r3, [r7, #4]
 801dc74:	3301      	adds	r3, #1
 801dc76:	607b      	str	r3, [r7, #4]
    }
    int size = shellEstimateArrayLength(string);
 801dc78:	6878      	ldr	r0, [r7, #4]
 801dc7a:	f7ff ffbb 	bl	801dbf4 <shellEstimateArrayLength>
 801dc7e:	60b8      	str	r0, [r7, #8]
    *array = SHELL_MALLOC(size * sizeof(char *));
 801dc80:	68bb      	ldr	r3, [r7, #8]
 801dc82:	009b      	lsls	r3, r3, #2
 801dc84:	4618      	mov	r0, r3
 801dc86:	f7fc f80d 	bl	8019ca4 <pvPortMalloc>
 801dc8a:	4602      	mov	r2, r0
 801dc8c:	683b      	ldr	r3, [r7, #0]
 801dc8e:	601a      	str	r2, [r3, #0]
    return shellSplit(string, strLen, *array, ',', size);
 801dc90:	68fb      	ldr	r3, [r7, #12]
 801dc92:	b299      	uxth	r1, r3
 801dc94:	683b      	ldr	r3, [r7, #0]
 801dc96:	681a      	ldr	r2, [r3, #0]
 801dc98:	68bb      	ldr	r3, [r7, #8]
 801dc9a:	b21b      	sxth	r3, r3
 801dc9c:	9300      	str	r3, [sp, #0]
 801dc9e:	232c      	movs	r3, #44	@ 0x2c
 801dca0:	6878      	ldr	r0, [r7, #4]
 801dca2:	f7fd f957 	bl	801af54 <shellSplit>
 801dca6:	4603      	mov	r3, r0
}
 801dca8:	4618      	mov	r0, r3
 801dcaa:	3710      	adds	r7, #16
 801dcac:	46bd      	mov	sp, r7
 801dcae:	bd80      	pop	{r7, pc}

0801dcb0 <shellExtParseArray>:
 * @param result 解析结果
 * 
 * @return int 0 解析成功 -1 解析失败
 */
static int shellExtParseArray(Shell *shell, char *string, char *type, size_t *result)
{
 801dcb0:	b580      	push	{r7, lr}
 801dcb2:	b08a      	sub	sp, #40	@ 0x28
 801dcb4:	af00      	add	r7, sp, #0
 801dcb6:	60f8      	str	r0, [r7, #12]
 801dcb8:	60b9      	str	r1, [r7, #8]
 801dcba:	607a      	str	r2, [r7, #4]
 801dcbc:	603b      	str	r3, [r7, #0]
    char **params;
    int size = shellSplitArray(string, &params);
 801dcbe:	f107 0314 	add.w	r3, r7, #20
 801dcc2:	4619      	mov	r1, r3
 801dcc4:	68b8      	ldr	r0, [r7, #8]
 801dcc6:	f7ff ffb4 	bl	801dc32 <shellSplitArray>
 801dcca:	61f8      	str	r0, [r7, #28]
    int elementBytes = sizeof(void *);
 801dccc:	2304      	movs	r3, #4
 801dcce:	627b      	str	r3, [r7, #36]	@ 0x24

    if (strcmp(type + 1, "q") == 0)
 801dcd0:	687b      	ldr	r3, [r7, #4]
 801dcd2:	3301      	adds	r3, #1
 801dcd4:	493a      	ldr	r1, [pc, #232]	@ (801ddc0 <shellExtParseArray+0x110>)
 801dcd6:	4618      	mov	r0, r3
 801dcd8:	f7e2 fb1a 	bl	8000310 <strcmp>
 801dcdc:	4603      	mov	r3, r0
 801dcde:	2b00      	cmp	r3, #0
 801dce0:	d102      	bne.n	801dce8 <shellExtParseArray+0x38>
    {
        elementBytes = sizeof(char);
 801dce2:	2301      	movs	r3, #1
 801dce4:	627b      	str	r3, [r7, #36]	@ 0x24
 801dce6:	e016      	b.n	801dd16 <shellExtParseArray+0x66>
    }
    else if (strcmp(type + 1, "h") == 0)
 801dce8:	687b      	ldr	r3, [r7, #4]
 801dcea:	3301      	adds	r3, #1
 801dcec:	4935      	ldr	r1, [pc, #212]	@ (801ddc4 <shellExtParseArray+0x114>)
 801dcee:	4618      	mov	r0, r3
 801dcf0:	f7e2 fb0e 	bl	8000310 <strcmp>
 801dcf4:	4603      	mov	r3, r0
 801dcf6:	2b00      	cmp	r3, #0
 801dcf8:	d102      	bne.n	801dd00 <shellExtParseArray+0x50>
    {
        elementBytes = sizeof(short);
 801dcfa:	2302      	movs	r3, #2
 801dcfc:	627b      	str	r3, [r7, #36]	@ 0x24
 801dcfe:	e00a      	b.n	801dd16 <shellExtParseArray+0x66>
    }
    else if (strcmp(type + 1, "i") == 0)
 801dd00:	687b      	ldr	r3, [r7, #4]
 801dd02:	3301      	adds	r3, #1
 801dd04:	4930      	ldr	r1, [pc, #192]	@ (801ddc8 <shellExtParseArray+0x118>)
 801dd06:	4618      	mov	r0, r3
 801dd08:	f7e2 fb02 	bl	8000310 <strcmp>
 801dd0c:	4603      	mov	r3, r0
 801dd0e:	2b00      	cmp	r3, #0
 801dd10:	d101      	bne.n	801dd16 <shellExtParseArray+0x66>
    {
        elementBytes = sizeof(int);
 801dd12:	2304      	movs	r3, #4
 801dd14:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    ShellArrayHeader *header = SHELL_MALLOC(elementBytes * size + sizeof(ShellArrayHeader));
 801dd16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801dd18:	69fa      	ldr	r2, [r7, #28]
 801dd1a:	fb02 f303 	mul.w	r3, r2, r3
 801dd1e:	3304      	adds	r3, #4
 801dd20:	4618      	mov	r0, r3
 801dd22:	f7fb ffbf 	bl	8019ca4 <pvPortMalloc>
 801dd26:	61b8      	str	r0, [r7, #24]
    *result = (size_t) ((size_t) header + sizeof(ShellArrayHeader));
 801dd28:	69bb      	ldr	r3, [r7, #24]
 801dd2a:	1d1a      	adds	r2, r3, #4
 801dd2c:	683b      	ldr	r3, [r7, #0]
 801dd2e:	601a      	str	r2, [r3, #0]
    header->size = size;
 801dd30:	69fb      	ldr	r3, [r7, #28]
 801dd32:	b29a      	uxth	r2, r3
 801dd34:	69bb      	ldr	r3, [r7, #24]
 801dd36:	801a      	strh	r2, [r3, #0]
    header->elementBytes = elementBytes;
 801dd38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801dd3a:	b2da      	uxtb	r2, r3
 801dd3c:	69bb      	ldr	r3, [r7, #24]
 801dd3e:	709a      	strb	r2, [r3, #2]
    for (short i = 0; i < size; i++)
 801dd40:	2300      	movs	r3, #0
 801dd42:	847b      	strh	r3, [r7, #34]	@ 0x22
 801dd44:	e02e      	b.n	801dda4 <shellExtParseArray+0xf4>
    {
        size_t value;
        if (shellExtParsePara(shell, params[i], type + 1, &value) != 0)
 801dd46:	697a      	ldr	r2, [r7, #20]
 801dd48:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 801dd4c:	009b      	lsls	r3, r3, #2
 801dd4e:	4413      	add	r3, r2
 801dd50:	6819      	ldr	r1, [r3, #0]
 801dd52:	687b      	ldr	r3, [r7, #4]
 801dd54:	1c5a      	adds	r2, r3, #1
 801dd56:	f107 0310 	add.w	r3, r7, #16
 801dd5a:	68f8      	ldr	r0, [r7, #12]
 801dd5c:	f7ff fdbe 	bl	801d8dc <shellExtParsePara>
 801dd60:	4603      	mov	r3, r0
 801dd62:	2b00      	cmp	r3, #0
 801dd64:	d009      	beq.n	801dd7a <shellExtParseArray+0xca>
        {
            SHELL_FREE(header);
 801dd66:	69b8      	ldr	r0, [r7, #24]
 801dd68:	f7fc f870 	bl	8019e4c <vPortFree>
            SHELL_FREE(params);
 801dd6c:	697b      	ldr	r3, [r7, #20]
 801dd6e:	4618      	mov	r0, r3
 801dd70:	f7fc f86c 	bl	8019e4c <vPortFree>
            return -1;
 801dd74:	f04f 33ff 	mov.w	r3, #4294967295
 801dd78:	e01e      	b.n	801ddb8 <shellExtParseArray+0x108>
        }
        memcpy((void *) ((size_t) *result + elementBytes * i), &value, elementBytes);
 801dd7a:	683b      	ldr	r3, [r7, #0]
 801dd7c:	681b      	ldr	r3, [r3, #0]
 801dd7e:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	@ 0x22
 801dd82:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801dd84:	fb01 f202 	mul.w	r2, r1, r2
 801dd88:	4413      	add	r3, r2
 801dd8a:	4618      	mov	r0, r3
 801dd8c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801dd8e:	f107 0310 	add.w	r3, r7, #16
 801dd92:	4619      	mov	r1, r3
 801dd94:	f001 fa76 	bl	801f284 <memcpy>
    for (short i = 0; i < size; i++)
 801dd98:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 801dd9c:	b29b      	uxth	r3, r3
 801dd9e:	3301      	adds	r3, #1
 801dda0:	b29b      	uxth	r3, r3
 801dda2:	847b      	strh	r3, [r7, #34]	@ 0x22
 801dda4:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 801dda8:	69fa      	ldr	r2, [r7, #28]
 801ddaa:	429a      	cmp	r2, r3
 801ddac:	dccb      	bgt.n	801dd46 <shellExtParseArray+0x96>
    }

    SHELL_FREE(params);
 801ddae:	697b      	ldr	r3, [r7, #20]
 801ddb0:	4618      	mov	r0, r3
 801ddb2:	f7fc f84b 	bl	8019e4c <vPortFree>
    return 0;
 801ddb6:	2300      	movs	r3, #0
}
 801ddb8:	4618      	mov	r0, r3
 801ddba:	3728      	adds	r7, #40	@ 0x28
 801ddbc:	46bd      	mov	sp, r7
 801ddbe:	bd80      	pop	{r7, pc}
 801ddc0:	08022b2c 	.word	0x08022b2c
 801ddc4:	08022b30 	.word	0x08022b30
 801ddc8:	08022b34 	.word	0x08022b34

0801ddcc <shellExtCleanerArray>:
 * @param param 参数
 * 
 * @return int 0 清理成功 -1 清理失败
 */
static int shellExtCleanerArray(Shell *shell, char *type, void *param)
{
 801ddcc:	b580      	push	{r7, lr}
 801ddce:	b086      	sub	sp, #24
 801ddd0:	af00      	add	r7, sp, #0
 801ddd2:	60f8      	str	r0, [r7, #12]
 801ddd4:	60b9      	str	r1, [r7, #8]
 801ddd6:	607a      	str	r2, [r7, #4]
    ShellArrayHeader *header = (ShellArrayHeader *) ((size_t) param - sizeof(ShellArrayHeader));
 801ddd8:	687b      	ldr	r3, [r7, #4]
 801ddda:	3b04      	subs	r3, #4
 801dddc:	613b      	str	r3, [r7, #16]
    for (short i = 0; i < header->size; i++)
 801ddde:	2300      	movs	r3, #0
 801dde0:	82fb      	strh	r3, [r7, #22]
 801dde2:	e01c      	b.n	801de1e <shellExtCleanerArray+0x52>
    {
        if (shellExtCleanerPara(shell, type + 1, *(size_t *) ((size_t) param + header->elementBytes * i)) != 0)
 801dde4:	68bb      	ldr	r3, [r7, #8]
 801dde6:	1c59      	adds	r1, r3, #1
 801dde8:	693b      	ldr	r3, [r7, #16]
 801ddea:	789b      	ldrb	r3, [r3, #2]
 801ddec:	461a      	mov	r2, r3
 801ddee:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801ddf2:	fb02 f303 	mul.w	r3, r2, r3
 801ddf6:	461a      	mov	r2, r3
 801ddf8:	687b      	ldr	r3, [r7, #4]
 801ddfa:	4413      	add	r3, r2
 801ddfc:	681b      	ldr	r3, [r3, #0]
 801ddfe:	461a      	mov	r2, r3
 801de00:	68f8      	ldr	r0, [r7, #12]
 801de02:	f7ff fe83 	bl	801db0c <shellExtCleanerPara>
 801de06:	4603      	mov	r3, r0
 801de08:	2b00      	cmp	r3, #0
 801de0a:	d002      	beq.n	801de12 <shellExtCleanerArray+0x46>
        {
            return -1;
 801de0c:	f04f 33ff 	mov.w	r3, #4294967295
 801de10:	e00f      	b.n	801de32 <shellExtCleanerArray+0x66>
    for (short i = 0; i < header->size; i++)
 801de12:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801de16:	b29b      	uxth	r3, r3
 801de18:	3301      	adds	r3, #1
 801de1a:	b29b      	uxth	r3, r3
 801de1c:	82fb      	strh	r3, [r7, #22]
 801de1e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801de22:	693a      	ldr	r2, [r7, #16]
 801de24:	8812      	ldrh	r2, [r2, #0]
 801de26:	4293      	cmp	r3, r2
 801de28:	dbdc      	blt.n	801dde4 <shellExtCleanerArray+0x18>
        }
    }
    SHELL_FREE(header);
 801de2a:	6938      	ldr	r0, [r7, #16]
 801de2c:	f7fc f80e 	bl	8019e4c <vPortFree>
    return 0;
 801de30:	2300      	movs	r3, #0
}
 801de32:	4618      	mov	r0, r3
 801de34:	3718      	adds	r7, #24
 801de36:	46bd      	mov	sp, r7
 801de38:	bd80      	pop	{r7, pc}
	...

0801de3c <shellExtRun>:
 * @param argc 参数个数
 * @param argv 参数
 * @return int 返回值
 */
int shellExtRun(Shell *shell, ShellCommand *command, int argc, char *argv[])
{
 801de3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801de3e:	b0a5      	sub	sp, #148	@ 0x94
 801de40:	af04      	add	r7, sp, #16
 801de42:	6178      	str	r0, [r7, #20]
 801de44:	6139      	str	r1, [r7, #16]
 801de46:	60fa      	str	r2, [r7, #12]
 801de48:	60bb      	str	r3, [r7, #8]
    int ret = 0;
 801de4a:	2300      	movs	r3, #0
 801de4c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    size_t params[SHELL_PARAMETER_MAX_NUMBER] = {0};
 801de4e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801de52:	2220      	movs	r2, #32
 801de54:	2100      	movs	r1, #0
 801de56:	4618      	mov	r0, r3
 801de58:	f001 f95a 	bl	801f110 <memset>
    int paramNum = command->attr.attrs.paramNum > (argc - 1) ? 
 801de5c:	693b      	ldr	r3, [r7, #16]
 801de5e:	789b      	ldrb	r3, [r3, #2]
 801de60:	f3c3 0303 	ubfx	r3, r3, #0, #4
 801de64:	b2db      	uxtb	r3, r3
 801de66:	461a      	mov	r2, r3
        command->attr.attrs.paramNum : (argc - 1);
 801de68:	68fb      	ldr	r3, [r7, #12]
 801de6a:	4293      	cmp	r3, r2
 801de6c:	dc05      	bgt.n	801de7a <shellExtRun+0x3e>
 801de6e:	693b      	ldr	r3, [r7, #16]
 801de70:	789b      	ldrb	r3, [r3, #2]
 801de72:	f3c3 0303 	ubfx	r3, r3, #0, #4
 801de76:	b2db      	uxtb	r3, r3
 801de78:	e001      	b.n	801de7e <shellExtRun+0x42>
 801de7a:	68fb      	ldr	r3, [r7, #12]
 801de7c:	3b01      	subs	r3, #1
    int paramNum = command->attr.attrs.paramNum > (argc - 1) ? 
 801de7e:	66fb      	str	r3, [r7, #108]	@ 0x6c
#if SHELL_USING_FUNC_SIGNATURE == 1
    char type[16];
    int index = 0;
 801de80:	2300      	movs	r3, #0
 801de82:	67bb      	str	r3, [r7, #120]	@ 0x78
    
    if (command->data.cmd.signature != NULL)
 801de84:	693b      	ldr	r3, [r7, #16]
 801de86:	691b      	ldr	r3, [r3, #16]
 801de88:	2b00      	cmp	r3, #0
 801de8a:	d011      	beq.n	801deb0 <shellExtRun+0x74>
    {
        int except = shellGetParamNumExcept(command->data.cmd.signature);
 801de8c:	693b      	ldr	r3, [r7, #16]
 801de8e:	691b      	ldr	r3, [r3, #16]
 801de90:	4618      	mov	r0, r3
 801de92:	f7ff fb05 	bl	801d4a0 <shellGetParamNumExcept>
 801de96:	66b8      	str	r0, [r7, #104]	@ 0x68
        if (except != argc - 1)
 801de98:	68fb      	ldr	r3, [r7, #12]
 801de9a:	3b01      	subs	r3, #1
 801de9c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 801de9e:	429a      	cmp	r2, r3
 801dea0:	d006      	beq.n	801deb0 <shellExtRun+0x74>
        {
            shellWriteString(shell, "Parameters number incorrect\r\n");
 801dea2:	4979      	ldr	r1, [pc, #484]	@ (801e088 <shellExtRun+0x24c>)
 801dea4:	6978      	ldr	r0, [r7, #20]
 801dea6:	f7fc f9ed 	bl	801a284 <shellWriteString>
            return -1;
 801deaa:	f04f 33ff 	mov.w	r3, #4294967295
 801deae:	e0e7      	b.n	801e080 <shellExtRun+0x244>
        }
    }
#endif
    for (int i = 0; i < argc - 1; i++)
 801deb0:	2300      	movs	r3, #0
 801deb2:	677b      	str	r3, [r7, #116]	@ 0x74
 801deb4:	e03a      	b.n	801df2c <shellExtRun+0xf0>
    {
    #if SHELL_USING_FUNC_SIGNATURE == 1
        if (command->data.cmd.signature != NULL) {
 801deb6:	693b      	ldr	r3, [r7, #16]
 801deb8:	691b      	ldr	r3, [r3, #16]
 801deba:	2b00      	cmp	r3, #0
 801debc:	d01e      	beq.n	801defc <shellExtRun+0xc0>
            index = shellGetNextParamType(command->data.cmd.signature, index, type);
 801debe:	693b      	ldr	r3, [r7, #16]
 801dec0:	691b      	ldr	r3, [r3, #16]
 801dec2:	f107 021c 	add.w	r2, r7, #28
 801dec6:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 801dec8:	4618      	mov	r0, r3
 801deca:	f7ff fa95 	bl	801d3f8 <shellGetNextParamType>
 801dece:	67b8      	str	r0, [r7, #120]	@ 0x78
            if (shellExtParsePara(shell, argv[i + 1], type, &params[i]) != 0)
 801ded0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801ded2:	3301      	adds	r3, #1
 801ded4:	009b      	lsls	r3, r3, #2
 801ded6:	68ba      	ldr	r2, [r7, #8]
 801ded8:	4413      	add	r3, r2
 801deda:	6819      	ldr	r1, [r3, #0]
 801dedc:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 801dee0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801dee2:	009b      	lsls	r3, r3, #2
 801dee4:	4413      	add	r3, r2
 801dee6:	f107 021c 	add.w	r2, r7, #28
 801deea:	6978      	ldr	r0, [r7, #20]
 801deec:	f7ff fcf6 	bl	801d8dc <shellExtParsePara>
 801def0:	4603      	mov	r3, r0
 801def2:	2b00      	cmp	r3, #0
 801def4:	d017      	beq.n	801df26 <shellExtRun+0xea>
            {
                return -1;
 801def6:	f04f 33ff 	mov.w	r3, #4294967295
 801defa:	e0c1      	b.n	801e080 <shellExtRun+0x244>
            }
        }
        else
    #endif /** SHELL_USING_FUNC_SIGNATURE == 1 */
        {
            if (shellExtParsePara(shell, argv[i + 1], NULL, &params[i]) != 0)
 801defc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801defe:	3301      	adds	r3, #1
 801df00:	009b      	lsls	r3, r3, #2
 801df02:	68ba      	ldr	r2, [r7, #8]
 801df04:	4413      	add	r3, r2
 801df06:	6819      	ldr	r1, [r3, #0]
 801df08:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 801df0c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801df0e:	009b      	lsls	r3, r3, #2
 801df10:	4413      	add	r3, r2
 801df12:	2200      	movs	r2, #0
 801df14:	6978      	ldr	r0, [r7, #20]
 801df16:	f7ff fce1 	bl	801d8dc <shellExtParsePara>
 801df1a:	4603      	mov	r3, r0
 801df1c:	2b00      	cmp	r3, #0
 801df1e:	d002      	beq.n	801df26 <shellExtRun+0xea>
            {
                return -1;
 801df20:	f04f 33ff 	mov.w	r3, #4294967295
 801df24:	e0ac      	b.n	801e080 <shellExtRun+0x244>
    for (int i = 0; i < argc - 1; i++)
 801df26:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801df28:	3301      	adds	r3, #1
 801df2a:	677b      	str	r3, [r7, #116]	@ 0x74
 801df2c:	68fb      	ldr	r3, [r7, #12]
 801df2e:	3b01      	subs	r3, #1
 801df30:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 801df32:	429a      	cmp	r2, r3
 801df34:	dbbf      	blt.n	801deb6 <shellExtRun+0x7a>
            }
        }
    }
    switch (paramNum)
 801df36:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801df38:	2b07      	cmp	r3, #7
 801df3a:	d874      	bhi.n	801e026 <shellExtRun+0x1ea>
 801df3c:	a201      	add	r2, pc, #4	@ (adr r2, 801df44 <shellExtRun+0x108>)
 801df3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801df42:	bf00      	nop
 801df44:	0801df65 	.word	0x0801df65
 801df48:	0801df6f 	.word	0x0801df6f
 801df4c:	0801df81 	.word	0x0801df81
 801df50:	0801df95 	.word	0x0801df95
 801df54:	0801dfa9 	.word	0x0801dfa9
 801df58:	0801dfbf 	.word	0x0801dfbf
 801df5c:	0801dfdb 	.word	0x0801dfdb
 801df60:	0801dffd 	.word	0x0801dffd
    {
#if SHELL_PARAMETER_MAX_NUMBER >= 1
    case 0:
        ret = command->data.cmd.function();
 801df64:	693b      	ldr	r3, [r7, #16]
 801df66:	689b      	ldr	r3, [r3, #8]
 801df68:	4798      	blx	r3
 801df6a:	67f8      	str	r0, [r7, #124]	@ 0x7c
        break;
 801df6c:	e05f      	b.n	801e02e <shellExtRun+0x1f2>
#endif /** SHELL_PARAMETER_MAX_NUMBER >= 1 */
#if SHELL_PARAMETER_MAX_NUMBER >= 2
    case 1:
    {
        int (*func)(size_t) = command->data.cmd.function;
 801df6e:	693b      	ldr	r3, [r7, #16]
 801df70:	689b      	ldr	r3, [r3, #8]
 801df72:	64fb      	str	r3, [r7, #76]	@ 0x4c
        ret = func(params[0]);
 801df74:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801df76:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801df78:	4610      	mov	r0, r2
 801df7a:	4798      	blx	r3
 801df7c:	67f8      	str	r0, [r7, #124]	@ 0x7c
        break;
 801df7e:	e056      	b.n	801e02e <shellExtRun+0x1f2>
    }
#endif /** SHELL_PARAMETER_MAX_NUMBER >= 2 */
#if SHELL_PARAMETER_MAX_NUMBER >= 3
    case 2:
    {
        int (*func)(size_t, size_t) = command->data.cmd.function;
 801df80:	693b      	ldr	r3, [r7, #16]
 801df82:	689b      	ldr	r3, [r3, #8]
 801df84:	653b      	str	r3, [r7, #80]	@ 0x50
        ret = func(params[0], params[1]);
 801df86:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801df88:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801df8a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801df8c:	4610      	mov	r0, r2
 801df8e:	4798      	blx	r3
 801df90:	67f8      	str	r0, [r7, #124]	@ 0x7c
        break;
 801df92:	e04c      	b.n	801e02e <shellExtRun+0x1f2>
    }
#endif /** SHELL_PARAMETER_MAX_NUMBER >= 3 */
#if SHELL_PARAMETER_MAX_NUMBER >= 4
    case 3:
    {
        int (*func)(size_t, size_t, size_t) = command->data.cmd.function;
 801df94:	693b      	ldr	r3, [r7, #16]
 801df96:	689b      	ldr	r3, [r3, #8]
 801df98:	657b      	str	r3, [r7, #84]	@ 0x54
        ret = func(params[0], params[1], params[2]);
 801df9a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801df9c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801df9e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801dfa0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801dfa2:	4798      	blx	r3
 801dfa4:	67f8      	str	r0, [r7, #124]	@ 0x7c
        break;
 801dfa6:	e042      	b.n	801e02e <shellExtRun+0x1f2>
    }
#endif /** SHELL_PARAMETER_MAX_NUMBER >= 4 */
#if SHELL_PARAMETER_MAX_NUMBER >= 5
    case 4:
    {
        int (*func)(size_t, size_t, size_t, size_t) = command->data.cmd.function;
 801dfa8:	693b      	ldr	r3, [r7, #16]
 801dfaa:	689b      	ldr	r3, [r3, #8]
 801dfac:	65bb      	str	r3, [r7, #88]	@ 0x58
        ret = func(params[0], params[1], params[2], params[3]);
 801dfae:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801dfb0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801dfb2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801dfb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801dfb6:	6dbc      	ldr	r4, [r7, #88]	@ 0x58
 801dfb8:	47a0      	blx	r4
 801dfba:	67f8      	str	r0, [r7, #124]	@ 0x7c
        break;
 801dfbc:	e037      	b.n	801e02e <shellExtRun+0x1f2>
    }
#endif /** SHELL_PARAMETER_MAX_NUMBER >= 5 */
#if SHELL_PARAMETER_MAX_NUMBER >= 6
    case 5:
    {
        int (*func)(size_t, size_t, size_t, size_t, size_t) = command->data.cmd.function;
 801dfbe:	693b      	ldr	r3, [r7, #16]
 801dfc0:	689b      	ldr	r3, [r3, #8]
 801dfc2:	65fb      	str	r3, [r7, #92]	@ 0x5c
        ret = func(params[0], params[1], params[2], params[3], params[4]);
 801dfc4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801dfc6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801dfc8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801dfca:	6bbd      	ldr	r5, [r7, #56]	@ 0x38
 801dfcc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801dfce:	9300      	str	r3, [sp, #0]
 801dfd0:	6dfc      	ldr	r4, [r7, #92]	@ 0x5c
 801dfd2:	462b      	mov	r3, r5
 801dfd4:	47a0      	blx	r4
 801dfd6:	67f8      	str	r0, [r7, #124]	@ 0x7c
        break;
 801dfd8:	e029      	b.n	801e02e <shellExtRun+0x1f2>
    }
#endif /** SHELL_PARAMETER_MAX_NUMBER >= 6 */
#if SHELL_PARAMETER_MAX_NUMBER >= 7
    case 6:
    {
        int (*func)(size_t, size_t, size_t, size_t, size_t, size_t) = command->data.cmd.function;
 801dfda:	693b      	ldr	r3, [r7, #16]
 801dfdc:	689b      	ldr	r3, [r3, #8]
 801dfde:	663b      	str	r3, [r7, #96]	@ 0x60
        ret = func(params[0], params[1], params[2], params[3], params[4], params[5]);
 801dfe0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801dfe2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801dfe4:	6b7d      	ldr	r5, [r7, #52]	@ 0x34
 801dfe6:	6bbe      	ldr	r6, [r7, #56]	@ 0x38
 801dfe8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801dfea:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801dfec:	9201      	str	r2, [sp, #4]
 801dfee:	9300      	str	r3, [sp, #0]
 801dff0:	6e3c      	ldr	r4, [r7, #96]	@ 0x60
 801dff2:	4633      	mov	r3, r6
 801dff4:	462a      	mov	r2, r5
 801dff6:	47a0      	blx	r4
 801dff8:	67f8      	str	r0, [r7, #124]	@ 0x7c
        break;
 801dffa:	e018      	b.n	801e02e <shellExtRun+0x1f2>
    }
#endif /** SHELL_PARAMETER_MAX_NUMBER >= 7 */
#if SHELL_PARAMETER_MAX_NUMBER >= 8
    case 7:
    {
        int (*func)(size_t, size_t, size_t, size_t, size_t, size_t, size_t) = command->data.cmd.function;
 801dffc:	693b      	ldr	r3, [r7, #16]
 801dffe:	689b      	ldr	r3, [r3, #8]
 801e000:	667b      	str	r3, [r7, #100]	@ 0x64
        ret = func(params[0], params[1], params[2], params[3], params[4], params[5], params[6]);
 801e002:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801e004:	6b3d      	ldr	r5, [r7, #48]	@ 0x30
 801e006:	6b7e      	ldr	r6, [r7, #52]	@ 0x34
 801e008:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e00a:	607b      	str	r3, [r7, #4]
 801e00c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801e00e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801e010:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 801e012:	9102      	str	r1, [sp, #8]
 801e014:	9201      	str	r2, [sp, #4]
 801e016:	9300      	str	r3, [sp, #0]
 801e018:	6e7c      	ldr	r4, [r7, #100]	@ 0x64
 801e01a:	687b      	ldr	r3, [r7, #4]
 801e01c:	4632      	mov	r2, r6
 801e01e:	4629      	mov	r1, r5
 801e020:	47a0      	blx	r4
 801e022:	67f8      	str	r0, [r7, #124]	@ 0x7c
        break;
 801e024:	e003      	b.n	801e02e <shellExtRun+0x1f2>
                   params[8], params[9], params[10], params[11], params[12], params[13], params[14]);
        break;
    }
#endif /** SHELL_PARAMETER_MAX_NUMBER >= 16 */
    default:
        ret = -1;
 801e026:	f04f 33ff 	mov.w	r3, #4294967295
 801e02a:	67fb      	str	r3, [r7, #124]	@ 0x7c
        break;
 801e02c:	bf00      	nop
    }
    
#if SHELL_USING_FUNC_SIGNATURE == 1
    if (command->data.cmd.signature != NULL) {
 801e02e:	693b      	ldr	r3, [r7, #16]
 801e030:	691b      	ldr	r3, [r3, #16]
 801e032:	2b00      	cmp	r3, #0
 801e034:	d023      	beq.n	801e07e <shellExtRun+0x242>
        index = 0;
 801e036:	2300      	movs	r3, #0
 801e038:	67bb      	str	r3, [r7, #120]	@ 0x78
        for (int i = 0; i < argc - 1; i++)
 801e03a:	2300      	movs	r3, #0
 801e03c:	673b      	str	r3, [r7, #112]	@ 0x70
 801e03e:	e019      	b.n	801e074 <shellExtRun+0x238>
        {
            index = shellGetNextParamType(command->data.cmd.signature, index, type);
 801e040:	693b      	ldr	r3, [r7, #16]
 801e042:	691b      	ldr	r3, [r3, #16]
 801e044:	f107 021c 	add.w	r2, r7, #28
 801e048:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 801e04a:	4618      	mov	r0, r3
 801e04c:	f7ff f9d4 	bl	801d3f8 <shellGetNextParamType>
 801e050:	67b8      	str	r0, [r7, #120]	@ 0x78
            shellExtCleanerPara(shell, type, params[i]);
 801e052:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801e054:	009b      	lsls	r3, r3, #2
 801e056:	3378      	adds	r3, #120	@ 0x78
 801e058:	f107 0208 	add.w	r2, r7, #8
 801e05c:	4413      	add	r3, r2
 801e05e:	f853 2c54 	ldr.w	r2, [r3, #-84]
 801e062:	f107 031c 	add.w	r3, r7, #28
 801e066:	4619      	mov	r1, r3
 801e068:	6978      	ldr	r0, [r7, #20]
 801e06a:	f7ff fd4f 	bl	801db0c <shellExtCleanerPara>
        for (int i = 0; i < argc - 1; i++)
 801e06e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801e070:	3301      	adds	r3, #1
 801e072:	673b      	str	r3, [r7, #112]	@ 0x70
 801e074:	68fb      	ldr	r3, [r7, #12]
 801e076:	3b01      	subs	r3, #1
 801e078:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 801e07a:	429a      	cmp	r2, r3
 801e07c:	dbe0      	blt.n	801e040 <shellExtRun+0x204>
        }
    }
#endif /** SHELL_USING_FUNC_SIGNATURE == 1 */

    return ret;
 801e07e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
}
 801e080:	4618      	mov	r0, r3
 801e082:	3784      	adds	r7, #132	@ 0x84
 801e084:	46bd      	mov	sp, r7
 801e086:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e088:	08022b94 	.word	0x08022b94

0801e08c <shellLogInit>:

/**
 * @brief Initialize shell logging system
 */
void shellLogInit(void)
{
 801e08c:	b480      	push	{r7}
 801e08e:	af00      	add	r7, sp, #0
    /* Already initialized with default values */
}
 801e090:	bf00      	nop
 801e092:	46bd      	mov	sp, r7
 801e094:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e098:	4770      	bx	lr
	...

0801e09c <shellLogSetGlobalLevel>:
/**
 * @brief Set global log level
 * @param level Log level
 */
void shellLogSetGlobalLevel(ShellLogLevel_t level)
{
 801e09c:	b480      	push	{r7}
 801e09e:	b083      	sub	sp, #12
 801e0a0:	af00      	add	r7, sp, #0
 801e0a2:	4603      	mov	r3, r0
 801e0a4:	71fb      	strb	r3, [r7, #7]
    if (level <= SHELL_LOG_LEVEL_NONE) {
 801e0a6:	79fb      	ldrb	r3, [r7, #7]
 801e0a8:	2b04      	cmp	r3, #4
 801e0aa:	d802      	bhi.n	801e0b2 <shellLogSetGlobalLevel+0x16>
        g_shell_log_config.global_level = level;
 801e0ac:	4a04      	ldr	r2, [pc, #16]	@ (801e0c0 <shellLogSetGlobalLevel+0x24>)
 801e0ae:	79fb      	ldrb	r3, [r7, #7]
 801e0b0:	7013      	strb	r3, [r2, #0]
    }
}
 801e0b2:	bf00      	nop
 801e0b4:	370c      	adds	r7, #12
 801e0b6:	46bd      	mov	sp, r7
 801e0b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e0bc:	4770      	bx	lr
 801e0be:	bf00      	nop
 801e0c0:	240000a0 	.word	0x240000a0

0801e0c4 <shellLogSetModuleLevel>:
 * @brief Set module log level
 * @param module Module ID
 * @param level Log level
 */
void shellLogSetModuleLevel(ShellLogModule_t module, ShellLogLevel_t level)
{
 801e0c4:	b480      	push	{r7}
 801e0c6:	b083      	sub	sp, #12
 801e0c8:	af00      	add	r7, sp, #0
 801e0ca:	4603      	mov	r3, r0
 801e0cc:	460a      	mov	r2, r1
 801e0ce:	71fb      	strb	r3, [r7, #7]
 801e0d0:	4613      	mov	r3, r2
 801e0d2:	71bb      	strb	r3, [r7, #6]
    if (module < SHELL_LOG_MODULE_MAX && level <= SHELL_LOG_LEVEL_NONE) {
 801e0d4:	79fb      	ldrb	r3, [r7, #7]
 801e0d6:	2b06      	cmp	r3, #6
 801e0d8:	d807      	bhi.n	801e0ea <shellLogSetModuleLevel+0x26>
 801e0da:	79bb      	ldrb	r3, [r7, #6]
 801e0dc:	2b04      	cmp	r3, #4
 801e0de:	d804      	bhi.n	801e0ea <shellLogSetModuleLevel+0x26>
        g_shell_log_config.module_levels[module] = level;
 801e0e0:	79fb      	ldrb	r3, [r7, #7]
 801e0e2:	4a05      	ldr	r2, [pc, #20]	@ (801e0f8 <shellLogSetModuleLevel+0x34>)
 801e0e4:	4413      	add	r3, r2
 801e0e6:	79ba      	ldrb	r2, [r7, #6]
 801e0e8:	705a      	strb	r2, [r3, #1]
    }
}
 801e0ea:	bf00      	nop
 801e0ec:	370c      	adds	r7, #12
 801e0ee:	46bd      	mov	sp, r7
 801e0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e0f4:	4770      	bx	lr
 801e0f6:	bf00      	nop
 801e0f8:	240000a0 	.word	0x240000a0

0801e0fc <shellLogSetColorEnabled>:
/**
 * @brief Enable/disable color output
 * @param enable 1 to enable, 0 to disable
 */
void shellLogSetColorEnabled(uint8_t enable)
{
 801e0fc:	b480      	push	{r7}
 801e0fe:	b083      	sub	sp, #12
 801e100:	af00      	add	r7, sp, #0
 801e102:	4603      	mov	r3, r0
 801e104:	71fb      	strb	r3, [r7, #7]
    g_shell_log_config.color_enabled = enable ? 1 : 0;
 801e106:	79fb      	ldrb	r3, [r7, #7]
 801e108:	2b00      	cmp	r3, #0
 801e10a:	bf14      	ite	ne
 801e10c:	2301      	movne	r3, #1
 801e10e:	2300      	moveq	r3, #0
 801e110:	b2db      	uxtb	r3, r3
 801e112:	461a      	mov	r2, r3
 801e114:	4b03      	ldr	r3, [pc, #12]	@ (801e124 <shellLogSetColorEnabled+0x28>)
 801e116:	721a      	strb	r2, [r3, #8]
}
 801e118:	bf00      	nop
 801e11a:	370c      	adds	r7, #12
 801e11c:	46bd      	mov	sp, r7
 801e11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e122:	4770      	bx	lr
 801e124:	240000a0 	.word	0x240000a0

0801e128 <shellLogSetTimestampEnabled>:
/**
 * @brief Enable/disable timestamp output
 * @param enable 1 to enable, 0 to disable
 */
void shellLogSetTimestampEnabled(uint8_t enable)
{
 801e128:	b480      	push	{r7}
 801e12a:	b083      	sub	sp, #12
 801e12c:	af00      	add	r7, sp, #0
 801e12e:	4603      	mov	r3, r0
 801e130:	71fb      	strb	r3, [r7, #7]
    g_shell_log_config.timestamp_enabled = enable ? 1 : 0;
 801e132:	79fb      	ldrb	r3, [r7, #7]
 801e134:	2b00      	cmp	r3, #0
 801e136:	bf14      	ite	ne
 801e138:	2301      	movne	r3, #1
 801e13a:	2300      	moveq	r3, #0
 801e13c:	b2db      	uxtb	r3, r3
 801e13e:	461a      	mov	r2, r3
 801e140:	4b03      	ldr	r3, [pc, #12]	@ (801e150 <shellLogSetTimestampEnabled+0x28>)
 801e142:	725a      	strb	r2, [r3, #9]
}
 801e144:	bf00      	nop
 801e146:	370c      	adds	r7, #12
 801e148:	46bd      	mov	sp, r7
 801e14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e14e:	4770      	bx	lr
 801e150:	240000a0 	.word	0x240000a0

0801e154 <shellLogGetModuleName>:
 * @brief Get module name string
 * @param module Module ID
 * @return Module name string
 */
const char* shellLogGetModuleName(ShellLogModule_t module)
{
 801e154:	b480      	push	{r7}
 801e156:	b083      	sub	sp, #12
 801e158:	af00      	add	r7, sp, #0
 801e15a:	4603      	mov	r3, r0
 801e15c:	71fb      	strb	r3, [r7, #7]
    if (module < SHELL_LOG_MODULE_MAX) {
 801e15e:	79fb      	ldrb	r3, [r7, #7]
 801e160:	2b06      	cmp	r3, #6
 801e162:	d804      	bhi.n	801e16e <shellLogGetModuleName+0x1a>
        return module_names[module];
 801e164:	79fb      	ldrb	r3, [r7, #7]
 801e166:	4a05      	ldr	r2, [pc, #20]	@ (801e17c <shellLogGetModuleName+0x28>)
 801e168:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801e16c:	e000      	b.n	801e170 <shellLogGetModuleName+0x1c>
    }
    return "UNKNOWN";
 801e16e:	4b04      	ldr	r3, [pc, #16]	@ (801e180 <shellLogGetModuleName+0x2c>)
}
 801e170:	4618      	mov	r0, r3
 801e172:	370c      	adds	r7, #12
 801e174:	46bd      	mov	sp, r7
 801e176:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e17a:	4770      	bx	lr
 801e17c:	240000ac 	.word	0x240000ac
 801e180:	08022c20 	.word	0x08022c20

0801e184 <shellLogGetLevelName>:
 * @brief Get level name string
 * @param level Log level
 * @return Level name string
 */
const char* shellLogGetLevelName(ShellLogLevel_t level)
{
 801e184:	b480      	push	{r7}
 801e186:	b083      	sub	sp, #12
 801e188:	af00      	add	r7, sp, #0
 801e18a:	4603      	mov	r3, r0
 801e18c:	71fb      	strb	r3, [r7, #7]
    if (level < SHELL_LOG_LEVEL_NONE) {
 801e18e:	79fb      	ldrb	r3, [r7, #7]
 801e190:	2b03      	cmp	r3, #3
 801e192:	d804      	bhi.n	801e19e <shellLogGetLevelName+0x1a>
        return level_names[level];
 801e194:	79fb      	ldrb	r3, [r7, #7]
 801e196:	4a05      	ldr	r2, [pc, #20]	@ (801e1ac <shellLogGetLevelName+0x28>)
 801e198:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801e19c:	e000      	b.n	801e1a0 <shellLogGetLevelName+0x1c>
    }
    return "UNKNOWN";
 801e19e:	4b04      	ldr	r3, [pc, #16]	@ (801e1b0 <shellLogGetLevelName+0x2c>)
}
 801e1a0:	4618      	mov	r0, r3
 801e1a2:	370c      	adds	r7, #12
 801e1a4:	46bd      	mov	sp, r7
 801e1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e1aa:	4770      	bx	lr
 801e1ac:	240000c8 	.word	0x240000c8
 801e1b0:	08022c20 	.word	0x08022c20

0801e1b4 <shellLogGetLevelColor>:
 * @brief Get level color string
 * @param level Log level
 * @return Color string
 */
const char* shellLogGetLevelColor(ShellLogLevel_t level)
{
 801e1b4:	b480      	push	{r7}
 801e1b6:	b083      	sub	sp, #12
 801e1b8:	af00      	add	r7, sp, #0
 801e1ba:	4603      	mov	r3, r0
 801e1bc:	71fb      	strb	r3, [r7, #7]
    if (level < SHELL_LOG_LEVEL_NONE) {
 801e1be:	79fb      	ldrb	r3, [r7, #7]
 801e1c0:	2b03      	cmp	r3, #3
 801e1c2:	d804      	bhi.n	801e1ce <shellLogGetLevelColor+0x1a>
        return level_colors[level];
 801e1c4:	79fb      	ldrb	r3, [r7, #7]
 801e1c6:	4a05      	ldr	r2, [pc, #20]	@ (801e1dc <shellLogGetLevelColor+0x28>)
 801e1c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801e1cc:	e000      	b.n	801e1d0 <shellLogGetLevelColor+0x1c>
    }
    return SHELL_COLOR_RESET;
 801e1ce:	4b04      	ldr	r3, [pc, #16]	@ (801e1e0 <shellLogGetLevelColor+0x2c>)
}
 801e1d0:	4618      	mov	r0, r3
 801e1d2:	370c      	adds	r7, #12
 801e1d4:	46bd      	mov	sp, r7
 801e1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e1da:	4770      	bx	lr
 801e1dc:	240000d8 	.word	0x240000d8
 801e1e0:	08022c28 	.word	0x08022c28

0801e1e4 <shellLogShouldPrint>:
 * @param module Module ID
 * @param level Log level
 * @return 1 if should print, 0 otherwise
 */
static uint8_t shellLogShouldPrint(ShellLogModule_t module, ShellLogLevel_t level)
{
 801e1e4:	b480      	push	{r7}
 801e1e6:	b083      	sub	sp, #12
 801e1e8:	af00      	add	r7, sp, #0
 801e1ea:	4603      	mov	r3, r0
 801e1ec:	460a      	mov	r2, r1
 801e1ee:	71fb      	strb	r3, [r7, #7]
 801e1f0:	4613      	mov	r3, r2
 801e1f2:	71bb      	strb	r3, [r7, #6]
    /* Check global level */
    if (level < g_shell_log_config.global_level) {
 801e1f4:	4b0c      	ldr	r3, [pc, #48]	@ (801e228 <shellLogShouldPrint+0x44>)
 801e1f6:	781b      	ldrb	r3, [r3, #0]
 801e1f8:	79ba      	ldrb	r2, [r7, #6]
 801e1fa:	429a      	cmp	r2, r3
 801e1fc:	d201      	bcs.n	801e202 <shellLogShouldPrint+0x1e>
        return 0;
 801e1fe:	2300      	movs	r3, #0
 801e200:	e00c      	b.n	801e21c <shellLogShouldPrint+0x38>
    }
    
    /* Check module level */
    if (module < SHELL_LOG_MODULE_MAX && level < g_shell_log_config.module_levels[module]) {
 801e202:	79fb      	ldrb	r3, [r7, #7]
 801e204:	2b06      	cmp	r3, #6
 801e206:	d808      	bhi.n	801e21a <shellLogShouldPrint+0x36>
 801e208:	79fb      	ldrb	r3, [r7, #7]
 801e20a:	4a07      	ldr	r2, [pc, #28]	@ (801e228 <shellLogShouldPrint+0x44>)
 801e20c:	4413      	add	r3, r2
 801e20e:	785b      	ldrb	r3, [r3, #1]
 801e210:	79ba      	ldrb	r2, [r7, #6]
 801e212:	429a      	cmp	r2, r3
 801e214:	d201      	bcs.n	801e21a <shellLogShouldPrint+0x36>
        return 0;
 801e216:	2300      	movs	r3, #0
 801e218:	e000      	b.n	801e21c <shellLogShouldPrint+0x38>
    }
    
    return 1;
 801e21a:	2301      	movs	r3, #1
}
 801e21c:	4618      	mov	r0, r3
 801e21e:	370c      	adds	r7, #12
 801e220:	46bd      	mov	sp, r7
 801e222:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e226:	4770      	bx	lr
 801e228:	240000a0 	.word	0x240000a0

0801e22c <shellLogGetShell>:
/**
 * @brief Get any available shell (not necessarily active)
 * @return Shell* First available shell or NULL
 */
static Shell* shellLogGetShell(void)
{
 801e22c:	b480      	push	{r7}
 801e22e:	af00      	add	r7, sp, #0
    extern Shell shell;  // 引用shell_port.c中的全局shell对象
    return &shell;
 801e230:	4b02      	ldr	r3, [pc, #8]	@ (801e23c <shellLogGetShell+0x10>)
}
 801e232:	4618      	mov	r0, r3
 801e234:	46bd      	mov	sp, r7
 801e236:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e23a:	4770      	bx	lr
 801e23c:	240092fc 	.word	0x240092fc

0801e240 <shellLogPrint>:
 * @param level Log level
 * @param format Format string
 * @param ... Arguments
 */
void shellLogPrint(ShellLogModule_t module, ShellLogLevel_t level, const char* format, ...)
{
 801e240:	b40c      	push	{r2, r3}
 801e242:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e246:	f5ad 7d0c 	sub.w	sp, sp, #560	@ 0x230
 801e24a:	af04      	add	r7, sp, #16
 801e24c:	4602      	mov	r2, r0
 801e24e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801e252:	f2a3 2319 	subw	r3, r3, #537	@ 0x219
 801e256:	701a      	strb	r2, [r3, #0]
 801e258:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801e25c:	f2a3 231a 	subw	r3, r3, #538	@ 0x21a
 801e260:	460a      	mov	r2, r1
 801e262:	701a      	strb	r2, [r3, #0]
    Shell *shell = shellLogGetShell();
 801e264:	f7ff ffe2 	bl	801e22c <shellLogGetShell>
 801e268:	f8c7 0218 	str.w	r0, [r7, #536]	@ 0x218
    if (!shell || !shellLogShouldPrint(module, level)) {
 801e26c:	f8d7 3218 	ldr.w	r3, [r7, #536]	@ 0x218
 801e270:	2b00      	cmp	r3, #0
 801e272:	f000 8104 	beq.w	801e47e <shellLogPrint+0x23e>
 801e276:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801e27a:	f2a3 231a 	subw	r3, r3, #538	@ 0x21a
 801e27e:	781a      	ldrb	r2, [r3, #0]
 801e280:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801e284:	f2a3 2319 	subw	r3, r3, #537	@ 0x219
 801e288:	781b      	ldrb	r3, [r3, #0]
 801e28a:	4611      	mov	r1, r2
 801e28c:	4618      	mov	r0, r3
 801e28e:	f7ff ffa9 	bl	801e1e4 <shellLogShouldPrint>
 801e292:	4603      	mov	r3, r0
 801e294:	2b00      	cmp	r3, #0
 801e296:	f000 80f2 	beq.w	801e47e <shellLogPrint+0x23e>
        return;
    }
    
    char buffer[512];
    va_list args;
    va_start(args, format);
 801e29a:	f507 720f 	add.w	r2, r7, #572	@ 0x23c
 801e29e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801e2a2:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 801e2a6:	601a      	str	r2, [r3, #0]
    
    /* Build log message */
    int offset = 0;
 801e2a8:	2300      	movs	r3, #0
 801e2aa:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
    
    /* Add timestamp if enabled */
    if (g_shell_log_config.timestamp_enabled) {
 801e2ae:	4b78      	ldr	r3, [pc, #480]	@ (801e490 <shellLogPrint+0x250>)
 801e2b0:	7a5b      	ldrb	r3, [r3, #9]
 801e2b2:	2b00      	cmp	r3, #0
 801e2b4:	d02f      	beq.n	801e316 <shellLogPrint+0xd6>
        uint32_t tick = HAL_GetTick();
 801e2b6:	f7e5 fa21 	bl	80036fc <HAL_GetTick>
 801e2ba:	f8c7 0214 	str.w	r0, [r7, #532]	@ 0x214
        uint32_t seconds = tick / 1000;
 801e2be:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 801e2c2:	4a74      	ldr	r2, [pc, #464]	@ (801e494 <shellLogPrint+0x254>)
 801e2c4:	fba2 2303 	umull	r2, r3, r2, r3
 801e2c8:	099b      	lsrs	r3, r3, #6
 801e2ca:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
        uint32_t milliseconds = tick % 1000;
 801e2ce:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 801e2d2:	4a70      	ldr	r2, [pc, #448]	@ (801e494 <shellLogPrint+0x254>)
 801e2d4:	fba2 1203 	umull	r1, r2, r2, r3
 801e2d8:	0992      	lsrs	r2, r2, #6
 801e2da:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 801e2de:	fb01 f202 	mul.w	r2, r1, r2
 801e2e2:	1a9b      	subs	r3, r3, r2
 801e2e4:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
        offset += snprintf(buffer + offset, sizeof(buffer) - offset, "[%lu.%03lu] ", 
 801e2e8:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 801e2ec:	f107 020c 	add.w	r2, r7, #12
 801e2f0:	18d0      	adds	r0, r2, r3
 801e2f2:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 801e2f6:	f5c3 7100 	rsb	r1, r3, #512	@ 0x200
 801e2fa:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 801e2fe:	9300      	str	r3, [sp, #0]
 801e300:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 801e304:	4a64      	ldr	r2, [pc, #400]	@ (801e498 <shellLogPrint+0x258>)
 801e306:	f000 fe6f 	bl	801efe8 <sniprintf>
 801e30a:	4602      	mov	r2, r0
 801e30c:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 801e310:	4413      	add	r3, r2
 801e312:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
                          seconds, milliseconds);
    }
    
    /* Add colored level and module tag */
    if (g_shell_log_config.color_enabled) {
 801e316:	4b5e      	ldr	r3, [pc, #376]	@ (801e490 <shellLogPrint+0x250>)
 801e318:	7a1b      	ldrb	r3, [r3, #8]
 801e31a:	2b00      	cmp	r3, #0
 801e31c:	d034      	beq.n	801e388 <shellLogPrint+0x148>
        offset += snprintf(buffer + offset, sizeof(buffer) - offset, "%s[%s:%s]%s ", 
 801e31e:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 801e322:	f107 020c 	add.w	r2, r7, #12
 801e326:	18d4      	adds	r4, r2, r3
 801e328:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 801e32c:	f5c3 7500 	rsb	r5, r3, #512	@ 0x200
 801e330:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801e334:	f2a3 231a 	subw	r3, r3, #538	@ 0x21a
 801e338:	781b      	ldrb	r3, [r3, #0]
 801e33a:	4618      	mov	r0, r3
 801e33c:	f7ff ff3a 	bl	801e1b4 <shellLogGetLevelColor>
 801e340:	4680      	mov	r8, r0
 801e342:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801e346:	f2a3 231a 	subw	r3, r3, #538	@ 0x21a
 801e34a:	781b      	ldrb	r3, [r3, #0]
 801e34c:	4618      	mov	r0, r3
 801e34e:	f7ff ff19 	bl	801e184 <shellLogGetLevelName>
 801e352:	4606      	mov	r6, r0
 801e354:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801e358:	f2a3 2319 	subw	r3, r3, #537	@ 0x219
 801e35c:	781b      	ldrb	r3, [r3, #0]
 801e35e:	4618      	mov	r0, r3
 801e360:	f7ff fef8 	bl	801e154 <shellLogGetModuleName>
 801e364:	4603      	mov	r3, r0
 801e366:	4a4d      	ldr	r2, [pc, #308]	@ (801e49c <shellLogPrint+0x25c>)
 801e368:	9202      	str	r2, [sp, #8]
 801e36a:	9301      	str	r3, [sp, #4]
 801e36c:	9600      	str	r6, [sp, #0]
 801e36e:	4643      	mov	r3, r8
 801e370:	4a4b      	ldr	r2, [pc, #300]	@ (801e4a0 <shellLogPrint+0x260>)
 801e372:	4629      	mov	r1, r5
 801e374:	4620      	mov	r0, r4
 801e376:	f000 fe37 	bl	801efe8 <sniprintf>
 801e37a:	4602      	mov	r2, r0
 801e37c:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 801e380:	4413      	add	r3, r2
 801e382:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 801e386:	e027      	b.n	801e3d8 <shellLogPrint+0x198>
                          shellLogGetLevelColor(level),
                          shellLogGetLevelName(level), 
                          shellLogGetModuleName(module),
                          SHELL_COLOR_RESET);
    } else {
        offset += snprintf(buffer + offset, sizeof(buffer) - offset, "[%s:%s] ", 
 801e388:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 801e38c:	f107 020c 	add.w	r2, r7, #12
 801e390:	18d4      	adds	r4, r2, r3
 801e392:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 801e396:	f5c3 7500 	rsb	r5, r3, #512	@ 0x200
 801e39a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801e39e:	f2a3 231a 	subw	r3, r3, #538	@ 0x21a
 801e3a2:	781b      	ldrb	r3, [r3, #0]
 801e3a4:	4618      	mov	r0, r3
 801e3a6:	f7ff feed 	bl	801e184 <shellLogGetLevelName>
 801e3aa:	4606      	mov	r6, r0
 801e3ac:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801e3b0:	f2a3 2319 	subw	r3, r3, #537	@ 0x219
 801e3b4:	781b      	ldrb	r3, [r3, #0]
 801e3b6:	4618      	mov	r0, r3
 801e3b8:	f7ff fecc 	bl	801e154 <shellLogGetModuleName>
 801e3bc:	4603      	mov	r3, r0
 801e3be:	9300      	str	r3, [sp, #0]
 801e3c0:	4633      	mov	r3, r6
 801e3c2:	4a38      	ldr	r2, [pc, #224]	@ (801e4a4 <shellLogPrint+0x264>)
 801e3c4:	4629      	mov	r1, r5
 801e3c6:	4620      	mov	r0, r4
 801e3c8:	f000 fe0e 	bl	801efe8 <sniprintf>
 801e3cc:	4602      	mov	r2, r0
 801e3ce:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 801e3d2:	4413      	add	r3, r2
 801e3d4:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
                          shellLogGetLevelName(level), shellLogGetModuleName(module));
    }
    
    /* Add user message (without color) */
    offset += vsnprintf(buffer + offset, sizeof(buffer) - offset, format, args);
 801e3d8:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 801e3dc:	f107 020c 	add.w	r2, r7, #12
 801e3e0:	18d0      	adds	r0, r2, r3
 801e3e2:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 801e3e6:	f5c3 7100 	rsb	r1, r3, #512	@ 0x200
 801e3ea:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801e3ee:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 801e3f2:	681b      	ldr	r3, [r3, #0]
 801e3f4:	f8d7 2238 	ldr.w	r2, [r7, #568]	@ 0x238
 801e3f8:	f000 fe7c 	bl	801f0f4 <vsniprintf>
 801e3fc:	4602      	mov	r2, r0
 801e3fe:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 801e402:	4413      	add	r3, r2
 801e404:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
    
    /* Ensure newline */
    if (offset > 0 && buffer[offset - 1] != '\n') {
 801e408:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 801e40c:	2b00      	cmp	r3, #0
 801e40e:	dd2d      	ble.n	801e46c <shellLogPrint+0x22c>
 801e410:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 801e414:	3b01      	subs	r3, #1
 801e416:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 801e41a:	f5a2 7205 	sub.w	r2, r2, #532	@ 0x214
 801e41e:	5cd3      	ldrb	r3, [r2, r3]
 801e420:	2b0a      	cmp	r3, #10
 801e422:	d023      	beq.n	801e46c <shellLogPrint+0x22c>
        if (offset < sizeof(buffer) - 2) {
 801e424:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 801e428:	f5b3 7fff 	cmp.w	r3, #510	@ 0x1fe
 801e42c:	d21e      	bcs.n	801e46c <shellLogPrint+0x22c>
            buffer[offset++] = '\r';
 801e42e:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 801e432:	1c5a      	adds	r2, r3, #1
 801e434:	f8c7 221c 	str.w	r2, [r7, #540]	@ 0x21c
 801e438:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 801e43c:	f5a2 7205 	sub.w	r2, r2, #532	@ 0x214
 801e440:	210d      	movs	r1, #13
 801e442:	54d1      	strb	r1, [r2, r3]
            buffer[offset++] = '\n';
 801e444:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 801e448:	1c5a      	adds	r2, r3, #1
 801e44a:	f8c7 221c 	str.w	r2, [r7, #540]	@ 0x21c
 801e44e:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 801e452:	f5a2 7205 	sub.w	r2, r2, #532	@ 0x214
 801e456:	210a      	movs	r1, #10
 801e458:	54d1      	strb	r1, [r2, r3]
            buffer[offset] = '\0';
 801e45a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801e45e:	f5a3 7205 	sub.w	r2, r3, #532	@ 0x214
 801e462:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 801e466:	4413      	add	r3, r2
 801e468:	2200      	movs	r2, #0
 801e46a:	701a      	strb	r2, [r3, #0]
        }
    }
    
    /* Print to shell - this is the correct way to maintain shell control */
    shellPrint(shell, "%s", buffer);
 801e46c:	f107 030c 	add.w	r3, r7, #12
 801e470:	461a      	mov	r2, r3
 801e472:	490d      	ldr	r1, [pc, #52]	@ (801e4a8 <shellLogPrint+0x268>)
 801e474:	f8d7 0218 	ldr.w	r0, [r7, #536]	@ 0x218
 801e478:	f7fb ffb0 	bl	801a3dc <shellPrint>
 801e47c:	e000      	b.n	801e480 <shellLogPrint+0x240>
        return;
 801e47e:	bf00      	nop
    
    va_end(args);
 801e480:	f507 7708 	add.w	r7, r7, #544	@ 0x220
 801e484:	46bd      	mov	sp, r7
 801e486:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801e48a:	b002      	add	sp, #8
 801e48c:	4770      	bx	lr
 801e48e:	bf00      	nop
 801e490:	240000a0 	.word	0x240000a0
 801e494:	10624dd3 	.word	0x10624dd3
 801e498:	08022c30 	.word	0x08022c30
 801e49c:	08022c28 	.word	0x08022c28
 801e4a0:	08022c40 	.word	0x08022c40
 801e4a4:	08022c50 	.word	0x08022c50
 801e4a8:	08022c5c 	.word	0x08022c5c

0801e4ac <shell_write>:
 * @param len 长度
 * 
 * @return short 实际写入的字符长度
 */
short shell_write(char *data, unsigned short len)
{
 801e4ac:	b590      	push	{r4, r7, lr}
 801e4ae:	b085      	sub	sp, #20
 801e4b0:	af00      	add	r7, sp, #0
 801e4b2:	6078      	str	r0, [r7, #4]
 801e4b4:	460b      	mov	r3, r1
 801e4b6:	807b      	strh	r3, [r7, #2]
    HAL_UART_Transmit(SHELL_UART, (uint8_t *)data, len, 0xFFFF);
 801e4b8:	887a      	ldrh	r2, [r7, #2]
 801e4ba:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801e4be:	6879      	ldr	r1, [r7, #4]
 801e4c0:	4838      	ldr	r0, [pc, #224]	@ (801e5a4 <shell_write+0xf8>)
 801e4c2:	f7f1 fe8b 	bl	80101dc <HAL_UART_Transmit>
    
    // 检查是否需要重新显示命令行提示符和已输入内容
    // 如果是换行符或回车符，不需要重新显示
    if (len == 1 && (data[0] == '\r' || data[0] == '\n')) {
 801e4c6:	887b      	ldrh	r3, [r7, #2]
 801e4c8:	2b01      	cmp	r3, #1
 801e4ca:	d10a      	bne.n	801e4e2 <shell_write+0x36>
 801e4cc:	687b      	ldr	r3, [r7, #4]
 801e4ce:	781b      	ldrb	r3, [r3, #0]
 801e4d0:	2b0d      	cmp	r3, #13
 801e4d2:	d003      	beq.n	801e4dc <shell_write+0x30>
 801e4d4:	687b      	ldr	r3, [r7, #4]
 801e4d6:	781b      	ldrb	r3, [r3, #0]
 801e4d8:	2b0a      	cmp	r3, #10
 801e4da:	d102      	bne.n	801e4e2 <shell_write+0x36>
        return len;
 801e4dc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801e4e0:	e05c      	b.n	801e59c <shell_write+0xf0>
    }
    
    // 检查是否是日志输出（包含换行符）
    for (int i = 0; i < len; i++) {
 801e4e2:	2300      	movs	r3, #0
 801e4e4:	60fb      	str	r3, [r7, #12]
 801e4e6:	e051      	b.n	801e58c <shell_write+0xe0>
        if (data[i] == '\r' || data[i] == '\n') {
 801e4e8:	68fb      	ldr	r3, [r7, #12]
 801e4ea:	687a      	ldr	r2, [r7, #4]
 801e4ec:	4413      	add	r3, r2
 801e4ee:	781b      	ldrb	r3, [r3, #0]
 801e4f0:	2b0d      	cmp	r3, #13
 801e4f2:	d005      	beq.n	801e500 <shell_write+0x54>
 801e4f4:	68fb      	ldr	r3, [r7, #12]
 801e4f6:	687a      	ldr	r2, [r7, #4]
 801e4f8:	4413      	add	r3, r2
 801e4fa:	781b      	ldrb	r3, [r3, #0]
 801e4fc:	2b0a      	cmp	r3, #10
 801e4fe:	d142      	bne.n	801e586 <shell_write+0xda>
            // 如果shell不处于活动状态（即不在执行命令）且有命令行输入
            if (!shell.status.isActive && shell.parser.length > 0) {
 801e500:	4b29      	ldr	r3, [pc, #164]	@ (801e5a8 <shell_write+0xfc>)
 801e502:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 801e506:	f003 0302 	and.w	r3, r3, #2
 801e50a:	b2db      	uxtb	r3, r3
 801e50c:	2b00      	cmp	r3, #0
 801e50e:	d142      	bne.n	801e596 <shell_write+0xea>
 801e510:	4b25      	ldr	r3, [pc, #148]	@ (801e5a8 <shell_write+0xfc>)
 801e512:	8a1b      	ldrh	r3, [r3, #16]
 801e514:	2b00      	cmp	r3, #0
 801e516:	d03e      	beq.n	801e596 <shell_write+0xea>
                // 等待一小段时间，确保日志输出完成
                for (volatile int j = 0; j < 1000; j++);
 801e518:	2300      	movs	r3, #0
 801e51a:	60bb      	str	r3, [r7, #8]
 801e51c:	e002      	b.n	801e524 <shell_write+0x78>
 801e51e:	68bb      	ldr	r3, [r7, #8]
 801e520:	3301      	adds	r3, #1
 801e522:	60bb      	str	r3, [r7, #8]
 801e524:	68bb      	ldr	r3, [r7, #8]
 801e526:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 801e52a:	dbf8      	blt.n	801e51e <shell_write+0x72>
                
                // 重新显示提示符
                HAL_UART_Transmit(SHELL_UART, (uint8_t *)"\r\n", 2, 0xFFFF);
 801e52c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801e530:	2202      	movs	r2, #2
 801e532:	491e      	ldr	r1, [pc, #120]	@ (801e5ac <shell_write+0x100>)
 801e534:	481b      	ldr	r0, [pc, #108]	@ (801e5a4 <shell_write+0xf8>)
 801e536:	f7f1 fe51 	bl	80101dc <HAL_UART_Transmit>
                HAL_UART_Transmit(SHELL_UART, (uint8_t *)shell.info.user->data.user.name, 
 801e53a:	4b1b      	ldr	r3, [pc, #108]	@ (801e5a8 <shell_write+0xfc>)
 801e53c:	681b      	ldr	r3, [r3, #0]
 801e53e:	685c      	ldr	r4, [r3, #4]
                                 strlen(shell.info.user->data.user.name), 0xFFFF);
 801e540:	4b19      	ldr	r3, [pc, #100]	@ (801e5a8 <shell_write+0xfc>)
 801e542:	681b      	ldr	r3, [r3, #0]
 801e544:	685b      	ldr	r3, [r3, #4]
 801e546:	4618      	mov	r0, r3
 801e548:	f7e1 feec 	bl	8000324 <strlen>
 801e54c:	4603      	mov	r3, r0
                HAL_UART_Transmit(SHELL_UART, (uint8_t *)shell.info.user->data.user.name, 
 801e54e:	b29a      	uxth	r2, r3
 801e550:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801e554:	4621      	mov	r1, r4
 801e556:	4813      	ldr	r0, [pc, #76]	@ (801e5a4 <shell_write+0xf8>)
 801e558:	f7f1 fe40 	bl	80101dc <HAL_UART_Transmit>
                HAL_UART_Transmit(SHELL_UART, (uint8_t *)":/$ ", 4, 0xFFFF);
 801e55c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801e560:	2204      	movs	r2, #4
 801e562:	4913      	ldr	r1, [pc, #76]	@ (801e5b0 <shell_write+0x104>)
 801e564:	480f      	ldr	r0, [pc, #60]	@ (801e5a4 <shell_write+0xf8>)
 801e566:	f7f1 fe39 	bl	80101dc <HAL_UART_Transmit>
                
                // 重新显示已输入的内容
                if (shell.parser.length > 0) {
 801e56a:	4b0f      	ldr	r3, [pc, #60]	@ (801e5a8 <shell_write+0xfc>)
 801e56c:	8a1b      	ldrh	r3, [r3, #16]
 801e56e:	2b00      	cmp	r3, #0
 801e570:	d011      	beq.n	801e596 <shell_write+0xea>
                    HAL_UART_Transmit(SHELL_UART, (uint8_t *)shell.parser.buffer, 
 801e572:	4b0d      	ldr	r3, [pc, #52]	@ (801e5a8 <shell_write+0xfc>)
 801e574:	6959      	ldr	r1, [r3, #20]
 801e576:	4b0c      	ldr	r3, [pc, #48]	@ (801e5a8 <shell_write+0xfc>)
 801e578:	8a1a      	ldrh	r2, [r3, #16]
 801e57a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801e57e:	4809      	ldr	r0, [pc, #36]	@ (801e5a4 <shell_write+0xf8>)
 801e580:	f7f1 fe2c 	bl	80101dc <HAL_UART_Transmit>
                                     shell.parser.length, 0xFFFF);
                }
            }
            break;
 801e584:	e007      	b.n	801e596 <shell_write+0xea>
    for (int i = 0; i < len; i++) {
 801e586:	68fb      	ldr	r3, [r7, #12]
 801e588:	3301      	adds	r3, #1
 801e58a:	60fb      	str	r3, [r7, #12]
 801e58c:	887b      	ldrh	r3, [r7, #2]
 801e58e:	68fa      	ldr	r2, [r7, #12]
 801e590:	429a      	cmp	r2, r3
 801e592:	dba9      	blt.n	801e4e8 <shell_write+0x3c>
 801e594:	e000      	b.n	801e598 <shell_write+0xec>
            break;
 801e596:	bf00      	nop
        }
    }
    
    return len;
 801e598:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
}
 801e59c:	4618      	mov	r0, r3
 801e59e:	3714      	adds	r7, #20
 801e5a0:	46bd      	mov	sp, r7
 801e5a2:	bd90      	pop	{r4, r7, pc}
 801e5a4:	24000410 	.word	0x24000410
 801e5a8:	240092fc 	.word	0x240092fc
 801e5ac:	08022c60 	.word	0x08022c60
 801e5b0:	08022c64 	.word	0x08022c64

0801e5b4 <shell_read>:
 * @param len 读取长度
 * 
 * @return short 实际读取的字符长度
 */
short shell_read(char *data, unsigned short len)
{
 801e5b4:	b580      	push	{r7, lr}
 801e5b6:	b084      	sub	sp, #16
 801e5b8:	af00      	add	r7, sp, #0
 801e5ba:	6078      	str	r0, [r7, #4]
 801e5bc:	460b      	mov	r3, r1
 801e5be:	807b      	strh	r3, [r7, #2]
    uint8_t byte;
    if (xQueueReceive(shellRxQueue, &byte, 0) == pdTRUE) {
 801e5c0:	4b0a      	ldr	r3, [pc, #40]	@ (801e5ec <shell_read+0x38>)
 801e5c2:	681b      	ldr	r3, [r3, #0]
 801e5c4:	f107 010f 	add.w	r1, r7, #15
 801e5c8:	2200      	movs	r2, #0
 801e5ca:	4618      	mov	r0, r3
 801e5cc:	f7f8 fd2c 	bl	8017028 <xQueueReceive>
 801e5d0:	4603      	mov	r3, r0
 801e5d2:	2b01      	cmp	r3, #1
 801e5d4:	d104      	bne.n	801e5e0 <shell_read+0x2c>
        *data = byte;
 801e5d6:	7bfa      	ldrb	r2, [r7, #15]
 801e5d8:	687b      	ldr	r3, [r7, #4]
 801e5da:	701a      	strb	r2, [r3, #0]
        return 1;
 801e5dc:	2301      	movs	r3, #1
 801e5de:	e000      	b.n	801e5e2 <shell_read+0x2e>
    }
    return 0;
 801e5e0:	2300      	movs	r3, #0
}
 801e5e2:	4618      	mov	r0, r3
 801e5e4:	3710      	adds	r7, #16
 801e5e6:	46bd      	mov	sp, r7
 801e5e8:	bd80      	pop	{r7, pc}
 801e5ea:	bf00      	nop
 801e5ec:	24009584 	.word	0x24009584

0801e5f0 <shell_lock>:
 * @param shell shell对象
 * 
 * @return int 0
 */
static int shell_lock(Shell *shell)
{
 801e5f0:	b580      	push	{r7, lr}
 801e5f2:	b082      	sub	sp, #8
 801e5f4:	af00      	add	r7, sp, #0
 801e5f6:	6078      	str	r0, [r7, #4]
    if (shellMutex != NULL) {
 801e5f8:	4b07      	ldr	r3, [pc, #28]	@ (801e618 <shell_lock+0x28>)
 801e5fa:	681b      	ldr	r3, [r3, #0]
 801e5fc:	2b00      	cmp	r3, #0
 801e5fe:	d006      	beq.n	801e60e <shell_lock+0x1e>
        xSemaphoreTakeRecursive(shellMutex, portMAX_DELAY);
 801e600:	4b05      	ldr	r3, [pc, #20]	@ (801e618 <shell_lock+0x28>)
 801e602:	681b      	ldr	r3, [r3, #0]
 801e604:	f04f 31ff 	mov.w	r1, #4294967295
 801e608:	4618      	mov	r0, r3
 801e60a:	f7f8 fb35 	bl	8016c78 <xQueueTakeMutexRecursive>
    }
    return 0;
 801e60e:	2300      	movs	r3, #0
}
 801e610:	4618      	mov	r0, r3
 801e612:	3708      	adds	r7, #8
 801e614:	46bd      	mov	sp, r7
 801e616:	bd80      	pop	{r7, pc}
 801e618:	24009580 	.word	0x24009580

0801e61c <shell_unlock>:
 * @param shell shell对象
 * 
 * @return int 0
 */
static int shell_unlock(Shell *shell)
{
 801e61c:	b580      	push	{r7, lr}
 801e61e:	b082      	sub	sp, #8
 801e620:	af00      	add	r7, sp, #0
 801e622:	6078      	str	r0, [r7, #4]
    if (shellMutex != NULL) {
 801e624:	4b06      	ldr	r3, [pc, #24]	@ (801e640 <shell_unlock+0x24>)
 801e626:	681b      	ldr	r3, [r3, #0]
 801e628:	2b00      	cmp	r3, #0
 801e62a:	d004      	beq.n	801e636 <shell_unlock+0x1a>
        xSemaphoreGiveRecursive(shellMutex);
 801e62c:	4b04      	ldr	r3, [pc, #16]	@ (801e640 <shell_unlock+0x24>)
 801e62e:	681b      	ldr	r3, [r3, #0]
 801e630:	4618      	mov	r0, r3
 801e632:	f7f8 faec 	bl	8016c0e <xQueueGiveMutexRecursive>
    }
    return 0;
 801e636:	2300      	movs	r3, #0
}
 801e638:	4618      	mov	r0, r3
 801e63a:	3708      	adds	r7, #8
 801e63c:	46bd      	mov	sp, r7
 801e63e:	bd80      	pop	{r7, pc}
 801e640:	24009580 	.word	0x24009580

0801e644 <HAL_UART_RxCpltCallback>:

/**
 * @brief UART接收完成回调函数
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 801e644:	b580      	push	{r7, lr}
 801e646:	b086      	sub	sp, #24
 801e648:	af00      	add	r7, sp, #0
 801e64a:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART3) {
 801e64c:	687b      	ldr	r3, [r7, #4]
 801e64e:	681b      	ldr	r3, [r3, #0]
 801e650:	4a11      	ldr	r2, [pc, #68]	@ (801e698 <HAL_UART_RxCpltCallback+0x54>)
 801e652:	4293      	cmp	r3, r2
 801e654:	d11c      	bne.n	801e690 <HAL_UART_RxCpltCallback+0x4c>
        BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 801e656:	2300      	movs	r3, #0
 801e658:	60fb      	str	r3, [r7, #12]
        
        // 将接收到的字符放入队列
        BaseType_t result = xQueueSendFromISR(shellRxQueue, &uart_rx_buffer[0], &xHigherPriorityTaskWoken);
 801e65a:	4b10      	ldr	r3, [pc, #64]	@ (801e69c <HAL_UART_RxCpltCallback+0x58>)
 801e65c:	6818      	ldr	r0, [r3, #0]
 801e65e:	f107 020c 	add.w	r2, r7, #12
 801e662:	2300      	movs	r3, #0
 801e664:	490e      	ldr	r1, [pc, #56]	@ (801e6a0 <HAL_UART_RxCpltCallback+0x5c>)
 801e666:	f7f8 fc41 	bl	8016eec <xQueueGenericSendFromISR>
 801e66a:	6178      	str	r0, [r7, #20]
            // 队列满了，记录警告但不影响正常运行
            // 注意：在中断中不能使用日志系统，因为它可能会阻塞
        }
        
        // 重新启动接收
        HAL_StatusTypeDef status = HAL_UART_Receive_IT(SHELL_UART, uart_rx_buffer, 1);
 801e66c:	2201      	movs	r2, #1
 801e66e:	490c      	ldr	r1, [pc, #48]	@ (801e6a0 <HAL_UART_RxCpltCallback+0x5c>)
 801e670:	480c      	ldr	r0, [pc, #48]	@ (801e6a4 <HAL_UART_RxCpltCallback+0x60>)
 801e672:	f7f1 fe41 	bl	80102f8 <HAL_UART_Receive_IT>
 801e676:	4603      	mov	r3, r0
 801e678:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK) {
            // UART接收重启失败，但在中断中无法记录日志
        }
        
        // 如果有更高优先级任务被唤醒，进行任务切换
        portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 801e67a:	68fb      	ldr	r3, [r7, #12]
 801e67c:	2b00      	cmp	r3, #0
 801e67e:	d007      	beq.n	801e690 <HAL_UART_RxCpltCallback+0x4c>
 801e680:	4b09      	ldr	r3, [pc, #36]	@ (801e6a8 <HAL_UART_RxCpltCallback+0x64>)
 801e682:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801e686:	601a      	str	r2, [r3, #0]
 801e688:	f3bf 8f4f 	dsb	sy
 801e68c:	f3bf 8f6f 	isb	sy
    }
}
 801e690:	bf00      	nop
 801e692:	3718      	adds	r7, #24
 801e694:	46bd      	mov	sp, r7
 801e696:	bd80      	pop	{r7, pc}
 801e698:	40004800 	.word	0x40004800
 801e69c:	24009584 	.word	0x24009584
 801e6a0:	2400958c 	.word	0x2400958c
 801e6a4:	24000410 	.word	0x24000410
 801e6a8:	e000ed04 	.word	0xe000ed04

0801e6ac <shell_task_function>:
 * @brief Shell任务函数
 * 
 * @param argument 任务参数
 */
static void shell_task_function(void *argument)
{
 801e6ac:	b580      	push	{r7, lr}
 801e6ae:	b084      	sub	sp, #16
 801e6b0:	af00      	add	r7, sp, #0
 801e6b2:	6078      	str	r0, [r7, #4]
    Shell *shell = (Shell *)argument;
 801e6b4:	687b      	ldr	r3, [r7, #4]
 801e6b6:	60fb      	str	r3, [r7, #12]
    
    SHELL_LOG_SYS_INFO("Shell task started successfully");
 801e6b8:	4a0e      	ldr	r2, [pc, #56]	@ (801e6f4 <shell_task_function+0x48>)
 801e6ba:	2101      	movs	r1, #1
 801e6bc:	2000      	movs	r0, #0
 801e6be:	f7ff fdbf 	bl	801e240 <shellLogPrint>
    SHELL_LOG_SYS_INFO("Shell version: %s", SHELL_VERSION);
 801e6c2:	4b0d      	ldr	r3, [pc, #52]	@ (801e6f8 <shell_task_function+0x4c>)
 801e6c4:	4a0d      	ldr	r2, [pc, #52]	@ (801e6fc <shell_task_function+0x50>)
 801e6c6:	2101      	movs	r1, #1
 801e6c8:	2000      	movs	r0, #0
 801e6ca:	f7ff fdb9 	bl	801e240 <shellLogPrint>
    SHELL_LOG_SYS_INFO("Type 'help' to see available commands");
 801e6ce:	4a0c      	ldr	r2, [pc, #48]	@ (801e700 <shell_task_function+0x54>)
 801e6d0:	2101      	movs	r1, #1
 801e6d2:	2000      	movs	r0, #0
 801e6d4:	f7ff fdb4 	bl	801e240 <shellLogPrint>
    
    // 启动UART中断接收
    HAL_UART_Receive_IT(SHELL_UART, uart_rx_buffer, 1);
 801e6d8:	2201      	movs	r2, #1
 801e6da:	490a      	ldr	r1, [pc, #40]	@ (801e704 <shell_task_function+0x58>)
 801e6dc:	480a      	ldr	r0, [pc, #40]	@ (801e708 <shell_task_function+0x5c>)
 801e6de:	f7f1 fe0b 	bl	80102f8 <HAL_UART_Receive_IT>
    
    while (1) {
        shellTask(shell);
 801e6e2:	68f8      	ldr	r0, [r7, #12]
 801e6e4:	f7fd fcf2 	bl	801c0cc <shellTask>
        vTaskDelay(pdMS_TO_TICKS(1));
 801e6e8:	2001      	movs	r0, #1
 801e6ea:	f7f9 f9d9 	bl	8017aa0 <vTaskDelay>
        shellTask(shell);
 801e6ee:	bf00      	nop
 801e6f0:	e7f7      	b.n	801e6e2 <shell_task_function+0x36>
 801e6f2:	bf00      	nop
 801e6f4:	08022c6c 	.word	0x08022c6c
 801e6f8:	08022c8c 	.word	0x08022c8c
 801e6fc:	08022c94 	.word	0x08022c94
 801e700:	08022ca8 	.word	0x08022ca8
 801e704:	2400958c 	.word	0x2400958c
 801e708:	24000410 	.word	0x24000410

0801e70c <shell_init>:

/**
 * @brief 初始化shell
 */
void shell_init(void)
{
 801e70c:	b580      	push	{r7, lr}
 801e70e:	b084      	sub	sp, #16
 801e710:	af02      	add	r7, sp, #8
    // 创建互斥锁
    shellMutex = xSemaphoreCreateRecursiveMutex();
 801e712:	2004      	movs	r0, #4
 801e714:	f7f8 fa63 	bl	8016bde <xQueueCreateMutex>
 801e718:	4603      	mov	r3, r0
 801e71a:	4a1d      	ldr	r2, [pc, #116]	@ (801e790 <shell_init+0x84>)
 801e71c:	6013      	str	r3, [r2, #0]
    if (shellMutex == NULL) {
 801e71e:	4b1c      	ldr	r3, [pc, #112]	@ (801e790 <shell_init+0x84>)
 801e720:	681b      	ldr	r3, [r3, #0]
 801e722:	2b00      	cmp	r3, #0
 801e724:	d02d      	beq.n	801e782 <shell_init+0x76>
        return;
    }
    
    // 创建接收队列
    shellRxQueue = xQueueCreate(SHELL_RX_QUEUE_SIZE, sizeof(uint8_t));
 801e726:	2200      	movs	r2, #0
 801e728:	2101      	movs	r1, #1
 801e72a:	2040      	movs	r0, #64	@ 0x40
 801e72c:	f7f8 f9df 	bl	8016aee <xQueueGenericCreate>
 801e730:	4603      	mov	r3, r0
 801e732:	4a18      	ldr	r2, [pc, #96]	@ (801e794 <shell_init+0x88>)
 801e734:	6013      	str	r3, [r2, #0]
    if (shellRxQueue == NULL) {
 801e736:	4b17      	ldr	r3, [pc, #92]	@ (801e794 <shell_init+0x88>)
 801e738:	681b      	ldr	r3, [r3, #0]
 801e73a:	2b00      	cmp	r3, #0
 801e73c:	d023      	beq.n	801e786 <shell_init+0x7a>
        return;
    }
    
    // 配置shell
    shell.write = shell_write;
 801e73e:	4b16      	ldr	r3, [pc, #88]	@ (801e798 <shell_init+0x8c>)
 801e740:	4a16      	ldr	r2, [pc, #88]	@ (801e79c <shell_init+0x90>)
 801e742:	679a      	str	r2, [r3, #120]	@ 0x78
    shell.read = shell_read;
 801e744:	4b14      	ldr	r3, [pc, #80]	@ (801e798 <shell_init+0x8c>)
 801e746:	4a16      	ldr	r2, [pc, #88]	@ (801e7a0 <shell_init+0x94>)
 801e748:	675a      	str	r2, [r3, #116]	@ 0x74
    shell.lock = shell_lock;
 801e74a:	4b13      	ldr	r3, [pc, #76]	@ (801e798 <shell_init+0x8c>)
 801e74c:	4a15      	ldr	r2, [pc, #84]	@ (801e7a4 <shell_init+0x98>)
 801e74e:	67da      	str	r2, [r3, #124]	@ 0x7c
    shell.unlock = shell_unlock;
 801e750:	4b11      	ldr	r3, [pc, #68]	@ (801e798 <shell_init+0x8c>)
 801e752:	4a15      	ldr	r2, [pc, #84]	@ (801e7a8 <shell_init+0x9c>)
 801e754:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    
    // 初始化shell核心
    shellInit(&shell, shellBuffer, SHELL_BUFFER_SIZE);
 801e758:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801e75c:	4913      	ldr	r1, [pc, #76]	@ (801e7ac <shell_init+0xa0>)
 801e75e:	480e      	ldr	r0, [pc, #56]	@ (801e798 <shell_init+0x8c>)
 801e760:	f7fb fcac 	bl	801a0bc <shellInit>
    
    // 创建shell任务
    BaseType_t result = xTaskCreate(
 801e764:	4b12      	ldr	r3, [pc, #72]	@ (801e7b0 <shell_init+0xa4>)
 801e766:	9301      	str	r3, [sp, #4]
 801e768:	2303      	movs	r3, #3
 801e76a:	9300      	str	r3, [sp, #0]
 801e76c:	4b0a      	ldr	r3, [pc, #40]	@ (801e798 <shell_init+0x8c>)
 801e76e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801e772:	4910      	ldr	r1, [pc, #64]	@ (801e7b4 <shell_init+0xa8>)
 801e774:	4810      	ldr	r0, [pc, #64]	@ (801e7b8 <shell_init+0xac>)
 801e776:	f7f9 f82f 	bl	80177d8 <xTaskCreate>
 801e77a:	6078      	str	r0, [r7, #4]
        &shell,
        SHELL_TASK_PRIORITY,
        &shellTaskHandle
    );
    
    if (result != pdPASS) {
 801e77c:	687b      	ldr	r3, [r7, #4]
 801e77e:	2b01      	cmp	r3, #1
 801e780:	e002      	b.n	801e788 <shell_init+0x7c>
        return;
 801e782:	bf00      	nop
 801e784:	e000      	b.n	801e788 <shell_init+0x7c>
        return;
 801e786:	bf00      	nop
        return;
    }
}
 801e788:	3708      	adds	r7, #8
 801e78a:	46bd      	mov	sp, r7
 801e78c:	bd80      	pop	{r7, pc}
 801e78e:	bf00      	nop
 801e790:	24009580 	.word	0x24009580
 801e794:	24009584 	.word	0x24009584
 801e798:	240092fc 	.word	0x240092fc
 801e79c:	0801e4ad 	.word	0x0801e4ad
 801e7a0:	0801e5b5 	.word	0x0801e5b5
 801e7a4:	0801e5f1 	.word	0x0801e5f1
 801e7a8:	0801e61d 	.word	0x0801e61d
 801e7ac:	24009380 	.word	0x24009380
 801e7b0:	24009588 	.word	0x24009588
 801e7b4:	08022cd0 	.word	0x08022cd0
 801e7b8:	0801e6ad 	.word	0x0801e6ad

0801e7bc <shell_init_log_output>:

/**
 * @brief 初始化shell后的日志输出
 */
void shell_init_log_output(void)
{
 801e7bc:	b580      	push	{r7, lr}
 801e7be:	af00      	add	r7, sp, #0
    SHELL_LOG_SYS_INFO("Shell system initialized successfully");
 801e7c0:	4a0c      	ldr	r2, [pc, #48]	@ (801e7f4 <shell_init_log_output+0x38>)
 801e7c2:	2101      	movs	r1, #1
 801e7c4:	2000      	movs	r0, #0
 801e7c6:	f7ff fd3b 	bl	801e240 <shellLogPrint>
    SHELL_LOG_SYS_DEBUG("Shell mutex created successfully");
 801e7ca:	4a0b      	ldr	r2, [pc, #44]	@ (801e7f8 <shell_init_log_output+0x3c>)
 801e7cc:	2100      	movs	r1, #0
 801e7ce:	2000      	movs	r0, #0
 801e7d0:	f7ff fd36 	bl	801e240 <shellLogPrint>
    SHELL_LOG_SYS_DEBUG("Shell RX queue created successfully (size: %d)", SHELL_RX_QUEUE_SIZE);
 801e7d4:	2340      	movs	r3, #64	@ 0x40
 801e7d6:	4a09      	ldr	r2, [pc, #36]	@ (801e7fc <shell_init_log_output+0x40>)
 801e7d8:	2100      	movs	r1, #0
 801e7da:	2000      	movs	r0, #0
 801e7dc:	f7ff fd30 	bl	801e240 <shellLogPrint>
    SHELL_LOG_SYS_DEBUG("Shell core initialized (buffer size: %d)", SHELL_BUFFER_SIZE);
 801e7e0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801e7e4:	4a06      	ldr	r2, [pc, #24]	@ (801e800 <shell_init_log_output+0x44>)
 801e7e6:	2100      	movs	r1, #0
 801e7e8:	2000      	movs	r0, #0
 801e7ea:	f7ff fd29 	bl	801e240 <shellLogPrint>
}
 801e7ee:	bf00      	nop
 801e7f0:	bd80      	pop	{r7, pc}
 801e7f2:	bf00      	nop
 801e7f4:	08022cdc 	.word	0x08022cdc
 801e7f8:	08022d04 	.word	0x08022d04
 801e7fc:	08022d28 	.word	0x08022d28
 801e800:	08022d58 	.word	0x08022d58

0801e804 <shell_printf>:
 * 
 * @param fmt 格式字符串
 * @param ... 可变参数
 */
void shell_printf(const char *fmt, ...)
{
 801e804:	b40f      	push	{r0, r1, r2, r3}
 801e806:	b580      	push	{r7, lr}
 801e808:	b0c2      	sub	sp, #264	@ 0x108
 801e80a:	af00      	add	r7, sp, #0
    if (shellMutex != NULL) {
 801e80c:	4b15      	ldr	r3, [pc, #84]	@ (801e864 <shell_printf+0x60>)
 801e80e:	681b      	ldr	r3, [r3, #0]
 801e810:	2b00      	cmp	r3, #0
 801e812:	d01e      	beq.n	801e852 <shell_printf+0x4e>
        xSemaphoreTakeRecursive(shellMutex, portMAX_DELAY);
 801e814:	4b13      	ldr	r3, [pc, #76]	@ (801e864 <shell_printf+0x60>)
 801e816:	681b      	ldr	r3, [r3, #0]
 801e818:	f04f 31ff 	mov.w	r1, #4294967295
 801e81c:	4618      	mov	r0, r3
 801e81e:	f7f8 fa2b 	bl	8016c78 <xQueueTakeMutexRecursive>
        
        va_list args;
        va_start(args, fmt);
 801e822:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 801e826:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        // 使用日志系统替代直接的shellPrint
        char buffer[256];
        vsnprintf(buffer, sizeof(buffer), fmt, args);
 801e82a:	1d38      	adds	r0, r7, #4
 801e82c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801e830:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 801e834:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801e838:	f000 fc5c 	bl	801f0f4 <vsniprintf>
        SHELL_LOG_USER_INFO("%s", buffer);
 801e83c:	1d3b      	adds	r3, r7, #4
 801e83e:	4a0a      	ldr	r2, [pc, #40]	@ (801e868 <shell_printf+0x64>)
 801e840:	2101      	movs	r1, #1
 801e842:	2006      	movs	r0, #6
 801e844:	f7ff fcfc 	bl	801e240 <shellLogPrint>
        va_end(args);
        
        xSemaphoreGiveRecursive(shellMutex);
 801e848:	4b06      	ldr	r3, [pc, #24]	@ (801e864 <shell_printf+0x60>)
 801e84a:	681b      	ldr	r3, [r3, #0]
 801e84c:	4618      	mov	r0, r3
 801e84e:	f7f8 f9de 	bl	8016c0e <xQueueGiveMutexRecursive>
    }
}
 801e852:	bf00      	nop
 801e854:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 801e858:	46bd      	mov	sp, r7
 801e85a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801e85e:	b004      	add	sp, #16
 801e860:	4770      	bx	lr
 801e862:	bf00      	nop
 801e864:	24009580 	.word	0x24009580
 801e868:	08022d84 	.word	0x08022d84

0801e86c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801e86c:	b580      	push	{r7, lr}
 801e86e:	b082      	sub	sp, #8
 801e870:	af00      	add	r7, sp, #0
 801e872:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801e874:	687b      	ldr	r3, [r7, #4]
 801e876:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 801e87a:	687b      	ldr	r3, [r7, #4]
 801e87c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 801e880:	4619      	mov	r1, r3
 801e882:	4610      	mov	r0, r2
 801e884:	f7f6 fc2f 	bl	80150e6 <USBD_LL_SetupStage>
}
 801e888:	bf00      	nop
 801e88a:	3708      	adds	r7, #8
 801e88c:	46bd      	mov	sp, r7
 801e88e:	bd80      	pop	{r7, pc}

0801e890 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801e890:	b580      	push	{r7, lr}
 801e892:	b082      	sub	sp, #8
 801e894:	af00      	add	r7, sp, #0
 801e896:	6078      	str	r0, [r7, #4]
 801e898:	460b      	mov	r3, r1
 801e89a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801e89c:	687b      	ldr	r3, [r7, #4]
 801e89e:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 801e8a2:	78fa      	ldrb	r2, [r7, #3]
 801e8a4:	6879      	ldr	r1, [r7, #4]
 801e8a6:	4613      	mov	r3, r2
 801e8a8:	00db      	lsls	r3, r3, #3
 801e8aa:	4413      	add	r3, r2
 801e8ac:	009b      	lsls	r3, r3, #2
 801e8ae:	440b      	add	r3, r1
 801e8b0:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 801e8b4:	681a      	ldr	r2, [r3, #0]
 801e8b6:	78fb      	ldrb	r3, [r7, #3]
 801e8b8:	4619      	mov	r1, r3
 801e8ba:	f7f6 fc69 	bl	8015190 <USBD_LL_DataOutStage>
}
 801e8be:	bf00      	nop
 801e8c0:	3708      	adds	r7, #8
 801e8c2:	46bd      	mov	sp, r7
 801e8c4:	bd80      	pop	{r7, pc}

0801e8c6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801e8c6:	b580      	push	{r7, lr}
 801e8c8:	b082      	sub	sp, #8
 801e8ca:	af00      	add	r7, sp, #0
 801e8cc:	6078      	str	r0, [r7, #4]
 801e8ce:	460b      	mov	r3, r1
 801e8d0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801e8d2:	687b      	ldr	r3, [r7, #4]
 801e8d4:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 801e8d8:	78fa      	ldrb	r2, [r7, #3]
 801e8da:	6879      	ldr	r1, [r7, #4]
 801e8dc:	4613      	mov	r3, r2
 801e8de:	00db      	lsls	r3, r3, #3
 801e8e0:	4413      	add	r3, r2
 801e8e2:	009b      	lsls	r3, r3, #2
 801e8e4:	440b      	add	r3, r1
 801e8e6:	3320      	adds	r3, #32
 801e8e8:	681a      	ldr	r2, [r3, #0]
 801e8ea:	78fb      	ldrb	r3, [r7, #3]
 801e8ec:	4619      	mov	r1, r3
 801e8ee:	f7f6 fd02 	bl	80152f6 <USBD_LL_DataInStage>
}
 801e8f2:	bf00      	nop
 801e8f4:	3708      	adds	r7, #8
 801e8f6:	46bd      	mov	sp, r7
 801e8f8:	bd80      	pop	{r7, pc}

0801e8fa <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801e8fa:	b580      	push	{r7, lr}
 801e8fc:	b082      	sub	sp, #8
 801e8fe:	af00      	add	r7, sp, #0
 801e900:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801e902:	687b      	ldr	r3, [r7, #4]
 801e904:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801e908:	4618      	mov	r0, r3
 801e90a:	f7f6 fe3c 	bl	8015586 <USBD_LL_SOF>
}
 801e90e:	bf00      	nop
 801e910:	3708      	adds	r7, #8
 801e912:	46bd      	mov	sp, r7
 801e914:	bd80      	pop	{r7, pc}

0801e916 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801e916:	b580      	push	{r7, lr}
 801e918:	b084      	sub	sp, #16
 801e91a:	af00      	add	r7, sp, #0
 801e91c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801e91e:	2301      	movs	r3, #1
 801e920:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801e922:	687b      	ldr	r3, [r7, #4]
 801e924:	79db      	ldrb	r3, [r3, #7]
 801e926:	2b00      	cmp	r3, #0
 801e928:	d102      	bne.n	801e930 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801e92a:	2300      	movs	r3, #0
 801e92c:	73fb      	strb	r3, [r7, #15]
 801e92e:	e008      	b.n	801e942 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 801e930:	687b      	ldr	r3, [r7, #4]
 801e932:	79db      	ldrb	r3, [r3, #7]
 801e934:	2b02      	cmp	r3, #2
 801e936:	d102      	bne.n	801e93e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 801e938:	2301      	movs	r3, #1
 801e93a:	73fb      	strb	r3, [r7, #15]
 801e93c:	e001      	b.n	801e942 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 801e93e:	f7e3 fd2d 	bl	800239c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801e942:	687b      	ldr	r3, [r7, #4]
 801e944:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801e948:	7bfa      	ldrb	r2, [r7, #15]
 801e94a:	4611      	mov	r1, r2
 801e94c:	4618      	mov	r0, r3
 801e94e:	f7f6 fdd6 	bl	80154fe <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801e952:	687b      	ldr	r3, [r7, #4]
 801e954:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801e958:	4618      	mov	r0, r3
 801e95a:	f7f6 fd7e 	bl	801545a <USBD_LL_Reset>
}
 801e95e:	bf00      	nop
 801e960:	3710      	adds	r7, #16
 801e962:	46bd      	mov	sp, r7
 801e964:	bd80      	pop	{r7, pc}
	...

0801e968 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801e968:	b580      	push	{r7, lr}
 801e96a:	b082      	sub	sp, #8
 801e96c:	af00      	add	r7, sp, #0
 801e96e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801e970:	687b      	ldr	r3, [r7, #4]
 801e972:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801e976:	4618      	mov	r0, r3
 801e978:	f7f6 fdd1 	bl	801551e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801e97c:	687b      	ldr	r3, [r7, #4]
 801e97e:	681b      	ldr	r3, [r3, #0]
 801e980:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 801e984:	681b      	ldr	r3, [r3, #0]
 801e986:	687a      	ldr	r2, [r7, #4]
 801e988:	6812      	ldr	r2, [r2, #0]
 801e98a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 801e98e:	f043 0301 	orr.w	r3, r3, #1
 801e992:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801e994:	687b      	ldr	r3, [r7, #4]
 801e996:	7adb      	ldrb	r3, [r3, #11]
 801e998:	2b00      	cmp	r3, #0
 801e99a:	d005      	beq.n	801e9a8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801e99c:	4b04      	ldr	r3, [pc, #16]	@ (801e9b0 <HAL_PCD_SuspendCallback+0x48>)
 801e99e:	691b      	ldr	r3, [r3, #16]
 801e9a0:	4a03      	ldr	r2, [pc, #12]	@ (801e9b0 <HAL_PCD_SuspendCallback+0x48>)
 801e9a2:	f043 0306 	orr.w	r3, r3, #6
 801e9a6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 801e9a8:	bf00      	nop
 801e9aa:	3708      	adds	r7, #8
 801e9ac:	46bd      	mov	sp, r7
 801e9ae:	bd80      	pop	{r7, pc}
 801e9b0:	e000ed00 	.word	0xe000ed00

0801e9b4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801e9b4:	b580      	push	{r7, lr}
 801e9b6:	b082      	sub	sp, #8
 801e9b8:	af00      	add	r7, sp, #0
 801e9ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801e9bc:	687b      	ldr	r3, [r7, #4]
 801e9be:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801e9c2:	4618      	mov	r0, r3
 801e9c4:	f7f6 fdc7 	bl	8015556 <USBD_LL_Resume>
}
 801e9c8:	bf00      	nop
 801e9ca:	3708      	adds	r7, #8
 801e9cc:	46bd      	mov	sp, r7
 801e9ce:	bd80      	pop	{r7, pc}

0801e9d0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801e9d0:	b580      	push	{r7, lr}
 801e9d2:	b082      	sub	sp, #8
 801e9d4:	af00      	add	r7, sp, #0
 801e9d6:	6078      	str	r0, [r7, #4]
 801e9d8:	460b      	mov	r3, r1
 801e9da:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801e9dc:	687b      	ldr	r3, [r7, #4]
 801e9de:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801e9e2:	78fa      	ldrb	r2, [r7, #3]
 801e9e4:	4611      	mov	r1, r2
 801e9e6:	4618      	mov	r0, r3
 801e9e8:	f7f6 fe1f 	bl	801562a <USBD_LL_IsoOUTIncomplete>
}
 801e9ec:	bf00      	nop
 801e9ee:	3708      	adds	r7, #8
 801e9f0:	46bd      	mov	sp, r7
 801e9f2:	bd80      	pop	{r7, pc}

0801e9f4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801e9f4:	b580      	push	{r7, lr}
 801e9f6:	b082      	sub	sp, #8
 801e9f8:	af00      	add	r7, sp, #0
 801e9fa:	6078      	str	r0, [r7, #4]
 801e9fc:	460b      	mov	r3, r1
 801e9fe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801ea00:	687b      	ldr	r3, [r7, #4]
 801ea02:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801ea06:	78fa      	ldrb	r2, [r7, #3]
 801ea08:	4611      	mov	r1, r2
 801ea0a:	4618      	mov	r0, r3
 801ea0c:	f7f6 fddb 	bl	80155c6 <USBD_LL_IsoINIncomplete>
}
 801ea10:	bf00      	nop
 801ea12:	3708      	adds	r7, #8
 801ea14:	46bd      	mov	sp, r7
 801ea16:	bd80      	pop	{r7, pc}

0801ea18 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801ea18:	b580      	push	{r7, lr}
 801ea1a:	b082      	sub	sp, #8
 801ea1c:	af00      	add	r7, sp, #0
 801ea1e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 801ea20:	687b      	ldr	r3, [r7, #4]
 801ea22:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801ea26:	4618      	mov	r0, r3
 801ea28:	f7f6 fe31 	bl	801568e <USBD_LL_DevConnected>
}
 801ea2c:	bf00      	nop
 801ea2e:	3708      	adds	r7, #8
 801ea30:	46bd      	mov	sp, r7
 801ea32:	bd80      	pop	{r7, pc}

0801ea34 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801ea34:	b580      	push	{r7, lr}
 801ea36:	b082      	sub	sp, #8
 801ea38:	af00      	add	r7, sp, #0
 801ea3a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 801ea3c:	687b      	ldr	r3, [r7, #4]
 801ea3e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801ea42:	4618      	mov	r0, r3
 801ea44:	f7f6 fe2e 	bl	80156a4 <USBD_LL_DevDisconnected>
}
 801ea48:	bf00      	nop
 801ea4a:	3708      	adds	r7, #8
 801ea4c:	46bd      	mov	sp, r7
 801ea4e:	bd80      	pop	{r7, pc}

0801ea50 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801ea50:	b580      	push	{r7, lr}
 801ea52:	b084      	sub	sp, #16
 801ea54:	af00      	add	r7, sp, #0
 801ea56:	6078      	str	r0, [r7, #4]
 801ea58:	4608      	mov	r0, r1
 801ea5a:	4611      	mov	r1, r2
 801ea5c:	461a      	mov	r2, r3
 801ea5e:	4603      	mov	r3, r0
 801ea60:	70fb      	strb	r3, [r7, #3]
 801ea62:	460b      	mov	r3, r1
 801ea64:	70bb      	strb	r3, [r7, #2]
 801ea66:	4613      	mov	r3, r2
 801ea68:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801ea6a:	2300      	movs	r3, #0
 801ea6c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801ea6e:	2300      	movs	r3, #0
 801ea70:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801ea72:	687b      	ldr	r3, [r7, #4]
 801ea74:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801ea78:	78bb      	ldrb	r3, [r7, #2]
 801ea7a:	883a      	ldrh	r2, [r7, #0]
 801ea7c:	78f9      	ldrb	r1, [r7, #3]
 801ea7e:	f7e9 fde1 	bl	8008644 <HAL_PCD_EP_Open>
 801ea82:	4603      	mov	r3, r0
 801ea84:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801ea86:	7bfb      	ldrb	r3, [r7, #15]
 801ea88:	4618      	mov	r0, r3
 801ea8a:	f000 f8d3 	bl	801ec34 <USBD_Get_USB_Status>
 801ea8e:	4603      	mov	r3, r0
 801ea90:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801ea92:	7bbb      	ldrb	r3, [r7, #14]
}
 801ea94:	4618      	mov	r0, r3
 801ea96:	3710      	adds	r7, #16
 801ea98:	46bd      	mov	sp, r7
 801ea9a:	bd80      	pop	{r7, pc}

0801ea9c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801ea9c:	b580      	push	{r7, lr}
 801ea9e:	b084      	sub	sp, #16
 801eaa0:	af00      	add	r7, sp, #0
 801eaa2:	6078      	str	r0, [r7, #4]
 801eaa4:	460b      	mov	r3, r1
 801eaa6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801eaa8:	2300      	movs	r3, #0
 801eaaa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801eaac:	2300      	movs	r3, #0
 801eaae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801eab0:	687b      	ldr	r3, [r7, #4]
 801eab2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801eab6:	78fa      	ldrb	r2, [r7, #3]
 801eab8:	4611      	mov	r1, r2
 801eaba:	4618      	mov	r0, r3
 801eabc:	f7e9 fea1 	bl	8008802 <HAL_PCD_EP_SetStall>
 801eac0:	4603      	mov	r3, r0
 801eac2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801eac4:	7bfb      	ldrb	r3, [r7, #15]
 801eac6:	4618      	mov	r0, r3
 801eac8:	f000 f8b4 	bl	801ec34 <USBD_Get_USB_Status>
 801eacc:	4603      	mov	r3, r0
 801eace:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801ead0:	7bbb      	ldrb	r3, [r7, #14]
}
 801ead2:	4618      	mov	r0, r3
 801ead4:	3710      	adds	r7, #16
 801ead6:	46bd      	mov	sp, r7
 801ead8:	bd80      	pop	{r7, pc}

0801eada <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801eada:	b580      	push	{r7, lr}
 801eadc:	b084      	sub	sp, #16
 801eade:	af00      	add	r7, sp, #0
 801eae0:	6078      	str	r0, [r7, #4]
 801eae2:	460b      	mov	r3, r1
 801eae4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801eae6:	2300      	movs	r3, #0
 801eae8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801eaea:	2300      	movs	r3, #0
 801eaec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801eaee:	687b      	ldr	r3, [r7, #4]
 801eaf0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801eaf4:	78fa      	ldrb	r2, [r7, #3]
 801eaf6:	4611      	mov	r1, r2
 801eaf8:	4618      	mov	r0, r3
 801eafa:	f7e9 fee5 	bl	80088c8 <HAL_PCD_EP_ClrStall>
 801eafe:	4603      	mov	r3, r0
 801eb00:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801eb02:	7bfb      	ldrb	r3, [r7, #15]
 801eb04:	4618      	mov	r0, r3
 801eb06:	f000 f895 	bl	801ec34 <USBD_Get_USB_Status>
 801eb0a:	4603      	mov	r3, r0
 801eb0c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801eb0e:	7bbb      	ldrb	r3, [r7, #14]
}
 801eb10:	4618      	mov	r0, r3
 801eb12:	3710      	adds	r7, #16
 801eb14:	46bd      	mov	sp, r7
 801eb16:	bd80      	pop	{r7, pc}

0801eb18 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801eb18:	b480      	push	{r7}
 801eb1a:	b085      	sub	sp, #20
 801eb1c:	af00      	add	r7, sp, #0
 801eb1e:	6078      	str	r0, [r7, #4]
 801eb20:	460b      	mov	r3, r1
 801eb22:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801eb24:	687b      	ldr	r3, [r7, #4]
 801eb26:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801eb2a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801eb2c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801eb30:	2b00      	cmp	r3, #0
 801eb32:	da0b      	bge.n	801eb4c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801eb34:	78fb      	ldrb	r3, [r7, #3]
 801eb36:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801eb3a:	68f9      	ldr	r1, [r7, #12]
 801eb3c:	4613      	mov	r3, r2
 801eb3e:	00db      	lsls	r3, r3, #3
 801eb40:	4413      	add	r3, r2
 801eb42:	009b      	lsls	r3, r3, #2
 801eb44:	440b      	add	r3, r1
 801eb46:	3316      	adds	r3, #22
 801eb48:	781b      	ldrb	r3, [r3, #0]
 801eb4a:	e00b      	b.n	801eb64 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801eb4c:	78fb      	ldrb	r3, [r7, #3]
 801eb4e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801eb52:	68f9      	ldr	r1, [r7, #12]
 801eb54:	4613      	mov	r3, r2
 801eb56:	00db      	lsls	r3, r3, #3
 801eb58:	4413      	add	r3, r2
 801eb5a:	009b      	lsls	r3, r3, #2
 801eb5c:	440b      	add	r3, r1
 801eb5e:	f203 2356 	addw	r3, r3, #598	@ 0x256
 801eb62:	781b      	ldrb	r3, [r3, #0]
  }
}
 801eb64:	4618      	mov	r0, r3
 801eb66:	3714      	adds	r7, #20
 801eb68:	46bd      	mov	sp, r7
 801eb6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801eb6e:	4770      	bx	lr

0801eb70 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801eb70:	b580      	push	{r7, lr}
 801eb72:	b084      	sub	sp, #16
 801eb74:	af00      	add	r7, sp, #0
 801eb76:	6078      	str	r0, [r7, #4]
 801eb78:	460b      	mov	r3, r1
 801eb7a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801eb7c:	2300      	movs	r3, #0
 801eb7e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801eb80:	2300      	movs	r3, #0
 801eb82:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801eb84:	687b      	ldr	r3, [r7, #4]
 801eb86:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801eb8a:	78fa      	ldrb	r2, [r7, #3]
 801eb8c:	4611      	mov	r1, r2
 801eb8e:	4618      	mov	r0, r3
 801eb90:	f7e9 fd34 	bl	80085fc <HAL_PCD_SetAddress>
 801eb94:	4603      	mov	r3, r0
 801eb96:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801eb98:	7bfb      	ldrb	r3, [r7, #15]
 801eb9a:	4618      	mov	r0, r3
 801eb9c:	f000 f84a 	bl	801ec34 <USBD_Get_USB_Status>
 801eba0:	4603      	mov	r3, r0
 801eba2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801eba4:	7bbb      	ldrb	r3, [r7, #14]
}
 801eba6:	4618      	mov	r0, r3
 801eba8:	3710      	adds	r7, #16
 801ebaa:	46bd      	mov	sp, r7
 801ebac:	bd80      	pop	{r7, pc}

0801ebae <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801ebae:	b580      	push	{r7, lr}
 801ebb0:	b086      	sub	sp, #24
 801ebb2:	af00      	add	r7, sp, #0
 801ebb4:	60f8      	str	r0, [r7, #12]
 801ebb6:	607a      	str	r2, [r7, #4]
 801ebb8:	603b      	str	r3, [r7, #0]
 801ebba:	460b      	mov	r3, r1
 801ebbc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801ebbe:	2300      	movs	r3, #0
 801ebc0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801ebc2:	2300      	movs	r3, #0
 801ebc4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801ebc6:	68fb      	ldr	r3, [r7, #12]
 801ebc8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801ebcc:	7af9      	ldrb	r1, [r7, #11]
 801ebce:	683b      	ldr	r3, [r7, #0]
 801ebd0:	687a      	ldr	r2, [r7, #4]
 801ebd2:	f7e9 fddc 	bl	800878e <HAL_PCD_EP_Transmit>
 801ebd6:	4603      	mov	r3, r0
 801ebd8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801ebda:	7dfb      	ldrb	r3, [r7, #23]
 801ebdc:	4618      	mov	r0, r3
 801ebde:	f000 f829 	bl	801ec34 <USBD_Get_USB_Status>
 801ebe2:	4603      	mov	r3, r0
 801ebe4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801ebe6:	7dbb      	ldrb	r3, [r7, #22]
}
 801ebe8:	4618      	mov	r0, r3
 801ebea:	3718      	adds	r7, #24
 801ebec:	46bd      	mov	sp, r7
 801ebee:	bd80      	pop	{r7, pc}

0801ebf0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801ebf0:	b580      	push	{r7, lr}
 801ebf2:	b086      	sub	sp, #24
 801ebf4:	af00      	add	r7, sp, #0
 801ebf6:	60f8      	str	r0, [r7, #12]
 801ebf8:	607a      	str	r2, [r7, #4]
 801ebfa:	603b      	str	r3, [r7, #0]
 801ebfc:	460b      	mov	r3, r1
 801ebfe:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801ec00:	2300      	movs	r3, #0
 801ec02:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801ec04:	2300      	movs	r3, #0
 801ec06:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801ec08:	68fb      	ldr	r3, [r7, #12]
 801ec0a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801ec0e:	7af9      	ldrb	r1, [r7, #11]
 801ec10:	683b      	ldr	r3, [r7, #0]
 801ec12:	687a      	ldr	r2, [r7, #4]
 801ec14:	f7e9 fd80 	bl	8008718 <HAL_PCD_EP_Receive>
 801ec18:	4603      	mov	r3, r0
 801ec1a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801ec1c:	7dfb      	ldrb	r3, [r7, #23]
 801ec1e:	4618      	mov	r0, r3
 801ec20:	f000 f808 	bl	801ec34 <USBD_Get_USB_Status>
 801ec24:	4603      	mov	r3, r0
 801ec26:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801ec28:	7dbb      	ldrb	r3, [r7, #22]
}
 801ec2a:	4618      	mov	r0, r3
 801ec2c:	3718      	adds	r7, #24
 801ec2e:	46bd      	mov	sp, r7
 801ec30:	bd80      	pop	{r7, pc}
	...

0801ec34 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801ec34:	b480      	push	{r7}
 801ec36:	b085      	sub	sp, #20
 801ec38:	af00      	add	r7, sp, #0
 801ec3a:	4603      	mov	r3, r0
 801ec3c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801ec3e:	2300      	movs	r3, #0
 801ec40:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801ec42:	79fb      	ldrb	r3, [r7, #7]
 801ec44:	2b03      	cmp	r3, #3
 801ec46:	d817      	bhi.n	801ec78 <USBD_Get_USB_Status+0x44>
 801ec48:	a201      	add	r2, pc, #4	@ (adr r2, 801ec50 <USBD_Get_USB_Status+0x1c>)
 801ec4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ec4e:	bf00      	nop
 801ec50:	0801ec61 	.word	0x0801ec61
 801ec54:	0801ec67 	.word	0x0801ec67
 801ec58:	0801ec6d 	.word	0x0801ec6d
 801ec5c:	0801ec73 	.word	0x0801ec73
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801ec60:	2300      	movs	r3, #0
 801ec62:	73fb      	strb	r3, [r7, #15]
    break;
 801ec64:	e00b      	b.n	801ec7e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801ec66:	2303      	movs	r3, #3
 801ec68:	73fb      	strb	r3, [r7, #15]
    break;
 801ec6a:	e008      	b.n	801ec7e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801ec6c:	2301      	movs	r3, #1
 801ec6e:	73fb      	strb	r3, [r7, #15]
    break;
 801ec70:	e005      	b.n	801ec7e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801ec72:	2303      	movs	r3, #3
 801ec74:	73fb      	strb	r3, [r7, #15]
    break;
 801ec76:	e002      	b.n	801ec7e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801ec78:	2303      	movs	r3, #3
 801ec7a:	73fb      	strb	r3, [r7, #15]
    break;
 801ec7c:	bf00      	nop
  }
  return usb_status;
 801ec7e:	7bfb      	ldrb	r3, [r7, #15]
}
 801ec80:	4618      	mov	r0, r3
 801ec82:	3714      	adds	r7, #20
 801ec84:	46bd      	mov	sp, r7
 801ec86:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ec8a:	4770      	bx	lr

0801ec8c <atoi>:
 801ec8c:	220a      	movs	r2, #10
 801ec8e:	2100      	movs	r1, #0
 801ec90:	f000 b928 	b.w	801eee4 <strtol>

0801ec94 <sbrk_aligned>:
 801ec94:	b570      	push	{r4, r5, r6, lr}
 801ec96:	4e0f      	ldr	r6, [pc, #60]	@ (801ecd4 <sbrk_aligned+0x40>)
 801ec98:	460c      	mov	r4, r1
 801ec9a:	6831      	ldr	r1, [r6, #0]
 801ec9c:	4605      	mov	r5, r0
 801ec9e:	b911      	cbnz	r1, 801eca6 <sbrk_aligned+0x12>
 801eca0:	f000 faae 	bl	801f200 <_sbrk_r>
 801eca4:	6030      	str	r0, [r6, #0]
 801eca6:	4621      	mov	r1, r4
 801eca8:	4628      	mov	r0, r5
 801ecaa:	f000 faa9 	bl	801f200 <_sbrk_r>
 801ecae:	1c43      	adds	r3, r0, #1
 801ecb0:	d103      	bne.n	801ecba <sbrk_aligned+0x26>
 801ecb2:	f04f 34ff 	mov.w	r4, #4294967295
 801ecb6:	4620      	mov	r0, r4
 801ecb8:	bd70      	pop	{r4, r5, r6, pc}
 801ecba:	1cc4      	adds	r4, r0, #3
 801ecbc:	f024 0403 	bic.w	r4, r4, #3
 801ecc0:	42a0      	cmp	r0, r4
 801ecc2:	d0f8      	beq.n	801ecb6 <sbrk_aligned+0x22>
 801ecc4:	1a21      	subs	r1, r4, r0
 801ecc6:	4628      	mov	r0, r5
 801ecc8:	f000 fa9a 	bl	801f200 <_sbrk_r>
 801eccc:	3001      	adds	r0, #1
 801ecce:	d1f2      	bne.n	801ecb6 <sbrk_aligned+0x22>
 801ecd0:	e7ef      	b.n	801ecb2 <sbrk_aligned+0x1e>
 801ecd2:	bf00      	nop
 801ecd4:	24009a74 	.word	0x24009a74

0801ecd8 <_malloc_r>:
 801ecd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ecdc:	1ccd      	adds	r5, r1, #3
 801ecde:	f025 0503 	bic.w	r5, r5, #3
 801ece2:	3508      	adds	r5, #8
 801ece4:	2d0c      	cmp	r5, #12
 801ece6:	bf38      	it	cc
 801ece8:	250c      	movcc	r5, #12
 801ecea:	2d00      	cmp	r5, #0
 801ecec:	4606      	mov	r6, r0
 801ecee:	db01      	blt.n	801ecf4 <_malloc_r+0x1c>
 801ecf0:	42a9      	cmp	r1, r5
 801ecf2:	d904      	bls.n	801ecfe <_malloc_r+0x26>
 801ecf4:	230c      	movs	r3, #12
 801ecf6:	6033      	str	r3, [r6, #0]
 801ecf8:	2000      	movs	r0, #0
 801ecfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ecfe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801edd4 <_malloc_r+0xfc>
 801ed02:	f000 f869 	bl	801edd8 <__malloc_lock>
 801ed06:	f8d8 3000 	ldr.w	r3, [r8]
 801ed0a:	461c      	mov	r4, r3
 801ed0c:	bb44      	cbnz	r4, 801ed60 <_malloc_r+0x88>
 801ed0e:	4629      	mov	r1, r5
 801ed10:	4630      	mov	r0, r6
 801ed12:	f7ff ffbf 	bl	801ec94 <sbrk_aligned>
 801ed16:	1c43      	adds	r3, r0, #1
 801ed18:	4604      	mov	r4, r0
 801ed1a:	d158      	bne.n	801edce <_malloc_r+0xf6>
 801ed1c:	f8d8 4000 	ldr.w	r4, [r8]
 801ed20:	4627      	mov	r7, r4
 801ed22:	2f00      	cmp	r7, #0
 801ed24:	d143      	bne.n	801edae <_malloc_r+0xd6>
 801ed26:	2c00      	cmp	r4, #0
 801ed28:	d04b      	beq.n	801edc2 <_malloc_r+0xea>
 801ed2a:	6823      	ldr	r3, [r4, #0]
 801ed2c:	4639      	mov	r1, r7
 801ed2e:	4630      	mov	r0, r6
 801ed30:	eb04 0903 	add.w	r9, r4, r3
 801ed34:	f000 fa64 	bl	801f200 <_sbrk_r>
 801ed38:	4581      	cmp	r9, r0
 801ed3a:	d142      	bne.n	801edc2 <_malloc_r+0xea>
 801ed3c:	6821      	ldr	r1, [r4, #0]
 801ed3e:	1a6d      	subs	r5, r5, r1
 801ed40:	4629      	mov	r1, r5
 801ed42:	4630      	mov	r0, r6
 801ed44:	f7ff ffa6 	bl	801ec94 <sbrk_aligned>
 801ed48:	3001      	adds	r0, #1
 801ed4a:	d03a      	beq.n	801edc2 <_malloc_r+0xea>
 801ed4c:	6823      	ldr	r3, [r4, #0]
 801ed4e:	442b      	add	r3, r5
 801ed50:	6023      	str	r3, [r4, #0]
 801ed52:	f8d8 3000 	ldr.w	r3, [r8]
 801ed56:	685a      	ldr	r2, [r3, #4]
 801ed58:	bb62      	cbnz	r2, 801edb4 <_malloc_r+0xdc>
 801ed5a:	f8c8 7000 	str.w	r7, [r8]
 801ed5e:	e00f      	b.n	801ed80 <_malloc_r+0xa8>
 801ed60:	6822      	ldr	r2, [r4, #0]
 801ed62:	1b52      	subs	r2, r2, r5
 801ed64:	d420      	bmi.n	801eda8 <_malloc_r+0xd0>
 801ed66:	2a0b      	cmp	r2, #11
 801ed68:	d917      	bls.n	801ed9a <_malloc_r+0xc2>
 801ed6a:	1961      	adds	r1, r4, r5
 801ed6c:	42a3      	cmp	r3, r4
 801ed6e:	6025      	str	r5, [r4, #0]
 801ed70:	bf18      	it	ne
 801ed72:	6059      	strne	r1, [r3, #4]
 801ed74:	6863      	ldr	r3, [r4, #4]
 801ed76:	bf08      	it	eq
 801ed78:	f8c8 1000 	streq.w	r1, [r8]
 801ed7c:	5162      	str	r2, [r4, r5]
 801ed7e:	604b      	str	r3, [r1, #4]
 801ed80:	4630      	mov	r0, r6
 801ed82:	f000 f82f 	bl	801ede4 <__malloc_unlock>
 801ed86:	f104 000b 	add.w	r0, r4, #11
 801ed8a:	1d23      	adds	r3, r4, #4
 801ed8c:	f020 0007 	bic.w	r0, r0, #7
 801ed90:	1ac2      	subs	r2, r0, r3
 801ed92:	bf1c      	itt	ne
 801ed94:	1a1b      	subne	r3, r3, r0
 801ed96:	50a3      	strne	r3, [r4, r2]
 801ed98:	e7af      	b.n	801ecfa <_malloc_r+0x22>
 801ed9a:	6862      	ldr	r2, [r4, #4]
 801ed9c:	42a3      	cmp	r3, r4
 801ed9e:	bf0c      	ite	eq
 801eda0:	f8c8 2000 	streq.w	r2, [r8]
 801eda4:	605a      	strne	r2, [r3, #4]
 801eda6:	e7eb      	b.n	801ed80 <_malloc_r+0xa8>
 801eda8:	4623      	mov	r3, r4
 801edaa:	6864      	ldr	r4, [r4, #4]
 801edac:	e7ae      	b.n	801ed0c <_malloc_r+0x34>
 801edae:	463c      	mov	r4, r7
 801edb0:	687f      	ldr	r7, [r7, #4]
 801edb2:	e7b6      	b.n	801ed22 <_malloc_r+0x4a>
 801edb4:	461a      	mov	r2, r3
 801edb6:	685b      	ldr	r3, [r3, #4]
 801edb8:	42a3      	cmp	r3, r4
 801edba:	d1fb      	bne.n	801edb4 <_malloc_r+0xdc>
 801edbc:	2300      	movs	r3, #0
 801edbe:	6053      	str	r3, [r2, #4]
 801edc0:	e7de      	b.n	801ed80 <_malloc_r+0xa8>
 801edc2:	230c      	movs	r3, #12
 801edc4:	6033      	str	r3, [r6, #0]
 801edc6:	4630      	mov	r0, r6
 801edc8:	f000 f80c 	bl	801ede4 <__malloc_unlock>
 801edcc:	e794      	b.n	801ecf8 <_malloc_r+0x20>
 801edce:	6005      	str	r5, [r0, #0]
 801edd0:	e7d6      	b.n	801ed80 <_malloc_r+0xa8>
 801edd2:	bf00      	nop
 801edd4:	24009a78 	.word	0x24009a78

0801edd8 <__malloc_lock>:
 801edd8:	4801      	ldr	r0, [pc, #4]	@ (801ede0 <__malloc_lock+0x8>)
 801edda:	f7e4 bc14 	b.w	8003606 <__retarget_lock_acquire_recursive>
 801edde:	bf00      	nop
 801ede0:	240004a4 	.word	0x240004a4

0801ede4 <__malloc_unlock>:
 801ede4:	4801      	ldr	r0, [pc, #4]	@ (801edec <__malloc_unlock+0x8>)
 801ede6:	f7e4 bc23 	b.w	8003630 <__retarget_lock_release_recursive>
 801edea:	bf00      	nop
 801edec:	240004a4 	.word	0x240004a4

0801edf0 <_strtol_l.isra.0>:
 801edf0:	2b24      	cmp	r3, #36	@ 0x24
 801edf2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801edf6:	4686      	mov	lr, r0
 801edf8:	4690      	mov	r8, r2
 801edfa:	d801      	bhi.n	801ee00 <_strtol_l.isra.0+0x10>
 801edfc:	2b01      	cmp	r3, #1
 801edfe:	d106      	bne.n	801ee0e <_strtol_l.isra.0+0x1e>
 801ee00:	f000 fa0e 	bl	801f220 <__errno>
 801ee04:	2316      	movs	r3, #22
 801ee06:	6003      	str	r3, [r0, #0]
 801ee08:	2000      	movs	r0, #0
 801ee0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ee0e:	4834      	ldr	r0, [pc, #208]	@ (801eee0 <_strtol_l.isra.0+0xf0>)
 801ee10:	460d      	mov	r5, r1
 801ee12:	462a      	mov	r2, r5
 801ee14:	f815 4b01 	ldrb.w	r4, [r5], #1
 801ee18:	5d06      	ldrb	r6, [r0, r4]
 801ee1a:	f016 0608 	ands.w	r6, r6, #8
 801ee1e:	d1f8      	bne.n	801ee12 <_strtol_l.isra.0+0x22>
 801ee20:	2c2d      	cmp	r4, #45	@ 0x2d
 801ee22:	d110      	bne.n	801ee46 <_strtol_l.isra.0+0x56>
 801ee24:	782c      	ldrb	r4, [r5, #0]
 801ee26:	2601      	movs	r6, #1
 801ee28:	1c95      	adds	r5, r2, #2
 801ee2a:	f033 0210 	bics.w	r2, r3, #16
 801ee2e:	d115      	bne.n	801ee5c <_strtol_l.isra.0+0x6c>
 801ee30:	2c30      	cmp	r4, #48	@ 0x30
 801ee32:	d10d      	bne.n	801ee50 <_strtol_l.isra.0+0x60>
 801ee34:	782a      	ldrb	r2, [r5, #0]
 801ee36:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801ee3a:	2a58      	cmp	r2, #88	@ 0x58
 801ee3c:	d108      	bne.n	801ee50 <_strtol_l.isra.0+0x60>
 801ee3e:	786c      	ldrb	r4, [r5, #1]
 801ee40:	3502      	adds	r5, #2
 801ee42:	2310      	movs	r3, #16
 801ee44:	e00a      	b.n	801ee5c <_strtol_l.isra.0+0x6c>
 801ee46:	2c2b      	cmp	r4, #43	@ 0x2b
 801ee48:	bf04      	itt	eq
 801ee4a:	782c      	ldrbeq	r4, [r5, #0]
 801ee4c:	1c95      	addeq	r5, r2, #2
 801ee4e:	e7ec      	b.n	801ee2a <_strtol_l.isra.0+0x3a>
 801ee50:	2b00      	cmp	r3, #0
 801ee52:	d1f6      	bne.n	801ee42 <_strtol_l.isra.0+0x52>
 801ee54:	2c30      	cmp	r4, #48	@ 0x30
 801ee56:	bf14      	ite	ne
 801ee58:	230a      	movne	r3, #10
 801ee5a:	2308      	moveq	r3, #8
 801ee5c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 801ee60:	f10c 3cff 	add.w	ip, ip, #4294967295
 801ee64:	2200      	movs	r2, #0
 801ee66:	fbbc f9f3 	udiv	r9, ip, r3
 801ee6a:	4610      	mov	r0, r2
 801ee6c:	fb03 ca19 	mls	sl, r3, r9, ip
 801ee70:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 801ee74:	2f09      	cmp	r7, #9
 801ee76:	d80f      	bhi.n	801ee98 <_strtol_l.isra.0+0xa8>
 801ee78:	463c      	mov	r4, r7
 801ee7a:	42a3      	cmp	r3, r4
 801ee7c:	dd1b      	ble.n	801eeb6 <_strtol_l.isra.0+0xc6>
 801ee7e:	1c57      	adds	r7, r2, #1
 801ee80:	d007      	beq.n	801ee92 <_strtol_l.isra.0+0xa2>
 801ee82:	4581      	cmp	r9, r0
 801ee84:	d314      	bcc.n	801eeb0 <_strtol_l.isra.0+0xc0>
 801ee86:	d101      	bne.n	801ee8c <_strtol_l.isra.0+0x9c>
 801ee88:	45a2      	cmp	sl, r4
 801ee8a:	db11      	blt.n	801eeb0 <_strtol_l.isra.0+0xc0>
 801ee8c:	fb00 4003 	mla	r0, r0, r3, r4
 801ee90:	2201      	movs	r2, #1
 801ee92:	f815 4b01 	ldrb.w	r4, [r5], #1
 801ee96:	e7eb      	b.n	801ee70 <_strtol_l.isra.0+0x80>
 801ee98:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 801ee9c:	2f19      	cmp	r7, #25
 801ee9e:	d801      	bhi.n	801eea4 <_strtol_l.isra.0+0xb4>
 801eea0:	3c37      	subs	r4, #55	@ 0x37
 801eea2:	e7ea      	b.n	801ee7a <_strtol_l.isra.0+0x8a>
 801eea4:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 801eea8:	2f19      	cmp	r7, #25
 801eeaa:	d804      	bhi.n	801eeb6 <_strtol_l.isra.0+0xc6>
 801eeac:	3c57      	subs	r4, #87	@ 0x57
 801eeae:	e7e4      	b.n	801ee7a <_strtol_l.isra.0+0x8a>
 801eeb0:	f04f 32ff 	mov.w	r2, #4294967295
 801eeb4:	e7ed      	b.n	801ee92 <_strtol_l.isra.0+0xa2>
 801eeb6:	1c53      	adds	r3, r2, #1
 801eeb8:	d108      	bne.n	801eecc <_strtol_l.isra.0+0xdc>
 801eeba:	2322      	movs	r3, #34	@ 0x22
 801eebc:	f8ce 3000 	str.w	r3, [lr]
 801eec0:	4660      	mov	r0, ip
 801eec2:	f1b8 0f00 	cmp.w	r8, #0
 801eec6:	d0a0      	beq.n	801ee0a <_strtol_l.isra.0+0x1a>
 801eec8:	1e69      	subs	r1, r5, #1
 801eeca:	e006      	b.n	801eeda <_strtol_l.isra.0+0xea>
 801eecc:	b106      	cbz	r6, 801eed0 <_strtol_l.isra.0+0xe0>
 801eece:	4240      	negs	r0, r0
 801eed0:	f1b8 0f00 	cmp.w	r8, #0
 801eed4:	d099      	beq.n	801ee0a <_strtol_l.isra.0+0x1a>
 801eed6:	2a00      	cmp	r2, #0
 801eed8:	d1f6      	bne.n	801eec8 <_strtol_l.isra.0+0xd8>
 801eeda:	f8c8 1000 	str.w	r1, [r8]
 801eede:	e794      	b.n	801ee0a <_strtol_l.isra.0+0x1a>
 801eee0:	08023236 	.word	0x08023236

0801eee4 <strtol>:
 801eee4:	4613      	mov	r3, r2
 801eee6:	460a      	mov	r2, r1
 801eee8:	4601      	mov	r1, r0
 801eeea:	4802      	ldr	r0, [pc, #8]	@ (801eef4 <strtol+0x10>)
 801eeec:	6800      	ldr	r0, [r0, #0]
 801eeee:	f7ff bf7f 	b.w	801edf0 <_strtol_l.isra.0>
 801eef2:	bf00      	nop
 801eef4:	240000e8 	.word	0x240000e8

0801eef8 <_strtoul_l.isra.0>:
 801eef8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801eefc:	4e34      	ldr	r6, [pc, #208]	@ (801efd0 <_strtoul_l.isra.0+0xd8>)
 801eefe:	4686      	mov	lr, r0
 801ef00:	460d      	mov	r5, r1
 801ef02:	4628      	mov	r0, r5
 801ef04:	f815 4b01 	ldrb.w	r4, [r5], #1
 801ef08:	5d37      	ldrb	r7, [r6, r4]
 801ef0a:	f017 0708 	ands.w	r7, r7, #8
 801ef0e:	d1f8      	bne.n	801ef02 <_strtoul_l.isra.0+0xa>
 801ef10:	2c2d      	cmp	r4, #45	@ 0x2d
 801ef12:	d110      	bne.n	801ef36 <_strtoul_l.isra.0+0x3e>
 801ef14:	782c      	ldrb	r4, [r5, #0]
 801ef16:	2701      	movs	r7, #1
 801ef18:	1c85      	adds	r5, r0, #2
 801ef1a:	f033 0010 	bics.w	r0, r3, #16
 801ef1e:	d115      	bne.n	801ef4c <_strtoul_l.isra.0+0x54>
 801ef20:	2c30      	cmp	r4, #48	@ 0x30
 801ef22:	d10d      	bne.n	801ef40 <_strtoul_l.isra.0+0x48>
 801ef24:	7828      	ldrb	r0, [r5, #0]
 801ef26:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 801ef2a:	2858      	cmp	r0, #88	@ 0x58
 801ef2c:	d108      	bne.n	801ef40 <_strtoul_l.isra.0+0x48>
 801ef2e:	786c      	ldrb	r4, [r5, #1]
 801ef30:	3502      	adds	r5, #2
 801ef32:	2310      	movs	r3, #16
 801ef34:	e00a      	b.n	801ef4c <_strtoul_l.isra.0+0x54>
 801ef36:	2c2b      	cmp	r4, #43	@ 0x2b
 801ef38:	bf04      	itt	eq
 801ef3a:	782c      	ldrbeq	r4, [r5, #0]
 801ef3c:	1c85      	addeq	r5, r0, #2
 801ef3e:	e7ec      	b.n	801ef1a <_strtoul_l.isra.0+0x22>
 801ef40:	2b00      	cmp	r3, #0
 801ef42:	d1f6      	bne.n	801ef32 <_strtoul_l.isra.0+0x3a>
 801ef44:	2c30      	cmp	r4, #48	@ 0x30
 801ef46:	bf14      	ite	ne
 801ef48:	230a      	movne	r3, #10
 801ef4a:	2308      	moveq	r3, #8
 801ef4c:	f04f 38ff 	mov.w	r8, #4294967295
 801ef50:	2600      	movs	r6, #0
 801ef52:	fbb8 f8f3 	udiv	r8, r8, r3
 801ef56:	fb03 f908 	mul.w	r9, r3, r8
 801ef5a:	ea6f 0909 	mvn.w	r9, r9
 801ef5e:	4630      	mov	r0, r6
 801ef60:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 801ef64:	f1bc 0f09 	cmp.w	ip, #9
 801ef68:	d810      	bhi.n	801ef8c <_strtoul_l.isra.0+0x94>
 801ef6a:	4664      	mov	r4, ip
 801ef6c:	42a3      	cmp	r3, r4
 801ef6e:	dd1e      	ble.n	801efae <_strtoul_l.isra.0+0xb6>
 801ef70:	f1b6 3fff 	cmp.w	r6, #4294967295
 801ef74:	d007      	beq.n	801ef86 <_strtoul_l.isra.0+0x8e>
 801ef76:	4580      	cmp	r8, r0
 801ef78:	d316      	bcc.n	801efa8 <_strtoul_l.isra.0+0xb0>
 801ef7a:	d101      	bne.n	801ef80 <_strtoul_l.isra.0+0x88>
 801ef7c:	45a1      	cmp	r9, r4
 801ef7e:	db13      	blt.n	801efa8 <_strtoul_l.isra.0+0xb0>
 801ef80:	fb00 4003 	mla	r0, r0, r3, r4
 801ef84:	2601      	movs	r6, #1
 801ef86:	f815 4b01 	ldrb.w	r4, [r5], #1
 801ef8a:	e7e9      	b.n	801ef60 <_strtoul_l.isra.0+0x68>
 801ef8c:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 801ef90:	f1bc 0f19 	cmp.w	ip, #25
 801ef94:	d801      	bhi.n	801ef9a <_strtoul_l.isra.0+0xa2>
 801ef96:	3c37      	subs	r4, #55	@ 0x37
 801ef98:	e7e8      	b.n	801ef6c <_strtoul_l.isra.0+0x74>
 801ef9a:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 801ef9e:	f1bc 0f19 	cmp.w	ip, #25
 801efa2:	d804      	bhi.n	801efae <_strtoul_l.isra.0+0xb6>
 801efa4:	3c57      	subs	r4, #87	@ 0x57
 801efa6:	e7e1      	b.n	801ef6c <_strtoul_l.isra.0+0x74>
 801efa8:	f04f 36ff 	mov.w	r6, #4294967295
 801efac:	e7eb      	b.n	801ef86 <_strtoul_l.isra.0+0x8e>
 801efae:	1c73      	adds	r3, r6, #1
 801efb0:	d106      	bne.n	801efc0 <_strtoul_l.isra.0+0xc8>
 801efb2:	2322      	movs	r3, #34	@ 0x22
 801efb4:	f8ce 3000 	str.w	r3, [lr]
 801efb8:	4630      	mov	r0, r6
 801efba:	b932      	cbnz	r2, 801efca <_strtoul_l.isra.0+0xd2>
 801efbc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801efc0:	b107      	cbz	r7, 801efc4 <_strtoul_l.isra.0+0xcc>
 801efc2:	4240      	negs	r0, r0
 801efc4:	2a00      	cmp	r2, #0
 801efc6:	d0f9      	beq.n	801efbc <_strtoul_l.isra.0+0xc4>
 801efc8:	b106      	cbz	r6, 801efcc <_strtoul_l.isra.0+0xd4>
 801efca:	1e69      	subs	r1, r5, #1
 801efcc:	6011      	str	r1, [r2, #0]
 801efce:	e7f5      	b.n	801efbc <_strtoul_l.isra.0+0xc4>
 801efd0:	08023236 	.word	0x08023236

0801efd4 <strtoul>:
 801efd4:	4613      	mov	r3, r2
 801efd6:	460a      	mov	r2, r1
 801efd8:	4601      	mov	r1, r0
 801efda:	4802      	ldr	r0, [pc, #8]	@ (801efe4 <strtoul+0x10>)
 801efdc:	6800      	ldr	r0, [r0, #0]
 801efde:	f7ff bf8b 	b.w	801eef8 <_strtoul_l.isra.0>
 801efe2:	bf00      	nop
 801efe4:	240000e8 	.word	0x240000e8

0801efe8 <sniprintf>:
 801efe8:	b40c      	push	{r2, r3}
 801efea:	b530      	push	{r4, r5, lr}
 801efec:	4b18      	ldr	r3, [pc, #96]	@ (801f050 <sniprintf+0x68>)
 801efee:	1e0c      	subs	r4, r1, #0
 801eff0:	681d      	ldr	r5, [r3, #0]
 801eff2:	b09d      	sub	sp, #116	@ 0x74
 801eff4:	da08      	bge.n	801f008 <sniprintf+0x20>
 801eff6:	238b      	movs	r3, #139	@ 0x8b
 801eff8:	602b      	str	r3, [r5, #0]
 801effa:	f04f 30ff 	mov.w	r0, #4294967295
 801effe:	b01d      	add	sp, #116	@ 0x74
 801f000:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801f004:	b002      	add	sp, #8
 801f006:	4770      	bx	lr
 801f008:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801f00c:	f8ad 3014 	strh.w	r3, [sp, #20]
 801f010:	f04f 0300 	mov.w	r3, #0
 801f014:	931b      	str	r3, [sp, #108]	@ 0x6c
 801f016:	bf14      	ite	ne
 801f018:	f104 33ff 	addne.w	r3, r4, #4294967295
 801f01c:	4623      	moveq	r3, r4
 801f01e:	9304      	str	r3, [sp, #16]
 801f020:	9307      	str	r3, [sp, #28]
 801f022:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801f026:	9002      	str	r0, [sp, #8]
 801f028:	9006      	str	r0, [sp, #24]
 801f02a:	f8ad 3016 	strh.w	r3, [sp, #22]
 801f02e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801f030:	ab21      	add	r3, sp, #132	@ 0x84
 801f032:	a902      	add	r1, sp, #8
 801f034:	4628      	mov	r0, r5
 801f036:	9301      	str	r3, [sp, #4]
 801f038:	f000 f9d8 	bl	801f3ec <_svfiprintf_r>
 801f03c:	1c43      	adds	r3, r0, #1
 801f03e:	bfbc      	itt	lt
 801f040:	238b      	movlt	r3, #139	@ 0x8b
 801f042:	602b      	strlt	r3, [r5, #0]
 801f044:	2c00      	cmp	r4, #0
 801f046:	d0da      	beq.n	801effe <sniprintf+0x16>
 801f048:	9b02      	ldr	r3, [sp, #8]
 801f04a:	2200      	movs	r2, #0
 801f04c:	701a      	strb	r2, [r3, #0]
 801f04e:	e7d6      	b.n	801effe <sniprintf+0x16>
 801f050:	240000e8 	.word	0x240000e8

0801f054 <siprintf>:
 801f054:	b40e      	push	{r1, r2, r3}
 801f056:	b510      	push	{r4, lr}
 801f058:	b09d      	sub	sp, #116	@ 0x74
 801f05a:	ab1f      	add	r3, sp, #124	@ 0x7c
 801f05c:	9002      	str	r0, [sp, #8]
 801f05e:	9006      	str	r0, [sp, #24]
 801f060:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801f064:	480a      	ldr	r0, [pc, #40]	@ (801f090 <siprintf+0x3c>)
 801f066:	9107      	str	r1, [sp, #28]
 801f068:	9104      	str	r1, [sp, #16]
 801f06a:	490a      	ldr	r1, [pc, #40]	@ (801f094 <siprintf+0x40>)
 801f06c:	f853 2b04 	ldr.w	r2, [r3], #4
 801f070:	9105      	str	r1, [sp, #20]
 801f072:	2400      	movs	r4, #0
 801f074:	a902      	add	r1, sp, #8
 801f076:	6800      	ldr	r0, [r0, #0]
 801f078:	9301      	str	r3, [sp, #4]
 801f07a:	941b      	str	r4, [sp, #108]	@ 0x6c
 801f07c:	f000 f9b6 	bl	801f3ec <_svfiprintf_r>
 801f080:	9b02      	ldr	r3, [sp, #8]
 801f082:	701c      	strb	r4, [r3, #0]
 801f084:	b01d      	add	sp, #116	@ 0x74
 801f086:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f08a:	b003      	add	sp, #12
 801f08c:	4770      	bx	lr
 801f08e:	bf00      	nop
 801f090:	240000e8 	.word	0x240000e8
 801f094:	ffff0208 	.word	0xffff0208

0801f098 <_vsniprintf_r>:
 801f098:	b530      	push	{r4, r5, lr}
 801f09a:	4614      	mov	r4, r2
 801f09c:	2c00      	cmp	r4, #0
 801f09e:	b09b      	sub	sp, #108	@ 0x6c
 801f0a0:	4605      	mov	r5, r0
 801f0a2:	461a      	mov	r2, r3
 801f0a4:	da05      	bge.n	801f0b2 <_vsniprintf_r+0x1a>
 801f0a6:	238b      	movs	r3, #139	@ 0x8b
 801f0a8:	6003      	str	r3, [r0, #0]
 801f0aa:	f04f 30ff 	mov.w	r0, #4294967295
 801f0ae:	b01b      	add	sp, #108	@ 0x6c
 801f0b0:	bd30      	pop	{r4, r5, pc}
 801f0b2:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801f0b6:	f8ad 300c 	strh.w	r3, [sp, #12]
 801f0ba:	f04f 0300 	mov.w	r3, #0
 801f0be:	9319      	str	r3, [sp, #100]	@ 0x64
 801f0c0:	bf14      	ite	ne
 801f0c2:	f104 33ff 	addne.w	r3, r4, #4294967295
 801f0c6:	4623      	moveq	r3, r4
 801f0c8:	9302      	str	r3, [sp, #8]
 801f0ca:	9305      	str	r3, [sp, #20]
 801f0cc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801f0d0:	9100      	str	r1, [sp, #0]
 801f0d2:	9104      	str	r1, [sp, #16]
 801f0d4:	f8ad 300e 	strh.w	r3, [sp, #14]
 801f0d8:	4669      	mov	r1, sp
 801f0da:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801f0dc:	f000 f986 	bl	801f3ec <_svfiprintf_r>
 801f0e0:	1c43      	adds	r3, r0, #1
 801f0e2:	bfbc      	itt	lt
 801f0e4:	238b      	movlt	r3, #139	@ 0x8b
 801f0e6:	602b      	strlt	r3, [r5, #0]
 801f0e8:	2c00      	cmp	r4, #0
 801f0ea:	d0e0      	beq.n	801f0ae <_vsniprintf_r+0x16>
 801f0ec:	9b00      	ldr	r3, [sp, #0]
 801f0ee:	2200      	movs	r2, #0
 801f0f0:	701a      	strb	r2, [r3, #0]
 801f0f2:	e7dc      	b.n	801f0ae <_vsniprintf_r+0x16>

0801f0f4 <vsniprintf>:
 801f0f4:	b507      	push	{r0, r1, r2, lr}
 801f0f6:	9300      	str	r3, [sp, #0]
 801f0f8:	4613      	mov	r3, r2
 801f0fa:	460a      	mov	r2, r1
 801f0fc:	4601      	mov	r1, r0
 801f0fe:	4803      	ldr	r0, [pc, #12]	@ (801f10c <vsniprintf+0x18>)
 801f100:	6800      	ldr	r0, [r0, #0]
 801f102:	f7ff ffc9 	bl	801f098 <_vsniprintf_r>
 801f106:	b003      	add	sp, #12
 801f108:	f85d fb04 	ldr.w	pc, [sp], #4
 801f10c:	240000e8 	.word	0x240000e8

0801f110 <memset>:
 801f110:	4402      	add	r2, r0
 801f112:	4603      	mov	r3, r0
 801f114:	4293      	cmp	r3, r2
 801f116:	d100      	bne.n	801f11a <memset+0xa>
 801f118:	4770      	bx	lr
 801f11a:	f803 1b01 	strb.w	r1, [r3], #1
 801f11e:	e7f9      	b.n	801f114 <memset+0x4>

0801f120 <strncmp>:
 801f120:	b510      	push	{r4, lr}
 801f122:	b16a      	cbz	r2, 801f140 <strncmp+0x20>
 801f124:	3901      	subs	r1, #1
 801f126:	1884      	adds	r4, r0, r2
 801f128:	f810 2b01 	ldrb.w	r2, [r0], #1
 801f12c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801f130:	429a      	cmp	r2, r3
 801f132:	d103      	bne.n	801f13c <strncmp+0x1c>
 801f134:	42a0      	cmp	r0, r4
 801f136:	d001      	beq.n	801f13c <strncmp+0x1c>
 801f138:	2a00      	cmp	r2, #0
 801f13a:	d1f5      	bne.n	801f128 <strncmp+0x8>
 801f13c:	1ad0      	subs	r0, r2, r3
 801f13e:	bd10      	pop	{r4, pc}
 801f140:	4610      	mov	r0, r2
 801f142:	e7fc      	b.n	801f13e <strncmp+0x1e>

0801f144 <_reclaim_reent>:
 801f144:	4b2d      	ldr	r3, [pc, #180]	@ (801f1fc <_reclaim_reent+0xb8>)
 801f146:	681b      	ldr	r3, [r3, #0]
 801f148:	4283      	cmp	r3, r0
 801f14a:	b570      	push	{r4, r5, r6, lr}
 801f14c:	4604      	mov	r4, r0
 801f14e:	d053      	beq.n	801f1f8 <_reclaim_reent+0xb4>
 801f150:	69c3      	ldr	r3, [r0, #28]
 801f152:	b31b      	cbz	r3, 801f19c <_reclaim_reent+0x58>
 801f154:	68db      	ldr	r3, [r3, #12]
 801f156:	b163      	cbz	r3, 801f172 <_reclaim_reent+0x2e>
 801f158:	2500      	movs	r5, #0
 801f15a:	69e3      	ldr	r3, [r4, #28]
 801f15c:	68db      	ldr	r3, [r3, #12]
 801f15e:	5959      	ldr	r1, [r3, r5]
 801f160:	b9b1      	cbnz	r1, 801f190 <_reclaim_reent+0x4c>
 801f162:	3504      	adds	r5, #4
 801f164:	2d80      	cmp	r5, #128	@ 0x80
 801f166:	d1f8      	bne.n	801f15a <_reclaim_reent+0x16>
 801f168:	69e3      	ldr	r3, [r4, #28]
 801f16a:	4620      	mov	r0, r4
 801f16c:	68d9      	ldr	r1, [r3, #12]
 801f16e:	f000 f897 	bl	801f2a0 <_free_r>
 801f172:	69e3      	ldr	r3, [r4, #28]
 801f174:	6819      	ldr	r1, [r3, #0]
 801f176:	b111      	cbz	r1, 801f17e <_reclaim_reent+0x3a>
 801f178:	4620      	mov	r0, r4
 801f17a:	f000 f891 	bl	801f2a0 <_free_r>
 801f17e:	69e3      	ldr	r3, [r4, #28]
 801f180:	689d      	ldr	r5, [r3, #8]
 801f182:	b15d      	cbz	r5, 801f19c <_reclaim_reent+0x58>
 801f184:	4629      	mov	r1, r5
 801f186:	4620      	mov	r0, r4
 801f188:	682d      	ldr	r5, [r5, #0]
 801f18a:	f000 f889 	bl	801f2a0 <_free_r>
 801f18e:	e7f8      	b.n	801f182 <_reclaim_reent+0x3e>
 801f190:	680e      	ldr	r6, [r1, #0]
 801f192:	4620      	mov	r0, r4
 801f194:	f000 f884 	bl	801f2a0 <_free_r>
 801f198:	4631      	mov	r1, r6
 801f19a:	e7e1      	b.n	801f160 <_reclaim_reent+0x1c>
 801f19c:	6961      	ldr	r1, [r4, #20]
 801f19e:	b111      	cbz	r1, 801f1a6 <_reclaim_reent+0x62>
 801f1a0:	4620      	mov	r0, r4
 801f1a2:	f000 f87d 	bl	801f2a0 <_free_r>
 801f1a6:	69e1      	ldr	r1, [r4, #28]
 801f1a8:	b111      	cbz	r1, 801f1b0 <_reclaim_reent+0x6c>
 801f1aa:	4620      	mov	r0, r4
 801f1ac:	f000 f878 	bl	801f2a0 <_free_r>
 801f1b0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801f1b2:	b111      	cbz	r1, 801f1ba <_reclaim_reent+0x76>
 801f1b4:	4620      	mov	r0, r4
 801f1b6:	f000 f873 	bl	801f2a0 <_free_r>
 801f1ba:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801f1bc:	b111      	cbz	r1, 801f1c4 <_reclaim_reent+0x80>
 801f1be:	4620      	mov	r0, r4
 801f1c0:	f000 f86e 	bl	801f2a0 <_free_r>
 801f1c4:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 801f1c6:	b111      	cbz	r1, 801f1ce <_reclaim_reent+0x8a>
 801f1c8:	4620      	mov	r0, r4
 801f1ca:	f000 f869 	bl	801f2a0 <_free_r>
 801f1ce:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 801f1d0:	b111      	cbz	r1, 801f1d8 <_reclaim_reent+0x94>
 801f1d2:	4620      	mov	r0, r4
 801f1d4:	f000 f864 	bl	801f2a0 <_free_r>
 801f1d8:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 801f1da:	b111      	cbz	r1, 801f1e2 <_reclaim_reent+0x9e>
 801f1dc:	4620      	mov	r0, r4
 801f1de:	f000 f85f 	bl	801f2a0 <_free_r>
 801f1e2:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 801f1e4:	b111      	cbz	r1, 801f1ec <_reclaim_reent+0xa8>
 801f1e6:	4620      	mov	r0, r4
 801f1e8:	f000 f85a 	bl	801f2a0 <_free_r>
 801f1ec:	6a23      	ldr	r3, [r4, #32]
 801f1ee:	b11b      	cbz	r3, 801f1f8 <_reclaim_reent+0xb4>
 801f1f0:	4620      	mov	r0, r4
 801f1f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801f1f6:	4718      	bx	r3
 801f1f8:	bd70      	pop	{r4, r5, r6, pc}
 801f1fa:	bf00      	nop
 801f1fc:	240000e8 	.word	0x240000e8

0801f200 <_sbrk_r>:
 801f200:	b538      	push	{r3, r4, r5, lr}
 801f202:	4d06      	ldr	r5, [pc, #24]	@ (801f21c <_sbrk_r+0x1c>)
 801f204:	2300      	movs	r3, #0
 801f206:	4604      	mov	r4, r0
 801f208:	4608      	mov	r0, r1
 801f20a:	602b      	str	r3, [r5, #0]
 801f20c:	f7e3 fe5c 	bl	8002ec8 <_sbrk>
 801f210:	1c43      	adds	r3, r0, #1
 801f212:	d102      	bne.n	801f21a <_sbrk_r+0x1a>
 801f214:	682b      	ldr	r3, [r5, #0]
 801f216:	b103      	cbz	r3, 801f21a <_sbrk_r+0x1a>
 801f218:	6023      	str	r3, [r4, #0]
 801f21a:	bd38      	pop	{r3, r4, r5, pc}
 801f21c:	24009bb4 	.word	0x24009bb4

0801f220 <__errno>:
 801f220:	4b01      	ldr	r3, [pc, #4]	@ (801f228 <__errno+0x8>)
 801f222:	6818      	ldr	r0, [r3, #0]
 801f224:	4770      	bx	lr
 801f226:	bf00      	nop
 801f228:	240000e8 	.word	0x240000e8

0801f22c <__libc_init_array>:
 801f22c:	b570      	push	{r4, r5, r6, lr}
 801f22e:	4d0d      	ldr	r5, [pc, #52]	@ (801f264 <__libc_init_array+0x38>)
 801f230:	4c0d      	ldr	r4, [pc, #52]	@ (801f268 <__libc_init_array+0x3c>)
 801f232:	1b64      	subs	r4, r4, r5
 801f234:	10a4      	asrs	r4, r4, #2
 801f236:	2600      	movs	r6, #0
 801f238:	42a6      	cmp	r6, r4
 801f23a:	d109      	bne.n	801f250 <__libc_init_array+0x24>
 801f23c:	4d0b      	ldr	r5, [pc, #44]	@ (801f26c <__libc_init_array+0x40>)
 801f23e:	4c0c      	ldr	r4, [pc, #48]	@ (801f270 <__libc_init_array+0x44>)
 801f240:	f000 fbac 	bl	801f99c <_init>
 801f244:	1b64      	subs	r4, r4, r5
 801f246:	10a4      	asrs	r4, r4, #2
 801f248:	2600      	movs	r6, #0
 801f24a:	42a6      	cmp	r6, r4
 801f24c:	d105      	bne.n	801f25a <__libc_init_array+0x2e>
 801f24e:	bd70      	pop	{r4, r5, r6, pc}
 801f250:	f855 3b04 	ldr.w	r3, [r5], #4
 801f254:	4798      	blx	r3
 801f256:	3601      	adds	r6, #1
 801f258:	e7ee      	b.n	801f238 <__libc_init_array+0xc>
 801f25a:	f855 3b04 	ldr.w	r3, [r5], #4
 801f25e:	4798      	blx	r3
 801f260:	3601      	adds	r6, #1
 801f262:	e7f2      	b.n	801f24a <__libc_init_array+0x1e>
 801f264:	08023658 	.word	0x08023658
 801f268:	08023658 	.word	0x08023658
 801f26c:	08023658 	.word	0x08023658
 801f270:	0802365c 	.word	0x0802365c

0801f274 <strcpy>:
 801f274:	4603      	mov	r3, r0
 801f276:	f811 2b01 	ldrb.w	r2, [r1], #1
 801f27a:	f803 2b01 	strb.w	r2, [r3], #1
 801f27e:	2a00      	cmp	r2, #0
 801f280:	d1f9      	bne.n	801f276 <strcpy+0x2>
 801f282:	4770      	bx	lr

0801f284 <memcpy>:
 801f284:	440a      	add	r2, r1
 801f286:	4291      	cmp	r1, r2
 801f288:	f100 33ff 	add.w	r3, r0, #4294967295
 801f28c:	d100      	bne.n	801f290 <memcpy+0xc>
 801f28e:	4770      	bx	lr
 801f290:	b510      	push	{r4, lr}
 801f292:	f811 4b01 	ldrb.w	r4, [r1], #1
 801f296:	f803 4f01 	strb.w	r4, [r3, #1]!
 801f29a:	4291      	cmp	r1, r2
 801f29c:	d1f9      	bne.n	801f292 <memcpy+0xe>
 801f29e:	bd10      	pop	{r4, pc}

0801f2a0 <_free_r>:
 801f2a0:	b538      	push	{r3, r4, r5, lr}
 801f2a2:	4605      	mov	r5, r0
 801f2a4:	2900      	cmp	r1, #0
 801f2a6:	d041      	beq.n	801f32c <_free_r+0x8c>
 801f2a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801f2ac:	1f0c      	subs	r4, r1, #4
 801f2ae:	2b00      	cmp	r3, #0
 801f2b0:	bfb8      	it	lt
 801f2b2:	18e4      	addlt	r4, r4, r3
 801f2b4:	f7ff fd90 	bl	801edd8 <__malloc_lock>
 801f2b8:	4a1d      	ldr	r2, [pc, #116]	@ (801f330 <_free_r+0x90>)
 801f2ba:	6813      	ldr	r3, [r2, #0]
 801f2bc:	b933      	cbnz	r3, 801f2cc <_free_r+0x2c>
 801f2be:	6063      	str	r3, [r4, #4]
 801f2c0:	6014      	str	r4, [r2, #0]
 801f2c2:	4628      	mov	r0, r5
 801f2c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801f2c8:	f7ff bd8c 	b.w	801ede4 <__malloc_unlock>
 801f2cc:	42a3      	cmp	r3, r4
 801f2ce:	d908      	bls.n	801f2e2 <_free_r+0x42>
 801f2d0:	6820      	ldr	r0, [r4, #0]
 801f2d2:	1821      	adds	r1, r4, r0
 801f2d4:	428b      	cmp	r3, r1
 801f2d6:	bf01      	itttt	eq
 801f2d8:	6819      	ldreq	r1, [r3, #0]
 801f2da:	685b      	ldreq	r3, [r3, #4]
 801f2dc:	1809      	addeq	r1, r1, r0
 801f2de:	6021      	streq	r1, [r4, #0]
 801f2e0:	e7ed      	b.n	801f2be <_free_r+0x1e>
 801f2e2:	461a      	mov	r2, r3
 801f2e4:	685b      	ldr	r3, [r3, #4]
 801f2e6:	b10b      	cbz	r3, 801f2ec <_free_r+0x4c>
 801f2e8:	42a3      	cmp	r3, r4
 801f2ea:	d9fa      	bls.n	801f2e2 <_free_r+0x42>
 801f2ec:	6811      	ldr	r1, [r2, #0]
 801f2ee:	1850      	adds	r0, r2, r1
 801f2f0:	42a0      	cmp	r0, r4
 801f2f2:	d10b      	bne.n	801f30c <_free_r+0x6c>
 801f2f4:	6820      	ldr	r0, [r4, #0]
 801f2f6:	4401      	add	r1, r0
 801f2f8:	1850      	adds	r0, r2, r1
 801f2fa:	4283      	cmp	r3, r0
 801f2fc:	6011      	str	r1, [r2, #0]
 801f2fe:	d1e0      	bne.n	801f2c2 <_free_r+0x22>
 801f300:	6818      	ldr	r0, [r3, #0]
 801f302:	685b      	ldr	r3, [r3, #4]
 801f304:	6053      	str	r3, [r2, #4]
 801f306:	4408      	add	r0, r1
 801f308:	6010      	str	r0, [r2, #0]
 801f30a:	e7da      	b.n	801f2c2 <_free_r+0x22>
 801f30c:	d902      	bls.n	801f314 <_free_r+0x74>
 801f30e:	230c      	movs	r3, #12
 801f310:	602b      	str	r3, [r5, #0]
 801f312:	e7d6      	b.n	801f2c2 <_free_r+0x22>
 801f314:	6820      	ldr	r0, [r4, #0]
 801f316:	1821      	adds	r1, r4, r0
 801f318:	428b      	cmp	r3, r1
 801f31a:	bf04      	itt	eq
 801f31c:	6819      	ldreq	r1, [r3, #0]
 801f31e:	685b      	ldreq	r3, [r3, #4]
 801f320:	6063      	str	r3, [r4, #4]
 801f322:	bf04      	itt	eq
 801f324:	1809      	addeq	r1, r1, r0
 801f326:	6021      	streq	r1, [r4, #0]
 801f328:	6054      	str	r4, [r2, #4]
 801f32a:	e7ca      	b.n	801f2c2 <_free_r+0x22>
 801f32c:	bd38      	pop	{r3, r4, r5, pc}
 801f32e:	bf00      	nop
 801f330:	24009a78 	.word	0x24009a78

0801f334 <__ssputs_r>:
 801f334:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f338:	688e      	ldr	r6, [r1, #8]
 801f33a:	461f      	mov	r7, r3
 801f33c:	42be      	cmp	r6, r7
 801f33e:	680b      	ldr	r3, [r1, #0]
 801f340:	4682      	mov	sl, r0
 801f342:	460c      	mov	r4, r1
 801f344:	4690      	mov	r8, r2
 801f346:	d82d      	bhi.n	801f3a4 <__ssputs_r+0x70>
 801f348:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801f34c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801f350:	d026      	beq.n	801f3a0 <__ssputs_r+0x6c>
 801f352:	6965      	ldr	r5, [r4, #20]
 801f354:	6909      	ldr	r1, [r1, #16]
 801f356:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801f35a:	eba3 0901 	sub.w	r9, r3, r1
 801f35e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801f362:	1c7b      	adds	r3, r7, #1
 801f364:	444b      	add	r3, r9
 801f366:	106d      	asrs	r5, r5, #1
 801f368:	429d      	cmp	r5, r3
 801f36a:	bf38      	it	cc
 801f36c:	461d      	movcc	r5, r3
 801f36e:	0553      	lsls	r3, r2, #21
 801f370:	d527      	bpl.n	801f3c2 <__ssputs_r+0x8e>
 801f372:	4629      	mov	r1, r5
 801f374:	f7ff fcb0 	bl	801ecd8 <_malloc_r>
 801f378:	4606      	mov	r6, r0
 801f37a:	b360      	cbz	r0, 801f3d6 <__ssputs_r+0xa2>
 801f37c:	6921      	ldr	r1, [r4, #16]
 801f37e:	464a      	mov	r2, r9
 801f380:	f7ff ff80 	bl	801f284 <memcpy>
 801f384:	89a3      	ldrh	r3, [r4, #12]
 801f386:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801f38a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801f38e:	81a3      	strh	r3, [r4, #12]
 801f390:	6126      	str	r6, [r4, #16]
 801f392:	6165      	str	r5, [r4, #20]
 801f394:	444e      	add	r6, r9
 801f396:	eba5 0509 	sub.w	r5, r5, r9
 801f39a:	6026      	str	r6, [r4, #0]
 801f39c:	60a5      	str	r5, [r4, #8]
 801f39e:	463e      	mov	r6, r7
 801f3a0:	42be      	cmp	r6, r7
 801f3a2:	d900      	bls.n	801f3a6 <__ssputs_r+0x72>
 801f3a4:	463e      	mov	r6, r7
 801f3a6:	6820      	ldr	r0, [r4, #0]
 801f3a8:	4632      	mov	r2, r6
 801f3aa:	4641      	mov	r1, r8
 801f3ac:	f000 faa6 	bl	801f8fc <memmove>
 801f3b0:	68a3      	ldr	r3, [r4, #8]
 801f3b2:	1b9b      	subs	r3, r3, r6
 801f3b4:	60a3      	str	r3, [r4, #8]
 801f3b6:	6823      	ldr	r3, [r4, #0]
 801f3b8:	4433      	add	r3, r6
 801f3ba:	6023      	str	r3, [r4, #0]
 801f3bc:	2000      	movs	r0, #0
 801f3be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f3c2:	462a      	mov	r2, r5
 801f3c4:	f000 fab4 	bl	801f930 <_realloc_r>
 801f3c8:	4606      	mov	r6, r0
 801f3ca:	2800      	cmp	r0, #0
 801f3cc:	d1e0      	bne.n	801f390 <__ssputs_r+0x5c>
 801f3ce:	6921      	ldr	r1, [r4, #16]
 801f3d0:	4650      	mov	r0, sl
 801f3d2:	f7ff ff65 	bl	801f2a0 <_free_r>
 801f3d6:	230c      	movs	r3, #12
 801f3d8:	f8ca 3000 	str.w	r3, [sl]
 801f3dc:	89a3      	ldrh	r3, [r4, #12]
 801f3de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801f3e2:	81a3      	strh	r3, [r4, #12]
 801f3e4:	f04f 30ff 	mov.w	r0, #4294967295
 801f3e8:	e7e9      	b.n	801f3be <__ssputs_r+0x8a>
	...

0801f3ec <_svfiprintf_r>:
 801f3ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f3f0:	4698      	mov	r8, r3
 801f3f2:	898b      	ldrh	r3, [r1, #12]
 801f3f4:	061b      	lsls	r3, r3, #24
 801f3f6:	b09d      	sub	sp, #116	@ 0x74
 801f3f8:	4607      	mov	r7, r0
 801f3fa:	460d      	mov	r5, r1
 801f3fc:	4614      	mov	r4, r2
 801f3fe:	d510      	bpl.n	801f422 <_svfiprintf_r+0x36>
 801f400:	690b      	ldr	r3, [r1, #16]
 801f402:	b973      	cbnz	r3, 801f422 <_svfiprintf_r+0x36>
 801f404:	2140      	movs	r1, #64	@ 0x40
 801f406:	f7ff fc67 	bl	801ecd8 <_malloc_r>
 801f40a:	6028      	str	r0, [r5, #0]
 801f40c:	6128      	str	r0, [r5, #16]
 801f40e:	b930      	cbnz	r0, 801f41e <_svfiprintf_r+0x32>
 801f410:	230c      	movs	r3, #12
 801f412:	603b      	str	r3, [r7, #0]
 801f414:	f04f 30ff 	mov.w	r0, #4294967295
 801f418:	b01d      	add	sp, #116	@ 0x74
 801f41a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f41e:	2340      	movs	r3, #64	@ 0x40
 801f420:	616b      	str	r3, [r5, #20]
 801f422:	2300      	movs	r3, #0
 801f424:	9309      	str	r3, [sp, #36]	@ 0x24
 801f426:	2320      	movs	r3, #32
 801f428:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801f42c:	f8cd 800c 	str.w	r8, [sp, #12]
 801f430:	2330      	movs	r3, #48	@ 0x30
 801f432:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801f5d0 <_svfiprintf_r+0x1e4>
 801f436:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801f43a:	f04f 0901 	mov.w	r9, #1
 801f43e:	4623      	mov	r3, r4
 801f440:	469a      	mov	sl, r3
 801f442:	f813 2b01 	ldrb.w	r2, [r3], #1
 801f446:	b10a      	cbz	r2, 801f44c <_svfiprintf_r+0x60>
 801f448:	2a25      	cmp	r2, #37	@ 0x25
 801f44a:	d1f9      	bne.n	801f440 <_svfiprintf_r+0x54>
 801f44c:	ebba 0b04 	subs.w	fp, sl, r4
 801f450:	d00b      	beq.n	801f46a <_svfiprintf_r+0x7e>
 801f452:	465b      	mov	r3, fp
 801f454:	4622      	mov	r2, r4
 801f456:	4629      	mov	r1, r5
 801f458:	4638      	mov	r0, r7
 801f45a:	f7ff ff6b 	bl	801f334 <__ssputs_r>
 801f45e:	3001      	adds	r0, #1
 801f460:	f000 80a7 	beq.w	801f5b2 <_svfiprintf_r+0x1c6>
 801f464:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801f466:	445a      	add	r2, fp
 801f468:	9209      	str	r2, [sp, #36]	@ 0x24
 801f46a:	f89a 3000 	ldrb.w	r3, [sl]
 801f46e:	2b00      	cmp	r3, #0
 801f470:	f000 809f 	beq.w	801f5b2 <_svfiprintf_r+0x1c6>
 801f474:	2300      	movs	r3, #0
 801f476:	f04f 32ff 	mov.w	r2, #4294967295
 801f47a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801f47e:	f10a 0a01 	add.w	sl, sl, #1
 801f482:	9304      	str	r3, [sp, #16]
 801f484:	9307      	str	r3, [sp, #28]
 801f486:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801f48a:	931a      	str	r3, [sp, #104]	@ 0x68
 801f48c:	4654      	mov	r4, sl
 801f48e:	2205      	movs	r2, #5
 801f490:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f494:	484e      	ldr	r0, [pc, #312]	@ (801f5d0 <_svfiprintf_r+0x1e4>)
 801f496:	f7e0 ff53 	bl	8000340 <memchr>
 801f49a:	9a04      	ldr	r2, [sp, #16]
 801f49c:	b9d8      	cbnz	r0, 801f4d6 <_svfiprintf_r+0xea>
 801f49e:	06d0      	lsls	r0, r2, #27
 801f4a0:	bf44      	itt	mi
 801f4a2:	2320      	movmi	r3, #32
 801f4a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801f4a8:	0711      	lsls	r1, r2, #28
 801f4aa:	bf44      	itt	mi
 801f4ac:	232b      	movmi	r3, #43	@ 0x2b
 801f4ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801f4b2:	f89a 3000 	ldrb.w	r3, [sl]
 801f4b6:	2b2a      	cmp	r3, #42	@ 0x2a
 801f4b8:	d015      	beq.n	801f4e6 <_svfiprintf_r+0xfa>
 801f4ba:	9a07      	ldr	r2, [sp, #28]
 801f4bc:	4654      	mov	r4, sl
 801f4be:	2000      	movs	r0, #0
 801f4c0:	f04f 0c0a 	mov.w	ip, #10
 801f4c4:	4621      	mov	r1, r4
 801f4c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 801f4ca:	3b30      	subs	r3, #48	@ 0x30
 801f4cc:	2b09      	cmp	r3, #9
 801f4ce:	d94b      	bls.n	801f568 <_svfiprintf_r+0x17c>
 801f4d0:	b1b0      	cbz	r0, 801f500 <_svfiprintf_r+0x114>
 801f4d2:	9207      	str	r2, [sp, #28]
 801f4d4:	e014      	b.n	801f500 <_svfiprintf_r+0x114>
 801f4d6:	eba0 0308 	sub.w	r3, r0, r8
 801f4da:	fa09 f303 	lsl.w	r3, r9, r3
 801f4de:	4313      	orrs	r3, r2
 801f4e0:	9304      	str	r3, [sp, #16]
 801f4e2:	46a2      	mov	sl, r4
 801f4e4:	e7d2      	b.n	801f48c <_svfiprintf_r+0xa0>
 801f4e6:	9b03      	ldr	r3, [sp, #12]
 801f4e8:	1d19      	adds	r1, r3, #4
 801f4ea:	681b      	ldr	r3, [r3, #0]
 801f4ec:	9103      	str	r1, [sp, #12]
 801f4ee:	2b00      	cmp	r3, #0
 801f4f0:	bfbb      	ittet	lt
 801f4f2:	425b      	neglt	r3, r3
 801f4f4:	f042 0202 	orrlt.w	r2, r2, #2
 801f4f8:	9307      	strge	r3, [sp, #28]
 801f4fa:	9307      	strlt	r3, [sp, #28]
 801f4fc:	bfb8      	it	lt
 801f4fe:	9204      	strlt	r2, [sp, #16]
 801f500:	7823      	ldrb	r3, [r4, #0]
 801f502:	2b2e      	cmp	r3, #46	@ 0x2e
 801f504:	d10a      	bne.n	801f51c <_svfiprintf_r+0x130>
 801f506:	7863      	ldrb	r3, [r4, #1]
 801f508:	2b2a      	cmp	r3, #42	@ 0x2a
 801f50a:	d132      	bne.n	801f572 <_svfiprintf_r+0x186>
 801f50c:	9b03      	ldr	r3, [sp, #12]
 801f50e:	1d1a      	adds	r2, r3, #4
 801f510:	681b      	ldr	r3, [r3, #0]
 801f512:	9203      	str	r2, [sp, #12]
 801f514:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801f518:	3402      	adds	r4, #2
 801f51a:	9305      	str	r3, [sp, #20]
 801f51c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801f5e0 <_svfiprintf_r+0x1f4>
 801f520:	7821      	ldrb	r1, [r4, #0]
 801f522:	2203      	movs	r2, #3
 801f524:	4650      	mov	r0, sl
 801f526:	f7e0 ff0b 	bl	8000340 <memchr>
 801f52a:	b138      	cbz	r0, 801f53c <_svfiprintf_r+0x150>
 801f52c:	9b04      	ldr	r3, [sp, #16]
 801f52e:	eba0 000a 	sub.w	r0, r0, sl
 801f532:	2240      	movs	r2, #64	@ 0x40
 801f534:	4082      	lsls	r2, r0
 801f536:	4313      	orrs	r3, r2
 801f538:	3401      	adds	r4, #1
 801f53a:	9304      	str	r3, [sp, #16]
 801f53c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f540:	4824      	ldr	r0, [pc, #144]	@ (801f5d4 <_svfiprintf_r+0x1e8>)
 801f542:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801f546:	2206      	movs	r2, #6
 801f548:	f7e0 fefa 	bl	8000340 <memchr>
 801f54c:	2800      	cmp	r0, #0
 801f54e:	d036      	beq.n	801f5be <_svfiprintf_r+0x1d2>
 801f550:	4b21      	ldr	r3, [pc, #132]	@ (801f5d8 <_svfiprintf_r+0x1ec>)
 801f552:	bb1b      	cbnz	r3, 801f59c <_svfiprintf_r+0x1b0>
 801f554:	9b03      	ldr	r3, [sp, #12]
 801f556:	3307      	adds	r3, #7
 801f558:	f023 0307 	bic.w	r3, r3, #7
 801f55c:	3308      	adds	r3, #8
 801f55e:	9303      	str	r3, [sp, #12]
 801f560:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f562:	4433      	add	r3, r6
 801f564:	9309      	str	r3, [sp, #36]	@ 0x24
 801f566:	e76a      	b.n	801f43e <_svfiprintf_r+0x52>
 801f568:	fb0c 3202 	mla	r2, ip, r2, r3
 801f56c:	460c      	mov	r4, r1
 801f56e:	2001      	movs	r0, #1
 801f570:	e7a8      	b.n	801f4c4 <_svfiprintf_r+0xd8>
 801f572:	2300      	movs	r3, #0
 801f574:	3401      	adds	r4, #1
 801f576:	9305      	str	r3, [sp, #20]
 801f578:	4619      	mov	r1, r3
 801f57a:	f04f 0c0a 	mov.w	ip, #10
 801f57e:	4620      	mov	r0, r4
 801f580:	f810 2b01 	ldrb.w	r2, [r0], #1
 801f584:	3a30      	subs	r2, #48	@ 0x30
 801f586:	2a09      	cmp	r2, #9
 801f588:	d903      	bls.n	801f592 <_svfiprintf_r+0x1a6>
 801f58a:	2b00      	cmp	r3, #0
 801f58c:	d0c6      	beq.n	801f51c <_svfiprintf_r+0x130>
 801f58e:	9105      	str	r1, [sp, #20]
 801f590:	e7c4      	b.n	801f51c <_svfiprintf_r+0x130>
 801f592:	fb0c 2101 	mla	r1, ip, r1, r2
 801f596:	4604      	mov	r4, r0
 801f598:	2301      	movs	r3, #1
 801f59a:	e7f0      	b.n	801f57e <_svfiprintf_r+0x192>
 801f59c:	ab03      	add	r3, sp, #12
 801f59e:	9300      	str	r3, [sp, #0]
 801f5a0:	462a      	mov	r2, r5
 801f5a2:	4b0e      	ldr	r3, [pc, #56]	@ (801f5dc <_svfiprintf_r+0x1f0>)
 801f5a4:	a904      	add	r1, sp, #16
 801f5a6:	4638      	mov	r0, r7
 801f5a8:	f3af 8000 	nop.w
 801f5ac:	1c42      	adds	r2, r0, #1
 801f5ae:	4606      	mov	r6, r0
 801f5b0:	d1d6      	bne.n	801f560 <_svfiprintf_r+0x174>
 801f5b2:	89ab      	ldrh	r3, [r5, #12]
 801f5b4:	065b      	lsls	r3, r3, #25
 801f5b6:	f53f af2d 	bmi.w	801f414 <_svfiprintf_r+0x28>
 801f5ba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f5bc:	e72c      	b.n	801f418 <_svfiprintf_r+0x2c>
 801f5be:	ab03      	add	r3, sp, #12
 801f5c0:	9300      	str	r3, [sp, #0]
 801f5c2:	462a      	mov	r2, r5
 801f5c4:	4b05      	ldr	r3, [pc, #20]	@ (801f5dc <_svfiprintf_r+0x1f0>)
 801f5c6:	a904      	add	r1, sp, #16
 801f5c8:	4638      	mov	r0, r7
 801f5ca:	f000 f879 	bl	801f6c0 <_printf_i>
 801f5ce:	e7ed      	b.n	801f5ac <_svfiprintf_r+0x1c0>
 801f5d0:	08023336 	.word	0x08023336
 801f5d4:	08023340 	.word	0x08023340
 801f5d8:	00000000 	.word	0x00000000
 801f5dc:	0801f335 	.word	0x0801f335
 801f5e0:	0802333c 	.word	0x0802333c

0801f5e4 <_printf_common>:
 801f5e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f5e8:	4616      	mov	r6, r2
 801f5ea:	4698      	mov	r8, r3
 801f5ec:	688a      	ldr	r2, [r1, #8]
 801f5ee:	690b      	ldr	r3, [r1, #16]
 801f5f0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801f5f4:	4293      	cmp	r3, r2
 801f5f6:	bfb8      	it	lt
 801f5f8:	4613      	movlt	r3, r2
 801f5fa:	6033      	str	r3, [r6, #0]
 801f5fc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801f600:	4607      	mov	r7, r0
 801f602:	460c      	mov	r4, r1
 801f604:	b10a      	cbz	r2, 801f60a <_printf_common+0x26>
 801f606:	3301      	adds	r3, #1
 801f608:	6033      	str	r3, [r6, #0]
 801f60a:	6823      	ldr	r3, [r4, #0]
 801f60c:	0699      	lsls	r1, r3, #26
 801f60e:	bf42      	ittt	mi
 801f610:	6833      	ldrmi	r3, [r6, #0]
 801f612:	3302      	addmi	r3, #2
 801f614:	6033      	strmi	r3, [r6, #0]
 801f616:	6825      	ldr	r5, [r4, #0]
 801f618:	f015 0506 	ands.w	r5, r5, #6
 801f61c:	d106      	bne.n	801f62c <_printf_common+0x48>
 801f61e:	f104 0a19 	add.w	sl, r4, #25
 801f622:	68e3      	ldr	r3, [r4, #12]
 801f624:	6832      	ldr	r2, [r6, #0]
 801f626:	1a9b      	subs	r3, r3, r2
 801f628:	42ab      	cmp	r3, r5
 801f62a:	dc26      	bgt.n	801f67a <_printf_common+0x96>
 801f62c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801f630:	6822      	ldr	r2, [r4, #0]
 801f632:	3b00      	subs	r3, #0
 801f634:	bf18      	it	ne
 801f636:	2301      	movne	r3, #1
 801f638:	0692      	lsls	r2, r2, #26
 801f63a:	d42b      	bmi.n	801f694 <_printf_common+0xb0>
 801f63c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801f640:	4641      	mov	r1, r8
 801f642:	4638      	mov	r0, r7
 801f644:	47c8      	blx	r9
 801f646:	3001      	adds	r0, #1
 801f648:	d01e      	beq.n	801f688 <_printf_common+0xa4>
 801f64a:	6823      	ldr	r3, [r4, #0]
 801f64c:	6922      	ldr	r2, [r4, #16]
 801f64e:	f003 0306 	and.w	r3, r3, #6
 801f652:	2b04      	cmp	r3, #4
 801f654:	bf02      	ittt	eq
 801f656:	68e5      	ldreq	r5, [r4, #12]
 801f658:	6833      	ldreq	r3, [r6, #0]
 801f65a:	1aed      	subeq	r5, r5, r3
 801f65c:	68a3      	ldr	r3, [r4, #8]
 801f65e:	bf0c      	ite	eq
 801f660:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801f664:	2500      	movne	r5, #0
 801f666:	4293      	cmp	r3, r2
 801f668:	bfc4      	itt	gt
 801f66a:	1a9b      	subgt	r3, r3, r2
 801f66c:	18ed      	addgt	r5, r5, r3
 801f66e:	2600      	movs	r6, #0
 801f670:	341a      	adds	r4, #26
 801f672:	42b5      	cmp	r5, r6
 801f674:	d11a      	bne.n	801f6ac <_printf_common+0xc8>
 801f676:	2000      	movs	r0, #0
 801f678:	e008      	b.n	801f68c <_printf_common+0xa8>
 801f67a:	2301      	movs	r3, #1
 801f67c:	4652      	mov	r2, sl
 801f67e:	4641      	mov	r1, r8
 801f680:	4638      	mov	r0, r7
 801f682:	47c8      	blx	r9
 801f684:	3001      	adds	r0, #1
 801f686:	d103      	bne.n	801f690 <_printf_common+0xac>
 801f688:	f04f 30ff 	mov.w	r0, #4294967295
 801f68c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f690:	3501      	adds	r5, #1
 801f692:	e7c6      	b.n	801f622 <_printf_common+0x3e>
 801f694:	18e1      	adds	r1, r4, r3
 801f696:	1c5a      	adds	r2, r3, #1
 801f698:	2030      	movs	r0, #48	@ 0x30
 801f69a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801f69e:	4422      	add	r2, r4
 801f6a0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801f6a4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801f6a8:	3302      	adds	r3, #2
 801f6aa:	e7c7      	b.n	801f63c <_printf_common+0x58>
 801f6ac:	2301      	movs	r3, #1
 801f6ae:	4622      	mov	r2, r4
 801f6b0:	4641      	mov	r1, r8
 801f6b2:	4638      	mov	r0, r7
 801f6b4:	47c8      	blx	r9
 801f6b6:	3001      	adds	r0, #1
 801f6b8:	d0e6      	beq.n	801f688 <_printf_common+0xa4>
 801f6ba:	3601      	adds	r6, #1
 801f6bc:	e7d9      	b.n	801f672 <_printf_common+0x8e>
	...

0801f6c0 <_printf_i>:
 801f6c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801f6c4:	7e0f      	ldrb	r7, [r1, #24]
 801f6c6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801f6c8:	2f78      	cmp	r7, #120	@ 0x78
 801f6ca:	4691      	mov	r9, r2
 801f6cc:	4680      	mov	r8, r0
 801f6ce:	460c      	mov	r4, r1
 801f6d0:	469a      	mov	sl, r3
 801f6d2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801f6d6:	d807      	bhi.n	801f6e8 <_printf_i+0x28>
 801f6d8:	2f62      	cmp	r7, #98	@ 0x62
 801f6da:	d80a      	bhi.n	801f6f2 <_printf_i+0x32>
 801f6dc:	2f00      	cmp	r7, #0
 801f6de:	f000 80d1 	beq.w	801f884 <_printf_i+0x1c4>
 801f6e2:	2f58      	cmp	r7, #88	@ 0x58
 801f6e4:	f000 80b8 	beq.w	801f858 <_printf_i+0x198>
 801f6e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801f6ec:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801f6f0:	e03a      	b.n	801f768 <_printf_i+0xa8>
 801f6f2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801f6f6:	2b15      	cmp	r3, #21
 801f6f8:	d8f6      	bhi.n	801f6e8 <_printf_i+0x28>
 801f6fa:	a101      	add	r1, pc, #4	@ (adr r1, 801f700 <_printf_i+0x40>)
 801f6fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801f700:	0801f759 	.word	0x0801f759
 801f704:	0801f76d 	.word	0x0801f76d
 801f708:	0801f6e9 	.word	0x0801f6e9
 801f70c:	0801f6e9 	.word	0x0801f6e9
 801f710:	0801f6e9 	.word	0x0801f6e9
 801f714:	0801f6e9 	.word	0x0801f6e9
 801f718:	0801f76d 	.word	0x0801f76d
 801f71c:	0801f6e9 	.word	0x0801f6e9
 801f720:	0801f6e9 	.word	0x0801f6e9
 801f724:	0801f6e9 	.word	0x0801f6e9
 801f728:	0801f6e9 	.word	0x0801f6e9
 801f72c:	0801f86b 	.word	0x0801f86b
 801f730:	0801f797 	.word	0x0801f797
 801f734:	0801f825 	.word	0x0801f825
 801f738:	0801f6e9 	.word	0x0801f6e9
 801f73c:	0801f6e9 	.word	0x0801f6e9
 801f740:	0801f88d 	.word	0x0801f88d
 801f744:	0801f6e9 	.word	0x0801f6e9
 801f748:	0801f797 	.word	0x0801f797
 801f74c:	0801f6e9 	.word	0x0801f6e9
 801f750:	0801f6e9 	.word	0x0801f6e9
 801f754:	0801f82d 	.word	0x0801f82d
 801f758:	6833      	ldr	r3, [r6, #0]
 801f75a:	1d1a      	adds	r2, r3, #4
 801f75c:	681b      	ldr	r3, [r3, #0]
 801f75e:	6032      	str	r2, [r6, #0]
 801f760:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801f764:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801f768:	2301      	movs	r3, #1
 801f76a:	e09c      	b.n	801f8a6 <_printf_i+0x1e6>
 801f76c:	6833      	ldr	r3, [r6, #0]
 801f76e:	6820      	ldr	r0, [r4, #0]
 801f770:	1d19      	adds	r1, r3, #4
 801f772:	6031      	str	r1, [r6, #0]
 801f774:	0606      	lsls	r6, r0, #24
 801f776:	d501      	bpl.n	801f77c <_printf_i+0xbc>
 801f778:	681d      	ldr	r5, [r3, #0]
 801f77a:	e003      	b.n	801f784 <_printf_i+0xc4>
 801f77c:	0645      	lsls	r5, r0, #25
 801f77e:	d5fb      	bpl.n	801f778 <_printf_i+0xb8>
 801f780:	f9b3 5000 	ldrsh.w	r5, [r3]
 801f784:	2d00      	cmp	r5, #0
 801f786:	da03      	bge.n	801f790 <_printf_i+0xd0>
 801f788:	232d      	movs	r3, #45	@ 0x2d
 801f78a:	426d      	negs	r5, r5
 801f78c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801f790:	4858      	ldr	r0, [pc, #352]	@ (801f8f4 <_printf_i+0x234>)
 801f792:	230a      	movs	r3, #10
 801f794:	e011      	b.n	801f7ba <_printf_i+0xfa>
 801f796:	6821      	ldr	r1, [r4, #0]
 801f798:	6833      	ldr	r3, [r6, #0]
 801f79a:	0608      	lsls	r0, r1, #24
 801f79c:	f853 5b04 	ldr.w	r5, [r3], #4
 801f7a0:	d402      	bmi.n	801f7a8 <_printf_i+0xe8>
 801f7a2:	0649      	lsls	r1, r1, #25
 801f7a4:	bf48      	it	mi
 801f7a6:	b2ad      	uxthmi	r5, r5
 801f7a8:	2f6f      	cmp	r7, #111	@ 0x6f
 801f7aa:	4852      	ldr	r0, [pc, #328]	@ (801f8f4 <_printf_i+0x234>)
 801f7ac:	6033      	str	r3, [r6, #0]
 801f7ae:	bf14      	ite	ne
 801f7b0:	230a      	movne	r3, #10
 801f7b2:	2308      	moveq	r3, #8
 801f7b4:	2100      	movs	r1, #0
 801f7b6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801f7ba:	6866      	ldr	r6, [r4, #4]
 801f7bc:	60a6      	str	r6, [r4, #8]
 801f7be:	2e00      	cmp	r6, #0
 801f7c0:	db05      	blt.n	801f7ce <_printf_i+0x10e>
 801f7c2:	6821      	ldr	r1, [r4, #0]
 801f7c4:	432e      	orrs	r6, r5
 801f7c6:	f021 0104 	bic.w	r1, r1, #4
 801f7ca:	6021      	str	r1, [r4, #0]
 801f7cc:	d04b      	beq.n	801f866 <_printf_i+0x1a6>
 801f7ce:	4616      	mov	r6, r2
 801f7d0:	fbb5 f1f3 	udiv	r1, r5, r3
 801f7d4:	fb03 5711 	mls	r7, r3, r1, r5
 801f7d8:	5dc7      	ldrb	r7, [r0, r7]
 801f7da:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801f7de:	462f      	mov	r7, r5
 801f7e0:	42bb      	cmp	r3, r7
 801f7e2:	460d      	mov	r5, r1
 801f7e4:	d9f4      	bls.n	801f7d0 <_printf_i+0x110>
 801f7e6:	2b08      	cmp	r3, #8
 801f7e8:	d10b      	bne.n	801f802 <_printf_i+0x142>
 801f7ea:	6823      	ldr	r3, [r4, #0]
 801f7ec:	07df      	lsls	r7, r3, #31
 801f7ee:	d508      	bpl.n	801f802 <_printf_i+0x142>
 801f7f0:	6923      	ldr	r3, [r4, #16]
 801f7f2:	6861      	ldr	r1, [r4, #4]
 801f7f4:	4299      	cmp	r1, r3
 801f7f6:	bfde      	ittt	le
 801f7f8:	2330      	movle	r3, #48	@ 0x30
 801f7fa:	f806 3c01 	strble.w	r3, [r6, #-1]
 801f7fe:	f106 36ff 	addle.w	r6, r6, #4294967295
 801f802:	1b92      	subs	r2, r2, r6
 801f804:	6122      	str	r2, [r4, #16]
 801f806:	f8cd a000 	str.w	sl, [sp]
 801f80a:	464b      	mov	r3, r9
 801f80c:	aa03      	add	r2, sp, #12
 801f80e:	4621      	mov	r1, r4
 801f810:	4640      	mov	r0, r8
 801f812:	f7ff fee7 	bl	801f5e4 <_printf_common>
 801f816:	3001      	adds	r0, #1
 801f818:	d14a      	bne.n	801f8b0 <_printf_i+0x1f0>
 801f81a:	f04f 30ff 	mov.w	r0, #4294967295
 801f81e:	b004      	add	sp, #16
 801f820:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f824:	6823      	ldr	r3, [r4, #0]
 801f826:	f043 0320 	orr.w	r3, r3, #32
 801f82a:	6023      	str	r3, [r4, #0]
 801f82c:	4832      	ldr	r0, [pc, #200]	@ (801f8f8 <_printf_i+0x238>)
 801f82e:	2778      	movs	r7, #120	@ 0x78
 801f830:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801f834:	6823      	ldr	r3, [r4, #0]
 801f836:	6831      	ldr	r1, [r6, #0]
 801f838:	061f      	lsls	r7, r3, #24
 801f83a:	f851 5b04 	ldr.w	r5, [r1], #4
 801f83e:	d402      	bmi.n	801f846 <_printf_i+0x186>
 801f840:	065f      	lsls	r7, r3, #25
 801f842:	bf48      	it	mi
 801f844:	b2ad      	uxthmi	r5, r5
 801f846:	6031      	str	r1, [r6, #0]
 801f848:	07d9      	lsls	r1, r3, #31
 801f84a:	bf44      	itt	mi
 801f84c:	f043 0320 	orrmi.w	r3, r3, #32
 801f850:	6023      	strmi	r3, [r4, #0]
 801f852:	b11d      	cbz	r5, 801f85c <_printf_i+0x19c>
 801f854:	2310      	movs	r3, #16
 801f856:	e7ad      	b.n	801f7b4 <_printf_i+0xf4>
 801f858:	4826      	ldr	r0, [pc, #152]	@ (801f8f4 <_printf_i+0x234>)
 801f85a:	e7e9      	b.n	801f830 <_printf_i+0x170>
 801f85c:	6823      	ldr	r3, [r4, #0]
 801f85e:	f023 0320 	bic.w	r3, r3, #32
 801f862:	6023      	str	r3, [r4, #0]
 801f864:	e7f6      	b.n	801f854 <_printf_i+0x194>
 801f866:	4616      	mov	r6, r2
 801f868:	e7bd      	b.n	801f7e6 <_printf_i+0x126>
 801f86a:	6833      	ldr	r3, [r6, #0]
 801f86c:	6825      	ldr	r5, [r4, #0]
 801f86e:	6961      	ldr	r1, [r4, #20]
 801f870:	1d18      	adds	r0, r3, #4
 801f872:	6030      	str	r0, [r6, #0]
 801f874:	062e      	lsls	r6, r5, #24
 801f876:	681b      	ldr	r3, [r3, #0]
 801f878:	d501      	bpl.n	801f87e <_printf_i+0x1be>
 801f87a:	6019      	str	r1, [r3, #0]
 801f87c:	e002      	b.n	801f884 <_printf_i+0x1c4>
 801f87e:	0668      	lsls	r0, r5, #25
 801f880:	d5fb      	bpl.n	801f87a <_printf_i+0x1ba>
 801f882:	8019      	strh	r1, [r3, #0]
 801f884:	2300      	movs	r3, #0
 801f886:	6123      	str	r3, [r4, #16]
 801f888:	4616      	mov	r6, r2
 801f88a:	e7bc      	b.n	801f806 <_printf_i+0x146>
 801f88c:	6833      	ldr	r3, [r6, #0]
 801f88e:	1d1a      	adds	r2, r3, #4
 801f890:	6032      	str	r2, [r6, #0]
 801f892:	681e      	ldr	r6, [r3, #0]
 801f894:	6862      	ldr	r2, [r4, #4]
 801f896:	2100      	movs	r1, #0
 801f898:	4630      	mov	r0, r6
 801f89a:	f7e0 fd51 	bl	8000340 <memchr>
 801f89e:	b108      	cbz	r0, 801f8a4 <_printf_i+0x1e4>
 801f8a0:	1b80      	subs	r0, r0, r6
 801f8a2:	6060      	str	r0, [r4, #4]
 801f8a4:	6863      	ldr	r3, [r4, #4]
 801f8a6:	6123      	str	r3, [r4, #16]
 801f8a8:	2300      	movs	r3, #0
 801f8aa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801f8ae:	e7aa      	b.n	801f806 <_printf_i+0x146>
 801f8b0:	6923      	ldr	r3, [r4, #16]
 801f8b2:	4632      	mov	r2, r6
 801f8b4:	4649      	mov	r1, r9
 801f8b6:	4640      	mov	r0, r8
 801f8b8:	47d0      	blx	sl
 801f8ba:	3001      	adds	r0, #1
 801f8bc:	d0ad      	beq.n	801f81a <_printf_i+0x15a>
 801f8be:	6823      	ldr	r3, [r4, #0]
 801f8c0:	079b      	lsls	r3, r3, #30
 801f8c2:	d413      	bmi.n	801f8ec <_printf_i+0x22c>
 801f8c4:	68e0      	ldr	r0, [r4, #12]
 801f8c6:	9b03      	ldr	r3, [sp, #12]
 801f8c8:	4298      	cmp	r0, r3
 801f8ca:	bfb8      	it	lt
 801f8cc:	4618      	movlt	r0, r3
 801f8ce:	e7a6      	b.n	801f81e <_printf_i+0x15e>
 801f8d0:	2301      	movs	r3, #1
 801f8d2:	4632      	mov	r2, r6
 801f8d4:	4649      	mov	r1, r9
 801f8d6:	4640      	mov	r0, r8
 801f8d8:	47d0      	blx	sl
 801f8da:	3001      	adds	r0, #1
 801f8dc:	d09d      	beq.n	801f81a <_printf_i+0x15a>
 801f8de:	3501      	adds	r5, #1
 801f8e0:	68e3      	ldr	r3, [r4, #12]
 801f8e2:	9903      	ldr	r1, [sp, #12]
 801f8e4:	1a5b      	subs	r3, r3, r1
 801f8e6:	42ab      	cmp	r3, r5
 801f8e8:	dcf2      	bgt.n	801f8d0 <_printf_i+0x210>
 801f8ea:	e7eb      	b.n	801f8c4 <_printf_i+0x204>
 801f8ec:	2500      	movs	r5, #0
 801f8ee:	f104 0619 	add.w	r6, r4, #25
 801f8f2:	e7f5      	b.n	801f8e0 <_printf_i+0x220>
 801f8f4:	08023347 	.word	0x08023347
 801f8f8:	08023358 	.word	0x08023358

0801f8fc <memmove>:
 801f8fc:	4288      	cmp	r0, r1
 801f8fe:	b510      	push	{r4, lr}
 801f900:	eb01 0402 	add.w	r4, r1, r2
 801f904:	d902      	bls.n	801f90c <memmove+0x10>
 801f906:	4284      	cmp	r4, r0
 801f908:	4623      	mov	r3, r4
 801f90a:	d807      	bhi.n	801f91c <memmove+0x20>
 801f90c:	1e43      	subs	r3, r0, #1
 801f90e:	42a1      	cmp	r1, r4
 801f910:	d008      	beq.n	801f924 <memmove+0x28>
 801f912:	f811 2b01 	ldrb.w	r2, [r1], #1
 801f916:	f803 2f01 	strb.w	r2, [r3, #1]!
 801f91a:	e7f8      	b.n	801f90e <memmove+0x12>
 801f91c:	4402      	add	r2, r0
 801f91e:	4601      	mov	r1, r0
 801f920:	428a      	cmp	r2, r1
 801f922:	d100      	bne.n	801f926 <memmove+0x2a>
 801f924:	bd10      	pop	{r4, pc}
 801f926:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801f92a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801f92e:	e7f7      	b.n	801f920 <memmove+0x24>

0801f930 <_realloc_r>:
 801f930:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f934:	4607      	mov	r7, r0
 801f936:	4614      	mov	r4, r2
 801f938:	460d      	mov	r5, r1
 801f93a:	b921      	cbnz	r1, 801f946 <_realloc_r+0x16>
 801f93c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801f940:	4611      	mov	r1, r2
 801f942:	f7ff b9c9 	b.w	801ecd8 <_malloc_r>
 801f946:	b92a      	cbnz	r2, 801f954 <_realloc_r+0x24>
 801f948:	f7ff fcaa 	bl	801f2a0 <_free_r>
 801f94c:	4625      	mov	r5, r4
 801f94e:	4628      	mov	r0, r5
 801f950:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f954:	f000 f81a 	bl	801f98c <_malloc_usable_size_r>
 801f958:	4284      	cmp	r4, r0
 801f95a:	4606      	mov	r6, r0
 801f95c:	d802      	bhi.n	801f964 <_realloc_r+0x34>
 801f95e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801f962:	d8f4      	bhi.n	801f94e <_realloc_r+0x1e>
 801f964:	4621      	mov	r1, r4
 801f966:	4638      	mov	r0, r7
 801f968:	f7ff f9b6 	bl	801ecd8 <_malloc_r>
 801f96c:	4680      	mov	r8, r0
 801f96e:	b908      	cbnz	r0, 801f974 <_realloc_r+0x44>
 801f970:	4645      	mov	r5, r8
 801f972:	e7ec      	b.n	801f94e <_realloc_r+0x1e>
 801f974:	42b4      	cmp	r4, r6
 801f976:	4622      	mov	r2, r4
 801f978:	4629      	mov	r1, r5
 801f97a:	bf28      	it	cs
 801f97c:	4632      	movcs	r2, r6
 801f97e:	f7ff fc81 	bl	801f284 <memcpy>
 801f982:	4629      	mov	r1, r5
 801f984:	4638      	mov	r0, r7
 801f986:	f7ff fc8b 	bl	801f2a0 <_free_r>
 801f98a:	e7f1      	b.n	801f970 <_realloc_r+0x40>

0801f98c <_malloc_usable_size_r>:
 801f98c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801f990:	1f18      	subs	r0, r3, #4
 801f992:	2b00      	cmp	r3, #0
 801f994:	bfbc      	itt	lt
 801f996:	580b      	ldrlt	r3, [r1, r0]
 801f998:	18c0      	addlt	r0, r0, r3
 801f99a:	4770      	bx	lr

0801f99c <_init>:
 801f99c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f99e:	bf00      	nop
 801f9a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f9a2:	bc08      	pop	{r3}
 801f9a4:	469e      	mov	lr, r3
 801f9a6:	4770      	bx	lr

0801f9a8 <_fini>:
 801f9a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f9aa:	bf00      	nop
 801f9ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f9ae:	bc08      	pop	{r3}
 801f9b0:	469e      	mov	lr, r3
 801f9b2:	4770      	bx	lr
